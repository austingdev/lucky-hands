<?php 
namespace VanguardLTE\Games\FiveLionsMegawaysPM;

use Illuminate\Support\Facades\Http;
use VanguardLTE\Jobs\PPSubmitRound;

class Server
{
    public function get($request, $game) // changed by game developer
    {
        $response = '';
        \DB::beginTransaction();
        $userId = \Auth::id();// changed by game developer
        if( $userId == null ) 
        {
            $response = 'unlogged';
            exit( $response );
        }
        $user = \VanguardLTE\User::lockForUpdate()->find($userId);

        $slotSettings = new SlotSettings($game, $userId);
        $this->slotSettings = $slotSettings;
        
        $slotEvent = $request->all();
        if( !isset($slotEvent['action']) ) 
        {
            return '';
        }
        
        $BALANCE = $slotSettings->GetBalance();
        $LASTSPIN = $slotSettings->GetHistory();
        // $LASTSPIN = null;

        $slotEvent['slotEvent'] = $slotEvent['action'];

        if( $slotEvent['slotEvent'] == 'doInit' ) 
        { 
            $objRes = $this->doInit($slotEvent, $slotSettings, $LASTSPIN);
        }
        else if( $slotEvent['slotEvent'] == 'doSpin' ) 
        {
            [$objRes, $winType, $slotEvent, $isTumble] = $this->doSpin($slotEvent, $slotSettings, $LASTSPIN);
            
            $this->submitRound($slotSettings, $slotEvent, $objRes, $winType, $isTumble);
        }
        else if ($slotEvent['slotEvent'] == 'doFSOption') {
            $objRes = $this->doFSOption($slotEvent, $slotSettings, $LASTSPIN);

            $this->submitRound($slotSettings, $slotEvent, $objRes);
        }
        else if( $slotEvent['slotEvent'] == 'doCollect') 
        {
            $objRes = $this->doCollect($slotEvent);
            
            $this->submitRound($slotSettings, $slotEvent, $objRes);
        }
        else if( $slotEvent['slotEvent'] == 'update' ) 
        {
            /* in respin load balance at the beginning */
            if ((isset($LASTSPIN->na) && $LASTSPIN->na == 'fso') || isset($LASTSPIN->fsopt_i)) {
                $BALANCE = $LASTSPIN->balance;
            }

            $objRes = [
                'balance_bonus' => '0.00',
                'balance' => $BALANCE,
                'balance_cash' => $BALANCE,
                'stime' => floor(microtime(true) * 1000),
            ];
        }

        $slotSettings->SaveGameData();
        \DB::commit();
        return $this->toResponse($objRes);
    }

    public function doInit($slotEvent, $slotSettings, $LASTSPIN) {
        $BALANCE = $slotSettings->GetBalance();

        $objRes = [
            'def_s' => '4,7,5,6,7,11,12,7,6,9,7,9,13,7,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13',
            'balance' => $BALANCE,
            'nas' => '13',
            'cfgs' => '4957',
            'ver' => '2',
            'index' => $slotEvent['index'],
            'balance_cash' => $BALANCE,
            'def_sb' => '4,11,6,11,9,11',
            'reel_set_size' => '9',
            'def_sa' => '6,3,6,3,7,11',
            'reel_set' => '0',
            'balance_bonus' => '0',
            'wrlm_sets' => '2~0~1,2,3,5,8,10,15,30,40~1~2,3,5~2~3,5,8~3~5,8,10~4~8,10,15~5~10,15,30~6~15,30,40',
            'na' => 's',
            'scatters' => '1~100,25,5,3,0,0~0,0,0,0,0,0~1,1,1,1,1,1',
            'gmb' => '0,0,0',
            'rt' => 'd',
            'gameInfo' => '{props:{max_rnd_sim:"1",max_rnd_hr:"924214",max_rnd_win:"5000",max_rnd_win_a:"4000"}}',
            'wl_i' => 'tbm~5000;tbm_a~4000',
            'bl' => '0',
            'stime' => floor(microtime(true) * 1000),
            'sa' => '6,3,6,3,7,11',
            'sb' => '4,11,6,11,9,11',
            'sc' => implode(',', $slotSettings->Bet), // 10,20,30,40,50,100,200,300,400,500,750,1000,2000,3000,4000,5000
            'defc' => '100',
            'purInit_e' => '1',
            'sh' => '7',
            'wilds' => '2~0,0,0,0,0,0~1,1,1,1,1,1',
            'bonuses' => '0',
            'fsbonus' => '',
            'c' => '100',
            'sver' => '5',
            'bls' => '20,25',
            'counter' => ((int)$slotEvent['counter'] + 1),
            'paytable' => '0,0,0,0,0,0;0,0,0,0,0,0;0,0,0,0,0,0;500,80,40,20,0,0;100,50,25,15,0,0;100,30,15,10,0,0;50,25,10,6,0,0;50,20,10,6,0,0;25,10,6,4,0,0;25,10,6,4,0,0;20,8,4,2,0,0;20,8,4,2,0,0;20,8,4,2,0,0;0,0,0,0,0,0',
            'l' => '20',
            'total_bet_max' => '10,000,000.00',
            'reel_set0' => '8,6,12,6,6,6,10,8,6,12,10,8,8,8,1,8,12,6,10,4,4,4,8,8,12,8,6,12,12,12,4,4,12,4,6,12~1,7,3,3,3,7,5,9,7,7,7,9,11,11,3~6,3,3,3,3,12,9,9,9,11,1,12,12,12,5,12,6,8,8,8,7,11,6,6,6,9,5,5,5,5,10,8,10,10,10,10,4,3,10~5,9,10,10,10,8,10,12,3,3,3,10,6,4,1,8,8,8,9,6,8,12,12,12,4,10,7,3,9,9,9,12,3,4,6,6,6,12,8,11,6,9~6,12,9,8,11,7,9,7,9,9,9,9,12,8,11,9,11,12,8,8,5,12,7,12,12,12,6,3,6,9,10,12,9,7,10,6,10,5,5,5,11,12,8,3,1,8,4,9,5,12,8,6,6,6,11,12,11,11,9,5,10,11,7,10,4,6~10,7,7,7,12,9,10,3,3,3,8,4,10,10,10,8,3,5,11,11,11,7,12,12,12,12,9,9,12,4,4,4,9,10,9,9,9,7,1,12,8,8,8,11,4,11,7',
            's' => '4,7,5,6,7,11,12,7,6,9,7,9,13,7,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13',
            'reel_set2' => '4,12,12,6,12,6,6,12,8,6,6,6,12,4,6,10,12,4,10,8,12,12,6,8,8,8,8,12,8,6,8,6,6,8,4,12,4,4,4,12,8,8,10,4,6,8,8,10,1,12,12,12,12,10,1,12,4,12,8,6,10,10,4,6,12~7,9,5,9,7,11,11,7,5,11,5,9,11,3,7,11,7,3,3,3,9,9,7,5,9,1,11,11,3,9,11,7,5,9,11,3,9,7,5,11~6,5,11,4,8,3,3,3,12,10,4,10,6,3,8,9,9,9,9,6,10,12,11,9,7,12,12,12,3,4,3,8,9,10,8,8,8,11,12,5,6,11,10,3,6,6,6,5,11,3,3,5,12,6,5,5,5,7,10,12,8,1,3,12,11~8,10,10,10,11,12,12,3,3,3,3,9,8,8,8,10,8,4,12,12,12,5,7,9,9,9,9,1,9,6,6,6,10,4,6,6~9,10,11,8,8,12,1,6,9,7,9,9,9,12,9,12,6,11,9,6,6,8,6,9,8,12,12,12,7,12,3,11,9,11,11,3,5,8,12,5,5,5,10,11,10,8,10,4,10,5,8,9,12,12,6,6,6,6,9,5,11,9,12,11,10,7,4,11,7,9~4,11,9,4,7,7,7,7,9,10,7,12,7,5,3,3,3,5,8,9,12,7,1,10,10,10,5,12,10,3,12,8,7,11,11,11,4,11,12,4,12,9,12,12,12,10,9,12,9,7,9,4,4,4,7,10,7,3,9,10,9,9,9,10,3,9,4,12,11,11,12',
            't' => '243',
            'reel_set1' => '5,11,7,5,9,11,9,9,3,11,11,7,11,11,9,3,3,3,1,7,9,9,7,9,7,11,11,9,5,3,11,5,7,9,7,7,7,7,7,5,9,7,5,9,11,7,7,3,7,9,11,3,11,11,5~4,6,6,6,6,6,8,12,8,8,8,8,12,8,4,4,4,8,4,1,12,12,12,10,12,6,10,12~6,3,3,3,6,8,9,9,9,12,12,12,12,12,10,10,8,8,8,1,4,6,6,6,5,7,5,5,5,9,11,10,10,10,11,3,3~11,6,12,3,12,9,10,9,10,10,10,12,10,7,10,9,12,10,10,9,3,3,3,8,6,4,12,8,3,3,9,4,8,8,8,4,8,6,7,4,12,10,9,11,12,12,12,4,6,3,10,6,5,3,9,4,9,9,9,6,12,1,4,8,5,10,12,8,6,6,6,4,8,9,3,8,8,11,6,9,6~6,8,10,4,11,5,7,7,3,6,9,9,9,9,6,12,9,11,12,3,12,11,10,8,6,9,7,12,12,12,1,8,12,8,6,12,5,9,9,8,10,12,5,5,5,9,11,10,7,9,6,12,9,9,8,11,8,10,6,6,6,5,11,11,8,12,11,4,10,11,7,7,9,12,12~9,7,11,7,7,7,12,10,9,10,5,3,3,3,10,8,9,11,8,10,10,10,7,9,5,12,11,11,11,7,9,11,12,7,12,12,12,3,9,7,4,4,4,4,4,12,12,9,12,9,9,9,10,8,12,10,7,8,8,8,4,7,3,4,1,11',
            'reel_set4' => '8,4,4,9,5,8,9,9,5,12,9,12,9,8,8,11,3,9,4,6,10,9,10,8,3,9,8,10,4,3,5,11,8,3,3,3,5,9,6,9,10,3,9,9,12,7,11,8,7,8,9,9,8,4,3,11,11,6,6,7,1,3,11,5,5,3,9,4,7,11,8,8,8,6,9,8,9,7,6,3,11,11,4,12,3,7,9,9,12,3,9,10,10,8,10,12,9,10,5,8,11,12,10,10,9,8,11,9,9,9,8,7,12,5,11,7,9,11,7,8,12,10,12,11,8,5,7,8,5,8,9,7,12,3,11,10,12,12,9,5,4,6,10,8,11,11,11,11,9,12,4,6,7,11,8,8,6,8,12,9,11,12,11,7,3,7,12,4,10,8,11,8,5,9,4,4,8,6,4,9,10,11,10,10,10,10,11,5,7,8,7,8,10,9,11,6,11,8,12,10,8,4,8,8,5,1,5,4,12,7,4,12,8,8,12,7,9,9,8,4,4,4,10,11,10,10,3,11,10,7,7,9,8,9,5,7,11,5,8,12,11,11,8,9,12,10,9,8,4,9,9,4,8,6,11,10,5,5,5,11,12,11,1,11,9,10,5,10,4,12,11,12,10,11,9,6,11,5,7,4,5,7,5,9,7,6,12,1,12,6,11,11,4,8,12,12,12,8,9,10,11,10,5,10,8,9,7,4,3,8,9,11,5,10,9,5,11,11,12,5,5,12,12,9,4,9,10,6,5,8,4,7,7,7,8,9,8,5,5,6,4,4,11,11,12,10,3,12,12,8,11,11,10,11,12,10,9,12,11,3,7,3,8,3,6,10,4,8,6,6,6,12,4,10,4,5,8,10,6,9,6,10,10,11,8,3,6,9,9,10,12,6,10,8,9,11,6,12,4,3,8,4,7,5,6,9,10~12,8,6,5,11,12,6,10,11,12,2,12,10,4,10,10,9,6,12,5,6,12,5,8,8,6,7,10,11,9,8,7,6,3,5,5,5,11,12,5,8,12,8,12,5,4,10,11,1,5,10,3,10,12,12,4,12,4,6,8,1,11,10,11,11,7,10,10,11,5,1,12,5,11,11,11,6,6,8,7,11,7,9,7,4,6,11,8,4,7,4,6,4,10,8,11,6,1,8,6,12,8,10,9,6,6,11,9,7,8,3,4,4,4,11,4,8,6,11,8,5,7,6,8,8,12,8,5,9,8,12,11,11,8,6,11,12,7,10,8,11,6,9,6,12,6,10,8,10,11,8,8,8,5,2,12,12,8,11,6,10,5,10,12,12,5,3,7,11,11,10,5,12,10,2,11,6,7,1,12,10,7,9,5,3,11,9,5,4,12,12,12,4,6,12,6,3,4,8,8,5,11,4,12,6,8,6,6,12,11,10,11,9,12,4,3,7,7,4,5,6,12,8,5,7,6,8,6,6,6,12,11,12,11,6,6,12,12,10,9,8,7,7,12,7,3,10,4,6,7,8,11,11,4,6,10,9,10,6,6,12,9,4,5,12,10,10,10,10,9,2,7,7,2,10,11,4,5,8,11,4,12,6,11,7,5,8,6,11,11,4,8,12,7,12,10,8,12,5,5,6,2,10,8,12,9,9,9,8,8,5,8,12,3,10,12,2,8,7,12,12,4,8,6,11,3,10,2,10,7,7,4,10,10,8,11,6,3,10,5,12,11,9,7,7,7,6,7,5,10,4,10,6,8,6,8,11,7,8,6,6,12,6,6,11,11,12,12,6,8,6,3,4,12,6,8,8,10,6,6,11,4,3,3,3,8,8,10,7,5,9,10,8,12,7,2,11,6,4,6,11,11,9,11,6,10,8,5,10,11,10,12,8,8,3,4,4,7,6,10,12,7~11,6,10,3,10,8,4,9,8,2,3,11,11,9,11,3,10,8,3,2,10,10,10,9,6,10,8,7,8,3,3,9,10,3,5,7,5,8,5,10,10,6,7,12,9,9,9,6,10,9,10,10,9,3,8,11,6,4,11,12,11,12,1,11,4,4,6,10,12,12,12,10,4,12,7,12,11,11,7,12,11,9,3,3,10,11,10,7,10,12,11,5,3,3,3,8,5,3,11,8,10,6,11,10,5,3,5,9,8,10,12,12,5,11,11,10,6,6,6,6,12,3,6,11,9,6,6,11,2,11,9,3,11,10,10,6,11,8,2,5,8,8,8,8,6,11,8,5,10,7,5,2,7,5,10,8,10,5,11,1,6,10,12,6,11,5,5,5,11,3,11,9,10,10,5,9,6,5,8,5,12,10,8,10,9,11,7,11,11,11,11,11,10,11,3,9,12,10,9,6,12,11,6,5,3,11,8,9,3,11,6,12,7,4,4,4,6,12,10,11,8,12,6,10,9,11,7,12,11,10,5,5,3,8,12,12,7,7,7,7,7,12,3,3,11,11,6,12,5,10,8,5,12,10,6,5,12,12,1,10,6,6,3~12,3,5,4,12,12,10,5,9,8,4,9,1,8,5,9,3,4,4,8,8,5,11,11,9,8,11,8,9,4,4,5,7,8,4,4,4,4,12,7,6,6,5,12,12,8,9,12,5,8,9,12,2,12,8,9,4,7,9,5,7,9,3,7,6,5,3,9,8,11,9,3,11,8,9,9,9,4,1,7,4,5,9,9,5,11,10,5,5,11,3,10,3,3,11,5,8,11,6,6,4,11,8,9,4,3,11,9,7,9,9,8,6,8,8,8,3,5,12,9,9,11,8,5,7,5,2,9,7,12,10,11,11,7,3,4,12,4,3,6,4,11,7,12,1,7,4,4,8,8,11,4,5,5,5,11,10,3,10,12,8,11,3,12,3,12,9,6,6,3,8,12,1,6,4,6,4,9,9,12,5,3,9,12,7,12,4,8,6,9,4,6,6,6,11,12,4,10,9,4,9,12,8,11,11,9,4,4,9,8,9,12,9,4,9,4,3,6,10,4,5,9,5,9,12,9,4,9,11,6,12,12,12,7,9,4,3,6,3,12,3,12,12,8,3,3,5,5,8,6,6,7,8,4,10,6,4,7,1,6,12,9,11,10,9,7,5,9,7,10,10,10,11,6,3,11,4,9,4,8,5,6,6,7,9,6,12,12,7,5,6,8,11,9,8,10,5,10,2,4,12,7,3,3,9,8,10,9,11,11,11,5,12,11,3,4,12,4,5,10,7,12,4,4,7,11,7,7,9,12,7,9,9,5,9,9,3,7,6,11,8,12,5,10,5,3,9,3,3,3,4,8,9,9,12,6,12,10,8,6,9,6,4,9,8,12,9,9,6,11,9,4,8,12,4,12,5,8,12,9,11,12,6,3,10,4,7,7,7,7,2,10,7,3,5,8,3,12,8,8,10,11,6,3,12,9,12,9,8,10,3,4,2,6,11,4,6,8,10,4,6,4,4,8,9,5,11~11,8,3,11,11,8,10,1,12,8,12,8,8,10,11,6,12,11,6,9,7,9,8,8,12,7,4,12,12,11,1,8,6,11,8,12,12,12,9,9,4,12,8,10,5,11,10,12,7,12,12,8,12,9,8,6,6,4,8,11,6,8,6,9,9,10,4,5,6,7,10,8,6,12,9,6,6,6,7,6,2,8,5,6,10,8,7,10,6,12,6,12,2,12,8,9,11,8,4,10,11,8,10,6,6,11,12,8,9,6,9,10,12,10,8,8,8,8,11,10,1,12,12,10,11,9,2,10,6,12,8,8,12,11,3,10,11,10,12,10,11,11,10,11,6,7,3,10,6,12,6,7,4,9,4,4,4,10,6,5,10,10,4,11,11,10,11,10,7,7,8,8,9,8,4,8,11,10,11,8,8,6,11,8,4,12,8,11,9,7,8,12,8,8,10,10,10,11,10,12,5,12,12,10,11,10,6,7,12,7,8,8,7,8,11,10,10,9,6,6,9,12,9,10,4,6,6,8,11,6,12,8,9,12,8~11,5,7,11,7,7,7,7,8,9,12,12,5,7,4,3,3,3,9,12,11,12,4,9,3,9,9,9,5,3,12,10,6,9,5,5,5,11,7,10,11,10,5,9,11,11,11,9,10,7,1,11,4,9,5',
            'purInit' => '[{type:"fsbl",bet:2000,bet_level:0}]',
            'reel_set3' => '1,7,7,3,3,3,5,9,9,11,11,3~12,10,12,12,8,12,8,12,6,6,6,6,6,12,6,6,10,12,4,8,8,8,8,8,10,12,10,10,8,4,12,6,12,4,4,4,4,6,8,6,4,10,1,6,4,8,12,12,12,12,4,12,8,8,6,8,12,6,6,12,4~5,11,6,3,3,3,3,5,9,3,11,11,9,9,9,12,6,12,8,4,12,12,12,3,12,8,12,10,8,8,8,6,3,9,4,11,6,6,6,8,10,3,11,6,5,5,5,10,1,7,10,5,10~11,3,4,8,10,10,10,12,6,6,4,10,10,3,3,3,5,11,4,9,4,8,8,8,3,8,9,5,12,4,12,12,12,6,9,9,12,10,9,9,9,10,12,8,10,7,1,6,6,6,7,6,12,8,8,9,9~11,7,8,9,10,9,8,8,11,10,9,9,9,1,10,5,4,12,11,11,9,8,4,12,8,12,12,12,5,5,6,9,12,6,10,6,12,8,9,5,5,5,8,11,6,3,6,9,3,11,7,9,12,9,6,6,6,11,11,6,12,10,9,7,7,9,12,11,10,12~7,7,11,7,9,7,7,7,10,9,10,12,9,12,3,3,3,4,9,11,7,10,5,10,10,10,5,10,12,9,4,9,11,11,11,10,12,7,11,3,3,12,12,12,8,1,5,12,9,12,4,4,4,12,9,4,9,11,12,9,9,9,4,7,10,8,3,7,12,4',
            'reel_set6' => '6,12,4,10,4,10,6,12,6,10,6,6,6,8,8,12,6,8,6,12,4,8,4,6,8,8,8,4,12,12,10,12,4,4,12,8,12,8,4,4,4,10,6,12,12,10,6,6,4,8,6,8,12,12,12,12,10,12,12,8,8,6,8,8,12,10,6,8~7,7,3,5,9,9,9,7,5,9,7,11,3,3,3,10,5,11,9,3,7,7,7,7,9,9,11,11,9,11~3,6,3,3,3,10,10,12,9,9,9,9,3,4,6,12,12,12,11,5,3,8,8,8,11,10,7,6,6,6,10,3,9,6,5,5,5,8,5,12,10,10,10,10,12,8,11,5~6,10,10,10,6,8,3,3,3,8,12,8,8,8,12,10,10,12,12,12,4,4,9,9,9,5,7,6,6,6,9,9,11,3~11,10,4,6,5,12,9,9,8,8,9,9,9,9,7,8,11,9,3,8,12,12,8,12,12,12,12,10,3,11,12,9,11,12,11,11,9,10,5,5,5,6,7,7,12,11,7,4,12,11,9,12,6,6,6,10,8,8,9,7,6,5,6,5,10,9,6~12,4,9,7,7,7,7,9,7,4,7,10,5,3,3,3,7,10,9,8,10,10,10,10,12,7,12,9,3,11,11,11,11,5,9,9,10,8,12,12,12,8,7,7,10,11,7,4,4,4,11,3,12,9,10,9,9,9,4,9,9,11,12,8,8,8,8,12,4,12,11,12,4,12',
            'reel_set5' => '9,12,3,1,4,10,10,9,9,10,7,12,11,12,8,8,4,11,4,3,12,3,11,6,7,5,10,5,12,3,3,3,8,12,8,5,11,10,9,11,3,8,12,4,10,10,9,6,11,10,10,9,4,9,9,7,5,8,10,3,6,6,12,8,8,8,5,4,9,9,7,11,9,11,5,11,12,9,8,9,7,11,8,4,11,10,4,3,3,10,11,4,11,8,12,11,3,9,9,9,12,8,12,5,9,8,10,8,1,8,9,12,12,11,11,4,9,4,10,6,4,5,4,10,8,6,3,5,11,12,9,11,11,11,11,10,8,10,8,11,11,10,6,12,8,12,9,8,5,11,10,6,10,9,4,3,11,8,12,11,11,12,7,5,11,10,10,10,7,3,9,11,12,7,10,4,11,1,6,3,8,3,5,7,9,7,8,8,3,9,10,4,11,9,6,4,6,12,4,4,4,4,8,5,11,12,3,12,5,8,12,9,10,8,8,11,11,9,8,9,8,12,4,4,5,9,10,9,9,12,9,12,8,5,5,5,10,8,10,8,4,10,11,6,8,4,11,7,8,6,8,10,11,11,10,8,5,8,6,8,8,7,5,5,10,5,9,12,12,12,10,8,4,9,4,12,9,10,7,11,6,9,6,9,11,12,11,6,7,10,12,8,7,8,4,4,12,3,6,9,9,7,7,7,6,9,9,8,5,5,9,7,10,7,7,10,11,12,5,9,8,5,8,11,7,12,4,5,8,4,6,10,7,5,3,6,6,6,11,8,9,10,7,5,9,11,7,9,9,12,6,11,9,5,1,7,10,7,8,9,8,9,7,5,3,11,11,9,8,12~6,5,11,3,10,12,5,5,5,6,7,5,10,12,6,8,11,11,11,5,8,6,4,4,3,10,1,4,4,4,8,12,6,7,10,3,11,8,8,8,6,10,11,6,6,4,12,8,12,12,12,11,11,8,10,12,11,9,6,6,6,2,8,12,10,11,8,4,8,10,10,10,7,5,5,12,4,7,11,9,9,9,5,12,9,6,6,12,6,2,7,7,7,7,8,4,8,10,7,9,3,3,3,6,12,7,12,11,9,8,10,11~2,8,11,8,5,11,11,6,12,6,10,11,3,10,12,4,10,9,6,10,3,3,10,10,10,8,7,5,6,7,9,3,9,8,11,3,4,11,12,10,3,11,3,5,10,10,1,6,5,9,9,9,11,10,9,8,8,6,12,3,9,12,5,10,2,3,12,7,3,11,8,12,8,8,11,11,12,12,12,10,7,10,12,10,9,10,5,5,8,7,6,7,11,8,6,9,10,6,9,7,10,4,12,3,3,3,12,5,12,10,10,11,10,8,11,3,12,11,9,7,6,11,10,8,11,9,10,9,5,2,6,6,6,9,11,10,11,10,11,1,11,11,6,11,10,10,11,6,10,11,6,8,11,10,11,10,8,8,8,10,6,12,5,11,12,6,10,11,7,7,11,6,3,5,11,12,5,9,8,12,5,9,10,5,5,5,8,12,11,5,3,1,5,3,7,6,12,5,8,12,10,10,3,3,9,11,11,5,7,6,11,11,11,8,6,11,6,11,6,3,10,3,5,2,11,10,10,4,6,12,5,10,12,5,11,3,11,4,4,4,3,11,5,12,9,6,9,10,7,9,11,12,3,11,3,10,5,3,8,12,10,12,7,6,7,7,7,6,10,5,9,3,2,12,11,12,5,3,4,6,6,9,12,8,10,2,6,5,11,8,4,8~5,4,12,4,9,6,12,12,9,5,1,7,11,4,4,9,12,10,11,5,9,12,9,8,7,6,5,12,4,4,4,2,8,9,11,9,3,10,7,9,11,9,8,10,8,6,5,12,7,12,6,10,11,12,5,12,7,8,11,3,9,9,9,6,9,3,11,8,6,4,6,6,12,3,9,12,9,8,4,2,3,12,9,7,9,8,4,10,9,4,6,4,8,8,8,8,4,12,12,8,5,11,4,6,11,5,9,12,12,8,9,12,4,5,3,6,12,7,9,10,5,6,5,7,5,5,5,9,3,11,6,3,9,5,4,8,10,9,7,10,11,12,7,10,3,8,7,9,12,3,7,12,3,12,7,10,6,6,6,4,8,9,8,10,9,6,5,8,8,11,6,6,5,8,9,7,8,3,5,9,10,7,3,3,4,9,8,9,6,12,12,12,5,11,8,11,9,10,12,9,9,5,3,4,3,3,12,4,9,12,4,11,9,8,8,1,5,11,8,6,1,10,10,10,4,12,9,7,7,9,9,4,8,7,8,4,12,9,12,9,8,12,2,8,11,9,9,4,2,4,9,12,5,11,11,11,5,7,6,4,9,5,3,3,4,4,3,4,11,11,5,7,5,12,4,9,8,4,6,4,4,8,4,9,11,3,3,3,9,12,9,4,4,5,11,7,4,12,8,9,10,4,5,8,6,7,10,6,6,8,3,12,10,3,12,6,6,7,7,7,11,7,6,4,3,8,7,12,3,5,12,11,4,11,11,6,5,4,1,4,9,4,9,9,11,3,9,3,11,10,3~10,10,9,8,6,8,8,6,6,9,8,5,8,12,12,12,1,6,6,8,10,12,7,12,2,9,7,9,12,8,12,6,6,6,1,12,6,10,8,7,8,4,8,9,11,6,3,7,8,8,8,8,10,6,6,11,9,11,8,10,11,11,10,10,5,12,4,4,4,10,11,4,9,10,6,11,11,10,4,8,8,12,12,10,10,10,7,12,11,11,6,11,10,10,7,8,12,9,4,12,12,11~7,10,11,9,9,7,7,8,7,5,9,5,9,9,11,10,10,4,1,11,11,4,4,7,9,5,3,9,10,7,7,7,7,9,5,4,10,12,5,12,10,5,4,7,9,10,9,9,8,9,7,11,6,11,5,1,4,5,9,10,7,9,12,3,3,3,11,5,12,11,5,9,11,10,9,5,3,12,5,9,7,7,9,5,7,5,12,11,9,11,5,1,11,5,9,10,12,9,9,9,12,7,9,5,3,3,12,7,12,4,9,4,11,9,11,5,11,11,9,4,7,10,3,12,7,9,8,11,10,9,5,5,5,6,7,11,11,5,11,1,9,5,9,7,11,11,7,12,10,3,5,7,12,8,9,5,9,7,12,12,9,5,11,10,11,11,11,11,3,12,6,11,6,12,4,7,4,3,12,11,12,11,11,4,11,9,12,12,10,10,11,7,5,10,12,5,9,9,12',
            'reel_set8' => '7,9,6,11,11,12,10,8,6,4,3,9,12,4,9,10,4,4,8,3,3,3,11,9,4,11,9,10,9,6,9,11,12,8,12,11,10,11,10,7,4,5,8,8,8,8,3,7,7,8,7,1,10,10,12,5,3,3,4,8,6,5,4,3,10,9,9,9,5,9,3,12,5,5,12,3,11,6,8,1,11,11,7,11,3,3,7,8,11,11,11,11,8,12,6,6,11,9,5,9,8,11,6,5,6,10,9,12,5,3,9,4,10,10,10,12,8,5,10,4,10,7,9,7,10,11,11,12,10,5,9,10,8,6,12,4,4,4,4,5,6,8,8,11,9,12,8,12,5,7,9,8,11,12,8,9,11,4,5,5,5,9,12,12,11,9,11,8,4,9,9,7,11,5,11,11,10,5,8,8,4,5,12,12,12,7,12,10,7,5,12,9,3,10,1,9,9,7,4,9,10,6,11,8,8,7,7,7,9,7,10,10,8,9,8,11,9,9,4,4,7,11,8,6,9,11,12,4,6,6,6,10,11,12,3,5,8,10,8,12,12,8,8,10,8,8,9,8,10,9,11,10,6~6,12,10,10,8,12,7,10,12,7,6,7,8,12,6,8,11,8,9,12,9,6,9,11,11,6,10,11,6,8,2,11,5,5,5,4,11,4,11,10,5,8,4,6,12,10,7,11,10,10,12,6,5,5,4,8,9,7,12,11,8,11,12,10,12,9,12,11,11,11,11,11,6,7,4,11,10,12,8,7,10,5,1,6,12,10,5,6,6,8,6,10,2,6,12,4,6,10,2,5,6,8,7,8,8,9,4,4,4,6,6,10,3,6,5,9,9,2,11,11,10,12,6,8,3,3,12,6,11,9,10,10,9,8,7,9,7,6,11,4,1,4,12,8,8,8,6,7,4,12,8,10,7,10,7,5,10,12,12,6,7,12,8,4,12,3,7,2,8,6,10,4,3,7,8,11,10,4,12,8,12,12,12,7,4,10,12,10,2,10,12,6,7,5,8,12,10,4,6,6,10,12,10,10,12,7,6,7,8,10,12,10,5,12,11,8,4,6,6,6,11,6,7,11,3,4,10,8,12,5,4,11,6,8,4,5,7,11,5,2,11,5,1,7,8,11,8,11,5,1,6,3,4,6,10,10,10,11,4,8,10,5,8,12,4,11,6,6,7,3,8,7,5,6,5,12,12,7,12,2,7,8,6,11,6,9,10,8,10,12,4,9,9,9,12,6,8,4,5,9,9,8,8,12,6,8,2,4,11,6,8,10,6,9,10,8,12,11,7,8,12,11,10,5,11,6,12,11,7,7,7,5,5,10,7,12,3,8,11,4,6,12,8,6,11,8,6,7,6,10,4,2,6,11,6,12,10,6,11,5,11,12,11,11,2,3,3,3,11,6,8,6,6,11,5,8,12,12,9,8,7,2,5,12,11,3,8,12,8,11,3,8,6,5,5,10,8,3,11,8,11,4,12~7,12,11,11,5,9,12,3,11,11,10,12,6,5,3,6,10,3,11,5,5,10,8,11,7,10,12,1,10,3,10,10,10,12,5,9,8,6,8,6,3,5,11,12,10,12,8,3,7,10,11,3,3,6,7,10,11,3,6,6,10,8,3,8,9,9,9,11,11,3,2,3,11,12,6,8,8,9,12,6,10,12,7,12,10,5,9,10,5,12,10,9,3,7,5,12,10,5,12,12,12,7,8,11,9,10,7,6,11,6,12,12,9,8,12,7,10,5,10,6,11,4,3,8,12,5,10,10,6,7,9,11,3,3,3,1,11,3,11,6,5,10,6,9,5,12,1,2,12,10,12,11,5,2,9,1,10,12,5,12,11,10,3,4,3,5,6,6,6,9,7,11,7,5,12,10,10,9,12,8,10,12,6,10,7,9,8,9,3,10,11,12,6,12,3,11,10,10,8,6,9,8,8,8,11,5,11,6,11,5,5,9,6,12,6,4,8,9,8,9,11,9,3,5,8,10,11,5,3,8,3,6,6,9,10,5,5,5,9,11,5,5,12,11,10,6,11,10,3,4,2,8,4,12,11,10,11,6,11,10,6,11,7,9,10,3,7,11,6,11,11,11,10,4,11,6,3,10,11,4,3,3,11,11,10,8,10,10,3,9,12,10,6,2,6,6,11,6,12,7,10,10,11,4,4,4,10,11,11,6,5,12,2,6,11,5,5,10,8,10,11,7,8,5,9,11,10,7,4,11,6,11,10,11,11,12,9,7,7,7,2,3,12,7,6,8,8,6,10,8,3,11,2,10,11,10,9,8,8,11,12,10,3,11,11,10,8,3,11,8,3,12,11~12,6,5,4,4,11,3,4,4,4,3,5,11,11,6,4,6,8,9,9,9,4,8,4,7,7,5,7,5,4,8,8,8,11,4,8,8,7,6,10,12,5,5,5,4,9,6,10,5,2,5,9,6,6,6,4,3,4,9,8,9,3,7,2,12,12,12,11,8,5,6,11,6,8,9,10,10,10,12,3,9,8,12,3,10,1,11,11,11,12,12,11,9,3,9,9,4,8,3,3,3,11,5,9,9,7,8,10,12,7,7,7,6,3,12,7,9,12,12,10,12,9~11,12,7,11,4,12,10,10,12,12,12,6,10,10,12,9,8,12,12,6,6,2,1,8,8,10,8,8,6,6,10,12,5,12,10,6,5,11,7,10,9,9,10,6,10,10,10,11,12,12,12,12,11,1,12,6,12,9,12,12,9,9,8,11,3,6,9,11,8,3,11,9,12,12,6,8,9,8,10,7,2,4,12,11,8,6,9,7,8,12,4,11,9,12,6,1,12,10,11,6,6,6,6,8,10,7,6,7,8,4,9,8,11,12,11,8,7,12,10,4,10,11,8,8,2,10,6,8,3,7,11,4,10,11,4,7,12,12,6,9,6,11,12,10,6,8,6,10,11,6,8,6,8,8,8,8,8,2,11,6,12,11,8,8,7,8,11,10,2,11,8,8,12,10,5,7,11,8,8,10,6,8,2,6,8,12,6,6,12,12,8,8,6,11,8,10,9,7,11,11,7,4,10,12,8,4,4,4,6,2,9,5,4,8,10,12,5,8,1,8,6,10,8,9,12,10,8,4,6,3,9,12,6,12,8,10,11,6,6,11,8,6,10,8,8,8,12,10,10,8,7,9,8,9,12,10,10,10,6,10,8,8,8,6,8,9,11,7,4,12,12,4,10,7,6,7,5,8,5,10,10,8,11,9,11,4,6,8,10,11,9,11,10,11,11,7,12,11,8,12,7,8,11,11,12,9,12,10,10,8~12,3,1,10,9,12,11,9,5,12,7,6,11,10,5,11,7,12,9,7,9,5,11,10,8,11,5,10,12,5,7,7,7,5,9,11,11,5,10,7,9,4,9,11,5,7,3,9,4,5,11,3,9,9,5,9,12,7,11,12,9,4,5,7,12,3,3,3,5,7,11,10,11,7,5,12,7,11,10,9,9,5,4,11,6,7,7,10,9,3,11,12,9,12,12,11,5,11,9,11,9,9,9,10,9,12,11,4,7,9,11,5,9,6,9,5,10,4,7,12,9,4,9,7,9,11,12,12,10,11,1,5,12,5,5,5,5,9,6,5,8,7,12,5,3,9,9,8,7,9,5,11,12,12,9,11,11,4,3,11,7,4,9,9,11,10,7,5,9,11,11,11,11,11,9,11,12,7,9,5,3,7,12,9,7,10,12,12,10,10,4,11,3,9,4,11,10,4,8,7,7,5,10,10,5',
            'reel_set7' => '12,11,11,4,6,6,8,11,11,4,11,12,12,11,9,11,9,3,3,3,4,8,11,8,3,8,5,6,8,7,7,10,7,10,10,8,1,8,10,8,8,8,5,9,6,7,12,9,9,5,4,5,12,9,8,4,8,12,12,5,9,9,9,11,3,12,4,9,3,10,8,9,8,12,5,5,11,4,6,12,9,11,11,11,11,9,10,7,9,10,8,10,11,12,3,4,12,4,10,3,9,10,12,8,10,10,10,10,8,4,11,5,8,8,6,10,3,5,10,8,4,11,11,12,6,4,4,4,7,10,1,7,6,8,5,7,10,8,9,11,10,11,8,4,9,8,6,5,5,5,3,9,8,5,11,8,11,5,4,4,8,11,6,6,11,6,3,9,9,12,12,12,11,12,6,12,10,7,12,9,10,12,10,12,8,12,9,8,10,8,7,7,7,9,9,8,11,3,9,9,5,9,9,7,5,7,11,11,4,10,10,9,6,6,6,1,9,11,11,4,10,5,4,9,7,9,7,8,3,7,3,5,7,12,5~12,4,10,5,5,5,7,5,12,10,11,11,11,10,9,11,12,9,4,4,4,4,10,11,11,8,8,8,6,8,6,7,11,12,12,12,12,7,4,8,6,6,6,8,2,6,12,8,10,10,10,5,3,6,3,9,9,9,6,10,6,2,5,7,7,7,1,12,8,11,3,3,3,6,8,5,7,4,11~11,12,10,11,8,3,11,10,5,12,10,10,11,6,9,8,6,12,10,6,10,10,10,5,8,4,11,10,3,11,3,8,12,12,10,1,10,6,10,2,8,11,6,8,9,9,9,10,3,11,8,11,12,3,12,3,8,11,10,8,1,9,11,12,11,10,6,11,12,12,12,4,12,3,6,11,11,5,3,3,9,9,12,6,11,2,5,10,3,11,5,7,1,3,3,3,9,10,12,6,8,6,8,6,12,11,6,5,10,6,11,12,6,10,9,12,6,6,6,6,10,11,5,12,12,3,6,3,11,8,3,8,12,9,8,11,5,12,7,7,11,8,8,8,4,10,3,10,5,10,4,8,5,11,11,3,8,9,7,10,6,10,5,9,10,5,5,5,5,12,11,10,9,5,11,11,8,10,3,7,9,10,11,5,7,6,7,2,3,11,11,11,11,10,12,11,6,2,8,10,11,7,8,5,12,6,4,5,6,11,5,3,11,2,4,4,4,6,11,3,9,11,6,6,10,7,9,10,9,3,12,5,9,9,5,10,11,12,7,7,7,10,12,7,10,10,9,5,6,11,12,7,3,10,9,7,10,8,7,10,11,3,11,3~8,5,4,12,6,4,7,9,4,5,5,4,8,7,5,12,6,9,8,1,9,4,4,5,11,2,12,3,9,4,9,4,4,4,6,9,10,7,9,4,12,4,5,9,7,4,3,10,12,2,12,10,9,12,3,4,8,11,5,5,3,4,8,11,4,6,9,9,9,5,7,6,5,6,9,4,10,3,9,9,6,5,4,4,9,8,11,5,7,7,10,5,8,12,10,12,8,7,12,7,5,8,8,8,11,5,6,5,9,6,4,9,9,12,8,5,4,12,5,12,12,7,4,12,4,9,12,9,1,7,11,9,7,5,3,9,5,5,5,6,12,7,5,11,8,3,8,3,11,8,11,3,6,4,9,11,4,6,9,3,4,4,8,3,8,9,12,4,9,11,12,6,6,6,9,6,9,5,10,4,9,11,6,11,1,10,3,6,8,7,6,12,5,7,8,6,4,4,3,3,4,9,10,8,6,5,12,12,12,3,4,3,4,11,5,7,12,4,12,12,2,6,8,12,2,11,12,8,6,12,9,8,10,4,7,7,3,12,9,7,10,10,10,10,2,4,9,8,10,9,11,11,9,9,10,7,11,9,12,6,9,4,9,11,12,11,9,11,5,2,10,8,4,1,3,7,11,11,11,8,10,10,6,7,10,9,12,9,9,12,6,9,4,7,3,12,6,11,8,9,8,6,12,11,9,7,9,11,9,6,8,3,3,3,5,9,4,10,3,9,9,11,9,11,4,8,4,12,3,12,7,3,11,8,4,3,12,3,8,8,12,9,12,5,5,6,7,7,7,8,3,3,8,9,12,3,4,5,11,3,8,8,3,5,12,8,4,10,6,4,11,3,11,2,4,6,12,8,8,6,2,7~12,8,11,6,11,8,8,6,12,12,10,9,6,10,8,6,12,12,6,8,8,11,9,4,12,8,6,8,2,10,6,6,12,12,12,9,10,6,11,6,11,7,6,11,11,10,11,9,9,12,12,8,8,12,10,8,7,11,8,8,10,11,7,12,8,10,6,10,6,6,6,6,7,4,12,10,11,10,9,1,7,2,6,8,1,10,10,12,10,9,12,12,10,6,4,8,9,1,10,7,8,8,8,7,5,8,8,8,11,7,12,10,5,12,6,7,4,8,9,4,8,8,8,11,12,8,9,8,11,11,12,10,4,6,8,11,2,10,4,4,4,5,10,8,8,6,8,3,6,4,11,8,8,11,7,8,10,12,3,11,7,4,8,9,6,11,11,2,12,10,11,12,12,12,10,10,10,12,5,6,9,11,12,8,8,11,10,12,6,8,10,6,10,4,3,10,6,7,11,5,8,6,2,7,9,9,12,10,11,12,12,11~5,11,5,12,9,12,4,9,9,5,7,8,11,7,5,9,9,4,9,5,10,6,12,11,7,7,7,7,4,10,6,9,10,7,9,7,10,7,7,10,9,11,7,5,7,10,3,5,11,11,5,5,12,12,4,3,3,3,9,7,12,1,7,9,12,9,11,12,6,12,5,5,3,10,11,4,12,5,12,8,9,11,9,11,5,9,9,9,9,10,3,11,5,11,7,7,11,11,10,3,5,10,9,10,4,9,11,4,11,11,9,12,8,9,1,5,5,5,11,9,11,4,11,12,6,12,9,12,7,11,3,9,12,11,11,9,12,4,5,9,12,5,9,7,4,11,11,11,5,11,10,12,11,7,9,10,9,10,5,8,12,9,5,11,9,7,10,5,9,11,7,7,3,3,7,5',
            'total_bet_min' => '10',
        ];

        /* load result of last spin */
        if( $LASTSPIN !== NULL ) {
            $objRes['c'] = $LASTSPIN->c ?? $LASTSPIN->start_with->c ?? null;
            $objRes['tw'] = $LASTSPIN->tw ?? $LASTSPIN->start_with->tw ?? null;
            $objRes['w'] = $LASTSPIN->w ?? $LASTSPIN->start_with->w ?? null;
            $objRes['sa'] = $LASTSPIN->sa ?? $LASTSPIN->start_with->sa ?? null;
            $objRes['sb'] = $LASTSPIN->sb ?? $LASTSPIN->start_with->sb ?? null;
            $objRes['s'] = $LASTSPIN->s ?? $LASTSPIN->start_with->s ?? null;
            $objRes['reel_set'] = $LASTSPIN->reel_set ?? $LASTSPIN->start_with->reel_set ?? null;
            $objRes['na'] = $LASTSPIN->na ?? $objRes['na'];
            $objRes['bl'] = $LASTSPIN->bl ?? $LASTSPIN->start_with->bl ?? null;
            $objRes['puri'] = $LASTSPIN->puri ?? $LASTSPIN->start_with->puri ?? null;
            $objRes['purtr'] = $LASTSPIN->purtr ?? $LASTSPIN->start_with->purtr ?? null;

            $objRes['wrlm_c'] = $LASTSPIN->wrlm_c ?? null;
            $objRes['wrlm_cs'] = $LASTSPIN->wrlm_cs ?? null;
            $objRes['wrlm_res'] = $LASTSPIN->wrlm_res ?? null;

            /* winline l0, l1, l2 ... */
            $jsonLASTSPIN = json_decode(json_encode($LASTSPIN), true);
            $winLines = array_filter($jsonLASTSPIN, function ($value, $key) {
                return strlen($key) > 1 && str_starts_with($key, "l");
            }, ARRAY_FILTER_USE_BOTH);

            $objRes = array_merge($objRes, $winLines);

            /* tumble spin */
            $objRes['tmb'] = $LASTSPIN->tmb ?? null;
            $objRes['tmb_win'] = $LASTSPIN->tmb_쟈ㅜ ?? null;
            $objRes['rs_p'] = $LASTSPIN->rs_p ?? null;
            $objRes['rs'] = $LASTSPIN->rs ?? null;
            $objRes['rs_c'] = $LASTSPIN->rs_c ?? null;
            $objRes['rs_m'] = $LASTSPIN->rs_m ?? null;
            $objRes['rs_t'] = $LASTSPIN->rs_t ?? null;

            /* freespin */
            $objRes['fsmul'] = $LASTSPIN->fsmul ?? null;
            $objRes['fsmax'] = $LASTSPIN->fsmax ?? null;
            $objRes['fswin'] = $LASTSPIN->fswin ?? null;
            $objRes['fs'] = $LASTSPIN->fs ?? null;
            $objRes['fsres'] = $LASTSPIN->fsres ?? null;
            $objRes['fsopt_i'] = $LASTSPIN->fsopt_i ?? null;            
            $objRes['psym'] = $LASTSPIN->psym ?? $LASTSPIN->start_with->psym ?? null;
            $objRes['fs_total'] = $LASTSPIN->fs_total ?? null;
            $objRes['fswin_total'] = $LASTSPIN->fswin_total ?? null;
            $objRes['fsmul_total'] = $LASTSPIN->fsmul_total ?? null;
            $objRes['fsres_total'] = $LASTSPIN->fsres_total ?? null;

            /* win amount in tumble, freespin */
            $fsmax = $slotSettings->GetGameData($slotSettings->slotId . 'FSMax');
            if (isset($LASTSPIN->rs) || $LASTSPIN->na == 'fso' || $fsmax > 0) {
                $objRes['balance'] = $LASTSPIN->balance ?? $BALANCE;
                $objRes['balance_cash'] = $LASTSPIN->balance_cash ?? $BALANCE;
            }
        }

        return $objRes;
    }

    public function doSpin($slotEvent, $slotSettings, $LASTSPIN) {
        $lines = $slotEvent['l'];       // line
        $bet = $slotEvent['c'];         // betting amount

        /* tumble spin */
        $isTumble = isset($LASTSPIN->rs);

        /* check double bet */
        $isDouble = false;
        if ($slotEvent['bl'] == 1) {
            $isDouble = true;

            /* 25 lines in double bet */
            $lines = 25;
        }

        /* tumble bonus */
        $isTumbleBonus = $slotSettings->GetGameData($slotSettings->slotId . 'TumbleBonus') ?? false;

        /* freespin purchase */
        if (isset($slotEvent['pur'])) {
            $slotEvent['slotEvent'] = 'buyBonus';

            [$winType, $_winAvaliableMoney] = $slotSettings->GetSpinSettings($slotEvent['slotEvent'], $bet, $lines, true);
        }
        else if ($isTumbleBonus) {
            $winType = 'bonus';             
            $_winAvaliableMoney = 0;        
        }
        else {
            $fsmax = $slotSettings->GetGameData($slotSettings->slotId . 'FSMax') ?? 0;
            $fs = $slotSettings->GetGameData($slotSettings->slotId . 'FSNext') ?? 0;
            $fsopt = $slotSettings->GetGameData($slotSettings->slotId . 'FSOpt') ?? [];
            $fswildcount = $slotSettings->GetGameData($slotSettings->slotId . 'FSWildCount') ?? 0;
            
            if ($LASTSPIN !== NULL && $fsmax > 0) {
                $slotEvent['slotEvent'] = 'freespin';
            }

            [$winType, $_winAvaliableMoney] = $slotSettings->GetSpinSettings($slotEvent['slotEvent'], $bet, $lines);
        }

        /* update balance */
        if ($slotEvent['slotEvent'] === 'buyBonus') {
            $allBet = $bet * $lines * 100;
            $slotSettings->SetBalance(-1 * $allBet, $slotEvent['slotEvent']);

            /* charge bonus purchase money to bonus bank */
            $bankMoney = $allBet / 100 * $slotSettings->GetPercent();
            $slotSettings->SetBank(($slotEvent['slotEvent'] ?? ''), $bankMoney, 0);
            $slotSettings->SetBet($allBet);
            $slotSettings->UpdateJackpots($allBet);
        }
        else if ($slotEvent['slotEvent'] === 'freespin' || $isTumble) {
            $allBet = 0;
        }
        else {
            $allBet = $bet * $lines;
            $slotSettings->SetBalance(-1 * $allBet, $slotEvent['slotEvent']);
            
            $bankMoney = $allBet / 100 * $slotSettings->GetPercent();
            $slotSettings->SetBank(($slotEvent['slotEvent'] ?? ''), $bankMoney);
            $slotSettings->SetBet($allBet);
            $slotSettings->UpdateJackpots($allBet);
        }

        $BALANCE = $slotSettings->GetBalance();
        
        /* scatter count  */
        $proposedScatterCount = 0;
        if($winType == 'bonus' && $slotEvent['slotEvent'] !== 'freespin') {
            if ($isTumbleBonus) {
                $tumbleBonusStepCount = $slotSettings->GetGameData($slotSettings->slotId . 'TumbleBonusStepCount') ?? 0;
                $curTumbleBonusStep = $slotSettings->GetGameData($slotSettings->slotId . 'TumbleBonusCurrentStep') ?? 0;
                $totalScatterCount = $slotSettings->GetGameData($slotSettings->slotId . 'TumbleBonusScatterCount') ?? 0;
                $proposedScatterCount = $slotSettings->GetGameData($slotSettings->slotId . 'TumbleBonusCurrentScatterCount') ?? 0;

                /* last tumble spin */
                $curTumbleBonusStep += 1;
                if ($curTumbleBonusStep >= $tumbleBonusStepCount) {
                    $proposedScatterCount = $totalScatterCount;
                }
                else if ($proposedScatterCount < $totalScatterCount) {
                    $proposedScatterCount += random_int(0, 1);
                }

                $slotSettings->SetGameData($slotSettings->slotId . 'TumbleBonusCurrentStep', $curTumbleBonusStep);
                $slotSettings->SetGameData($slotSettings->slotId . 'TumbleBonusCurrentScatterCount', $proposedScatterCount);
            }
            else {
                $isTumbleBonus = true;

                // determine scatter count to generate
                $totalScatterCount = $slotSettings->GenerateScatterCount($winType, $slotEvent['slotEvent']);

                /* tumble step */
                $tumbleBonusStepCount = $slotSettings->GenerateBonusStep();

                /* step1 is not tumble bonus */
                /* determine first scatter count, must be not different with 2 from the final count */
                $proposedScatterCount = ($tumbleBonusStepCount == 1) ? $totalScatterCount : random_int(2, $totalScatterCount);
                $curTumbleBonusStep = 1;
                
                $slotSettings->SetGameData($slotSettings->slotId . 'TumbleBonus', true);
                $slotSettings->SetGameData($slotSettings->slotId . 'TumbleBonusStepCount', $tumbleBonusStepCount);
                $slotSettings->SetGameData($slotSettings->slotId . 'TumbleBonusCurrentStep', $curTumbleBonusStep);
                $slotSettings->SetGameData($slotSettings->slotId . 'TumbleBonusScatterCount', $totalScatterCount);
                $slotSettings->SetGameData($slotSettings->slotId . 'TumbleBonusCurrentScatterCount', $proposedScatterCount);
            }
        }
        else {
            $proposedScatterCount = $isTumble ? 0 : $slotSettings->GenerateScatterCount($winType, $slotEvent['slotEvent']);
        }
        
        /* WILD count */
        $proposedWildCount = $slotSettings->GenerateWildCount($winType, $slotEvent['slotEvent']);
        if ($slotEvent['slotEvent'] === 'freespin' && $fsmax <= $fs && $fswildcount == 0) {
            /* if there is no wild during freespin */
            $proposedWildCount = 1;
        }

        /*************************************************** */
        $overtry = false;           // true if more than 1500

        for ($try=0; $try < 2000; $try++) { 
            $winMoney = 0;

            /* reel generation */
            $availableMultipliers = ($slotEvent['slotEvent'] === 'freespin' ? $fsopt['multipliers'] : null);

            $lastSpin = $isTumble ? $LASTSPIN : null;
            $reels = $slotSettings->GetReelStrips($winType, $slotEvent['slotEvent'], $lastSpin, $proposedScatterCount, $proposedWildCount, $availableMultipliers, $overtry);

            if (!$slotSettings->isValidReels($reels)) {
                continue;
            }
            
            /* check winline */
            [$winLines, $needMultiplier] = $this->checkWinLines($reels, $slotSettings);
            
            if ($overtry) {
                break;
            }
            else if( $try > 1500 ) 
            {
                $overtry = true;
                continue;
            }
            else if ( $try >= 1000 ) 
            {
                if ($winType == 'win') {
                    $winType = 'none';
                }

                //in tumble bonus, if there is no winline, generate remaining scatters
                if ($winType == 'bonus' && $isTumbleBonus) {
                    $curTumbleBonusStep = $tumbleBonusStepCount;
                    $proposedScatterCount = $totalScatterCount;
                }
            }

            if ($winType == 'none') {
                if ((count($winLines) == 0) && (count($reels['scatterSymbols']) < 3)) {
                    break;
                }
            }
            else if ($winType == 'win' && count($winLines) > 0) {
                /* spin winning */
                $winMoney = array_reduce($winLines, function($carry, $winLine) {
                    $carry += $winLine['Money']; 
                    return $carry;
                }, 0) * $bet;

                if ($needMultiplier) {
                    $winMoney = $winMoney * $reels['wildMultiplier'];
                }

                if ($winMoney >= $_winAvaliableMoney) {
                    continue;
                }

                break;
            }
            else if ($winType == 'bonus') {
                if ($isTumbleBonus) {
                    /* there should be no winline in tumble bonus finish */
                    if ($curTumbleBonusStep >= $tumbleBonusStepCount) {
                        if (count($winLines) == 0 && count($reels['scatterSymbols']) >= 3) {
                            break;
                        }
                    }
                    else {
                        /* there must be winline in tumble bonus */
                        if (count($winLines) > 0) {
                            /* reg tumble symbol must be at least 2, error if smaller than scatter count  */
                            if ($this->getTumbleSymbolCount($reels, $winLines) < 3) {
                                continue;
                            }

                            /* spin winning */
                            $winMoney = array_reduce($winLines, function($carry, $winLine) {
                                $carry += $winLine['Money']; 
                                return $carry;
                            }, 0) * $bet;

                            if ($needMultiplier) {
                                $winMoney = $winMoney * $reels['wildMultiplier'];
                            }
                            
                            break;
                        }
                    }
                }
                else {
                    /* in non-tumble bonus, start gamble if there is no winline */
                    if (count($winLines) > 0 || count($reels['scatterSymbols']) < 3) {
                        continue;
                    }

                    break;
                }
            }
        }

        /* in case of minor win, calculate winning amount */
        if ($overtry && count($winLines) > 0) {
            $winMoney = array_reduce($winLines, function($carry, $line) {
                $carry += $line['Money']; 
                return $carry;
            }, 0) * $bet;
            
            if ($needMultiplier) {
                $winMoney = $winMoney * $reels['wildMultiplier'];
            }
        }
        
        $objRes = [
            'action' => 'doSpin',

            'tw' => 0,
            'balance' => $BALANCE,
            'index' => $slotEvent['index'],
            'balance_cash' => $BALANCE,
            'balance_bonus' => '0',
            'reel_set' => $reels['reelSetId'],
            'na' => 's',
            'bl' => (int)$isDouble,
            'stime' => floor(microtime(true) * 1000),
            'sa' => implode(",", $reels['symbolsBefore']),
            'sb' => implode(",", $reels['symbolsAfter']),
            'sh' => '7',
            'c' => $bet,
            'sver' => 5,
            'counter' => ((int)$slotEvent['counter'] + 1),
            'l' => $lines,
            's' => implode(",", $reels['flatSymbols']),
            'w' => $winMoney,
        ];

        /* wild symbol info */
        if (count($reels['wildSymbols']) > 0) {
            [$strWilds, $strWildOpt] = $this->stringifyWildSymbols($reels, $winLines, $slotEvent, $slotSettings, $fsopt);
            $objRes['wrlm_res'] = $strWilds;
            $objRes['wrlm_cs'] = $strWildOpt;

            if ($needMultiplier) {
                $objRes['wrlm_c'] = $this->stringifyMultipliedSymbols($reels, $winLines);
            }
        }

        /* tumble winning */
        $tumbleWin = $slotSettings->GetGameData($slotSettings->slotId . 'TumbleTotalWin') ?? 0;

        if ($winMoney > 0) {
            /* winlines */
            foreach ($winLines as $idx => $winLine) {
                $winLineMoney = $winLine['Money'] * $bet;

                if ($needMultiplier) {
                    $winLineMoney =  $winLineMoney * $reels['wildMultiplier'];
                }
                
                /* add winline */
                $payLineId = 0;
                $strLineSymbolPositions = implode("~", $winLine['Positions']);
                $objRes["l${idx}"] = "${payLineId}~${winLineMoney}~${strLineSymbolPositions}";
            }

            /* tumble spin  */
            if ($isTumble) {
                $BALANCE = $LASTSPIN->balance;
                $tumbleCount = $LASTSPIN->rs_p + 1;

                /* accumulate tumble winning */
                $tumbleWin = $tumbleWin + $winMoney;

                /* update tumble winning */
                $slotSettings->SetGameData($slotSettings->slotId . 'TumbleTotalWin', $tumbleWin);
            }
            /* start tumble spin */
            else {
                $tumbleCount = 0;
                $tumbleWin = $winMoney;

                /* save tumble winning */
                $slotSettings->SetGameData($slotSettings->slotId . 'TumbleTotalWin', $winMoney);
            }

            /* tumble spin */
            $objRes['balance'] = $BALANCE;
            $objRes['balance_cash'] = $objRes['balance'];

            $objRes['rs_p'] = $tumbleCount;
            $objRes['rs'] = 'mc';
            $objRes['tw'] = $tumbleWin;
            $objRes['tmb_win'] = $tumbleWin;
            $objRes['w'] = $winMoney;
            $objRes['rs_c'] = 1;
            $objRes['rs_m'] = 1;

            $objRes['tmb'] = $this->stringifyTumbleSymbols($reels, $winLines);
        }
        else {
            /* tumble spin finished */
            if ($isTumble) {
                $objRes['balance'] = $LASTSPIN->balance;
                $objRes['balance_cash'] = $objRes['balance'];

                $objRes['na'] = 'c';
                $objRes['rs_t'] = $LASTSPIN->rs_p + 1;

                $objRes['tmb_res'] = $tumbleWin;
                $objRes['tmb_win'] = $tumbleWin;

                /* in general spin, total winning is the same as tumble winning */
                $objRes['tw'] = $tumbleWin;

                /* reset tumble winning */
                $slotSettings->SetGameData($slotSettings->slotId . 'TumbleTotalWin', 0);
            }
        }

        if ($winType == 'bonus') {
            /* in case of bonus winning condition is not matched, for example overtry = true */
            if ($winMoney == 0 && count($reels['scatterSymbols']) < 3) {
                /* reset tumble bonus */
                $slotSettings->SetGameData($slotSettings->slotId . 'TumbleBonus', false);
                $slotSettings->SetGameData($slotSettings->slotId . 'TumbleBonusStepCount', 0);
                $slotSettings->SetGameData($slotSettings->slotId . 'TumbleBonusCurrentStep', 0);
                $slotSettings->SetGameData($slotSettings->slotId . 'TumbleBonusScatterCount', 0);
                $slotSettings->SetGameData($slotSettings->slotId . 'TumbleBonusCurrentScatterCount', 0);
            }
            else if ($winMoney == 0 && count($reels['scatterSymbols']) >= 3) {
                if ($slotEvent['slotEvent'] == 'freespin') {
                    /* bonus winning for freespin */
                    $fsmax += $fsopt['spin_count'];
                    $slotSettings->SetGameData($slotSettings->slotId . 'FSMax', $fsmax);
                }
                else {
                    /* scatter pos info */
                    $bonusWinMoney = $slotSettings->GetBonusWinMoney($bet * $slotEvent['l'], count($reels['scatterSymbols']));      // 더블벳인경우에도 라인수는 20개로 고정
                    $strScatters = $this->stringifyScatterSymbols($reels['flatSymbols'], $bonusWinMoney);
                    $objRes['psym'] = $strScatters;
                    
                    $winMoney += $bonusWinMoney;
                    $objRes['w'] += $bonusWinMoney;
                    $objRes['tw'] += $bonusWinMoney;
    
                    $objRes['na'] = 'fso';
                    $objRes['puri'] = 0;
                    $objRes['fs_opt_mask'] = 'fs,m,ts,rm';
    
                    $fs_opt = $this->stringifyFSOptions($this->slotSettings->fsOpts);
                    $objRes['fs_opt'] = $fs_opt;
    
                    /* freespin purchase */
                    if ($slotEvent['slotEvent'] === 'buyBonus') {
                        $objRes['purtr'] = 1;
                    }
                    
                    /* reset tumble bonus */
                    $slotSettings->SetGameData($slotSettings->slotId . 'TumbleBonus', false);
                    $slotSettings->SetGameData($slotSettings->slotId . 'TumbleBonusStepCount', 0);
                    $slotSettings->SetGameData($slotSettings->slotId . 'TumbleBonusCurrentStep', 0);
                    $slotSettings->SetGameData($slotSettings->slotId . 'TumbleBonusScatterCount', 0);
                    $slotSettings->SetGameData($slotSettings->slotId . 'TumbleBonusCurrentScatterCount', 0);
                }
            }
        }

        if ($slotEvent['slotEvent'] == 'freespin') {
            $BALANCE = $slotSettings->GetGameData($slotSettings->slotId . 'FSStartBalance');
            
            /* keep freespin winning amount */
            $objRes['tw'] = ($LASTSPIN->tw ?? $LASTSPIN->start_with->tw) + $winMoney;
            $objRes['balance'] = $BALANCE;
            $objRes['balance_cash'] = $BALANCE;
            $objRes['puri'] = 0;
            $objRes['fsopt_i'] = $LASTSPIN->fsopt_i ?? null;

            if ($fsmax > $fs) {
                // during freespin, spintype is always 's'
                $objRes['na'] = 's';
                $objRes['fsmul'] = 1;
                $objRes['fsmax'] = $fsmax;
                $objRes['fs'] = ($winMoney > 0) ? $fs : $fs + 1;      // in tumble spin, freespin is not reduced

                //freespin winning, during tumble spin, keep amount but added after tumble spin is finished
                $objRes['fswin'] =  $LASTSPIN->fswin;
                $objRes['fsres'] = $LASTSPIN->fsres;

                // tumble spin finished
                if ($isTumble && $winMoney == 0) {
                    $objRes['fswin'] += $tumbleWin;
                    $objRes['fsres'] += $tumbleWin;
                }

                $slotSettings->SetGameData($slotSettings->slotId . 'FSNext', $objRes['fs']);
                
                /* wild count during freespin */
                $fswildcount += $proposedWildCount;
                $slotSettings->SetGameData($slotSettings->slotId . 'FSWildCount', $fswildcount);

            }
            else if ($fsmax <= $fs) {
                /* freespin finished */
                $objRes['na'] = 's';       

                $objRes['fs_total'] = $fsmax;
                $objRes['fswin_total'] = $LASTSPIN->fswin ?? $LASTSPIN->fswin_total;
                $objRes['fsmul_total'] = 1;
                $objRes['fsend_total'] = 1;
                $objRes['fsres_total'] = $LASTSPIN->fsres ?? $LASTSPIN->fsres_total;

                /*freespin is finished if no winning or tumble spin is finished  */
                if ($winMoney == 0) {
                    $objRes['na'] = 'c';
                    $objRes['fswin_total'] += $tumbleWin;
                    $objRes['fsres_total'] += $tumbleWin;

                    $slotSettings->SetGameData($slotSettings->slotId . 'FSMax', 0);
                    $slotSettings->SetGameData($slotSettings->slotId . 'FSNext', 0);
                    $slotSettings->SetGameData($slotSettings->slotId . 'FSOpt', []);
                    $slotSettings->SetGameData($slotSettings->slotId . 'FSWildCount', 0);
                }
            }
        }

        if($winMoney > 0) 
        {
            $slotSettings->SetBalance($winMoney);
            $slotSettings->SetBank($slotEvent['slotEvent'] ?? '', -1 * $winMoney);
            $slotSettings->SetWin($winMoney);
        }

        $_GameLog = json_encode($objRes);
        $slotSettings->SaveLogReport($_GameLog, $allBet, $winMoney, $slotEvent['slotEvent']);
        
        return [$objRes, $winType, $slotEvent, $isTumble];
    }

    public function doFSOption($slotEvent, $slotSettings, $LASTSPIN) {
        $BALANCE = $LASTSPIN->balance;

        /* freespin option */
        $fsopt_i = $slotEvent['ind'];

        $fs_opts = $this->slotSettings->fsOpts;

        /* mystery option determine by random, exclude last option */
        $rand_spin_opt = random_int(0, count($fs_opts) - 2);
        $rand_multipliers_opt = random_int(0, count($fs_opts) - 2);

        $fs_opts[6]['spin_count'] = $fs_opts[$rand_spin_opt]['spin_count'];
        $fs_opts[6]['multipliers'] = $fs_opts[$rand_multipliers_opt]['multipliers'];

        $str_fs_opt = $this->stringifyFSOptions($fs_opts);

        $fsmax = $fs_opts[$fsopt_i]['spin_count'];
        $fs = 1;

        $objRes = [
            'action' => 'doFSOption',

            'fsmul' => '1',
            'fs_opt_mask' => 'fs,m,ts,rm',
            'balance' => $BALANCE,
            'fsmax' => $fsmax,
            'index' => $slotEvent['index'],
            'balance_cash' => $BALANCE,
            'balance_bonus' => '0',
            'na' => 's',
            'fswin' => '0',
            'stime' => floor(microtime(true) * 1000),
            'fs' => $fs,
            'fs_opt' => $str_fs_opt,
            'fsres' => '0',
            'sver' => '5',
            'counter' => ((int)$slotEvent['counter'] + 1),
            'fsopt_i' => $fsopt_i,
        ];

        $slotSettings->SetGameData($slotSettings->slotId . 'FSMax', $fsmax);
        $slotSettings->SetGameData($slotSettings->slotId . 'FSNext', $fs);
        $slotSettings->SetGameData($slotSettings->slotId . 'FSOpt', $fs_opts[$fsopt_i]);
        $slotSettings->SetGameData($slotSettings->slotId . 'FSStartBalance', $BALANCE);

        $_GameLog = json_encode(array_merge($objRes, ['start_with' => $LASTSPIN]));
        $slotSettings->SaveLogReport($_GameLog, 0, 0, 'freespin');

        return $objRes;
    }

    public function doCollect($slotEvent) {
        $BALANCE = $this->slotSettings->GetBalance();

        $objRes = [
            'action' => 'doCollect',

            'balance' => $BALANCE,
            'index' => $slotEvent['index'],
            'balance_cash' => $BALANCE,
            'balance_bonus' => '0.00',
            'na' => 's',
            'stime' => floor(microtime(true) * 1000),
            'sver' => '5',
            'counter' => ((int)$slotEvent['counter'] + 1),
        ];
        
        return $objRes;
    }

    public function checkWinLines($reels) {
        $REELCOUNT = 6;
        $SYMBOLCOUNT = 7;
        $S_WILD = 2;
        $S_BLANK = 13;
        $S_SCATTER = 1;

        $winLines = [];

        for ($symbolId=0; $symbolId < $SYMBOLCOUNT; $symbolId++) { 
            $firstSymbol = $reels['symbols'][0][$symbolId];
            
            /* SCATTER, skip empty symbol(13) */
            if ($firstSymbol == $S_BLANK || $firstSymbol == $S_SCATTER) {
                continue;
            }

            $winLines = $this->findZokbos($reels, $firstSymbol, 1, [$symbolId * $REELCOUNT], $winLines);
        }

        // check wild multiplier, if wild is included in random winline, apply to  all
        $wildLines = array_filter($winLines, function($winLine) {
            return count($winLine['WildSymbols']) > 0;
        });

        return [$winLines, count($wildLines) > 0];
    }
    
    public function findZokbos($reels, $firstSymbol, $repeatCount, $positions, $winLines){
        $S_WILD = 2;
        $REELCOUNT = 6;
        $SYMBOLCOUNT = 7;
        $bPathEnded = true;

        if($repeatCount < $REELCOUNT){
            for($r = 0; $r < $SYMBOLCOUNT; $r++){
                if($firstSymbol == $reels['symbols'][$repeatCount][$r] || $reels['symbols'][$repeatCount][$r] == $S_WILD){
                    $winLines = $this->findZokbos($reels, $firstSymbol, $repeatCount + 1, array_merge($positions, [$repeatCount + $r * $REELCOUNT]), $winLines);
                    $bPathEnded = false;
                }
            }
        }

        if($bPathEnded == true){
            if($repeatCount >= 3){
                $winLine = [];
                $winLine['FirstSymbol'] = $firstSymbol;
                $winLine['RepeatCount'] = $repeatCount;
                $winLine['Positions'] = $positions;

                /* wild odd check */
                $wildSymbols = [];
                foreach ($positions as $pos) {
                    if ($reels['flatSymbols'][$pos] == $S_WILD) {
                        array_push($wildSymbols, $pos);
                    }
                }

                $winLine['WildSymbols'] = $wildSymbols;
                
                /* paytable check */
                $winLine['Money'] = $this->slotSettings->PayTable[$firstSymbol][$REELCOUNT - $repeatCount];

                array_push($winLines, $winLine);
            }
        }

        return $winLines;
    }

    public function stringifyScatterSymbols($flatSymbols, $winMoney) {
        $S_SCATTER = 1;
        $symbols = array_keys($flatSymbols, $S_SCATTER);
        
        // '1~300.00~3,7,20,22'
        return "${S_SCATTER}~${winMoney}~" . implode(",", $symbols);
    }

    public function stringifyWildSymbols($reels, $winLines, $slotEvent, $slotSettings, $fsopt) {
        $S_WILD = 2;
        $multiplier = $reels['wildMultiplier'];

        $strWildSymbols = implode(",", $reels['wildSymbols']);

        if ($slotEvent == 'freespin') {
            $multipliers = $fsopt['multipliers'];
            $chosenOpts = array_filter($slotSettings->fsOpts, function($opt) use ($multipliers) {
                $res = array_diff($opt['multipliers'], $multipliers);
                return count($res) == 0;
            });
            $wildOpt = array_keys($chosenOpts)[0] + 1;
        }
        else {
            $wildOpt = 0;
        }

        return ["${S_WILD}~${multiplier}~${strWildSymbols}", "${S_WILD}~${wildOpt}"];
    }

    public function stringifyMultipliedSymbols($reels, $winLines) {
        $multiplier = $reels['wildMultiplier'];

        /* winline symbols that wild multiplier will be applied */
        $symbols = [];
        $wildSymbols = [];
        foreach ($winLines as $winLine) {
            $symbols = array_merge($symbols, $winLine['Positions']);
            $wildSymbols = array_merge($wildSymbols, $winLine['WildSymbols']);
        }

        $symbols = array_diff($symbols, $wildSymbols);
        $symbols = array_unique($symbols);

        $strSymbols = implode(",", $symbols);
        return "${multiplier}~${strSymbols}";
    }

    public function stringifyFSOptions($fs_opts) {
        $fs_opts = array_map(function($opt) {
            $multipliers = implode(";", $opt['multipliers']);
            return "${opt['spin_count']},${opt['val1']},${opt['val2']},${multipliers}";
        }, $fs_opts);

        $res = implode("~", $fs_opts);
        return $res;
    }

    public function getTumbleSymbolCount($reels, $winLines) {
        $REELCOUNT = 6;

        $count = 0;

        if (count($winLines) > 0) {
            /* get winline symbol */
            $winSymbolPositions = [];
            foreach ($winLines as $winLine) {
                $winSymbolPositions = array_merge($winSymbolPositions, $winLine['Positions']);
            }
            $winSymbolPositions = array_unique($winSymbolPositions);
            $count = count($winSymbolPositions);
        }

        return $count;
    }
    
    public function stringifyTumbleSymbols($reels, $winLines) {
        $REELCOUNT = 6;

        /* get winline symbol */
        $winSymbolPositions = [];
        foreach ($winLines as $line) {
            $winSymbolPositions = array_merge($winSymbolPositions, $line['Positions']);
        }
        $winSymbolPositions = array_unique($winSymbolPositions);

        /* winline symbol split */
        $tmbSymbols = [];
        foreach ($winSymbolPositions as $pos) {
            /* symbols in the reg reelset*/
            $reelPos = intdiv($pos, $REELCOUNT);
            $reelId = $pos % $REELCOUNT;
            $symbol = $reels['symbols'][$reelId][$reelPos];
            array_push($tmbSymbols, "${pos},${symbol}");
        }

        return implode("~", $tmbSymbols);
    }

    public function submitRound($slotSettings, $request, $response, $winType = null, $isTumble = false) {
        if ($isTumble || $winType == 'bonus' || $winType == 'win' || $request['slotEvent'] == 'freespin' || $request['slotEvent'] == 'doFSOption') {
            $round = $slotSettings->GetGameData($slotSettings->slotId . 'RNDLogs') ?? [];
            array_push($round, [
                'request' => $request,
                'response' => $response
            ]);

            $slotSettings->SetGameData($slotSettings->slotId . 'RNDLogs', $round);

            return;
        }
        else if ($request['slotEvent'] == 'doCollect') {
            $round = $slotSettings->GetGameData($slotSettings->slotId . 'RNDLogs') ?? [];

            if (count($round) == 0) {
                return;
            }

            array_push($round, [
                'request' => $request,
                'response' => $response
            ]);

            // round reset
            $slotSettings->SetGameData($slotSettings->slotId . 'RNDLogs', []);
        }
        else {
            $round = [[
                'request' => $request,
                'response' => $response
            ]];
        }

        // PPSubmitRound::dispatch([
        //     'user' => $slotSettings->user->id,
        //     'game' => $slotSettings->game->original_id,
        //     'round' => $round,
        // ]);
    }

    public function toResponse($obj) {
        $response = '';
        foreach ($obj as $key => $value) {
            if ($value !== null) {
                $response = "{$response}&{$key}={$value}";
            }
        }

        /* remove double quotes around key for javascript */
        $response = preg_replace('/"(\w+)":/i', '\1:', $response);
        return trim($response, "&");
    }
}