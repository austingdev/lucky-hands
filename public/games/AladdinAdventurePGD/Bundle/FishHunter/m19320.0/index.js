window.__require = function e(t, i, n) {
    function s(o, l) {
        if (!i[o]) {
            if (!t[o]) {
                var r = o.split("/");
                if (r = r[r.length - 1], !t[r]) {
                    var c = "function" == typeof __require && __require;
                    if (!l && c) return c(r, !0);
                    if (a) return a(r, !0);
                    throw new Error("Cannot find module '" + o + "'")
                }
                o = r
            }
            var h = i[o] = {
                exports: {}
            };
            t[o][0].call(h.exports, function(e) {
                return s(t[o][1][e] || e)
            }, h, h.exports, e, t, i, n)
        }
        return i[o].exports
    }
    for (var a = "function" == typeof __require && __require, o = 0; o < n.length; o++) s(n[o]);
    return s
}({
    AISeek: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "7c14040BVZNqbQOqkH00uxB", "AISeek");
        var n = Number(cc.ENGINE_VERSION.replace(".", "")),
            s = n >= 21 ? "angle" : "rotation",
            a = function() {
                function e(e) {
                    void 0 === e && (e = "release"), this.VERSION = "release", this.STEER_DATA = {}, this.FIXED_TIMESTEP = 0, this.DRAW_POINT = !1, this.ANGLE = 0, this.WIN_RANGE = null, this.VEHICLE_MANAGER = {}, this.CANVAS = null, this.target_point = null, this.speed_scale = 1, this.flip = !1, this.VERSION_LIST = ["debug", "release"], this.VERSION_LIST.includes(e) || console.warn("VERSION_LIST: " + this.VERSION_LIST + "  not has VERSION: " + e), this.VERSION = e, this.__init__()
                }
                return Object.defineProperty(e.prototype, "Flip", {
                    get: function() {
                        return this.flip
                    },
                    enumerable: !0,
                    configurable: !0
                }), e.prototype.__init__ = function() {
                    return __awaiter(this, void 0, void 0, function() {
                        var e, t, i, n;
                        return __generator(this, function(s) {
                            switch (s.label) {
                                case 0:
                                    return [4, this.loadJson(cc.director.getScene().name + "/" + cc.director.getScene().name + "/Res/data/steer_" + this.VERSION)];
                                case 1:
                                    return e = s.sent(), this.STEER_DATA = "debug" == this.VERSION ? this.encode(e.STEER) : this.decode(e.STEER), this.CANVAS = cc.find("Canvas"), t = null != this.CANVAS ? this.CANVAS.getComponent(cc.Canvas).designResolution : cc.winSize, cc.director.getPhysicsManager().enabled = !0, this.FIXED_TIMESTEP = this.STEER_DATA.FIXED_TIMESTEP, this.DRAW_POINT = this.STEER_DATA.DRAW_POINT, this.ANGLE = this.STEER_DATA.ANGLE || 0, i = this.STEER_DATA.X_RANGE, n = this.STEER_DATA.Y_RANGE, this.WIN_RANGE = new cc.Vec2(t.width / Math.abs(i[0] - i[1]), t.height / Math.abs(n[0] - n[1])), this.drawLine(i, n), [2]
                            }
                        })
                    })
                }, e.prototype.loadJson = function(e) {
                    return __awaiter(this, void 0, void 0, function() {
                        var t;
                        return __generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    var s, a, o, l;
                                    return t = {}, s = e.indexOf("/"), a = e.substring(0, s), o = e.substring(s + 1, e.length), l = cc.assetManager.getBundle(a), [4, new Promise(function(e) {
                                        l.load(o, function(i, s) {
                                            i ? cc.error(i) : (n > 19.3 && (s = s.json), t = s, cc.assetManager.releaseAsset(s), e())
                                        })
                                    })];
                                case 1:
                                    return i.sent(), [2, t]
                            }
                        })
                    })
                }, e.prototype.SetSeek = function(e, t, i, n, s, a, o, r, c, h) {
                    return void 0 === s && (s = 0), void 0 === a && (a = cc.Vec2.ONE), __awaiter(this, void 0, void 0, function() {
                        var d, u, m, p, f, S, g, y, _, C, I, P, v, b, M, E, F, T, A, w;
                        return __generator(this, function(k) {
                            switch (k.label) {
                                case 0:
                                    return this.STEER_DATA[e] ? [3, 2] : [4, this.__init__()];
                                case 1:
                                    if (k.sent(), !this.STEER_DATA[e]) return console.warn(e + " not in config"), c(null), [2];
                                    k.label = 2;
                                case 2:
                                    if (d = this.STEER_DATA[e].MAX_SPEED || 240, u = this.STEER_DATA[e].MAX_STEER || 6, m = this.STEER_DATA[e].MIN_RANGE || 1, p = this.STEER_DATA[e].FIXED_TIMESTEP || this.FIXED_TIMESTEP, f = this.STEER_DATA[e].DRAW_POINT || this.DRAW_POINT, S = [], null != t && (S = this.STEER_DATA[e].PATH[t] || []), S.length <= 0) return console.warn("error type: %s path_index: %s", e, t), c(null), [2];
                                    if (g = this.pathConvertPoint(S, s, a), null == (y = i.getComponent(l)) && (y = i.addComponent(l)), _ = h && h.hasOwnProperty("angle") ? h.angle : this.STEER_DATA[e].ANGLE || this.ANGLE, C = this.STEER_DATA[e].REPEAT || 1, I = h && h.hasOwnProperty("sync") ? h.sync : 0, !y) return cc.error("Add SeekComponent Error"), c(null), [2];
                                    if (y.Reset(this, n, d, u, m * this.WIN_RANGE.mag() * .1, g, p, f, o, r, c, _, C, I), !h || !h.hasOwnProperty("members")) return [3, 8];
                                    if (P = h.members, v = this.STEER_DATA[e].GROUP, b = this.STEER_DATA[e].ROW, !v) return [3, 3];
                                    if ((M = v.FORMATION) && P.length <= M.length)
                                        for (E = this.setFormation(g, P, v.X_SPACE, v.Y_SPACE, M), T = 1; T < P.length; T++) {
                                            if (null == (A = P[T].getComponent(l)) && (A = P[T].addComponent(l)), !A) return cc.error("Add SeekComponent Error"), c(null), [2];
                                            w = (Number(n) + T).toString(), A.Reset(this, w, d, u, m * this.WIN_RANGE.mag() * .1, E[T], p, f, o, r, c, _, C, I)
                                        } else console.warn("type: " + e + " group members count more than the formation length");
                                    return M = null, [3, 7];
                                case 3:
                                    if (!b) return [3, 7];
                                    F = b.INTERVAL, T = 1, k.label = 4;
                                case 4:
                                    return T < P.length ? [4, this.delay(F)] : [3, 7];
                                case 5:
                                    if (k.sent(), null == (A = P[T].getComponent(l)) && (A = P[T].addComponent(l)), !A) return cc.error("Add SeekComponent Error"), c(null), [2];
                                    w = (Number(n) + T).toString(), A.Reset(this, w, d, u, m * this.WIN_RANGE.mag() * .1, g, p, f, o, r, c, _, C, I), k.label = 6;
                                case 6:
                                    return T++, [3, 4];
                                case 7:
                                    v = null, b = null, P && (P.length = 0), k.label = 8;
                                case 8:
                                    return [2]
                            }
                        })
                    })
                }, e.prototype.AddVehicle = function(e, t) {
                    this.VEHICLE_MANAGER[e] = t
                }, e.prototype.RemoveVehicle = function(e) {
                    this.VEHICLE_MANAGER.hasOwnProperty(e) && delete this.VEHICLE_MANAGER[e]
                }, e.prototype.GetFixedTimeStep = function() {
                    return this.FIXED_TIMESTEP
                }, e.prototype.SetFixedTimeStep = function(e) {
                    this.FIXED_TIMESTEP = e
                }, e.prototype.SetSpeedScale = function(e, t) {
                    if (1 != e) {
                        this.speed_scale = e;
                        for (var i = Object.keys(this.VEHICLE_MANAGER), n = 0; n < i.length; n++) {
                            var s = i[n];
                            this.VEHICLE_MANAGER[s].SetSpeedScale(e, t)
                        }
                    }
                }, e.prototype.ResetSpeedScale = function() {
                    if (1 != this.speed_scale) {
                        for (var e = Object.keys(this.VEHICLE_MANAGER), t = 0; t < e.length; t++) {
                            var i = e[t];
                            this.VEHICLE_MANAGER[i].ResetSpeedScale()
                        }
                        this.speed_scale = 1
                    }
                }, e.prototype.Update = function() {
                    for (var e = Object.keys(this.VEHICLE_MANAGER), t = 0; t < e.length; t++) {
                        var i = this.VEHICLE_MANAGER[e[t]];
                        i && i.Seek()
                    }
                }, e.prototype.SetFlip = function(e) {
                    this.flip = e
                }, e.prototype.GetPathCount = function(e) {
                    return this.STEER_DATA[e] ? this.STEER_DATA[e].PATH.length : 0
                }, e.prototype.GetMaxSpeed = function(e) {
                    return this.STEER_DATA[e] ? this.STEER_DATA[e].MAX_SPEED : 0
                }, e.prototype.decode = function(e) {
                    return JSON.parse(e)
                }, e.prototype.encode = function(e, t) {
                    return void 0 === t && (t = !1), e
                }, e.prototype.pathConvertPoint = function(e, t, i) {
                    var n = new Array;
                    if (e.length > 0)
                        for (var s = 0; s < e.length; s++) {
                            var a = cc.v2(e[s][0] * this.WIN_RANGE.x, e[s][1] * this.WIN_RANGE.y).mag(),
                                o = cc.misc.degreesToRadians(cc.misc.radiansToDegrees(Math.atan2(e[s][1], e[s][0])) + t),
                                l = Math.cos(o) * a * i.x,
                                r = Math.sin(o) * a * i.y,
                                c = new cc.Vec2(l, r);
                            n.push(c)
                        }
                    return n
                }, e.prototype.setFormation = function(e, t, i, n, s) {
                    for (var a = new Array, o = new Array, l = 0; l < s.length; l++) {
                        var r = s[l][0] * i - s[0][0] * i,
                            c = s[l][1] * n - s[0][1] * n,
                            h = Math.atan2(c, r);
                        a.push(h);
                        var d = new cc.Vec2(r, c).mag();
                        o.push(d)
                    }
                    var u = new Array;
                    for (l = 1; l < e.length; l++)
                        if (l > 0) {
                            r = e[l].x - e[l - 1].x, c = e[l].y - e[l - 1].y;
                            var m = Math.atan2(c, r);
                            1 == l && u.push(m), u.push(m)
                        }
                    var p = {};
                    for (l = 1; l < t.length; l++) {
                        for (var f = new Array, S = 0; S < u.length; S++) {
                            h = (180 * (u[S] + a[l]) / Math.PI - 90) * Math.PI / 180;
                            var g = Math.cos(h) * o[l],
                                y = Math.sin(h) * o[l];
                            f.push(new cc.Vec2(e[S].x + g, e[S].y + y))
                        }
                        p[l] = f
                    }
                    return p
                }, e.prototype.delay = function(e) {
                    return new Promise(function(t) {
                        setTimeout(t, e)
                    })
                }, e.prototype.drawLine = function(e, t) {
                    if ("debug" == this.VERSION && this.STEER_DATA.DRAW_LINE && this.CANVAS) {
                        var i = (new cc.Node).addComponent(cc.Graphics);
                        this.CANVAS.addChild(i.node);
                        for (var n = e[0]; n <= e[1]; n++) i.moveTo(n * this.WIN_RANGE.x, t[0] * this.WIN_RANGE.y), i.lineTo(n * this.WIN_RANGE.x, t[1] * this.WIN_RANGE.y);
                        for (n = t[0]; n <= t[1]; n++) i.moveTo(e[0] * this.WIN_RANGE.x, n * this.WIN_RANGE.y), i.lineTo(e[1] * this.WIN_RANGE.x, n * this.WIN_RANGE.y);
                        i.strokeColor = cc.Color.WHITE, i.stroke()
                    }
                }, e
            }();
        i.AISeek = a;
        var o = cc._decorator.ccclass,
            l = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.rVehicle = null, t.ID = "0000", t.MAX_SPEED = 0, t.MAX_STEER = 0, t.MIN_RANGE = 0, t.PATH = [], t.MAX_SPEED_SQ = 0, t.MAX_STEER_SQ = 0, t.ORIGIN_ANGLE = 0, t.REPEAT = 1, t.FLIP = !1, t.draw_point = !1, t.target_point = null, t.target_line = null, t.tIndex = 1, t.fixed_timeStep = 0, t.current_time = 0, t.pTarget = cc.Vec2.ZERO, t.aTarget = 0, t.pause = !0, t.add_speed_now = !1, t.rotate_now = !1, t.auto_rotate = !0, t.isReverse = !1, t.steer_vec = cc.Vec2.ZERO, t.sync_tiem = 0, t.speed_scale = 1, t.velocity_cache = cc.Vec2.ZERO, t
                }
                return __extends(t, e), Object.defineProperty(t.prototype, "PathLength", {
                    get: function() {
                        return this.PATH.length
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(t.prototype, "PonitIndex", {
                    get: function() {
                        return this.tIndex
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(t.prototype, "Flip", {
                    get: function() {
                        return this.FLIP
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(t.prototype, "Path", {
                    get: function() {
                        return this.PATH
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(t.prototype, "OriginAngle", {
                    get: function() {
                        return this.ORIGIN_ANGLE
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(t.prototype, "IsReverse", {
                    get: function() {
                        return this.isReverse
                    },
                    enumerable: !0,
                    configurable: !0
                }), t.prototype.Pause = function() {
                    this.pause = !0, this.rVehicle.linearVelocity != cc.Vec2.ZERO && (this.velocity_cache = this.rVehicle.linearVelocity), this.rVehicle.linearVelocity = cc.Vec2.ZERO
                }, t.prototype.Resume = function() {
                    this.pause = !1, this.add_speed_now = !1, this.rVehicle.linearVelocity = this.velocity_cache
                }, Object.defineProperty(t.prototype, "AutoRotate", {
                    set: function(e) {
                        this.auto_rotate = e
                    },
                    enumerable: !0,
                    configurable: !0
                }), t.prototype.onEnable = function() {
                    this.rVehicle = this.getComponent("cc.RigidBody"), null == this.rVehicle && (this.rVehicle = this.addComponent("cc.RigidBody")), this.rVehicle ? (this.rVehicle.gravityScale = 0, this.rVehicle.linearVelocity = cc.Vec2.ZERO) : cc.error("SeekComponent Init Error")
                }, t.prototype.Update = function(e) {
                    if (!this.pause) {
                        if (this.current_time += e, this.current_time >= this.fixed_timeStep) {
                            for (var t = Math.floor(this.current_time / this.fixed_timeStep), i = 0; i < t; i++) this.Seek();
                            this.current_time = 0
                        }
                        this.auto_rotate && !this.rotate_now && (this.node[s] = Math.floor(cc.misc.lerp(this.node[s], this.aTarget, .25))), 1 != this.speed_scale && (this.sync_tiem -= e, this.sync_tiem <= 0 && this.ResetSpeedScale())
                    }
                }, t.prototype.Reset = function(e, t, i, n, a, o, l, r, c, h, d, u, m, p) {
                    this.rVehicle = this.getComponent("cc.RigidBody"), null == this.rVehicle && (this.rVehicle = this.addComponent("cc.RigidBody")), this.rVehicle ? this.rVehicle.gravityScale = 0 : cc.error("SeekComponent Init Error"), this.AI_SEEK = e, this.ID = t, this.MAX_SPEED = i, this.MAX_STEER = n, this.MIN_RANGE = a, this.PATH = o, this.MAX_SPEED_SQ = i * i, this.MAX_STEER_SQ = n * n, this.onStart = c, this.onMove = h, this.onEnd = d, this.FLIP = e.Flip, this.aTarget = this.ORIGIN_ANGLE = e.Flip ? u + 180 : u, this.REPEAT = m, this.fixed_timeStep = l, this.draw_point = r, this.steer_vec = this.rVehicle.linearVelocity = cc.Vec2.ZERO, this.node.position = this.PATH[0], this.node[s] = e.Flip ? this.ORIGIN_ANGLE - 180 : this.ORIGIN_ANGLE, this.tIndex = 1, this.pTarget = this.PATH[this.tIndex], this.pause = !1, this.add_speed_now = !1, this.rotate_now = !1, this.isReverse = !1, this.DrawPoint(this.pTarget.x, this.pTarget.y), this.AI_SEEK.AddVehicle(this.ID, this), p > 0 && this.SetSpeedScale(2, p), this.rVehicle.linearVelocity.x + this.rVehicle.linearVelocity.y != 0 ? this.onEnd(this) : this.onStart && this.onStart(this)
                }, t.prototype.Seek = function() {
                    return __awaiter(this, void 0, void 0, function() {
                        var e, t, i, a;
                        return __generator(this, function() {
                            if (e = cc.v2(this.pTarget.sub(this.node.position)), this.FLIP && e.mulSelf(-1), e.normalizeSelf(), e.mulSelf(this.MAX_SPEED), (t = cc.v2(e.sub(this.steer_vec))).magSqr() > this.MAX_STEER_SQ && (t.normalizeSelf(), t.mulSelf(this.MAX_STEER)), this.steer_vec = this.steer_vec.addSelf(t), this.steer_vec.magSqr() > this.MAX_SPEED_SQ && (this.steer_vec.normalizeSelf(), this.steer_vec.mulSelf(this.MAX_SPEED)), this.add_speed_now || (this.rVehicle.linearVelocity = this.steer_vec), this.DrawLine(this.node.position.x, this.node.position.y, this.steer_vec), i = (n >= 21 ? 1 : -1) * cc.misc.radiansToDegrees(Math.atan2(this.rVehicle.linearVelocity.y, this.rVehicle.linearVelocity.x)) + this.ORIGIN_ANGLE, a = !1, i < -90 + this.ORIGIN_ANGLE && this.node[s] > 90 + this.ORIGIN_ANGLE ? (i += 360, a = !0) : i > 90 + this.ORIGIN_ANGLE && this.node[s] < -90 + this.ORIGIN_ANGLE && (i -= 360, a = !0), a || (this.node[s] > 225 + this.ORIGIN_ANGLE ? this.node[s] -= 360 : this.node[s] < -225 + this.ORIGIN_ANGLE && (this.node[s] += 360)), this.aTarget = i, cc.v2(this.node.position.sub(this.pTarget)).mag() <= this.MIN_RANGE) {
                                if (this.onMove && this.onMove(this), this.isReverse ? this.tIndex -= 1 : this.tIndex += 1, this.tIndex >= this.PATH.length || this.tIndex < 0)
                                    if (1 != this.REPEAT) this.REPEAT -= 1, this.isReverse ? this.tIndex = this.PATH.length - 1 : this.tIndex = 0;
                                    else if (1 == this.REPEAT) return this.PATH = [], this.onDead(), this.onEnd && this.onEnd(this), this.target_point && this.target_point.clear(), this.target_line && this.target_line.clear(), [2];
                                this.pTarget = this.PATH[this.tIndex], this.DrawPoint(this.pTarget.x, this.pTarget.y)
                            }
                            return [2]
                        })
                    })
                }, t.prototype.DrawPoint = function(e, t) {
                    null == this.target_point && this.draw_point && (this.target_point = (new cc.Node).addComponent(cc.Graphics), cc.find("Canvas").addChild(this.target_point.node)), this.target_point && (this.target_point.clear(), this.target_point.circle(e, t, this.MIN_RANGE), this.target_point.strokeColor = cc.Color.WHITE, this.target_point.stroke())
                }, t.prototype.DrawLine = function(e, t, i, n) {
                    if (void 0 === n && (n = .1), null == this.target_line && this.draw_point && (this.target_line = (new cc.Node).addComponent(cc.Graphics), cc.find("Canvas").addChild(this.target_line.node)), this.target_line) {
                        this.target_line.moveTo(e, t);
                        var s = cc.v2(e + i.x * n, t + i.y * n);
                        this.target_line.lineTo(s.x, s.y), this.target_line.strokeColor = cc.Color.WHITE, this.target_line.stroke()
                    }
                }, t.prototype.SetSpeedScale = function(e, t) {
                    1 != e && (this.speed_scale = e, this.sync_tiem = 1.1 * t || 0, this.MAX_SPEED *= e, this.MAX_STEER *= e * e, this.MAX_SPEED_SQ = this.MAX_SPEED * this.MAX_SPEED, this.MAX_STEER_SQ = this.MAX_STEER * this.MAX_STEER)
                }, t.prototype.ResetSpeedScale = function() {
                    1 != this.speed_scale && (this.MAX_SPEED /= this.speed_scale, this.MAX_STEER /= this.speed_scale * this.speed_scale, this.MAX_SPEED_SQ = this.MAX_SPEED * this.MAX_SPEED, this.MAX_STEER_SQ = this.MAX_STEER * this.MAX_STEER, this.sync_tiem = 0, this.speed_scale = 1)
                }, t.prototype.Reverse = function(e) {
                    this.isReverse = null == typeof e ? !this.isReverse : e
                }, t.prototype.AddSpeed = function(e, t) {
                    return __awaiter(this, void 0, void 0, function() {
                        return __generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return !this.rVehicle || this.pause ? [2] : (this.add_speed_now = !0, this.rVehicle.linearVelocity = this.rVehicle.linearVelocity.addSelf(this.rVehicle.linearVelocity.normalize().mul(e)), [4, this.Delay(t)]);
                                case 1:
                                    return i.sent(), !this.rVehicle || this.pause ? [2] : (this.rVehicle.linearVelocity = this.rVehicle.linearVelocity.normalize().mul(this.MAX_SPEED), this.add_speed_now = !1, [2])
                            }
                        })
                    })
                }, t.prototype.onDead = function() {
                    this.pause = !0, this.add_speed_now = !1, this.rotate_now = !1, this.rVehicle.linearVelocity = cc.Vec2.ZERO, this.target_point && this.target_point.clear(), this.target_line && this.target_line.clear(), this.ResetSpeedScale(), this.AI_SEEK.RemoveVehicle(this.ID)
                }, t.prototype.SetPonitIndex = function(e) {
                    e >= 0 && e < this.PATH.length && (this.tIndex = e)
                }, t.prototype.SetOriginAngle = function(e, t) {
                    return void 0 === t && (t = 1), __awaiter(this, void 0, void 0, function() {
                        return __generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return !this.node || this.pause ? [2] : (this.rotate_now = !0, this.aTarget = e, this.ORIGIN_ANGLE = e, [4, this.Delay(1e3 * t)]);
                                case 1:
                                    return i.sent(), !this.node || this.pause ? [2] : (this.node[s] = this.aTarget, this.rotate_now = !1, [2])
                            }
                        })
                    })
                }, t.prototype.Rotate = function(e, t, i) {
                    var n = this;
                    void 0 === i && (i = 0), this.rotate_now = !0;
                    var a = this.node[s],
                        o = Math.abs(e - a);
                    o > 180 && (this.FLIP ? a += 360 : e -= 360, (o = Math.abs(e - a)) < 180 ? this.node[s] = a : (this.FLIP ? a -= 720 : e += 720, (o = Math.abs(e - a)) < 180 && (this.node[s] = a))), this.node.runAction(cc.sequence(cc.rotateTo(t, e), cc.delayTime(i), cc.callFunc(function() {
                        n.rotate_now = !1
                    })))
                }, t.prototype.SetSpeed = function(e) {
                    this.MAX_SPEED = e, this.MAX_SPEED_SQ = this.MAX_SPEED * this.MAX_SPEED
                }, t.prototype.GetTargetPoint = function(e) {
                    return e >= 0 && e < this.PATH.length ? this.PATH[e] : null
                }, t.prototype.Delay = function(e) {
                    return new Promise(function(t) {
                        setTimeout(t, e)
                    }.bind(this))
                }, __decorate([o], t)
            }(cc.Component);
        i.SeekComponent = l, cc._RF.pop()
    }, {}],
    AngleBackground: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "7a69faleJxN57g7n2Kmq+re", "AngleBackground");
        var n, s = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("../Common/ResourceManager"),
            o = e("./BaseBackGround"),
            {
                ccclass: l,
                property: r
            } = cc._decorator;
        let c = n = class extends o.default {
            constructor() {
                super(...arguments), this.Bottom_Mask = null, this.Top_Mask = null
            }
            BossEnter() {
                this.bossEnter || (this.ani.stop("Boss_Enter"), this.ani.playAdditive("Boss_Enter"), this.Top_Mask = a.default.SpawnFish("KING_ANGLER_MASK"), this.Top_Mask.setPosition(new cc.Vec2(-1350, 1600)), this.Top_Mask.runAction(cc.fadeTo(1, 120)), this.Bottom_Mask && (this.Bottom_Mask.active = !0, this.Bottom_Mask.setPosition(new cc.Vec2(-1350, 1600)), this.Bottom_Mask.runAction(cc.fadeTo(1, 200))), this.bossEnter = !0)
            }
            BossLeave() {
                this.DespawnMask(this.Top_Mask), this.Bottom_Mask.runAction(cc.fadeOut(1)), n.isOccupied = !1
            }
            DespawnMask(e) {
                null != e && e.runAction(cc.sequence(cc.fadeOut(1), cc.callFunc(() => {
                    a.default.DespawnFish("KING_ANGLER_MASK", e)
                })))
            }
        };
        c.isOccupied = !1, s([r(cc.Node)], c.prototype, "Bottom_Mask", void 0), c = n = s([l], c), i.default = c, cc._RF.pop()
    }, {
        "../Common/ResourceManager": "ResourceManager",
        "./BaseBackGround": "BaseBackGround"
    }],
    ArkGameUtility: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "bc09bq66FNMH6HIF4bcV34f", "ArkGameUtility"), Object.defineProperty(i, "__esModule", {
            value: !0
        }), i.Dictionary = i.EventDelegate = i.FunctionQueue = i.WaitUntil = i.WaitForSeconds = void 0, i.WaitForSeconds = function(e) {
            return new Promise(function(t) {
                setTimeout(t, 1e3 * e)
            })
        }, i.WaitUntil = function(e) {
            return this.contentRecordHelper.addTitleFilter(e), new Promise(t => {
                const i = () => {
                    setTimeout(() => {
                        e.$systemType && e.$contentType ? t() : i()
                    }, 1e3)
                };
                i()
            })
        }, i.FunctionQueue = class {
            constructor() {
                this.funcs = []
            }
            Enqueue(e) {
                this.funcs.push(e)
            }
            Invoke() {
                this.funcs.length > 0 ? this.funcs.shift()(() => this.Invoke()) : cc.log("the funcs queue is clear")
            }
        }, i.EventDelegate = class {
            constructor() {
                this.keys = [], this.funcs = [], this.stackKey = 0
            }
            AddListener(e) {
                return this.stackKey++, this.keys.push(this.stackKey), this.funcs.push(e), this.stackKey
            }
            RemoveListener(e) {
                let t = this.funcs.indexOf(e);
                return -1 != t && (this.keys.splice(t, 1), this.funcs.splice(t, 1), !0)
            }
            RemoveListenerByID(e) {
                let t = this.keys.indexOf(e);
                return -1 != t && (this.keys.splice(t, 1), this.funcs.splice(t, 1), !0)
            }
            RemoveAllListener() {
                this.keys = [], this.funcs = [], this.stackKey = 0
            }
            SetListener(e) {
                return this.RemoveAllListener(), this.AddListener(e)
            }
            Broadcast(...e) {
                let t = Object.assign([], this.funcs);
                for (let i = 0; i < t.length; i++) t[i](...e);
                t = null
            }
            ContainsListener(e) {
                return -1 !== this.keys.indexOf(e)
            }
            GetListenerCount() {
                return this.keys.length
            }
        }, i.Dictionary = class {
            constructor() {
                this._keys = [], this._values = []
            }
            Add(e, t) {
                this.checkKeyAndPerformAction((e, t) => {
                    if (this.ContainsKey(e)) throw new Error("An element with the same key already exists in the dictionary.");
                    this._keys.push(e), this._values.push(t)
                }, e, t)
            }
            AddOrChange(e, t) {
                this.checkKeyAndPerformAction((e, t) => {
                    if (this.ContainsKey(e)) {
                        let i = this._keys.indexOf(e);
                        this._values[i] = t
                    } else this._keys.push(e), this._values.push(t)
                }, e, t)
            }
            Remove(e) {
                return this.checkKeyAndPerformAction(e => {
                    if (!this.ContainsKey(e)) return !1;
                    let t = this._keys.indexOf(e);
                    return this._keys.splice(t, 1), this._values.splice(t, 1), !0
                }, e)
            }
            GetValue(e) {
                return this.checkKeyAndPerformAction(e => {
                    if (!this.ContainsKey(e)) return null;
                    let t = this._keys.indexOf(e);
                    return this._values[t]
                }, e)
            }
            PopValue(e) {
                return this.checkKeyAndPerformAction(e => {
                    if (!this.ContainsKey(e)) return null;
                    let t = this._keys.indexOf(e),
                        i = this._values[t];
                    return this._keys.splice(t, 1), this._values.splice(t, 1), i
                }, e)
            }
            ContainsKey(e) {
                return this.checkKeyAndPerformAction(e => -1 !== this._keys.indexOf(e), e)
            }
            ChangeValueForKey(e, t) {
                this.checkKeyAndPerformAction((e, t) => {
                    if (!this.ContainsKey(e)) throw new Error("In the dictionary there is no element with the given key.");
                    let i = this._keys.indexOf(e);
                    this._values[i] = t
                }, e, t)
            }
            Keys() {
                return this._keys
            }
            Values() {
                return this._values
            }
            Count() {
                return this._values.length
            }
            Clear() {
                this._keys = [], this._values = []
            }
            checkKeyAndPerformAction(e, t, i) {
                if (this.isEitherUndefinedNullOrStringEmpty(t)) throw new Error("Key is either undefined, null or an empty string.");
                return e(t, i)
            }
            isEitherUndefinedNullOrStringEmpty(e) {
                return null == e || "" === e.toString()
            }
        }, cc._RF.pop()
    }, {}],
    AudioClipList: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "afaeb6PY35MMp401Z84Xhnk", "AudioClipList");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        }), i.SlotAudioClipList = void 0;
        const s = e("../../../../../LobbyCommon/Component/AudioMgr"),
            {
                ccclass: a,
                property: o
            } = cc._decorator;
        let l = class extends cc.Component {
            constructor() {
                super(...arguments), this.m_listAudioClips = []
            }
            onLoad() {
                const e = this.m_listAudioClips.map(e => e.name);
                s.AudioMgr.Instance.setAudioClip(this.m_listAudioClips, e)
            }
        };
        n([o({
            type: cc.AudioClip,
            displayName: "\u97f3\u6548\u6a94\u6848"
        })], l.prototype, "m_listAudioClips", void 0), l = n([a()], l), i.SlotAudioClipList = l, cc._RF.pop()
    }, {
        "../../../../../LobbyCommon/Component/AudioMgr": void 0
    }],
    AudioManager: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "bdb3e+7F3xDqaZE/zgkm18Q", "AudioManager");
        var n, s = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            a = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const o = e("../../../../../LobbyCommon/Component/AudioMgr"),
            l = e("../../GameClient/JsonUtils"),
            r = e("./PreloadManager"),
            {
                ccclass: c,
                property: h
            } = cc._decorator;
        class d {
            constructor(e, t) {
                this.ID = 0, this.Volume = 0, this.ID = e, this.Volume = t
            }
        }
        let u = n = class extends cc.Component {
            constructor() {
                super(...arguments), this.MainVolume = 1, this.BGMClip = [], this.SoundClip = [], this.Volume = 1, this.BGM_ID = null, this.Playing_ID = [], this.AudioClipTable = null
            }
            static get Instance() {
                return this.instance
            }
            onLoad() {
                n.instance = this, this.Volume = this.MainVolume, this.InitClipData()
            }
            start() {
                return a(this, void 0, void 0, function*() {
                    r.default.Instance.onReleaseSceneEvent.AddListener(this.Clear.bind(this));
                    let e = `FishHunter/Res/data/audio/${window.gd_nowLOGO}/TextList`;
                    this.AudioClipTable = yield l.LoadJson(e)
                })
            }
            InitClipData() {
                let e = [];
                for (let i = 0; i < this.BGMClip.length; i++) this.BGMClip[i] ? e.push(this.BGMClip[i].name) : e.push("");
                o.AudioMgr.Instance.setAudioClip(this.BGMClip, e);
                let t = [];
                for (let i = 0; i < this.SoundClip.length; i++) this.SoundClip[i] ? t.push(this.SoundClip[i].name) : t.push("");
                o.AudioMgr.Instance.setAudioClip(this.SoundClip, t)
            }
            PlayBGM(e, t = 1, i = !1, n = 1) {
                if (null != this.BGM_ID) {
                    let e = this.BGM_ID;
                    i ? this.Fade(this.BGM_ID, 1, 0, n, () => {
                        this.Stop(e)
                    }) : this.Stop(e)
                }
                return this.BGM_ID = this.Play(e, t, !0), i && this.Fade(this.BGM_ID, 0, 1, n), this.BGM_ID
            }
            GetBGMID() {
                return this.BGM_ID
            }
            Play(e, t = 1, i = !1) {
                let n = o.AudioMgr.Instance.Play(e, i, t * this.MainVolume),
                    s = new d(n, t);
                return o.AudioMgr.Instance.SetFinishCallback(n, () => {
                    let e = this.Playing_ID.indexOf(s);
                    e > 0 && this.Playing_ID.splice(e, 1)
                }, this), this.Playing_ID.push(s), n
            }
            Stop(e) {
                o.AudioMgr.Instance.Stop(e);
                for (let t = 0; t < this.Playing_ID.length; t++)
                    if (this.Playing_ID[t].ID == e) {
                        this.Playing_ID.splice(t, 1);
                        break
                    }
            }
            Fade(e, t, i, n = 1, s = null) {
                if (null == e) return;
                if (t == i || n <= 0) return o.AudioMgr.Instance.SetVolume(e, i), void(s && s());
                let a = i > t,
                    l = a ? t : i,
                    r = a ? i : t,
                    c = (i - t) / (cc.game.getFrameRate() * n),
                    h = null;
                for (let o = 0; o < this.Playing_ID.length; o++)
                    if (this.Playing_ID[o].ID == e) {
                        h = this.Playing_ID[o];
                        break
                    }
                o.AudioMgr.Instance.SetVolume(e, t);
                let d = () => {
                    l < r ? (a ? l += c : (r += c) <= 0 && (r = 0), o.AudioMgr.Instance.SetVolume(e, (a ? l : r) * this.MainVolume), h && (h.Volume = a ? l : r)) : (s && (s(), s = null), o.AudioMgr.Instance.SetVolume(e, i * this.MainVolume), h && (h.Volume = i), this.unschedule(d))
                };
                this.schedule(d, 0), this.scheduleOnce(() => {
                    s && (s(), s = null), o.AudioMgr.Instance.SetVolume(e, i * this.MainVolume), h && (h.Volume = i), this.unschedule(d)
                }, n)
            }
            SetNextSound(e, t, i = 1, n = !1) {
                let s = this.Play(t, 0, n);
                return cc.audioEngine.pause(s), cc.audioEngine.setLoop(e, !1), o.AudioMgr.Instance.SetFinishCallback(e, () => {
                    cc.audioEngine.setCurrentTime(s, 0), o.AudioMgr.Instance.SetVolume(s, i), cc.audioEngine.resume(s)
                }, this), s
            }
            SetMainVolume(e) {
                this.MainVolume = e;
                let t = this.Playing_ID.length;
                for (let i = 0; i < t; i++)
                    if (i < this.Playing_ID.length) {
                        let t = this.Playing_ID[i].Volume;
                        o.AudioMgr.Instance.SetVolume(this.Playing_ID[i].ID, t * e)
                    }
            }
            Clear() {
                this.BGMClip.forEach(() => {}), this.BGMClip = null, this.SoundClip.forEach(() => {}), this.SoundClip = null, this.Playing_ID.splice(0, this.Playing_ID.length), n.instance = null
            }
            isPlaying(e) {
                for (let t = 0; t < this.Playing_ID.length; t++)
                    if (this.Playing_ID[t].ID == e) return !0;
                return !1
            }
            PlayByAudioClipTable(e, t = 1, i = !1) {
                this.AudioClipTable[e] ? "" != this.AudioClipTable[e] && this.Play(this.AudioClipTable[e], t, i) : cc.error("Can't find corresponding audio, key = ", e)
            }
        };
        u.instance = null, s([h({
            range: [0, 1],
            slide: !0
        })], u.prototype, "MainVolume", void 0), s([h({
            type: [cc.AudioClip]
        })], u.prototype, "BGMClip", void 0), s([h({
            type: [cc.AudioClip]
        })], u.prototype, "SoundClip", void 0), u = n = s([c], u), i.default = u, cc._RF.pop()
    }, {
        "../../../../../LobbyCommon/Component/AudioMgr": void 0,
        "../../GameClient/JsonUtils": "JsonUtils",
        "./PreloadManager": "PreloadManager"
    }],
    AwardItem: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "079bdrV7eJLErbw9TOkuQJb", "AwardItem");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("../Common/PoolObj"),
            a = e("../Common/ResourceManager"),
            {
                ccclass: o,
                property: l
            } = cc._decorator;
        let r = class extends s.default {
            constructor() {
                super(...arguments), this.itemImg = null, this.itemNodeList = new Array
            }
            Init(e, t, i, n = 0, s = null) {
                this.SetItemNode(e), this.node.setPosition(t), this.node.setScale(0);
                let a = i.sub(this.node.getPosition()).mag(),
                    o = Math.min(.3, .03 * a);
                this.node.runAction(cc.sequence(cc.scaleTo(.3, 1), cc.delayTime(n), cc.spawn(cc.moveTo(o, i).easing(cc.easeSineOut()), cc.scaleTo(o, .2)), cc.delayTime(.3), cc.callFunc(() => {
                    s && s(this), this.recycleeNode()
                })))
            }
            SetItemImg(e) {
                this.itemImg && e && (this.itemImg.spriteFrame = e)
            }
            SetItemNode(e) {
                for (var t = this.GetItemNodeIndex(e), i = 0; i < this.itemNodeList.length; i++)
                    if (i == t) {
                        this.itemNodeList[i].active = !0;
                        var n = this.itemNodeList[i].getComponent(cc.Animation);
                        n && n.play()
                    } else this.itemNodeList[i].active = !1
            }
            recycleeNode() {
                a.default.DespawnAward("AwardItem", this.node)
            }
            GetItemNodeIndex(e) {
                return 0
            }
        };
        n([l(cc.Sprite)], r.prototype, "itemImg", void 0), n([l(Array(cc.Node))], r.prototype, "itemNodeList", void 0), r = n([o], r), i.default = r, cc._RF.pop()
    }, {
        "../Common/PoolObj": "PoolObj",
        "../Common/ResourceManager": "ResourceManager"
    }],
    AwardManager: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "922d9A69ddEU44WzTvWk+41", "AwardManager");
        var n, s = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            a = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        }), i.LineData = i.AwardType = void 0;
        const o = e("../Player/PlayerManager"),
            l = e("../Common/ResourceManager"),
            r = e("../Weapon/WeaponManager"),
            c = e("../Common/Utility"),
            h = e("../Common/EnumFilter"),
            d = e("../Common/AudioManager"),
            u = e("../Common/PreloadManager"),
            m = e("../../GameClient"),
            p = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            f = e("./SkillTitle"),
            S = e("./MedalRoot"),
            g = e("./BaseMedal"),
            y = e("../Common/PoolObj");
        var _;
        (function(e) {
            e.NormalFishNum = "NFN", e.NormalFishNumCountUp = "NFNCU", e.NormalFishNumOther = "NFNO", e.DoubleFishNum = "DFN", e.GoldenNum = "GN", e.DropCoin = "DC", e.HumpbackWhale = "18", e.FireDragon = "19", e.KingLacoste = "20", e.KingCrab = "24", e.Mermaid = "25", e.DragonTurtle = "32", e.KingAngle = "35", e.KingTaco = "36", e.Phoenix = "80", e.FireDragonJew = "19J", e.KingLacosteJew = "20J", e.KingCrabJew = "24J", e.MermaidJew = "25J", e.DragonTurtleJew = "32J", e.KingAngleJew = "35J", e.KingTacoJew = "36J", e.PhoenixJew = "80J", e.WealthGod = "116", e.TreasureCrab = "29", e.TreasureUpgrade = "29U", e.TreasureJew = "29J", e.IceDragon = "87", e.IceDragonJew = "87J", e.SmallTreasure = "SmallTreasure", e.BigTreasure = "BigTreasure", e.MedalRoot = "MedalRoot", e.KingArmorCrab = "129", e.KingArmorCrabJew = "129J", e.KingArmorCrabFullScreen = "129F", e.KingArmorCrabMedal = "129M", e.KingArmorCrabBigMedal = "129BM", e.KingTacoMedal = "117M", e.KingLacosteMedal = "124M", e.KingAngleMedal = "125M", e.KingSquid = "126", e.KingSquidJew = "126J", e.KingSquidMedal = "126M", e.KingJelly = "127", e.KingJellyJew = "127J", e.KingJellyMedal = "127M", e.GeneralLobsterMedal = "114M"
        })(_ = i.AwardType || (i.AwardType = {}));
        class C {
            constructor(e, t, i) {
                this.nodeList = null, this.height = 80, this.dragTime = 2, this.nodeList = e, this.height = t, null != i && (this.dragTime = i)
            }
        }
        i.LineData = C;
        const {
            ccclass: I
        } = cc._decorator;
        let P = n = class extends cc.Component {
            constructor() {
                super(...arguments), this.AwardList = new Array, this.CoinSound = -1, this.goldenSlotArray = [null, null, null, null], this.winSize = null
            }
            static get Instance() {
                return this.instance
            }
            onLoad() {
                n.instance = this
            }
            start() {
                u.default.Instance.onReleaseSceneEvent.AddListener(this.Clear.bind(this));
                for (let e = 0; e < 4; e++) this.AwardList[e] = new Array
            }
            SpawnAward(e, t, i) {
                let n = null;
                switch (e) {
                    case _.NormalFishNum:
                    case _.NormalFishNumCountUp:
                    case _.DoubleFishNum:
                    case _.GoldenNum:
                    case _.NormalFishNumOther:
                    case _.SmallTreasure:
                    case _.BigTreasure:
                        n = l.default.SpawnEffect(e, i);
                        break;
                    default:
                        n = l.default.SpawnAward(e, i)
                }
                return n && (n.stopAllActions(), n.setScale(1), n.angle = p.default.isReverse ? 180 : 0, n.setPosition(t)), n
            }
            NormalFishMoneyNum(e, t, i, n, s, a, h) {
                let u = null;
                u = o.PlayerManager.isMainSeat(n) ? this.SpawnAward(_.NormalFishNum, e, o.PlayerManager.isMainSeat(n)) : this.SpawnAward(_.NormalFishNumOther, e, o.PlayerManager.isMainSeat(n));
                let m = t / i;
                u.getComponent(cc.Label).string = c.default.NumberformatBet(t, i), u.scale = .5;
                let p = cc.Vec2.ZERO;
                if (s) {
                    var f = r.default.WeaponPosition(n);
                    (p = cc.v2(u.getPosition().sub(f))).normalizeSelf()
                } else p = cc.v2(Math.random() - .5, Math.random() - .5);
                return u.runAction(cc.spawn(cc.sequence(cc.scaleTo(.1, 2.1).easing(cc.easeBackOut()), cc.scaleTo(.3, 1)), cc.moveBy(.1, p.mul(50)), cc.callFunc(() => {
                    let e = cc.v2(Math.random() - .5, Math.random() - .5).add(p);
                    u.runAction(cc.sequence(cc.delayTime(.2), cc.moveBy(2.3, e.mul(25)).easing(cc.easeIn(1)), cc.callFunc(() => {
                        this.DropCoin(u.getPosition(), n, a, !1, t, h), o.PlayerManager.isMainSeat(n) ? l.default.DespawnEffect(_.NormalFishNum, u) : l.default.DespawnEffect(_.NormalFishNumOther, u), -1 != this.CoinSound && d.default.Instance.Stop(this.CoinSound), this.CoinSound = d.default.Instance.Play(this.GetCoinSound(m))
                    })))
                }))), 1.4
            }
            DoubleFishMoneyNum(e, t, i, n, s) {
                let a = this.SpawnAward(_.DoubleFishNum, e.node.getPosition(), o.PlayerManager.isMainSeat(n));
                e.node.runAction(cc.sequence(cc.delayTime(.5), cc.rotateTo(1, 0)));
                let r = new C([a, e.node], a.height);
                this.AwardLineUp(n, r, .5);
                let h = a.getComponentInChildren(cc.Label);
                h.node.setScale(1);
                let u = 0,
                    m = e.Odds * i * (1 / 23),
                    p = 1,
                    f = t / i,
                    S = 12 + Math.floor(f / 3);
                o.PlayerManager.Instance.players[n].bet_value > 10 ? p += Math.ceil((f - e.Odds) / e.Double) : m = t * (1 / 23);
                let g = cc.repeat(cc.sequence(cc.callFunc(() => {
                        u += m, h.string = c.default.NumberformatBet(u, i)
                    }), cc.delayTime(.05)), 23),
                    y = 1.75 * p + 1.5,
                    I = 1,
                    P = -1;
                return P = d.default.Instance.Play("28_whale_count_" + (I > 6 ? "6" : I.toString())), h.node.runAction(cc.sequence(cc.repeat(cc.sequence(g, cc.scaleBy(.1, 1.3), cc.callFunc(() => {
                    d.default.Instance.Stop(P), I + 1 <= p ? P = d.default.Instance.Play("28_whale_count_" + (I + 1 > 6 ? "6" : (I + 1).toString())) : (P = d.default.Instance.Play("29_whale_count1_" + (I > 6 ? "6" : I.toString())), d.default.Instance.SetNextSound(P, I >= 6 ? "30_whale_countend2" : "30_whale_countend"))
                }), cc.scaleBy(.2, .8), cc.delayTime(.3), cc.callFunc(() => {
                    m = ++I == p ? 1 / 23 * (t - u) : e.Double * i * (1 / 23)
                })), p), cc.delayTime(1.5), cc.callFunc(() => {
                    e && e.node && (e.node.setPosition(a.getPosition()), e.node.runAction(cc.sequence(cc.spawn(cc.rotateBy(1, 720), cc.repeat(cc.scaleBy(.1, .7), 10), cc.fadeOut(1)), cc.callFunc(() => {
                        e.RemoveSelf()
                    })))), -1 != this.CoinSound && d.default.Instance.Stop(this.CoinSound), this.CoinSound = d.default.Instance.Play(this.GetCoinSound(f)), this.AwardLineOff(r, n), a.opacity = 0
                }), cc.repeat(cc.sequence(cc.callFunc(() => {
                    let e = 100 * (Math.random() - .5),
                        t = 100 * (Math.random() - .5);
                    this.DropCoin(a.getPosition().sub(new cc.Vec2(e, t)), n, !1)
                }), cc.delayTime(.05)), S), cc.callFunc(() => {
                    a.opacity = 255, l.default.DespawnEffect(_.DoubleFishNum, a), s && o.PlayerManager.Instance.ModifyPlayerWinning(n, t)
                }))), d.default.Instance.Play("27_whale_catch"), y
            }
            DropCoin(e, t, i, n = !1, s, a) {
                let c = this.SpawnAward(_.DropCoin, e, o.PlayerManager.isMainSeat(t));
                c.scale = o.PlayerManager.isMainSeat(t) ? 1 : .8, a || (a = r.default.WeaponPosition(t));
                let h = cc.sequence(cc.moveBy(.2, cc.v2(0, p.default.isReverse ? -100 : 100)).easing(cc.easeOut(1)), cc.moveBy(.8, cc.v2(0, p.default.isReverse ? 100 : -100)).easing(cc.easeBounceOut()), cc.moveTo(.8, a).easing(cc.easeQuadraticActionOut()), cc.callFunc(() => {
                    i ? o.PlayerManager.Instance.ModifyPlayerWinning(t, s) : n && (o.PlayerManager.Instance.ModifyPlayerEntries(t, s, null, !1), o.PlayerManager.BulletSync(-1, null)), l.default.DespawnAward(_.DropCoin, c)
                }));
                c.runAction(h)
            }
            AwardLineUp(e, t, i, n = 0) {
                return a(this, void 0, void 0, function*() {
                    yield new Promise(e => {
                        setTimeout(e, 1e3 * i)
                    });
                    let s = r.default.WeaponPosition(e),
                        a = 140;
                    for (let t = 0; t < this.AwardList[e].length; t++) a += this.AwardList[e][t].height;
                    for (let i = 0; i < t.nodeList.length; i++) {
                        let o = cc.moveTo(t.dragTime, s.add(new cc.Vec2(0, e > 1 ? -a : a)).add(new cc.Vec2(0, e > 1 ? -n : n)));
                        o.easing(cc.easeQuadraticActionOut()), t.nodeList[i].runAction(o)
                    }
                    this.AwardList[e].push(t)
                })
            }
            AwardLineOff(e, t) {
                let i = this.AwardList[t].indexOf(e);
                if (i >= 0) {
                    this.AwardList[t].splice(i, 1);
                    let n = r.default.WeaponPosition(t),
                        s = 140;
                    for (let e = 0; e < this.AwardList[t].length; e++) {
                        for (let i = 0; i < this.AwardList[t][e].nodeList.length; i++)
                            if (this.AwardList[t][e].nodeList[i]) {
                                let a = cc.moveTo(1, n.add(new cc.Vec2(0, t > 1 ? -s : s)));
                                this.AwardList[t][e].nodeList[i].stopAllActions(), this.AwardList[t][e].nodeList[i].runAction(a)
                            }
                        s += this.AwardList[t][e].height
                    }
                    e = null
                } else cc.warn("Can't find node in award list")
            }
            HumpbackWhaleAward(e, t, i, n, s) {
                let a = this.SpawnAward(_.GoldenNum, e.node.getPosition(), o.PlayerManager.isMainSeat(n)),
                    h = a.getComponentInChildren(cc.Label),
                    u = t / i;
                h.node.setScale(1.2), h.string = c.default.NumberformatBet(t, i);
                let m = r.default.WeaponPosition(n),
                    p = 140;
                for (let o = 0; o < this.AwardList[n].length; o++) p += this.AwardList[n][o].height;
                e && e.node.runAction(cc.moveTo(3, cc.v2(m.x, m.y + (n > 1 ? -200 : 200))));
                let f = this.SpawnAward(_.HumpbackWhale, new cc.Vec2(m.x, m.y + (n > 1 ? -p : p)), o.PlayerManager.isMainSeat(n)),
                    S = new C([f], f.height, 2.5);
                this.AwardLineUp(n, S, 1);
                let g = new C([a], 100, 2.5);
                return this.AwardLineUp(n, g, 1), d.default.Instance.Play("38_catch_whale2"), this.node.runAction(cc.sequence(cc.delayTime(1), cc.callFunc(() => {
                    d.default.Instance.Play("37_catch_whale")
                }), cc.delayTime(3), cc.callFunc(() => {
                    -1 != this.CoinSound && d.default.Instance.Stop(this.CoinSound), this.CoinSound = d.default.Instance.Play(this.GetCoinSound(u))
                }), cc.repeat(cc.sequence(cc.callFunc(() => {
                    let e = 100 * (Math.random() - .5),
                        t = 100 * (Math.random() - .5);
                    this.DropCoin(f.getPosition().sub(new cc.Vec2(e, t)), n, !1)
                }), cc.delayTime(.05)), 50), cc.callFunc(() => {
                    this.AwardLineOff(S, n), this.AwardLineOff(g, n), l.default.DespawnEffect(_.GoldenNum, a), l.default.DespawnAward(_.HumpbackWhale, f), s && o.PlayerManager.Instance.ModifyPlayerWinning(n, t)
                }))), 4
            }
            BossAward(e, t, i, n, s) {
                let a = r.default.WeaponPosition(n),
                    u = null,
                    m = null,
                    p = null,
                    f = 0,
                    S = t;
                switch (h.default.getFishType(e.Type)) {
                    case h.FishType.FireDragon:
                        u = _.FireDragon, m = _.FireDragonJew;
                        break;
                    case h.FishType.KingCrab:
                        u = _.KingCrab, m = _.KingCrabJew;
                        break;
                    case h.FishType.KingLacoste:
                        u = _.KingLacoste, m = _.KingLacosteJew;
                        break;
                    case h.FishType.KingAngle:
                        u = _.KingAngle, m = _.KingAngleJew;
                        break;
                    case h.FishType.KingTaco:
                        u = _.KingTaco, m = _.KingTacoJew;
                        break;
                    case h.FishType.Mermaid:
                        u = _.Mermaid, m = _.MermaidJew;
                        break;
                    case h.FishType.DragonTurtle:
                        u = _.DragonTurtle, m = _.DragonTurtleJew;
                        break;
                    case h.FishType.Phoenix:
                        u = _.Phoenix, m = _.PhoenixJew;
                        break;
                    case h.FishType.IceDragon:
                        u = _.IceDragon, m = _.IceDragonJew;
                        break;
                    case h.FishType.ArmorKingCrab:
                        u = _.KingArmorCrab, m = _.KingArmorCrabJew, p = _.KingArmorCrabFullScreen, S = t / 2;
                        break;
                    case h.FishType.KingSquid:
                        u = _.KingSquid, m = _.KingSquidJew, f = 30;
                        break;
                    case h.FishType.KingJellyFish:
                        u = _.KingJelly, m = _.KingJellyJew, f = 30
                }
                let g = 0,
                    I = 0,
                    P = S / i,
                    v = [0, 100, 150, 250, 400, 600];
                for (let o = 0; o < v.length && P > v[o]; o++) I++;
                let b = v[1] * i * (1 / 39),
                    M = 1,
                    E = -1;
                return this.node.runAction(cc.sequence(cc.delayTime(2), cc.callFunc(() => {
                    let r = 140;
                    for (let e = 0; e < this.AwardList[n].length; e++) r += this.AwardList[n][e].height;
                    let h = cc.Vec2.ZERO;
                    e && e.node && (h = e.node.parent ? e.node.parent.convertToNodeSpaceAR(e.getFishPos()) : e.node.convertToNodeSpaceAR(e.getFishPos()));
                    let F = this.SpawnAward(_.GoldenNum, h, o.PlayerManager.isMainSeat(n)),
                        T = this.SpawnAward(u, new cc.Vec2(a.x, a.y + (n > 1 ? -r : r)), o.PlayerManager.isMainSeat(n)),
                        A = this.SpawnAward(m, h, o.PlayerManager.isMainSeat(n)),
                        w = new C([F, T, A], T.height, 2);
                    this.AwardLineUp(n, w, 2, f);
                    let k = F.getComponentInChildren(cc.Label);
                    k.string = "", k.node.setScale(1);
                    let L = cc.tween().repeat(39, cc.tween().call(() => {
                            g += b, k.string = c.default.NumberformatBet(g, i)
                        }).delay(.05)),
                        R = cc.tween().delay(2.2).call(() => {
                            E = d.default.Instance.Play("28_whale_count_" + (M > 6 ? "6" : M.toString()))
                        }).repeat(I, cc.tween().then(L).by(.1, {
                            scale: .3
                        }).call(() => {
                            d.default.Instance.Stop(E), M + 1 <= I ? E = d.default.Instance.Play("28_whale_count_" + (M + 1 > 6 ? "6" : (M + 1).toString())) : (E = d.default.Instance.Play("29_whale_count1_" + (M > 6 ? "6" : M.toString())), d.default.Instance.SetNextSound(E, M >= 6 ? "30_whale_countend2" : "30_whale_countend"))
                        }).by(.2, {
                            scale: -.2
                        }).delay(.3).call(() => {
                            b = ++M == I ? 1 / 39 * (S - g) : 1 / 39 * (v[M] * i - g)
                        })),
                        O = cc.tween().repeat(2, cc.tween().by(1, {
                            scale: .2
                        }).by(1, {
                            scale: -.2
                        })),
                        B = cc.tween().delay(2.5).call(() => {
                            -1 != this.CoinSound && d.default.Instance.Stop(this.CoinSound), this.CoinSound = d.default.Instance.Play(this.GetCoinSound(P)), this.AwardLineOff(w, n), l.default.DespawnAward(u, T), l.default.DespawnAward(m, A), F.opacity = 0
                        }),
                        D = cc.tween().repeat(50, cc.tween().call(() => {
                            let e = 100 * (Math.random() - .5),
                                t = 100 * (Math.random() - .5);
                            this.DropCoin(F.getPosition().sub(new cc.Vec2(e, t)), n, !1)
                        }).delay(.05)).call(() => {
                            F.opacity = 255, l.default.DespawnEffect(_.GoldenNum, F), s && o.PlayerManager.Instance.ModifyPlayerWinning(n, t)
                        }),
                        G = cc.tween().call(() => {
                            if (!o.PlayerManager.getPlayer(n).isPlaying) return;
                            let e = this.SpawnAward(p, cc.Vec2.ZERO, o.PlayerManager.isMainSeat(n)).getComponent(y.default);
                            e.setCustomData(t), e.recycleEvent = () => {
                                cc.tween(k.node).then(D).start()
                            }
                        });
                    cc.tween(k.node).then(R).parallel(O, B.then(p ? G : D)).start()
                }))), (39 * .05 + .6) * I + 3.5
            }
            WealthGodAward(e, t, i, n, s, a) {
                cc.log("\u8ca1\u795e\u9b5a\u6b7b\u4ea1 seat = " + s + ", \u81ea\u5df1 seat = " + o.PlayerManager.MainSeat + ", win = " + t + ", addBalance = " + a);
                let r = this.SpawnAward(_.WealthGod, p.default.isReverse ? new cc.Vec2(0, 30) : new cc.Vec2(0, -30), o.PlayerManager.isMainSeat(s));
                r.stopAllActions();
                let h = r.getChildByName("SuperWin"),
                    u = r.getChildByName("Scroll");
                u.setPosition(cc.Vec2.ZERO);
                let f = h.getChildByName("Effect_particle");
                f.active = !1, f.getComponentsInChildren(cc.ParticleSystem).forEach(e => {
                    e.resetSystem(), e.enabled = !1
                });
                let S = h.getChildByName("Shape").getComponent(sp.Skeleton);
                h.opacity = 0, h.runAction(cc.sequence(cc.delayTime(1), cc.callFunc(() => {
                    h.opacity = 255, S.setCompleteListener(null), S.setAnimation(1, "SuperWin_start", !1), d.default.Instance.Play("SuperWin"), f.active = !0, f.getComponentsInChildren(cc.ParticleSystem).forEach(e => {
                        e.enabled = !0
                    });
                    let e = 0;
                    S.setCompleteListener(() => {
                        S.setCompleteListener(null), S.setAnimation(1, "SuperWin_loop", !0), S.setCompleteListener(() => {
                            2 == ++e && (S.setCompleteListener(null), S.setAnimation(1, "SuperWin_ending", !1), S.setCompleteListener(() => {
                                S.setCompleteListener(null), f.getComponentsInChildren(cc.ParticleSystem).forEach(e => {
                                    e.stopSystem()
                                })
                            }))
                        })
                    })
                }))).setTag(3);
                let g = u.getChildByName("Odds").getComponent(cc.Label);
                g.node.stopAllActions(), g.string = "x" + t / i, g.node.setScale(0, 0);
                let y = u.getChildByName("Bet");
                y.setScale(0, 0), y.getChildByName("Label").getComponent(cc.Label).string = i.toString();
                let I = u.getChildByName("Win").getComponent(cc.Label);
                I.node.stopAllActions(), I.string = c.default.NumberformatBet(t, i), I.node.setScale(0, 0), I.node.opacity = 255;
                let P = u.getChildByName("Shape").getComponent(sp.Skeleton);
                if (null == g.node.getActionByTag(0)) {
                    let e = P.findBone("root"),
                        t = P.findBone("Frame");
                    g.node.runAction(cc.repeatForever(cc.sequence(cc.delayTime(.001), cc.callFunc(() => {
                        0 != u.opacity && (g.node.setPosition(t.worldX, e.y > 7.5 && e.y < 90 ? t.worldY + 5 : t.worldY), y.setPosition(g.node.x, g.node.y + 30 * g.node.scaleY), g.node.setScale(e.scaleX * (t.scaleX / .75), e.scaleY * t.scaleY / .75), y.setScale(g.node.scaleX, g.node.scaleY))
                    })))).setTag(0)
                }
                let v = l.default.SpawnEffect(_.WealthGod, !0);
                v.setParent(u), v.zIndex = -1, v.getComponentsInChildren(cc.ParticleSystem).forEach(e => {
                    e.resetSystem(), e.enabled = !1
                }), v.children.forEach(e => {
                    e.active = !1
                }), v.active = !1;
                let b = null;
                switch (n) {
                    case 1:
                        g.node.color = cc.color(255, 192, 160), P.setSkin("01_GREEN"), b = v.getChildByName("01_particle");
                        break;
                    case 2:
                        g.node.color = cc.color(223, 223, 223), P.setSkin("02_BLUE"), b = v.getChildByName("02_particle");
                        break;
                    case 3:
                    case 4:
                        g.node.color = cc.color(255, 223, 160), P.setSkin("03_RED"), b = v.getChildByName("03_particle");
                        break;
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                        g.node.color = cc.color(160, 255, 255), P.setSkin("04_PURPLE"), b = v.getChildByName("04_particle");
                        break;
                    default:
                        g.node.color = cc.color(255, 192, 160), P.setSkin("01_GREEN"), b = v.getChildByName("01_particle")
                }
                let M = null == e ? 0 : -1 != e.node.getChildByName("Shape").getComponent(sp.Skeleton).animation.indexOf("CATCH") ? .5 : 1.5;
                M += 4.5;
                let E = new C([r], 225, .75),
                    F = 0;
                return F = p.default.isReverse ? s < 2 ? 100 : 0 : s > 1 ? 100 : 0, this.AwardLineUp(s, E, 2 + M, F), u.opacity = 0, m.default.FishMissionSystem.CallMinimizeLayout(), u.runAction(cc.sequence(cc.delayTime(M), cc.callFunc(() => {
                    u.opacity = 255, I.node.runAction(cc.sequence(cc.delayTime(3.75), cc.callFunc(() => {
                        d.default.Instance.Play("09_wg_bonus_BigCoin"), v.active = !0, b.active = !0, b.getComponentsInChildren(cc.ParticleSystem).forEach(e => {
                            e.enabled = !0
                        }), b.opacity = 0
                    }), cc.scaleTo(.2, 2, 2), cc.callFunc(() => {
                        b.opacity = 255
                    }), cc.scaleTo(.1, 1, 1))).setTag(1), u.runAction(cc.sequence(cc.delayTime(2), cc.callFunc(() => {
                        d.default.Instance.Play("07_wg_bonus_open")
                    }))), P.setCompleteListener(null), P.setAnimation(0, "01_open", !1), P.setCompleteListener(() => {
                        P.setCompleteListener(null), P.setAnimation(0, "02_reward", !0);
                        let e = 0;
                        P.setCompleteListener(() => {
                            ++e >= 2 && (I.node.runAction(cc.sequence(cc.delayTime(.25), cc.callFunc(() => {
                                b.getComponentsInChildren(cc.ParticleSystem).forEach(e => {
                                    e.resetSystem(), e.enabled = !1
                                }), b.active = !1, v.active = !1
                            }), cc.spawn(cc.scaleTo(.2, 2, 2), cc.fadeOut(.2)))).setTag(2), P.setCompleteListener(null), P.setStartListener(() => {
                                P.setStartListener(null), u.runAction(cc.sequence(cc.delayTime(.5), cc.callFunc(() => {
                                    d.default.Instance.Play("08_wg_bonus_pass")
                                })))
                            }), P.setAnimation(0, "03_close", !1), P.setCompleteListener(() => {
                                P.setCompleteListener(null), r.stopAllActions(), g.node.stopAllActions(), I.node.stopAllActions(), this.AwardLineOff(E, s), l.default.DespawnAward(_.WealthGod, r), l.default.DespawnEffect(_.WealthGod, v), a && o.PlayerManager.Instance.ModifyPlayerWinning(s, t)
                            }))
                        })
                    })
                }))), 13.5 + M
            }
            TreasureUpgrade(e, t, i) {
                let n = r.default.WeaponPosition(e),
                    s = 140;
                for (let o = 0; o < this.AwardList[e].length; o++) s += this.AwardList[e][o].height;
                let a = cc.v2(n.x, n.y + (e > 1 ? -s : s)),
                    l = this.SpawnAward(_.TreasureUpgrade, a, o.PlayerManager.isMainSeat(e)).getComponent(f.default);
                l.SetBet(t, o.PlayerManager.isMainSeat(e)), l.ShowScore(i), d.default.Instance.Play("TreasureCrabEvolution", 1, !1), this.node.runAction(cc.sequence(cc.delayTime(2.5), cc.callFunc(() => {
                    d.default.Instance.Play("30_whale_countend", 1, !1)
                }), cc.callFunc(() => {
                    l.Hide()
                }), cc.repeat(cc.sequence(cc.callFunc(() => {
                    let t = 100 * (Math.random() - .5),
                        i = 100 * (Math.random() - .5);
                    this.DropCoin(a.sub(new cc.Vec2(t, i)), e, !1)
                }), cc.delayTime(.05)), 50), cc.callFunc(() => {
                    o.PlayerManager.Instance.ModifyPlayerWinning(e, i)
                })))
            }
            TreasureCrabAward(e, t, i, n, s) {
                let a = r.default.WeaponPosition(n);
                return this.node.runAction(cc.sequence(cc.delayTime(3), cc.callFunc(() => {
                    let i = 140;
                    for (let e = 0; e < this.AwardList[n].length; e++) i += this.AwardList[n][e].height;
                    let r = e && e.node.parent ? e.node.parent.convertToNodeSpaceAR(e.getFishPos()) : cc.Vec2.ZERO,
                        h = this.SpawnAward(_.GoldenNum, r, o.PlayerManager.isMainSeat(n)),
                        u = this.SpawnAward(_.TreasureCrab, new cc.Vec2(a.x, a.y + (n > 1 ? -i : i)), o.PlayerManager.isMainSeat(n)),
                        m = this.SpawnAward(_.TreasureJew, r, o.PlayerManager.isMainSeat(n));
                    m.getComponent("TreasureJew").Init(e.Level);
                    let p = new C([h, u, m], u.height, 2);
                    this.AwardLineUp(n, p, 2);
                    let f = h.getComponentInChildren(cc.Label);
                    f.string = "", f.node.setScale(1), f.node.runAction(cc.sequence(cc.delayTime(2), cc.callFunc(() => {
                        f.string = c.default.NumberformatBet(t, 1, !0)
                    }), cc.delayTime(4), cc.callFunc(() => {
                        this.AwardLineOff(p, n), l.default.DespawnAward(_.TreasureCrab, u), h.opacity = 0, d.default.Instance.Play("30_whale_countend2", 1, !1)
                    }), cc.repeat(cc.sequence(cc.callFunc(() => {
                        l.default.DespawnAward(_.TreasureJew, m);
                        let e = 100 * (Math.random() - .5),
                            t = 100 * (Math.random() - .5);
                        this.DropCoin(h.getPosition().sub(new cc.Vec2(e, t)), n, !1)
                    }), cc.delayTime(.05)), 50), cc.callFunc(() => {
                        h.opacity = 255, l.default.DespawnEffect(_.GoldenNum, h), s && o.PlayerManager.Instance.ModifyPlayerWinning(n, t)
                    })))
                }))), 5
            }
            SmallTreasure(e, t, i, n) {
                o.PlayerManager.isMainSeat(n) && o.PlayerManager.BulletSync(1);
                let s = this.SpawnAward(_.SmallTreasure, this.posFix(e ? e.getPosition() : cc.Vec2.ZERO), o.PlayerManager.isMainSeat(n));
                cc.tween(s).by(.2, {
                    position: cc.v3(0, p.default.isReverse ? -50 : 50)
                }, {
                    easing: "Out"
                }).by(.4, {
                    position: cc.v3(0, p.default.isReverse ? 50 : -50)
                }, {
                    easing: "BounceOut"
                }).start();
                let a = new C([s], s.height),
                    r = s.getComponentInChildren(cc.Label);
                r.node.parent.active = !1, r.node.setScale(1);
                let h = t * i,
                    u = 0,
                    m = h * (1 / 43),
                    f = 3 + Math.floor(t / 3);
                cc.tween(r).delay(.9).call(() => {
                    r.node.parent.active = !0;
                    let e = d.default.Instance.Play("28_whale_count_1");
                    d.default.Instance.SetNextSound(e, "29_whale_count1_1"), this.AwardLineUp(n, a, .5)
                }).repeat(43, cc.tween().call(() => {
                    u += m, r.string = c.default.NumberformatBet(u, i)
                }).delay(.05)).delay(1.5).call(() => {
                    -1 != this.CoinSound && d.default.Instance.Stop(this.CoinSound), this.CoinSound = d.default.Instance.Play(this.GetCoinSound(t)), this.AwardLineOff(a, n), s.opacity = 0
                }).repeat(f, cc.tween().call(() => {
                    let e = 100 * (Math.random() - .5),
                        t = 100 * (Math.random() - .5);
                    this.DropCoin(s.getPosition().sub(new cc.Vec2(e, t)), n, !1)
                }).delay(.05)).call(() => {
                    s.opacity = 255, l.default.DespawnEffect(_.SmallTreasure, s), o.PlayerManager.Instance.ModifyPlayerWinning(n, h)
                }).start()
            }
            BigTreasure(e, t, i, n) {
                o.PlayerManager.isMainSeat(n) && o.PlayerManager.BulletSync(1);
                let s = this.SpawnAward(_.BigTreasure, this.posFix(e ? e.getPosition() : cc.Vec2.ZERO), o.PlayerManager.isMainSeat(n));
                s.opacity = 255;
                let a = s.getComponentInChildren(sp.Skeleton);
                a.node.opacity = 255;
                let h = s.getComponentInChildren(cc.Label);
                h.node.parent.active = !1, h.node.setScale(1);
                let u = t * i,
                    m = 0,
                    f = u * (1 / 53),
                    S = 10 + (Math.floor(t / 5) > 10 ? 10 : Math.floor(t / 5)),
                    g = r.default.WeaponPosition(n);
                p.default.isReverse ? g.y = n > 1 ? g.y - 140 : g.y + 240 : g.y = n > 1 ? g.y - 240 : g.y + 140;
                let y = cc.sequence(cc.callFunc(() => {
                    h.node.parent.active = !0;
                    let e = d.default.Instance.Play("28_whale_count_6");
                    d.default.Instance.SetNextSound(e, "29_whale_count1_6")
                }), cc.repeat(cc.sequence(cc.callFunc(() => {
                    m += f, h.string = c.default.NumberformatBet(m, i)
                }), cc.delayTime(.05)), 53), cc.delayTime(1.5), cc.callFunc(() => {
                    -1 != this.CoinSound && d.default.Instance.Stop(this.CoinSound), this.CoinSound = d.default.Instance.Play(this.GetCoinSound(t))
                }), cc.moveTo(.8, g).easing(cc.easeQuadraticActionOut()), cc.spawn(cc.repeat(cc.sequence(cc.callFunc(() => {
                    let e = 100 * (Math.random() - .5),
                        t = 100 * (Math.random() - .5);
                    this.DropCoin(s.getPosition().sub(new cc.Vec2(e, t)), n, !1)
                }), cc.delayTime(.05)), S), cc.fadeOut(1)), cc.callFunc(() => {
                    l.default.DespawnEffect(_.BigTreasure, s), o.PlayerManager.Instance.ModifyPlayerWinning(n, u)
                }));
                a.setAnimation(0, "Start", !1), a.setCompleteListener(() => {
                    a.setAnimation(0, "Open", !1), a.setCompleteListener(() => {
                        a.setCompleteListener(null)
                    }), s.runAction(y)
                })
            }
            BlastCoin(e, t) {
                if (e.hasOwnProperty("winnings")) {
                    let t = e.winnings;
                    o.PlayerManager.BulletSync(1, t)
                } else o.PlayerManager.BulletSync(1);
                let i = o.PlayerManager.MainSeat,
                    n = e.collect_amount,
                    s = Math.floor(n / 50 + 1),
                    a = r.default.WeaponPosition(i);
                for (let r = 0; r < s; r++) {
                    let e = this.SpawnAward(_.DropCoin, t, o.PlayerManager.isMainSeat(i)),
                        s = cc.sequence(cc.moveBy(.3, cc.v2(200 * Math.random() - 100, 200 * Math.random() - 100)).easing(cc.easeOut(1)), cc.moveTo(.8, a).easing(cc.easeQuadraticActionOut()), cc.callFunc(() => {
                            0 == r && o.PlayerManager.Instance.ModifyPlayerWinning(i, n), l.default.DespawnAward(_.DropCoin, e)
                        }));
                    e.runAction(s)
                }
                d.default.Instance.Play("30_whale_countend")
            }
            posFix(e) {
                this.winSize || (this.winSize = cc.v2(.5 * p.default.WinSize.width, .5 * p.default.WinSize.height));
                let t = e;
                return t.x > this.winSize.x - 50 ? t.x = this.winSize.x - 100 - 100 * Math.random() : t.x < 50 - this.winSize.x && (t.x = 100 - this.winSize.x + 100 * Math.random()), t.y > this.winSize.y - 50 ? t.y = this.winSize.y - 100 - 100 * Math.random() : t.y < 50 - this.winSize.y && (t.y = 100 - this.winSize.y + 100 * Math.random()), t
            }
            GetCoinSound(e) {
                return e < 10 ? "34_coinjump_a" : e < 50 ? "34_coinjump_b" : "34_coinjump_c"
            }
            MedalAward(e, t, i, n, s, a) {
                let l = null,
                    r = cc.Vec2.ZERO;
                if (t && t.node) {
                    let c;
                    r = t.node.parent ? t.node.parent.convertToNodeSpaceAR(t.getFishPos()) : t.node.convertToNodeSpaceAR(t.getFishPos()), t.twitch(.5, "small" == e ? 5 : 10), c = h.default.getFishType(t.Type) == h.FishType.KingTaco ? _.KingTacoMedal : t.Type + "M", l = this.SpawnAward(c, r, o.PlayerManager.isMainSeat(s)).getComponent(g.default);
                    let u = this.getMedalRoot(s).bindMedal(l),
                        m = null;
                    a && (m = () => {
                        o.PlayerManager.Instance.ModifyPlayerWinning(s, i, null, !0, !0)
                    }), l.Init(e, i, n, m), "small" == e ? d.default.Instance.Play("small_Awards_01") : d.default.Instance.Play("middle_Awards_01"), cc.tween(l.node).delay(1).call(() => {
                        l.node && l.node.active && (r = l.node.convertToWorldSpaceAR(cc.Vec2.ZERO), l.node.setParent(u), l.node.setPosition(u.convertToNodeSpaceAR(r)), l.node.angle = p.default.isRoofSeat(s) ? 180 : 0)
                    }).to(.8, {
                        position: cc.Vec3.ZERO
                    }, {
                        easing: "cubicIn"
                    }).call(() => {
                        l.node && l.node.active && !l.forceEnding && l.ShowScore()
                    }).start()
                } else a && o.PlayerManager.Instance.ModifyPlayerWinning(s, i, null, !0, !0);
                return l
            }
            getMedalRoot(e) {
                let t = null;
                for (let i = 0; i < this.AwardList[e].length; i++)
                    for (let n = 0; n < this.AwardList[e][i].nodeList.length; n++)
                        if (t = this.AwardList[e][i].nodeList[n].getComponent(S.default)) return t.node.angle = e > 1 ? 180 : 0, t;
                if (!t) {
                    (t = this.SpawnAward(_.MedalRoot, cc.Vec2.ZERO, o.PlayerManager.isMainSeat(e)).getComponent(S.default)).node.angle = e > 1 ? 180 : 0;
                    let i = new C([t.node], t.node.height, 0);
                    this.AwardLineUp(e, i, 0), t.recycleEvent = () => {
                        this.AwardLineOff(i, e)
                    }
                }
                return t
            }
            ArmorCrabBigMedal(e, t, i, n, s) {
                if (e && e.node) {
                    let a = cc.Vec2.ZERO;
                    a = e.node.parent ? e.node.parent.convertToNodeSpaceAR(e.getFishPos()) : e.node.convertToNodeSpaceAR(e.getFishPos()), e.twitch(.5, 15);
                    let r = this.SpawnAward(_.KingArmorCrabBigMedal, a, o.PlayerManager.isMainSeat(n)),
                        h = new C([r], r.height, 1);
                    this.AwardLineUp(n, h, 1);
                    let u = r.getComponentInChildren(cc.Label);
                    u.string = c.default.NumberformatBet(s ? t / 2 : t, i, !1), u.node.setScale(1);
                    let m = s ? 20 : 10,
                        p = r.getComponentInChildren(sp.Skeleton);
                    p.setAnimation(0, s ? "Award_Small_Start_big" : "Award_Small_Start", !1), p.setCompleteListener(() => {
                        p.setCompleteListener(null), p.setAnimation(0, "Award_Small_Loop", !0)
                    }), d.default.Instance.Play("29_whale_count1_6");
                    let f = null,
                        S = null;
                    if (s) {
                        S = r.getChildByName("X2");
                        let e = 31,
                            n = t / 2,
                            s = t / 2 * (1 / e);
                        f = cc.tween().call(() => {
                            S.active = !0, S.scale = 0, cc.tween(S).to(.1, {
                                scale: 1.2
                            }).to(.2, {
                                scale: 1
                            }).start(), d.default.Instance.Play("20JPBom1_1")
                        }).repeat(e, cc.tween().call(() => {
                            n += s, u.string = c.default.NumberformatBet(n, i)
                        }).delay(.05)).call(() => {
                            u.string = c.default.NumberformatBet(t, i)
                        })
                    }
                    let g = cc.tween().call(() => {
                        S && (S.active = !1), this.AwardLineOff(h, n), p.setAnimation(0, "Award_Small_End", !1)
                    }).repeat(m, cc.tween().call(() => {
                        let e = 100 * (Math.random() - .5),
                            t = 100 * (Math.random() - .5);
                        this.DropCoin(r.getPosition().sub(new cc.Vec2(e, t)), n, !1)
                    }).delay(.05)).call(() => {
                        l.default.DespawnEffect(_.KingArmorCrabBigMedal, r), o.PlayerManager.Instance.ModifyPlayerWinning(n, t)
                    });
                    s ? cc.tween(this).delay(3).then(f).delay(2).then(g).start() : cc.tween(this).delay(4).then(g).start()
                }
            }
            EternalSquidAward(e, t, i, n, s) {
                e.FishDie(n, !1, null);
                let a = n > 1 ? 270 : 90,
                    r = p.default.isRoofSeat(n) ? 270 : 90,
                    u = cc.v2(-40, 0);
                SS.Common.GameEnvironment.CurrentGameNow == h.FishGame.LL && (a = n > 1 ? 90 : 270, r = p.default.isRoofSeat(n) ? 90 : 270, u = cc.v2(30, 0));
                let m = this.SpawnAward(_.NormalFishNumCountUp, e.node.getPosition(), o.PlayerManager.isMainSeat(n)),
                    f = m.getComponentInChildren(cc.Label);
                m.opacity = 0, m.setScale(1.2), f.string = c.default.NumberformatBet(t, i), m.setParent(e.node), m.setPosition(u), m.angle = r;
                let S = new cc.Node;
                S.setParent(e.node.parent), S.setPosition(e.node.getPosition()), e.node.setParent(S), e.node.setPosition(cc.v2(0, 0));
                let g = new C([S], 0, 2.5);
                return this.AwardLineUp(n, g, 1), e.node.runAction(cc.sequence(cc.delayTime(1.2), cc.rotateTo(2.5, a).easing(cc.easeQuadraticActionOut()))), this.node.runAction(cc.sequence(cc.delayTime(1), cc.callFunc(() => {
                    d.default.Instance.Play("41_catch_bigfish")
                }), cc.delayTime(2), cc.callFunc(() => {
                    m.opacity = 255, f.string = "0";
                    let e = 0; - 1 != this.CoinSound && d.default.Instance.Stop(this.CoinSound), this.CoinSound = d.default.Instance.Play("Aladdin_count_loop_01", 1, !0), m.runAction(cc.sequence(cc.delayTime(.03), cc.callFunc(() => {
                        let i = ((e += 1) / 100 * t).toFixed(0);
                        f.string = i, 100 == e && (f.string = t.toString(), m.stopAllActions(), m.runAction(cc.sequence(cc.callFunc(() => {
                            -1 != this.CoinSound && d.default.Instance.Stop(this.CoinSound), this.CoinSound = d.default.Instance.Play("Aladdin_count_end_01")
                        }), cc.delayTime(.5), cc.callFunc(() => {
                            d.default.Instance.Play("Aladdin_number_zoom_01")
                        }), cc.delayTime(.5), cc.scaleTo(.5, 1.5), cc.scaleTo(.5, 1.2))))
                    })).repeatForever())
                }), cc.delayTime(7), cc.callFunc(() => {
                    e.node.opacity = 0
                }), cc.repeat(cc.sequence(cc.callFunc(() => {
                    let e = 100 * (Math.random() - .5),
                        t = 100 * (Math.random() - .5);
                    this.DropCoin(S.getPosition().sub(new cc.Vec2(e, t)), n, !1)
                }), cc.delayTime(.05)), 60), cc.callFunc(() => {
                    e.node.opacity = 255, this.AwardLineOff(g, n), l.default.DespawnEffect(_.NormalFishNumCountUp, m), l.default.DespawnFish(h.FishType.EternalSquid, e.node), S.destroy(), s && o.PlayerManager.Instance.ModifyPlayerWinning(n, t)
                }))), 14
            }
            GeneralLobsterAward(e, t, i, n, s) {
                return a(this, void 0, void 0, function*() {
                    let a = null,
                        u = cc.Vec2.ZERO;
                    if (e && e.node) {
                        u = e.node.parent ? e.node.parent.convertToNodeSpaceAR(e.getFishPos()) : e.node.convertToNodeSpaceAR(e.getFishPos());
                        let m = r.default.WeaponPosition(n).add(new cc.Vec2(0, n > 1 ? -220 : 220)),
                            f = m.add(new cc.Vec2(0, p.default.isReverse ? 40 : -40));
                        (a = this.SpawnAward(_.GeneralLobsterMedal, u, o.PlayerManager.isMainSeat(n)).getComponent(g.default)).Init("middle", t, i, null);
                        let S = "MedalRootGeneralLobster";
                        SS.Common.GameEnvironment.CurrentGameNow == h.FishGame.LL && (S = "MedalRootGoldenToad");
                        let y = l.default.SpawnTitle(S, o.PlayerManager.isMainSeat(n));
                        y.angle = p.default.isReverse ? 180 : 0, y.setPosition(m), y.getChildByName("Title").scale = 0;
                        let C = this.SpawnAward(_.NormalFishNumCountUp, e.node.getPosition(), o.PlayerManager.isMainSeat(n)),
                            I = C.getComponentInChildren(cc.Label);
                        C.opacity = 0, C.setScale(1.2), I.string = c.default.NumberformatBet(t, i), C.setPosition(f), C.angle = p.default.isReverse ? 180 : 0, e.FishDie(n, !1, null), cc.tween(a.node).delay(3).call(() => {
                            if (!a.node || !a.node.active) return;
                            let e = y;
                            u = a.node.convertToWorldSpaceAR(cc.Vec2.ZERO), a.node.setParent(e), a.node.setPosition(e.convertToNodeSpaceAR(u)), a.node.angle = 0
                        }).to(1.5, {
                            position: cc.v3(0, 22.5, 0)
                        }, {
                            easing: "BounceIn"
                        }).call(() => {
                            y.getComponent(cc.Animation).play("SkillTitleShowUp")
                        }).delay(1).call(() => {
                            C.opacity = 255, I.string = "0";
                            let e = 0; - 1 != this.CoinSound && d.default.Instance.Stop(this.CoinSound), this.CoinSound = d.default.Instance.Play("Aladdin_count_loop_01", 1, !0), C.runAction(cc.sequence(cc.delayTime(.03), cc.callFunc(() => {
                                let i = ((e += 1) / 100 * t).toFixed(0);
                                I.string = i, 100 == e && (I.string = t.toString(), C.stopAllActions(), C.runAction(cc.sequence(cc.callFunc(() => {
                                    -1 != this.CoinSound && d.default.Instance.Stop(this.CoinSound), this.CoinSound = d.default.Instance.Play("Aladdin_count_end_01")
                                }), cc.delayTime(.5), cc.callFunc(() => {
                                    d.default.Instance.Play("Aladdin_number_zoom_01")
                                }), cc.delayTime(.5), cc.scaleTo(.5, 1.5), cc.scaleTo(.5, 1.2))))
                            })).repeatForever())
                        }).delay(5).call(() => {
                            y.getComponent(cc.Animation).play("SkillTitleFadeOut"), a.getComponent(cc.Animation).play("Medal_FadeOut"), l.default.DespawnEffect(_.NormalFishNumCountUp, C), s && o.PlayerManager.Instance.ModifyPlayerWinning(n, t)
                        }).start()
                    } else s && o.PlayerManager.Instance.ModifyPlayerWinning(n, t);
                    return a
                })
            }
            delay(e) {
                return a(this, void 0, void 0, function*() {
                    yield new Promise(t => {
                        setTimeout(() => {
                            t(null)
                        }, e)
                    })
                })
            }
            Clear() {
                this.AwardList.splice(0, this.AwardList.length), n.instance = null
            }
        };
        P.instance = null, P = n = s([I], P), i.default = P, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../../GameClient": "GameClient",
        "../Common/AudioManager": "AudioManager",
        "../Common/EnumFilter": "EnumFilter",
        "../Common/PoolObj": "PoolObj",
        "../Common/PreloadManager": "PreloadManager",
        "../Common/ResourceManager": "ResourceManager",
        "../Common/Utility": "Utility",
        "../Player/PlayerManager": "PlayerManager",
        "../Weapon/WeaponManager": "WeaponManager",
        "./BaseMedal": "BaseMedal",
        "./MedalRoot": "MedalRoot",
        "./SkillTitle": "SkillTitle"
    }],
    BLAZING_PHONEIX: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "fe272WASJ5PR64JoSdtGm27", "BLAZING_PHONEIX");
        var n = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            s = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("./BaseSpineFish"),
            o = e("../Common/AudioManager"),
            {
                ccclass: l,
                property: r
            } = cc._decorator;
        let c = class extends a.default {
            constructor() {
                super(...arguments), this.SpineEvent = (e, t) => {
                    if (t) switch (t.data.name) {
                        case "phoenix_s":
                            o.default.Instance.Play("Phoenix_fly_01", .8);
                            break;
                        case "phoenix_b":
                            o.default.Instance.Play("Phoenix_fly_02", .8)
                    }
                }
            }
            onInit() {
                this.offsetPos = cc.v2(1180, 0), this.node.angle = -(this.o + 90), this.skeleton.timeScale = 1, this.skeleton.setEventListener(this.SpineEvent), this.skeleton.setAnimation(0, "Phoenix_L_Fly", !1), this.isFeature = !0
            }
            PlayDieAnim() {
                const e = Object.create(null, {
                    PlayDieAnim: {
                        get: () => super.PlayDieAnim
                    }
                });
                return s(this, void 0, void 0, function*() {
                    e.PlayDieAnim.call(this), yield this.delay(1e3), o.default.Instance.Play("41_catch_bigfish")
                })
            }
            onFishDie() {
                super.onFishDie(), o.default.Instance.Play("Phoenix_die_02")
            }
        };
        c = n([l], c), i.default = c, cc._RF.pop()
    }, {
        "../Common/AudioManager": "AudioManager",
        "./BaseSpineFish": "BaseSpineFish"
    }],
    BaseBackGround: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "1b48cYROf9NqakE9ksMS4Ut", "BaseBackGround");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("../Common/PoolObj"),
            {
                ccclass: a,
                property: o
            } = cc._decorator;
        let l = class extends s.default {
            constructor() {
                super(...arguments), this.bossEnter = !1
            }
            reuse() {
                super.reuse(), this.bossEnter = !1
            }
            BossEnter() {
                this.bossEnter || this.ani.getClips().forEach(e => {
                    if ("Boss_Enter" == e.name) return this.ani.play("Boss_Enter"), void(this.bossEnter = !0)
                })
            }
            BossLeave() {}
        };
        l = n([a], l), i.default = l, cc._RF.pop()
    }, {
        "../Common/PoolObj": "PoolObj"
    }],
    BaseBullet: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "73317n1OttF1ZJxBBaWoATW", "BaseBullet");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("./WeaponManager"),
            a = e("../Player/PlayerManager"),
            o = e("../Fish/BaseFish"),
            l = e("../Common/ResourceManager"),
            r = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            {
                ccclass: c
            } = cc._decorator;
        let h = class extends cc.Component {
            constructor() {
                super(...arguments), this.bulletSpeed = 900, this.targetPos = null, this.startPos = null, this.bulletVec = null, this.bulletID = null, this.bulletType = null, this.bulletBet = null, this.seat = null, this.canCollision = !1, this.winSide = null
            }
            onLoad() {}
            update(e) {
                this.BulletMove(e)
            }
            Init(e, t, i, n, a) {
                this.winSide || (this.winSide = cc.v2(.5 * r.default.WinSize.width, .5 * r.default.WinSize.height)), this.seat = t, this.bulletID = e, this.bulletType = i, this.bulletBet = a || null, this.targetPos = n, this.startPos = s.default.WeaponPosition(t), this.bulletVec = this.targetPos.sub(this.startPos), this.bulletVec.normalizeSelf(), this.node.setPosition(this.startPos.add(this.bulletVec.mul(90))), this.node.angle = cc.misc.radiansToDegrees(Math.atan2(this.bulletVec.y, this.bulletVec.x)), this.canCollision = !0
            }
            BulletMove(e) {
                this.node.setPosition(this.node.getPosition().add(this.bulletVec.mul(this.bulletSpeed * e))), this.BulletReflection()
            }
            BulletReflection() {
                let e = !1;
                this.node.getPosition().x > this.winSide.x ? (this.bulletVec.x = -this.bulletVec.x, this.node.setPosition(new cc.Vec2(this.winSide.x, this.node.getPosition().y)), e = !0) : this.node.getPosition().x < -this.winSide.x && (this.bulletVec.x = -this.bulletVec.x, this.node.setPosition(new cc.Vec2(-this.winSide.x, this.node.getPosition().y)), e = !0), this.node.getPosition().y > this.winSide.y ? (this.bulletVec.y = -this.bulletVec.y, this.node.setPosition(new cc.Vec2(this.node.getPosition().x, this.winSide.y)), e = !0) : this.node.getPosition().y < -this.winSide.y && (this.bulletVec.y = -this.bulletVec.y, this.node.setPosition(new cc.Vec2(this.node.getPosition().x, -this.winSide.y)), e = !0), e && (this.node.angle = cc.misc.radiansToDegrees(Math.atan2(this.bulletVec.y, this.bulletVec.x)))
            }
            onCollisionEnter(e, t) {
                if (!this.canCollision) return;
                let i = e.node.getComponent(o.default);
                if (!i) {
                    let t = e.node.parent;
                    for (let e = 0; e < 5; e++)
                        if (t) {
                            if (i = t.getComponent("BaseFish")) break;
                            t = t.parent
                        }
                }
                if (!i || !i.CanCollisionByMainSeat(a.PlayerManager.isMainSeat(this.seat)) || i.IsSummonIng) return;
                let n = new Array;
                n.push(i.ID), s.default.Instance.HitFishRequest(this, n), a.PlayerManager.isMainSeat(this.seat) && i.OnHitFish(), this.canCollision = !1
            }
            Recycle() {
                this.targetPos = null, this.startPos = null, this.bulletVec = null, l.default.DespawnBullet(this.bulletType, this.node)
            }
        };
        h = n([c], h), i.default = h, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../Common/ResourceManager": "ResourceManager",
        "../Fish/BaseFish": "BaseFish",
        "../Player/PlayerManager": "PlayerManager",
        "./WeaponManager": "WeaponManager"
    }],
    BaseCrab: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "be6fcuWidpMf4aw4y6zgh+r", "BaseCrab");
        var n, s = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("./BaseFish"),
            {
                ccclass: o
            } = cc._decorator;
        let l = n = class extends a.default {
            constructor() {
                super(...arguments), this.spine = null, this.ANIMATION_NAME = {
                    SWIM: "SWIM",
                    READY_EXPLODE: "READY_EXPLODE",
                    FUSE: "FUSE",
                    BIGGER: "BIGGER"
                }
            }
            onEnable() {
                null == this.spine && (this.spine = this.node.getComponentInChildren(sp.Skeleton)), this.PlaySwin()
            }
            InitParameter() {
                super.InitParameter(), this.isFeature = !0
            }
            SetAnimationTimeScale(e) {
                this.spine && (this.spine.timeScale = e)
            }
            PlaySwin() {
                this.spine && this.spine.setAnimation(0, this.ANIMATION_NAME.SWIM, !0)
            }
            PlayReadyExplode() {
                this.spine && this.spine.setAnimation(0, this.ANIMATION_NAME.READY_EXPLODE, !0)
            }
            PlayFuse() {
                this.spine && this.spine.setAnimation(0, this.ANIMATION_NAME.FUSE, !1)
            }
            PlayBigger() {
                this.spine && this.spine.setAnimation(0, this.ANIMATION_NAME.BIGGER, !1)
            }
            PauseBehavior(e, t) {
                super.PauseBehavior(e, t), this.spine.paused = !0
            }
            ResumeBehavior() {
                super.ResumeBehavior(), this.spine.paused = !1
            }
            onMove(e) {
                const t = e.getComponent(n);
                e.AddSpeed(-90, 2), t.spine.timeScale = .7, this.scheduleOnce(() => {
                    t.spine.timeScale = 1.5, e.SetSpeed(200)
                }, 2)
            }
            onEnd(e) {
                e.getComponent(n).spine.timeScale = 1, super.onEnd(e)
            }
            RemoveSelf() {
                this.spine.setEventListener(null), this.spine.clearTracks(), super.RemoveSelf()
            }
        };
        l = n = s([o], l), i.default = l, cc._RF.pop()
    }, {
        "./BaseFish": "BaseFish"
    }],
    BaseFish: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "4db903sfG5OK6frJUYejV4h", "BaseFish");
        var n, s = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            a = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        }), i.BEHAVIOR_TYPE = i.FishOutType = i.FishState = void 0;
        const o = e("../../System/FishSystem"),
            l = e("./FishManager"),
            r = e("../Weapon/WeaponManager"),
            c = e("../Common/EnumFilter"),
            h = e("../Common/ResourceManager"),
            d = e("../Player/PlayerManager"),
            u = e("../Common/AudioManager"),
            m = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            {
                ccclass: p,
                property: f
            } = cc._decorator;
        var S, g, y;
        (function(e) {
            e[e.IDLE = 0] = "IDLE", e[e.ALIVE = 1] = "ALIVE", e[e.OUT = 2] = "OUT", e[e.DEAD = 3] = "DEAD"
        })(S = i.FishState || (i.FishState = {})),
        function(e) {
            e[e.FISH_DEAD = 0] = "FISH_DEAD", e[e.ALIVE_TIME_OUT = 1] = "ALIVE_TIME_OUT", e[e.FISH_OUT = 2] = "FISH_OUT", e[e.FISH_PATH_FINISH = 3] = "FISH_PATH_FINISH", e[e.FISH_FORCE_LEAVE = 4] = "FISH_FORCE_LEAVE"
        }(g = i.FishOutType || (i.FishOutType = {})),
        function(e) {
            e[e.NORMAL = 0] = "NORMAL", e[e.SEEK = 1] = "SEEK", e[e.PATH = 2] = "PATH", e[e.SPINE = 3] = "SPINE", e[e.STAND = 4] = "STAND"
        }(y = i.BEHAVIOR_TYPE || (i.BEHAVIOR_TYPE = {}));
        let _ = n = class extends cc.Component {
            constructor() {
                super(...arguments), this.fishRadius = 0, this.mainCoillder = null, this.mainFishNode = null, this.shapeNode = null, this.subColliderList = null, this.id = "0000", this.type = 0, this.x = 0, this.y = 0, this.o = 0, this.feature = 0, this.canCollision = !0, this.isFeature = !1, this.isInit = !1, this.parameter = null, this.hitEffectAction = null, this.fadeEffectAcion = null, this.mAnim = null, this.reSize = 1, this.defaultAliveTime = 60, this.aliveTime = 0, this.aliveStatus = S.IDLE, this.logAliveTime = 0, this.behaviorType = 0, this.lockNode = null, this.targetPos = null, this.startPos = null, this.moveSpeed = null, this.moveTime = 0, this.syncTime = 0, this.fixedTimestep = .03, this.counter = 0, this.posArray = null, this.offsetPos = cc.Vec2.ZERO, this.freeze_time = 0, this.freeze_callFunc = null, this.AISeek = null, this.mSeek = null, this.fishPath = null, this.effect = null, this.curveSpeed = 1, this.currentSpeed = 1, this.effectTime = 0, this.effectIndex = 0, this.index = 0, this.forwardAngle = 0, this.jumpIndex = -1, this.deltaPos = null, this.preTarget = null, this.alignmentX = 0, this.alignmentY = 0, this.pathInit = !1, this.isSummon = !1, this.isSummoning = !1, this.isInScreen = !1, this.Event_FishEnter = null, this.Event_FishLeave = null, this.Event_FishInit = null, this.shapePos = null, this.twitchAct = null
            }
            get FreezeTime() {
                return this.freeze_time
            }
            set ID(e) {
                this.id = e
            }
            get ID() {
                return this.id
            }
            set Type(e) {
                this.type = e
            }
            get Type() {
                return this.type
            }
            set Feature(e) {
                this.feature = e
            }
            get Feature() {
                return this.feature
            }
            set AliveTime(e) {
                this.defaultAliveTime = e
            }
            get AliveTime() {
                return this.defaultAliveTime
            }
            get CurrentAliveTime() {
                return this.aliveTime
            }
            set AliveStatus(e) {
                this.aliveStatus = e
            }
            get AliveStatus() {
                return this.aliveStatus
            }
            set CanCollision(e) {
                this.canCollision = e
            }
            get CanCollision() {
                return this.canCollision
            }
            CanCollisionByMainSeat(e) {
                return this.canCollision
            }
            getAliveTime() {
                let e = Math.floor(this.defaultAliveTime - this.logAliveTime);
                return this.logAliveTime = this.defaultAliveTime, e
            }
            get IsSummonIng() {
                return this.isSummoning
            }
            get IsFeatureFish() {
                return this.isFeature
            }
            get IsInScreen() {
                return this.isInScreen
            }
            onLoad() {
                this.mAnim = this.node.getComponent(cc.Animation), this.reSize = this.node.scale
            }
            onEnable() {
                this.mAnim && this.mAnim.play("Swim")
            }
            update(e) {
                if (this.aliveStatus == S.ALIVE) {
                    if (this.CheckInScreen(), this.freeze_time > 0) return this.freeze_time -= e, void(this.freeze_time <= 0 && this.ResumeBehavior());
                    switch (this.aliveTime -= e, this.aliveTime <= 0 && this.FishFadeOut(1, g.ALIVE_TIME_OUT), this.logAliveTime -= e, this.behaviorType) {
                        case y.NORMAL:
                            this.UpdateNormal(e);
                            break;
                        case y.SEEK:
                            this.UpdateSeek(e);
                            break;
                        case y.PATH:
                            if (this.counter += e, this.counter >= this.fixedTimestep) {
                                let e = Math.floor(this.counter / this.fixedTimestep);
                                this.counter = this.counter % this.fixedTimestep;
                                for (let t = 0; t < e; t++) this.UpdatePath()
                            }
                    }
                }
            }
            Init(e, t, i, n, s) {
                0 == this.fishRadius && (this.fishRadius = 60), this.id = t || e[o.FishData.id], this.type = e[o.FishData.type], this.x = e[o.FishData.x], this.y = e[o.FishData.y], this.o = e[o.FishData.o], this.feature = e[o.FishData.feature], this.parameter = s, this.AISeek = l.default.Instance.ai_seek, this.InitParameter(), this.behaviorType = n || y.NORMAL, -1 != [y.NORMAL, y.SEEK].indexOf(this.behaviorType) && (this.AISeek = l.default.Instance.ai_seek)
            }
            InitParameter() {
                this.canCollision = !0, this.node.stopAllActions(), this.isSummoning = !1, this.node.runAction(cc.fadeIn(.5)), this.mainFishNode && this.offsetPos.mag() > 0 && this.mainFishNode.setPosition(cc.Vec2.ZERO), this.node.scale = this.reSize, this.aliveStatus = S.ALIVE, this.aliveTime = this.defaultAliveTime, this.logAliveTime = this.defaultAliveTime, this.isInScreen = !1, this.shapeNode ? this.shapeNode.color = cc.Color.WHITE : (this.shapeNode = this.node.getChildByName("Shape"), this.shapeNode && (this.shapeNode.color = cc.Color.WHITE)), this.Event_FishLeave && (this.Event_FishLeave = null), this.behaviorType = y.NORMAL, this.isInit = !0, this.Event_FishInit && this.Event_FishInit(this)
            }
            InitNormalBehavior(e, t = 0) {
                this.moveToScreenOut(), this.syncTime = t, this.getPosArray(e)
            }
            UpdateNormal(e) {
                if (this.syncTime > 0 && (this.syncTime -= e), this.counter += e, this.counter >= this.fixedTimestep) {
                    if (this.posArray && this.posArray.length > 0) {
                        let e = this.posArray.pop();
                        e && this.node.setPosition(e), this.syncTime > 0 && this.posArray.length > 0 && (e = this.posArray.pop()) && this.node.setPosition(e)
                    }
                    this.posArray && this.posArray.length <= 0 && this.FishOut(), this.counter = 0
                }
            }
            moveToScreenOut() {
                const e = cc.v2(m.default.WinSize.width, m.default.WinSize.height);
                this.x -= 45, this.y -= 45, this.y *= -1, this.o += 90;
                const t = .004 * e.x * this.x,
                    i = .004 * e.y * this.y,
                    n = Math.tan(-cc.misc.degreesToRadians(this.o)),
                    s = -n * t + i;
                let a = c.default.NormalPathBound(this.type),
                    o = .5 * -e.x - a,
                    l = .5 * e.x + a,
                    r = .5 * e.y + a,
                    h = .5 * -e.y - a,
                    d = [cc.v2(o, n * o + s), cc.v2((s - h) / -n, h), cc.v2(l, n * l + s), cc.v2((s - r) / -n, r)],
                    u = [0, 1],
                    p = [cc.v2(cc.Vec2.ZERO.sub(d[0])).mag(), cc.v2(cc.Vec2.ZERO.sub(d[1])).mag()];
                for (let c = 1; c < d.length; c++) {
                    let e = cc.v2(cc.Vec2.ZERO.sub(d[c])).mag();
                    e <= p[0] ? (p[1] = p[0], p[0] = e, u[1] = u[0], u[0] = c) : e <= p[1] && (p[1] = e, u[1] = c)
                }
                let f = d[u[0]].y,
                    S = d[u[1]].y;
                this.o > 180 && this.o < 360 ? f < S ? (this.startPos = d[u[0]], this.targetPos = d[u[1]]) : (this.startPos = d[u[1]], this.targetPos = d[u[0]]) : f < S ? (this.startPos = d[u[1]], this.targetPos = d[u[0]]) : (this.startPos = d[u[0]], this.targetPos = d[u[1]])
            }
            InitSeek(e, t, i) {
                if (this.behaviorType = y.SEEK, this.AISeek) {
                    t = t || this.o % this.AISeek.GetPathCount(e);
                    const n = this.getOffset(this.o % 4);
                    this.AISeek.SetSeek(e, t, this.node, this.id, this.o, n, this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this), i)
                }
            }
            UpdateSeek(e) {
                this.aliveStatus == S.ALIVE && this.mSeek && this.mSeek.Update(e)
            }
            onStart(e) {
                if (e) {
                    let t = e.getComponent(n);
                    t && null == t.mSeek && (t.mSeek = e)
                }
            }
            onMove(e) {}
            onEnd(e) {
                e && e.getComponent(n).FishOut(g.FISH_PATH_FINISH)
            }
            getOffset(e) {
                var t = cc.Vec2.ONE;
                return 1 == e ? t = new cc.Vec2(1, -1) : 2 == e ? t = new cc.Vec2(-1, -1) : 3 == e && (t = new cc.Vec2(-1, 1)), t
            }
            StopAction() {
                this.ResumeBehavior(), this.mSeek && this.mSeek.onDead()
            }
            InitPath(e, t, i, n, s = 0, o = 0, l = 0, r = 0, c = 0, h = 0) {
                return a(this, void 0, void 0, function*() {
                    this.behaviorType = y.PATH, this.id = e, this.type = t, this.fishPath = i, this.effect = i.effect, this.index = 0, this.node.setPosition(cc.v2(-999, -999)), this.canCollision = !0, this.node.runAction(cc.fadeIn(.5)), this.node.scale = this.reSize, this.aliveStatus = S.ALIVE, this.isInit = !0, this.shapeNode ? this.shapeNode.color = cc.Color.WHITE : (this.shapeNode = this.node.getChildByName("Shape"), this.shapeNode && (this.shapeNode.color = cc.Color.WHITE)), this.Event_FishInit && this.Event_FishInit(this), this.aliveTime = 9999;
                    var a = Math.ceil(n - h);
                    let d = !1;
                    if (a < 0 && (d = !0), this.effectIndex = 0, this.effectTime = 0, this.curveSpeed = i.curveSpeed, this.currentSpeed = this.curveSpeed, this.forwardAngle = 0, this.x = l, this.y = r, this.o = c, this.index = 0, this.deltaPos = cc.Vec2.ZERO, this.alignmentX = s, this.alignmentY = o, this.preTarget = this.node.getPosition(), this.pathInit = !0, d)
                        for (var u = 0; u < -a / .03334; u++) this.UpdatePath()
                })
            }
            UpdatePath() {
                switch (this.aliveStatus) {
                    case S.IDLE:
                        break;
                    case S.ALIVE:
                        this.pathInit && this.MoveAlongPath()
                }
            }
            delay(e) {
                return a(this, void 0, void 0, function*() {
                    return new Promise(t => setTimeout(t, e))
                })
            }
            MoveAlongPath() {
                if (this.effectTime <= 0) {
                    for (let e = 0; e < this.currentSpeed; e++) {
                        if (null != this.effect && this.effectIndex < this.effect.length && this.effect[this.effectIndex].index == this.index) {
                            this.forwardAngle = this.effect[this.effectIndex].angle, this.effectTime = this.effect[this.effectIndex].time, this.jumpIndex = this.effect[this.effectIndex].jumpIndex;
                            let e = this.effect[this.effectIndex].eventName;
                            this.DoPathEventDelegate(e), this.effectIndex++
                        }
                        this.index++
                    }
                    if (this.jumpIndex > 0 && (this.index = this.jumpIndex, this.jumpIndex = -1), this.index < this.fishPath.path.length) {
                        let e = cc.Vec2.ZERO;
                        if (0 == this.o) e = cc.v2(this.fishPath.path[this.index].x, this.fishPath.path[this.index].y);
                        else {
                            let t = cc.v2(this.fishPath.path[this.index].x, this.fishPath.path[this.index].y);
                            t.subSelf(cc.v2(this.fishPath.path[0].x, this.fishPath.path[0].y));
                            let i = t.x,
                                n = t.y;
                            t.x = Math.cos(this.o * Math.PI / 180) * i - Math.sin(this.o * Math.PI / 180) * n + this.fishPath.path[0].x, t.y = Math.sin(this.o * Math.PI / 180) * i + Math.cos(this.o * Math.PI / 180) * n + this.fishPath.path[0].y, e = t
                        }
                        const t = cc.v2(e.sub(this.preTarget));
                        let i = cc.misc.radiansToDegrees(Math.atan2(t.y, t.x)) + this.forwardAngle;
                        this.node.angle = i, 0 != this.alignmentX || 0 != this.alignmentY ? (1 == this.index && (this.deltaPos = cc.v2(e.x + this.alignmentX, this.alignmentY + e.y)), e = cc.v2(this.deltaPos.sub(e)), i = cc.misc.radiansToDegrees(Math.atan2(e.y - this.preTarget.y, e.x - this.preTarget.x)), this.node.angle = i, this.node.setPosition(cc.v2(e))) : (e.addSelf(cc.v2(this.x, this.y)), this.node.setPosition(e.add(cc.v2(this.alignmentX, this.alignmentY)))), this.preTarget = cc.v2(e.x, e.y)
                    } else this.FishOut(g.FISH_PATH_FINISH)
                } else this.effectTime -= .03334
            }
            DoPathEventDelegate(e) {
                switch (e) {
                    case "CATCH":
                        this.PlayDieAnim()
                }
            }
            InitSummonBehavior(e) {
                const t = this.y / this.x,
                    i = -t * this.x + this.y,
                    n = -cc.misc.radiansToDegrees(Math.atan2(-this.y, -this.x)),
                    s = this.getBoundPos(t, i);
                this.startPos = cc.v2(this.x, this.y), s.forEach(e => {
                    Math.floor(n) === Math.floor(-cc.misc.radiansToDegrees(Math.atan2(e.y, e.x))) && (this.targetPos = e)
                }), this.getPosArray(), this.node.setScale(0), this.isSummoning = !0, this.node.runAction(cc.sequence(cc.scaleTo(.5, e), cc.callFunc(() => {
                    this.isSummoning = !1
                })))
            }
            getBoundPos(e, t) {
                const i = cc.v2(m.default.WinSize.width, m.default.WinSize.height),
                    n = c.default.NormalPathBound(18);
                return [cc.v2(.5 * -i.x - n, e * (.5 * -i.x - n) + t), cc.v2((t - (.5 * -i.y - n)) / -e, .5 * -i.y - n), cc.v2(.5 * i.x + n, e * (.5 * i.x + n) + t), cc.v2((t - (.5 * i.y + n)) / -e, .5 * i.y + n)]
            }
            getPosArray(e) {
                this.isSummon = !e;
                let t = e || "" + this.type;
                this.moveSpeed = this.AISeek.GetMaxSpeed(t) || 140;
                const i = cc.v2(this.targetPos.sub(this.startPos));
                if (this.node.setPosition(this.startPos), this.node.angle = cc.misc.radiansToDegrees(Math.atan2(i.y, i.x)), this.moveTime = i.mag() / this.moveSpeed, this.moveTime >= 40) return void this.FishOut();
                const n = Math.floor(this.moveTime / this.fixedTimestep),
                    s = i.x / n,
                    a = i.y / n;
                this.posArray = new Array(n);
                for (let o = 1; o <= n; o++) this.posArray[n - o] = cc.v2(this.startPos.x + s * o, this.startPos.y + a * o)
            }
            OnHitFish() {
                (this.shapeNode || (this.shapeNode = this.node.getChildByName("Shape"), this.shapeNode)) && (this.hitEffectAction && (this.hitEffectAction.isDone || (this.shapeNode.stopAction(this.hitEffectAction), this.hitEffectAction = null, this.shapeNode.color = cc.Color.WHITE)), this.hitEffectAction = cc.repeat(cc.sequence(cc.tintTo(.1, 200, 0, 0), cc.tintTo(.1, 255, 255, 255)), 2), this.shapeNode.runAction(this.hitEffectAction))
            }
            FishRunOut(e) {
                if (this.behaviorType != y.NORMAL) return;
                let t = Math.floor(e / .01);
                this.node.runAction(cc.repeat(cc.sequence(cc.callFunc(() => {
                    this.UpdateNormal(.03)
                }), cc.delayTime(.01)), t))
            }
            FishFadeOut(e = .5, t) {
                this.aliveStatus == S.ALIVE && (this.canCollision = !1, this.fadeEffectAcion = this.node.runAction(cc.sequence(cc.fadeOut(e), cc.callFunc(() => {
                    this.FishOut(t)
                }))))
            }
            FishOut(e) {
                this.AliveStatus == S.ALIVE && (this.aliveStatus = S.OUT, this.StopAction(), l.default.Instance.FishOut(this.id), this.RemoveSelf(), this.Event_FishLeave && this.Event_FishLeave(this, e))
            }
            PauseBehavior(e, t) {
                this.freeze_time = e, t && (this.freeze_callFunc = t), this.mAnim && this.mAnim.pause();
                try {
                    this.mSeek && this.mSeek.Pause()
                } catch (i) {
                    cc.error(i), cc.error(this.mSeek)
                }
            }
            ResumeBehavior() {
                this.mAnim && this.mAnim.resume(), this.mSeek && this.mSeek.Resume(), this.freeze_callFunc && this.freeze_callFunc(this), this.freeze_callFunc = null
            }
            FishDie(e, t = !0, i) {
                return a(this, void 0, void 0, function*() {
                    if (this.aliveStatus = S.DEAD, this.canCollision = !1, this.isInit = !1, this.hitEffectAction && (this.shapeNode.stopAction(this.hitEffectAction), this.shapeNode.color = cc.Color.WHITE), this.fadeEffectAcion && (this.node.stopAction(this.fadeEffectAcion), this.fadeEffectAcion = null, this.node.opacity = 255), this.Event_FishLeave && this.Event_FishLeave(this, 6), this.node && this.node.active) {
                        switch (this.StopAction(), c.default.getFishType(this.type)) {
                            case c.FishType.Double:
                                this.MovingFish(e, this.node.getPosition(), t), this.mAnim && this.mAnim.play("Die"), u.default.Instance.Play("bomb_ex01_random"), i && 1 == i.AllTypeNormal && this.node.runAction(cc.sequence(cc.spawn(cc.rotateBy(2, 720), cc.repeat(cc.scaleBy(.2, .9), 5), cc.fadeOut(1)), cc.delayTime(3), cc.callFunc(() => {
                                    this.RemoveSelf()
                                })));
                                break;
                            case c.FishType.Normal:
                                this.MovingFish(e, this.node.getPosition(), t), this.node.runAction(cc.sequence(cc.delayTime(.5), cc.spawn(cc.rotateBy(2, 720), cc.repeat(cc.scaleBy(.2, .9), 5), cc.fadeOut(1)), cc.delayTime(2.6), cc.callFunc(() => {
                                    this.RemoveSelf()
                                })))
                        }
                        this.ShakeCoinEffect(e, c.default.needShakeEffect(this.type)), this.onFishDie()
                    }
                })
            }
            onFishDie() {}
            MovingFish(e, t, i) {
                if (!i) return;
                var n = r.default.WeaponPosition(e);
                let s = cc.v2(this.node.getPosition().sub(n));
                s.normalizeSelf(), this.node.runAction(cc.moveTo(.1, t.add(new cc.Vec2(s.x, s.y).mul(50))))
            }
            RemoveSelf() {
                this.Event_FishEnter = null, this.Event_FishLeave = null, this.Event_FishInit = null, this.isInit = !1, this.isInScreen = !1, this.node && this.node.stopAllActions(), this.mAnim && this.mAnim.stop(), this.parameter = null, this.posArray = null, this.targetPos = null, this.startPos = null, this.moveSpeed = null, this.effectIndex = 0, this.effectTime = 0, this.forwardAngle = 0, this.behaviorType = 0, this.fishPath = null, this.effect = null, this.pathInit = !1, l.default.Instance.RemoveFishByID(this.id), h.default.DespawnFish(this.Type, this.node), this.enabled = !1, this.AISeek = null, this.mSeek = null, this.shapePos = null, this.twitchAct = null
            }
            PlayDieAnim() {
                this.mAnim && this.mAnim.play("Die")
            }
            CheckInScreen() {
                if (!this.isInit) return;
                let e = this.FishInScreen();
                e != this.isInScreen && (this.isInScreen = e, e ? this.GetLockLinkPoint(m.default.Instance.node.getPosition()) ? this.Event_FishEnter && this.Event_FishEnter(this) : this.isInScreen = !1 : this.Event_FishLeave && this.Event_FishLeave(this, 7))
            }
            FishInScreen() {
                var e = m.default.WinSize,
                    t = this.node.convertToWorldSpaceAR(cc.Vec2.ZERO),
                    i = t.x + this.fishRadius > 0 && t.x - this.fishRadius < e.width,
                    n = t.y + this.fishRadius > 0 && t.y - this.fishRadius < e.height;
                return i && n
            }
            PointInColliderRange(e) {
                if (this.mainCoillder) {
                    let t = this.mainCoillder.getComponent(cc.CircleCollider);
                    if (t && this.mainCoillder.convertToWorldSpaceAR(cc.Vec2.ZERO).sub(e).mag() <= t.radius) return !0
                }
                this.subColliderList || (this.subColliderList = this.node.getComponentsInChildren(cc.Collider));
                for (let t = 0; t < this.subColliderList.length; t++) {
                    let i = this.subColliderList[t];
                    if (i && this.subColliderList[t].node.convertToWorldSpaceAR(cc.Vec2.ZERO).sub(e).mag() <= i.radius) return !0
                }
                return !1
            }
            GetLockLinkPoint(e, t) {
                if (!this.node || !this.node.active || !this.isInScreen) return null;
                let i = this.isLockInScreen(this.mainCoillder);
                if (i) return t && t(this.mainCoillder), i;
                if (i = this.isLockInScreen(this.lockNode)) return t && t(this.lockNode), i;
                if (this.lockNode = null, this.subColliderList || (this.subColliderList = this.node.getComponentsInChildren(cc.Collider)), this.subColliderList.length <= 0) return t && t(this.node), this.node.getPosition();
                let n = Number.MAX_VALUE;
                for (let s = 0; s < this.subColliderList.length; s++) {
                    let t = this.isLockInScreen(this.subColliderList[s].node);
                    if (t) {
                        let a = e.sub(t).mag();
                        a < n && (n = a, i = t, this.lockNode = this.subColliderList[s].node)
                    }
                }
                return t && t(this.lockNode), i
            }
            isLockInScreen(e) {
                if (e) {
                    let t = null;
                    if ((t = this.isSummon && this.mainFishNode ? this.mainFishNode.convertToWorldSpaceAR(e.getPosition()) : e.parent.convertToWorldSpaceAR(e.getPosition())).x >= 0 && t.x < m.default.WinSize.width - 0 && t.y >= 0 && t.y < m.default.WinSize.height - 0) return t
                }
                return null
            }
            GetFishScore(e) {
                return l.default.Instance.fish_info[this.type].odds ? l.default.Instance.fish_info[this.type].odds * e : (cc.error("Fish Type:" + this.type.toString() + ", No odds in fish_info."), 0)
            }
            get Odds() {
                return l.default.Instance.fish_info[this.type].odds ? l.default.Instance.fish_info[this.type].odds : (cc.error("Fish Type:" + this.type.toString() + ", No odds in fish_info."), 0)
            }
            get Double() {
                return l.default.Instance.fish_info[this.type].double ? l.default.Instance.fish_info[this.type].double : (cc.error("Fish Type:" + this.type.toString() + ", No double in fish_info."), 0)
            }
            CoinEffect(e = 1.5) {
                this.subColliderList || (this.subColliderList = this.node.getComponentsInChildren(cc.Collider)), this.subColliderList.forEach(t => {
                    const i = h.default.SpawnEffect("CoinBlast"),
                        n = t;
                    let s = null;
                    i && (i.scale = n.radius / 90 * e, s = t.node.convertToWorldSpaceAR(cc.Vec2.ZERO), i.setPosition(i.parent.convertToNodeSpaceAR(s)))
                })
            }
            ShakeCoinEffect(e, t = 1) {
                if (t <= 0) return;
                d.PlayerManager.isMainSeat(e) && m.default.CameraShakeEffect(.25, 6 * t, .1);
                let i = h.default.SpawnEffect("DFB");
                i && (i.setPosition(this.node.getPosition()), i.setScale(t))
            }
            getFishPos() {
                return this.mainCoillder ? this.mainCoillder.convertToWorldSpaceAR(cc.Vec2.ZERO) : this.node.convertToWorldSpaceAR(cc.Vec2.ZERO)
            }
            SetShapeColor(e) {
                this.shapeNode ? this.shapeNode.color = e : cc.error("Shape null", this.type)
            }
            twitch(e, t = 5) {
                this.twitchAct && (this.twitchAct = null, this.shapeNode.stopAction(this.twitchAct), this.shapeNode.setPosition(this.shapePos)), this.shapePos = this.shapeNode.getPosition();
                let i = e / .1;
                this.twitchAct = cc.sequence(cc.repeat(cc.sequence(cc.moveBy(.05, cc.v2(t, t)), cc.moveBy(.05, cc.v2(-t, -t))), i), cc.moveTo(.05, this.shapePos)), this.shapeNode.runAction(this.twitchAct)
            }
            SetSyncTime(e) {
                this.syncTime = e
            }
            setExdata(e) {}
            changeLevel(e) {}
            get oddsRootPos() {}
        };
        s([f(cc.Integer)], _.prototype, "fishRadius", void 0), s([f(cc.Node)], _.prototype, "mainCoillder", void 0), s([f(cc.Node)], _.prototype, "mainFishNode", void 0), _ = n = s([p], _), i.default = _, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../../System/FishSystem": "FishSystem",
        "../Common/AudioManager": "AudioManager",
        "../Common/EnumFilter": "EnumFilter",
        "../Common/ResourceManager": "ResourceManager",
        "../Player/PlayerManager": "PlayerManager",
        "../Weapon/WeaponManager": "WeaponManager",
        "./FishManager": "FishManager"
    }],
    BaseFlashFish: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "a80bbc2DktI3Z5nqrfQnpXj", "BaseFlashFish");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("./BaseFish"),
            {
                ccclass: a,
                property: o
            } = cc._decorator;
        let l = class extends s.default {
            constructor() {
                super(...arguments), this.flashAnim = null
            }
            InitParameter() {
                super.InitParameter(), this.isFeature = !0, this.switchFlashEffect(!0)
            }
            switchFlashEffect(e) {
                this.flashAnim && (this.flashAnim.node.active = e, e ? this.flashAnim.play() : this.flashAnim.stop())
            }
            RemoveSelf() {
                this.node && this.flashAnim && this.flashAnim.stop(), super.RemoveSelf()
            }
        };
        n([o(cc.Animation)], l.prototype, "flashAnim", void 0), l = n([a], l), i.default = l, cc._RF.pop()
    }, {
        "./BaseFish": "BaseFish"
    }],
    BaseMedal: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "ee5e2NgmEhHbYo+L0LanqcI", "BaseMedal");
        var n = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            s = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("../Common/PoolObj"),
            o = e("../Common/Utility"),
            l = e("../Common/ResourceManager"),
            r = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            {
                ccclass: c,
                property: h
            } = cc._decorator;
        let d = class extends a.default {
            constructor() {
                super(...arguments), this.scoreLabel = null, this.medalType = null, this.addBalanceEvent = null, this.forceEnding = !1, this.win = 0, this.bet = 0, this.numNode = null, this.isRecycle = !1
            }
            Init(e, t, i, n) {
                this.isRecycle = !1, this.scoreLabel.string = " ", this.win = t, this.bet = i, this.medalType = e, this.ani.play("Jew_" + this.medalType), this.forceEnding = !1, this.addBalanceEvent = n, this.numNode && (cc.error("ERROR numnode"), l.default.DespawnEffect("MedalNumber", this.numNode)), this.numNode = null, this.numNode = l.default.SpawnEffect("MedalNumber", !0), this.numNode.active = !1
            }
            update(e) {
                let t = this.node.convertToWorldSpaceAR(cc.v2(0, 0));
                t = t.add(cc.v2(0, -44.2)), this.numNode.setPosition(this.numNode.parent.convertToNodeSpaceAR(t))
            }
            ShowScore() {
                if (this.forceEnding) return;
                this.ani.play("Medal_" + this.medalType), this.numNode.active = !0, this.numNode.getComponent(cc.Label).string = o.default.NumberformatBet(this.win, this.bet, !1);
                let e = this.node.convertToWorldSpaceAR(cc.v2(0, 0));
                e = e.add(cc.v2(0, -44.2)), this.numNode.angle = r.default.isReverse ? 180 : 0, this.numNode.setPosition(this.numNode.parent.convertToNodeSpaceAR(e))
            }
            ForceEnd(e = !1) {
                return s(this, void 0, void 0, function*() {
                    0 == this.forceEnding ? (e && (yield SS.Common.WaitForSeconds(1.5)), this.isRecycle || (this.ani.play("Medal_End"), this.forceEnding = !0)) : cc.error("ForceEnd fail")
                })
            }
            Recycle() {
                this.isRecycle = !0, cc.Tween.stopAllByTarget(this.node), null != this.numNode && l.default.DespawnEffect("MedalNumber", this.numNode), this.numNode = null, this.addBalanceEvent && (this.addBalanceEvent(), this.addBalanceEvent = null), super.Recycle()
            }
        };
        n([h(cc.Label)], d.prototype, "scoreLabel", void 0), d = n([c], d), i.default = d, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../Common/PoolObj": "PoolObj",
        "../Common/ResourceManager": "ResourceManager",
        "../Common/Utility": "Utility"
    }],
    BaseSkillAward: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "eafa7T3mhtFBY/bMt5N0/A0", "BaseSkillAward");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("../Common/ResourceManager"),
            a = e("../Common/Utility"),
            {
                ccclass: o,
                property: l
            } = cc._decorator;
        let r = class extends cc.Component {
            constructor() {
                super(...arguments), this.awardAnim = null, this.winText = null, this.currentWin = 0, this.targetWin = 0, this.step = 0, this.resource_type = ""
            }
            Init(e) {
                this.currentWin = e, this.SetWinText(e), this.awardAnim && this.awardAnim.play("SkillAwardAnim_CommonShow")
            }
            Hide() {
                this.awardAnim && this.awardAnim.play("SkillAwardAnim_CommonHide")
            }
            SetWinText(e, t, i = 3, n) {
                if (this.winText)
                    if (this.currentWin = e, e != (t = null == t ? e : t)) {
                        this.node.stopAllActions();
                        const s = Math.pow(10, i - 1);
                        this.step = Math.abs(e - t) / s, this.node.runAction(cc.sequence(cc.repeat(cc.spawn(cc.callFunc(() => {
                            this.currentWin += s, this.winText.string = a.default.NormalitionFloat(this.currentWin).toString()
                        }), cc.delayTime(.02)), this.step), cc.callFunc(() => {
                            this.winText.string = a.default.NormalitionFloat(t).toString()
                        }), cc.delayTime(1), cc.callFunc(() => {
                            this.currentWin = 0, this.targetWin = 0, n && n()
                        })))
                    } else this.winText.string = a.default.NormalitionFloat(e).toString(), n && n()
            }
            OnShowAnimEnd() {
                this.awardAnim && this.awardAnim.play("SkillAwardAnim_CommonIdel")
            }
            OnHideAnimEnd() {
                this.awardAnim && this.awardAnim.stop(), s.default.DespawnAward(this.resource_type, this.node)
            }
        };
        n([l(cc.Animation)], r.prototype, "awardAnim", void 0), n([l(cc.Label)], r.prototype, "winText", void 0), n([l(cc.String)], r.prototype, "resource_type", void 0), r = n([o], r), i.default = r, cc._RF.pop()
    }, {
        "../Common/ResourceManager": "ResourceManager",
        "../Common/Utility": "Utility"
    }],
    BaseSkillOddsUI: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "c3ffcc3O5BNdZAo36ag8eGW", "BaseSkillOddsUI");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            a = e("../Common/PoolObj"),
            o = e("../Fish/BaseFish"),
            {
                ccclass: l,
                property: r
            } = cc._decorator;
        let c = class extends a.default {
            constructor() {
                super(...arguments), this.label = null, this.labelSize = [], this.frame = null, this.frameScale = [], this.levelOdds = [], this.targetOdds = 0, this.nowOdds = 0, this.tempLevel = 0, this.fish = null, this.step = 0, this.isSkill = !1
            }
            update(e) {
                if (!this.isSkill)
                    if (this.fish && this.fish.AliveStatus == o.FishState.ALIVE) {
                        let t = this.node.parent.convertToNodeSpaceAR(this.fish.oddsRootPos);
                        this.node.setPosition(t), this.step += e, this.step > .1 && this.targetOdds > this.nowOdds && (this.nowOdds++, this.label.string = "X" + this.nowOdds.toString(), this.changeLevel())
                    } else this.node.setPosition(cc.Vec2.ONE.mul(5e3))
            }
            bindFish(e) {
                this.isSkill = !1, this.fish = e, this.nowOdds = this.targetOdds, this.tempLevel = 0, this.changeLevel(), this.frame.scale = this.frameScale[0], this.label.fontSize = this.labelSize[0], this.label.string = "X" + this.nowOdds.toString(), this.node.opacity = 0, this.node.runAction(cc.sequence(cc.fadeIn(1), cc.callFunc(() => {
                    this.node.opacity = 255
                }))), this.node.angle = s.default.isReverse ? 180 : 0
            }
            setTargetNumber(e) {
                this.targetOdds = e
            }
            SkillInit(e, t = !0) {
                this.isSkill = !0, this.frame.scale = this.frameScale[1], this.label.fontSize = this.labelSize[1], this.label.string = "X" + e.toString(), this.node.opacity = 0, t && this.node.runAction(cc.sequence(cc.delayTime(.5), cc.fadeIn(1), cc.callFunc(() => {
                    this.node.opacity = 255
                })))
            }
            Hide(e = !0, t = !0) {
                e ? this.node.runAction(cc.sequence(cc.fadeOut(1), cc.callFunc(() => {
                    this.node.opacity = 0, t && this.Recycle()
                }))) : (this.node.opacity = 0, t && this.Recycle())
            }
            changeLevel() {
                if (this.fish)
                    if (this.nowOdds >= this.levelOdds[1]) {
                        if (3 == this.tempLevel) return;
                        this.fish.changeLevel(3), this.ani.play("Odds_LV3"), this.tempLevel = 3
                    } else if (this.nowOdds >= this.levelOdds[0]) {
                    if (2 == this.tempLevel) return;
                    this.fish.changeLevel(2), this.ani.play("Odds_LV2"), this.tempLevel = 2
                } else {
                    if (1 == this.tempLevel) return;
                    this.fish.changeLevel(1), this.ani.play("Odds_LV1"), this.tempLevel = 1
                }
            }
        };
        n([r(cc.Label)], c.prototype, "label", void 0), n([r([cc.Integer])], c.prototype, "labelSize", void 0), n([r(cc.Node)], c.prototype, "frame", void 0), n([r([cc.Float])], c.prototype, "frameScale", void 0), n([r([cc.Integer])], c.prototype, "levelOdds", void 0), c = n([l], c), i.default = c, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../Common/PoolObj": "PoolObj",
        "../Fish/BaseFish": "BaseFish"
    }],
    BaseSkillScoreUI: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "4ccedvDPuhFnLUUIeKtN8OK", "BaseSkillScoreUI");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("../Common/PoolObj"),
            a = e("../Common/Utility"),
            {
                ccclass: o,
                property: l
            } = cc._decorator;
        let r = class extends s.default {
            constructor() {
                super(...arguments), this.scoreText = null, this.Bet = .1, this.CountingAct = null, this.ShowingScore = 0, this.TargetScore = 0
            }
            Init(e) {
                this.Bet = e, this.SetScore(0, 0);
                let t = this.getComponent(cc.Animation);
                t && t.stop(), this.node.active = !0, this.node.opacity = 0, this.node.runAction(cc.sequence(cc.fadeIn(.5), cc.callFunc(() => {
                    this.node.opacity = 255, t && t.play()
                })))
            }
            Hide(e) {
                this.scoreText && (this.CountingAct && (this.scoreText.node.stopAction(this.CountingAct), this.CountingAct = null), this.ShowingScore = this.TargetScore, this.scoreText.string = a.default.NumberformatBet(this.ShowingScore, this.Bet)), e ? this.node.runAction(cc.sequence(cc.fadeOut(.5), cc.callFunc(() => {
                    this.Recycle()
                }))) : this.Recycle()
            }
            SetScore(e, t = 3) {
                if (this.TargetScore = e, this.scoreText)
                    if (this.CountingAct && (this.scoreText.node.stopAction(this.CountingAct), this.CountingAct = null), t > 0) {
                        let i = t / .05,
                            n = (e - this.ShowingScore) / i;
                        this.CountingAct = cc.repeat(cc.sequence(cc.callFunc(() => {
                            this.ShowingScore += n, this.scoreText.string = a.default.NumberformatBet(this.ShowingScore, this.Bet)
                        }), cc.delayTime(.05)), i), this.scoreText.node.runAction(this.CountingAct)
                    } else this.ShowingScore = e, this.scoreText.string = a.default.NumberformatBet(this.ShowingScore, this.Bet)
            }
        };
        n([l(cc.Label)], r.prototype, "scoreText", void 0), r = n([o], r), i.default = r, cc._RF.pop()
    }, {
        "../Common/PoolObj": "PoolObj",
        "../Common/Utility": "Utility"
    }],
    BaseSkillTitleUI: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "132a3/UrklFvaaQWW0kPRXD", "BaseSkillTitleUI");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            a = e("../Common/AudioManager"),
            o = e("../Common/PoolObj"),
            l = e("../Common/Utility"),
            r = e("../Weapon/WeaponManager"),
            {
                ccclass: c,
                property: h
            } = cc._decorator;
        let d = class extends o.default {
            constructor() {
                super(...arguments), this.ScoreLabel = null, this.ScoreFont = [], this.BetLabel = null, this.ReverseOffset = -200, this.AddScoreLabel = null, this.Bet = 0, this.Seat = null, this.isScoreShowing = !1, this.ShowingScore = 0, this.CountingAct = null
            }
            Init(e, t, i = null) {
                this.Bet = e, this.Seat = t;
                let n = r.default.WeaponUIPosition(this.Seat);
                (s.default.isReverse && t < 2 || !s.default.isReverse && t > 1) && n.addSelf(cc.Vec2.UP.mul(this.ReverseOffset)), i ? (this.node.setPosition(i), cc.tween(this.node).to(2.5, {
                    position: cc.v3(n)
                }, {
                    easing: "backInOut"
                }).start()) : this.node.setPosition(n), this.ScoreLabel.string = l.default.NumberformatBet(this.ShowingScore, e), this.BetLabel && (this.BetLabel.string = l.default.NumberformatBet(e, e)), this.ani && this.ani.play("TitleShowUp")
            }
            SetScore(e, t = 1.05) {
                if (this.CountingAct && (this.ScoreLabel.node.stopAction(this.CountingAct), this.CountingAct = null), t > 0) {
                    let i = t / .05,
                        n = (e - this.ShowingScore) / i;
                    this.CountingAct = cc.repeat(cc.sequence(cc.callFunc(() => {
                        this.ShowingScore += n, this.ScoreLabel.string = l.default.NumberformatBet(this.ShowingScore, this.Bet)
                    }), cc.delayTime(.05)), i), this.ScoreLabel.node.runAction(this.CountingAct)
                } else this.ShowingScore = e, this.ScoreLabel.string = l.default.NumberformatBet(this.ShowingScore, this.Bet)
            }
            ShowScore(e, t = !0) {
                this.isScoreShowing || (this.ShowingScore = e, this.ScoreLabel.string = l.default.NumberformatBet(e, this.Bet), this.ScoreFont.length > 1 && (this.ScoreLabel.font = this.ScoreFont[1]), this.ani && (this.ani.play(t ? "TitleBigWin" : "TitleYouWin"), a.default.Instance.Play(t ? "Buffalo_win_02" : "Buffalo_win_01")), (s.default.isReverse && this.Seat < 2 || !s.default.isReverse && this.Seat > 1) && this.node.runAction(cc.moveBy(1, cc.Vec2.UP.mul(t ? -100 : -60))), this.isScoreShowing = !0)
            }
            AddScore(e) {
                this.AddScoreLabel && (this.AddScoreLabel.string = "+" + e, cc.tween(this.AddScoreLabel.node).by(.5, {
                    position: cc.Vec3.UP.mul(20),
                    scale: .5,
                    opacity: 255
                }).by(.5, {
                    position: cc.Vec3.UP.mul(-20),
                    scale: -.5
                }).call(() => {
                    let t = this.ShowingScore + e;
                    this.SetScore(t, 1.5)
                }).delay(1).to(.5, {
                    opacity: 0
                }).start())
            }
            Hide(e = !0) {
                e ? this.node.runAction(cc.sequence(cc.fadeOut(.5), cc.callFunc(this.Recycle.bind(this)))) : this.Recycle()
            }
            Recycle() {
                this.ScoreLabel.string = "0", this.ScoreFont.length > 0 && (this.ScoreLabel.font = this.ScoreFont[0]), this.isScoreShowing = !1, this.ShowingScore = 0, this.node.opacity = 255, super.Recycle()
            }
        };
        n([h(cc.Label)], d.prototype, "ScoreLabel", void 0), n([h([cc.Font])], d.prototype, "ScoreFont", void 0), n([h(cc.Label)], d.prototype, "BetLabel", void 0), n([h(cc.Integer)], d.prototype, "ReverseOffset", void 0), n([h(cc.Label)], d.prototype, "AddScoreLabel", void 0), d = n([c], d), i.default = d, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../Common/AudioManager": "AudioManager",
        "../Common/PoolObj": "PoolObj",
        "../Common/Utility": "Utility",
        "../Weapon/WeaponManager": "WeaponManager"
    }],
    BaseSkill: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "d0b79jH4mpEZorzqh1QLADX", "BaseSkill");
        var n = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            s = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        }), i.skillEnum = void 0;
        const a = e("../Common/PoolObj"),
            o = e("../Player/PlayerManager"),
            l = e("../Fish/FishManager"),
            r = e("../Common/ResourceManager"),
            c = e("../Weapon/WeaponManager"),
            h = e("../../GameClient"),
            d = e("../Common/AudioManager"),
            u = e("../Award/SkillTitle"),
            m = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            p = e("./BaseSkillScoreUI");
        var f;
        (function(e) {
            e[e.None = -1] = "None", e[e.Lock = 30001] = "Lock", e[e.LockLv2 = 300012] = "LockLv2", e[e.LockLv3 = 300013] = "LockLv3", e[e.TigerWeapon = 36001] = "TigerWeapon", e[e.DragonWeapon = 37001] = "DragonWeapon", e[e.Freeze = 30011] = "Freeze", e[e.Summon = 30021] = "Summon", e[e.Laser = 30031] = "Laser", e[e.Bombing = 30041] = "Bombing", e[e.Rocket = 30051] = "Rocket", e[e.Wind = 10005] = "Wind", e[e.Flash = 10006] = "Flash", e[e.Electric = 10007] = "Electric", e[e.Drill = 10008] = "Drill", e[e.Bomb = 10009] = "Bomb", e[e.MultiBomb = 10010] = "MultiBomb", e[e.FlameStorm = 10011] = "FlameStorm", e[e.Wheel = 10012] = "Wheel", e[e.ThunderDragon = 10013] = "ThunderDragon", e[e.AwakenKingSpiderCrab = 10014] = "AwakenKingSpiderCrab", e[e.AwakenKingAnglerFish = 10015] = "AwakenKingAnglerFish", e[e.AwakenKingTaco = 10016] = "AwakenKingTaco", e[e.AwakenKingLacoste = 10017] = "AwakenKingLacoste", e[e.AwakenMermaid = 10020] = "AwakenMermaid", e[e.AwakenPhoenix = 10021] = "AwakenPhoenix", e[e.Hammer = 10022] = "Hammer", e[e.Buffalo = 10023] = "Buffalo", e[e.Patrick = 10024] = "Patrick", e[e.KingKong = 10025] = "KingKong", e[e.RockSkull = 10026] = "RockSkull", e[e.Vampire = 10027] = "Vampire", e[e.Buddha = 10028] = "Buddha", e[e.DragonTurtle = 10029] = "DragonTurtle", e[e.LionDance = 10030] = "LionDance", e[e.RedDragon = 10031] = "RedDragon", e[e.Submarine = 10032] = "Submarine", e[e.LuckyCat = 10033] = "LuckyCat", e[e.Clown = 10034] = "Clown", e[e.Pig = 10035] = "Pig", e[e.Tiger = 10036] = "Tiger", e[e.BlazingTiger = 10037] = "BlazingTiger", e[e.GoldenSlot = 10041] = "GoldenSlot", e[e.BuddhaPalm = 10042] = "BuddhaPalm", e[e.EternalDragonTurtle = 10043] = "EternalDragonTurtle", e[e.ThunderDragonEx = 10044] = "ThunderDragonEx", e[e.ThunderDragonEx_Small = 10045] = "ThunderDragonEx_Small"
        })(f = i.skillEnum || (i.skillEnum = {}));
        const {
            ccclass: S,
            property: g
        } = cc._decorator;
        let y = class extends cc.Component {
            constructor() {
                super(...arguments), this.skillType = f.None, this.playerSeat = 0, this.playerBet = 1, this.currentWin = 0, this.currentOdds = 0, this.totalWin = 0, this.totalOdds = 0, this.dieFishList = null, this.winList = null, this.oddsList = null, this.limitTime = 60, this.limitTimer = 0, this.isMainPlayer = !1, this.isGaveAward = !1, this.isUnuse = !1, this.forceTime = 5, this.forceTimer = 0, this.isForceShowAward = !1, this.bgmID = null, this.SkillTitle = null, this.ScoreUIName = null, this.SkillScoreUI = null, this.skillEffectList = null, this.shootRecording = !1
            }
            update(e) {
                this.LimitTimeUpdate(e)
            }
            Init(e, t = null) {
                this.SetSeat(e), this.InitProperties(t), this.UseSkill()
            }
            SetSeat(e) {
                if (this.playerSeat = e, this.isMainPlayer = o.PlayerManager.isMainSeat(e), this.isMainPlayer && h.default.Instance) switch (this.skillType) {
                    case f.Electric:
                    case f.Drill:
                    case f.MultiBomb:
                    case f.ThunderDragon:
                    case f.AwakenKingSpiderCrab:
                    case f.AwakenKingTaco:
                    case f.AwakenKingLacoste:
                    case f.AwakenMermaid:
                    case f.AwakenPhoenix:
                    case f.Hammer:
                    case f.Buffalo:
                    case f.KingKong:
                    case f.FlameStorm:
                    case f.Wheel:
                        h.default.Instance.RecordingSkillID = this.skillType, this.shootRecording = !0
                }
            }
            InitProperties(e = null) {
                this.dieFishList = new Array, this.winList = new Array, this.oddsList = new Array, this.currentWin = 0, this.totalWin = 0, this.totalOdds = 0, this.limitTimer = this.limitTime, this.forceTimer = 0, this.isGaveAward = !1, this.isUnuse = !1, this.isForceShowAward = !1, this.isMainPlayer && h.default.FishMissionSystem.CallMinimizeLayout()
            }
            UseSkill() {}
            UnUseSkill() {
                if (this.node && this.node.stopAllActions(), this.unscheduleAllCallbacks(), o.PlayerManager.Instance.ModifyPlayerWinning(this.playerSeat, this.totalWin), this.isUnuse = !0, this.dieFishList) {
                    for (let e = 0; e < this.dieFishList.length; e++) this.dieFishList[e] && this.dieFishList[e].RemoveSelf();
                    this.dieFishList = null
                }
                this.winList = null, this.oddsList = null, null != this.bgmID && (d.default.Instance.Fade(this.bgmID, 1, 0), d.default.Instance.Fade(d.default.Instance.GetBGMID(), 0, 1)), this.bgmID = null, this.HideSkillTitle(), this.HideSkillScoreUI(), this.RemoveSkillEffect(), h.default.SkillSystem && h.default.SkillSystem.RemoveSkill(this.skillType, this.playerSeat, this), r.default.DespawnSkill(this.skillType, this.node), this.shootRecording && h.default.Instance && h.default.Instance.RecordingSkillID == this.skillType && (h.default.Instance.RecordingSkillID = null), this.shootRecording = !1
            }
            ReceiveSkillData(e = null, t = null) {}
            GetSkillType() {
                return this.skillType
            }
            SetSkillType(e) {
                this.skillType = e
            }
            IsGaveAward() {
                return this.isGaveAward
            }
            LimitTimeUpdate(e) {
                if (!this.isUnuse && this.limitTimer > 0 && (this.limitTimer -= e, this.limitTimer <= 0 && (this.limitTimer = 0, this.isForceShowAward = !0, this.UnUseSkill(), this.isMainPlayer))) {
                    let e = "SkillTimeOut_" + this.skillType.toString();
                    h.default.Instance.CallOnError("C35", e)
                }
            }
            CreateSkillTitle() {
                if (this.isUnuse) return;
                this.SkillTitle && this.HideSkillTitle(!1);
                const e = r.default.SpawnTitle(this.skillType, this.isMainPlayer);
                if (e) {
                    e.angle = m.default.isReverse ? 180 : 0;
                    const t = this.playerSeat > 1 ? new cc.Vec2(0, -180) : new cc.Vec2(0, 180),
                        i = c.default.WeaponPosition(this.playerSeat).add(t);
                    e.setPosition(i), e.opacity = 255, this.SkillTitle = e.getComponent(u.default), this.SkillTitle.SetBet(this.playerBet, this.isMainPlayer)
                }
            }
            ShowSkillScore(e) {
                this.SkillTitle && !this.isUnuse && (this.isMainPlayer && 0 == e ? h.default.Instance.CallOnError("C44", "SkillZeroWin") : this.SkillTitle.ShowScore(e))
            }
            SetSkillScore(e, t = .5) {
                this.SkillTitle && this.SkillTitle.SetScore(e, t)
            }
            HideSkillTitle(e = !0) {
                this.SkillTitle && (this.SkillTitle.Hide(e), this.SkillTitle = null)
            }
            CreateScoreUI() {
                if (this.isUnuse) return;
                this.SkillScoreUI && this.HideSkillScoreUI(!1);
                const e = r.default.SpawnEffect(this.ScoreUIName, this.isMainPlayer);
                if (e) {
                    e.angle = m.default.isReverse ? 180 : 0;
                    let t = cc.Vec2.ZERO;
                    switch (this.playerSeat) {
                        case 0:
                            t.x = this.isMainPlayer ? 174 : -196, t.y = this.isMainPlayer ? 77 : m.default.isReverse ? 60 : 83;
                            break;
                        case 1:
                            t.x = this.isMainPlayer ? -196 : 174, t.y = this.isMainPlayer ? 77 : m.default.isReverse ? 60 : 83;
                            break;
                        case 2:
                            t.x = this.isMainPlayer ? -196 : 174, t.y = this.isMainPlayer ? -77 : m.default.isReverse ? -83 : -60;
                            break;
                        case 3:
                            t.x = this.isMainPlayer ? 174 : -196, t.y = this.isMainPlayer ? -77 : m.default.isReverse ? -83 : -60
                    }
                    e.setPosition(c.default.WeaponPosition(this.playerSeat).add(t)), e.opacity = 255, this.SkillScoreUI = e.getComponent(p.default), this.SkillScoreUI.Init(this.playerBet)
                }
            }
            SetScoreUICount(e, t = .5) {
                this.SkillScoreUI && this.SkillScoreUI.SetScore(e, t)
            }
            HideSkillScoreUI(e = !0) {
                this.SkillScoreUI && (this.SkillScoreUI.Hide(e), this.SkillScoreUI = null)
            }
            AddSkillEffect(e, t, i = 0, n = null) {
                let s = r.default.SpawnEffect(e, this.isMainPlayer);
                s && (s.setPosition(t), s.angle = i, s.scale = 1, this.skillEffectList || (this.skillEffectList = new Array), this.skillEffectList.push(s), n && n(s))
            }
            RemoveSkillEffect() {
                if (this.skillEffectList)
                    for (let e = 0; e < this.skillEffectList.length; e++) {
                        let t = null;
                        this.skillEffectList[e] && this.skillEffectList[e].active && (t = this.skillEffectList[e].getComponent(a.default)), t && t.Recycle()
                    }
                this.skillEffectList = null
            }
            delay(e) {
                return s(this, void 0, void 0, function*() {
                    yield new Promise(t => {
                        setTimeout(() => {
                            this.node && !this.isUnuse && t(null)
                        }, e)
                    })
                })
            }
            CameraShakeEffect(e = 1, t = 1) {
                m.default.CameraShakeEffect(e, t)
            }
            KillFishesAndShowAward(e) {
                if (!this.dieFishList || this.dieFishList.length <= 0) return 0;
                let t = 0;
                for (let i = 0; i < this.dieFishList.length; i++) {
                    let n = this.dieFishList[i];
                    null != n && l.default.Instance.KillFish(this.playerSeat, n, this.winList[i], this.playerBet, !1, !0, e => {
                        t < e && (t = e)
                    }, e)
                }
                return this.dieFishList.length = 0, this.winList.length = 0, t
            }
            onHitFish(e, t, i) {}
            PlayAwardSound() {
                let e = this.playerBet <= 0 ? 0 : this.totalWin / this.playerBet,
                    t = "";
                t = e < 50 ? "25_flash_result1" : e < 100 ? "25_flash_result2" : e < 200 ? "25_flash_result3" : "25_flash_result", d.default.Instance.Play(t)
            }
            RegisterTouchEvent() {
                m.default.RegisterTouchEvent(cc.Node.EventType.TOUCH_START, this.OnTouchStart, this), m.default.RegisterTouchEvent(cc.Node.EventType.TOUCH_MOVE, this.OnTouchMove, this), m.default.RegisterTouchEvent(cc.Node.EventType.TOUCH_END, this.OnTouchEnd, this), m.default.RegisterTouchEvent(cc.Node.EventType.TOUCH_CANCEL, this.OnTouchEnd, this)
            }
            CanelRegisterTouchEvent() {
                m.default.CanelTouchEvent(cc.Node.EventType.TOUCH_START, this.OnTouchStart, this), m.default.CanelTouchEvent(cc.Node.EventType.TOUCH_MOVE, this.OnTouchMove, this), m.default.CanelTouchEvent(cc.Node.EventType.TOUCH_END, this.OnTouchEnd, this), m.default.CanelTouchEvent(cc.Node.EventType.TOUCH_CANCEL, this.OnTouchEnd, this)
            }
            OnTouchStart(e) {}
            OnTouchMove(e) {}
            OnTouchEnd(e) {}
        };
        y = n([S], y), i.default = y, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../../GameClient": "GameClient",
        "../Award/SkillTitle": "SkillTitle",
        "../Common/AudioManager": "AudioManager",
        "../Common/PoolObj": "PoolObj",
        "../Common/ResourceManager": "ResourceManager",
        "../Fish/FishManager": "FishManager",
        "../Player/PlayerManager": "PlayerManager",
        "../Weapon/WeaponManager": "WeaponManager",
        "./BaseSkillScoreUI": "BaseSkillScoreUI"
    }],
    BaseSpineFish: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "915321WvqlLrK4RjBCvs+N1", "BaseSpineFish");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            a = e("./BaseFish"),
            {
                ccclass: o,
                property: l,
                executeInEditMode: r
            } = cc._decorator;
        let c = class extends a.default {
            constructor() {
                super(...arguments), this.shapeNode = null, this.autoInitColliders = !1, this.subColliderList = new Array, this.skeleton = null, this.boneData = new Array, this.colliderNode = null, this.summonPauseTime = .8, this.summonPauseTimer = 0, this.ice_group = []
            }
            onLoad() {
                this.skeleton = this.getComponentInChildren(sp.Skeleton), this.skeleton && (this.shapeNode = this.skeleton.node)
            }
            onEnable() {
                this.skeleton && (this.colliderNode = this.node.getChildByName("Colliders"))
            }
            update(e) {
                super.update(e), this.updateColliderPosition(), this.isSummon && this.summonUpdate(e)
            }
            Init(e, t, i, n) {
                super.Init(e, t, i, n), this.canCollision = !1, this.scheduleOnce(() => {
                    this.canCollision = !0
                }, .1), this.colliderNode && this.updateBoneData(), this.node.setPosition(cc.Vec2.ZERO), this.skeleton.setCompleteListener(() => {
                    this.FishOut()
                }), this.onInit()
            }
            InitParameter() {
                super.InitParameter(), this.ice_group.forEach(e => {
                    e.active = !1
                }), this.colliderNode && this.offsetPos.mag() > 0 && this.colliderNode.setPosition(cc.Vec2.ZERO)
            }
            PlayDieAnim() {
                this.skeleton.timeScale = 0, this.node.stopAllActions(), this.node.runAction(cc.sequence(cc.repeat(cc.sequence(cc.moveBy(.05, 10, 10), cc.moveBy(.05, -10, -10)), 15), cc.callFunc(() => {
                    s.default.CameraShakeEffect(1.5, 3), this.CoinEffect(1.5 * this.shapeNode.scale)
                }), cc.fadeOut(1), cc.callFunc(() => {
                    this.RemoveSelf()
                })))
            }
            getFishPos() {
                if (this.mainCoillder) return this.mainCoillder.convertToWorldSpaceAR(cc.Vec2.ZERO);
                let e = this.subColliderList[0].node.convertToWorldSpace(cc.Vec2.ZERO);
                for (let t = 1; t < this.subColliderList.length; t++) {
                    let i = this.subColliderList[t].node.convertToWorldSpace(cc.Vec2.ZERO);
                    cc.Vec2.ZERO.sub(i).mag() < cc.Vec2.ZERO.sub(e).mag() && (e = i)
                }
                return e
            }
            PauseBehavior(e, t) {
                super.PauseBehavior(e, t), this.skeleton.paused = !0, this.ice_group.forEach(e => {
                    e.active = !0
                })
            }
            ResumeBehavior() {
                super.ResumeBehavior(), this.skeleton.paused = !1, this.ice_group.forEach(e => {
                    e.active = !1
                })
            }
            onInit() {}
            onFishDie() {
                this.PlayDieAnim()
            }
            updateColliderPosition() {
                if (this.skeleton && this.subColliderList.length && this.boneData.length)
                    for (let e = 0; e < this.subColliderList.length; e++) this.subColliderList[e].node.setPosition(this.boneData[e].worldX, this.boneData[e].worldY)
            }
            updateBoneData() {
                this.subColliderList = this.colliderNode.getComponentsInChildren(cc.CircleCollider), this.boneData.length = 0, this.subColliderList.forEach(e => {
                    let t = this.skeleton.findBone(e.node.name);
                    t && this.boneData.push(t)
                })
            }
            createColliders() {
                this.skeleton = this.getComponentInChildren(sp.Skeleton), this.node.getComponent, this.skeleton ? this.colliderNode ? cc.warn("\u8acb\u522a\u6389\u539f\u672c\u7684Colliders\u518d\u9032\u884c\u5617\u8a66") : (this.colliderNode = new cc.Node("Colliders"), this.colliderNode.parent = this.node, this.skeleton._skeleton.bones.forEach(e => {
                    if (e.children.length > 0) {
                        const t = e.data.name,
                            i = e.worldX,
                            n = e.worldY;
                        let s = new cc.Node(t).addComponent(cc.CircleCollider);
                        s.node.parent = this.colliderNode, s.node.setPosition(i, n), s.node.groupIndex = 2
                    }
                })) : cc.warn("\u627e\u4e0d\u5230Spine Component")
            }
            getPosArray(e) {
                e || this.mainFishNode && this.offsetPos.mag() > 0 && (this.mainFishNode.setPosition(this.offsetPos), this.colliderNode.setPosition(this.offsetPos), this.summonPauseTimer = this.summonPauseTime, this.skeleton.paused = !0, this.mAnim && this.mAnim.pause(), this.mSeek && this.mSeek.Pause()), super.getPosArray()
            }
            summonUpdate(e) {
                this.summonPauseTimer <= 0 || (this.summonPauseTimer -= e, this.summonPauseTimer > 0 || (this.summonPauseTimer = 0, this.freeze_time > 0 || (this.skeleton.paused = !1, this.mAnim && this.mAnim.resume(), this.mSeek && this.mSeek.Resume())))
            }
            RemoveSelf() {
                this.skeleton.setEventListener(null), this.skeleton.clearTracks(), super.RemoveSelf()
            }
        };
        n([l(cc.Node)], c.prototype, "shapeNode", void 0), n([l(cc.Boolean)], c.prototype, "autoInitColliders", void 0), n([l([cc.CircleCollider])], c.prototype, "subColliderList", void 0), n([l([cc.Node])], c.prototype, "ice_group", void 0), c = n([o, r], c), i.default = c, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "./BaseFish": "BaseFish"
    }],
    BaseTitle: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "b3b27ZwgthB9pvO6hFdIHz9", "BaseTitle");
        var n = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            s = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const {
            ccclass: a
        } = cc._decorator;
        let o = class extends cc.Component {
            delay(e) {
                return s(this, void 0, void 0, function*() {
                    yield new Promise(t => {
                        setTimeout(() => {
                            this.node && t(null)
                        }, e)
                    })
                })
            }
            Play(e) {
                return s(this, void 0, void 0, function*() {})
            }
        };
        o = n([a], o), i.default = o, cc._RF.pop()
    }, {}],
    BaseTwisterFish: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "a0439p7lc5GFIFWCPsBkmRZ", "BaseTwisterFish");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("./BaseFish"),
            {
                ccclass: a,
                property: o
            } = cc._decorator;
        let l = class extends s.default {
            constructor() {
                super(...arguments), this.windAnim = null
            }
            InitParameter() {
                super.InitParameter(), this.isFeature = !0, this.switchWindEffect(!0)
            }
            switchWindEffect(e) {
                this.windAnim && (this.windAnim.node.active = e, e ? this.windAnim.play() : this.windAnim.stop())
            }
            RemoveSelf() {
                this.node && this.windAnim && this.windAnim.stop(), super.RemoveSelf()
            }
        };
        n([o(cc.Animation)], l.prototype, "windAnim", void 0), l = n([a], l), i.default = l, cc._RF.pop()
    }, {
        "./BaseFish": "BaseFish"
    }],
    BaseWeapon: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "f6bcdqFDlJOzqclQKEYoG/s", "BaseWeapon");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("./WeaponManager"),
            {
                ccclass: a,
                property: o
            } = cc._decorator;
        let l = class extends cc.Component {
            constructor() {
                super(...arguments), this.gunNode = null, this.PlatformAni = null, this.FortAni = null, this.RocketAni = null, this.isGunReady = !1, this.playerSeat = 0, this.autoAnim = !1
            }
            Init(e, t) {
                this.playerSeat = e, this.isGunReady = !1, this.node.angle = e < 2 ? 0 : 180, this.PlatformAni && this.PlatformAni.play(), this.FortAni && this.FortAni.play(), this.RocketAni && this.RocketAni.play(), this.ChangeGunAnim()
            }
            ChangeGunAnim() {
                this.gunNode.scale = 1.5, this.gunNode.runAction(cc.sequence(cc.scaleTo(.5, 1), cc.callFunc(() => {
                    this.isGunReady = !0
                })))
            }
            SetGunRotateUsePos(e) {
                let t = this.playerSeat,
                    i = s.default.WeaponPosition(this.playerSeat);
                t < 2 ? e.y < i.y && (e.y = i.y) : e.y > i.y && (e.y = i.y);
                let n = -cc.misc.radiansToDegrees(Math.atan2(e.x - i.x, e.y - i.y));
                this.gunNode.angle = this.playerSeat > 1 ? n + 180 : n
            }
            ShootFunction(e) {
                this.SetGunRotateUsePos(e), this.FortAni && this.FortAni.play("Shoot")
            }
            ShootState(e) {
                return this.isGunReady ? 1 : 0
            }
            UnloadWeapon() {
                this.PlatformAni && this.PlatformAni.stop(), this.FortAni && this.FortAni.stop(), this.RocketAni && this.RocketAni.stop()
            }
            PlayRocketShoot() {
                this.RocketAni && this.RocketAni.play("RocketShoot")
            }
            AutoState(e) {
                e != this.autoAnim && (this.autoAnim = e, this.PlatformAni && this.PlatformAni.play(e ? "PlatformAuto" : "PlatformIdle"))
            }
            GunAlpha(e) {
                this.node.opacity = e ? 125 : 255
            }
        };
        n([o(cc.Node)], l.prototype, "gunNode", void 0), n([o(cc.Animation)], l.prototype, "PlatformAni", void 0), n([o(cc.Animation)], l.prototype, "FortAni", void 0), n([o(cc.Animation)], l.prototype, "RocketAni", void 0), l = n([a], l), i.default = l, cc._RF.pop()
    }, {
        "./WeaponManager": "WeaponManager"
    }],
    BetController: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "839b4GJiv5MOpdcSOduOtgd", "BetController");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("./WeaponManager"),
            a = e("../Common/Utility"),
            {
                ccclass: o,
                property: l
            } = cc._decorator;
        let r = class extends cc.Component {
            constructor() {
                super(...arguments), this.betLabel = null, this.GoldenFont = null, this.Board = null, this.MainPlayerBoard = null, this.MaxBetAnim = null
            }
            Init(e) {
                this.node.setPosition(s.default.WeaponPosition(e)), this.node.angle = e > 1 ? 180 : 0, this.betLabel.node.angle = e > 1 ? 180 : 0, this.node.opacity = 125
            }
            PlayerEnter(e) {
                this.node.opacity = 255, this.UpdateBet(e.bet_value), e.isMain && (this.betLabel.font = this.GoldenFont, this.Board.spriteFrame = this.MainPlayerBoard)
            }
            PlayerLeave() {
                this.UpdateBet(0), this.node.opacity = 125
            }
            UpdateBet(e, t = !1) {
                this.betLabel.string = e > 0 ? a.default.NumberformatBet(e, e) : "0", t && this.MaxBetAnim.play()
            }
        };
        n([l(cc.Label)], r.prototype, "betLabel", void 0), n([l(cc.Font)], r.prototype, "GoldenFont", void 0), n([l(cc.Sprite)], r.prototype, "Board", void 0), n([l(cc.SpriteFrame)], r.prototype, "MainPlayerBoard", void 0), n([l(cc.Animation)], r.prototype, "MaxBetAnim", void 0), r = n([o], r), i.default = r, cc._RF.pop()
    }, {
        "../Common/Utility": "Utility",
        "./WeaponManager": "WeaponManager"
    }],
    BtnSprite: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "4f219o/AD1KyYKaKs8d8Mme", "BtnSprite");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const {
            ccclass: s,
            property: a
        } = cc._decorator;
        let o = class extends cc.Component {
            constructor() {
                super(...arguments), this.Btn = null, this.BtnFrame = [], this.Icon = null, this.IconFrame = []
            }
            ChangeState(e) {
                this.Btn && (this.Btn.spriteFrame = e ? this.BtnFrame[0] : this.BtnFrame[1]), this.Icon && (this.Icon.spriteFrame = e ? this.IconFrame[0] : this.IconFrame[1])
            }
        };
        n([a(cc.Sprite)], o.prototype, "Btn", void 0), n([a([cc.SpriteFrame])], o.prototype, "BtnFrame", void 0), n([a(cc.Sprite)], o.prototype, "Icon", void 0), n([a([cc.SpriteFrame])], o.prototype, "IconFrame", void 0), o = n([s], o), i.default = o, cc._RF.pop()
    }, {}],
    BuddhaPalmUI: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "160d55KJ2RNyYrih/bLYKD1", "BuddhaPalmUI");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("../../../../../LobbyCommon/Helper/EventSystem"),
            a = e("../Common/AudioManager"),
            o = e("../Common/SystemTip"),
            l = e("../Weapon/WeaponManager"),
            {
                ccclass: r,
                property: c
            } = cc._decorator;
        let h = class extends cc.Component {
            constructor() {
                super(...arguments), this.ChargeBar = [], this.PlayerBet = null, this.UIState = null, this.TimeLabel = null, this.timeLimit = 180, this.timeLimitAuto = 20, this.bet = null, this.engry = null, this.fillRange = null, this.fillRangeShowing = null, this.energy_odds = null, this.ClickEvent = null, this.playerAutoState = !1, this.step = 0, this.chargeMax = !1, this.updateBarTween = [], this.time = 0, this.useSkill = !1, this.mainPlayerSeat = -1
            }
            onDestroy() {
                this.node && this.node.active && (s.EventSystem.Event(s.FishHunter.UpdateBuddhaPalm).Remove(this.RecvData, this), s.EventSystem.Event(s.FishHunter.SwitchAuto).Remove(this.SwitchAutoTime, this), s.EventSystem.Event(s.FishHunter.UseBuddhaPalm).Remove(this.OnUseSkill, this))
            }
            update(e) {
                if (!(this.useSkill || this.updateBarTween.length > 0))
                    if (this.chargeMax) {
                        if (this.time > 0)
                            if (this.time -= e, this.time <= 0) this.time = 0, this.ClickBtn(null, !0);
                            else if (this.time < 11) {
                            let e = Math.floor(this.time).toString();
                            this.TimeLabel.string != e && (a.default.Instance.Play("Hand_count"), this.TimeLabel.string = e)
                        } else this.TimeLabel.string = ""
                    } else this.step += e, this.step > .1 && this.fillRange > this.fillRangeShowing && (this.step = 0, this.fillRangeShowing += .01, this.fillRangeShowing = this.fillRangeShowing > this.fillRange ? this.fillRange : this.fillRangeShowing, this.ChargeBar.forEach(e => {
                        e.fillRange = -this.fillRangeShowing
                    })), this.fillRangeShowing >= 1 && (this.UIState.play("ChargeMax"), a.default.Instance.Play("Hand_full"), this.chargeMax = !0, this.time = this.playerAutoState ? this.timeLimitAuto : this.timeLimit)
            }
            Init(e, t, i) {
                s.EventSystem.Event(s.FishHunter.UpdateBuddhaPalm).Insert(this.RecvData, this), s.EventSystem.Event(s.FishHunter.SwitchAuto).Insert(this.SwitchAutoTime, this), s.EventSystem.Event(s.FishHunter.UseBuddhaPalm).Insert(this.OnUseSkill, this), this.mainPlayerSeat = i, this.parseData(e), this.UIState.play("Idle"), this.fillRange = this.engry / this.bet / this.energy_odds, this.fillRange >= 1 && (this.fillRange = 1), this.fillRangeShowing = this.fillRange, this.updateBarFillRange(this.fillRangeShowing), this.time = 300, this.ClickEvent = t
            }
            RecvData(e) {
                this.parseData(e), this.fillRange = this.engry / this.bet / this.energy_odds, this.fillRange >= 1 ? this.fillRange = 1 : this.chargeMax && (this.UIState.play("Idle"), this.chargeMax = !1, this.time = 0, this.TimeLabel.string = "")
            }
            SwitchAutoTime(e) {
                this.playerAutoState = e, this.time = this.playerAutoState ? this.timeLimitAuto : this.timeLimit
            }
            parseData(e) {
                e.hasOwnProperty("energy_odds") && (this.energy_odds = e.energy_odds), e.hasOwnProperty("energy") && (this.engry = e.energy), e.hasOwnProperty("auto") && (this.playerAutoState = e.auto), e.hasOwnProperty("bet") && this.BetChange(e.bet)
            }
            OnUseSkill(e) {
                if (!e.hasOwnProperty("seat") || e.seat == this.mainPlayerSeat) {
                    switch (e.Code) {
                        case -4:
                            o.default.Open(o.SYSTEM_TIP_TYPE.CHANGE_SCENE, 1.5, !1), this.updateBarFillRange(this.fillRangeShowing);
                            break;
                        case 0:
                            this.ResetChargeBar()
                    }
                    this.useSkill = !1
                }
            }
            ResetChargeBar() {
                this.time = 0, this.TimeLabel.string = "", this.engry = 0, this.fillRange = 0, this.fillRangeShowing = this.fillRange, this.updateBarFillRange(this.fillRangeShowing)
            }
            BetChange(e) {
                e != this.bet && (this.bet = e, this.PlayerBet.string = this.bet.toString(), this.fillRange = this.engry / this.bet / this.energy_odds, this.fillRange > 1 && (this.fillRange = 1), this.engry >= this.energy_odds * this.bet && (this.fillRange = 1), this.fillRangeShowing = this.fillRange, this.updateBarFillRange(this.fillRangeShowing))
            }
            ClickBtn(e, t = !1) {
                if (this.chargeMax && 0 == this.updateBarTween.length && this.ClickEvent && !this.useSkill) {
                    if (0 == l.default.Instance.bulletLimit) return o.default.Open(o.SYSTEM_TIP_TYPE.CHANGE_SCENE, 1.5, !1), void this.updateBarFillRange(this.fillRangeShowing);
                    this.ClickEvent(this.bet, t), this.UIState.play("Idle"), this.TimeLabel.string = "", this.useSkill = !0
                }
            }
            updateBarFillRange(e) {
                this.updateBarTween.length > 0 && (this.updateBarTween.forEach(e => {
                    e.stop()
                }), this.updateBarTween = []), this.ChargeBar.forEach(t => {
                    let i = cc.tween(t).to(.5, {
                        fillRange: -e
                    }).start();
                    this.updateBarTween.push(i)
                });
                let t = cc.tween(this).delay(.5).call(() => {
                    this.fillRangeShowing >= 1 && (this.UIState.play("ChargeMax"), a.default.Instance.Play("Hand_full"), this.chargeMax = !0, this.time = this.playerAutoState ? this.timeLimitAuto : this.timeLimit), this.updateBarTween = []
                }).start();
                this.updateBarTween.push(t)
            }
        };
        n([c([cc.Sprite])], h.prototype, "ChargeBar", void 0), n([c(cc.Label)], h.prototype, "PlayerBet", void 0), n([c(cc.Animation)], h.prototype, "UIState", void 0), n([c(cc.Label)], h.prototype, "TimeLabel", void 0), h = n([r], h), i.default = h, cc._RF.pop()
    }, {
        "../../../../../LobbyCommon/Helper/EventSystem": void 0,
        "../Common/AudioManager": "AudioManager",
        "../Common/SystemTip": "SystemTip",
        "../Weapon/WeaponManager": "WeaponManager"
    }],
    CheatKey: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "b59f3lCTOhJBpsOdQ5oE3Rd", "CheatKey");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("../GameClient"),
            {
                ccclass: a,
                property: o
            } = cc._decorator;
        let l = class extends cc.Component {
            constructor() {
                super(...arguments), this.cheatBtn = null
            }
            CheatKey(e, t) {
                let i = {};
                switch (t) {
                    case "show":
                        break;
                    case "changeSrage":
                        s.default.PlayerSystem.SendCustomCmd("CheatChangeScript");
                        break;
                    case "kill":
                        i.state = 1, s.default.PlayerSystem.SendCustomCmd("CheatShunGokuSatsu", i);
                        break;
                    case "normalkill":
                        i.state = 0, s.default.PlayerSystem.SendCustomCmd("CheatShunGokuSatsu", i);
                        break;
                    case "cantkill":
                        i.state = 2, s.default.PlayerSystem.SendCustomCmd("CheatShunGokuSatsu", i);
                        break;
                    case "Esmall":
                        i.state = 3, s.default.PlayerSystem.SendCustomCmd("CheatShunGokuSatsu", i);
                        break;
                    case "Emiddle":
                        i.state = 4, s.default.PlayerSystem.SendCustomCmd("CheatShunGokuSatsu", i);
                        break;
                    case "Ebig":
                        i.state = 5, s.default.PlayerSystem.SendCustomCmd("CheatShunGokuSatsu", i);
                        break;
                    case "Ekill":
                        i.state = 6, s.default.PlayerSystem.SendCustomCmd("CheatShunGokuSatsu", i)
                }
            }
        };
        n([o(cc.Node)], l.prototype, "cheatBtn", void 0), l = n([a], l), i.default = l, cc._RF.pop()
    }, {
        "../GameClient": "GameClient"
    }],
    DRAGON_TURTLE: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "e3d44REcVZERruns1fi1ivE", "DRAGON_TURTLE");
        var n = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            s = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            o = e("../Common/AudioManager"),
            l = e("../Common/EnumFilter"),
            r = e("./BaseFish"),
            {
                ccclass: c,
                property: h
            } = cc._decorator;
        let d = class extends r.default {
            constructor() {
                super(...arguments), this.skeleton = null, this.ice_group = [], this.SpinHit = !1, this.spinTime = 0, this.moving = !1, this.moveVec = null, this.winSide = null, this.rotateSound = null, this.timerPause = !1, this.SpineEvent = (e, t) => {
                    if (t) switch (t.data.name) {
                        case "step":
                        case "kick":
                            o.default.Instance.Play("drill_hit"), a.default.CameraShakeEffect(.25, 4);
                            break;
                        case "move":
                            this.moving = !0;
                            break;
                        case "stop":
                            this.moving = !1
                    }
                }
            }
            InitNormalBehavior(e, t = 0) {
                switch (SS.Common.GameEnvironment.CurrentGameNow) {
                    case l.FishGame.TD:
                        this.isFeature = !1;
                        break;
                    default:
                        this.isFeature = !0
                }
                this.syncTime = t, this.canCollision = !1, this.behaviorType = r.BEHAVIOR_TYPE.SPINE, this.skeleton.timeScale = 1, this.skeleton.findAnimation("rotate") ? this.skeleton.setAnimation(0, "rotate", !0) : this.skeleton.setAnimation(0, "SPIN", !0), this.moveToScreenOut(), this.winSide || (this.winSide = cc.v2(.5 * a.default.WinSize.width, .5 * a.default.WinSize.height)), this.moveVec = this.targetPos.sub(this.startPos), this.moveVec.normalizeSelf(), this.node.setPosition(this.startPos), this.node.angle = cc.misc.radiansToDegrees(Math.atan2(this.moveVec.y, this.moveVec.x)), this.moveSpeed = 1e3, this.scheduleOnce(() => {
                    this.SpinHit = !0
                }, 1), this.moving = !0, this.spinTime = 5, this.rotateSound = o.default.Instance.Play("DragonTurtle_In", 1, !0), this.ice_group.forEach(e => {
                    e.active = !1
                })
            }
            update(e) {
                if (this.aliveStatus == r.FishState.ALIVE) {
                    if (this.freeze_time > 0) return this.freeze_time -= e, void(this.freeze_time <= 0 && this.ResumeBehavior());
                    if (!this.timerPause)
                        if (this.aliveTime -= e, this.aliveTime <= 0 && this.FishFadeOut(1, r.FishOutType.ALIVE_TIME_OUT), this.spinTime > 0 && (this.spinTime -= e, this.spinTime <= 0 && this.SpinEnd()), this.moving && (this.node.setPosition(this.node.getPosition().add(this.moveVec.mul(this.moveSpeed * e))), this.syncTime > 0 && (this.syncTime -= e, this.node.setPosition(this.node.getPosition().add(this.moveVec.mul(this.moveSpeed * e))), this.spinTime > 0 && (this.spinTime -= e, this.spinTime <= 0 && this.SpinEnd()))), this.SpinHit) {
                            let e = !1;
                            this.node.position.x > this.winSide.x ? (this.moveVec.x = -this.moveVec.x, this.node.setPosition(new cc.Vec2(this.winSide.x, this.node.position.y)), e = !0) : this.node.position.x < -this.winSide.x && (this.moveVec.x = -this.moveVec.x, this.node.setPosition(new cc.Vec2(-this.winSide.x, this.node.position.y)), e = !0), this.node.position.y > this.winSide.y ? (this.moveVec.y = -this.moveVec.y, this.node.setPosition(new cc.Vec2(this.node.position.x, this.winSide.y)), e = !0) : this.node.position.y < -this.winSide.y && (this.moveVec.y = -this.moveVec.y, this.node.setPosition(new cc.Vec2(this.node.position.x, -this.winSide.y)), e = !0), e && (this.node.angle = cc.misc.radiansToDegrees(Math.atan2(this.moveVec.y, this.moveVec.x)), o.default.Instance.Play("drill_bound"), a.default.CameraShakeEffect(.25, 4))
                        } else {
                            if (this.spinTime > 0) return;
                            this.CheckInScreen(), this.isInScreen || this.FishOut()
                        }
                }
            }
            SpinEnd() {
                this.node.position.x > this.winSide.x - 20 ? this.node.setPosition(cc.v2(this.winSide.x - 20, this.node.position.y)) : this.node.position.x < 20 - this.winSide.x && this.node.setPosition(cc.v2(20 - this.winSide.x, this.node.position.y)), this.node.position.y > this.winSide.y - 20 ? this.node.setPosition(cc.v2(this.node.position.x, this.winSide.y - 20)) : this.node.position.y < 20 - this.winSide.y && this.node.setPosition(cc.v2(this.node.position.x, 20 - this.winSide.y)), this.SpinHit = !1, this.moving = !1, this.moveVec = cc.Vec2.ZERO.sub(this.node.getPosition()), this.moveVec.normalizeSelf();
                let e = -cc.misc.radiansToDegrees(Math.atan2(this.moveVec.y, this.moveVec.x));
                this.moveSpeed = 120, this.node.runAction(cc.sequence(cc.rotateTo(.5, e), cc.callFunc(() => {
                    null != this.rotateSound && (o.default.Instance.Stop(this.rotateSound), this.rotateSound = null), o.default.Instance.Play("drill_bomb"), this.skeleton.findAnimation("come_in") ? this.skeleton.setAnimation(0, "come_in", !1) : this.skeleton.setAnimation(0, "SPITFIRE", !1), this.skeleton.setCompleteListener(() => {
                        this.skeleton.setCompleteListener(null), this.skeleton.setAnimation(0, "SWIM", !0), this.skeleton.setEventListener(this.SpineEvent), this.AliveStatus = r.FishState.ALIVE, this.canCollision = !0
                    })
                })))
            }
            FishDie() {
                return s(this, void 0, void 0, function*() {
                    switch (this.skeleton.setEventListener(null), this.moving = !1, this.AliveStatus = r.FishState.DEAD, this.canCollision = !1, this.isInit = !1, this.StopAction(), null != this.rotateSound && o.default.Instance.Stop(this.rotateSound), this.Event_FishLeave && this.Event_FishLeave(this, 6), this.ice_group.forEach(e => {
                        e.active = !1
                    }), SS.Common.GameEnvironment.CurrentGameNow) {
                        case l.FishGame.TD:
                            this.skeleton.timeScale = 0, cc.tween(this.node).repeat(15, cc.tween(this.node).by(.05, {
                                position: cc.v3(10, 10)
                            }).by(.05, {
                                position: cc.v3(-10, -10)
                            })).delay(.5).call(() => {
                                a.default.CameraShakeEffect(1.5, 3), this.CoinEffect()
                            }).to(.5, {
                                opacity: 0
                            }).call(() => {
                                this.RemoveSelf()
                            }).start()
                    }
                })
            }
            RemoveSelf() {
                this.skeleton.setEventListener(null), this.moving = !1, this.winSide = null, this.moveVec = null, null != this.rotateSound && o.default.Instance.Stop(this.rotateSound), super.RemoveSelf()
            }
            FishRunOut() {
                this.moveSpeed = 1400
            }
            PauseClip() {
                this.skeleton.timeScale = 0
            }
            PlayClip(e, t, i) {
                this.skeleton.setCompleteListener(null), this.skeleton.timeScale = 1, this.skeleton.setAnimation(0, e, t), i && this.skeleton.setCompleteListener(() => {
                    this.skeleton.setCompleteListener(null), i()
                })
            }
            SetNextClip(e, t, i, n) {
                this.skeleton.setCompleteListener(null), this.skeleton.setCompleteListener(() => {
                    this.skeleton.setCompleteListener(null), i && i(), this.skeleton.timeScale = 1, this.skeleton.setAnimation(0, e, t), n && this.skeleton.setCompleteListener(() => {
                        this.skeleton.setCompleteListener(null), n()
                    })
                })
            }
            PauseBehavior(e, t) {
                this.canCollision && (super.PauseBehavior(e, t), this.skeleton.timeScale = 0, this.timerPause = !0, this.ice_group.forEach(e => {
                    e.active = !0
                }))
            }
            ResumeBehavior() {
                super.ResumeBehavior(), this.skeleton.timeScale = 1, this.timerPause = !1, this.ice_group.forEach(e => {
                    e.active = !1
                })
            }
            InitSummonBehavior(e) {
                super.InitSummonBehavior(e), this.winSide || (this.winSide = cc.v2(.5 * a.default.WinSize.width, .5 * a.default.WinSize.height)), this.skeleton.timeScale = 1, this.SpinEnd()
            }
        };
        n([h(sp.Skeleton)], d.prototype, "skeleton", void 0), n([h([cc.Node])], d.prototype, "ice_group", void 0), d = n([c], d), i.default = d, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../Common/AudioManager": "AudioManager",
        "../Common/EnumFilter": "EnumFilter",
        "./BaseFish": "BaseFish"
    }],
    DebugManager: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "2847bQm0L9Dd5/c2KTHf107", "DebugManager");
        var n, s = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("../../GameClient"),
            {
                ccclass: o,
                property: l
            } = cc._decorator;
        let r = n = class extends cc.Component {
            constructor() {
                super(...arguments), this.debug = !1, this.cheatPowerLabel = null, this.cheatPower = 0, this.rocketLabel = null, this.rocketPower = 0, this.FullScreenLabel = null, this.enableFullScreen = !0, this.FlameStormLabel = null, this.FlameStormPower = 0, this.AwakeLabel = null, this.AwakeType = 0, this.FPSLabel = null, this.MeunButton = null, this.DebugPanel = null, this.last_fish_count = 0
            }
            static get Instance() {
                return this.instance
            }
            onLoad() {
                if (n.instance = this, window.addEventListener("orientationchange", function() {
                        180 == window.orientation || 0 == window.orientation ? (this.enableFullScreen = !1, cc.screen.exitFullScreen(), this.FullScreenLabel.string = "\u5168\u87a2\u5e55: Off") : 90 != window.orientation && -90 != window.orientation || (this.enableFullScreen = !0)
                    }.bind(this)), this.debug) {
                    const e = cc.director.getCollisionManager();
                    e.enabled = !0, e.enabledDebugDraw = !0
                }
            }
            OnClickCheatPower() {
                switch (this.cheatPower) {
                    case 0:
                        this.cheatPower = 1, this.cheatPowerLabel.string = "\u77ac\u7344\u6bba:On";
                        break;
                    case 1:
                        this.cheatPower = 2, this.cheatPowerLabel.string = "\u5fc5\u4e0d\u77ac\u7344\u6bba";
                        break;
                    case 2:
                        this.cheatPower = 0, this.cheatPowerLabel.string = "\u77ac\u7344\u6bba:Off"
                }
                a.default.GameSystem.sendTestPower(this.cheatPower, this.rocketPower)
            }
            OnFullScreen() {
                this.enableFullScreen && (cc.screen.fullScreen() ? (cc.screen.exitFullScreen(document.getElementById("GameCanvas")), this.FullScreenLabel.string = "\u5168\u87a2\u5e55: Off") : (cc.screen.init(), cc.screen.requestFullScreen(document.getElementById("GameCanvas"), function() {}), this.FullScreenLabel.string = "\u5168\u87a2\u5e55: On"))
            }
            OnRocketCheat() {
                this.rocketPower = 0 == this.rocketPower ? 1 : 0, null != a.default.GameSystem && (a.default.GameSystem.sendTestPower(this.cheatPower, this.rocketPower), this.rocketLabel.string = 0 == this.rocketPower ? "\u706b\u7bad\u70ae:Off" : "\u706b\u7bad\u70ae:On")
            }
            OnFlameStormCheat() {
                this.FlameStormPower = 0 == this.FlameStormPower ? 1 : 0, null != a.default.GameSystem && (a.default.GameSystem.sendTestPower(this.cheatPower, this.rocketPower, this.FlameStormPower), this.FlameStormLabel.string = 0 == this.FlameStormPower ? "\u70c8\u98a8\u66b4:Off" : "\u70c8\u98a8\u66b4:On")
            }
            OnAwakeCheat() {
                switch (this.AwakeType) {
                    case 0:
                        this.AwakeType = 1, this.AwakeLabel.string = "\u5fc5\u89ba\u9192:On";
                        break;
                    case 1:
                        this.AwakeType = 2, this.AwakeLabel.string = "\u5fc5\u4e0d\u89ba\u9192";
                        break;
                    case 2:
                        this.AwakeType = 0, this.AwakeLabel.string = "\u5fc5\u89ba\u9192:Off"
                }
                null != a.default.GameSystem && a.default.GameSystem.sendTestOption(null, this.AwakeType, null)
            }
        };
        r.instance = null, s([l(cc.Boolean)], r.prototype, "debug", void 0), s([l(cc.Label)], r.prototype, "cheatPowerLabel", void 0), s([l(cc.Label)], r.prototype, "rocketLabel", void 0), s([l(cc.Label)], r.prototype, "FullScreenLabel", void 0), s([l(cc.Label)], r.prototype, "FlameStormLabel", void 0), s([l(cc.Label)], r.prototype, "AwakeLabel", void 0), s([l(cc.Label)], r.prototype, "FPSLabel", void 0), s([l(cc.Node)], r.prototype, "MeunButton", void 0), s([l(cc.Node)], r.prototype, "DebugPanel", void 0), r = n = s([o], r), i.default = r, cc._RF.pop()
    }, {
        "../../GameClient": "GameClient"
    }],
    DragonWeapon: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "67bc41mFQZD5p79ZPkWIttS", "DragonWeapon");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("../../GameClient"),
            a = e("../Common/EnumFilter"),
            o = e("../Skill/BaseSkill"),
            l = e("./BaseWeapon"),
            r = e("./WeaponManager"),
            {
                ccclass: c,
                property: h
            } = cc._decorator;
        let d = class extends l.default {
            constructor() {
                super(...arguments), this.skill = null, this.ShowUpEffect = null, this.WeaponLighting = null
            }
            Init(e, t) {
                if (super.Init(e, t), this.Type = r.WeaponType.Dragon, this.ShowUpEffect.play(), this.skill = s.default.SkillSystem.AddSkill(o.skillEnum.DragonWeapon, e), this.skill.setWeapon(this, t), a.default.playerLockSetting) {
                    let e = Array.from(a.default.playerLockSetting),
                        i = t.UnhitList;
                    if (i)
                        for (let t = 0; t < i.length; t++) {
                            let n = e.indexOf(i[t]); - 1 != n && e.splice(n, 1)
                        }
                    a.default.LockSetting = a.default.TransFishTypeList(e)
                }
            }
            onEnable() {
                this.skill && (this.skill.enabled = !0), this.WeaponLighting.play()
            }
            onDisable() {
                this.skill && (this.skill.enabled = !1), this.WeaponLighting.stop()
            }
            ShootState(e) {
                return 0
            }
            ShootFunction(e) {
                this.SetGunRotateUsePos(e), this.FortAni && this.FortAni.play("Shoot")
            }
            UnloadWeapon() {
                this.skill && this.skill.UnUseSkill(), this.skill = null, super.UnloadWeapon()
            }
            stopLock() {
                this.skill && this.skill.setLocking(null)
            }
        };
        n([h(cc.Animation)], d.prototype, "ShowUpEffect", void 0), n([h(cc.Animation)], d.prototype, "WeaponLighting", void 0), d = n([c], d), i.default = d, cc._RF.pop()
    }, {
        "../../GameClient": "GameClient",
        "../Common/EnumFilter": "EnumFilter",
        "../Skill/BaseSkill": "BaseSkill",
        "./BaseWeapon": "BaseWeapon",
        "./WeaponManager": "WeaponManager"
    }],
    DrillBullet: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "98646CYKSJOSqT40E016Zke", "DrillBullet");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("./BaseBullet"),
            a = e("../Player/PlayerManager"),
            o = e("../Fish/FishManager"),
            l = e("../Fish/BaseFish"),
            r = e("../Common/ResourceManager"),
            c = e("../Common/AudioManager"),
            h = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            {
                ccclass: d,
                property: u
            } = cc._decorator;
        let m = class extends s.default {
            constructor() {
                super(...arguments), this.bulletNode = null, this.bulletObjAnim = null, this.readyTime = 10, this.explodeTime = 3, this.forceTime = 5, this.keepTime = 0, this.currentState = 0, this.last_point = cc.Vec2.ZERO, this.rotationAction = null, this.isForce = !1, this.Event_OnBulletHit = null, this.Event_OnBulletReady = null, this.Event_OnBulletExplode = null, this.HitEffecrCD = !1
            }
            Init(e, t, i, n) {
                super.Init(e, t, i, n), this.keepTime = 0, this.currentState = 0, this.isForce = !1, this.bulletSpeed = 1300, this.SwitchBulletObj(!0), this.bulletNode && (this.bulletNode.angle = 90), this.schedule(this.CheckPoint.bind(this), .05)
            }
            update(e) {
                this.currentState < 3 && (this.UpdateExplodeTime(e), this.BulletMove(e))
            }
            BulletReflection() {
                let e = !1;
                this.node.getPosition().x > this.winSide.x && (this.bulletVec.x = -this.bulletVec.x, this.node.setPosition(new cc.Vec2(this.winSide.x, this.node.getPosition().y)), e = !0), this.node.getPosition().x < -this.winSide.x && (this.bulletVec.x = -this.bulletVec.x, this.node.setPosition(new cc.Vec2(-this.winSide.x, this.node.getPosition().y)), e = !0), this.node.getPosition().y > this.winSide.y && (this.bulletVec.y = -this.bulletVec.y, this.node.setPosition(new cc.Vec2(this.node.getPosition().x, this.winSide.y)), e = !0), this.node.getPosition().y < -this.winSide.y && (this.bulletVec.y = -this.bulletVec.y, this.node.setPosition(new cc.Vec2(this.node.getPosition().x, -this.winSide.y)), e = !0), e && (0 == this.currentState ? (this.node.angle = cc.misc.radiansToDegrees(Math.atan2(this.bulletVec.y, this.bulletVec.x)), c.default.Instance.Play("drill_bound"), h.default.CameraShakeEffect(.5, 4)) : h.default.CameraShakeEffect(.25, 2))
            }
            UpdateExplodeTime(e) {
                if (this.keepTime += e, 0 == this.currentState) this.keepTime >= this.readyTime && (this.currentState = 1, this.keepTime = 0, this.bulletObjAnim && this.bulletObjAnim.play("DrillBulletReady"), this.bulletNode && (this.rotationAction = cc.rotateBy(1, 360).repeatForever(), this.bulletNode.runAction(this.rotationAction)), c.default.Instance.Play("drill_uncon"));
                else if (1 == this.currentState)
                    if (this.keepTime >= this.explodeTime) {
                        this.currentState = 2, this.keepTime = 0;
                        var t = o.default.Instance.GetRangeAttackableID(this.node.getPosition(), 1e3, 100);
                        this.Event_OnBulletReady && this.Event_OnBulletReady(t)
                    } else this.keepTime < 1 ? this.bulletSpeed = 800 : this.keepTime < 2 ? this.bulletSpeed = 600 : this.bulletSpeed = 400;
                else 2 == this.currentState && this.keepTime >= this.forceTime && (this.currentState = 3, this.keepTime = 0, this.isForce = !0, this.BulletExplode())
            }
            onCollisionEnter(e, t) {
                if (0 != this.currentState) return;
                let i = e.getComponent(l.default);
                if (!i) {
                    let t = e.node.parent;
                    for (let e = 0; e < 3 && !(i = t.getComponent(l.default)); e++) t = t.parent
                }
                if (!i || !i.CanCollision || i.IsFeatureFish) return;
                a.PlayerManager.isMainSeat(this.seat) && i.OnHitFish(), this.CreateHitEffect();
                let n = i.ID;
                this.Event_OnBulletHit && this.Event_OnBulletHit(n)
            }
            BulletExplode() {
                this.currentState = 3, this.keepTime = 0, this.bulletNode && (this.bulletNode.stopAction(this.rotationAction), this.rotationAction = null), this.Event_OnBulletExplode && this.Event_OnBulletExplode(this.isForce, this.node.getPosition()), this.unscheduleAllCallbacks(), this.bulletObjAnim.stop(), this.Recycle()
            }
            SwitchBulletObj(e) {
                this.bulletObjAnim && (this.bulletObjAnim.node.active = e, e && this.bulletObjAnim.play())
            }
            CreateHitEffect() {
                if (this.HitEffecrCD) return;
                let e = r.default.SpawnEffect("DrillBlast", a.PlayerManager.isMainSeat(this.seat));
                e && (e.setPosition(this.node.getPosition()), e.angle = this.node.angle), c.default.Instance.Play("drill_hit"), this.HitEffecrCD = !0, this.scheduleOnce(() => {
                    this.HitEffecrCD = !1
                }, .07)
            }
            CheckPoint() {
                if (0 != this.currentState || this.last_point == this.node.getPosition()) return;
                this.last_point = this.node.getPosition();
                const e = r.default.SpawnEffect("Drill_Tail", a.PlayerManager.isMainSeat(this.seat));
                e && (e.setPosition(this.last_point), e.angle = this.node.angle - 90)
            }
        };
        n([u(cc.Node)], m.prototype, "bulletNode", void 0), n([u(cc.Animation)], m.prototype, "bulletObjAnim", void 0), m = n([d], m), i.default = m, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../Common/AudioManager": "AudioManager",
        "../Common/ResourceManager": "ResourceManager",
        "../Fish/BaseFish": "BaseFish",
        "../Fish/FishManager": "FishManager",
        "../Player/PlayerManager": "PlayerManager",
        "./BaseBullet": "BaseBullet"
    }],
    DrillWeapon: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "8fd855xjflCVIXBBwrDsS89", "DrillWeapon");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("./BaseWeapon"),
            a = e("./WeaponManager"),
            {
                ccclass: o,
                property: l
            } = cc._decorator;
        let r = class extends s.default {
            constructor() {
                super(...arguments), this.TimeLimit = null, this.shootPos = null
            }
            Init(e) {
                this.playerSeat = e, this.isGunReady = !1, this.node.angle = e < 2 ? 0 : 180, this.gunNode.active = !1, this.Type = a.WeaponType.Dirll, this.TimeLimit.node.active = !1, this.shootPos || (this.shootPos = new cc.Vec2(this.node.getPosition().x, e < 2 ? this.node.getPosition().y + 500 : this.node.getPosition().y - 500))
            }
            ChangeGunAnim() {
                this.gunNode.active = !0, this.gunNode.scale = 1.5, this.gunNode.runAction(cc.sequence(cc.scaleTo(.5, 1), cc.callFunc(() => {
                    this.isGunReady = !0
                })))
            }
            ShootState(e) {
                return 0
            }
            SwitchGunObj(e) {
                this.gunNode.active = e
            }
            setLimitTime(e) {
                e ? (this.TimeLimit.node.active = !0, this.TimeLimit.string = Math.floor(e).toString()) : this.TimeLimit.node.active = !1
            }
            SetGunRotateUsePos(e) {
                super.SetGunRotateUsePos(e), this.shootPos = e
            }
        };
        n([l(cc.Label)], r.prototype, "TimeLimit", void 0), r = n([o], r), i.default = r, cc._RF.pop()
    }, {
        "./BaseWeapon": "BaseWeapon",
        "./WeaponManager": "WeaponManager"
    }],
    DropItem: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "03616XoTcJKC4g5TlvtsAyU", "DropItem");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("../../System/ItemSystem"),
            {
                ccclass: a,
                property: o
            } = cc._decorator;
        let l = class extends cc.Component {
            constructor() {
                super(...arguments), this.itemAnim = null, this.bubbleNode = null, this.itemIcon = null, this.content = null, this.itemFrams = [], this.contentText = null
            }
            onLoad() {
                this.contentText = cc.find("text", this.content).getComponent(cc.RichText)
            }
            ShowIcon(e) {
                this.bubbleNode.active = e, this.itemIcon.node.active = e
            }
            Init(e, t, i, n, a, o = !1) {
                let l = s.ITEM_CFG[e].index;
                this.itemIcon.spriteFrame = this.itemFrams[l], this.contentText.string = "<outline color=#000000width=3>" + SS.Common.GameEnvironment.GameMsg[s.ITEM_CFG[e].name] + " x" + t + "<outline>", this.content.width = this.contentText.node.width + 56, this.node.setPosition(i);
                let r = n.sub(this.node.getPosition()).mag(),
                    c = o ? .3 : Math.max(.3, .001 * r);
                this.node.runAction(cc.sequence(cc.callFunc(() => {
                    this.itemAnim.play()
                }), cc.delayTime(2), cc.moveBy(.25, n.mul(-.15)), cc.moveTo(c, n), cc.callFunc(() => {
                    o && (this.node.active = !1), a(this)
                })))
            }
        };
        n([o(cc.Animation)], l.prototype, "itemAnim", void 0), n([o(cc.Node)], l.prototype, "bubbleNode", void 0), n([o(cc.Sprite)], l.prototype, "itemIcon", void 0), n([o(cc.Node)], l.prototype, "content", void 0), n([o([cc.SpriteFrame])], l.prototype, "itemFrams", void 0), l = n([a], l), i.default = l, cc._RF.pop()
    }, {
        "../../System/ItemSystem": "ItemSystem"
    }],
    ELAZING_PHONEIX: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "5b0d8j6hNtBGo+w9AfqNhSa", "ELAZING_PHONEIX");
        var n = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            s = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("./BaseSpineFish"),
            o = e("../Common/AudioManager"),
            {
                ccclass: l,
                property: r
            } = cc._decorator;
        let c = class extends a.default {
            constructor() {
                super(...arguments), this.SpineEvent = (e, t) => {
                    if (t) switch (t.data.name) {
                        case "phoenix_s":
                            o.default.Instance.Play("Phoenix_fly_01", .8);
                            break;
                        case "phoenix_b":
                            o.default.Instance.Play("Phoenix_fly_02", .8)
                    }
                }
            }
            onInit() {
                this.offsetPos = cc.v2(1180, 0), this.node.angle = -(this.o + 90), this.skeleton.timeScale = 1, this.skeleton.setEventListener(this.SpineEvent), this.skeleton.setAnimation(0, "Phoenix_L_Fly", !1)
            }
            PlayDieAnim() {
                const e = Object.create(null, {
                    PlayDieAnim: {
                        get: () => super.PlayDieAnim
                    }
                });
                return s(this, void 0, void 0, function*() {
                    e.PlayDieAnim.call(this), yield this.delay(1e3), o.default.Instance.Play("41_catch_bigfish")
                })
            }
            onFishDie() {
                super.onFishDie(), o.default.Instance.Play("Phoenix_die_02")
            }
        };
        c = n([l], c), i.default = c, cc._RF.pop()
    }, {
        "../Common/AudioManager": "AudioManager",
        "./BaseSpineFish": "BaseSpineFish"
    }],
    ETERNAL_FLAMING_DRAGON: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "7fc9aAzSxdJBJFun3TKtOie", "ETERNAL_FLAMING_DRAGON");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("../Common/AudioManager"),
            a = e("../Common/EnumFilter"),
            o = e("./BaseSpineFish"),
            l = e("./FishManager"),
            {
                ccclass: r,
                property: c
            } = cc._decorator;
        let h = class extends o.default {
            onInit() {
                this.offsetPos = cc.v2(1245, -70), this.node.angle = -this.o, this.skeleton.timeScale = 1, this.skeleton.setAnimation(0, "SWIM", !1), s.default.Instance.Play("RedDragon_Announce")
            }
            InitParameter() {
                super.InitParameter();
                let e = l.default.Instance.getUniqueFishData(a.FishType.EternalFlamingDragon).getComponent.node;
                e.opacity = 0, e.runAction(cc.fadeIn(2)), this.isFeature = !0
            }
            PlayDieAnim() {
                this.skeleton.timeScale = 0, this.node.runAction(cc.sequence(cc.repeat(cc.sequence(cc.moveBy(.1, 10, 10), cc.moveBy(.1, -10, -10)), 5), cc.callFunc(() => {
                    this.CoinEffect(2.5 * this.shapeNode.scale)
                }), cc.fadeOut(1), cc.callFunc(() => {
                    this.RemoveSelf()
                }))), s.default.Instance.Play("RedDragon_Roar")
            }
            FishOut(e) {
                super.FishOut(e), l.default.Instance.getUniqueFishData(a.FishType.EternalFlamingDragon).getComponent.node.runAction(cc.sequence(cc.fadeOut(2), cc.callFunc(() => {
                    l.default.Instance.recycleUniqueFishData(a.FishType.EternalFlamingDragon)
                })))
            }
            onFishDie() {
                super.onFishDie()
            }
            PauseBehavior(e, t) {
                super.PauseBehavior(e, t)
            }
            RemoveSelf() {
                this.defaultAliveTime = 60, super.RemoveSelf()
            }
        };
        h = n([r], h), i.default = h, cc._RF.pop()
    }, {
        "../Common/AudioManager": "AudioManager",
        "../Common/EnumFilter": "EnumFilter",
        "./BaseSpineFish": "BaseSpineFish",
        "./FishManager": "FishManager"
    }],
    Effect_Phoneix: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "f4bccH8JjFNXIdwbci72vxg", "Effect_Phoneix");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("../Common/PoolObj"),
            {
                ccclass: a,
                property: o
            } = cc._decorator;
        let l = class extends s.default {
            constructor() {
                super(...arguments), this.Phoneix = null
            }
            reuse() {
                super.reuse(), this.Phoneix && this.Phoneix.setAnimation(0, "Phoenix_atk", !1)
            }
        };
        n([o(sp.Skeleton)], l.prototype, "Phoneix", void 0), l = n([a], l), i.default = l, cc._RF.pop()
    }, {
        "../Common/PoolObj": "PoolObj"
    }],
    ElectricCollider: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "b8571TZsrBHjZA+AhokyNqy", "ElectricCollider");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const {
            ccclass: s,
            property: a
        } = cc._decorator;
        let o = class extends cc.Component {
            constructor() {
                super(...arguments), this.fishIDList = new Array, this.maxFishCount = 50
            }
            Init() {
                this.fishIDList.length = 0
            }
            GetFishIDList() {
                return this.fishIDList
            }
            onCollisionEnter(e, t) {
                if (this.fishIDList.length >= this.maxFishCount) return;
                let i = e.getComponent("BaseFish");
                if (!i) {
                    let t = 5,
                        n = 0,
                        s = e.node.parent;
                    for (; n < t && s && !(i = s.getComponent("BaseFish"));) s = s.parent, n++
                }
                i && i.CanCollision && !i.IsFeatureFish && -1 == this.fishIDList.indexOf(i.ID) && this.fishIDList.push(i.ID)
            }
            onCollisionExit(e, t) {
                let i = e.getComponent("BaseFish");
                if (!i) {
                    let t = 5,
                        n = 0,
                        s = e.node.parent;
                    for (; n < t && s && !(i = s.getComponent("BaseFish"));) s = s.parent, n++
                }
                if (!i) return;
                let n = this.fishIDList.indexOf(i.ID); - 1 != n && this.fishIDList.splice(n, 1)
            }
        };
        o = n([s], o), i.default = o, cc._RF.pop()
    }, {}],
    ElectricWeapon: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "2e1f7iBdV1CXL3C92h8jhme", "ElectricWeapon");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("./BaseWeapon"),
            a = e("./ElectricCollider"),
            o = e("./WeaponManager"),
            {
                ccclass: l,
                property: r
            } = cc._decorator;
        let c = class extends s.default {
            constructor() {
                super(...arguments), this.airEffectAnim = null, this.shootRangeAnim = null, this.shootEffectAnim = null, this.shootRangeCollider = null, this.TimeLimit = null, this.shootPos = null
            }
            Init(e) {
                this.playerSeat = e, this.isGunReady = !1, this.node.angle = e < 2 ? 0 : 180, this.PlatformAni && this.PlatformAni.play(), this.FortAni && this.FortAni.play(), this.gunNode.active = !1, this.Type = o.WeaponType.Electric, this.SwitchAnimObj(this.airEffectAnim, !1), this.SwitchAnimObj(this.shootRangeAnim, !1), this.SwitchAnimObj(this.shootEffectAnim, !1), this.TimeLimit.node.active = !1, this.shootPos || (this.shootPos = new cc.Vec2(this.node.getPosition().x, e < 2 ? this.node.getPosition().y + 500 : this.node.getPosition().y - 500))
            }
            ShootFunction(e) {
                this.SetGunRotateUsePos(e), this.SwitchAnimObj(this.shootRangeAnim, !1), this.SwitchAnimObj(this.airEffectAnim, !1), this.SwitchAnimObj(this.shootEffectAnim, !0)
            }
            ChangeGunAnim() {
                this.gunNode.active = !0, this.gunNode.scale = 1.5, this.gunNode.runAction(cc.sequence(cc.scaleTo(.5, 1), cc.callFunc(() => {
                    this.isGunReady = !0
                }))), this.SwitchAnimObj(this.airEffectAnim, !0), this.SwitchAnimObj(this.shootRangeAnim, !0), this.SwitchAnimObj(this.shootEffectAnim, !1)
            }
            SwitchAnimObj(e, t) {
                e && (e.node.active = t, t && e.play())
            }
            SwitchCollision(e) {
                this.shootRangeCollider && (this.shootRangeCollider.node.active = e, this.shootRangeCollider.Init())
            }
            GetFishIDList() {
                return this.shootRangeCollider.GetFishIDList()
            }
            ShootState(e) {
                return 0
            }
            setLimitTime(e) {
                e ? (this.TimeLimit.node.active = !0, this.TimeLimit.string = Math.floor(e).toString()) : this.TimeLimit.node.active = !1
            }
            SetGunRotateUsePos(e) {
                super.SetGunRotateUsePos(e), this.shootPos = e
            }
            UnloadWeapon() {
                this.airEffectAnim.stop(), this.shootRangeAnim.stop(), this.shootEffectAnim.stop(), super.UnloadWeapon()
            }
        };
        n([r(cc.Animation)], c.prototype, "airEffectAnim", void 0), n([r(cc.Animation)], c.prototype, "shootRangeAnim", void 0), n([r(cc.Animation)], c.prototype, "shootEffectAnim", void 0), n([r(a.default)], c.prototype, "shootRangeCollider", void 0), n([r(cc.Label)], c.prototype, "TimeLimit", void 0), c = n([l], c), i.default = c, cc._RF.pop()
    }, {
        "./BaseWeapon": "BaseWeapon",
        "./ElectricCollider": "ElectricCollider",
        "./WeaponManager": "WeaponManager"
    }],
    EnumFilter: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "f6092WBkEFP3qOtgx/WsEN9", "EnumFilter");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        }), i.FishGame = i.PoolEnum = i.EffectType = i.FishType = void 0;
        const s = e("./ResourceManager"),
            {
                ccclass: a
            } = cc._decorator;
        var o, l, r;
        (function(e) {
            e[e.Normal = 0] = "Normal", e[e.Double = 1] = "Double", e[e.HumpbackWhale = 2] = "HumpbackWhale", e[e.FireDragon = 3] = "FireDragon", e[e.KingCrab = 4] = "KingCrab", e[e.KingTaco = 5] = "KingTaco", e[e.KingLacoste = 6] = "KingLacoste", e[e.KingAngle = 7] = "KingAngle", e[e.Mermaid = 8] = "Mermaid", e[e.ThunderDragon = 9] = "ThunderDragon", e[e.Phoenix = 10] = "Phoenix", e[e.Buffalo = 11] = "Buffalo", e[e.Patrick = 12] = "Patrick", e[e.Vampire = 13] = "Vampire", e[e.Buddha = 14] = "Buddha", e[e.DragonTurtle = 15] = "DragonTurtle", e[e.TurtleBoss = 16] = "TurtleBoss", e[e.LionDance = 17] = "LionDance", e[e.WealthGod = 18] = "WealthGod", e[e.TreasureCrab = 19] = "TreasureCrab", e[e.IceDragon = 20] = "IceDragon", e[e.RedDragon = 21] = "RedDragon", e[e.BattleShip = 22] = "BattleShip", e[e.LuckyCat = 23] = "LuckyCat", e[e.CircusClown = 24] = "CircusClown", e[e.CircusPig = 25] = "CircusPig", e[e.CircusTiger = 26] = "CircusTiger", e[e.BlazingTiger = 27] = "BlazingTiger", e[e.ArmorKingCrab = 28] = "ArmorKingCrab", e[e.KingSquid = 29] = "KingSquid", e[e.KingJellyFish = 30] = "KingJellyFish", e[e.EternalSquid = 31] = "EternalSquid", e[e.EternalPhoenix = 32] = "EternalPhoenix", e[e.EternalFlamingDragon = 33] = "EternalFlamingDragon", e[e.GeneralLobster = 34] = "GeneralLobster", e[e.GoldenSlotCrab = 35] = "GoldenSlotCrab", e[e.EternalDragonTurtle = 36] = "EternalDragonTurtle", e[e.ThunderDragonEx = 37] = "ThunderDragonEx"
        })(o = i.FishType || (i.FishType = {})),
        function(e) {
            e[e.Blast = 0] = "Blast", e[e.BallFire = 7] = "BallFire"
        }(i.EffectType || (i.EffectType = {})),
        function(e) {
            e.Fish = "Fish", e.Background = "Background", e.Bullet = "Bullet", e.Weapon = "Weapon", e.GUI = "GUI", e.Award = "Award", e.Effect = "Effect", e.Skill = "Skill", e.Title = "Title", e.TopRoot = "TopRoot"
        }(l = i.PoolEnum || (i.PoolEnum = {})),
        function(e) {
            e.TD = "FishHunterThunderDragon", e.MTY = "FishFortuneKings", e.MTYL = "FishFortuneKingsLite", e.ALD = "FishHunterAladdin", e.ZB = "FishHunterGhost", e.KK = "FishHunterKingKong", e.LS = "FishHunterLuckyShamrock", e.GLP = "FishGoldenLegendPlus", e.MF = "MonstersFrenzy", e.BS = "FishBattleShip", e.WCF = "FishWonderCat", e.CIR = "FishCircus", e.GO = "FishGolden", e.KC = "FishKingOfCrab", e.LL = "FishLuckyLobster"
        }(r = i.FishGame || (i.FishGame = {}));
        let c = class {
            static getFishType(e) {
                switch (e) {
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                        return o.Double;
                    case 18:
                        return o.HumpbackWhale;
                    case 19:
                        return o.FireDragon;
                    case 20:
                    case 124:
                        return o.KingLacoste;
                    case 24:
                        return o.KingCrab;
                    case 25:
                        return o.Mermaid;
                    case 29:
                        return o.TreasureCrab;
                    case 32:
                        return o.DragonTurtle;
                    case 35:
                    case 125:
                        return o.KingAngle;
                    case 36:
                    case 61:
                    case 62:
                    case 63:
                    case 64:
                    case 65:
                    case 66:
                    case 117:
                    case 118:
                    case 119:
                    case 120:
                    case 121:
                    case 122:
                    case 123:
                        return o.KingTaco;
                    case 80:
                        return o.Phoenix;
                    case 78:
                        return o.ThunderDragon;
                    case 81:
                        return o.Buffalo;
                    case 82:
                        return o.Patrick;
                    case 83:
                        return o.Vampire;
                    case 84:
                        return o.Buddha;
                    case 85:
                        return o.TurtleBoss;
                    case 87:
                        return o.IceDragon;
                    case 88:
                        return o.RedDragon;
                    case 89:
                    case 90:
                    case 91:
                        return o.BattleShip;
                    case 92:
                        return o.LuckyCat;
                    case 93:
                        return o.CircusClown;
                    case 94:
                        return o.CircusPig;
                    case 95:
                        return o.CircusTiger;
                    case 96:
                        return o.BlazingTiger;
                    case 129:
                        return o.ArmorKingCrab;
                    case 126:
                        return o.KingSquid;
                    case 127:
                        return o.KingJellyFish;
                    case 111:
                        return o.EternalSquid;
                    case 112:
                        return o.EternalPhoenix;
                    case 113:
                        return o.EternalFlamingDragon;
                    case 114:
                        return o.GeneralLobster;
                    case 115:
                        return o.GoldenSlotCrab;
                    case 116:
                        return o.WealthGod;
                    case 133:
                        return o.EternalDragonTurtle;
                    case 134:
                        return o.ThunderDragonEx;
                    default:
                        return o.Normal
                }
            }
            static DespawnObj(e, t, i) {
                switch (e) {
                    case l.Fish:
                        s.default.DespawnFish(t, i);
                        break;
                    case l.Background:
                        s.default.UnLoadBackground(t, i);
                        break;
                    case l.Bullet:
                        s.default.DespawnBullet(t, i);
                        break;
                    case l.Weapon:
                        s.default.UnloadWeapon(t, i);
                        break;
                    case l.GUI:
                        s.default.UnloadGUI(t, i);
                        break;
                    case l.Award:
                        s.default.DespawnAward(t, i);
                        break;
                    case l.Effect:
                        s.default.DespawnEffect(t, i);
                        break;
                    case l.Skill:
                        s.default.DespawnSkill(t, i);
                        break;
                    case l.Title:
                        s.default.DespawnTitle(t, i);
                        break;
                    case l.TopRoot:
                        s.default.UnloadTopRoot(t, i)
                }
            }
            static NormalPathBound(e) {
                switch (e) {
                    case 80:
                    case 81:
                    case 82:
                        return 500;
                    case 18:
                        return 300;
                    case 111:
                    case 114:
                    case 111:
                    case 114:
                        return 500;
                    default:
                        return 250
                }
            }
            static needShakeEffect(e) {
                switch (e) {
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                        return .8;
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                        return 1;
                    default:
                        return 0
                }
            }
            static ClickAvoidFish(e) {
                switch (e) {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 47:
                    case 48:
                    case 128:
                        return !0
                }
                return !1
            }
            static KillableFeatureFish(e) {
                switch (e) {
                    case 116:
                        return !0
                }
                return !1
            }
            static get LockOrder() {
                if (!this.lockOder) switch (SS.Common.GameEnvironment.CurrentGameNow) {
                    case r.MTY:
                    case r.MTYL:
                        this.lockOder = this.lockOderMTY;
                        break;
                    case r.ALD:
                        this.lockOder = this.lockOderALD;
                        break;
                    case r.ZB:
                        this.lockOder = this.lockOderZB;
                        break;
                    case r.KK:
                        this.lockOder = this.lockOderKK;
                        break;
                    case r.LS:
                        this.lockOder = this.lockOderLS;
                        break;
                    case r.GLP:
                        this.lockOder = this.lockOderGLP;
                        break;
                    case r.MF:
                        this.lockOder = this.lockOder = "magiccity" == window.gd_nowLOGO ? this.mclockOderMF : this.lockOderMF;
                        break;
                    case r.TD:
                        this.lockOder = "magiccity" == window.gd_nowLOGO ? this.mclockOderTD : this.lockOderTD;
                        break;
                    case r.BS:
                        this.lockOder = this.lockOderBS;
                        break;
                    case r.WCF:
                        this.lockOder = this.lockOderWCF;
                        break;
                    case r.CIR:
                        this.lockOder = "magiccity" == window.gd_nowLOGO ? this.mcLockOderCIR : this.lockOderCIR;
                        break;
                    case r.GO:
                        this.lockOder = this.lockOderGO;
                        break;
                    case r.KC:
                        this.lockOder = this.lockOderKOC;
                        break;
                    case r.LL:
                        this.lockOder = this.lockOderLL
                }
                return this.lockOder
            }
            static getLockOder() {
                return this.tempLockOder || (this.tempLockOder = this.TransFishTypeList(this.LockOrder)), this.tempLockOder
            }
            static TransFishTypeList(e) {
                let t = [];
                for (let i = 0; i < e.length; i++) switch (e[i]) {
                    case 0:
                        t.push(0, 47);
                        break;
                    case 1:
                        t.push(1, 48);
                        break;
                    case 61:
                        t.push(61, 62, 63, 64, 65, 66);
                        break;
                    case 118:
                        t.push(118, 119, 120, 121, 122, 123);
                        break;
                    case 200:
                        t.push(55, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210);
                        break;
                    case 300:
                        t.push(300, 301, 302, 303, 304, 305, 306, 307, 308, 309);
                        break;
                    default:
                        t.push(e[i])
                }
                return t
            }
            static UseDefaultLockSetting(e) {
                switch (e) {
                    case 22:
                    case 23:
                    case 34:
                    case 77:
                    case 79:
                        this.LockSetting = [22, 23, 34, 77, 79];
                        break;
                    case 20:
                    case 24:
                    case 25:
                    case 35:
                    case 36:
                    case 61:
                    case 62:
                    case 63:
                    case 64:
                    case 65:
                    case 66:
                    case 78:
                    case 80:
                    case 81:
                    case 82:
                        this.LockSetting = [20, 24, 25, 35, 36, 61, 62, 63, 64, 65, 66, 78, 80, 81, 82];
                        break;
                    case 55:
                    case 200:
                    case 201:
                    case 202:
                    case 203:
                    case 204:
                    case 205:
                    case 206:
                    case 207:
                    case 208:
                    case 209:
                    case 210:
                        this.LockSetting = [55, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210];
                        break;
                    case 300:
                    case 301:
                    case 302:
                    case 303:
                    case 304:
                    case 305:
                    case 306:
                    case 307:
                    case 308:
                    case 309:
                        this.LockSetting = [300, 301, 302, 303, 304, 305, 306, 307, 308, 309];
                        break;
                    default:
                        this.LockSetting = [e]
                }
            }
        };
        c.FeatureType = {
            1: {
                0: 200,
                47: 200,
                1: 201,
                48: 201,
                2: 202,
                3: 203,
                4: 204,
                5: 205,
                6: 206,
                7: 207,
                8: 55,
                9: 208,
                10: 209,
                11: 210
            },
            2: {
                0: 300,
                47: 300,
                1: 301,
                48: 301,
                2: 302,
                3: 303,
                4: 304,
                5: 305,
                6: 306,
                7: 307,
                8: 308,
                9: 309
            }
        }, c.lockOder = null, c.lockOderMTY = [80, 84, 78, 85, 86, 79, 77, 34, 23, 22, 300, 200, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0], c.lockOderALD = [83, 82, 80, 78, 25, 34, 23, 22, 77, 79, 300, 200, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0], c.lockOderZB = [83, 82, 80, 20, 78, 25, 34, 23, 22, 77, 79, 300, 200, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0], c.lockOderKK = [80, 25, 82, 81, 78, 34, 23, 22, 77, 79, 300, 200, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0], c.lockOderLS = [80, 24, 25, 78, 81, 82, null, 79, 34, 23, 22, 77, 300, 200, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0], c.lockOderGLP = [80, 24, 25, 78, 81, 82, 79, 34, 23, 22, 77, 300, 200, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0], c.lockOderMF = [134, 116, 80, 35, null, 61, null, 25, 78, 79, 34, 23, 22, 77, 300, 200, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0], c.mclockOderMF = [116, 80, 35, 61, 25, 78, 79, 34, 23, 22, 77, 300, 200, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0], c.lockOderTD = [78, 88, 87, 19, 32, 24, 61, 20, 35, 29, 79, 22, 23, 34, 77, 300, 200, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0], c.mclockOderTD = [78, 88, 87, 19, 24, 61, 20, 35, 32, 29, 79, 22, 23, 34, 77, 300, 200, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0], c.lockOderBS = [96, 89, 91, 90, 80, 78, 25, 24, 61, 20, 35, 79, 22, 23, 34, 77, 300, 200, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0], c.lockOderWCF = [92, 24, 80, 78, 25, 79, 22, 23, 34, 77, 300, 200, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0], c.mcLockOderCIR = [80, 93, 78, 94, 95, 79, 77, 34, 23, 22, 300, 200, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0], c.lockOderCIR = [93, 95, 94, 80, 78, 79, 77, 34, 23, 22, 300, 200, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0], c.lockOderGO = [129, 118, 124, 125, 126, 127, 80, 78, 79, 22, 23, 34, 77, 300, 200, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 128, 3, 2, 1, 0], c.lockOderKOC = [115, 111, 113, 112, 114, 79, 22, 23, 34, 77, 300, 200, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0], c.lockOderLL = [115, 111, 113, 133, 114, 79, 22, 23, 34, 77, 300, 200, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0], c.tempLockOder = null, c.playerLockSetting = null, c.LockSetting = null, c = n([a], c), i.default = c, cc._RF.pop()
    }, {
        "./ResourceManager": "ResourceManager"
    }],
    ErrorCode: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "14e51B3q1NP5L18ti3vx2WQ", "ErrorCode"), Object.defineProperty(i, "__esModule", {
            value: !0
        }), i.ErrorCode = void 0, i.ErrorCode = e => {
            switch (e) {
                case 11:
                    return "S197";
                case 12:
                    return "S198";
                case 13:
                    return "S199";
                case 14:
                    return "S200";
                case 15:
                    return "S201";
                case 16:
                    return "S202";
                case 17:
                    return "S203";
                case 18:
                    return "S204";
                case 19:
                    return "S205";
                case 20:
                    return "S206";
                case 21:
                    return "S207";
                case 22:
                    return "S208";
                case 23:
                    return "S209";
                case 24:
                    return "S210";
                case 25:
                    return "S211";
                case 31:
                    return "S212";
                case -32:
                    return "S213";
                case 34:
                    return "S214";
                case -36:
                    return "S215";
                case 37:
                    return "S216";
                case -38:
                    return "S217";
                case -40:
                    return "S218";
                case -41:
                    return "S219";
                case -42:
                    return "S220";
                case -43:
                    return "S221";
                case -44:
                    return "S222";
                case -45:
                    return "S223";
                case -46:
                    return "S224";
                case -47:
                    return "S225";
                case -48:
                    return "S226";
                case -49:
                    return "S227";
                case -50:
                    return "S228";
                case -51:
                    return "S229";
                case -52:
                    return "S230";
                case -53:
                    return "S231";
                case -54:
                    return "S232";
                case -55:
                    return "S233";
                case -56:
                    return "S234";
                case -57:
                    return "S235";
                case 58:
                    return "S236";
                case -59:
                    return "S237";
                case -60:
                    return "S238";
                case -73:
                    return "S239";
                case 74:
                    return "S240";
                case -78:
                    return "S241";
                case -79:
                    return "S242";
                case -81:
                    return "S243";
                case -101:
                    return "S244";
                case -102:
                    return "S245";
                case -103:
                    return "S246";
                case -104:
                    return "S247";
                case 105:
                    return "S248";
                case -106:
                    return "S249";
                case -107:
                    return "S250";
                case -108:
                    return "S251";
                case -110:
                    return "S252";
                case -112:
                    return "S253";
                case 360:
                    return "S254";
                case 361:
                    return "S255";
                case 600:
                    return "S256";
                case 601:
                    return "S257";
                case 602:
                    return "S258";
                case 603:
                    return "S259";
                case 604:
                    return "S260";
                case 605:
                    return "S261";
                case 606:
                    return "S262";
                case 607:
                    return "S263";
                case 608:
                    return "S264";
                case 609:
                    return "S265";
                case 610:
                    return "S266";
                case 611:
                    return "S267";
                case 612:
                    return "S268";
                case 613:
                    return "S269";
                case 614:
                    return "S270";
                case 615:
                    return "S271";
                case 616:
                    return "S272";
                case 617:
                    return "S273";
                case 618:
                    return "S274";
                case 619:
                    return "S275";
                case 620:
                    return "S276";
                case 621:
                    return "S277";
                case -622:
                    return "S278";
                case 623:
                    return "S279";
                case -624:
                    return "S280";
                case -625:
                    return "S281";
                default:
                    return "C31"
            }
        }, cc._RF.pop()
    }, {}],
    ErrorHandler: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "53db2zoZIREjpP9POWQjFip", "ErrorHandler"), Object.defineProperty(i, "__esModule", {
            value: !0
        }), i.VerifyMobileFailHandle = i.DeviceLoginFailHandle = i.PinLoginFailHandle = i.ErrorHandler = void 0;
        const n = e("../../../../LobbyCommon/PopupMessage/Script/PopupMsgMgr");
        i.DeviceLoginFailHandle = (e, t) => {
            let i = e.toString(),
                n = null;
            e == ArkSDK.HttpResult.OK ? t.hasOwnProperty("reason") && ("-1" == (i = t.reason) ? (n = "Incorrect Kiosk ID. Please check and revise!", i = "S15") : "-2" == i ? (n = "Kiosk ID is deactivated.", i = "S16") : "-5" == i ? (n = "The user has login in another device.", i = "S13") : (n = "The Internet was lost! Please login again!", i = "S14")) : (e == ArkSDK.HttpResult.Abort ? i = "S124" : e == ArkSDK.HttpResult.Timeout ? i = "S11" : e == ArkSDK.HttpResult.Error ? i = "S12" : e == ArkSDK.HttpResult.Status ? i = "S125" : e == ArkSDK.HttpResult.NotReset ? i = "S126" : e == ArkSDK.HttpResult.Condition && (i = "S127"), n = "The Internet was lost! Please login again!"), s(i, t)
        }, i.PinLoginFailHandle = (e, t) => {
            let i = e.toString(),
                n = null;
            e == ArkSDK.HttpResult.Condition && t.hasOwnProperty("reason") ? "-5" == (i = t.reason) ? (n = "The user has login in another device.", i = "S23") : (i = "S131", n = "The Internet was lost! Please login again!") : e == ArkSDK.HttpResult.OK ? t.hasOwnProperty("reason") && ("-3" == (i = t.reason) ? (n = "The Pin ID is not existed.", i = "S25") : "-4" == i ? (n = "The User ID is deactivated.", i = "S26") : (n = "The Internet was lost! Please login again!", i = "S24")) : (e == ArkSDK.HttpResult.Abort ? i = "S128" : e == ArkSDK.HttpResult.Timeout ? i = "S21" : e == ArkSDK.HttpResult.Error ? i = "S22" : e == ArkSDK.HttpResult.Status ? i = "S129" : e == ArkSDK.HttpResult.NotReset ? i = "S130" : e == ArkSDK.HttpResult.Condition && (i = "S131"), n = "The Internet was lost! Please login again!"), s(i, t)
        }, i.VerifyMobileFailHandle = (e, t) => {
            let i = e.toString(),
                n = null;
            e == ArkSDK.HttpResult.OK ? t.hasOwnProperty("result") && ("-6" == (i = t.result) ? (n = "User ID is deactivated.", i = "S115") : "-4" == i ? (n = "The user ID or password you entered is incorrect.", i = "S116") : "-5" == i && (n = "The user ID or password you entered is incorrect.", i = "S117")) : (e == ArkSDK.HttpResult.Abort ? i = "S118" : e == ArkSDK.HttpResult.Timeout ? i = "S119" : e == ArkSDK.HttpResult.Error ? i = "S120" : e == ArkSDK.HttpResult.Status ? i = "S121" : e == ArkSDK.HttpResult.NotReset ? i = "S122" : e == ArkSDK.HttpResult.Condition && (i = "S123"), n = "The Internet was lost! Please login again!"), s(i, t)
        };
        const s = (e, t) => {
            n.PopupMsgMgr.Instance.ShowPopMsg(n.PopupPriority.Critical, e, SS.Common.GameEnvironment.CurrentGameNow, t, null)
        };
        i.ErrorHandler = s, cc._RF.pop()
    }, {
        "../../../../LobbyCommon/PopupMessage/Script/PopupMsgMgr": void 0
    }],
    EternalDragonReward: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "40bc4BDU5hNspqNjWKCA5uv", "EternalDragonReward");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("../Common/PoolObj"),
            {
                ccclass: a,
                property: o
            } = cc._decorator;
        let l = class extends s.default {
            constructor() {
                super(...arguments), this.label = null, this.spine = null, this.smoke = null, this.coinBack = null, this.coinFront_node1 = null, this.coinFront_node2 = null, this.coinFront1 = null, this.coinFront2 = null
            }
            Init(e) {
                this.label.string = e.toString(), null == this.coinFront1 && (this.coinFront1 = this.coinFront_node1.getComponentsInChildren(cc.Animation)), null == this.coinFront2 && (this.coinFront2 = this.coinFront_node2.getComponentsInChildren(cc.Animation)), this.spine.setAnimation(0, "RedDragonReward", !1), this.label.node.scale = 0, cc.tween(this.label.node).to(.2, {
                    scale: 1
                }).delay(.3).call(() => {
                    this.smoke.resetSystem(), this.coinBack.emissionRate = 50, this.DropCoins(this.coinFront1)
                }).to(.65, {
                    scale: 1.3
                }).call(() => {
                    this.coinBack.emissionRate = 0
                }).to(.65, {
                    scale: 1
                }).call(() => {
                    this.coinBack.emissionRate = 50, this.DropCoins(this.coinFront2)
                }).to(.65, {
                    scale: 1.5
                }).call(() => {
                    this.coinBack.emissionRate = 0
                }).to(.65, {
                    scale: 1
                }).delay(.65).to(.3, {
                    scale: 0
                }).delay(5).call(() => {}).start()
            }
            DropCoins(e) {
                for (let t = 0; t < e.length; t++) e[t].node.setPosition(cc.v3(800 * Math.random() - 400, 640 + 100 * Math.random())), e[t].node.angle = 360 * Math.random(), e[t].node.scale = .5 * Math.random() + 1, e[t].node.active = !0, e[t].play(null, Math.random()), cc.tween(e[t].node).by(Math.random() + 1.5, {
                    position: cc.v3(100 * Math.random() - 50, -1280)
                }).call(() => {
                    e[t].node.active = !1, e[t].stop()
                }).start()
            }
        };
        n([o(cc.Label)], l.prototype, "label", void 0), n([o(sp.Skeleton)], l.prototype, "spine", void 0), n([o(cc.ParticleSystem)], l.prototype, "smoke", void 0), n([o(cc.ParticleSystem)], l.prototype, "coinBack", void 0), n([o(cc.Node)], l.prototype, "coinFront_node1", void 0), n([o(cc.Node)], l.prototype, "coinFront_node2", void 0), l = n([a], l), i.default = l, cc._RF.pop()
    }, {
        "../Common/PoolObj": "PoolObj"
    }],
    EventPuzzleDropEggMgr: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "1aa53d6eoRN1a6kIP39nz0s", "EventPuzzleDropEggMgr");
        var n, s = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("../../../../FishCommon/Script/SSCanvasHandler"),
            o = e("../../../../LobbyCommon/EventModule/FishPuzzleEgg/Script/FishPuzzleEggData"),
            l = e("../../../../LobbyCommon/EventModule/FishPuzzleEgg/Script/FishPuzzleEggDropEgg"),
            r = e("../MainGame/Award/AwardManager"),
            c = e("../MainGame/Common/AudioManager"),
            h = e("../MainGame/Common/ResourceManager"),
            d = e("../MainGame/Common/Utility"),
            u = e("../MainGame/Fish/FishManager"),
            m = e("../MainGame/Player/PlayerManager"),
            p = e("../MainGame/Weapon/WeaponManager"),
            {
                ccclass: f,
                property: S
            } = cc._decorator;
        let g = n = class extends cc.Component {
            constructor() {
                super(...arguments), this.m_funDropPuzzleEgg = null, this.m_funPuzzlePieceFlyStartCB = null, this.m_funPuzzlePieceFlyFinCB = null, this.m_funGetPuzzleIconPos = null, this.m_funGetEnableShow = null, this.CoinSound = -1, this.winSide = null
            }
            static get Instance() {
                return this.instance
            }
            onLoad() {
                n.instance = this
            }
            ParsePuzzelDropEgg(e, t, i, n) {
                let s = i[900005],
                    a = s.UserAwardData,
                    o = s.UserQuestData;
                if (a.length > 1) {
                    console.error("ParsePuzzelDropEgg, userAwardData > 1 = ", a);
                    let s = i.small_fish_hit_id,
                        l = i.big_fish_hit_id,
                        r = i.boss_fish_hit_id,
                        c = -1;
                    for (let i = 0; i < a.length; i++) {
                        let h = a[i];
                        for (let e = 0; e < o.length; e++) {
                            let t = o[e];
                            if (h.Name == t.Name) {
                                c = t.AwardType;
                                break
                            }
                        }
                        switch (c) {
                            case 0:
                                n = s;
                                break;
                            case 1:
                                n = l;
                                break;
                            case 2:
                                n = r
                        }
                        this.DropEgg(e, t, h, o, n)
                    }
                } else this.DropEgg(e, t, a[0], o, n)
            }
            DropEgg(e, t, i, n, s) {
                let l = this.GetFishPos(t, s),
                    r = cc.Vec2.ZERO,
                    c = i.AwardInfo;
                for (let h = 0; h < c.length; h++) {
                    let i = c[h],
                        s = i.Amount,
                        d = i.EggType,
                        u = i.Item;
                    if (t) {
                        let c = !0;
                        if (this.m_funGetEnableShow && (c = this.m_funGetEnableShow()), u <= o.PUZZLE_ITEM_DEFINE.GoldPuzzle) {
                            let o = Number(i.PuzzleIndex);
                            c ? this.CheckQuestState(u, n) && (r = this.m_funGetPuzzleIconPos ? a.default.ConvMousePosNoReverse(this.m_funGetPuzzleIconPos(u - 1)) : p.default.WeaponPosition(e), this.m_funDropPuzzleEgg && this.m_funDropPuzzleEgg(), this.DropPuzzleItemEffect(h, e, t, d, u, s, l, r, () => {
                                this.m_funPuzzlePieceFlyStartCB && this.m_funPuzzlePieceFlyStartCB()
                            }, () => {
                                this.m_funPuzzlePieceFlyFinCB && this.m_funPuzzlePieceFlyFinCB(u, o)
                            })) : this.m_funPuzzlePieceFlyFinCB && this.m_funPuzzlePieceFlyFinCB(u, o)
                        } else m.PlayerManager.BulletSync(1), c ? (r = p.default.WeaponPosition(e), this.DropPuzzleItemEffect(h, e, t, d, u, s, l, r, null, () => {
                            u == o.PUZZLE_ITEM_DEFINE.Winning ? this.DropCoinEffect(l, s, m.PlayerManager.getPlayer(e).bet_value, e, !0) : u == o.PUZZLE_ITEM_DEFINE.Entry && this.DropCoinEffect(l, s, m.PlayerManager.getPlayer(e).bet_value, e, !1, !0)
                        })) : u == o.PUZZLE_ITEM_DEFINE.Winning ? m.PlayerManager.Instance.ModifyPlayerWinning(e, s) : u == o.PUZZLE_ITEM_DEFINE.Entry && (m.PlayerManager.Instance.ModifyPlayerEntries(e, s, null, !1), m.PlayerManager.BulletSync(-1, null))
                    } else this.m_funGetEnableShow && this.m_funGetEnableShow() && null != l && (r = p.default.WeaponUIPosition(e), this.DropPuzzleItemEffect(h, e, t, d, u, s, l, r, null, null))
                }
            }
            CheckQuestState(e, t) {
                for (let i = 0; i < t.length; i++) {
                    let n = t[i];
                    if ("Puzzle" == n.GameThemeID[0]) {
                        let t = o.PUZZLE_TYPE.Copper,
                            i = Number(n.AwardType);
                        if (3 == i ? t = o.PUZZLE_TYPE.Copper : 4 == i ? t = o.PUZZLE_TYPE.Sliver : 5 == i && (t = o.PUZZLE_TYPE.Gold), o.PUZZLE_ITEM[t].dropID == e) {
                            let e = n.Status;
                            if (0 != e && console.error("CheckQuestState, puzzleType = " + t + ", questStatus = " + e), e > 0) return !1
                        }
                    }
                }
                return !0
            }
            GetFishPos(e, t) {
                let i = cc.Vec2.ZERO,
                    n = null;
                if ("" != t && (n = u.default.Instance.GetFishByID(t)) && (i = a.default.ConvMousePosNoReverse(n.getFishPos())), "" == t || null == n) {
                    if (!e) return void(i = void 0); {
                        let e, t;
                        Math.random() > .5 ? (e = Math.floor(1136 * Math.random() - 568), t = Math.random() > .5 ? 350 : -320) : (e = Math.random() > .5 ? 600 : -600, t = Math.floor(660 * Math.random() - 320)), i = cc.v2(e, t)
                    }
                }
                return this.winSide || (this.winSide = cc.v2(.5 * a.default.WinSize.width, .5 * a.default.WinSize.height)), i.x > this.winSide.x - 50 ? i.x = this.winSide.x - 100 - 100 * Math.random() : i.x < 50 - this.winSide.x && (i.x = 100 - this.winSide.x + 100 * Math.random()), i.y > this.winSide.y - 50 ? i.y = this.winSide.y - 100 - 100 * Math.random() : i.y < 50 - this.winSide.y && (i.y = 100 - this.winSide.y + 100 * Math.random()), i
            }
            DropPuzzleItemEffect(e, t, i, n, s, a, o, r, c = null, d = null) {
                console.warn("[DropPuzzleItemEffectALD]seat: %s, eggType: %s, itemID: %s, qty: %s", t, n, s, a);
                let u = h.default.SpawnPuzzleEggDropEgg("DropEgg" + n);
                if (!u) return;
                let m = u.getComponent(l.FishPuzzleEggDropEgg);
                o.addSelf(cc.v2(100 * e, 0)), m.Init(i, n, u, s, a, o, r, () => {
                    c && c()
                }, e => {
                    h.default.DespawnPuzzleEggDropEgg(e), d && d()
                })
            }
            DropCoinEffect(e, t, i, n, s, a = !1) {
                let o = null;
                o = r.default.Instance.SpawnAward(r.AwardType.NormalFishNum, e, !0);
                let l = t / i;
                o.getComponent(cc.Label).string = d.default.NumberformatBet(t, i), o.scale = .5, o.runAction(cc.spawn(cc.sequence(cc.scaleTo(.1, 2.1).easing(cc.easeBackOut()), cc.scaleTo(.25, 1)), cc.callFunc(() => {
                    o.runAction(cc.sequence(cc.delayTime(.55), cc.callFunc(() => {
                        r.default.Instance.DropCoin(o.getPosition(), n, s, a, t), h.default.DespawnEffect(r.AwardType.NormalFishNum, o), -1 != this.CoinSound && c.default.Instance.Stop(this.CoinSound), this.CoinSound = c.default.Instance.Play(this.GetCoinSound(l))
                    })))
                })))
            }
            GetCoinSound(e) {
                return e < 10 ? "34_coinjump_a" : e < 50 ? "34_coinjump_b" : "34_coinjump_c"
            }
        };
        g.instance = null, g = n = s([f], g), i.default = g, cc._RF.pop()
    }, {
        "../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../../../../LobbyCommon/EventModule/FishPuzzleEgg/Script/FishPuzzleEggData": void 0,
        "../../../../LobbyCommon/EventModule/FishPuzzleEgg/Script/FishPuzzleEggDropEgg": void 0,
        "../MainGame/Award/AwardManager": "AwardManager",
        "../MainGame/Common/AudioManager": "AudioManager",
        "../MainGame/Common/ResourceManager": "ResourceManager",
        "../MainGame/Common/Utility": "Utility",
        "../MainGame/Fish/FishManager": "FishManager",
        "../MainGame/Player/PlayerManager": "PlayerManager",
        "../MainGame/Weapon/WeaponManager": "WeaponManager"
    }],
    FLASH_FLAT_FISH: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "8348e+Dkv9BV7GVOvUqZP4G", "FLASH_FLAT_FISH");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("./BaseFlashFish"),
            {
                ccclass: a
            } = cc._decorator;
        let o = class extends s.default {
            InitParameter() {
                super.InitParameter(), this.shapeNode.angle = 90
            }
            onMove(e) {
                e.AddSpeed(-70, 500);
                const t = e.PonitIndex,
                    i = e.GetTargetPoint(t),
                    n = e.GetTargetPoint(t + 1);
                if (n) {
                    const t = 180 - cc.misc.radiansToDegrees(Math.atan2(i.y - n.y, i.x - n.x));
                    this.shapeNode.runAction(cc.sequence(cc.delayTime(.3), cc.callFunc(() => {
                        e.Rotate(t, .4)
                    }), cc.delayTime(.4), cc.callFunc(() => {
                        this.mAnim.play("Swim"), e.AddSpeed(70, 500)
                    }), cc.repeat(cc.sequence(cc.rotateBy(.1, 5), cc.rotateBy(.1, -5)), 2)))
                }
            }
        };
        o = n([a], o), i.default = o, cc._RF.pop()
    }, {
        "./BaseFlashFish": "BaseFlashFish"
    }],
    FLASH_GURNARD: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "2df37C6fqJPcLNSbO4Mmkcb", "FLASH_GURNARD");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("./BaseFish"),
            a = e("./BaseFlashFish"),
            {
                ccclass: o
            } = cc._decorator;
        let l = class extends a.default {
            SpeedUp() {
                this.mSeek && this.aliveStatus == s.FishState.ALIVE && this.mSeek.AddSpeed(50, 1e3)
            }
        };
        l = n([o], l), i.default = l, cc._RF.pop()
    }, {
        "./BaseFish": "BaseFish",
        "./BaseFlashFish": "BaseFlashFish"
    }],
    FLASH_OCTOPUS: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "cade35k1wVPGbwak9L2lwh6", "FLASH_OCTOPUS");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("./BaseFish"),
            a = e("./BaseFlashFish"),
            {
                ccclass: o
            } = cc._decorator;
        let l = class extends a.default {
            SpeedUp() {
                this.mSeek && this.aliveStatus == s.FishState.ALIVE && this.mSeek.AddSpeed(80, 750)
            }
        };
        l = n([o], l), i.default = l, cc._RF.pop()
    }, {
        "./BaseFish": "BaseFish",
        "./BaseFlashFish": "BaseFlashFish"
    }],
    FLAT_FISH: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "aa357CSdM9FB7PNnTzfqHLS", "FLAT_FISH");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("./BaseFish"),
            {
                ccclass: a
            } = cc._decorator;
        let o = class extends s.default {
            InitParameter() {
                super.InitParameter(), this.shapeNode.angle = 90
            }
            onMove(e) {
                e.AddSpeed(-70, 500);
                const t = e.PonitIndex,
                    i = e.GetTargetPoint(t),
                    n = e.GetTargetPoint(t + 1);
                if (n) {
                    const t = 180 - cc.misc.radiansToDegrees(Math.atan2(i.y - n.y, i.x - n.x));
                    this.shapeNode.runAction(cc.sequence(cc.delayTime(.3), cc.callFunc(() => {
                        e.Rotate(t, .4)
                    }), cc.delayTime(.4), cc.callFunc(() => {
                        this.mAnim.play("Swim"), e.AddSpeed(70, 500)
                    }), cc.repeat(cc.sequence(cc.rotateBy(.1, 5), cc.rotateBy(.1, -5)), 2)))
                }
            }
        };
        o = n([a], o), i.default = o, cc._RF.pop()
    }, {
        "./BaseFish": "BaseFish"
    }],
    FinalShip: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "241bckXXSJKxZamonS96+J6", "FinalShip");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("../Common/PoolObj"),
            {
                ccclass: a,
                property: o
            } = cc._decorator;
        let l = class extends s.default {
            constructor() {
                super(...arguments), this.skeleton = null
            }
            reuse() {
                super.reuse(), this.skeleton && this.skeleton.setAnimation(0, "animation", !0)
            }
        };
        n([o(sp.Skeleton)], l.prototype, "skeleton", void 0), l = n([a], l), i.default = l, cc._RF.pop()
    }, {
        "../Common/PoolObj": "PoolObj"
    }],
    FishAvatarIcon: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "2087eVwBmlAW48JrI0D6gg5", "FishAvatarIcon");
        var n = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            s = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("../../../../../LobbyCommon/Component/BundleCtrl"),
            o = e("../../../../../LobbyCommon/Helper/EventSystem"),
            {
                ccclass: l,
                property: r
            } = cc._decorator;
        let c = class extends cc.Component {
            constructor() {
                super(...arguments), this.faceSprite = null, this.frameSprite = null, this.nicknameLabel = null, this.playerId = "-1", this.nickname = "", this.faceId = "", this.faceFrameId = ""
            }
            onLoad() {
                this.SetRegister()
            }
            onDestroy() {
                this.UnRegister()
            }
            SetRegister() {
                o.EventSystem.Event(o.Profile.NotifyUpdatePlayerSetting).Insert(this.SetByPlayerData, this), o.EventSystem.Event(o.FishHunter.UpdatePlayerSetting).Insert(this.SetByPlayerData, this)
            }
            UnRegister() {
                o.EventSystem.Event(o.Profile.NotifyUpdatePlayerSetting).Remove(this.SetByPlayerData, this), o.EventSystem.Event(o.FishHunter.UpdatePlayerSetting).Remove(this.SetByPlayerData, this)
            }
            SetByPlayerData(e) {
                "" != this.playerId && e.ArkID == this.playerId && (this.SetFaceByID(e.FaceID), this.SetFrameByID(e.FaceFrameID), this.SetNickname(e.NickName))
            }
            SetNickname(e) {
                this.nicknameLabel && this.nickname != e && (this.nickname = e, this.nicknameLabel.string = e)
            }
            SetFaceSprite(e) {
                this.faceSprite && (this.faceSprite.spriteFrame = e)
            }
            SetFrameSprite(e) {
                this.frameSprite && (this.frameSprite.spriteFrame = e)
            }
            SetFaceByID(e) {
                return s(this, void 0, void 0, function*() {
                    if (0 == e.length && (e = "FAC000"), this.faceId == e) return;
                    let t = yield a.default.Instance.GetSpirte("Avatar", e);
                    t && (this.faceId = e, this.SetFaceSprite(t))
                })
            }
            SetFrameByID(e) {
                return s(this, void 0, void 0, function*() {
                    if (this.faceFrameId == e) return;
                    if (0 == e.length) return this.faceFrameId = e, void this.SetFrameSprite(null);
                    let t = yield a.default.Instance.GetSpirte("Avatar", e);
                    t && (this.faceFrameId = e, this.SetFrameSprite(t))
                })
            }
        };
        n([r(cc.Sprite)], c.prototype, "faceSprite", void 0), n([r(cc.Sprite)], c.prototype, "frameSprite", void 0), n([r(cc.Label)], c.prototype, "nicknameLabel", void 0), c = n([l], c), i.default = c, cc._RF.pop()
    }, {
        "../../../../../LobbyCommon/Component/BundleCtrl": void 0,
        "../../../../../LobbyCommon/Helper/EventSystem": void 0
    }],
    FishManager: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "d9320iPf1pISZofoO74iBQY", "FishManager");
        var n, s = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            a = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const o = e("../Common/ResourceManager"),
            l = e("../../System/FishSystem"),
            r = e("./BaseFish"),
            c = e("../../GameClient"),
            h = e("../Common/AISeek"),
            d = e("../Common/EnumFilter"),
            u = e("../Award/AwardManager"),
            m = e("../Player/PopupWindowCtrl"),
            p = e("../Common/PreloadManager"),
            f = e("../Game/GameManager"),
            S = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            g = e("./UniqueFishData"),
            y = e("../Common/MultiLangSystem"),
            _ = e("../../GameClient/Player"),
            C = e("../../GameClient/JsonUtils"),
            {
                ccclass: I
            } = cc._decorator;
        let P = n = class extends cc.Component {
            constructor() {
                super(...arguments), this.time_count = 0, this.fps_counter = 0, this.MAX_SCRIPT_FRAME = 7776e3, this.currect_fps = 0, this.current_frame = 0, this.fish_manager = new Map, this.fish_info = {}, this.ai_seek = null, this.army_key = [], this.army_queue = {}, this.Event_FishEnter = null, this.Event_FishInit = null, this.ai_is_speed_up = !1, this.ai_speed_up_time = 0, this.winSide = null, this.uniqueFishData = null, this.waitFishScriptTime = -1, this.skipCmdTime = 0, this.fakeFishSN = -1
            }
            static get Instance() {
                return this.instance
            }
            getUniqueFishData(e, t = !1) {
                if (null == this.uniqueFishData && (this.uniqueFishData = new Array), !this.uniqueFishData[e]) {
                    let i = new g.default(e);
                    t || i.getComponent ? this.uniqueFishData[e] = i : console.warn("getUniqueFishData Error : " + e)
                }
                return this.uniqueFishData[e]
            }
            recycleUniqueFishData(e) {
                this.uniqueFishData && null != this.uniqueFishData[e] && (this.uniqueFishData[e].getComponent.Recycle(), this.uniqueFishData[e] = null)
            }
            onLoad() {
                return a(this, void 0, void 0, function*() {
                    n.instance = this, this.ai_seek = new h.AISeek("debug"), this.fish_info = yield C.LoadJson(`${SS.Common.GameEnvironment.CurrentGameNow}/${SS.Common.GameEnvironment.CurrentGameNow}/Res/data/fish_info`)
                })
            }
            start() {
                p.default.Instance.onReleaseSceneEvent.AddListener(this.Clear.bind(this))
            }
            update(e) {
                return a(this, void 0, void 0, function*() {
                    this.fps_counter++, this.time_count += e, this.current_frame += e, this.current_frame > this.MAX_SCRIPT_FRAME && (this.current_frame = 0), this.time_count >= 1 && (this.currect_fps = this.fps_counter, this.time_count = 0, this.fps_counter = 0), this.ArmyQueueProcess(e), this.FishSpeedUp(e), -1 != this.waitFishScriptTime && (this.waitFishScriptTime += e)
                })
            }
            onFishScript(e, t, i, n, s, a) {
                if (a.hasOwnProperty("submarine_info_list")) try {
                    this.getUniqueFishData(d.FishType.BattleShip).setCustomData(a)
                } catch (o) {
                    cc.error("No submarine exData object")
                }
                if (this.current_frame = e, i) {
                    a || (a = {}), a.enterSync = !0;
                    for (let e = 0; e < i.length; e++) {
                        const t = l.FishData.hasOwnProperty(l.FishData.frame) ? Math.ceil(this.current_frame) - l.FishData[l.FishData.frame] : 0;
                        this.CreateFish(i[e], s[e], t, a)
                    }
                }
                this.unschedule(this.SendFishScript.bind(this)), this.schedule(this.SendFishScript.bind(this), 5)
            }
            SendFishScript() {
                c.default.FishSystem && c.default.FishSystem.SendFishScript(), -1 != this.waitFishScriptTime && (c.default.Instance.ReciveCmdTime(this.waitFishScriptTime), this.skipCmdTime++), this.waitFishScriptTime = 0
            }
            onCreateFish(e, t, i, n, s) {
                const a = t.length;
                for (let o = 0; o < a; o++) this.CreateFish(t[o], n[o], null, s)
            }
            onFishScriptTime(e, t, i) {
                const n = t - this.current_frame;
                this.current_frame = t, n > 2 && this.FishSpeedUp(0, 2, n - 2), this.skipCmdTime > 0 ? this.skipCmdTime-- : (c.default.Instance.ReciveCmdTime(this.waitFishScriptTime), this.waitFishScriptTime = -1)
            }
            onFeatureEvent(e) {
                if (e.hasOwnProperty("fish_id")) {
                    let t = e.fish_id,
                        i = this.GetFishByID(t);
                    i && 116 == i.Type && i.SyncData instanceof Function && i.SyncData(e.odds, e.level)
                }
                if (e.hasOwnProperty("submarine_info_list")) try {
                    this.getUniqueFishData(d.FishType.BattleShip).setCustomData(e)
                } catch (t) {
                    cc.warn("SubmarineInfo not ready")
                }
                if (e.hasOwnProperty("OccupyTotalTime") && e.ArkID == SS.Network.LoginModel.LoginInfo.pin_ark_id) {
                    cc.warn("test"), e.Panel = "BeenOccupy";
                    let t = new m.WindowsData(m.Windows.BattleShipInfo, [null, (e, t) => {
                        u.default.Instance.BlastCoin(e, t), m.default.CloseWindow()
                    }], [y.default.getMultiLangText("ShipInfoTitle"), y.default.getMultiLangText("ShipName_R"), y.default.getMultiLangText("ShipName_G"), y.default.getMultiLangText("ShipName_B"), y.default.getMultiLangText("ShipID"), y.default.getMultiLangText("Occupied"), y.default.getMultiLangText("AccumulatePrizes"), y.default.getMultiLangText("BeenOccupied")], e);
                    m.default.EnableWindow(t, !0, !1, 2)
                }
            }
            ArmyQueueProcess(e) {
                return a(this, void 0, void 0, function*() {
                    if (this.army_key.length > 0)
                        for (let t = 0; t < this.army_key.length; t++) {
                            let i = this.army_key[t];
                            if (this.army_queue.hasOwnProperty(i)) {
                                const n = this.army_queue[i];
                                let s = n.sec_count;
                                const a = n.max_sec,
                                    l = n.last_key,
                                    c = n.position;
                                Math.abs(i + s - this.current_frame) <= 1 && (n.sec_count = s = this.current_frame - i);
                                const h = (.1 * Math.round(10 * s)).toString().substr(0, 4);
                                if (h != l && n.hasOwnProperty(h)) {
                                    const e = n[h];
                                    n.last_key = h, e.forEach(e => {
                                        const t = e.type,
                                            i = e.id,
                                            n = e.fishPath,
                                            a = e.delayTime - 2,
                                            l = o.default.SpawnFish(t);
                                        if (l) {
                                            const e = l.getComponent(r.default);
                                            e.Event_FishInit = this.OnFishInit.bind(this), e.InitPath(i, t, n, s - a, c.x, c.y), e.enabled = !0, this.AddFishByID(e)
                                        } else cc.warn(t + " is not create")
                                    })
                                }
                                s += e, n.sec_count = s, this.army_queue[i] = n, s >= a && (this.army_key.splice(t, 1), delete this.army_queue[i])
                            } else this.army_key.splice(t, 1)
                        } else this.army_queue = {}
                })
            }
            CreateFish(e, t, i = 0, n) {
                return a(this, void 0, void 0, function*() {
                    let s = e[l.FishData.type];
                    if (!this.fish_info.hasOwnProperty(s) || !this.fish_info[s].enable) return;
                    const a = e[l.FishData.feature];
                    if (s = this.ConvFishType(s, a), e[l.FishData.type] = s, null == s) return void cc.error("[CreateFish]data: " + JSON.stringify(e));
                    const h = this.fish_info[s].behavior_type || 0;
                    if (n && n.enterSync && h == r.BEHAVIOR_TYPE.SPINE) return void cc.warn("enterSync block type:" + s);
                    const p = e[l.FishData.id],
                        S = Math.floor(this.current_frame);
                    if (i = e.hasOwnProperty(l.FishData.frame) ? S - e[l.FishData.frame] : i, h == r.BEHAVIOR_TYPE.PATH) {
                        const e = this.fish_info[s].path_type;
                        return void this.GenerateArmy(e, p, S, i)
                    }
                    if (this.currect_fps > 10 || this.IgnoreLowFPSType(s)) m.default.EnableNetUnstable(!1, 1);
                    else {
                        if (m.default.EnableNetUnstable(!0, 1), cc.warn("FPS\u904e\u4f4e \u7565\u904etype:" + s.toString()), h != r.BEHAVIOR_TYPE.STAND) return;
                        cc.warn("\u7279\u6b8a\u9b5a\u7a2e \u7167\u5e38\u751f\u9b5atype:" + s.toString())
                    }
                    const g = e[l.FishData.size],
                        _ = this.fish_info.hasOwnProperty(s.toString()) ? this.fish_info[s].path_type : s,
                        C = e[l.FishData.path_index] || 0,
                        I = this.fish_info[s].alive || 100;
                    if (1 == g) {
                        let a = o.default.SpawnFish(s);
                        if (a) {
                            let o = a.getComponent(r.default);
                            if (o) {
                                if (o.enabled = !0, o.Event_FishInit = this.OnFishInit.bind(this), o.Init(e, p.toString(), I, h, t), this.AddFishByID(o), h == r.BEHAVIOR_TYPE.SEEK) {
                                    let e = {
                                        sync: i
                                    };
                                    o.InitSeek(_, C, e)
                                } else h == r.BEHAVIOR_TYPE.NORMAL ? o.InitNormalBehavior(_, i) : i > 0 && o.SetSyncTime(i);
                                o.Event_FishEnter = this.OnFishEnter.bind(this)
                            }
                            let l = d.default.getFishType(s),
                                S = null;
                            switch (l) {
                                case d.FishType.KingCrab:
                                case d.FishType.KingLacoste:
                                case d.FishType.KingAngle:
                                case d.FishType.KingTaco:
                                case d.FishType.Buffalo:
                                case d.FishType.Patrick:
                                case d.FishType.TurtleBoss:
                                case d.FishType.LionDance:
                                case d.FishType.CircusPig:
                                case d.FishType.CircusTiger:
                                case d.FishType.GoldenSlotCrab:
                                case d.FishType.ThunderDragonEx:
                                    f.default.Instance.BackgroundNow.BossEnter();
                                    break;
                                case d.FishType.Vampire:
                                    n && n.hasOwnProperty("Vampire_odds") && this.getUniqueFishData(l).setTargetNumber(n.Vampire_odds), this.getUniqueFishData(l).bindFish(o);
                                    break;
                                case d.FishType.Buddha:
                                    n && n.hasOwnProperty("LuckyBuddha_odds") && this.getUniqueFishData(l).setTargetNumber(n.LuckyBuddha_odds), this.getUniqueFishData(l).bindFish(o);
                                    break;
                                case d.FishType.TreasureCrab:
                                    n && n.hasOwnProperty("treasure_score") && n.hasOwnProperty("treasure_level") && this.getUniqueFishData(l, !0).TreasureCrabInit(o, n.treasure_score, n.treasure_level);
                                    break;
                                case d.FishType.RedDragon:
                                    (S = {}).time = 1e4, S.callback = () => {
                                        this.recycleUniqueFishData(d.FishType.RedDragon)
                                    }, this.getUniqueFishData(l).setTimeEvent(S);
                                    break;
                                case d.FishType.BattleShip:
                                    n.mainPlayerArkID = SS.Network.LoginModel.LoginInfo.pin_ark_id;
                                    let e = this.getUniqueFishData(l).getComponent;
                                    if (n.onUpdate = e.getData.bind(e), o.setExdata(n), n.onClick = t => {
                                            t.onUpdate = e.getData.bind(e), t.mainPlayerArkID = SS.Network.LoginModel.LoginInfo.pin_ark_id;
                                            let i = new m.WindowsData(m.Windows.BattleShipInfo, [(e, t) => {
                                                c.default.PlayerSystem.SendCollectAward(e, t)
                                            }, (e, t) => {
                                                let i = {};
                                                i.occupy_data = e, i.changePanel = !1, this.getUniqueFishData(d.FishType.BattleShip).setCustomData(i), u.default.Instance.BlastCoin(e, t), c.default.PlayerSystem.SendSyncAsset(), m.default.CloseWindow()
                                            }], [y.default.getMultiLangText("ShipInfoTitle"), y.default.getMultiLangText("ShipName_R"), y.default.getMultiLangText("ShipName_G"), y.default.getMultiLangText("ShipName_B"), y.default.getMultiLangText("ShipID"), y.default.getMultiLangText("Occupied"), y.default.getMultiLangText("AccumulatePrizes")], t);
                                            m.default.EnableWindow(i)
                                        }, !n.hasOwnProperty("occupy_data")) switch (n.occupy_data = {}, s) {
                                        case 89:
                                            n.occupy_data.submarine_name = "SUBMARINE_R";
                                            break;
                                        case 90:
                                            n.occupy_data.submarine_name = "SUBMARINE_G";
                                            break;
                                        case 91:
                                            n.occupy_data.submarine_name = "SUBMARINE_B"
                                    }
                                    this.getUniqueFishData(l).setCustomData(n);
                                    break;
                                case d.FishType.CircusClown:
                                    n && n.hasOwnProperty("CircusClown_odds") && this.getUniqueFishData(l).setTargetNumber(n.CircusClown_odds), this.getUniqueFishData(l).bindFish(o);
                                    break;
                                case d.FishType.BlazingTiger:
                                    n && n.hasOwnProperty("FlamingTiger_odds") && this.getUniqueFishData(l).setTargetNumber(n.FlamingTiger_odds), this.getUniqueFishData(l).bindFish(o);
                                    break;
                                case d.FishType.ArmorKingCrab:
                                    (S = {}).fish = o, S.endEvent = () => {
                                        this.recycleUniqueFishData(d.FishType.ArmorKingCrab)
                                    }, n.hasOwnProperty("ARMOR_KING_SPIDER_CRAB") && (S.hp = n.ARMOR_KING_SPIDER_CRAB.hp, S.level = n.ARMOR_KING_SPIDER_CRAB.level), this.getUniqueFishData(l).setCustomData(S);
                                    break;
                                case d.FishType.KingSquid:
                                    n.hasOwnProperty("GOLDEN_SQUID") && o.changeLevel(n.GOLDEN_SQUID.size);
                                    break;
                                case d.FishType.KingJellyFish:
                                    n.hasOwnProperty("GOLDEN_MEDUSA") && o.changeLevel(n.GOLDEN_MEDUSA.size);
                                    break;
                                case d.FishType.GeneralLobster:
                                    if (n && n.hasOwnProperty("upgrade_fish")) {
                                        let e = n.upgrade_fish;
                                        o.changeLevel(e.level)
                                    }
                            }
                        }
                    } else if (g > 1) {
                        let n = [];
                        for (let i = 0; i < g; i++) {
                            let a = o.default.SpawnFish(s);
                            if (a) {
                                a.setPosition(new cc.Vec2(-1920, -1680));
                                let s = a.getComponent(r.default);
                                s && (s.enabled = !0, s.Event_FishInit = this.OnFishInit.bind(this), s.Init(e, (p + i).toString(), I, r.BEHAVIOR_TYPE.SEEK, t), this.AddFishByID(s), n.push(s.node), s.Event_FishEnter = this.OnFishEnter.bind(this))
                            }
                        }
                        if (n.length > 0) {
                            let e = {
                                members: n,
                                sync: i
                            };
                            n[0].getComponent(r.default).InitSeek(_, C, e)
                        }
                    } else cc.warn("fish size error", e)
                })
            }
            SummonFish(e) {
                e.forEach(e => {
                    let t = e.type,
                        i = e.id,
                        s = this.fish_info[t].alive || 100,
                        a = o.default.SpawnFish(t);
                    if (!a) return;
                    let c = a.getComponent(r.default);
                    if (!c) return;
                    c.enabled = !0;
                    let h = {};
                    h[l.FishData.type] = t, h[l.FishData.id] = i, h[l.FishData.x] = e.x, h[l.FishData.y] = e.y, h[l.FishData.feature] = 0;
                    const u = this.fish_info[t].behavior_type || 0;
                    let m = e.extra_data,
                        p = d.default.getFishType(t);
                    switch (p) {
                        case d.FishType.RedDragon:
                            c.AliveTime = 6;
                            break;
                        case d.FishType.EternalFlamingDragon:
                            c.AliveTime = 7
                    }
                    c.Event_FishInit = this.OnFishInit.bind(this), c.Init(h, i.toString(), s, u, m), this.AddFishByID(c);
                    let f = 1;
                    switch (p) {
                        case d.FishType.RedDragon:
                            let e = {
                                time: 6e3,
                                callback: () => n.Instance.CheckSummonFish(c, p)
                            };
                            this.getUniqueFishData(p).setTimeEvent(e);
                            break;
                        case d.FishType.KingSquid:
                        case d.FishType.KingJellyFish:
                            m.hasOwnProperty("inherit") && (c.changeLevel(m.inherit.size), f = c.node.scale)
                    }
                    c.InitSummonBehavior(f)
                })
            }
            CheckSummonFish(e, t) {
                let i = {},
                    s = e.FreezeTime,
                    a = e.CurrentAliveTime;
                s > 0 ? (i.time = 1e3 * (s + a), i.callback = () => n.Instance.CheckSummonFish(e, t), this.getUniqueFishData(t).setTimeEvent(i)) : this.recycleUniqueFishData(t)
            }
            GenerateArmy(e, t, i = 0, n = 0, s = cc.Vec2.ZERO) {
                return a(this, void 0, void 0, function*() {
                    const a = yield C.LoadJson("FishHunter/Res/data/army/" + e), o = a.cnt, l = a.fishDataList, r = {};
                    let c = 0;
                    for (let e = 0; e < o; e++) {
                        if (!l.hasOwnProperty(e)) continue;
                        const i = l[e].fishtype,
                            n = .1 * Math.round(10 * l[e].delayTime),
                            s = n.toString().substr(0, 4);
                        let o = r[s];
                        null == o && (o = new Array);
                        let h = {};
                        h.id = (t + e + 1).toString(), h.type = i, h.fishPath = a.fishPath[l[e].pathIndex], h.delayTime = n, o.push(h), r[s] = o, n > c && (c = n)
                    }
                    r.max_sec = c, r.sec_count = n - 2, r.position = s, i = i || Math.floor(this.current_frame), this.army_queue[i] = r, this.army_key.push(i)
                })
            }
            OnFishEnter(e) {
                null != this.Event_FishEnter && this.Event_FishEnter(e)
            }
            OnFishInit(e) {
                null != this.Event_FishInit && this.Event_FishInit(e)
            }
            getNextFakeID() {
                return this.fakeFishSN--, this.fakeFishSN.toString()
            }
            CreateFakeFish(e, t, i, n = -1) {
                let s = o.default.SpawnFish(t);
                if (s) {
                    let a = s.getComponent(r.default);
                    if (a) {
                        if (n < 0) a.ID = e.toString(), a.Type = t, a.AliveTime = 50, a.InitParameter(), i && s.setPosition(i);
                        else {
                            a.enabled = !0;
                            let i = {};
                            i[l.FishData.type] = t, i[l.FishData.id] = e.toString(), i[l.FishData.o] = Math.floor(360 * Math.random()), i[l.FishData.x] = Math.floor(10 * Math.random()), i[l.FishData.y] = Math.floor(10 * Math.random()), i[l.FishData.feature] = 0;
                            const s = this.fish_info[t].behavior_type || 0;
                            a.Init(i, e, 50, s);
                            const o = this.fish_info.hasOwnProperty(t.toString()) ? this.fish_info[t].path_type : t;
                            if (s == r.BEHAVIOR_TYPE.SEEK) {
                                const e = i[l.FishData.path_index];
                                let t = {
                                    sync: n
                                };
                                a.InitSeek(o, e, t)
                            } else s == r.BEHAVIOR_TYPE.NORMAL && a.InitNormalBehavior(o, n)
                        }
                        return a.CanCollision = !1, this.AddFishByID(a), a
                    }
                }
                return null
            }
            ConvFishType(e, t) {
                switch (t) {
                    case 1:
                    case 2:
                        e = d.default.FeatureType[t][e]
                }
                return e
            }
            ToBaseType(e) {
                return e >= 200 ? e % 100 : e
            }
            FishRunOut(e, t, i) {
                this.FishSpeedUp(e, t, i), this.fish_manager.forEach(e => {
                    e.FishFadeOut(3, r.FishOutType.FISH_FORCE_LEAVE), e.FishRunOut(i)
                })
            }
            FishSpeedUp(e, t, i) {
                if (this.ai_seek && t && (this.ai_seek.SetSpeedScale(t, i), this.ai_is_speed_up = !0), this.ai_is_speed_up) {
                    if (i && (this.ai_speed_up_time = i), this.ai_speed_up_time <= 0) return this.ai_seek.ResetSpeedScale(), void(this.ai_is_speed_up = !1);
                    this.ai_speed_up_time -= e
                }
            }
            FishFadeOut() {
                this.fish_manager.forEach(e => {
                    e.FishFadeOut(3, r.FishOutType.FISH_FORCE_LEAVE)
                }), this.uniqueFishData && this.uniqueFishData.forEach(e => {
                    e && e.Hide(!0, !1)
                })
            }
            FishOut(e) {
                c.default.FishSystem && c.default.FishSystem.FishOut(e)
            }
            KillFish(e, t, i, n, s = !0, a = !1, o = (() => {}), l) {
                if (null == t || !t.node || !t.node.active) return;
                if (t.FishDie(e, s, l), i <= 0) return;
                null == s && (s = !0), null == a && (a = !1), null == o && (o = () => {});
                let r = 0,
                    c = d.FishType.Normal;
                switch (l && 1 == l.AllTypeNormal || (c = d.default.getFishType(t.Type)), c) {
                    case d.FishType.Normal:
                        this.winSide || (this.winSide = cc.v2(.5 * S.default.WinSize.width, .5 * S.default.WinSize.height));
                        let o = t.node.getPosition();
                        o.x > this.winSide.x - 50 ? o.x = this.winSide.x - 100 - 100 * Math.random() : o.x < 50 - this.winSide.x && (o.x = 100 - this.winSide.x + 100 * Math.random()), o.y > this.winSide.y - 50 ? o.y = this.winSide.y - 100 - 100 * Math.random() : o.y < 50 - this.winSide.y && (o.y = 100 - this.winSide.y + 100 * Math.random()), t.node.setPosition(o);
                        let h = l ? l.CoinEndPos : null;
                        l && 0 == l.showScore ? (u.default.Instance.DropCoin(t.node.getPosition(), e, !a, !1, i, h), r = 1) : r = u.default.Instance.NormalFishMoneyNum(t.node.getPosition(), i, n, e, s, !a, h);
                        break;
                    case d.FishType.Double:
                        r = u.default.Instance.DoubleFishMoneyNum(t, i, n, e, !a);
                        break;
                    case d.FishType.HumpbackWhale:
                        r = u.default.Instance.HumpbackWhaleAward(t, i, n, e, !a);
                        break;
                    case d.FishType.FireDragon:
                    case d.FishType.KingCrab:
                    case d.FishType.KingLacoste:
                    case d.FishType.KingAngle:
                    case d.FishType.KingTaco:
                    case d.FishType.Mermaid:
                    case d.FishType.DragonTurtle:
                    case d.FishType.Phoenix:
                    case d.FishType.IceDragon:
                    case d.FishType.ArmorKingCrab:
                        r = u.default.Instance.BossAward(t, i, n, e, !a);
                        break;
                    case d.FishType.WealthGod:
                        let m = l.level;
                        r = u.default.Instance.WealthGodAward(t, i, n, m, e, !a);
                        break;
                    case d.FishType.TreasureCrab:
                        r = u.default.Instance.TreasureCrabAward(t, i, n, e, !a)
                }
                o(r)
            }
            AddFishByID(e) {
                this.fish_manager.set(e.ID, e)
            }
            GetFishByID(e) {
                if ("string" == typeof e || "number" == typeof e) return e = "" + e, this.fish_manager.get(e); {
                    let t = [];
                    return e.forEach(e => {
                        e = "" + e;
                        let i = this.fish_manager.get(e);
                        i && t.push(i)
                    }), t
                }
            }
            IsEternalFish(e) {
                if ("string" == typeof e || "number" == typeof e) {
                    let t = this.GetFishByID(e);
                    if (t) switch (t.Type) {
                        case 111:
                        case 112:
                        case 113:
                        case 114:
                        case 115:
                        case 134:
                            return !0;
                        default:
                            return !1
                    }
                    return !1
                } {
                    let t = !1;
                    return e.forEach(e => {
                        let i = this.GetFishByID(e);
                        if (i) switch (i.Type) {
                            case 111:
                            case 112:
                            case 113:
                            case 114:
                            case 115:
                            case 134:
                                t = !0
                        }
                    }), t
                }
            }
            RemoveFishByID(e) {
                let t = this.GetFishByID(e);
                t && _.GameLogMainPlayer.pushFish(t), this.fish_manager.delete(e) || cc.warn("fish_id: %s not in fish_manager", e)
            }
            GetRangeAttackableID(e, t, i) {
                const n = t * t,
                    s = new Array;
                return this.fish_manager.forEach(t => {
                    if (s.length < i && t.CanCollision && !t.IsFeatureFish) {
                        let i = t.node.getPosition();
                        i.subSelf(e), i.magSqr() <= n && s.push(t.ID)
                    }
                }), s
            }
            InFishRange(e) {
                let t = this,
                    i = [];
                if (this.fish_manager.forEach((t, n) => {
                        t.CanCollision && !d.default.ClickAvoidFish(t.Type) && t.PointInColliderRange(e) && i.push(n)
                    }), i.length > 0) {
                    let e = d.default.getLockOder();
                    for (let n = 0; n < e.length; n++)
                        for (let s = 0; s < i.length; s++)
                            if (t.fish_manager.get(i[s]).Type == e[n]) return t.fish_manager.get(i[s])
                }
                return null
            }
            GetNextLockFish(e, t = "") {
                if (null != d.default.LockSetting) {
                    for (let e = 0; e < d.default.LockSetting.length; e++) {
                        let i = null;
                        if (this.fish_manager.forEach(n => {
                                null == i && n.ID != t && n.CanCollision && n.IsInScreen && n.Type == d.default.LockSetting[e] && null != n.GetLockLinkPoint(cc.Vec2.ZERO) && (i = n)
                            }), i) return i
                    }
                    return null
                }
                return null
            }
            CheckAnyFishInScreen() {
                let e = !1;
                return this.fish_manager.forEach(t => {
                    t.IsInScreen && (e = !0)
                }), e
            }
            UniqueFishOddsEvent(e, t) {
                this.getUniqueFishData(t).setTargetNumber(e)
            }
            ClearFish() {
                let e = this;
                this.fish_manager.forEach((t, i) => {
                    e.RemoveFishByID(i)
                })
            }
            Clear() {
                this.ClearFish(), this.fish_manager = null, this.fish_info = {}, this.army_key.length = 0, this.army_queue = {}, n.instance = null
            }
            SetUnhitableFishColor(e, t) {
                this.fish_manager.forEach(i => {
                    -1 != e.indexOf(i.Type) ? i.SetShapeColor(t) : i.SetShapeColor(cc.Color.WHITE)
                })
            }
            GetFishByType(e) {
                let t = null;
                return this.fish_manager.forEach(i => {
                    t || d.default.getFishType(i.Type) != e || (t = i)
                }), t
            }
            TestFish(e, t) {
                let i = parseInt(t);
                61 == i && (i = 61 + Math.floor(5 * Math.random())), 101 == i && (i = 101 + Math.floor(5 * Math.random())), n.testFishID = Math.floor(1e4 * Math.random()).toString();
                let s = this.fish_info[i].alive || 100,
                    a = o.default.SpawnFish(i);
                if (!a) return;
                let c = a.getComponent(r.default);
                if (!c) return;
                c.enabled = !0;
                let h = {};
                h[l.FishData.type] = i, h[l.FishData.id] = n.testFishID, h[l.FishData.o] = Math.floor(360 * Math.random()), h[l.FishData.x] = Math.floor(10 * Math.random()), h[l.FishData.y] = Math.floor(10 * Math.random()), h[l.FishData.feature] = 0;
                const u = this.fish_info[i].behavior_type || 0;
                c.Event_FishInit = this.OnFishInit.bind(this), c.Init(h, n.testFishID, s, u, {
                    init: 0,
                    turning: [0, 0, 0, 0, 0],
                    speed: [1.6, 2.2, 2.8, 3.4, 4],
                    level: [0]
                }), this.AddFishByID(c);
                const m = this.fish_info.hasOwnProperty(i.toString()) ? this.fish_info[i].path_type : i;
                if (u == r.BEHAVIOR_TYPE.SEEK) {
                    const e = h[l.FishData.path_index];
                    let t = {
                        sync: 0
                    };
                    c.InitSeek(m, e, t)
                } else u == r.BEHAVIOR_TYPE.NORMAL && c.InitNormalBehavior(m);
                let p = d.default.getFishType(i);
                switch (p) {
                    case d.FishType.ArmorKingCrab:
                        let e = {};
                        e.fish = c, e.endEvent = () => {
                            this.recycleUniqueFishData(d.FishType.ArmorKingCrab)
                        }, this.getUniqueFishData(p).setCustomData(e);
                        break;
                    case d.FishType.KingTaco:
                        f.default.Instance.BackgroundNow.BossEnter()
                }
            }
            IgnoreLowFPSType(e) {
                switch (e) {
                    case 129:
                        return !0;
                    default:
                        return !1
                }
            }
        };
        P.instance = null, P.testFishID = "1", P = n = s([I], P), i.default = P, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../../GameClient": "GameClient",
        "../../GameClient/JsonUtils": "JsonUtils",
        "../../GameClient/Player": "Player",
        "../../System/FishSystem": "FishSystem",
        "../Award/AwardManager": "AwardManager",
        "../Common/AISeek": "AISeek",
        "../Common/EnumFilter": "EnumFilter",
        "../Common/MultiLangSystem": "MultiLangSystem",
        "../Common/PreloadManager": "PreloadManager",
        "../Common/ResourceManager": "ResourceManager",
        "../Game/GameManager": "GameManager",
        "../Player/PopupWindowCtrl": "PopupWindowCtrl",
        "./BaseFish": "BaseFish",
        "./UniqueFishData": "UniqueFishData"
    }],
    FishMenuMgr: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "a3457rSZ2FFjrWsjf8Lx1qj", "FishMenuMgr");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("./FishMenu"),
            a = e("../Item/ItemButton"),
            o = e("../Item/ItemManager"),
            l = e("../../../../../LobbyCommon/Net/LobbyClient"),
            {
                ccclass: r,
                property: c
            } = cc._decorator;
        let h = class extends cc.Component {
            constructor() {
                super(...arguments), this.m_nodeRoot = null, this.m_nodeAllBtnList = null, this.m_nodeRingUp = null, this.m_nodeRingDown = null, this.m_btnOpen = null, this.m_btnClose = null, this.m_aryFishMenu = [], this.m_curFishMenu = null, this.m_aryShowBtnList = ["SummonButton", "FreezeButton"], this.m_aryCurBtnNodeList = [], this.TIME_ANIM = .35, this.itemBtnIndex = 0, this.NAME_REPEAT_EVENT_BTN = "Com_EventButton"
            }
            GetRootNode() {
                return this.m_nodeRoot
            }
            GetAllBtn() {
                return this.m_nodeAllBtnList
            }
            GetButtonNodeList() {
                return this.m_aryCurBtnNodeList
            }
            onLoad() {
                this.ClearMenu()
            }
            ShowMenu() {
                let e = 0,
                    t = this.m_aryShowBtnList;
                if ((e = t.length) <= 0) return void cc.error("menu button dataCount = 0");
                for (let s = 0; s < this.m_aryFishMenu.length; s++) {
                    let t = this.m_aryFishMenu[s];
                    if (t.GetAnchorCount() == e) {
                        this.m_curFishMenu = t;
                        break
                    }
                }
                if (null == this.m_curFishMenu) return void cc.error("can't find menuGroup, dataCount = " + e);
                this.m_nodeRoot.active = !0, this.m_curFishMenu.SetActiveRoot(!0);
                let i = 0;
                for (let s = 0; s < t.length; s++) {
                    cc.log("\u7522\u751fData", t[s]);
                    let e = t[s],
                        l = this.FindButton(e);
                    if (null != l) {
                        l.parent = this.m_curFishMenu.GetAnchor()[i], e != this.NAME_REPEAT_EVENT_BTN && (l.scale = 1), l.setPosition(cc.v2(0, 0)), i++;
                        var n = l.getComponent(a.default);
                        n && (o.default.Instance.AddItemBtn(this.itemBtnIndex, n), this.itemBtnIndex++), this.m_aryCurBtnNodeList[s] = l
                    }
                }
                this.MenuOpen()
            }
            ClearMenu() {
                for (let e = 0; e < this.m_aryFishMenu.length; e++) {
                    let t = this.m_aryFishMenu[e];
                    t.Clear(this.m_nodeAllBtnList), t.SetActiveRoot(!1)
                }
                this.m_nodeRoot.active = !1, this.itemBtnIndex = 0, this.m_aryCurBtnNodeList = []
            }
            FindButton(e) {
                if (e == this.NAME_REPEAT_EVENT_BTN) return null;
                for (let t = 0; t < this.m_nodeAllBtnList.children.length; t++)
                    if (e == this.m_nodeAllBtnList.children[t].name) return this.m_nodeAllBtnList.children[t];
                return null
            }
            CheckFishMission() {
                let e = !1;
                if (null != l.LobbyClient.Instance.m_CommonEventInfo_900004) try {
                    let i = JSON.parse(l.LobbyClient.Instance.m_CommonEventInfo_900004);
                    if (i.hasOwnProperty("Enable") && i.Enable && i.hasOwnProperty("QuestList") && i.QuestList.length > 0) {
                        let t = i.QuestList;
                        if (t.lengt > 0)
                            for (let i = 0; i < t.length; i++)
                                if (200 == t[i].TitleType) {
                                    e = !0;
                                    break
                                }
                    }
                } catch (t) {
                    return cc.error("parseMisInfo"), !1
                }
                return e
            }
            MenuShowEffect() {
                let e = cc.sequence(cc.delayTime(.5), cc.callFunc(() => {
                    this.callMenuClose(() => {
                        setTimeout(() => {
                            this.MenuOpen()
                        }, 500)
                    })
                }));
                this.node.runAction(e)
            }
            callMenuClose(e = null) {
                this.m_btnClose.node.active = !1, this.m_btnOpen.node.active = !0, this.ResetRingState(!1);
                let t = cc.spawn(cc.scaleTo(this.TIME_ANIM, 0).easing(cc.easeBackIn()), cc.fadeTo(this.TIME_ANIM, 120)),
                    i = cc.spawn(cc.scaleTo(this.TIME_ANIM, 0).easing(cc.easeBackIn()), cc.fadeTo(this.TIME_ANIM, 120));
                this.m_nodeRingUp.runAction(t), this.m_nodeRingDown.runAction(i), this.m_curFishMenu && this.m_curFishMenu.HideAnim(this.TIME_ANIM, e)
            }
            MenuOpen() {
                this.m_btnClose.node.active = !0, this.m_btnOpen.node.active = !1, this.ResetRingState(!0);
                let e = cc.spawn(cc.scaleTo(this.TIME_ANIM, 1, 1).easing(cc.easeBackOut()), cc.fadeIn(this.TIME_ANIM)),
                    t = cc.spawn(cc.scaleTo(this.TIME_ANIM, 1, -1).easing(cc.easeBackOut()), cc.fadeIn(this.TIME_ANIM));
                this.m_nodeRingUp.runAction(e), this.m_nodeRingDown.runAction(t), this.m_curFishMenu && this.m_curFishMenu.ShowAnim(this.TIME_ANIM)
            }
            MenuClose() {
                this.callMenuClose()
            }
            ResetRingState(e) {
                this.m_nodeRingUp.stopAllActions(), this.m_nodeRingDown.stopAllActions(), e ? (this.m_nodeRingUp.setScale(0), this.m_nodeRingUp.opacity = 120, this.m_nodeRingDown.setScale(0), this.m_nodeRingDown.opacity = 120) : (this.m_nodeRingUp.setScale(1), this.m_nodeRingUp.opacity = 255, this.m_nodeRingDown.setScale(1, -1), this.m_nodeRingDown.opacity = 255)
            }
            GetCurAnchor() {
                return this.m_curFishMenu.GetAnchor()
            }
        };
        n([c(cc.Node)], h.prototype, "m_nodeRoot", void 0), n([c(cc.Node)], h.prototype, "m_nodeAllBtnList", void 0), n([c(cc.Node)], h.prototype, "m_nodeRingUp", void 0), n([c(cc.Node)], h.prototype, "m_nodeRingDown", void 0), n([c(cc.Button)], h.prototype, "m_btnOpen", void 0), n([c(cc.Button)], h.prototype, "m_btnClose", void 0), n([c([s.default])], h.prototype, "m_aryFishMenu", void 0), h = n([r], h), i.default = h, cc._RF.pop()
    }, {
        "../../../../../LobbyCommon/Net/LobbyClient": void 0,
        "../Item/ItemButton": "ItemButton",
        "../Item/ItemManager": "ItemManager",
        "./FishMenu": "FishMenu"
    }],
    FishMenu: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "07147wULiZEaLb/xA9uWXBo", "FishMenu");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const {
            ccclass: s,
            property: a
        } = cc._decorator;
        let o = class extends cc.Component {
            constructor() {
                super(...arguments), this.m_nodeRoot = null, this.m_aryAnchor = []
            }
            GetAnchorCount() {
                return this.m_aryAnchor.length
            }
            GetAnchor() {
                return this.m_aryAnchor
            }
            SetActiveRoot(e) {
                this.m_nodeRoot.active = e
            }
            Clear(e) {
                for (let t = 0; t < this.m_aryAnchor.length; t++) this.m_aryAnchor[t].childrenCount > 0 && (this.m_aryAnchor[t].children[0].parent = e)
            }
            ShowAnim(e) {
                this.m_nodeRoot.setScale(0), this.m_nodeRoot.opacity = 0;
                let t = cc.sequence(cc.delayTime(.1), cc.spawn(cc.scaleTo(e, 1).easing(cc.easeBackOut()), cc.fadeIn(e)));
                this.m_nodeRoot.runAction(t)
            }
            HideAnim(e, t = null) {
                this.m_nodeRoot.setScale(1), this.m_nodeRoot.opacity = 255;
                let i = cc.sequence(cc.delayTime(.1), cc.spawn(cc.scaleTo(e, 0).easing(cc.easeBackIn()), cc.fadeOut(e)), cc.callFunc(() => {
                    null != t && t()
                }));
                this.m_nodeRoot.runAction(i)
            }
        };
        n([a(cc.Node)], o.prototype, "m_nodeRoot", void 0), n([a([cc.Node])], o.prototype, "m_aryAnchor", void 0), o = n([s], o), i.default = o, cc._RF.pop()
    }, {}],
    FishMissionData: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "ecfc6RaKwpKNLABn7zA73aU", "FishMissionData"), Object.defineProperty(i, "__esModule", {
                value: !0
            }), i.FishQustObjectiveType = i.FishUserQuestDataStatus = i.FishMissionAward = i.FishMissionData = void 0, i.FishMissionData = class {
                constructor() {
                    this.Status = -1
                }
            }, i.FishMissionAward = class {
                constructor() {
                    this.ItemID = [], this.ItemAmount = []
                }
            },
            function(e) {
                e[e.NONE = -1] = "NONE", e[e.QUEST_NOT_DONE = 0] = "QUEST_NOT_DONE", e[e.AWARD_AVAILAALDE = 1] = "AWARD_AVAILAALDE", e[e.AWARD_CLAIMED = 2] = "AWARD_CLAIMED"
            }(i.FishUserQuestDataStatus || (i.FishUserQuestDataStatus = {})),
            function(e) {
                e[e.NONE = -1] = "NONE", e[e.GET_ANY_FISH = 4] = "GET_ANY_FISH", e[e.GET_FISH = 5] = "GET_FISH", e[e.USE_ANY_ITEM = 6] = "USE_ANY_ITEM", e[e.ANY_CRAB = 7] = "ANY_CRAB"
            }(i.FishQustObjectiveType || (i.FishQustObjectiveType = {})), cc._RF.pop()
    }, {}],
    FishSystem: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "aea1fcwP6RDN676WQqzX6re", "FishSystem"), Object.defineProperty(i, "__esModule", {
            value: !0
        }), i.FishSystem = i.FishData = void 0;
        const n = e("./baseSystem");
        var s = "f0",
            a = "f1",
            o = "f2",
            l = "f4",
            r = "f5",
            c = "f6",
            h = "f7";
        i.FishData = {
            id: "1",
            type: "2",
            x: "3",
            y: "4",
            o: "5",
            feature: "6",
            position: "7",
            size: "8",
            frame: "9",
            script_type: "10",
            fish_group: "11",
            fish: "12",
            current: "13",
            scene: "14",
            parameter: "15",
            king_status: "16",
            path: "17",
            summon: "18",
            path_index: "19",
            ai_seed: "20",
            treasure_win: "21",
            treasure_level: "22",
            level: "level"
        }, i.FishSystem = class extends n.default {
            constructor(e) {
                super(e, "fish"), this.FishScriptEvent = null, this.CreateFishEvent = null, this.ScriptTimeEvent = null, this.ScriptEvent = null, this.FeatureEvent = null, this.RegisterCmdCallback(l, this.onFishScript.bind(this)), this.RegisterCmdCallback(o, this.onFishEvent.bind(this)), this.RegisterCmdCallback(a, this.onCreateFish.bind(this)), this.RegisterCmdCallback(r, this.onScriptTime.bind(this)), this.RegisterCmdCallback(c, this.onScriptEvent.bind(this)), this.RegisterCmdCallback(h, this.onFeatureEvent.bind(this))
            }
            GetFishScript() {
                this.SendCmd(l)
            }
            onFishScript(e, t, n, s, a, o) {
                if (cc.log("[onFishScript]data: " + JSON.stringify(t)), this.FishScriptEvent) {
                    const e = t[i.FishData.current],
                        n = t[i.FishData.scene],
                        s = t[i.FishData.fish_group],
                        a = t.timestamp,
                        o = t[i.FishData.parameter];
                    let l = {};
                    t.hasOwnProperty("Vampire_odds") && (l.Vampire_odds = t.Vampire_odds), t.hasOwnProperty("LuckyBuddha_odds") && (l.LuckyBuddha_odds = t.LuckyBuddha_odds), t.hasOwnProperty("treasure_score") && (l.treasure_score = t.treasure_score), t.hasOwnProperty("treasure_level") && (l.treasure_level = t.treasure_level), t.hasOwnProperty("large_capture_score") && (l.large_capture_score = t.large_capture_score), t.hasOwnProperty("medium_capture_score") && (l.medium_capture_score = t.medium_capture_score), t.hasOwnProperty("small_capture_score") && (l.small_capture_score = t.small_capture_score), t.hasOwnProperty("submarine_occupy_data_list") && (l.submarine_info_list = t.submarine_occupy_data_list), t.hasOwnProperty("CircusClown_odds") && (l.CircusClown_odds = t.CircusClown_odds), t.hasOwnProperty("FlamingTiger_odds") && (l.FlamingTiger_odds = t.FlamingTiger_odds), t.hasOwnProperty("upgrade_fish") && (l.upgrade_fish = t.upgrade_fish), t.hasOwnProperty("ARMOR_KING_SPIDER_CRAB") && (l.ARMOR_KING_SPIDER_CRAB = t.ARMOR_KING_SPIDER_CRAB), this.FishScriptEvent(e, n, s, a, o, l)
                }
            }
            onCreateFish(e, t, n, s, a, o) {
                if (this.CreateFishEvent) {
                    const e = t[i.FishData.script_type],
                        n = t.timestamp,
                        s = t[i.FishData.fish_group],
                        a = t[i.FishData.parameter];
                    let o = {};
                    t.hasOwnProperty("Vampire_odds") && (o.Vampire_odds = t.Vampire_odds), t.hasOwnProperty("LuckyBuddha_odds") && (o.LuckyBuddha_odds = t.LuckyBuddha_odds), t.hasOwnProperty("treasure_score") && (o.treasure_score = t.treasure_score), t.hasOwnProperty("treasure_level") && (o.treasure_level = t.treasure_level), t.hasOwnProperty("capture_score") && (o.capture_score = t.capture_score), t.hasOwnProperty("occupy_data") && (o.occupy_data = t.occupy_data), t.hasOwnProperty("CircusClown_odds") && (o.CircusClown_odds = t.CircusClown_odds), t.hasOwnProperty("FlamingTiger_odds") && (o.FlamingTiger_odds = t.FlamingTiger_odds), t.hasOwnProperty("upgrade_fish") && (o.upgrade_fish = t.upgrade_fish), t.hasOwnProperty("GOLDEN_SQUID") && (o.GOLDEN_SQUID = t.GOLDEN_SQUID), t.hasOwnProperty("GOLDEN_MEDUSA") && (o.GOLDEN_MEDUSA = t.GOLDEN_MEDUSA), this.CreateFishEvent(e, s, n, a, o)
                }
            }
            FishOut(e) {
                let t = {};
                t[i.FishData.id] = e, this.SendCmd(s, t)
            }
            SendFishScript() {
                this.SendCmd(r, null)
            }
            onScriptTime(e, t, n, s, a, o) {
                if (this.ScriptTimeEvent) {
                    const e = t[i.FishData.id],
                        n = t[i.FishData.current],
                        s = t.timestamp;
                    this.ScriptTimeEvent(e, n, s)
                }
            }
            onScriptEvent(e, t, n, s, a, o) {
                if (this.ScriptEvent) {
                    const e = t[i.FishData.type];
                    this.ScriptEvent(e)
                }
            }
            onFeatureEvent(e, t, i, n, s, a) {
                this.FeatureEvent && this.FeatureEvent(t)
            }
            onFishEvent(e, t, i, n, s) {}
        }, cc._RF.pop()
    }, {
        "./baseSystem": "baseSystem"
    }],
    FlameStormBullet: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "b3ac9cusFBGo7zKTPztKTM3", "FlameStormBullet");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("./BaseBullet"),
            a = e("../Player/PlayerManager"),
            o = e("../Common/ResourceManager"),
            l = e("./WeaponManager"),
            r = e("../../GameClient"),
            {
                ccclass: c,
                property: h
            } = cc._decorator;
        let d = class extends s.default {
            onCollisionEnter(e, t) {
                if (!this.canCollision) return;
                let i = e.getComponent("BaseFish");
                if (!i)
                    for (var n = 0, s = e.node.parent; n < 5 && s && !(i = s.getComponent("BaseFish"));) s = s.parent, n++;
                i && i.CanCollisionByMainSeat(a.PlayerManager.isMainSeat(this.seat)) && !i.IsFeatureFish && (this.SendBlast(Number(i.ID)), a.PlayerManager.isMainSeat(this.seat) && i.OnHitFish(), this.canCollision = !1)
            }
            SendBlast(e) {
                this.CreateExplodeEffect(this.node.getPosition());
                const t = this.bulletID,
                    i = this.seat;
                this.Recycle(), l.default.Instance.bulletCount[i]--, a.PlayerManager.isMainSeat(i) && r.default.SkillSystem.FlameStormBlast(t, i, e)
            }
            CreateExplodeEffect(e) {
                let t = o.default.SpawnEffect("FlameStorm_ExplodeEffect", a.PlayerManager.isMainSeat(this.seat));
                t && (t.setPosition(e), t.angle = this.node.angle - 90)
            }
        };
        d = n([c], d), i.default = d, cc._RF.pop()
    }, {
        "../../GameClient": "GameClient",
        "../Common/ResourceManager": "ResourceManager",
        "../Player/PlayerManager": "PlayerManager",
        "./BaseBullet": "BaseBullet",
        "./WeaponManager": "WeaponManager"
    }],
    FlameStormWeapon: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "c90adwZQ2pMLbGOgn5YgMY0", "FlameStormWeapon");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("./BaseWeapon"),
            a = e("./WeaponManager"),
            {
                ccclass: o
            } = cc._decorator;
        let l = class extends s.default {
            constructor() {
                super(...arguments), this.lastShootTime = (new Date).getTime(), this.shootGap = 100, this.autoShootGap = 170
            }
            Init(e) {
                this.playerSeat = e, this.isGunReady = !1, this.node.angle = e < 2 ? 0 : 180, this.gunNode.active = !1, this.Type = a.WeaponType.FlameStorm
            }
            ChangeGunAnim() {
                this.gunNode.active = !0, this.gunNode.scale = 1.5, this.gunNode.runAction(cc.scaleTo(.5, 1))
            }
            ShootState(e) {
                if (!this.isGunReady) return 0;
                let t = (new Date).getTime() - this.lastShootTime;
                return t < this.shootGap ? 0 : !e && t < this.autoShootGap ? 0 : 1
            }
            ShootFunction(e) {
                super.ShootFunction(e), this.lastShootTime = (new Date).getTime()
            }
        };
        l = n([o], l), i.default = l, cc._RF.pop()
    }, {
        "./BaseWeapon": "BaseWeapon",
        "./WeaponManager": "WeaponManager"
    }],
    FlameStorm_ScoreUI: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "4d9d7BUtD5Mnb4HrvmkGqRa", "FlameStorm_ScoreUI");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("./BaseSkillScoreUI"),
            {
                ccclass: a,
                property: o
            } = cc._decorator;
        let l = class extends s.default {
            constructor() {
                super(...arguments), this.multiNode = null, this.multiBG = null, this.multiText = null, this.timeText = null
            }
            Init(e) {
                super.Init(e), this.multiText.string = "x1", this.multiBG.color = cc.Color.BLUE, this.multiNode.runAction(cc.repeatForever(cc.sequence(cc.scaleTo(.5, .65), cc.scaleTo(.5, .6))))
            }
            SetMultiText(e) {
                switch (this.multiText.string = "x" + e.toString(), e) {
                    case 3:
                        this.multiBG.color = cc.Color.CYAN, this.multiNode.stopAllActions(), this.multiNode.runAction(cc.repeatForever(cc.sequence(cc.scaleTo(.5, .7), cc.scaleTo(.5, .6))));
                        break;
                    case 5:
                        this.multiBG.color = cc.Color.RED, this.multiNode.stopAllActions(), this.multiNode.runAction(cc.repeatForever(cc.sequence(cc.scaleTo(.5, .75), cc.scaleTo(.5, .6))));
                        break;
                    case 7:
                        this.multiBG.color = cc.Color.MAGENTA, this.multiNode.stopAllActions(), this.multiNode.runAction(cc.repeatForever(cc.sequence(cc.scaleTo(.5, .85), cc.scaleTo(.5, .7))));
                        break;
                    case 9:
                        this.multiBG.color = cc.Color.GREEN, this.multiNode.stopAllActions(), this.multiNode.runAction(cc.repeatForever(cc.sequence(cc.scaleTo(.5, 1), cc.scaleTo(.5, .8))))
                }
            }
            SetTimeText(e) {
                this.timeText && (e < .01 && (e = 0), this.timeText.string = (e < 10 ? "0" : "") + e.toFixed(2))
            }
        };
        n([o(cc.Node)], l.prototype, "multiNode", void 0), n([o(cc.Node)], l.prototype, "multiBG", void 0), n([o(cc.Label)], l.prototype, "multiText", void 0), n([o(cc.Label)], l.prototype, "timeText", void 0), l = n([a], l), i.default = l, cc._RF.pop()
    }, {
        "./BaseSkillScoreUI": "BaseSkillScoreUI"
    }],
    FreezeEffect: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "18622IgEsxGSb9ep1W8WoZO", "FreezeEffect");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("../Common/ResourceManager"),
            {
                ccclass: a,
                property: o
            } = cc._decorator;
        let l = class extends cc.Component {
            constructor() {
                super(...arguments), this.anim = null, this.part = null, this.scale_range = 1, this.position_range = 250
            }
            onLoad() {
                this.anim.on("finished", this.finished.bind(this))
            }
            Play() {
                this.node.setPosition(this.node.x + (Math.random() - .5) * this.position_range, this.node.y + (Math.random() - .5) * this.position_range), this.node.setScale((.5 + Math.random()) * this.scale_range), this.node.angle = 359 * Math.random(), this.node.runAction(cc.sequence(cc.delayTime(.25 * Math.random()), cc.callFunc(() => {
                    this.anim.play("SnowFlake"), this.part.node.active = !0, this.part.resetSystem()
                })))
            }
            finished() {
                this.part.node.active = !1, this.part.stopSystem(), s.default.DespawnEffect("_effect", this.node)
            }
        };
        n([o(cc.Animation)], l.prototype, "anim", void 0), n([o(cc.ParticleSystem)], l.prototype, "part", void 0), l = n([a], l), i.default = l, cc._RF.pop()
    }, {
        "../Common/ResourceManager": "ResourceManager"
    }],
    GDGameClient: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "7c419zwQP9FN6wHshpVbw4A", "GDGameClient");
        var n, s = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            a = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const o = e("./MainGame/Common/PreloadManager"),
            l = e("./MainGame/Common/MultiLangSystem"),
            r = e("./MainGame/Common/ResourceManager"),
            c = e("./MainGame/Player/PlayerManager"),
            h = e("./MainGame/Weapon/WeaponManager"),
            d = e("./MainGame/Fish/FishManager"),
            u = e("./MainGame/Game/GameManager"),
            m = e("./MainGame/Item/ItemManager"),
            p = e("./MainGame/Skill/BaseSkill"),
            f = e("./MainGame/Common/EnumFilter"),
            S = e("./Event/EventPuzzleDropEggMgr"),
            g = e("./MainGame/Player/PopupWindowCtrl"),
            y = e("../../../FishCommon/Script/FishUIMgr"),
            _ = e("../../../GameCommon/CommonRoot/Script/CommonRoot"),
            C = e("../../../LobbyCommon/Net/LobbyClient"),
            I = e("../../../LobbyCommon/PopupMessage/Script/PopupMsgMgr"),
            P = e("../../../LobbyCommon/Connect/Script/ConnectPanelMgr"),
            v = e("../../../LobbyCommon/Loading/Script/LoadingMgr"),
            b = e("../../../LobbyCommon/Component/AudioMgr"),
            M = e("../../../FishCommon/Script/SSCanvasHandler"),
            E = e("../../../LobbyCommon/EventModule/FishOceanHeart/Script/FishOceanHeartMgr"),
            F = e("../../../LobbyCommon/EventModule/FishPuzzleEgg/Script/FishPuzzleEggMgr"),
            T = e("../../../LobbyCommon/FakeScoreBox/Script/FakeScoreBoxCtrl"),
            A = e("../../../LobbyCommon/TopBar/Script/TopbarMgr"),
            w = e("../../../LobbyCommon/LobbyCommon"),
            k = e("../../../LobbyCommon/Helper/EventSystem"),
            L = e("../../../LobbyCommon/Skin/Skin"),
            R = e("../../../LobbyCommon/Net/ClickLog"),
            O = e("./GameClient/Player"),
            B = e("./GameClient"),
            D = e("./GameClient/ErrorHandler"),
            G = e("./GameClient/Login"),
            N = e("./GameClient/ErrorCode"),
            W = e("../../../LobbyCommon/EventModule/FishPuzzleEgg/Script/FishPuzzleEggData"),
            U = e("../../../LobbyCommon/Net/ClickLogEnum");
        var x;
        (function(e) {
            e[e.NONE = -1] = "NONE", e[e.SEND_CMD = 0] = "SEND_CMD", e[e.GET_RECV = 1] = "GET_RECV"
        })(x || (x = {}));
        const {
            ccclass: H,
            property: j
        } = cc._decorator;
        let V = n = class extends cc.Component {
            constructor() {
                super(...arguments), this.GameName = "", this.title = "", this.CommonRootPrefab = null, this.FishMenuRootPrefab = null, this.PopupWindowPrefab = null, this.BarRoot = null, this.HasJP = !1, this.HasBundle = !1, this.IsWaitInitJpValue = !0, this.DownloadBundleFinished = !0, this.gameNetWork = null, this.arkSocketClient = null, this.topBar = null, this.JPBarRoot = null, this.isReturnToLobby = !1, this.isStopUpdate = !1, this.m_EventInfoState = x.NONE, this.m_tempQuestData = void 0, this.m_isEnableMission = !1, this.m_isEnableItem = !1, this.m_strEventTime = "", this.m_iSendQuestNum = 2, this.m_iRecQuestNum = 0, this.m_bOceanHeart = !1, this.m_bPuzzleButNoThisGame = !1, this.waitPuzzleCollectCount = 0, this.puzzleQuestCollectPromiseResolve = null, this.m_tempPlayerInfoData = {}, this.m_CurBet = 1, this.m_CurBetScale = 1, this.m_CurShootPerSecond = 6, this.m_CurCostPerSecond = 0, this.GetPromEvent = null, this.RELOAD_EXPIRE_TIME = 30, this.m_OceanHeartMgr = null, this.m_FishPuzzleEggMgr = null, this.RecordingSkillID = null, this.cheatBtn = null
            }
            static get Instance() {
                return this.instance ? this.instance : (this.instance = cc.find("GDGameClient").getComponent(n), this.instance)
            }
            get FishCommonRoot() {
                return _.CommonRoot.Instance ? _.CommonRoot.Instance : null
            }
            GetCurCostPerSecond() {
                return this.m_CurCostPerSecond
            }
            onLoad() {
                return a(this, void 0, void 0, function*() {
                    n.instance = this, cc.view.resizeWithBrowserSize(!0), cc.view.setDesignResolutionSize(1136, 640, cc.ResolutionPolicy.SHOW_ALL), null != this.FishMenuRootPrefab && B.default.Client.InitFishMenu(this.FishMenuRootPrefab, this.BarRoot);
                    let e = null;
                    null != this.BarRoot && null != this.CommonRootPrefab && (cc.instantiate(this.CommonRootPrefab).parent = this.BarRoot, B.default.Client.InitFishUIMgr()), this.topBar = _.CommonRoot.Instance.GetTopBarMgr, SS.Common.GameEnvironment.GameSetting && this.topBar.SetDisableMenuBtn(SS.Common.GameEnvironment.GameSetting.DisableMenuBtn), this.topBar.SetTopBarStatus(A.TopbarStatus.InGameNormal), this.IsWaitInitJpValue = this.HasJP, this.HasBundle && (this.DownloadBundleFinished = !1, k.EventSystem.Event(k.FishHunter.DownloadBundleFinished).Insert(this.OnDownloadBundleFinished, this)), this.GameName = SS.Common.GameEnvironment.CurrentGameNow, this.title = SS.Common.GameEnvironment.CurrentGameNow, this.InitArkClient()
                })
            }
            start() {
                o.default.Instance.onReleaseSceneEvent.AddListener(this.Clear.bind(this))
            }
            update() {
                if (!this.isStopUpdate)
                    if (C.LobbyClient.Instance && C.LobbyClient.Instance.GetLobbySystem && C.LobbyClient.Instance.GetLobbySystem.m_isPosKick) C.LobbyClient.Instance.GetLobbySystem.m_isPosKick = !1, this.isStopUpdate = !0, this.NetworkClear(), I.PopupMsgMgr.Instance.ShowPopMsg(I.PopupPriority.Critical, "S171", this.title, "PosKick");
                    else if (C.LobbyClient.Instance && C.LobbyClient.Instance.GetLobbySystem && -1 != C.LobbyClient.Instance.GetLobbySystem.m_ServerToIdleWaitMin) {
                    let e = C.LobbyClient.Instance.GetLobbySystem.m_ServerToIdleWaitMin;
                    C.LobbyClient.Instance.GetLobbySystem.m_ServerToIdleWaitMin = -1;
                    let t = this;
                    clearTimeout(t.shutdownTimeoutID), console.log(" wait " + e + "min for server to idle"), t.shutdownTimeoutID = setTimeout(() => {
                        t.isStopUpdate = !0, this.NetworkClear(), I.PopupMsgMgr.Instance.ShowPopMsg(I.PopupPriority.Critical, "S170", this.title, "Server Maintain", null)
                    }, 6e4 * e)
                } else C.LobbyClient.Instance.IsSocketErrorClose && (C.LobbyClient.Instance.IsSocketErrorClose = !1, this.isStopUpdate = !0, this.NetworkClear(), this.isReturnToLobby || this.SocketErrorClose())
            }
            SocketErrorClose() {
                I.PopupMsgMgr.Instance.ShowPopMsg(I.PopupPriority.Disconnected, "C14", this.title, "The internet was diconnected.", () => {
                    let e, t;
                    P.ConnectPanelMgr.Instance.ShowConnectPanel(), e = SS.Common.GameEnvironment.UserID, t = SS.Common.GameEnvironment.UserPW, C.LobbyClient.Instance.DoLogin(window.location.protocol + "//" + SS.Common.GameEnvironment.ProjectSetting.Modules.Lobby.ServerHOST, e, t, G.DoLoginSuccess, G.DoLoginFail)
                })
            }
            InitArkClient() {
                Object.assign({}, C.LobbyClient.Instance.GetUserClient.GetPinClient), window.location.protocol, SS.Common.GameEnvironment.ProjectSetting.Modules[this.GameName].ServerHOST, l.default.Init("en-us", this.StartPreload.bind(this));
                let e = Object.assign({}, C.LobbyClient.Instance.GetUserClient.GetPinClient),
                    t = window.location.protocol + "//" + SS.Common.GameEnvironment.ProjectSetting.Modules[this.GameName].ServerHOST;
                this.gameNetWork = new SS.Network.GameNetwork(e, this.GameName, t, "kiosk"), this.gameNetWork.SendCmdButNotRetry("KioskUrl", {}, this.onGetKioskUrl.bind(this), e => {
                    D.ErrorHandler("C16", e.toString())
                })
            }
            StartPreload() {
                null != B.default.FishMenuMgr && B.default.FishMenuMgr.ShowMenu(), o.default.Instance.PreloadGameCommonRes(), o.default.Instance.LoadMainGame("normal", () => {
                    r.default.Instance.Init()
                })
            }
            onGetKioskUrl(e, t) {
                if (e == ArkSDK.HttpResult.OK && 0 == t.cmd_data.status) {
                    let e, i = t.cmd_data,
                        n = i.url,
                        s = i.surl,
                        a = !0;
                    s && "" != s ? e = s.split(":") : (e = n.split(":"), a = !1), this.arkSocketClient = new ArkSDK.ArkSocketClient(C.LobbyClient.Instance.GetUserClient.GetPinClient, 1024, 5), this.arkSocketClient.m_auth_exdata = {
                        kiosk_id: SS.Network.LoginModel.LoginInfo.kiosk_id,
                        device_id: SS.Network.LoginModel.LoginInfo.device_id,
                        machine_id: SS.Network.LoginModel.LoginInfo.machine_id,
                        is_mobile: !0
                    }, this.arkSocketClient.ConnectSocket(e[0], Number(e[1]), a, this.onOpen.bind(this), this.onMsg.bind(this), this.onClose.bind(this), this.onError.bind(this))
                } else this.ShowErrorMsg(t)
            }
            onOpen(e) {
                this.InitSocketSystem(this.arkSocketClient);
                let t = {};
                t.kiosk_id = SS.Network.LoginModel.LoginInfo.kiosk_id, t.allow_state = ArkSDK.ArkClient.allowState, t.device = 1, this.arkSocketClient.SendCmd("kiosk", "PlayerJoin", t, this.onPlayerJoin.bind(this))
            }
            onPlayerJoin(e, t) {
                t.data.hasOwnProperty("maxGate") && (c.PlayerManager.Instance.MaxBalance = t.data.maxGate), t.data.hasOwnProperty("itemEnable") && (this.m_isEnableItem = t.data.itemEnable), t.data.hasOwnProperty("commonInfo") && (this.m_strEventTime = t.data.commonInfo), t.data.hasOwnProperty("cannonEnable") && h.default.Instance.InitWeaponList(t.data.cannonEnable), c.PlayerManager.Instance.m_aryWeaponLvData = t.data.CannonBetRange, this.QuickStart(), !this.m_isEnableItem && B.default.FishMenuMgr && (B.default.FishMenuMgr.GetRootNode().active = !1)
            }
            onMsg(e, t) {}
            onClose(e) {
                this.NetworkClear(), this.isReturnToLobby || this.CallOnError("C33", "SocketClose")
            }
            onError(e, t) {
                this.NetworkClear(), t ? this.CallOnError("C32", "SocketError :" + t) : this.CallOnError("C32", "SocketError")
            }
            InitSocketSystem(e) {
                B.default.Client.InitSocketSystem(e), B.default.FishMissionSystem.EVENT_ERROR_RETURN_LOBBY = this.MissionDataError.bind(this), this.RegisterEvent()
            }
            QuickStart() {
                return a(this, void 0, void 0, function*() {
                    for (; !r.default.Instance.isLoadDone;) yield new Promise(e => {
                        setTimeout(e, 500)
                    });
                    let e = {
                        table_id: 0,
                        seat_id: 0
                    };
                    e.kiosk_id = SS.Network.LoginModel.LoginInfo.kiosk_id, e.quick_start = !0, this.arkSocketClient.SendCmd("kiosk", "JoinTable", e, this.onTableJoinCallback.bind(this))
                })
            }
            onTableJoinCallback(e, t) {
                if (e == ArkSDK.HttpResult.OK)
                    if (t.data && 0 == t.data.result) {
                        return;
                        if (self == top) return;
                        C.LobbyClient.Instance.OnGameLoadingOK()
                    } else this.NetworkClear(), t.data ? this.CallOnError("S" + t.data.result, "ReceiveServerError") : this.CallOnError("C31", "ReceiveServerError");
                else this.ShowErrorMsg(t)
            }
            RegisterEvent() {
                B.default.GameSystem.TableJoinEvent = this.onTableJoin.bind(this), B.default.GameSystem.InitGameEvent = this.onInitGame.bind(this), B.default.GameSystem.KickOutEvent = this.onKickOut.bind(this), B.default.KioskSystem.UpdateKioskSetting = this.onBroadCastSetting.bind(this), B.default.PlayerSystem.InitPlayerEvent = c.PlayerManager.Instance.onInitPlayer.bind(c.PlayerManager.Instance), B.default.PlayerSystem.UpdatePlayerEvent = c.PlayerManager.Instance.onInitOtherPlayer.bind(c.PlayerManager.Instance), B.default.GameSystem.PlayerLeaveEvent = c.PlayerManager.Instance.onPlayerLeave.bind(c.PlayerManager.Instance), B.default.PlayerSystem.UpdateBetEvent = c.PlayerManager.Instance.onUpdateBet.bind(c.PlayerManager.Instance), B.default.PlayerSystem.ReflashEvent = c.PlayerManager.Instance.onReflash.bind(c.PlayerManager.Instance), B.default.PlayerSystem.FishQuestCheckEvent = this.FishQuestCheckEvent.bind(this), B.default.PlayerSystem.FishPuzzleQuestCheckEvent = this.FishPuzzleQuestCheckEvent.bind(this), B.default.WeaponSystem.ShootEvent = h.default.Instance.OtherPlayerShoot.bind(h.default.Instance), B.default.WeaponSystem.BlastEvent = h.default.Instance.HitFishRequestCallback.bind(h.default.Instance), B.default.WeaponSystem.BlastBetEvent = c.PlayerManager.Instance.CheckBetList.bind(c.PlayerManager.Instance), B.default.WeaponSystem.UniqueOddsEvent = d.default.Instance.UniqueFishOddsEvent.bind(d.default.Instance), B.default.FishSystem.FishScriptEvent = d.default.Instance.onFishScript.bind(d.default.Instance), B.default.FishSystem.CreateFishEvent = d.default.Instance.onCreateFish.bind(d.default.Instance), B.default.FishSystem.ScriptTimeEvent = d.default.Instance.onFishScriptTime.bind(d.default.Instance), B.default.FishSystem.ScriptEvent = u.default.Instance.onScriptEvent.bind(u.default.Instance), B.default.FishSystem.FeatureEvent = d.default.Instance.onFeatureEvent.bind(d.default.Instance), this.topBar && (this.topBar.m_DelClickBackToLobby.Insert(this.ReturnToLobby.bind(this), this), this.topBar.m_DelClickSound.Insert(this.OnClickedSound, this), this.topBar.m_DelClickInfo.Insert(this.OnClickedInfo, this), this.topBar.m_DelClickInfo.Insert(this.SendClickInfo, this)), k.EventSystem.Event(k.DownBar.SetPlayerInfo).Insert(this.SetPlayerInfo, this), k.EventSystem.RegisterFunction(k.DownBar.GetPlayerEntries, () => c.PlayerManager.getPlayer(c.PlayerManager.MainSeat).entries), k.EventSystem.RegisterFunction(k.DownBar.GetPlayerWinnings, () => c.PlayerManager.getPlayer(c.PlayerManager.MainSeat).winning), B.default.FishUIMgr.m_DelClickPurchase.Insert(this.CheckPlayingState, this), k.PurchaseEvent.OnPurchaseSuccess && k.EventSystem.Event(k.PurchaseEvent.OnPurchaseSuccess).Insert(this.onPurchaseSuccessByProfile, this), B.default.FishUIMgr.m_DelPurchaseSuccess.Insert(this.onPurchaseSuccess, this), B.default.FishUIMgr.m_DelBetChange.Insert(c.PlayerManager.Instance.SendUpdateBet, c.PlayerManager.Instance), B.default.FishUIMgr.m_DelClickAddBetLevel.Insert(c.PlayerManager.Instance.AddBet, c.PlayerManager.Instance), B.default.FishUIMgr.m_DelClickReduceBetLevel.Insert(c.PlayerManager.Instance.MinusBet, c.PlayerManager.Instance), B.default.FishUIMgr.m_DelClickChange.Insert(h.default.Instance.SwitchWeapon, h.default.Instance), B.default.FishUIMgr.m_DelClickAuto.Insert(h.default.Instance.SwitchAuto, h.default.Instance), B.default.FishUIMgr.m_DelClickLockSetting.Insert(h.default.Instance.LockSetting, h.default.Instance), B.default.FishUIMgr.m_DelCloseTeachPanel.Insert(this.ShowMenuEffectAndMission, this), B.default.FishUIMgr.m_DelClickWeaponChose.Insert(h.default.Instance.WeaponChose, h.default.Instance), B.default.FishUIMgr.m_DelClickWeaponChoseBtn.Insert(h.default.Instance.WeaponChoseBtnClick, h.default.Instance), B.default.FishUIMgr.m_FucGetWeaponSetting = h.default.Instance.BaseWeaponList.bind(h.default.Instance), "playgd" == window.gd_nowLOGO && (B.default.KioskSystem.UpdateSubmarineOccupyInfo = d.default.Instance.onFeatureEvent.bind(d.default.Instance), B.default.KioskSystem.SubmarineOccupyEvent = d.default.Instance.onFeatureEvent.bind(d.default.Instance), B.default.WeaponSystem.UpdateAssetEvent = this.UpdateOtherPlayerAsset.bind(this), B.default.SkillSystem.UpdateAssetEvent = this.UpdateOtherPlayerAsset.bind(this), B.default.PlayerSystem.UpdateAssetEvent = this.UpdateOtherPlayerAsset.bind(this), B.default.FishUIMgr.m_DelClickProfile.Insert(this.CheckPlayingState, this), B.default.FishUIMgr.m_FucGetPlayerById = this.GetPlayerByArkId.bind(this), B.default.FishUIMgr.m_FucGetPlayerIdBySeat = this.GetPlayerArkId.bind(this), B.default.FishUIMgr.m_FucGetOtherPlayerAsset = this.GetPlayerAsset.bind(this), B.default.GameSystem.GetLeaderBoardInfoEvent = this.GetMainPlayerLeaderBoardInfo.bind(this), B.default.GameSystem.GetItemInfoEvent = this.GetMainPlayerItem.bind(this), B.default.FishUIMgr.m_DelClickAutoStop.Insert(this.EventStopAuto, this), k.EventSystem.Event(k.DoLogOut).Insert(this.OnBackToLogin, this), k.EventSystem.RegisterFunction(k.FishHunter.GetMenuIcon, B.default.FishMenuMgr.GetCurAnchor.bind(B.default.FishMenuMgr)), k.EventSystem.Event(k.OceanHeart.OnRecvCoin).Insert(this.OnOceanHeartDropCoin, this)), B.default.FishMenuMgr && B.default.FishUIMgr.RegisterMouseEventList(B.default.FishMenuMgr.GetRootNode().children), this.HasJP && (C.LobbyClient.Instance.GetJPSystem.OnWinJPValueSignal.add(this.onWinJpVaule, this), C.LobbyClient.Instance.GetJPSystem.OnChangeJpValCmdSignal.add(this.RecvJPValCmd, this), C.LobbyClient.Instance.GetJPSystem.OnRecvJpCandidateSingnal.add(this.RecvJPCandidateCmd.bind(this)))
            }
            RegisterEventAfterBundle() {
                k.EventSystem.Event(k.SystemMsg.Open).Insert(this.OnSystemMessage, this)
            }
            UNRegisterEvent() {
                k.PurchaseEvent.OnPurchaseSuccess && k.EventSystem.Event(k.PurchaseEvent.OnPurchaseSuccess).Remove(this.onPurchaseSuccessByProfile, this), this.HasJP && (C.LobbyClient.Instance.GetJPSystem.OnWinJPValueSignal.remove(this.onWinJpVaule, this), C.LobbyClient.Instance.GetJPSystem.OnChangeJpValCmdSignal.remove(this.RecvJPValCmd, this), C.LobbyClient.Instance.GetJPSystem.OnRecvJpCandidateSingnal.remove(this.RecvJPCandidateCmd.bind(this))), "playgd" == window.gd_nowLOGO && (k.EventSystem.Event(k.DoLogOut).Remove(this.OnBackToLogin, this), k.EventSystem.Event(k.FishHunter.OnShipOccupiedShow).Remove(this.SetShipOccupieUICloseEvent, this), k.EventSystem.UnregisterFunction(k.FishHunter.GetMenuIcon), k.EventSystem.Event(k.OceanHeart.OnRecvCoin).Remove(this.OnOceanHeartDropCoin, this)), k.EventSystem.Event(k.SystemMsg.Open).Remove(this.OnSystemMessage, this), k.EventSystem.Event(k.DownBar.SetPlayerInfo).Remove(this.SetPlayerInfo, this), k.EventSystem.UnregisterFunction(k.DownBar.GetPlayerEntries), k.EventSystem.UnregisterFunction(k.DownBar.GetPlayerWinnings)
            }
            onTableJoin(e) {
                e || (this.NetworkClear(), this.CallOnError("C34", "NoTableID")), B.default.GameSystem.InitGame(e), B.default.PlayerSystem.InitPlayer(), B.default.FishSystem.GetFishScript(), "playgd" == window.gd_nowLOGO && m.default.Instance.Init(B.default.ItemSystem), this.GetSaveLockSetting()
            }
            onInitGame(e, t) {
                u.default.Instance.onInitScriptEvent(e, t)
            }
            onKickOut(e) {
                this.NetworkClear(), e ? this.CallOnError(N.ErrorCode(e), "KickOut") : this.CallOnError("C31", "KickOut")
            }
            onBroadCastSetting(e) {
                this.m_isEnableItem = e.itemEnable, null != B.default.FishMenuMgr && (B.default.FishMenuMgr.GetRootNode().active = this.m_isEnableItem);
                let t = [];
                if (e.hasOwnProperty("betRange") && (t = e.betRange, n.Instance.RecordingSkillID == p.skillEnum.FlameStorm || n.Instance.RecordingSkillID == p.skillEnum.Wheel ? c.PlayerManager.Instance.tempBetList = t : c.PlayerManager.Instance.CheckBetList(c.PlayerManager.MainSeat, t)), e.hasOwnProperty("cannonEnable")) {
                    let t = e.cannonEnable;
                    h.default.Instance.ChangeWeaponList(t)
                }
            }
            NetworkClear() {
                if (h.default.Instance && (h.default.Instance.AutoShoot = !1), this.unschedule(this.CallCheckQuest), this.unschedule(this.CheckPuzzleTips), c.PlayerManager.Instance)
                    for (let e = 0; e < 4; e++) c.PlayerManager.Instance.onPlayerLeave(e);
                b.AudioMgr.Instance.UncacheAudioClip(), this.gameNetWork && this.gameNetWork.Release(), this.gameNetWork = null, this.arkSocketClient && this.arkSocketClient.Close(), this.arkSocketClient = null, B.default.Client.NetworkClear()
            }
            onDestroy() {
                this.UNRegisterEvent(), this.isReturnToLobby = !0, this.NetworkClear()
            }
            ReturnToLobby() {
                if (!n.instance) return;
                P.ConnectPanelMgr.Instance.ShowConnectPanel(), this.isReturnToLobby = !0, this.NetworkClear();

                var data = JSON.stringify({
                    event: 'backToHub',
                    origin: window.location.origin,
                });
                window.parent.postMessage(data, "*");

                // P.ConnectPanelMgr.Instance.ShowConnectPanel(), R.ClickLog.DirectSend(U.LogName.PlayerConversion, U.LogType_PlayerConversion.GameLoading, U.LogEvent_LeaveGameProcess.BackToLobby), this.isReturnToLobby = !0, this.NetworkClear();
                // let e = SS.Common.GameEnvironment.CurrentGameTypeNow,
                //     t = SS.Common.GameEnvironment.GameTypeMapScrollContentPos[e],
                //     i = SS.Common.GameEnvironment.IsMute ? "1" : "0",
                //     s = JSUtility.FullScreen.IsFullScreen() ? "1" : "0",
                //     a = (new Date).getTime();
                // a += 1e3 * this.RELOAD_EXPIRE_TIME, JSUtility.IsSupportLocalStorage() ? (localStorage.setItem("IS_RELOAD_LEGALTIME", a.toString()), localStorage.setItem("IS_RELOAD", "1"), localStorage.setItem("CURRENT_GAME_TYPE", e), t && (localStorage.setItem("CURRENT_SCROLL_POS_X", t.x), localStorage.setItem("CURRENT_SCROLL_POS_Y", t.y)), localStorage.setItem("IS_FULL_SCREEN", s), localStorage.setItem("IS_MUTE", i)) : JSUtility.IsSupportCookie() && (document.cookie = "IS_RELOAD_LEGALTIME=" + a.toString() + ";", document.cookie = "IS_RELOAD=1;", document.cookie = "CURRENT_GAME_TYPE=" + e + ";", t && (document.cookie = "CURRENT_SCROLL_POS_X=" + t.x + ";", document.cookie = "CURRENT_SCROLL_POS_Y=" + t.y + ";"), document.cookie = "IS_FULL_SCREEN=" + s + ";", document.cookie = "IS_MUTE=" + i + ";");
                // let o = "",
                //     l = "",
                //     r = SS.Common.BaseFunction.GetURLParameterByName("KioskDEV");
                // SS.Common.BaseFunction.GetURLParameterByName("standalone") && (r ? (o = "index.html", l = ",standalone=true") : (o = "index_ni.html", l = "?standalone=true")), r ? location.replace("../../../" + o + "/?KioskDEV=" + r + l + this.customConfigParams) : location.replace("../../../" + o + l + this.customConfigParams)
            }
            LoadResError(e) {
                console.error("loadError:" + e), this.isReturnToLobby = !0, this.NetworkClear(), M.default.Clear(), I.PopupMsgMgr.Instance.ShowPopMsg(I.PopupPriority.Warning, "C31", this.title, "loadError:" + e, () => {
                    SS.Common.GameEnvironment.Splash.style.display = "block", u.default.Instance.Clear();
                    let e = SS.Common.GameEnvironment.Language + "Lobby";
                    cc.assetManager.bundles.find(function(t) {
                        return t._config.getSceneInfo(e)
                    }) ? cc.director.loadScene(e) : cc.director.loadScene("Lobby")
                })
            }
            Clear() {
                n.instance = null
            }
            ShowErrorMsg(e) {
                if (this.NetworkClear(), e) {
                    if (e.status) return e.status.msg ? void this.CallOnError(N.ErrorCode(e.status), "ReceiveServerError:" + e.status.msg) : void this.CallOnError(N.ErrorCode(e.status), "ReceiveServerError:status_id_" + e.status);
                    if (e.cmd_data && e.cmd_data.status) return e.cmd_data.status.msg ? void this.CallOnError(N.ErrorCode(e.cmd_data.status), "ReceiveServerError:" + e.cmd_data.status.msg) : void this.CallOnError(N.ErrorCode(e.cmd_data.status), "ReceiveServerError:status_id_" + e.cmd_data.status)
                }
                this.CallOnError("C31", "ReceiveServerError")
            }
            SetLoadingProgress(e, t) {
                let i = 70 / t * e;
                i > 70 && (i = 70), v.LoadingMgr.Instance.SetProgress(30 + i)
                var data = JSON.stringify({event: 'loadProgress', value: i / 100});
                window.parent.postMessage(data, "*");
            }
            DelayCloseLoading() {
                return a(this, void 0, void 0, function*() {
                    if (yield SS.Common.WaitForSeconds(.5), "playgd" == window.gd_nowLOGO) {
                        for (-1 == SS.Common.GameEnvironment.SentGameFlowStatus.indexOf(this.GameName + C.GAME_STATUS.RECV_THEME_SETTING) && (SS.Common.GameEnvironment.SentGameFlowStatus.push(this.GameName + C.GAME_STATUS.RECV_THEME_SETTING), C.LobbyClient.Instance.GetUserClient.SendPlayFlowData(SS.Common.GameEnvironment.DeviceInfo, this.GameName, C.GAME_STATUS.RECV_THEME_SETTING)), this.SendMissionBonusInfoCmd(); this.m_EventInfoState == x.SEND_CMD || this.m_iSendQuestNum != this.m_iRecQuestNum;) yield SS.Common.WaitForSeconds(.5);
                        if (this.ParseMissionInfo(), this.m_isEnableMission) {
                            let e = 0;
                            for (; null == this.m_OceanHeartMgr;)
                                if (yield SS.Common.WaitForSeconds(.5), (e += .5) > 5) {
                                    cc.error("\u6d3b\u52d5\u8cc7\u6e90\u7121\u6cd5load\u9032\u4f86!");
                                    break
                                }
                        } else cc.error("\u6c92\u6709\u6d3b\u52d5!")
                    }
                    // for (; !this.DownloadBundleFinished;) yield SS.Common.WaitForSeconds(.5);
                    for (; this.IsWaitInitJpValue;) yield SS.Common.WaitForSeconds(.5);
                    v.LoadingMgr.Instance.SetProgress(100), window.parent.postMessage(JSON.stringify({event: 'loadProgress', value: 1}, "*")), v.LoadingMgr.Instance.CloseLoading(), R.ClickLog.DirectSend(U.LogName.PlayerConversion, U.LogType_PlayerConversion.GameLoading, U.LogEvent_EnterGameProcess.InGame), "playgd" == window.gd_nowLOGO && (this.schedule(this.CallCheckQuest, 5), this.UpdatePuzzleQuestInfo())
                })
            }
            OnSystemMessage(e, t = cc.Size.ZERO, i = cc.Size.ZERO, n = 150, s = null, o = !1, l = !1) {
                return a(this, void 0, void 0, function*() {
                    l && (!h.default.Instance.AutoShoot && c.PlayerManager.BulletSync(0, c.PlayerManager.getPlayer(c.PlayerManager.MainSeat).winning) ? (P.ConnectPanelMgr.Instance.ShowConnectPanel(1), B.default.PlayerSystem.RefreshBalanceEvent = this.onRefreshBalanceBySystemMsg.bind(this), B.default.PlayerSystem.SendRefreshBalance()) : (h.default.Instance.AutoShoot = !1, k.EventSystem.Event(k.SystemMsg.Close).Notify(), I.PopupMsgMgr.Instance.ShowPopMsg(I.PopupPriority.Info, "C-1", this.title, "Sync Asset", null)))
                })
            }
            CheckPlayingState(e, t, i) {
                return a(this, void 0, void 0, function*() {
                    let i = c.PlayerManager.getPlayer(c.PlayerManager.MainSeat);
                    if (c.PlayerManager.Instance.MaxBalance && i.entries + i.winning >= c.PlayerManager.Instance.MaxBalance) I.PopupMsgMgr.Instance.ShowPopMsg(I.PopupPriority.Info, "C29", this.title, "MaxBalance", null);
                    else if (h.default.Instance.AutoShoot = !1, c.PlayerManager.Instance.BulletCount > 0) t();
                    else if (P.ConnectPanelMgr.Instance.ShowConnectPanel(0), yield new Promise(function(e) {
                            setTimeout(e, 500)
                        }.bind(this)), c.PlayerManager.Instance.BulletCount > 0) t();
                    else {
                        switch (t(!1), e) {
                            case "purchase":
                                B.default.PlayerSystem.UpdateBalanceEvent = this.onUpdateBalanceByClickPurchase.bind(this);
                                break;
                            case "profile":
                                B.default.PlayerSystem.UpdateBalanceEvent = this.onUpdateBalanceByClickProfile.bind(this);
                                break;
                            case "avatar":
                                B.default.PlayerSystem.UpdateBalanceEvent = this.onUpdateBalanceByClickAvatarEditor.bind(this)
                        }
                        B.default.PlayerSystem.SendUpdateBalance()
                    }
                })
            }
            SetPlayerInfo(e, t) {
                B.default.FishUIMgr.SetWinningNow(t, !1, !0), B.default.FishUIMgr.SetEntriesNow(e, !1), this.onPurchaseSuccess(t, e)
            }
            onPurchaseSuccessByProfile(e, t) {
                B.default.FishUIMgr.SetWinningNow(e, !1, !0), B.default.FishUIMgr.SetEntriesNow(t, !1), this.onPurchaseSuccess(e, t)
            }
            onPurchaseSuccess(e, t) {
                let i = c.PlayerManager.getPlayer(c.PlayerManager.MainSeat);
                i.entries = t, i.winning = e, P.ConnectPanelMgr.Instance.ShowConnectPanel(0), B.default.PlayerSystem.RefreshBalanceEvent = this.onRefreshBalance.bind(this), B.default.PlayerSystem.SendRefreshBalance(), B.default.FishUIMgr.ShowPurchaseHint(i.entries < i.bet_value), "playgd" == window.gd_nowLOGO && B.default.PlayerSystem.SendSyncAsset()
            }
            onUpdateBalanceByClickPurchase() {
                B.default.PlayerSystem.UpdateBalanceEvent = null, P.ConnectPanelMgr.Instance.DisableConnectPanel(0), B.default.FishUIMgr.OpenPurchase()
            }
            onUpdateBalanceByClickProfile() {
                B.default.PlayerSystem.UpdateBalanceEvent = null, P.ConnectPanelMgr.Instance.DisableConnectPanel(0), B.default.FishUIMgr.OpenPlayerProfile()
            }
            onUpdateBalanceByClickAvatarEditor() {
                B.default.PlayerSystem.UpdateBalanceEvent = null, P.ConnectPanelMgr.Instance.DisableConnectPanel(0), B.default.FishUIMgr.OpenMainPlayerAvatarEditor()
            }
            onRefreshBalanceBySystemMsg() {
                B.default.PlayerSystem.RefreshBalanceEvent = null, P.ConnectPanelMgr.Instance.DisableConnectPanel(1)
            }
            onUpdateBalance() {
                B.default.PlayerSystem.UpdateBalanceEvent = null, P.ConnectPanelMgr.Instance.DisableConnectPanel(0), B.default.FishUIMgr.OpenPurchase()
            }
            onRefreshBalance() {
                B.default.PlayerSystem.RefreshBalanceEvent = null, P.ConnectPanelMgr.Instance.DisableConnectPanel(0)
            }
            OnClickedSound(e) {
                b.AudioMgr.Instance.SetMute(e)
            }
            OnClickedInfo() {
                _.CommonRoot.Instance.GetInfoMgr.OpenScrollViewInfoPage(this.title)
            }
            SendClickInfo() {
                this.topBar.m_DelClickInfo.Remove(this.SendClickInfo, this), R.ClickLog.DirectSend(U.LogName.PlayerAction, U.LogType_PlayerAction.InGame, U.LogEvent_InGame.ClickInfo)
            }
            HideTimeOut() {
                this.NetworkClear(), this.CallOnError("C31", "ClientKickOut_HideTimeOut")
            }
            HideEventReload() {
                I.PopupMsgMgr.Instance.ShowPopMsg(I.PopupPriority.Disconnected, "C31", this.title, "ClientKickOut_HideTimeOut", () => {
                    let e, t;
                    P.ConnectPanelMgr.Instance.ShowConnectPanel(), e = SS.Common.GameEnvironment.UserID, t = SS.Common.GameEnvironment.UserPW, C.LobbyClient.Instance.DoLogin(window.location.protocol + "//" + SS.Common.GameEnvironment.ProjectSetting.Modules.Lobby.ServerHOST, e, t, G.DoLoginSuccess, G.DoLoginFail)
                })
            }
            MissionDataError(e) {
                this.NetworkClear(), this.CallOnError(e, "ClientKickOut_MissionDataError")
            }
            SendMissionBonusInfoCmd() {
                this.SendCommEventInfo(), this.SendPuzzleQuest()
            }
            SendCommEventInfo() {
                this.m_EventInfoState = x.SEND_CMD, C.LobbyClient.Instance.GetUserClient.getCommonEventInfo(this.recMissionInfo.bind(this))
            }
            SendPuzzleQuest() {
                this.m_EventInfoState = x.SEND_CMD, C.LobbyClient.Instance.GetUserClient.getPuzzleQuestInfo(this.recPuzzleQuestInfo.bind(this))
            }
            recMissionInfo(e, t) {
                this.m_iRecQuestNum++, e == ArkSDK.HttpResult.OK && t && t.cmd_data ? (this.m_EventInfoState = x.GET_RECV, null == this.m_tempQuestData && (this.m_tempQuestData = {}), this.m_tempQuestData[900004] = t) : this.GetQuestError(e, t, "getPuzzleQuestInfo")
            }
            recPuzzleQuestInfo(e, t) {
                if (this.m_iRecQuestNum++, e == ArkSDK.HttpResult.OK && t && t.cmd_data)
                    if (this.m_EventInfoState = x.GET_RECV, this.CheckPuzzle(t.cmd_data[900005]))
                        if (null == this.m_tempQuestData && (this.m_tempQuestData = {}), this.m_tempQuestData[900005] = t, console.log("\u60e1\u9748 \u6536\u5230\u5f69\u86cb\u62fc\u5716\u8cc7\u8a0a %s", JSON.stringify(this.m_tempQuestData[900005].cmd_data[900005])), null == C.LobbyClient.Instance.m_CommonEventInfo_900005_Rank) {
                            let e = t.cmd_data[900005].data.QuestList;
                            for (let t = 0; t < e.length; t++) {
                                let i = e[t];
                                if ("Puzzle" == i.GameThemeID[0]) {
                                    let e = i.RankListID,
                                        t = i.CustomInfo.RankLimit;
                                    C.LobbyClient.Instance.GetUserClient.getPuzzleRank(e, t, this.RecvPuzzleRank.bind(this));
                                    break
                                }
                            }
                        } else this.m_bIsRecvPuzzleQuestRank = !0;
                else console.log("\u60e1\u9748 \u62fc\u5716\u6c92\u958b, result.cmd_data = " + t.cmd_data);
                else this.GetQuestError(e, t, "getPuzzleQuestInfo")
            }
            CheckPuzzle(e) {
                let t = !1,
                    i = [];
                if ((e = e.data).hasOwnProperty("Enable") && e.Enable && e.hasOwnProperty("QuestList") && e.QuestList.length > 0) {
                    let n = e.QuestList;
                    for (let e = 0; e < n.length; e++) {
                        let t = n[e].GameThemeID;
                        for (let e = 0; e < t.length; e++) "Puzzle" != t[e] && -1 == i.indexOf(t[e]) && i.push(t[e])
                    }
                    if (i.length > 0) {
                        for (let e = 0; e < i.length; e++)
                            if (i[e] == this.GetThemeIDByGameName(this.GameName)) {
                                t = !0;
                                break
                            }
                        i.length > 0 && !t && (this.m_bPuzzleButNoThisGame = !0, console.error("\u62fc\u5716\u6709\u958b\u4f46\u672c\u9b5a\u6a5f\u6c92\u958b~"))
                    }
                }
                return t
            }
            RecvPuzzleRank(e, t) {
                console.warn("\u904a\u6232\u5167\u6536\u5230\u62fc\u5716\u6392\u884c :" + e), console.warn(t), e == ArkSDK.HttpResult.OK && t && t.cmd_data ? 0 == t.cmd_data.result && (console.warn(t.cmd_data), C.LobbyClient.Instance.m_CommonEventInfo_900005_Rank = t.cmd_data) : this.GetQuestError(e, t, "getPuzzleQuestRankInfo"), this.m_bIsRecvPuzzleQuestRank = !0
            }
            GetQuestError(e, t, i) {
                let n = "";
                n = e == ArkSDK.HttpResult.Abort ? "S176" : e == ArkSDK.HttpResult.Condition ? "S177" : e == ArkSDK.HttpResult.Error ? "S180" : e == ArkSDK.HttpResult.NotReset ? "S178" : e == ArkSDK.HttpResult.Status ? "S179" : e == ArkSDK.HttpResult.Timeout ? "S181" : "S182";
                let s = t + ", Cme = " + i;
                this.CallOnError(n, "recMissionInfo error_" + s)
            }
            ParseMissionInfo(e = !0) {
                if (null != this.m_tempQuestData) {
                    let e = !1;
                    if (this.m_tempQuestData[900004] && this.m_tempQuestData[900004].cmd_data) {
                        let t = this.m_tempQuestData[900004].cmd_data[900004];
                        if (t && 0 == t.result) {
                            let i = JSON.stringify(t.data);
                            C.LobbyClient.Instance.m_CommonEventInfo_900004 = i;
                            let n = JSON.parse(i);
                            if (n.hasOwnProperty("Enable") && n.Enable && n.hasOwnProperty("QuestList") && n.QuestList.length > 0 && n.hasOwnProperty("UserQuestData")) {
                                let t = n.QuestList;
                                if (0 == t.length) e = !1;
                                else
                                    for (let i = 0; i < t.length; i++) {
                                        let n = t[i];
                                        n.GameThemeID == this.GetThemeIDByGameName(this.GameName) && (300 == n.TitleType ? this.m_bOceanHeart = !0 : 200 == n.TitleType && (e = !0))
                                    }
                            }
                        }
                        this.m_isEnableMission = e
                    }
                }
                e && this.OnFishStart(), this.m_bOceanHeart && this.OnOceanHeartOpen()
            }
            UpdatePuzzleQuestInfo() {
                this.m_tempQuestData[900005] && (C.LobbyClient.Instance.m_CommonEventInfo_900005 = this.m_tempQuestData[900005].cmd_data[900005], null == this.m_FishPuzzleEggMgr ? this.OnPuzzleEggOpen() : this.m_FishPuzzleEggMgr.CallInitState())
            }
            OnFishStart() {
                if (this.CheckShowTeachPanel()) {
                    let e = "";
                    switch (this.GameName) {
                        case f.FishGame.TD:
                            e = "THUNDER DRAGON";
                            break;
                        case f.FishGame.ALD:
                            e = "ALADDIN ADVENTURE";
                            break;
                        case f.FishGame.ZB:
                            e = "ZOMBIE AWAKEN";
                            break;
                        case f.FishGame.KK:
                            e = "KING KONG'S RAMPAGE";
                            break;
                        case f.FishGame.LS:
                            e = "GOLDEN LEGEND PLUS"
                    }
                    B.default.FishUIMgr.ShowTeachPanel(this.m_isEnableMission, this.m_strEventTime, !0, e)
                } else B.default.FishUIMgr.m_DelCloseTeachPanel.Notify()
            }
            ShowMenuEffectAndMission() {
                this.m_EventInfoState != x.SEND_CMD && (this.m_isEnableItem && null != B.default.FishMenuMgr && B.default.FishMenuMgr.MenuShowEffect(), null != B.default.FishMissionSystem && (this.m_tempQuestData && this.m_tempQuestData[900004] ? B.default.FishMissionSystem.RecMissionInfo(ArkSDK.HttpResult.OK, this.m_tempQuestData[900004]) : B.default.FishMissionSystem.SendGetMissionInfoCmd(), B.default.GameSystem.UpdateMissionProgressEvent = B.default.FishMissionSystem.onGetFishMissionProgress.bind(B.default.FishMissionSystem), B.default.ItemSystem.UpdateMissionProgressEvent = B.default.FishMissionSystem.onGetFishMissionProgress.bind(B.default.FishMissionSystem)), null != this.m_OceanHeartMgr && (this.m_OceanHeartMgr.node.opacity = 255, this.m_OceanHeartMgr.m_MissionBtnCtrl.node.opacity = 255), null != this.m_FishPuzzleEggMgr && (this.m_FishPuzzleEggMgr.node.opacity = 255, this.m_FishPuzzleEggMgr.m_IconMgr.node.opacity = 255))
            }
            CheckShowTeachPanel() {
                if (!this.m_isEnableItem) return !1;
                let e = "",
                    t = !1,
                    i = (new Date).toLocaleDateString(),
                    n = "TEACH_DATA_" + SS.Network.LoginModel.LoginInfo.pin_ark_id + "_" + this.GameName;
                return JSUtility.IsSupportLocalStorage() ? null == (e = localStorage.getItem(n)) || "" == e ? (localStorage.setItem(n, i), t = !0) : i != e && (localStorage.setItem(n, i), t = !0) : JSUtility.IsSupportCookie() && (null == (e = JSUtility.GetCookie(n)) || "" == e ? (document.cookie = n + "=" + i + ";", t = !0) : i != e && (document.cookie = n + "=" + i + ";", t = !0)), t
            }
            DownloadDropEgg(e) {
                return a(this, void 0, void 0, function*() {
                    yield L.default.Instance.Download({
                        DropEggNormal: t => {
                            t.active = !1, e[0] = t
                        }
                    }, ["DropEggNormal"]), yield L.default.Instance.Download({
                        DropEggClassic: t => {
                            t.active = !1, e[1] = t
                        }
                    }, ["DropEggClassic"]), yield L.default.Instance.Download({
                        DropEggLegend: t => {
                            t.active = !1, e[2] = t
                        }
                    }, ["DropEggLegend"])
                })
            }
            GetSaveLockSetting() {
                let e = "",
                    t = "LOCKSETTING_DATA_" + SS.Network.LoginModel.LoginInfo.pin_ark_id + "_ALD";
                if (JSUtility.IsSupportLocalStorage() ? e = localStorage.getItem(t) : JSUtility.IsSupportCookie() && (e = JSUtility.GetCookie(t)), null != e && "" != e) {
                    let t = [];
                    e.split(",").forEach(e => {
                        t.push(Number(e))
                    }), f.default.playerLockSetting = t, f.default.LockSetting = f.default.TransFishTypeList(t), B.default.FishUIMgr.SwitchLockSettingButton(!0)
                }
            }
            OnOceanHeartOpen() {
                return a(this, void 0, void 0, function*() {
                    console.log("OnOceanHeartOpen "), this.m_OceanHeartMgr || (yield L.default.Instance.Download({
                        OceanHeart: e => {
                            if (null === e) return void D.ErrorHandler("C03", "OceanHeart Download Failed!");
                            if (this.m_OceanHeartMgr) return;
                            e.parent = this.BarRoot, e.setPosition(cc.Vec2.ZERO);
                            let t = h.default.Instance.GetWeaponPosition(c.PlayerManager.MainSeat);
                            this.m_OceanHeartMgr = e.getComponent(E.default), this.m_OceanHeartMgr.setCurGameName(c.PlayerManager.MainSeat, this.GameName, t), this.m_OceanHeartMgr.EVENT_OPEN_UI = this.EventStopAuto.bind(this), this.m_OceanHeartMgr.EVENT_GET_MISSION_REWARD = this.OceanHeartEventGetAward.bind(this), this.m_OceanHeartMgr.EVENT_SEND_COLLECT_CMD = this.SentQuestCollect.bind(this), this.m_OceanHeartMgr.EVENT_REFLASH_UI_BALANCE = this.SendReflashAwardBalance.bind(this), this.m_OceanHeartMgr.EVENT_GAME_CLOSE = this.OnOceanHeartGameError.bind(this), this.m_OceanHeartMgr.EVENT_COLLECT_CLOSE = this.OnOceanHeartCloseCollectAward.bind(this), this.m_OceanHeartMgr.EVENT_ERROR = this.CallOnError.bind(this), this.m_OceanHeartMgr.EVENT_GET_COST_PER_SECOND = this.GetCurCostPerSecond.bind(this), this.m_OceanHeartMgr.m_MissionBtnCtrl.node.setParent(this.FishCommonRoot.EventIconRoot), B.default.PlayerSystem.GetFishQuestUpdate = this.m_OceanHeartMgr.parsetFishQuestUpdateData.bind(this.m_OceanHeartMgr), B.default.PlayerSystem.GetFishQuestInfo = this.m_OceanHeartMgr.parseFishQuestInfoData.bind(this.m_OceanHeartMgr), B.default.PlayerSystem.FishQuestCollectEvent = this.OnCollectQuest.bind(this), B.default.PlayerSystem.FishQuestUpdateBalanceEvent = this.UpdateFishQuestBalance.bind(this), B.default.FishUIMgr.CheckTeachPanelActive() && (this.m_OceanHeartMgr.node.opacity = 0, this.m_OceanHeartMgr.m_MissionBtnCtrl.node.opacity = 0)
                        }
                    }, ["OceanHeart"]))
                })
            }
            EventStopAuto() {
                h.default.Instance.AutoShoot && (h.default.Instance.AutoShoot = !1)
            }
            OnOceanHeartDropCoin() {
                c.PlayerManager.BulletSync(1)
            }
            OceanHeartEventGetAward(e) {
                0 != e.AwardEntries ? (c.PlayerManager.Instance.ModifyPlayerEntries(c.PlayerManager.MainSeat, e.AwardEntries, null, !1), c.PlayerManager.BulletSync(-1, null)) : 0 != e.AwardWinnings ? c.PlayerManager.Instance.ModifyPlayerWinning(c.PlayerManager.MainSeat, e.AwardWinnings) : null != e.AwardItem && e.ItemAmount > 0 && m.default.Instance.ModifyItemQty(c.PlayerManager.MainSeat, e.ItemID, e.ItemAmount)
            }
            SentQuestCollect(e, t) {
                return a(this, void 0, void 0, function*() {
                    for (P.ConnectPanelMgr.Instance.ShowConnectPanel(0), h.default.Instance.bulletLimit = 0, h.default.Instance.ForceStopAuto(), yield new Promise(function(e) {
                            setTimeout(e, 500)
                        }.bind(this)); c.PlayerManager.Instance.BulletCount > 0;) console.warn("\u8981\u958b\u7d50\u7b97 \u6709\u5b50\u5f48\u4e0d\u540c\u6b65 BulletCount = " + c.PlayerManager.Instance.BulletCount), yield SS.Common.WaitForSeconds(1);
                    B.default.PlayerSystem.RefreshBalanceEvent = () => {
                        B.default.PlayerSystem.RefreshBalanceEvent = null, B.default.PlayerSystem.SendCollectQueat(e, t)
                    }, B.default.PlayerSystem.SendRefreshBalance()
                })
            }
            CallErrorClose() {
                this.CallOnError("C47", "OceanHeart_GetCollectAward 15s Timeout")
            }
            OnCollectQuest(e) {
                this.unschedule(this.CallErrorClose);
                let t = e.data.ExtraInfo;
                if (console.warn("\u6536\u5230\u9818\u734e\u5c01\u5305 extraInfo : ", t), null == t) return P.ConnectPanelMgr.Instance.DisableConnectPanel(0), void this.CallErrorClose();
                this.m_OceanHeartMgr && (g.default.CloseWindow(g.Windows.WeaponChose), g.default.CloseWindow(g.Windows.LockSetting), this.m_OceanHeartMgr.OnCollectQuest(e))
            }
            SendReflashAwardBalance() {
                console.warn("\u540c\u6b65\u9818\u53d6\u7684\u734e\u91d1\u56deDB SendReflashAwardBalance "), B.default.PlayerSystem.SendRefreshBalance()
            }
            UpdateFishQuestBalance(e, t) {
                SS.Common.GameEnvironment.IsUseScoreBox ? (c.PlayerManager.Instance.players[c.PlayerManager.MainSeat].winning = e, B.default.FishUIMgr.SetWinningNow(e, !0, !0)) : (c.PlayerManager.Instance.players[c.PlayerManager.MainSeat].entries = t, B.default.FishUIMgr.SetEntriesNow(c.PlayerManager.Instance.players[c.PlayerManager.MainSeat].entries))
            }
            CallCheckQuest() {
                let e = !1;
                this.m_OceanHeartMgr && (e = this.m_OceanHeartMgr.CheckQuestIsActive()), e || B.default.PlayerSystem.SendCheckQueat();
                let t = !1;
                this.m_FishPuzzleEggMgr && (t = this.m_FishPuzzleEggMgr.CheckQuestIsActive()), t || this.m_bPuzzleButNoThisGame || B.default.PlayerSystem.SendCheckPuzzleQueat(), this.unschedule(this.CallCheckQuest), this.schedule(this.CallCheckQuest, 5)
            }
            FishQuestCheckEvent(e) {
                return a(this, void 0, void 0, function*() {
                    if (e)
                        if (null == this.m_OceanHeartMgr) {
                            for (this.SendCommEventInfo(); this.m_EventInfoState == x.SEND_CMD;) yield SS.Common.WaitForSeconds(.5);
                            this.ParseMissionInfo(!1)
                        } else this.m_OceanHeartMgr.CallSendCmd()
                })
            }
            OnOceanHeartCloseCollectAward() {
                h.default.Instance.bulletLimit = 20
            }
            OnOceanHeartGameError() {
                this.CallOnError("C46", "CurGameClose")
            }
            OnPuzzleEggOpen() {
                return a(this, void 0, void 0, function*() {
                    console.log("OnPuzzleEggOpen "), this.m_FishPuzzleEggMgr || (yield L.default.Instance.Download({
                        PuzzleEgg: e => {
                            null !== e ? this.m_FishPuzzleEggMgr || (e.parent = this.BarRoot, e.setPosition(cc.Vec2.ZERO), this.m_FishPuzzleEggMgr = e.getComponent(F.FishPuzzleEggMgr), this.m_FishPuzzleEggMgr.EVENT_OPEN_UI = this.EventOpenPuzzlePage.bind(this), this.m_FishPuzzleEggMgr.EVENT_CLOSE_UI = this.EventClosePuzzlePage.bind(this), this.m_FishPuzzleEggMgr.EVENT_SEND_COLLECT_CMD = this.SentPuzzleQuestCollect.bind(this), this.m_FishPuzzleEggMgr.EVENT_GET_AWARD_FIN = this.OnPuzzleGetAwardFin.bind(this), this.m_FishPuzzleEggMgr.EVENT_ERROR = this.CallOnError.bind(this), this.m_FishPuzzleEggMgr.m_IconMgr.node.setParent(this.FishCommonRoot.EventIconRoot), S.default.Instance.m_funDropPuzzleEgg = this.m_FishPuzzleEggMgr.DropPuzzleEgg.bind(this.m_FishPuzzleEggMgr), S.default.Instance.m_funPuzzlePieceFlyStartCB = this.m_FishPuzzleEggMgr.ShowPuzzleIconPanel.bind(this.m_FishPuzzleEggMgr), S.default.Instance.m_funPuzzlePieceFlyFinCB = this.m_FishPuzzleEggMgr.GetPuzzleItemCB.bind(this.m_FishPuzzleEggMgr), S.default.Instance.m_funGetPuzzleIconPos = this.m_FishPuzzleEggMgr.m_IconMgr.GetSmallIconPos.bind(this.m_FishPuzzleEggMgr.m_IconMgr), S.default.Instance.m_funGetEnableShow = this.m_FishPuzzleEggMgr.CheckDropEggEnable.bind(this.m_FishPuzzleEggMgr), B.default.PlayerSystem.FishPuzzleQuestCollectEvent = this.OnCollectPuzzleQuest.bind(this), B.default.FishUIMgr.CheckTeachPanelActive() && (this.m_FishPuzzleEggMgr.node.opacity = 0, this.m_FishPuzzleEggMgr.m_IconMgr.node.opacity = 0), this.CheckPuzzleTips()) : D.ErrorHandler("C03", "PuzzleEgg Download Failed!")
                        }
                    }, ["PuzzleEgg"]))
                })
            }
            FishPuzzleQuestCheckEvent(e) {
                return a(this, void 0, void 0, function*() {
                    if (console.warn("GameClientALD !! FishPuzzleQuestCheckEvent, isOpen = " + e), e) {
                        for (console.warn("GameClientALD !! Fthis.m_FishPuzzleEggMgr"), this.SendPuzzleQuest(); this.m_EventInfoState == x.SEND_CMD && this.m_bIsRecvPuzzleQuestRank;) console.log("while \u7b49\u5f85\u4efb\u52d9\u8cc7\u8a0aing"), yield SS.Common.WaitForSeconds(.5);
                        this.UpdatePuzzleQuestInfo()
                    }
                })
            }
            EventOpenPuzzlePage() {
                h.default.Instance.bulletLimit = 0, g.default.CloseWindow(g.Windows.WeaponChose), g.default.CloseWindow(g.Windows.LockSetting)
            }
            EventClosePuzzlePage() {
                h.default.Instance.bulletLimit = 20
            }
            CheckPuzzleTips() {
                c.PlayerManager.Instance.CheckPlayerBetMax() || B.default.FishUIMgr.ShowBetTips(5, y.FishEventType.PuzzleEgg), this.schedule(() => {
                    console.log("\u6aa2\u67e5 bet = " + c.PlayerManager.Instance.CheckPlayerBetMax()), c.PlayerManager.Instance.CheckPlayerBetMax() || B.default.FishUIMgr.ShowBetTips(5, y.FishEventType.PuzzleEgg)
                }, 300, cc.macro.REPEAT_FOREVER, 0)
            }
            SentPuzzleQuestCollect(e, t, i) {
                return a(this, void 0, void 0, function*() {
                    this.puzzleQuestCollectPromiseResolve ? (console.warn("\u7b49\u5f85\u524d\u4e00\u6b21 SentPuzzleQuestCollect \u5b8c\u6210"), yield new Promise(e => {
                        const t = this.puzzleQuestCollectPromiseResolve;
                        this.puzzleQuestCollectPromiseResolve = () => {
                            t(), e(null)
                        }
                    })) : this.puzzleQuestCollectPromiseResolve = () => {}, h.default.Instance.bulletLimit = 0, c.PlayerManager.BulletSync(1, null), this.waitPuzzleCollectCount += 1, console.warn("\u9001\u51fa SendRefreshBalance \u66f4\u65b0DB\u9322"), B.default.PlayerSystem.RefreshBalanceEvent = () => {
                        B.default.PlayerSystem.RefreshBalanceEvent = null, this.schedule(this.CallErrorClose, 15), console.warn("\u9001\u51fa SentPuzzleQuestCollect questName = " + e + ", questSerialNo = " + t + ", questLv = " + i), B.default.PlayerSystem.SendFishPuzzleQuestCollect(e, t, i), this.puzzleQuestCollectPromiseResolve && (this.puzzleQuestCollectPromiseResolve(), this.puzzleQuestCollectPromiseResolve = null)
                    }, B.default.PlayerSystem.SendRefreshBalance()
                })
            }
            OnCollectPuzzleQuest(e) {
                if (this.unschedule(this.CallErrorClose), console.warn("\u6536\u5230\u9818\u734e\u5c01\u5305 result = " + e.result + ", cmd_data = ", e), 0 == e.result) {
                    if (this.m_FishPuzzleEggMgr) {
                        let t;
                        this.m_FishPuzzleEggMgr.m_AwardMgr.OnRecvIngameCollectData(c.PlayerManager.MainSeat, e);
                        let i, n = 0;
                        e.data.AwardInfo[0] && (t = e.data.AwardInfo[0].Item, n = e.data.AwardInfo[0].Amount), SS.Common.GameEnvironment.IsUseScoreBox ? t == W.PUZZLE_ITEM_DEFINE.Entry ? i = T.ShowType.ENTRIES : t == W.PUZZLE_ITEM_DEFINE.Winning && (i = T.ShowType.WINNING) : i = T.ShowType.CREDIT, this.OnPuzzleGetAwardFin(n, i)
                    }
                } else this.CallOnError("S354", "OnCollectPuzzleQuest error", !0)
            }
            OnPuzzleGetAwardFin(e, t) {
                B.default.PlayerSystem.FishPuzzleUpdateBalanceEvent = i => {
                    B.default.PlayerSystem.FishPuzzleUpdateBalanceEvent = null, t == T.ShowType.ENTRIES ? (c.PlayerManager.Instance.ModifyPlayerEntries(c.PlayerManager.MainSeat, e, null, !1), c.PlayerManager.BulletSync(-1, null)) : c.PlayerManager.Instance.ModifyPlayerWinning(c.PlayerManager.MainSeat, e, i), this.waitPuzzleCollectCount -= 1, 0 == this.waitPuzzleCollectCount && (h.default.Instance.bulletLimit = 20)
                }, B.default.PlayerSystem.SendRefreshBalance()
            }
            CallOnError(e, t = "", i = !0) {
                i ? (h.default.Instance && h.default.Instance.ForceStopAuto(), console.error("CallOnError, code = " + e + ", reason = " + t), I.PopupMsgMgr.Instance.ShowPopMsg(I.PopupPriority.Warning, e, this.title, t, this.ReturnToLobby.bind(this))) : I.PopupMsgMgr.Instance.ShowPopMsg(I.PopupPriority.Warning, e, this.title, t, null)
            }
            RecordErrorLog(e, t = "") {
                C.LobbyClient.Instance && "maintain" != t && "updateVersion" != t && C.LobbyClient.Instance.CollectErrorLog(I.PopupPriority.Warning, e, this.GameName, t)
            }
            RecordClickLog(e) {
                C.LobbyClient.Instance && null != this.RecordingSkillID && C.LobbyClient.Instance.GetUserClient.recordClickLog("FishShootInSkill", this.RecordingSkillID + (e ? 0 : 1e4))
            }
            ReciveCmdTime(e) {
                g.default.EnableNetUnstable(e > 5, 2), e > .25 ? B.default.FishUIMgr.SetNetSignal(1) : e > .1 ? B.default.FishUIMgr.SetNetSignal(2) : B.default.FishUIMgr.SetNetSignal(3)
            }
            UpdateBetData(e, t, i) {
                this.m_CurBet = e, this.m_CurBetScale = t || this.m_CurBetScale, this.m_CurShootPerSecond = i || this.m_CurShootPerSecond, this.m_CurCostPerSecond = this.m_CurBet * this.m_CurBetScale * this.m_CurShootPerSecond, this.m_OceanHeartMgr && this.m_OceanHeartMgr.CheckOpenShellSpeed(this.m_CurCostPerSecond)
            }
            GetThemeIDByGameName(e) {
                try {
                    let i = SS.Common.GameEnvironment.GameSetting.Icon;
                    for (let t in i)
                        if (i[t].GameName == e) return t
                } catch (t) {}
                return ""
            }
            OnDownloadBundleFinished() {
                this.HasJP, "playgd" == window.gd_nowLOGO && k.EventSystem.Event(k.FishHunter.OnShipOccupiedShow).Insert(this.SetShipOccupieUICloseEvent, this), this.RegisterEventAfterBundle(), this.DownloadBundleFinished = !0
            }
            GetPlayerByArkId(e) {
                return c.PlayerManager.getPlayerById(e)
            }
            GetPlayerArkId(e) {
                return c.PlayerManager.getPlayer(e).id
            }
            GetPlayerAsset(e) {
                let t = {};
                return t.entries = c.PlayerManager.getPlayer(e).entries, t.winning = c.PlayerManager.getPlayer(e).winning, t
            }
            UpdateOtherPlayerAsset(e) {
                for (let t = 0; t < e.length; t++) {
                    if (e[t].seat == c.PlayerManager.MainSeat) continue;
                    let i = c.PlayerManager.getPlayer(e[t].seat);
                    i.entries = e[t].entries, i.winning = e[t].winnings
                }
                B.default.FishUIMgr.UpdateOtherPlayerAsset && B.default.FishUIMgr.UpdateOtherPlayerAsset(e)
            }
            OnBackToLogin() {
                console.warn("OnBackToLogin"), this.topBar.SetTopBarStatus(A.TopbarStatus.InGameDisabled), P.ConnectPanelMgr.Instance.ShowConnectPanel(), location.replace(window.location.href + this.customConfigParams)
            }
            GetMainPlayerLeaderBoardInfo(e) {
                return a(this, void 0, void 0, function*() {
                    if (!e.is_new_record) return;
                    yield SS.Common.WaitForSeconds(5);
                    let t = -1;
                    1 == e.record_type ? t = 1 : 3 == e.record_type && (t = 0), k.EventSystem.Event(k.NoticedArrived.OnReceiveReward).Notify(t), k.EventSystem.Event(k.NoticedArrived.ShowRewardNotice).Notify()
                })
            }
            GetMainPlayerItem(e) {
                return a(this, void 0, void 0, function*() {
                    if (0 != e.length)
                        for (let t = 0; t < e.length; t++) k.EventSystem.Event(k.NoticedArrived.OnReceiveAvatar).Notify(e[t]), k.EventSystem.Event(k.NoticedArrived.ShowAvatarNotice).Notify()
                })
            }
            RecvPlayerInfo(e) {
                k.EventSystem.Event(k.FishHunter.UpdatePlayerSetting).Length > 0 && (this.m_tempPlayerInfoData.ArkID = e.ark_id, this.m_tempPlayerInfoData.FaceID = e.avatar_id, this.m_tempPlayerInfoData.FaceFrameID = e.avatar_frame_id, this.m_tempPlayerInfoData.NickName = e.nickname, k.EventSystem.Event(k.FishHunter.UpdatePlayerSetting).Notify(this.m_tempPlayerInfoData))
            }
            SetShipOccupieUICloseEvent(e, t) {
                h.default.Instance.bulletLimit = 0, h.default.Instance.ForceStopAuto();
                let i = {};
                i.collect_amount = e.collect_amount, k.EventSystem.Event(k.FishHunter.SetShipOccupieUICloseEvent).Notify(() => {
                    c.PlayerManager.BulletSync(1, null), B.default.PlayerSystem.RefreshBalanceEvent = e => {
                        B.default.PlayerSystem.RefreshBalanceEvent = null, SS.Common.GameEnvironment.IsUseScoreBox ? c.PlayerManager.Instance.ModifyPlayerWinning(c.PlayerManager.MainSeat, i.collect_amount, e.winnings, !0) : c.PlayerManager.Instance.ModifyPlayerWinning(c.PlayerManager.MainSeat, i.collect_amount, e.entries, !0), h.default.Instance.bulletLimit = 20, B.default.PlayerSystem.SendSyncAsset()
                    }, B.default.PlayerSystem.SendRefreshBalance()
                }, this)
            }
            RecvJPValCmd(e, t, i, n, s, a) {
                "Fish" == a && (this.FishCommonRoot.GetJPMgr.ChangeJPVal(e, t, i, n, this.IsWaitInitJpValue), SS.Common.GameEnvironment.exchange_rate = s, this.IsWaitInitJpValue)
            }
            RecvJPCandidateCmd(e) {
                e.group
            }
            onWinJpVaule(e, t, i, n, s) {
                c.PlayerManager.BulletSync(1, null), B.default.PlayerSystem.RefreshBalanceByWinJPEvent = e => {
                    B.default.PlayerSystem.RefreshBalanceByWinJPEvent = null, SS.Common.GameEnvironment.IsUseScoreBox ? c.PlayerManager.Instance.ModifyPlayerWinning(c.PlayerManager.MainSeat, t, e.winnings, !0) : c.PlayerManager.Instance.ModifyPlayerWinning(c.PlayerManager.MainSeat, t, e.entries, !0)
                }, B.default.PlayerSystem.SendRefreshBalance()
            }
            OnLobbyCommonReady() {
                w.LobbyCommon.Instance.OnSetupCompletedEvent = null, w.LobbyCommon.Instance.UpdateRootScale()
            }
            sendGameEventLog() {
                if ("" == O.GameLogMainPlayer.SceneName) return;
                O.GameLogMainPlayer.setDataBeforeSend();
                let e = Math.floor(Date.now() / 1e3),
                    t = e - O.GameLogMainPlayer.lastPlayerTime;
                O.GameLogMainPlayer.lastPlayerTime = e;
                let i = O.GameLogMainPlayer.playerBeginTime.toString(),
                    n = "playgd" == window.gd_nowLOGO ? "GD" : "MC";
                O.GameLogMainPlayer.FishList.forEach(t => {
                    let i = {
                        Name: "FishShow"
                    };
                    i.SceneID = O.GameLogMainPlayer.SceneName, i.Type = t.FishType, i.Count = t.FishTime, i.ExtraData = {
                        SessionTs: e
                    }, R.ClickLog.recordMainPlayerLog("FishSessionLog", i)
                }), O.GameLogMainPlayer.HitList.forEach(t => {
                    let i = {
                        Name: "FishHit"
                    };
                    i.SceneID = O.GameLogMainPlayer.SceneName, i.Type = t.FishType, i.Count = t.Count, i.ExtraData = {
                        SessionTs: e,
                        Weapon: t.Weapon,
                        WinCount: [t.Medal, t.Kill],
                        Win: [t.MedalTotalWin, t.KillTotalWin],
                        BetValue: t.Bet
                    }, R.ClickLog.recordMainPlayerLog("FishSessionLog", i)
                });
                let s = {
                    Name: "FishPlayTime"
                };
                s.SceneID = O.GameLogMainPlayer.SceneName, s.Count = t, s.ExtraData = {
                    SessionTs: e,
                    LoginTs: i,
                    Logo: n
                }, R.ClickLog.recordMainPlayerLog("FishSessionLog", s), O.GameLogMainPlayer.initAfterSend()
            }
            CheatKey(e, t) {
                let i = {};
                switch (t) {
                    case "show":
                        break;
                    case "changeSrage":
                        B.default.PlayerSystem.SendCustomCmd("CheatChangeScript");
                        break;
                    case "kill":
                        i.state = 1, B.default.PlayerSystem.SendCustomCmd("CheatShunGokuSatsu", i);
                        break;
                    case "normalkill":
                        i.state = 0, B.default.PlayerSystem.SendCustomCmd("CheatShunGokuSatsu", i);
                        break;
                    case "cantkill":
                        i.state = 2, B.default.PlayerSystem.SendCustomCmd("CheatShunGokuSatsu", i);
                        break;
                    case "Esmall":
                        i.state = 3, B.default.PlayerSystem.SendCustomCmd("CheatShunGokuSatsu", i);
                        break;
                    case "Emiddle":
                        i.state = 4, B.default.PlayerSystem.SendCustomCmd("CheatShunGokuSatsu", i);
                        break;
                    case "Ebig":
                        i.state = 5, B.default.PlayerSystem.SendCustomCmd("CheatShunGokuSatsu", i);
                        break;
                    case "Ekill":
                        i.state = 6, B.default.PlayerSystem.SendCustomCmd("CheatShunGokuSatsu", i)
                }
            }
            get customConfigParams() {
                let e = SS.Common.BaseFunction.GetURLParameterByName("CustomConfig");
                return "" != e ? `?CustomConfig=${e}` : ""
            }
        };
        V.instance = null, s([j(cc.Prefab)], V.prototype, "CommonRootPrefab", void 0), s([j(cc.Prefab)], V.prototype, "FishMenuRootPrefab", void 0), s([j(cc.Prefab)], V.prototype, "PopupWindowPrefab", void 0), s([j(cc.Node)], V.prototype, "BarRoot", void 0), s([j({
            displayName: "\u904a\u6232\u4e2d\u662f\u5426\u6709JP"
        })], V.prototype, "HasJP", void 0), s([j({
            displayName: "\u904a\u6232\u4e2d\u662f\u5426\u8981\u8f09Bundle"
        })], V.prototype, "HasBundle", void 0), s([j(cc.Node)], V.prototype, "cheatBtn", void 0), V = n = s([H], V), i.default = V, cc._RF.pop()
    }, {
        "../../../FishCommon/Script/FishUIMgr": void 0,
        "../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../../../GameCommon/CommonRoot/Script/CommonRoot": void 0,
        "../../../LobbyCommon/Component/AudioMgr": void 0,
        "../../../LobbyCommon/Connect/Script/ConnectPanelMgr": void 0,
        "../../../LobbyCommon/EventModule/FishOceanHeart/Script/FishOceanHeartMgr": void 0,
        "../../../LobbyCommon/EventModule/FishPuzzleEgg/Script/FishPuzzleEggData": void 0,
        "../../../LobbyCommon/EventModule/FishPuzzleEgg/Script/FishPuzzleEggMgr": void 0,
        "../../../LobbyCommon/FakeScoreBox/Script/FakeScoreBoxCtrl": void 0,
        "../../../LobbyCommon/Helper/EventSystem": void 0,
        "../../../LobbyCommon/Loading/Script/LoadingMgr": void 0,
        "../../../LobbyCommon/LobbyCommon": void 0,
        "../../../LobbyCommon/Net/ClickLog": void 0,
        "../../../LobbyCommon/Net/ClickLogEnum": void 0,
        "../../../LobbyCommon/Net/LobbyClient": void 0,
        "../../../LobbyCommon/PopupMessage/Script/PopupMsgMgr": void 0,
        "../../../LobbyCommon/Skin/Skin": void 0,
        "../../../LobbyCommon/TopBar/Script/TopbarMgr": void 0,
        "./Event/EventPuzzleDropEggMgr": "EventPuzzleDropEggMgr",
        "./GameClient": "GameClient",
        "./GameClient/ErrorCode": "ErrorCode",
        "./GameClient/ErrorHandler": "ErrorHandler",
        "./GameClient/Login": "Login",
        "./GameClient/Player": "Player",
        "./MainGame/Common/EnumFilter": "EnumFilter",
        "./MainGame/Common/MultiLangSystem": "MultiLangSystem",
        "./MainGame/Common/PreloadManager": "PreloadManager",
        "./MainGame/Common/ResourceManager": "ResourceManager",
        "./MainGame/Fish/FishManager": "FishManager",
        "./MainGame/Game/GameManager": "GameManager",
        "./MainGame/Item/ItemManager": "ItemManager",
        "./MainGame/Player/PlayerManager": "PlayerManager",
        "./MainGame/Player/PopupWindowCtrl": "PopupWindowCtrl",
        "./MainGame/Skill/BaseSkill": "BaseSkill",
        "./MainGame/Weapon/WeaponManager": "WeaponManager"
    }],
    GENERAL_LOBSTER: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "6a72aK8sq9DVpHXUNVnl74u", "GENERAL_LOBSTER");
        var n = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            s = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            o = e("../Common/AudioManager"),
            l = e("./BaseFish"),
            r = e("../Common/ResourceManager"),
            c = e("./BaseFish"),
            {
                ccclass: h,
                property: d
            } = cc._decorator;
        let u = class extends l.default {
            constructor() {
                super(...arguments), this.levelParents = [], this.skeletonArray = [], this.colliderArray = [], this.shapeNodes = [], this.magicCircle = [], this.skeleton = null, this.level = null, this.fishScale = .5, this.scaleByLevel = [.5, .75, 1.1, 1.6], this.scaleRateByLevel = [.001, .001, .001]
            }
            get LEVEL() {
                return this.level
            }
            InitParameter() {
                this.canCollision = !0, this.node.stopAllActions(), this.isSummoning = !1, this.node.runAction(cc.fadeIn(.5)), this.mainFishNode && this.offsetPos.mag() > 0 && this.mainFishNode.setPosition(cc.Vec2.ZERO), this.node.scale = this.reSize, this.aliveStatus = l.FishState.ALIVE, this.aliveTime = this.defaultAliveTime, this.logAliveTime = this.defaultAliveTime, this.isInScreen = !1, this.Event_FishLeave && (this.Event_FishLeave = null), this.behaviorType = c.BEHAVIOR_TYPE.NORMAL, this.isInit = !0, this.Event_FishInit && this.Event_FishInit(this), this.level = null, this.magicCircle.forEach(e => {
                    e.opacity = 255
                }), this.magicCircle.forEach(e => {
                    e.stopAllActions(), e.runAction(cc.fadeOut(2))
                }), this.isFeature = !0
            }
            ResumeBehavior() {
                super.ResumeBehavior(), this.skeleton.timeScale = 1, this.magicCircle.forEach(e => {
                    e.stopAllActions(), e.opacity = 255, e.runAction(cc.rotateBy(5, -360).repeatForever())
                })
            }
            PauseBehavior(e, t) {
                super.PauseBehavior(e, t), this.skeleton.timeScale = 0, this.magicCircle.forEach(e => {
                    e.stopAllActions()
                })
            }
            initLevel(e) {
                this.level = e, this.shapeNode = this.shapeNodes[this.level], this.shapeNode && (this.shapeNode.active = !0, this.shapeNode.color = cc.Color.WHITE, this.shapeNode.opacity = 255), this.levelParents.forEach(e => {
                    e.active = !1
                }), this.levelParents[this.level].active = !0, this.skeletonArray.forEach(e => {
                    e.timeScale = 0
                }), this.skeleton = this.skeletonArray[this.level], this.skeleton.setAnimation(0, "Swim", !0), this.skeleton.timeScale = 1, this.magicCircle.forEach(e => {
                    e.stopAllActions(), e.opacity = 255, e.runAction(cc.rotateBy(5, -360).repeatForever())
                });
                let t = this.scaleByLevel[this.level];
                switch (this.setScale(t), this.level) {
                    case 0:
                        this.subColliderList = this.colliderArray[0].getComponentsInChildren(cc.Collider);
                        break;
                    case 1:
                    case 2:
                        this.subColliderList = this.colliderArray[1].getComponentsInChildren(cc.Collider)
                }
            }
            setScale(e) {
                this.fishScale = e, this.node.scale = e, 0 == this.level && (this.node.scale = 1.17 * e)
            }
            setExdata(e) {
                let t = e;
                e && e.hasOwnProperty("upgrade_fish") ? (t = e.upgrade_fish, this.changeLevel(t.level), this.setScale(t.size / 100)) : (t && t.hasOwnProperty("level") && t.level > this.level && this.changeLevel(t.level), t && t.hasOwnProperty("size") && this.setScale(t.size / 100))
            }
            changeLevel(e) {
                if (null == this.level) return void this.initLevel(e);
                this.level = e, this.PauseBehavior(2), this.node.stopAllActions();
                let t = this.scaleByLevel[this.level];
                this.node.runAction(cc.sequence(cc.sequence(cc.scaleBy(.15, 1.1), cc.scaleBy(.15, .9)).repeat(4), cc.scaleTo(.1, t))), this.scheduleOnce(() => {
                    let e = r.default.SpawnEffect("levelup", !1);
                    e.setPosition(this.node.position), e.angle = a.default.isReverse ? 180 : 0
                }, .8), this.scheduleOnce(() => {
                    this.ResumeBehavior(), this.shapeNode = this.shapeNodes[this.level], this.shapeNode && (this.shapeNode.color = cc.Color.WHITE, this.shapeNode.opacity = 255), this.levelParents.forEach(e => {
                        e.active = !1
                    }), this.levelParents[this.level].active = !0, this.skeletonArray.forEach(e => {
                        e.timeScale = 0
                    }), this.skeleton = this.skeletonArray[this.level], this.skeleton.setAnimation(0, "Swim", !0), this.skeleton.timeScale = 1, this.magicCircle.forEach(e => {
                        e.stopAllActions(), e.opacity = 255, e.runAction(cc.rotateBy(5, -360).repeatForever())
                    });
                    let e = this.scaleByLevel[this.level];
                    switch (this.setScale(e), this.level) {
                        case 0:
                            this.subColliderList = this.colliderArray[0].getComponentsInChildren(cc.Collider);
                            break;
                        case 1:
                        case 2:
                            this.subColliderList = this.colliderArray[1].getComponentsInChildren(cc.Collider)
                    }
                }, 1.1)
            }
            FishDie(e) {
                return s(this, void 0, void 0, function*() {
                    this.aliveStatus = l.FishState.DEAD, this.canCollision = !1, this.skeleton.timeScale = 0;
                    let e = cc.sequence(cc.repeat(cc.sequence(cc.moveTo(.05, this.node.getPosition().add(new cc.Vec2(10, 10))), cc.moveTo(.05, this.node.getPosition().add(new cc.Vec2(-10, -10)))), 15), cc.delayTime(.4), cc.callFunc(() => {
                        a.default.CameraShakeEffect(1.5, 3), this.CoinEffect(2), this.shapeNode.runAction(cc.fadeOut(1)), this.magicCircle.forEach(e => {
                            e.stopAllActions(), e.opacity = 255, e.runAction(cc.fadeOut(1))
                        })
                    }), cc.delayTime(2.5), cc.callFunc(() => {
                        this.RemoveSelf()
                    }));
                    this.node.runAction(e), yield this.delay(1e3), o.default.Instance.Play("41_catch_bigfish")
                })
            }
            OnHitFish() {
                super.OnHitFish(), this.fishScale += this.scaleRateByLevel[this.level], this.fishScale = Math.min(this.fishScale, this.scaleByLevel[this.level + 1]), this.setScale(this.fishScale)
            }
        };
        n([d([cc.Node])], u.prototype, "levelParents", void 0), n([d([sp.Skeleton])], u.prototype, "skeletonArray", void 0), n([d([cc.Node])], u.prototype, "colliderArray", void 0), n([d([cc.Node])], u.prototype, "shapeNodes", void 0), n([d([cc.Node])], u.prototype, "magicCircle", void 0), u = n([h], u), i.default = u, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../Common/AudioManager": "AudioManager",
        "../Common/ResourceManager": "ResourceManager",
        "./BaseFish": "BaseFish"
    }],
    GIANT_PUFFER_FISH: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "76f9eW9jrJJjb0hE7Jp+yo1", "GIANT_PUFFER_FISH");
        var n = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            s = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("./BaseFish"),
            {
                ccclass: o
            } = cc._decorator;
        let l = class extends a.default {
            constructor() {
                super(...arguments), this.step = 0, this.timer = 0, this.isExpand = !1, this.inflated = []
            }
            InitParameter() {
                super.InitParameter(), this.parameter && this.parameter.hasOwnProperty("inflated") && (this.inflated = this.parameter.inflated), this.step = 0, this.timer = 0, this.isExpand = !1
            }
            update(e) {
                super.update(e), this.timer += e, this.aliveStatus == a.FishState.ALIVE && this.inflated && this.timer >= this.inflated[this.step] && this.freeze_time <= 0 && (this.Expand(), this.step = this.step + 1 >= this.inflated.length - 1 ? this.inflated.length - 1 : this.step + 1, this.timer = 0)
            }
            FishDie(e, t = !0, i) {
                const n = Object.create(null, {
                    FishDie: {
                        get: () => super.FishDie
                    }
                });
                return s(this, void 0, void 0, function*() {
                    n.FishDie.call(this, e, t, i), this.step = 0, this.timer = 0, this.isExpand = !1
                })
            }
            Expand() {
                this.isExpand ? (this.mAnim && this.mAnim.play("EndExpand"), this.isExpand = !1) : (this.mAnim && this.mAnim.play("StartExpand"), this.isExpand = !0)
            }
        };
        l = n([o], l), i.default = l, cc._RF.pop()
    }, {
        "./BaseFish": "BaseFish"
    }],
    GURNARD: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "398f9L+ZJJHUonrX0zuoNYW", "GURNARD");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("./BaseFish"),
            {
                ccclass: a
            } = cc._decorator;
        let o = class extends s.default {
            SpeedUp() {
                this.mSeek && this.aliveStatus == s.FishState.ALIVE && this.mSeek.AddSpeed(50, 1e3)
            }
        };
        o = n([a], o), i.default = o, cc._RF.pop()
    }, {
        "./BaseFish": "BaseFish"
    }],
    GameClient: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "322b7DaxLhI2pgK1gDCcuaz", "GameClient");
        var n, s = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("../../../GameCommon/CommonRoot/Script/CommonRoot"),
            o = e("./GDGameClient"),
            l = e("./MainGame/Common/FishMenuMgr"),
            r = e("./MCGameClient"),
            c = e("./System/FishSystem"),
            h = e("./System/GameSystem"),
            d = e("./System/ItemSystem"),
            u = e("./System/KioskSystem"),
            m = e("./System/MissionSystem"),
            p = e("./System/PlayerSystem"),
            f = e("./System/SkillSystem"),
            S = e("./System/WeaponSystem"),
            {
                ccclass: g
            } = cc._decorator;
        let y = n = class {
            constructor() {
                this.gameSystem = null, this.fishSystem = null, this.playerSystem = null, this.WeaponSystem = null, this.SkillSystem = null, this.itemSystem = null, this.m_FishMenuMgr = null, this.m_FishMissionSystem = null, this.m_KioskSystem = null, this.fishUIMgr = null
            }
            static get Instance() {
                switch (window.gd_nowLOGO) {
                    case "magiccity":
                        return r.default.Instance;
                    case "playgd":
                        return o.default.Instance
                }
            }
            static get Client() {
                return this.instance ? this.instance : (this.instance = new n, this.instance)
            }
            static get GameSystem() {
                return this.instance.gameSystem
            }
            static get FishSystem() {
                return this.instance.fishSystem
            }
            static get PlayerSystem() {
                return this.instance.playerSystem
            }
            static get WeaponSystem() {
                return this.instance.WeaponSystem
            }
            static get SkillSystem() {
                return this.instance.SkillSystem
            }
            static get ItemSystem() {
                return this.instance.itemSystem
            }
            static get FishMenuMgr() {
                return this.instance.m_FishMenuMgr
            }
            static get FishMissionSystem() {
                return this.instance.m_FishMissionSystem
            }
            static get KioskSystem() {
                return this.instance.m_KioskSystem
            }
            static get FishUIMgr() {
                return this.instance.fishUIMgr
            }
            InitSocketSystem(e) {
                this.gameSystem = new h.default(e), this.fishSystem = new c.FishSystem(e), this.playerSystem = new p.default(e), this.WeaponSystem = new S.default(e), this.SkillSystem = new f.default(e), this.itemSystem = new d.default(e), this.m_FishMissionSystem = new m.default, this.m_KioskSystem = new u.default(e)
            }
            InitFishMenu(e, t) {
                let i = cc.instantiate(e);
                i.parent = t, this.m_FishMenuMgr = i.getComponent(l.default)
            }
            InitFishUIMgr() {
                this.fishUIMgr = a.CommonRoot.Instance.GetGameBar
            }
            NetworkClear() {
                this.gameSystem = null, this.fishSystem = null, this.playerSystem = null, this.WeaponSystem = null, this.SkillSystem = null, this.m_KioskSystem = null, this.m_FishMissionSystem && (this.m_FishMissionSystem.EVENT_ERROR_RETURN_LOBBY = null, this.m_FishMissionSystem = null), this.m_FishMenuMgr && (this.m_FishMenuMgr.ClearMenu(), this.m_FishMenuMgr = null)
            }
        };
        y.instance = null, y = n = s([g], y), i.default = y, cc._RF.pop()
    }, {
        "../../../GameCommon/CommonRoot/Script/CommonRoot": void 0,
        "./GDGameClient": "GDGameClient",
        "./MCGameClient": "MCGameClient",
        "./MainGame/Common/FishMenuMgr": "FishMenuMgr",
        "./System/FishSystem": "FishSystem",
        "./System/GameSystem": "GameSystem",
        "./System/ItemSystem": "ItemSystem",
        "./System/KioskSystem": "KioskSystem",
        "./System/MissionSystem": "MissionSystem",
        "./System/PlayerSystem": "PlayerSystem",
        "./System/SkillSystem": "SkillSystem",
        "./System/WeaponSystem": "WeaponSystem"
    }],
    GameLogMainPlayer: [function(e, t) {
        "use strict";
        cc._RF.push(t, "518d51ZyhRNX5vHeyfYADvS", "GameLogMainPlayer"), cc._RF.pop()
    }, {}],
    GameManager: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "7f54adHQMBGRIcq3Mt99tit", "GameManager");
        var n, s = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            a = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const o = e("../Common/ResourceManager"),
            l = e("../Fish/FishManager"),
            r = e("../Background/BaseBackGround"),
            c = e("../Common/AudioManager"),
            h = e("../Weapon/WeaponManager"),
            d = e("../../GameClient"),
            u = e("../Common/PreloadManager"),
            m = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            p = e("../Common/EnumFilter"),
            f = e("../../GameClient/Player"),
            S = e("../Title/BaseTitle"),
            {
                ccclass: g
            } = cc._decorator;
        let y = n = class extends cc.Component {
            constructor() {
                super(...arguments), this.BackgroundNow = null, this.sceneInit = !1, this.StagePass = null, this.bgIndex = null, this.tempIndex = null
            }
            static get Instance() {
                return this.instance
            }
            onLoad() {
                n.instance = this, this.sceneInit = !1, cc.director.getCollisionManager().enabled = !0;
                var e = cc.director.getPhysicsManager();
                e.enabled = !0, e.enabledAccumulator = !0, e.FIXED_TIME_STEP = .1, e.VELOCITY_ITERATIONS = 1, e.POSITION_ITERATIONS = 1
            }
            start() {
                u.default.Instance.onReleaseSceneEvent.AddListener(this.Clear.bind(this)), cc.game.on(cc.game.EVENT_HIDE, this.HideEvent, this), cc.game.on(cc.game.EVENT_SHOW, this.ShowEvent, this)
            }
            HideEvent() {
                n.HideTimeOutID = setTimeout(() => {
                    d.default.Instance && d.default.Instance.HideTimeOut()
                }, 15e3)
            }
            ShowEvent() {
                clearTimeout(n.HideTimeOutID)
            }
            onInitScriptEvent(e, t) {
                this.InitBackground(e, t)
            }
            InitBackground(e, t) {
                return a(this, void 0, void 0, function*() {
                    switch (e) {
                        case 0:
                        case 17:
                        case 2501:
                        case 2503:
                        case 2505:
                        case 2506:
                        case 2507:
                        case 2508:
                        case 2509:
                        case 2510:
                            let i = o.default.LoadBackground(0);
                            return i && (this.BackgroundNow = i.getComponent(r.default)), c.default.Instance.Fade(c.default.Instance.GetBGMID(), 1, 0), c.default.Instance.Play("13_bgswitch"), void(h.default.Instance.bulletLimit = 0);
                        case 1001:
                        case 1002:
                        case 2001:
                            this.bgIndex = 1, c.default.Instance.PlayBGM("11_bg3", 1, !0);
                            break;
                        case 1003:
                        case 1004:
                        case 2002:
                            this.bgIndex = 2, c.default.Instance.PlayBGM("10_bg2", 1, !0);
                            break;
                        case 1005:
                        case 1006:
                        case 2003:
                            switch (this.bgIndex = 3, SS.Common.GameEnvironment.CurrentGameNow) {
                                case p.FishGame.ALD:
                                    c.default.Instance.PlayBGM("BGM_Genie_01", 1, !0);
                                    break;
                                default:
                                    c.default.Instance.PlayBGM("09_bg1", 1, !0)
                            }
                            break;
                        case 1007:
                        case 1008:
                        case 2004:
                            this.bgIndex = 4, c.default.Instance.PlayBGM("12_bg4", 1, !0);
                            break;
                        case 1009:
                        case 1010:
                        case 2005:
                            switch (this.bgIndex = 5, SS.Common.GameEnvironment.CurrentGameNow) {
                                case p.FishGame.KK:
                                    c.default.Instance.PlayBGM("BGM_Dragon_01", 1, !0);
                                    break;
                                default:
                                    c.default.Instance.PlayBGM("BGM_Buffalo_01", 1, !0)
                            }
                            break;
                        case 1011:
                        case 1012:
                        case 2006:
                            switch (this.bgIndex = 6, SS.Common.GameEnvironment.CurrentGameNow) {
                                case p.FishGame.ALD:
                                    c.default.Instance.PlayBGM("BGM_Genie_01", 1, !0);
                                    break;
                                case p.FishGame.ZB:
                                    c.default.Instance.PlayBGM("BGM_Skeleton_01", 1, !0);
                                    break;
                                case p.FishGame.KK:
                                    c.default.Instance.PlayBGM("BGM_KingKong_01", 1, !0);
                                    break;
                                case p.FishGame.LS:
                                case p.FishGame.GLP:
                                    c.default.Instance.PlayBGM("BGM_Patrick_01", 1, !0)
                            }
                            break;
                        case 1013:
                        case 1014:
                        case 2007:
                            switch (this.bgIndex = 7, SS.Common.GameEnvironment.CurrentGameNow) {
                                case p.FishGame.MTY:
                                case p.FishGame.MTYL:
                                    c.default.Instance.PlayBGM("BGM_Turtle_01", 1, !0);
                                    break;
                                default:
                                    c.default.Instance.PlayBGM("09_bg1", 1, !0)
                            }
                            break;
                        case 1015:
                        case 1016:
                        case 2008:
                            this.bgIndex = 8, c.default.Instance.PlayBGM("BGM_Lion_01", 1, !0);
                            break;
                        case 1017:
                        case 1018:
                        case 1101:
                        case 2009:
                            switch (this.bgIndex = 9, SS.Common.GameEnvironment.CurrentGameNow) {
                                case p.FishGame.CIR:
                                    c.default.Instance.PlayBGM("BGM_Pig_01", 1, !0);
                                    break;
                                case p.FishGame.MF:
                                    c.default.Instance.PlayBGM("TDEX_ThemeBGM", 1, !0)
                            }
                            break;
                        case 1019:
                        case 1020:
                        case 2010:
                            this.bgIndex = 10, c.default.Instance.PlayBGM("BGM_Tiger_01", 1, !0);
                            break;
                        case 4011:
                            this.bgIndex = 11, c.default.Instance.PlayBGM("BGM_Slotcrab_01", 1, !0);
                            break;
                        case 4012:
                        case 4013:
                        case 4014:
                            this.bgIndex = e - 4011, t ? c.default.Instance.PlayBGM("BGM_BOSS_0" + (t - 4200).toString(), 1, !0) : c.default.Instance.PlayBGM("BGM_BOSS_01", 1, !0);
                            break;
                        case 4201:
                        case 4202:
                        case 4203:
                        case 4204:
                            c.default.Instance.PlayBGM("BGM_BOSS_0" + (e - 4200).toString(), 1, !0);
                            break;
                        default:
                            return
                    }
                    if (yield o.default.Instance.ChangeResource(this.bgIndex), this.BackgroundNow) {
                        let e = this.BackgroundNow;
                        e.node.runAction(cc.sequence(cc.fadeOut(2), cc.callFunc(() => {
                            e.Recycle(), h.default.Instance.bulletLimit = 20
                        }))), this.RecycleStagePass()
                    } else h.default.Instance.bulletLimit = 20;
                    let i = o.default.LoadBackground(this.bgIndex);
                    if (i && (this.BackgroundNow = i.getComponent(r.default), i.runAction(cc.fadeIn(2))), !i || !this.BackgroundNow) {
                        let e = "ResourcePoolError_InitBackground_";
                        return i || (e += "!newBG"), this.BackgroundNow || (e += "!BackgroundNow"), void this.ResourcePoolError(e)
                    }
                    switch (t) {
                        case 1001:
                        case 1003:
                        case 1005:
                        case 1007:
                            this.BackgroundNow.BossEnter(), c.default.Instance.PlayBGM("bg_king", 1, !0);
                            break;
                        case 1009:
                            switch (this.BackgroundNow.BossEnter(), SS.Common.GameEnvironment.CurrentGameNow) {
                                case p.FishGame.KK:
                                    c.default.Instance.PlayBGM("BGM_Dragon_02", 1, !0);
                                    break;
                                case p.FishGame.LS:
                                case p.FishGame.GLP:
                                    c.default.Instance.PlayBGM("BGM_Buffalo_02", 1, !0)
                            }
                            break;
                        case 1011:
                            switch (this.BackgroundNow.BossEnter(), SS.Common.GameEnvironment.CurrentGameNow) {
                                case p.FishGame.ALD:
                                    c.default.Instance.PlayBGM("BGM_Genie_02", 1, !0);
                                    break;
                                case p.FishGame.ZB:
                                    c.default.Instance.PlayBGM("BGM_Skeleton_02", 1, !0);
                                    break;
                                case p.FishGame.KK:
                                    c.default.Instance.PlayBGM("BGM_KingKong_04", 1, !0);
                                    break;
                                case p.FishGame.LS:
                                case p.FishGame.GLP:
                                    c.default.Instance.PlayBGM("BGM_Patrick_02", 1, !0)
                            }
                            break;
                        case 1013:
                            switch (this.BackgroundNow.BossEnter(), SS.Common.GameEnvironment.CurrentGameNow) {
                                case p.FishGame.MTY:
                                case p.FishGame.MTYL:
                                    c.default.Instance.PlayBGM("BGM_Turtle_02", 1, !0)
                            }
                            break;
                        case 1015:
                            this.BackgroundNow.BossEnter(), c.default.Instance.PlayBGM("BGM_Lion_02", 1, !0);
                            break;
                        case 1017:
                            this.BackgroundNow.BossEnter(), c.default.Instance.PlayBGM("BGM_Pig_02", 1, !0);
                            break;
                        case 1019:
                            this.BackgroundNow.BossEnter(), c.default.Instance.PlayBGM("BGM_Tiger_02", 1, !0);
                            break;
                        case 1101:
                            this.BackgroundNow.BossEnter(), c.default.Instance.PlayBGM("TDEX_AppearBGM", 1, !0)
                    }
                    this.sceneInit = !0, d.default.Instance.DelayCloseLoading()
                })
            }
            onScriptEvent(e) {
                if (this.sceneInit) switch (e) {
                    case 2:
                    case 3:
                        let t = o.default.SpawnTitle(e);
                        t || (t = o.default.LoadBackground(e)), t ? t.angle = m.default.isReverse ? 180 : 0 : cc.error(" Load fishcoming fail! event_type = " + e);
                        break;
                    case 17:
                        l.default.Instance.FishSpeedUp(0, 3.5, 3), l.default.Instance.FishFadeOut();
                        break;
                    case 1001:
                    case 1003:
                    case 1005:
                    case 1007:
                        this.BossComming(e), c.default.Instance.PlayBGM("bg_king", 1, !0);
                        break;
                    case 1009:
                        switch (this.BossComming(e), SS.Common.GameEnvironment.CurrentGameNow) {
                            case p.FishGame.KK:
                                c.default.Instance.PlayBGM("BGM_Dragon_02", 1, !0), c.default.Instance.Play("Dragon_banner_01"), c.default.Instance.Play("voice_dragon_banner_01");
                                break;
                            default:
                                c.default.Instance.PlayBGM("BGM_Buffalo_02", 1, !0), c.default.Instance.Play("Buffalo_banner_01"), c.default.Instance.Play("voice_Buffalo_banner_01")
                        }
                        break;
                    case 1011:
                        switch (this.BossComming(e), SS.Common.GameEnvironment.CurrentGameNow) {
                            case p.FishGame.KK:
                                c.default.Instance.PlayBGM("BGM_KingKong_04", 1, !0), c.default.Instance.Play("KingKong_banner_01"), c.default.Instance.Play("voice_KingKong_banner_01");
                                break;
                            case p.FishGame.ZB:
                                c.default.Instance.PlayBGM("BGM_Skeleton_02", 1, !0), c.default.Instance.Play("Skeleton_banner_01"), c.default.Instance.Play("voice_Skeleton_up_01");
                                break;
                            case p.FishGame.ALD:
                                c.default.Instance.PlayBGM("BGM_Genie_02", 1, !0), c.default.Instance.Play("Genie_banner_01"), c.default.Instance.Play("voice_Genie_come_01");
                                break;
                            default:
                                c.default.Instance.PlayBGM("BGM_Patrick_02", 1, !0), c.default.Instance.Play("Patrick_banner_01"), c.default.Instance.Play("voice_Patrick_banner_01")
                        }
                        break;
                    case 1013:
                        switch (this.BossComming(e), SS.Common.GameEnvironment.CurrentGameNow) {
                            case p.FishGame.WCF:
                                c.default.Instance.Play("LuckyCat_Announce");
                                break;
                            default:
                                c.default.Instance.PlayBGM("BGM_Turtle_02", 1, !0), c.default.Instance.Play("Genie_banner_01"), c.default.Instance.Play("voice_turtle_come_01")
                        }
                        break;
                    case 1015:
                        this.BossComming(e), c.default.Instance.PlayBGM("BGM_Lion_02", 1, !0), c.default.Instance.Play("Lion_banner_01"), c.default.Instance.Play("voice_lion_come_01");
                        break;
                    case 1017:
                        this.BossComming(e), c.default.Instance.PlayBGM("BGM_Pig_02", 1, !0), c.default.Instance.Play("Pig_banner_01"), c.default.Instance.Play("voice_pig_come_01");
                        break;
                    case 1019:
                        this.BossComming(e), c.default.Instance.PlayBGM("BGM_Tiger_02", 1, !0), c.default.Instance.Play("Tiger_banner_01"), c.default.Instance.Play("voice_tiger_come_01");
                        break;
                    case 1101:
                        switch (this.BossComming(e), SS.Common.GameEnvironment.CurrentGameNow) {
                            case p.FishGame.MF:
                                c.default.Instance.PlayBGM("TDEX_AppearBGM", 1, !0)
                        }
                        break;
                    case 1002:
                        switch (SS.Common.GameEnvironment.CurrentGameNow) {
                            case p.FishGame.MF:
                                c.default.Instance.PlayBGM("11_bg3", 1, !0)
                        }
                        this.BackgroundNow.BossLeave();
                        break;
                    case 1004:
                        switch (SS.Common.GameEnvironment.CurrentGameNow) {
                            case p.FishGame.MF:
                                c.default.Instance.PlayBGM("10_bg2", 1, !0)
                        }
                        this.BackgroundNow.BossLeave();
                        break;
                    case 1006:
                        switch (SS.Common.GameEnvironment.CurrentGameNow) {
                            case p.FishGame.MF:
                                c.default.Instance.PlayBGM("09_bg1", 1, !0)
                        }
                        this.BackgroundNow.BossLeave();
                        break;
                    case 1008:
                        c.default.Instance.PlayBGM("12_bg4", 1, !0), this.BackgroundNow.BossLeave();
                        break;
                    case 1010:
                    case 1012:
                    case 1014:
                    case 1016:
                    case 1018:
                    case 1020:
                    case 1102:
                        this.BackgroundNow.BossLeave();
                        break;
                    case 2001:
                        this.tempIndex = 1, c.default.Instance.PlayBGM("11_bg3", 1, !0), this.scheduleOnce(this.BossPassed, 10);
                        break;
                    case 2002:
                        this.tempIndex = 2, c.default.Instance.PlayBGM("10_bg2", 1, !0), this.scheduleOnce(this.BossPassed, 10);
                        break;
                    case 2003:
                        switch (this.tempIndex = 3, SS.Common.GameEnvironment.CurrentGameNow) {
                            case p.FishGame.ALD:
                                c.default.Instance.PlayBGM("BGM_Genie_01", 1, !0);
                                break;
                            default:
                                c.default.Instance.PlayBGM("09_bg1", 1, !0)
                        }
                        this.scheduleOnce(this.BossPassed, 10);
                        break;
                    case 2004:
                        this.tempIndex = 4, c.default.Instance.PlayBGM("12_bg4", 1, !0), this.scheduleOnce(this.BossPassed, 10);
                        break;
                    case 2005:
                        switch (this.tempIndex = 5, SS.Common.GameEnvironment.CurrentGameNow) {
                            case p.FishGame.KK:
                                c.default.Instance.PlayBGM("BGM_Dragon_01", 1, !0);
                                break;
                            case p.FishGame.LS:
                            case p.FishGame.GLP:
                                c.default.Instance.PlayBGM("BGM_Buffalo_01", 1, !0)
                        }
                        this.scheduleOnce(this.BossPassed, 10);
                        break;
                    case 2006:
                        switch (this.tempIndex = 6, SS.Common.GameEnvironment.CurrentGameNow) {
                            case p.FishGame.ALD:
                                c.default.Instance.PlayBGM("BGM_Genie_01", 1, !0);
                                break;
                            case p.FishGame.LS:
                            case p.FishGame.GLP:
                                c.default.Instance.PlayBGM("BGM_Patrick_01", 1, !0);
                                break;
                            case p.FishGame.ZB:
                                c.default.Instance.PlayBGM("BGM_Skeleton_01", 1, !0);
                                break;
                            case p.FishGame.KK:
                                c.default.Instance.PlayBGM("BGM_KingKong_01", 1, !0)
                        }
                        this.scheduleOnce(this.BossPassed, 10);
                        break;
                    case 2007:
                        switch (this.tempIndex = 7, SS.Common.GameEnvironment.CurrentGameNow) {
                            case p.FishGame.MTY:
                            case p.FishGame.MTYL:
                                c.default.Instance.PlayBGM("BGM_Turtle_01", 1, !0);
                                break;
                            default:
                                c.default.Instance.PlayBGM("09_bg1", 1, !0)
                        }
                        this.scheduleOnce(this.BossPassed, 10);
                        break;
                    case 2008:
                        this.tempIndex = 8, c.default.Instance.PlayBGM("BGM_Lion_01", 1, !0), this.scheduleOnce(this.BossPassed, 10);
                        break;
                    case 2009:
                        switch (this.tempIndex = 9, SS.Common.GameEnvironment.CurrentGameNow) {
                            case p.FishGame.CIR:
                                c.default.Instance.PlayBGM("BGM_Pig_01", 1, !0);
                                break;
                            case p.FishGame.MF:
                                c.default.Instance.PlayBGM("TDEX_ThemeBGM", 1, !0)
                        }
                        this.scheduleOnce(this.BossPassed, 10);
                        break;
                    case 2010:
                        this.tempIndex = 10, c.default.Instance.PlayBGM("BGM_Tiger_01", 1, !0);
                        break;
                    case 2501:
                    case 2502:
                    case 2503:
                    case 2504:
                    case 2505:
                    case 2506:
                    case 2507:
                    case 2508:
                    case 2509:
                    case 2510:
                        let i = null;
                        if (this.bgIndex) {
                            switch (SS.Common.GameEnvironment.CurrentGameNow) {
                                case p.FishGame.MF:
                                case p.FishGame.TD:
                                    9 != this.bgIndex && (i = this.bgIndex + 4);
                                    break;
                                case p.FishGame.LS:
                                case p.FishGame.GLP:
                                    i = this.bgIndex + 6;
                                    break;
                                case p.FishGame.ZB:
                                    c.default.Instance.PlayBGM("BGM_Skeleton_01", 1, !0);
                                    break;
                                case p.FishGame.KK:
                                    c.default.Instance.PlayBGM("BGM_KingKong_01", 1, !0)
                            }
                            this.bgIndex = null
                        }
                        this.node.runAction(cc.sequence(cc.delayTime(1), cc.callFunc(() => {
                            i && o.default.LoadBackground(i)
                        }), cc.delayTime(4.2), cc.callFunc(() => {
                            this.BossPassed()
                        })));
                        let n = this.BackgroundNow;
                        n && n.node.runAction(cc.sequence(cc.fadeOut(2), cc.callFunc(() => {
                            n.Recycle()
                        })));
                        let s = o.default.LoadBackground(0);
                        s && (this.BackgroundNow = s.getComponent(r.default), s.runAction(cc.fadeIn(2))), this.StagePass || (this.StagePass = o.default.LoadBackground("logo"), this.StagePass.angle = m.default.isReverse ? 180 : 0), c.default.Instance.Fade(c.default.Instance.GetBGMID(), 1, 0), c.default.Instance.Play("13_bgswitch"), h.default.Instance.bulletLimit = 0;
                        break;
                    case 4011:
                        f.GameLogMainPlayer.setScene(e), this.bgIndex = 11;
                        let a = this.BackgroundNow;
                        a.node.runAction(cc.sequence(cc.fadeOut(.5), cc.delayTime(5.5), cc.callFunc(() => {
                            a.Recycle(), h.default.Instance.bulletLimit = 20
                        })));
                        let d = o.default.LoadBackground(this.bgIndex);
                        d && (this.BackgroundNow = d.getComponent(r.default), this.BackgroundNow.node.opacity = 0, this.BackgroundNow.node.runAction(cc.sequence(cc.delayTime(5.5), cc.fadeIn(.5), cc.callFunc(() => {}))));
                        let u = o.default.SpawnTitle(e, !0);
                        u ? u.angle = m.default.isReverse ? 180 : 0 : cc.error(" Load bosscoming fail! event_type = " + e), l.default.Instance.FishSpeedUp(0, 3.5, 3), l.default.Instance.FishFadeOut(), c.default.Instance.Play("Effect_crabtitle_01"), c.default.Instance.PlayBGM("BGM_crabtitle_01"), this.scheduleOnce(() => {
                            c.default.Instance.PlayBGM("BGM_Slotcrab_01", 1, !0), c.default.Instance.Play("Effect_crabtitle_02")
                        }, 5.5), h.default.Instance.bulletLimit = 0;
                        break;
                    case 4111:
                        console.log("%c[\u62c9\u9738\u8766] \u8f49\u5834\u4e8b\u4ef6", "font-size:18px;font-weight:bold;color:orange;"), this.bgIndex = null;
                        let S = this.BackgroundNow;
                        S && (S.node.runAction(cc.sequence(cc.fadeOut(3), cc.callFunc(() => {
                            S.Recycle()
                        }))), o.default.LoadBackground(5));
                        let g = o.default.LoadBackground(0);
                        g && (this.BackgroundNow = g.getComponent(r.default), g.opacity = 0, g.runAction(cc.fadeIn(3))), this.StagePass || (this.StagePass = o.default.LoadBackground("logo"), this.StagePass.angle = m.default.isReverse ? 180 : 0), h.default.Instance.bulletLimit = 0;
                        break;
                    case 4012:
                    case 4013:
                    case 4014:
                        if (this.bgIndex = e - 4011, this.BackgroundNow) {
                            let e = this.BackgroundNow;
                            e.node.runAction(cc.sequence(cc.fadeOut(3), cc.callFunc(() => {
                                e.Recycle()
                            })))
                        }
                        let y = o.default.LoadBackground(this.bgIndex);
                        y.opacity = 0, y.runAction(cc.fadeIn(3)), this.BackgroundNow = y.getComponent(r.default), this.RecycleStagePass(), h.default.Instance.bulletLimit = 20;
                        break;
                    case 4201:
                    case 4202:
                    case 4203:
                    case 4204:
                        f.GameLogMainPlayer.setScene(e);
                        let _ = o.default.SpawnTitle(e);
                        _ ? (c.default.Instance.Play("Effect_title_01"), _.angle = m.default.isReverse ? 180 : 0, this.scheduleOnce(() => {
                            c.default.Instance.Play("Effect_title_02")
                        }, 4.83)) : cc.error(" Load bosscoming fail! event_type = " + e), c.default.Instance.PlayBGM("BGM_BOSS_0" + (e - 4200).toString(), 1, !0)
                } else this.InitBackground(e)
            }
            BossComming(e) {
                let t = o.default.SpawnTitle(e);
                null == t || t.getComponent(S.default).Play(e), t || (t = o.default.LoadBackground(e)), t ? t.angle = m.default.isReverse ? 180 : 0 : cc.error(" Load bosscoming fail! event_type = " + e), l.default.Instance.FishSpeedUp(0, 3.5, 3), l.default.Instance.FishFadeOut(), this.BackgroundNow.BossEnter()
            }
            RecycleStagePass() {
                this.StagePass && this.StagePass.runAction(cc.sequence(cc.fadeOut(1), cc.callFunc(() => {
                    o.default.UnLoadBackground("logo", this.StagePass), this.StagePass = null
                })))
            }
            BossPassed() {
                return a(this, void 0, void 0, function*() {
                    if (this.tempIndex) {
                        if (yield o.default.Instance.ChangeResource(this.tempIndex), this.BackgroundNow) {
                            let e = this.BackgroundNow;
                            e.node.runAction(cc.sequence(cc.fadeOut(2), cc.callFunc(() => {
                                e.Recycle(), h.default.Instance.bulletLimit = 20
                            }))), this.RecycleStagePass()
                        } else h.default.Instance.bulletLimit = 20;
                        let e = o.default.LoadBackground(this.tempIndex);
                        if (e && (this.BackgroundNow = e.getComponent(r.default), this.BackgroundNow.node.runAction(cc.fadeIn(2))), !e || !this.BackgroundNow) {
                            let t = "ResourcePoolError_BossPassed_";
                            return e || (t += "!newBG"), this.BackgroundNow || (t += "!BackgroundNow"), t += ` index = ${this.tempIndex}`, void this.ResourcePoolError(t)
                        }
                        this.bgIndex = this.tempIndex, this.tempIndex = null
                    }
                })
            }
            ResourcePoolError(e) {
                d.default.Instance.CallOnError("C35", e)
            }
            Clear() {
                cc.game.targetOff(this), clearTimeout(n.HideTimeOutID), n.instance = null
            }
        };
        y.TimeHide = null, y.instance = null, y.HideTimeOutID = -1, y = n = s([g], y), i.default = y, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../../GameClient": "GameClient",
        "../../GameClient/Player": "Player",
        "../Background/BaseBackGround": "BaseBackGround",
        "../Common/AudioManager": "AudioManager",
        "../Common/EnumFilter": "EnumFilter",
        "../Common/PreloadManager": "PreloadManager",
        "../Common/ResourceManager": "ResourceManager",
        "../Fish/FishManager": "FishManager",
        "../Title/BaseTitle": "BaseTitle",
        "../Weapon/WeaponManager": "WeaponManager"
    }],
    GameSystem: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "2bfa7L2ly9Erqsl5AuaV8VT", "GameSystem"), Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const n = e("./baseSystem");
        i.default = class extends n.default {
            constructor(e) {
                super(e, "game"), this.TableJoinEvent = null, this.InitGameEvent = null, this.PlayerLeaveEvent = null, this.KickOutEvent = null, this.UpdateMissionProgressEvent = null, this.GetLeaderBoardInfoEvent = null, this.GetItemInfoEvent = null, this.RegisterCmdCallback("join_table", this.onTableJoin.bind(this)), this.RegisterCmdCallback("init_game", this.onInitGame.bind(this)), this.RegisterCmdCallback("leave_table", this.onPlayerLeave.bind(this)), this.RegisterCmdCallback("KICK_OUT", this.onKickOut.bind(this)), this.RegisterCmdCallback("killFishInfo", this.onGetFishMissionProgress.bind(this)), this.RegisterCmdCallback("leaderBoardInfo", this.onGetLeaderBoardInfo.bind(this)), this.RegisterCmdCallback("ItemInfo", this.onGetItemInfo.bind(this))
            }
            InitGame(e) {
                let t = {};
                t.game_id = e, this.SendCmd("init_game", t)
            }
            onTableJoin(e, t, i, n, s, a) {
                if (this.TableJoinEvent) {
                    let e = t.game_id;
                    this.TableJoinEvent(e)
                }
            }
            onInitGame(e, t, i, n, s, a) {
                if (this.InitGameEvent) {
                    var o = t.bg,
                        l = t.event;
                    this.InitGameEvent(o, l)
                }
            }
            onPlayerLeave(e, t, i, n, s, a) {
                cc.error("[onPlayerLeave]data: " + JSON.stringify(t));
                var o = t.seat;
                this.PlayerLeaveEvent && this.PlayerLeaveEvent(o)
            }
            onKickOut(e, t, i, n, s, a) {
                if (this.KickOutEvent) {
                    let e = t.status.id;
                    this.KickOutEvent(e)
                }
            }
            onGetFishMissionProgress(e, t, i, n, s, a) {
                cc.log("[onGetFishMissionProgress]data...: " + JSON.stringify(t)), this.UpdateMissionProgressEvent && this.UpdateMissionProgressEvent(t)
            }
            sendTestPower(e = 0, t = 0, i = 0) {
                let n = {};
                n.power = e, n.rocket = t, n.fire_storm = i, this.SendCmd("test", n)
            }
            sendTestOption(e = null, t = null, i = null) {
                let n = {};
                null != e && (n.fire_storm = e), null != t && (n.awake = t), null != i && (n.rocket = i), this.SendCmd("test", n)
            }
            onGetLeaderBoardInfo(e, t, i, n, s, a) {
                cc.error("onGetLeaderBoardInfo  data: " + JSON.stringify(t)), this.GetLeaderBoardInfoEvent && this.GetLeaderBoardInfoEvent(t)
            }
            onGetItemInfo(e, t, i, n, s, a) {
                cc.error("onGetItemInfo  data: " + JSON.stringify(t)), this.GetItemInfoEvent && this.GetItemInfoEvent(t)
            }
        }, cc._RF.pop()
    }, {
        "./baseSystem": "baseSystem"
    }],
    GoldenSlotCrab: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "16bc0OIB0dCNb6pJiPTqZwX", "GoldenSlotCrab");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("./BaseFish"),
            a = e("./BaseSpineFish"),
            {
                ccclass: o,
                property: l
            } = cc._decorator;
        let r = class extends a.default {
            constructor() {
                super(...arguments), this.defaultAliveTime = 120
            }
            onInit() {
                this.aliveStatus = s.FishState.ALIVE, this.offsetPos = cc.v2(0, 0), this.node.opacity = 0, this.node.stopAllActions(), this.canCollision = !1, this.node.runAction(cc.sequence(cc.fadeIn(.5), cc.callFunc(() => {
                    this.canCollision = !0
                }))), this.isFeature = !0, this.skeleton.timeScale = 1, this.skeleton.findAnimation("SWIM_LV1") ? this.skeleton.setAnimation(0, "SWIM_LV1", !0) : this.skeleton.setAnimation(0, "Swim", !0), this.skeleton.setCompleteListener(() => {
                    this.node.runAction(cc.rotateBy(.6, 30).easing(cc.easeQuadraticActionInOut()))
                })
            }
        };
        r = n([o], r), i.default = r, cc._RF.pop()
    }, {
        "./BaseFish": "BaseFish",
        "./BaseSpineFish": "BaseSpineFish"
    }],
    GoldenSlot: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "d46ae8JIcZJlpx5xfh0JIMh", "GoldenSlot");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("../Common/ResourceManager"),
            a = e("./AwardManager"),
            o = e("../Weapon/WeaponManager"),
            l = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            r = e("../Player/PlayerManager"),
            c = e("../Common/AudioManager"),
            h = e("../Skill/BaseSkill"),
            d = e("../../GameClient"),
            u = e("./AwardManager"),
            {
                ccclass: m,
                property: p
            } = cc._decorator;
        let f = class extends h.default {
            constructor() {
                super(...arguments), this.slotResource = null, this.slotMachine = null, this.slotSymbol = [], this.slotSymbolTop = [], this.effectBox = null, this.warningLight = null, this.bufferUI = null, this.bufferLabel = null, this.youWin = null, this.bigWin = null, this.megaWin = null, this.WintypeSpriteNode = null, this.oddBar = null, this.winLabel = null, this.framework = null, this.betLabel = null, this.slotBuffer = [], this.slotState = [0, 0, 0], this.effectFrame = 0, this.curTime = 0, this.isListening = !1, this.curSymbol = [1, 1, 1], this.stopCountDown = [0, 0, 0], this.isSlotRunning = !1, this.fakeSlotBufferCount = 0, this.turnAudio = -1, this.lineData = null, this.drops = []
            }
            update(e) {
                this.isListening && (this.curTime += e, this.effectFrame = Math.floor(30 * this.curTime), this.effectBox.fillRange = this.effectFrame / 30, this.effectBox.fillRange > 1 && (this.effectBox.fillRange = 1))
            }
            getSlotBufferLength() {
                return this.slotBuffer.length
            }
            addSlotBuffer(e) {
                this.fakeSlotBufferCount += 1, this.fakeSlotBufferCount > 1 && (this.bufferUI.active = !0, this.bufferLabel.string = (this.fakeSlotBufferCount - 1).toString(), this.bufferUI.stopAllActions(), this.bufferUI.runAction(cc.sequence(cc.scaleTo(.1, 1.6), cc.scaleTo(.1, 1.3)))), 0 == this.isSlotRunning && (this.isSlotRunning = !0, this.node.active = !0, this.playSlotAward())
            }
            Init(e, t = null) {
                this.node.active = !1, this.node.angle = l.default.isReverse ? 180 : 0;
                let i = o.default.WeaponPosition(e);
                l.default.isReverse ? i.y = e > 1 ? i.y - 70 : i.y + 140 : i.y = e > 1 ? i.y - 140 : i.y + 70, this.node.setPosition(i), this.bufferUI.setPosition(150, 0), l.default.isReverse ? 0 != e && 3 != e || this.bufferUI.setPosition(-150, 0) : 1 != e && 2 != e || this.bufferUI.setPosition(-150, 0), this.playerSeat = e, this.effectBox.fillRange = 0, this.effectBox.node.active = !1, this.effectFrame = 0, this.warningLight.opacity = 0, this.curTime = 0;
                for (let n = 0; n < 3; n++) this.slotSymbol[n].getComponent(cc.Sprite).spriteFrame = this.slotResource.getSpriteFrame("slot_0000"), this.slotState[n] = 1;
                this.isListening = !1, this.bufferUI.active = !1, this.bufferUI.scale = 1.3, this.slotBuffer = [], this.bufferLabel.string = " ", this.fakeSlotBufferCount = 0, this.WintypeSpriteNode.active = !1, this.oddBar.active = !1, this.winLabel.active = !1, this.framework.active = !1, this.isSlotRunning = !1, this.lineData = new u.LineData([], l.default.isRoofSeat(this.playerSeat) ? 120 : 150, 0), a.default.Instance.AwardLineUp(e, this.lineData, 0)
            }
            playNextSlot() {
                cc.log("playNextSlot"), this.node.active = !0, this.slotBuffer.splice(0, 1), this.fakeSlotBufferCount -= 1, this.slotBuffer.length > 1 ? this.bufferLabel.string = (this.fakeSlotBufferCount - 1).toString() : this.bufferUI.active = !1, this.slotBuffer.length > 0 ? this.playSlotAward() : this.UnUseSkill()
            }
            initForNewSlot() {
                this.slotMachine.getComponent(cc.Animation).play("normalSlot"), this.isListening = !1, this.isSlotRunning = !0, this.effectBox.fillRange = 0, this.effectBox.node.active = !1, this.effectFrame = 0, this.warningLight.opacity = 0, this.curTime = 0;
                for (let e = 0; e < 3; e++) this.slotSymbol[e].position.y = -15, this.slotSymbolTop[e].position.y = 15, this.slotSymbol[e].scaleY = .8, this.slotSymbolTop[e].scaleY = .15, this.curSymbol[e] = Math.floor(5 * Math.random());
                for (let e = 0; e < this.slotSymbol.length; e++) this.slotSymbol[e].stopAllActions(), this.slotSymbolTop[e].stopAllActions();
                this.WintypeSpriteNode.active = !1, this.oddBar.active = !1, this.winLabel.active = !1, this.framework.active = !1
            }
            endOfSlot() {
                let e = this.slotBuffer[0],
                    t = (e.symbols, e.win_type);
                this.isListening = !1, this.effectBox.node.active = !1, c.default.Instance.Stop(this.turnAudio);
                let i = cc.sequence(cc.scaleTo(0, 0), cc.scaleTo(.2, 1)),
                    n = 0;
                if (t < 3) n = 2, this.WintypeSpriteNode.getComponent(cc.Sprite).spriteFrame = this.youWin, c.default.Instance.Play("BGM_Youwin_01", .7, !1);
                else if (t < 6) {
                    n = 7;
                    let e = c.default.Instance.Play("Voice_BigWin_01", .7, !1);
                    this.WintypeSpriteNode.getComponent(cc.Sprite).spriteFrame = this.bigWin, this.createCoinLoop(7), c.default.Instance.SetNextSound(e, "BGM_Bigwin_01", 1, !1)
                } else {
                    n = 14;
                    let e = c.default.Instance.Play("Voice_MegaWin_01", .7, !1);
                    this.WintypeSpriteNode.getComponent(cc.Sprite).spriteFrame = this.megaWin, this.framework.active = !0, this.createCoinLoop(14), c.default.Instance.SetNextSound(e, "BGM_Megawin_01", 1, !1)
                }
                this.WintypeSpriteNode.active = !0, this.WintypeSpriteNode.runAction(i), this.oddBar.active = !0, this.oddBar.opacity = 0, this.oddBar.runAction(cc.fadeIn(.2)), this.oddBar.getComponent(cc.Sprite).spriteFrame = this.slotResource.getSpriteFrame("Odds_000" + (t + 1).toString()), this.winLabel.active = !0, this.winLabel.scale = 0, this.winLabel.runAction(i), this.winLabel.getComponent(cc.Label).string = e.win.toString();
                let a = s.default.SpawnEffect("CoinBlast");
                a.setPosition(this.node.position), a.scale = 1.5, this.scheduleOnce(() => {
                    r.PlayerManager.Instance.ModifyPlayerWinning(this.playerSeat, e.win, null, !0, !0), this.unscheduleAllCallbacks(), this.playNextSlot()
                }, n)
            }
            playListeningEffect() {
                this.isListening = !0, this.effectBox.fillRange = 0, this.effectBox.node.active = !0, this.warningLight.runAction(cc.repeat(cc.sequence(cc.fadeIn(.5), cc.fadeOut(.5)), 3)), s.default.SpawnEffect("SlotSmoke", r.PlayerManager.isMainSeat(this.playerSeat)).setParent(this.node), c.default.Instance.Play("Effect_slot_listen_01")
            }
            playSlotAward() {
                let e = this.slotBuffer[0],
                    t = e.symbols;
                this.initForNewSlot(), this.betLabel.string = e.bet.toString();
                let i = [5, 10, 15];
                t[0] == t[1] ? (i = [5, 10, 25], this.scheduleOnce(this.playListeningEffect, 1)) : i = [5, 10, 15], this.scheduleOnce(() => {
                    this.endOfSlot()
                }, .1 * i[2] + .4);
                for (let n = 0; n < 3; n++) {
                    this.stopCountDown[n] = 2 * i[n];
                    let e = cc.sequence(cc.spawn(cc.moveTo(.05, 48 * (n - 1), -45), cc.scaleTo(.05, .8, .15).easing(cc.easeSineOut())), cc.spawn(cc.moveTo(0, 48 * (n - 1), 20), cc.callFunc(() => {
                        this.setNextSymbol(n, this.slotSymbol[n])
                    })), cc.spawn(cc.moveTo(.05, 48 * (n - 1), -15), cc.scaleTo(.05, .8, .8).easing(cc.easeSineIn()))).repeat(i[n]);
                    this.slotSymbol[n].runAction(e);
                    let t = cc.sequence(cc.spawn(cc.moveTo(.05, 48 * (n - 1), -15), cc.scaleTo(.05, .8, .8).easing(cc.easeSineIn())), cc.spawn(cc.moveTo(.05, 48 * (n - 1), -45), cc.scaleTo(.05, .8, .15).easing(cc.easeSineOut())), cc.spawn(cc.moveTo(0, 48 * (n - 1), 20), cc.callFunc(() => {
                        this.setNextSymbol(n, this.slotSymbolTop[n])
                    }))).repeat(i[n]);
                    this.slotSymbolTop[n].runAction(t)
                }
                c.default.Instance.Play("Effect_slot_start_01"), this.scheduleOnce(() => {
                    this.turnAudio = c.default.Instance.Play("Effect_slot_turn_01", 1, !0)
                }, .5), t[0] >= 2 ? this.scheduleOnce(() => {
                    c.default.Instance.Play("Effect_slot_stop7_01")
                }, .1 * i[0]) : this.scheduleOnce(() => {
                    c.default.Instance.Play("Effect_slot_stop_01")
                }, .1 * i[0]), t[1] >= 2 && t[1] == t[0] ? this.scheduleOnce(() => {
                    c.default.Instance.Play("Effect_slot_stop7_02")
                }, .1 * i[1]) : this.scheduleOnce(() => {
                    c.default.Instance.Play("Effect_slot_stop_01")
                }, .1 * i[1]), t[2] >= 2 && t[1] == t[0] && t[1] == t[2] ? this.scheduleOnce(() => {
                    c.default.Instance.Play("Effect_slot_stop7_03")
                }, .1 * i[2]) : this.scheduleOnce(() => {
                    c.default.Instance.Play("Effect_slot_stop_01")
                }, .1 * i[2])
            }
            setNextSymbol(e, t) {
                if (2 == this.stopCountDown[e]) {
                    let i = this.slotBuffer[0].symbols[e];
                    i = 4 - i, t.getComponent(cc.Sprite).spriteFrame = this.slotResource.getSpriteFrame("slot_000" + i.toString())
                } else {
                    let i = this.curSymbol[e] + 1;
                    i > 4 && (i -= 5), t.getComponent(cc.Sprite).spriteFrame = this.slotResource.getSpriteFrame("slot_Blur_000" + i.toString()), this.curSymbol[e] = i, this.stopCountDown[e] = this.stopCountDown[e] - 1
                }
            }
            createCoinLoop(e) {
                this.schedule(this.createCoin.bind(this), .025, (e - 1.5) / .025)
            }
            createCoin() {
                let e = s.default.SpawnAward(a.AwardType.DropCoin);
                e.scale = .2 * Math.random() + .7, e.getComponent(cc.Animation).play("DropCoin", 1.2 * Math.random());
                let t = this.node.getPosition(),
                    i = new cc.Vec2(150 * Math.random() - 75, 50 * Math.random() + 100);
                l.default.isRoofSeat(this.playerSeat) ? (i = new cc.Vec2(150 * Math.random() - 75, 50 * Math.random() - 100), l.default.isReverse && (i.y += 100)) : (i = new cc.Vec2(150 * Math.random() - 75, 50 * Math.random() + 100), l.default.isReverse && (i.y = -i.y)), i = i.add(t), e.setPosition(i);
                let n = 300 * (Math.random() - .5),
                    o = this.playerSeat > 1 ? -(100 + 20 * Math.random()) : 100 + 20 * Math.random(),
                    r = cc.sequence(cc.spawn(cc.sequence(cc.moveBy(.25, 0, o).easing(cc.easeQuadraticActionOut()), cc.moveBy(.35, 0, this.playerSeat > 1 ? 300 : -300).easing(cc.easeQuadraticActionIn()), cc.callFunc(() => {
                        e.destroy()
                    })), cc.moveBy(.6, n, 0)), cc.delayTime(1), cc.callFunc(() => {
                        s.default.DespawnAward(a.AwardType.DropCoin, e)
                    }));
                e.stopAllActions(), e.runAction(r)
            }
            ReceiveSkillData(e = null, t = null) {
                let i = {
                    symbols: e.symbol,
                    win_type: e.win_type,
                    win: e.win,
                    bet: e.bet
                };
                c.default.Instance.Play("Effect_slot_hit_01");
                let n = s.default.SpawnEffect("DropSlot", r.PlayerManager.isMainSeat(this.playerSeat)),
                    a = 360 * Math.random(),
                    o = cc.v2(220 * Math.cos(a), 220 * Math.sin(a));
                n.setPosition(o), n.angle = l.default.isReverse ? 180 : 0, n.getComponent(cc.Animation).play();
                let h = 0,
                    d = this.node.getPosition();
                this.slotBuffer.length > 0 && (h = .2, d = this.bufferUI.convertToWorldSpaceAR(cc.v2(0, 0)), d = n.parent.convertToNodeSpaceAR(d)), this.slotBuffer.push(i);
                let u = cc.sequence(cc.delayTime(.8), cc.moveTo(.5, d).easing(cc.easeQuadraticActionOut()), cc.scaleTo(h, 0), cc.callFunc(() => {
                    s.default.DespawnEffect("DropSlot", n), this && this.node && (this.addSlotBuffer(i), this.node.active = !0)
                }));
                n.runAction(u)
            }
            UnUseSkill() {
                this.isSlotRunning = !1, a.default.Instance.AwardLineOff(this.lineData, this.playerSeat), this.node && this.node.stopAllActions(), this.unscheduleAllCallbacks(), d.default.SkillSystem && d.default.SkillSystem.RemoveSkill(this.skillType, this.playerSeat, this), s.default.DespawnSkill(this.skillType, this.node)
            }
        };
        n([p(cc.SpriteAtlas)], f.prototype, "slotResource", void 0), n([p(cc.Node)], f.prototype, "slotMachine", void 0), n([p([cc.Node])], f.prototype, "slotSymbol", void 0), n([p([cc.Node])], f.prototype, "slotSymbolTop", void 0), n([p(cc.Sprite)], f.prototype, "effectBox", void 0), n([p(cc.Node)], f.prototype, "warningLight", void 0), n([p(cc.Node)], f.prototype, "bufferUI", void 0), n([p(cc.Label)], f.prototype, "bufferLabel", void 0), n([p(cc.SpriteFrame)], f.prototype, "youWin", void 0), n([p(cc.SpriteFrame)], f.prototype, "bigWin", void 0), n([p(cc.SpriteFrame)], f.prototype, "megaWin", void 0), n([p(cc.Node)], f.prototype, "WintypeSpriteNode", void 0), n([p(cc.Node)], f.prototype, "oddBar", void 0), n([p(cc.Node)], f.prototype, "winLabel", void 0), n([p(cc.Node)], f.prototype, "framework", void 0), n([p(cc.Label)], f.prototype, "betLabel", void 0), f = n([m], f), i.default = f, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../../GameClient": "GameClient",
        "../Common/AudioManager": "AudioManager",
        "../Common/ResourceManager": "ResourceManager",
        "../Player/PlayerManager": "PlayerManager",
        "../Skill/BaseSkill": "BaseSkill",
        "../Weapon/WeaponManager": "WeaponManager",
        "./AwardManager": "AwardManager"
    }],
    HUMPBACK_WHALE: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "ef9c7PQGatMZqhexIAna8zn", "HUMPBACK_WHALE");
        var n = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            s = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("../Common/ResourceManager"),
            o = e("./BaseFish"),
            {
                ccclass: l,
                property: r
            } = cc._decorator;
        let c = class extends o.default {
            constructor() {
                super(...arguments), this.ShapeSkeleton = null, this.splashCoin = []
            }
            Init(e, t) {
                super.Init(e, t), this.o < 30 && (this.o += 30), this.o > 150 && this.o < 180 && (this.o -= 30), this.o >= 180 && this.o < 210 && (this.o += 30), this.o > 330 && this.o < 360 && (this.o -= 30), this.shapeNode = this.node.getChildByName("Shape"), this.shapeNode.opacity = 255, this.ShapeSkeleton.timeScale = 1, this.ShapeSkeleton.setAnimation(0, "SWIM", !0)
            }
            FishDie(e) {
                return s(this, void 0, void 0, function*() {
                    this.aliveStatus = o.FishState.DEAD, this.canCollision = !1, this.StopAction();
                    let e = cc.spawn(cc.rotateBy(4, 360), cc.callFunc(() => {
                        this.shapeNode.runAction(cc.fadeOut(4))
                    }), cc.sequence(cc.callFunc(() => {
                        for (let e = 0; e < 8; e++) {
                            let t = e % this.splashCoin.length;
                            this.node.runAction(cc.sequence(cc.delayTime(.3 * e), cc.callFunc(() => {
                                let e = a.default.SpawnEffect("CoinBlast");
                                e.setScale(this.splashCoin[t].scale);
                                let i = this.node.convertToWorldSpaceAR(this.splashCoin[t].getPosition());
                                e.setPosition(e.parent.convertToNodeSpaceAR(i))
                            })))
                        }
                    }), cc.delayTime(5), cc.callFunc(() => {
                        this.RemoveSelf()
                    })));
                    this.node.runAction(e)
                })
            }
            PauseBehavior(e, t) {
                super.PauseBehavior(e, t), this.ShapeSkeleton.paused = !0
            }
            ResumeBehavior() {
                super.ResumeBehavior(), this.ShapeSkeleton.paused = !1
            }
            RemoveSelf() {
                this.ShapeSkeleton.setEventListener(null), this.ShapeSkeleton.clearTracks(), super.RemoveSelf()
            }
        };
        n([r(sp.Skeleton)], c.prototype, "ShapeSkeleton", void 0), n([r([cc.Node])], c.prototype, "splashCoin", void 0), c = n([l], c), i.default = c, cc._RF.pop()
    }, {
        "../Common/ResourceManager": "ResourceManager",
        "./BaseFish": "BaseFish"
    }],
    ItemButton: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "1c44auVl/9Ke4p+oCv32d58", "ItemButton");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("../../System/ItemSystem"),
            a = e("../Common/SystemTip"),
            o = e("../Weapon/WeaponManager"),
            l = e("../Fish/FishManager"),
            r = e("../../GameClient"),
            {
                ccclass: c,
                property: h
            } = cc._decorator;
        let d = class extends cc.Component {
            constructor() {
                super(...arguments), this.itemID = "", this.btn = null, this.btnMask = null, this.tip = null, this.mask = null, this.amountStr = null, this.itemAmount = 0, this.tip_flag = !1, this.cdTime = 0, this.cdCounter = 0, this.timeOutCounter = 0, this.timeOutTime = 10, this.btnEvent = null
            }
            get ItemCanUse() {
                return !(!this.btn.interactable || (this.cdCounter > 0 ? (a.default.Open(a.SYSTEM_TIP_TYPE.COOLDOWN, 1.5, !1), 1) : this.itemAmount < 1 ? (a.default.Open(a.SYSTEM_TIP_TYPE.QTY_LACK, 1.5, !1), 1) : 0 == o.default.Instance.bulletLimit ? (a.default.Open(a.SYSTEM_TIP_TYPE.CHANGE_SCENE, 1.5, !1), 1) : this.itemID == s.ITEM_ID.FREEZE && !l.default.Instance.CheckAnyFishInScreen() && (a.default.Open(a.SYSTEM_TIP_TYPE.FREEZE_WAIT, 1.5, !1), 1)))
            }
            onLoad() {
                this.btn = this.getComponent(cc.Button), this.btnMask = cc.find("MaskBtn", this.node).getComponent(cc.Button), this.tip = cc.find("Tip", this.node), this.mask = cc.find("Mask", this.node).getComponent(cc.Sprite), this.amountStr = cc.find("Amount", this.node).getComponent(cc.RichText), this.btnMask.interactable = !1
            }
            start() {}
            update(e) {
                this.cdCounter > 0 && (this.cdCounter -= e, this.mask.fillRange = this.cdCounter / this.cdTime, this.cdCounter <= 0 && (this.cdCounter = 0, this.checkBtnStatus())), this.timeOutCounter > 0 && (this.timeOutCounter -= e, this.timeOutCounter <= 0 && (this.timeOutCounter = 0, this.btn.interactable = !0, this.checkBtnStatus()))
            }
            Init(e, t, i) {
                this.itemID = e, this.cdTime = t, this.btnEvent = i, this.btnMask.node.on(cc.Node.EventType.MOUSE_ENTER, () => {
                    r.default.FishUIMgr.switchMouseMark(!0)
                }), this.btnMask.node.on(cc.Node.EventType.MOUSE_LEAVE, () => {
                    r.default.FishUIMgr.switchMouseMark(!1)
                }), this.btn.node.on(cc.Node.EventType.MOUSE_ENTER, () => {
                    r.default.FishUIMgr.switchMouseMark(!0)
                }), this.btn.node.on(cc.Node.EventType.MOUSE_LEAVE, () => {
                    r.default.FishUIMgr.switchMouseMark(!1)
                }), this.node.on(cc.Node.EventType.TOUCH_START, () => {
                    this.scheduleOnce(this.openTip, .25)
                }), this.node.on(cc.Node.EventType.TOUCH_START, () => {
                    this.scheduleOnce(this.openTip, .25)
                }), this.node.on(cc.Node.EventType.TOUCH_END, () => {
                    this.unschedule(this.openTip), this.tip.active = !1, this.scheduleOnce(() => {
                        this.tip_flag = !1
                    }, .1)
                }), this.node.on(cc.Node.EventType.TOUCH_CANCEL, () => {
                    this.unschedule(this.openTip), this.tip.active = !1, this.scheduleOnce(() => {
                        this.tip_flag = !1
                    }, .1)
                })
            }
            onClick(e) {
                this.ItemCanUse && this.btn.interactable && (this.btn.interactable = !1, this.OpenMask(), this.transition(this.node, 1.1), this.timeOutCounter = this.timeOutTime, this.btnEvent && this.btnEvent())
            }
            onMaskClick() {}
            SetItemQty(e) {
                var t = e > 999 ? "999+" : e.toString();
                this.amountStr.string = "<outline color=#000000 width=3><b>" + t + "</b><outline>", this.itemAmount = e, this.transition(this.amountStr.node, 1.2), this.checkBtnStatus()
            }
            SetCoolDown() {
                this.CloseMask(), this.checkBtnStatus()
            }
            checkBtnStatus() {
                !this.btn.interactable || this.itemAmount < 1 ? (this.mask.fillRange = 1, this.mask.node.active = !0) : this.cdCounter > 0 ? (this.mask.fillRange = this.cdCounter / this.cdTime, this.mask.node.active = !0) : (this.mask.fillRange = 0, this.mask.node.active = !1, this.btnMask.interactable = !1)
            }
            resetCoolDown() {
                this.mask.fillRange = 0, this.mask.node.active = !1
            }
            transition(e, t) {
                e.runAction(cc.sequence(cc.scaleTo(.1, t), cc.delayTime(.15), cc.scaleTo(.15, 1)))
            }
            openTip() {
                this.tip.active = !0, this.tip_flag = !0
            }
            OpenMask() {
                this.mask.fillRange = 1, this.mask.node.active = !0, this.btnMask.interactable = !0
            }
            CloseMask() {
                this.mask.fillRange = 0, this.mask.node.active = !1, this.btnMask.interactable = !1, this.btn.interactable = !0, this.timeOutCounter = 0, this.cdCounter = this.cdTime
            }
        };
        d = n([c], d), i.default = d, cc._RF.pop()
    }, {
        "../../GameClient": "GameClient",
        "../../System/ItemSystem": "ItemSystem",
        "../Common/SystemTip": "SystemTip",
        "../Fish/FishManager": "FishManager",
        "../Weapon/WeaponManager": "WeaponManager"
    }],
    ItemManager: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "a7e06YltGlC1LOWg6RMZhZt", "ItemManager");
        var n, s = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("../../System/ItemSystem"),
            o = e("../Weapon/WeaponManager"),
            l = e("../Common/ResourceManager"),
            r = e("./DropItem"),
            c = e("../Player/PlayerManager"),
            h = e("./ItemButton"),
            d = e("./ItemTitle"),
            u = e("../Fish/BaseFish"),
            m = e("../Fish/FishManager"),
            p = e("./FreezeEffect"),
            f = e("../Common/AudioManager"),
            S = e("../Common/SystemTip"),
            g = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            y = e("../Common/EnumFilter"),
            {
                ccclass: _,
                property: C
            } = cc._decorator;
        let I = n = class extends cc.Component {
            constructor() {
                super(...arguments), this.itemBtnList = [], this.itemData = null, this.itemSystem = null, this.itemBtnDict = {}
            }
            static get Instance() {
                return this.instance
            }
            itemBtn(e) {
                return this.itemBtnDict[e]
            }
            onLoad() {
                n.instance = this
            }
            Init(e) {
                this.itemData = new a.ItemData, this.itemSystem = e, this.itemSystem.GetItemInfoEvent = this.onGetItemInfo.bind(this), this.itemSystem.FreezeEvent = this.onFreeze.bind(this), this.itemSystem.SummonEvent = this.onSummon.bind(this), this.itemSystem.GetItemInfo()
            }
            AddItemBtn(e, t) {
                let i = Object.keys(a.ITEM_CFG);
                e >= i.length || (this.itemBtnDict[i[e]] = t)
            }
            DropItemEffectByMission(e, t, i, n, s, a = null) {
                let c = o.default.WeaponPosition(t),
                    h = l.default.LoadGUI("DropItem");
                if (!h) return;
                let d = h.getComponent(r.default);
                h.angle = 0, d.ShowIcon(!0), d.Init(i, n, s, c, () => {
                    l.default.UnloadGUI("DropItem", h), this.ModifyItemQty(e, i, n), a && a()
                })
            }
            DropItemEffect(e, t, i, n, s, a = null, c, h) {
                let d = o.default.WeaponPosition(e),
                    u = o.default.WeaponGUIRotation(e),
                    m = l.default.SpawnEffect("DropItem");
                if (!m) return;
                let p = m.getComponent(r.default);
                if (s) {
                    let e = 100 * (Math.random() - .5);
                    n.addSelf(cc.v2(e, e))
                }
                m.angle = u, p.ShowIcon(!0), p.Init(t, i, n, d, () => {
                    l.default.DespawnEffect("DropItem", m), this.ModifyItemQty(e, t, i, c, h), a && a()
                })
            }
            ModifyItemQty(e, t, i, n = -1, s = -1) {
                if (!c.PlayerManager.isMainSeat(e)) return;
                let a = this.itemData.IncItemQty(t, i),
                    o = ""; - 1 != n || -1 != s ? (i > 0 ? o = "\u6b7b\u9b5a\u6389\u843d \u589e\u52a0\u9053\u5177\u6578\u91cf " : 0 == i && (o = "\u9053\u5177\u4f7f\u7528\u6210\u529f "), cc.log(o + ", item_id = " + t + ", amount = " + i + ", ser\u51b0\u51cd\u6578\u91cf = " + n + ", ser\u53ec\u559a\u6578\u91cf = " + s), this.itemData.CheckItemQty(t, n, s)) : (i > 0 ? o = "\u4efb\u52d9\u7372\u5f97\u6216\u4f7f\u7528\u5931\u6557 \u589e\u52a0\u9053\u5177\u6578\u91cf " : i < 0 && (o = "\u9053\u5177\u4f7f\u7528 "), cc.log(o + ", item_id = " + t + ", amount = " + i));
                let l = this.itemBtnDict[t];
                l ? l.SetItemQty(a) : cc.error("ModifyItemQty error, !btn, item_id = " + t)
            }
            registerItemBtn(e, t) {
                this.itemBtn(e).Init(e, this.itemData.GetCDTime(e), t.bind(this.itemSystem))
            }
            onGetItemInfo(e) {
                cc.log("[ItemManager][onGetItemInfo \u53d6\u5f97\u9053\u5177\u8cc7\u8a0a]data: ", JSON.stringify(e)), this.itemData.SetData(e), Object.keys(this.itemData.ItemQty).forEach(e => {
                    let t = this.itemBtn(e);
                    t && t.SetItemQty(this.itemData.GetItemQty(e))
                }), this.registerItemBtn(a.ITEM_ID.FREEZE, () => this.useItem(a.ITEM_ID.FREEZE)), this.registerItemBtn(a.ITEM_ID.SUMMON, () => this.useItem(a.ITEM_ID.SUMMON))
            }
            useItem(e) {
                this.ModifyItemQty(c.PlayerManager.MainSeat, e, -1), e == a.ITEM_ID.FREEZE ? this.itemSystem.Freeze() : e == a.ITEM_ID.SUMMON && this.itemSystem.Summon()
            }
            onFreeze(e, t, i, n, s, o) {
                cc.log("[ItemManager][onFreeze]seat: %s, status: %s, freeze_time: %s, freeze_amount: %s, summon_amount: %s, fish_ids: ", e, t, i, s, o, n);
                let l = a.ITEM_ID.FREEZE,
                    r = this.itemBtn(l);
                if (c.PlayerManager.isMainSeat(e) && r.SetCoolDown(), 0 != t ? (this.ModifyItemQty(c.PlayerManager.MainSeat, l, 1, s, o), cc.warn("[ItemManager][onFreeze]\u4f7f\u7528\u5931\u6557")) : this.ModifyItemQty(e, l, 0, s, o), 1 != t) {
                    if (2 == t) return r.CloseMask(), S.default.Open(S.SYSTEM_TIP_TYPE.CHANGE_SCENE, 1.5, !1), !1;
                    if (3 == t) return r.CloseMask(), S.default.Open(S.SYSTEM_TIP_TYPE.ITEM_CLOSE, 1.5, !1), !1;
                    0 == t && (this.showItemTitle(e, l), m.default.Instance.GetFishByID(n).forEach(e => {
                        null != e && e.AliveStatus != u.FishState.DEAD && e.AliveStatus != u.FishState.OUT && (this.freezeEffect(e), e.PauseBehavior(i, this.resetFreezeIce.bind(this)))
                    }), c.PlayerManager.isMainSeat(e) && f.default.Instance.Play("Skill_Freeze"))
                } else r.CloseMask()
            }
            freezeEffect(e) {
                let t = e.node.getPosition(),
                    i = Math.floor(2 * Math.random()) + 1;
                for (let o = 0; o < i; o++) {
                    let e = l.default.SpawnEffect("freeze_effect").getComponent(p.default);
                    e && (e.node.setPosition(t), e.Play())
                }
                if (this.getFreezeIceGruop(e).length > 0) return;
                let n = this.getFreezeIceType(m.default.Instance.ToBaseType(e.Type), e),
                    s = this.getFreezeIceScale(m.default.Instance.ToBaseType(e.Type), e),
                    a = this.getFreezeIcePos(m.default.Instance.ToBaseType(e.Type), e);
                "" !== n && this.spwanIce(n, e, null, -90, s, a)
            }
            resetFreezeIce(e) {
                let t = this.getFreezeIceGruop(e);
                if (t.length > 0)
                    for (let i = t.length - 1; i > -1; i--) {
                        let e = t[i];
                        l.default.DespawnEffect(e.name, e)
                    }
            }
            getFreezeIceGruop(e) {
                let t = e.node.getChildByName("IceRoot");
                return t ? t.children : []
            }
            getFreezeIceType(e, t) {
                if (116 == e) switch (this.getWeathGodFishLevel(t)) {
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                        return "FreezeIceM";
                    case 5:
                    case 6:
                        return "FreezeIceXL";
                    default:
                        return
                } else switch (e) {
                    case 0:
                    case 1:
                    case 2:
                    case 47:
                    case 48:
                    case 3:
                        return "FreezeIceS";
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 128:
                        return "FreezeIceM";
                    case 11:
                    case 12:
                    case 22:
                    case 23:
                    case 34:
                    case 76:
                    case 77:
                    case 79:
                        return "FreezeIceL";
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 24:
                    case 26:
                    case 129:
                        return "FreezeIceXL";
                    case 20:
                    case 124:
                        return "FreezeIceKingLacoste";
                    case 35:
                    case 125:
                        return "FreezeIceKingAngler";
                    case 80:
                        switch (SS.Common.GameEnvironment.CurrentGameNow) {
                            case y.FishGame.CIR:
                            case y.FishGame.ZB:
                            case y.FishGame.KK:
                            case y.FishGame.WCF:
                            case y.FishGame.KC:
                                return "FreezeIceParitShip";
                            default:
                                return ""
                        }
                    case 81:
                        switch (SS.Common.GameEnvironment.CurrentGameNow) {
                            case y.FishGame.LS:
                            case y.FishGame.GLP:
                                return "FreezeIceKingBuffalo";
                            default:
                                return "FreezeIceKingRagingDragon"
                        }
                    case 82:
                        switch (SS.Common.GameEnvironment.CurrentGameNow) {
                            case y.FishGame.KK:
                                return "FreezeIceKingKingKong";
                            case y.FishGame.LS:
                            case y.FishGame.GLP:
                                return "FreezeIceKingShamrock"
                        }
                    case 111:
                        switch (SS.Common.GameEnvironment.CurrentGameNow) {
                            case y.FishGame.KC:
                                return "FreezeIceXL"
                        }
                    case 114:
                        switch (SS.Common.GameEnvironment.CurrentGameNow) {
                            case y.FishGame.KC:
                                return "FreezeIceXL"
                        }
                    default:
                        return ""
                }
            }
            getFreezeIceScale(e, t) {
                switch (e) {
                    case 116:
                        switch (this.getWeathGodFishLevel(t)) {
                            case 1:
                                return cc.v2(1.6, 1.5);
                            case 2:
                                return cc.v2(2, 2);
                            case 3:
                            case 4:
                                return cc.v2(2.3, 2.3);
                            case 5:
                            case 6:
                                return cc.v2(1.65, 1);
                            default:
                                return cc.v2(1.5, 1.5)
                        }
                    case 111:
                        return cc.v2(2.2, 2.2);
                    case 114:
                        switch (t.LEVEL) {
                            case 0:
                                return cc.v2(1, 1);
                            case 1:
                                return cc.v2(1.2, 1.2);
                            case 2:
                                return cc.v2(1.5, 1.5)
                        }
                    default:
                        return cc.Vec2.ONE
                }
            }
            getFreezeIcePos(e, t) {
                switch (e) {
                    case 116:
                        switch (this.getWeathGodFishLevel(t)) {
                            case 1:
                            case 2:
                                return cc.v2(0, 20);
                            case 3:
                            case 4:
                                return cc.v2(0, 15);
                            case 5:
                            case 6:
                                return cc.v2(10, 10);
                            default:
                                return
                        }
                    case 111:
                        return cc.v2(90, 0);
                    default:
                        return cc.Vec2.ZERO
                }
            }
            getWeathGodFishLevel(e) {
                return e.CurrentLevel
            }
            spwanIce(e, t, i, n = -90, s = cc.Vec2.ONE, a = cc.Vec2.ZERO) {
                let o = l.default.SpawnEffect(e);
                if (!o) return;
                let r = t.node.getChildByName("IceRoot");
                if (r || (r = new cc.Node("IceRoot")).setParent(t.node), o.setParent(r), i) {
                    let e = i.offset;
                    a = cc.v2(i.node.getPosition().x + e.x, i.node.getPosition().y + e.y)
                }
                o.setPosition(a), o.angle = n, o.setScale(s)
            }
            onSummon(e, t, i, n, s) {
                cc.log("[ItemManager][onSummon]seat: %s, status: %s, freeze_amount: %s, summon_amount: %s, fish_data:", e, t, n, s, i);
                let r = a.ITEM_ID.SUMMON,
                    h = this.itemBtn(r);
                if (c.PlayerManager.isMainSeat(e) && h.SetCoolDown(), 0 != t ? (this.ModifyItemQty(c.PlayerManager.MainSeat, r, 1, n, s), cc.warn("[ItemManager][onSummon]\u4f7f\u7528\u5931\u6557")) : this.ModifyItemQty(e, r, 0, n, s), 1 != t) {
                    if (2 == t) return h.CloseMask(), void S.default.Open(S.SYSTEM_TIP_TYPE.SUMMON_MAX, 1.5, !1);
                    if (3 == t) return h.CloseMask(), S.default.Open(S.SYSTEM_TIP_TYPE.CHANGE_SCENE, 1.5, !1), !1;
                    if (4 == t) return h.CloseMask(), S.default.Open(S.SYSTEM_TIP_TYPE.ITEM_CLOSE, 1.5, !1), !1;
                    if (0 == t) {
                        if (i.length < 1) return;
                        this.showItemTitle(e, r);
                        let t = l.default.SpawnEffect("summon_effect").getComponent(cc.Animation);
                        if (!t) return;
                        t.node.parent = l.default.Instance.Background;
                        let n = o.default.WeaponPosition(e);
                        t.node.setPosition(n), t.hasEventListener("finished") || t.on("finished", () => {
                            l.default.DespawnEffect("summon_effect", t.node)
                        }), t.node.runAction(cc.sequence(cc.spawn(cc.moveTo(.5, cc.v2(i[0].x, i[0].y)), cc.callFunc(() => {
                            t.play("A_Skill_Summon")
                        })), cc.delayTime(1.5), cc.callFunc(() => {
                            m.default.Instance.SummonFish(i)
                        }))), c.PlayerManager.isMainSeat(e) && f.default.Instance.Play("Skill_CallFish")
                    }
                } else h.CloseMask()
            }
            showItemTitle(e, t, i) {
                let n = l.default.SpawnTitle("item_title", c.PlayerManager.isMainSeat(e)).getComponent(d.default),
                    s = !g.default.isReverse && e > 1 || g.default.isReverse && e < 2 ? d.ANIM_CLIP.DOWN : d.ANIM_CLIP.UP;
                n.node.angle = o.default.WeaponGUIRotation(e), n.node.setPosition(o.default.WeaponPosition(e, cc.v2(0, i === d.ANIM_CLIP.SCALE ? 150 : 0))), n.Play(t, () => {
                    l.default.DespawnTitle("item_title", n.node)
                }, i || s)
            }
        };
        I.instance = null, s([C([h.default])], I.prototype, "itemBtnList", void 0), I = n = s([_], I), i.default = I, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../../System/ItemSystem": "ItemSystem",
        "../Common/AudioManager": "AudioManager",
        "../Common/EnumFilter": "EnumFilter",
        "../Common/ResourceManager": "ResourceManager",
        "../Common/SystemTip": "SystemTip",
        "../Fish/BaseFish": "BaseFish",
        "../Fish/FishManager": "FishManager",
        "../Player/PlayerManager": "PlayerManager",
        "../Weapon/WeaponManager": "WeaponManager",
        "./DropItem": "DropItem",
        "./FreezeEffect": "FreezeEffect",
        "./ItemButton": "ItemButton",
        "./ItemTitle": "ItemTitle"
    }],
    ItemSystem: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "8f57688HvJJmIvOq/YrJS0f", "ItemSystem"), Object.defineProperty(i, "__esModule", {
            value: !0
        }), i.ItemData = i.ITEM_CFG = i.ITEM_ID = void 0;
        const n = e("./baseSystem");
        i.ITEM_ID = {
            SUMMON: "MF100002",
            FREEZE: "MF100001"
        }, i.ITEM_CFG = {
            MF100002: {
                index: 1,
                name: "M105"
            },
            MF100001: {
                index: 0,
                name: "M104"
            }
        };
        const s = "get_item_info",
            a = "freeze",
            o = "summon",
            l = "get_free_item",
            r = "UseItemInfo";
        i.default = class extends n.default {
            constructor(e, t) {
                super(e, "item"), this.GetItemInfoEvent = null, this.FreezeEvent = null, this.SummonEvent = null, this.CollectNewbieGift = null, this.UpdateMissionProgressEvent = null, this.RegisterCmdCallback(s, this.onGetItemInfo.bind(this)), this.RegisterCmdCallback(a, this.onFreeze.bind(this), a), this.RegisterCmdCallback(o, this.onSummon.bind(this), o), this.RegisterCmdCallback(l, this.onCollectNewbieGift.bind(this)), this.RegisterCmdCallback(r, this.onGetFishMissionProgress.bind(this))
            }
            GetItemInfo() {
                this.SendCmd(s)
            }
            Freeze() {
                this.SendCmd(a)
            }
            Summon() {
                this.SendCmd(o)
            }
            onGetItemInfo(e, t) {
                e == ArkSDK.SocketResult.OK && this.GetItemInfoEvent && this.GetItemInfoEvent(t)
            }
            onFreeze(e, t) {
                if (e != ArkSDK.SocketResult.OK) return;
                let i = t.seat,
                    n = t.status,
                    s = t.freeze_time,
                    a = t.fish,
                    o = t.freeze_amount,
                    l = t.summon_amount;
                this.FreezeEvent && this.FreezeEvent(i, n, s, a, o, l)
            }
            onSummon(e, t) {
                if (e != ArkSDK.SocketResult.OK) return;
                let i = t.seat,
                    n = t.status,
                    s = t.fish_data,
                    a = t.freeze_amount,
                    o = t.summon_amount;
                this.SummonEvent && this.SummonEvent(i, n, s, a, o)
            }
            SendCollectNewbieGift(e, t) {
                cc.log("SendCollectNewbieGift, questID = " + e + ", questLevel = " + t + "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
                let i = {};
                i.quest_id = e, i.quest_level = t, this.SendCmd(l, i)
            }
            onCollectNewbieGift(e, t) {
                cc.log(" ~~~~~~~~~~~~~~~~onCollectNewbieGift: %s, data: ", e, t), this.CollectNewbieGift && this.CollectNewbieGift(e, t)
            }
            onGetFishMissionProgress(e, t) {
                cc.log("[ItemSystem][onGetFishMissionProgress]data...: " + JSON.stringify(t)), this.UpdateMissionProgressEvent && this.UpdateMissionProgressEvent(t)
            }
        }, i.ItemData = class {
            constructor() {
                this.itemIDList = [], this.itemQty = {}, this.itemCooldown = {}
            }
            get ItemQty() {
                return this.itemQty
            }
            SetData(e) {
                this.itemIDList = Object.keys(i.ITEM_CFG);
                let t = Object.keys(e),
                    n = t.length;
                for (let i = 0; i < n; i++) {
                    let n = t[i]; - 1 != this.itemIDList.indexOf(n) && (this.itemQty[n] = e[n].amount, this.itemCooldown[n] = e[n].cd)
                }
            }
            GetItemQty(e) {
                return !this.itemQty[e] || this.itemQty[e] < 0 ? 0 : this.itemQty[e]
            }
            IncItemQty(e, t) {
                let i = this.itemQty[e];
                if ("number" == typeof i) return i += t, this.itemQty[e] = i, i
            }
            GetCDTime(e) {
                return !this.itemCooldown[e] || this.itemCooldown[e] < 0 ? -1 : this.itemCooldown[e]
            }
            CheckItemQty(e, t, n) {
                let s = this.itemQty[i.ITEM_ID.FREEZE],
                    a = this.itemQty[i.ITEM_ID.SUMMON];
                cc.warn("\u9053\u5177\u6578\u91cf\u6aa2\u67e5, client / server \u51b0\u51cd\u6578\u91cf = " + s + " / " + t + ", client / server \u53ec\u559a\u6578\u91cf = " + a + " / " + n), -1 != t && -1 != n && (s != t && cc.error("CheckItemQty \u51b0\u51cd\u6578\u91cf\u932f\u8aa4!, client = " + s + ", server = " + t), a != n && cc.error("CheckItemQty \u53ec\u559a\u6578\u91cf\u932f\u8aa4!, client = " + a + ", server = " + n))
            }
        }, cc._RF.pop()
    }, {
        "./baseSystem": "baseSystem"
    }],
    ItemTitle: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "2227fFLXCJMSJtWNQR78VvF", "ItemTitle");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        }), i.ANIM_CLIP = void 0;
        const s = e("../../System/ItemSystem"),
            {
                ccclass: a,
                property: o,
                executeInEditMode: l
            } = cc._decorator;
        let r = class {
            constructor() {
                this.title_type = 0, this.sprite_frame = null, this.color = cc.Color.WHITE
            }
        };
        n([o(cc.SpriteFrame)], r.prototype, "sprite_frame", void 0), n([o(cc.Color)], r.prototype, "color", void 0), r = n([a("ItemTitleConfig")], r);
        const c = cc.Enum({
            FREEZE: 0,
            SUMMON: 1
        });
        i.ANIM_CLIP = {
            UP: "TitleUp",
            DOWN: "TitleDown",
            SCALE: "TitleScale"
        };
        let h = class extends cc.Component {
            constructor() {
                super(...arguments), this.title_type = c.FREEZE, this.title_sprite_config = [], this.title_sprite = null, this.root = null, this.Light1 = null, this.Light2 = null, this.anim = null, this.anim_finished_event = null
            }
            get PreviewTitleType() {
                return this.title_type
            }
            set PreviewTitleType(e) {
                if (e >= this.title_sprite_config.length) return;
                this.title_type = e;
                let t = this.title_sprite_config[this.title_type];
                this.Light1.color = t.color, this.title_sprite.spriteFrame = t.sprite_frame
            }
            onLoad() {
                this.anim.on("finished", this.onFinished.bind(this))
            }
            Play(e, t, i = "TitleDown") {
                let n = null;
                switch (e) {
                    case s.ITEM_ID.FREEZE:
                        n = this.title_sprite_config[0];
                        break;
                    case s.ITEM_ID.SUMMON:
                        n = this.title_sprite_config[1]
                }
                n && (this.Light1.color = n.color, this.title_sprite.spriteFrame = n.sprite_frame, t && (this.anim_finished_event = t), this.anim.play(i))
            }
            onFinished() {
                this.anim_finished_event && (this.anim_finished_event(this), this.anim_finished_event = null, this._nodeResrt(this.title_sprite.node), this._nodeResrt(this.Light1), this._nodeResrt(this.Light2), this._nodeResrt(this.root), this._nodeResrt(this.node))
            }
            _nodeResrt(e) {
                e.setPosition(cc.Vec2.ZERO), e.angle = 0, e.setScale(1), e.opacity = 255
            }
        };
        n([o({
            type: cc.Enum(c)
        })], h.prototype, "PreviewTitleType", null), n([o([r])], h.prototype, "title_sprite_config", void 0), n([o(cc.Sprite)], h.prototype, "title_sprite", void 0), n([o(cc.Node)], h.prototype, "root", void 0), n([o(cc.Node)], h.prototype, "Light1", void 0), n([o(cc.Node)], h.prototype, "Light2", void 0), n([o(cc.Animation)], h.prototype, "anim", void 0), h = n([a, l], h), i.default = h, cc._RF.pop()
    }, {
        "../../System/ItemSystem": "ItemSystem"
    }],
    JELLY_FISH: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "80790NEUgNGzaBAcesFHX/8", "JELLY_FISH");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("../Common/EnumFilter"),
            a = e("./BaseFish"),
            o = e("./FishManager"),
            {
                ccclass: l,
                property: r
            } = cc._decorator;
        let c = class extends a.default {
            Init(e, t, i, n, s) {
                super.Init(e, t, i, n, s), this.o = parseInt(t) % 5 * 72
            }
            InitNormalBehavior(e, t = 0) {
                let i = o.default.Instance.GetFishByType(s.FishType.KingJellyFish);
                null != i ? (this.moveToScreenOut(), this.startPos = i.node.getPosition(), this.syncTime = t, this.getPosArray(e)) : this.FishOut()
            }
        };
        c = n([l], c), i.default = c, cc._RF.pop()
    }, {
        "../Common/EnumFilter": "EnumFilter",
        "./BaseFish": "BaseFish",
        "./FishManager": "FishManager"
    }],
    JsonUtils: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "70e2bQR8lZMua7BtEOFDOIe", "JsonUtils");
        var n = this && this.__awaiter || function(e, t, i, n) {
            return new(i || (i = Promise))(function(s, a) {
                function o(e) {
                    try {
                        r(n.next(e))
                    } catch (t) {
                        a(t)
                    }
                }

                function l(e) {
                    try {
                        r(n.throw(e))
                    } catch (t) {
                        a(t)
                    }
                }

                function r(e) {
                    var t;
                    e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                        e(t)
                    })).then(o, l)
                }
                r((n = n.apply(e, t || [])).next())
            })
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        }), i.CheckJson = i.LoadJson = void 0, i.LoadJson = e => n(void 0, void 0, void 0, function*() {
            let t = {};
            return yield new Promise(function(i, n) {
                let s = e.indexOf("/"),
                    a = e.substring(0, s),
                    o = e.substring(s + 1, e.length),
                    l = cc.assetManager.getBundle(a);
                l ? l.load(o, function(e, s) {
                    if (e) return cc.error(e), void n();
                    t = s.json, cc.assetManager.releaseAsset(s), i(null)
                }) : console.error("Get bundle failed, bundlename = " + a)
            }), t
        }), i.CheckJson = e => n(void 0, void 0, void 0, function*() {
            yield new Promise(function(t, i) {
                let n = e.indexOf("/"),
                    s = e.substring(0, n),
                    a = e.substring(n + 1, e.length),
                    o = cc.assetManager.getBundle(s);
                o ? o.load(a, function(e, n) {
                    e ? i() : (cc.assetManager.releaseAsset(n), t(null))
                }) : console.error("Get bundle failed, bundlename = " + s)
            })
        }), cc._RF.pop()
    }, {}],
    KILLER_WHALE: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "b6c06hpb+9KEYRPJAGxxgAp", "KILLER_WHALE");
        var n = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            s = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("./BaseFish"),
            {
                ccclass: o,
                property: l
            } = cc._decorator;
        let r = class extends a.default {
            constructor() {
                super(...arguments), this.skeleton = null, this.ColliderList = [], this.BonesName = [], this.boneNum = 5, this.bone = null, this.LinkPointCount = 0
            }
            Init(e, t) {
                super.Init(e, t), this.shapeNode = this.node.getChildByName("Shape"), this.bone = new Array(this.boneNum);
                for (let i = 0; i < this.boneNum; i++) this.bone[i] = this.skeleton.findBone(this.BonesName[i]);
                this.skeleton.timeScale = 1, this.skeleton.setAnimation(0, "SWIM", !0)
            }
            InitPath(e, t, i, n, a = 0, o = 0, l = 0, r = 0, c = 0, h = 0) {
                const d = Object.create(null, {
                    InitPath: {
                        get: () => super.InitPath
                    }
                });
                return s(this, void 0, void 0, function*() {
                    d.InitPath.call(this, e, t, i, n, a, o, l, r, c, h), this.shapeNode = this.node.getChildByName("Shape"), this.bone = new Array(this.boneNum);
                    for (let e = 0; e < this.boneNum; e++) this.bone[e] = this.skeleton.findBone(this.BonesName[e]);
                    this.skeleton.timeScale = 1, this.skeleton.setAnimation(0, "SWIM", !0)
                })
            }
            FishDie(e, t = !0, i) {
                const n = Object.create(null, {
                    FishDie: {
                        get: () => super.FishDie
                    }
                });
                return s(this, void 0, void 0, function*() {
                    this.skeleton.setAnimation(0, "CATCH", !0), n.FishDie.call(this, e, t, i)
                })
            }
            update(e) {
                if (super.update(e), this.LinkPointCount < 5) this.LinkPointCount++;
                else {
                    this.LinkPointCount = 0, this.skeleton.updateWorldTransform();
                    for (let e = 0; e < this.boneNum; e++) this.ColliderList[e].node.setPosition(new cc.Vec2(-this.bone[e].worldX, -this.bone[e].worldY))
                }
            }
            PauseBehavior(e, t) {
                super.PauseBehavior(e, t), this.skeleton.paused = !0
            }
            ResumeBehavior() {
                super.ResumeBehavior(), this.skeleton.paused = !1
            }
            RemoveSelf() {
                this.skeleton.setEventListener(null), this.skeleton.clearTracks(), super.RemoveSelf()
            }
        };
        n([l(sp.Skeleton)], r.prototype, "skeleton", void 0), n([l([cc.Collider])], r.prototype, "ColliderList", void 0), n([l([cc.String])], r.prototype, "BonesName", void 0), r = n([o], r), i.default = r, cc._RF.pop()
    }, {
        "./BaseFish": "BaseFish"
    }],
    KING_ANGLER_FISH: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "2ab390wyEJKS41wz2Svv9PR", "KING_ANGLER_FISH");
        var n = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            s = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            o = e("../Background/AngleBackground"),
            l = e("../Common/AudioManager"),
            r = e("../Common/EnumFilter"),
            c = e("../Common/ResourceManager"),
            h = e("../Game/GameManager"),
            d = e("./BaseFish"),
            {
                ccclass: u,
                property: m
            } = cc._decorator;
        let p = class extends d.default {
            constructor() {
                super(...arguments), this.ColliderList = new Array, this.BonesName = new Array, this.skeleton = null, this.bone = null, this.Top_Mask = null, this.Bottom_Mask = null, this.BackGround = null, this.FishPool = null
            }
            Init(e, t) {
                var i, n;
                switch (super.Init(e, t), SS.Common.GameEnvironment.CurrentGameNow) {
                    case r.FishGame.GO:
                        this.isFeature = !0;
                        break;
                    default:
                        this.isFeature = !1
                }
                this.o = 0, this.shapeNode = this.node.getChildByName("Shape"), this.shapeNode && (this.shapeNode.opacity = 255), this.bone = new Array(this.BonesName.length);
                for (let s = 0; s < this.BonesName.length; s++) this.bone[s] = this.skeleton.findBone(this.BonesName[s]);
                this.skeleton.timeScale = 1, this.skeleton.setAnimation(0, "SWIM", !0), this.BackGround = h.default.Instance.BackgroundNow, this.Top_Mask = this.BackGround.Top_Mask, this.Bottom_Mask = this.BackGround.Bottom_Mask, this.Top_Mask && this.Top_Mask.isValid && (null === (i = this.Top_Mask) || void 0 === i || i.setParent(this.ColliderList[0].node), null === (n = this.Top_Mask) || void 0 === n || n.setPosition(cc.Vec2.ZERO)), o.default.isOccupied = !!this.Top_Mask, this.FishPool = c.default.Instance.Fishes
            }
            InitSeek(e, t, i) {
                if (this.behaviorType = d.BEHAVIOR_TYPE.SEEK, this.AISeek) {
                    t = t || this.o % this.AISeek.GetPathCount(e);
                    const n = this.getOffset(this.o % 4);
                    this.AISeek.SetSeek(e, t, this.node, this.id, 0, n, this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this), i)
                }
            }
            update(e) {
                super.update(e), this.bone = new Array(this.BonesName.length);
                for (let t = 0; t < this.BonesName.length; t++) this.bone[t] = this.skeleton.findBone(this.BonesName[t]);
                this.skeleton.updateWorldTransform();
                for (let t = 0; t < this.bone.length; t++) this.ColliderList[t].node.setPosition(new cc.Vec2(this.bone[t].worldX, this.bone[t].worldY));
                if (this.Top_Mask && this.Top_Mask.activeInHierarchy && this.Bottom_Mask && this.Bottom_Mask.activeInHierarchy) {
                    let e = this.Top_Mask.convertToWorldSpaceAR(cc.Vec2.ZERO);
                    this.Bottom_Mask.setPosition(this.BackGround.node.convertToNodeSpaceAR(e))
                }
            }
            FishOut(e) {
                this.DropMask(), super.FishOut(e)
            }
            FishDie(e) {
                return s(this, void 0, void 0, function*() {
                    o.default.isOccupied = !1, this.aliveStatus = d.FishState.DEAD, this.canCollision = !1, this.skeleton.timeScale = 0, this.StopAction(), l.default.Instance.Play("catch_lantern");
                    let e = cc.sequence(cc.repeat(cc.sequence(cc.moveTo(.05, this.node.getPosition().add(new cc.Vec2(10, 10))), cc.moveTo(.05, this.node.getPosition().add(new cc.Vec2(-10, -10)))), 15), cc.delayTime(.4), cc.callFunc(() => {
                        a.default.CameraShakeEffect(1.5, 3), this.CoinEffect(), this.shapeNode.runAction(cc.fadeOut(.5))
                    }), cc.delayTime(2.5), cc.callFunc(() => {
                        o.default.isOccupied || this.DropMask(), this.RemoveSelf()
                    }));
                    this.node.runAction(e), yield this.delay(1e3), l.default.Instance.Play("41_catch_bigfish")
                })
            }
            DropMask() {
                this.Top_Mask && this.Top_Mask.activeInHierarchy && (this.Top_Mask.setParent(this.FishPool), this.Top_Mask.zIndex = 50, this.Top_Mask.setPosition(new cc.Vec2(-1350, 1600))), this.Bottom_Mask && this.Bottom_Mask.activeInHierarchy && this.Bottom_Mask.setPosition(new cc.Vec2(-1350, 1600)), this.Top_Mask = null, this.Bottom_Mask = null
            }
            PauseBehavior(e, t) {
                super.PauseBehavior(e, t), this.skeleton.paused = !0
            }
            ResumeBehavior() {
                super.ResumeBehavior(), this.skeleton.paused = !1
            }
            RemoveSelf() {
                this.skeleton.setEventListener(null), this.skeleton.clearTracks(), super.RemoveSelf()
            }
            getFishPos() {
                return this.node.convertToWorldSpaceAR(cc.Vec2.ZERO)
            }
        };
        n([m([cc.Collider])], p.prototype, "ColliderList", void 0), n([m([cc.String])], p.prototype, "BonesName", void 0), n([m(sp.Skeleton)], p.prototype, "skeleton", void 0), p = n([u], p), i.default = p, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../Background/AngleBackground": "AngleBackground",
        "../Common/AudioManager": "AudioManager",
        "../Common/EnumFilter": "EnumFilter",
        "../Common/ResourceManager": "ResourceManager",
        "../Game/GameManager": "GameManager",
        "./BaseFish": "BaseFish"
    }],
    KING_JELLY_FISH: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "79583sHhPdJE4G3b00pwgzR", "KING_JELLY_FISH");
        var n = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            s = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            o = e("../Common/AudioManager"),
            l = e("./BaseFish"),
            {
                ccclass: r,
                property: c
            } = cc._decorator;
        let h = class extends l.default {
            constructor() {
                super(...arguments), this.skeleton = null, this.ice_group = [], this.size = 0
            }
            InitParameter() {
                super.InitParameter(), this.size = 0, this.parameter && this.parameter.hasOwnProperty("size") && this.changeLevel(this.parameter.size), this.shapeNode = this.node.getChildByName("Shape"), this.shapeNode && (this.shapeNode.opacity = 255), this.skeleton.timeScale = 1, this.skeleton.setAnimation(0, "Swim", !0)
            }
            FishDie(e) {
                return s(this, void 0, void 0, function*() {
                    this.aliveStatus = l.FishState.DEAD, this.canCollision = !1, this.skeleton.timeScale = 0, this.ice_group.forEach(e => {
                        e.active = !1
                    });
                    let e = cc.sequence(cc.repeat(cc.sequence(cc.moveTo(.05, this.node.getPosition().add(new cc.Vec2(10, 10))), cc.moveTo(.05, this.node.getPosition().add(new cc.Vec2(-10, -10)))), 15), cc.delayTime(.4), cc.callFunc(() => {
                        a.default.CameraShakeEffect(1.5, 3), this.CoinEffect(2), this.shapeNode.runAction(cc.fadeOut(.5))
                    }), cc.delayTime(2.5), cc.callFunc(() => {
                        this.RemoveSelf()
                    }));
                    this.node.runAction(e), yield this.delay(1e3), o.default.Instance.Play("41_catch_bigfish")
                })
            }
            changeLevel(e) {
                if (this.size > e) return;
                this.size = e;
                let t = .01 * e;
                t < .8 && (t = .8), t > 1.8 && (t = 1.8), this.node.scale = t
            }
            moveToScreenOut() {
                const e = cc.v2(a.default.WinSize.width, a.default.WinSize.height);
                this.x -= 45, this.y -= 45, this.y *= -1, this.o += 90;
                const t = .004 * e.x * this.x,
                    i = .004 * e.y * this.y,
                    n = Math.tan(-cc.misc.degreesToRadians(this.o)),
                    s = -n * t + i;
                let o = 400 + 2 * this.size,
                    l = .5 * -e.x - o,
                    r = .5 * e.x + o,
                    c = .5 * e.y + o,
                    h = .5 * -e.y - o,
                    d = [cc.v2(l, n * l + s), cc.v2((s - h) / -n, h), cc.v2(r, n * r + s), cc.v2((s - c) / -n, c)],
                    u = [0, 1],
                    m = [cc.v2(cc.Vec2.ZERO.sub(d[0])).mag(), cc.v2(cc.Vec2.ZERO.sub(d[1])).mag()];
                for (let a = 1; a < d.length; a++) {
                    let e = cc.v2(cc.Vec2.ZERO.sub(d[a])).mag();
                    e <= m[0] ? (m[1] = m[0], m[0] = e, u[1] = u[0], u[0] = a) : e <= m[1] && (m[1] = e, u[1] = a)
                }
                let p = d[u[0]].y,
                    f = d[u[1]].y;
                this.o > 180 && this.o < 360 ? p < f ? (this.startPos = d[u[0]], this.targetPos = d[u[1]]) : (this.startPos = d[u[1]], this.targetPos = d[u[0]]) : p < f ? (this.startPos = d[u[1]], this.targetPos = d[u[0]]) : (this.startPos = d[u[0]], this.targetPos = d[u[1]])
            }
            PauseBehavior(e, t) {
                this.aliveStatus == l.FishState.ALIVE && (super.PauseBehavior(e, t), this.skeleton.paused = !0, this.ice_group.forEach(e => {
                    e.active = !0
                }))
            }
            ResumeBehavior() {
                super.ResumeBehavior(), this.skeleton.paused = !1, this.ice_group.forEach(e => {
                    e.active = !1
                })
            }
        };
        n([c(sp.Skeleton)], h.prototype, "skeleton", void 0), n([c([cc.Node])], h.prototype, "ice_group", void 0), h = n([r], h), i.default = h, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../Common/AudioManager": "AudioManager",
        "./BaseFish": "BaseFish"
    }],
    KING_LACOSTE: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "d5283ArJz5FGqhz77WOlqkU", "KING_LACOSTE");
        var n = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            s = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("./BaseFish"),
            o = e("../Common/ResourceManager"),
            l = e("../Weapon/WeaponManager"),
            r = e("../Game/GameManager"),
            c = e("../Common/AudioManager"),
            h = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            d = e("../Common/EnumFilter"),
            {
                ccclass: u,
                property: m
            } = cc._decorator;
        let p = class extends a.default {
            constructor() {
                super(...arguments), this.skeleton = null, this.FishPool = null, this.HidePool = null, this.TargetSeat = -1, this.TargetPos = null, this.Attack = !1, this.isFreeze = !1
            }
            Init(e, t) {
                switch (super.Init(e, t), SS.Common.GameEnvironment.CurrentGameNow) {
                    case d.FishGame.GO:
                        this.isFeature = !0;
                        break;
                    default:
                        this.isFeature = !1
                }
                this.TargetSeat = -1, this.TargetPos = null, this.Attack = !1, this.isFreeze = !1, this.shapeNode = this.node.getChildByName("Shape"), this.skeleton.node.opacity = 255, this.skeleton.timeScale = 1, this.skeleton.setAnimation(0, "SWIM", !0), this.FishPool = this.node.parent;
                let i = r.default.Instance.BackgroundNow;
                i && (this.HidePool = i.node.getChildByName("LacosteHide")), this.HidePool && (this.node.parent = this.HidePool), this.scheduleOnce(() => {
                    let e = -this.node.angle < 0 ? 360 - this.node.angle : -this.node.angle;
                    switch (Math.floor(e / 90)) {
                        case 0:
                            this.TargetSeat = 1;
                            break;
                        case 1:
                            this.TargetSeat = 0;
                            break;
                        case 2:
                            this.TargetSeat = 3;
                            break;
                        case 3:
                            this.TargetSeat = 2
                    }
                    this.TargetPos = l.default.WeaponPosition(this.TargetSeat)
                }, 1)
            }
            InitSeek(e, t, i) {
                if (this.behaviorType = a.BEHAVIOR_TYPE.SEEK, this.AISeek) {
                    t = t || this.o % this.AISeek.GetPathCount(e);
                    const n = this.getOffset(this.o % 4);
                    this.AISeek.SetSeek(e, t, this.node, this.id, 0, n, this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this), i)
                }
            }
            update(e) {
                if (super.update(e), !this.Attack && this.aliveStatus == a.FishState.ALIVE && this.TargetPos && this.node.getPosition().sub(this.TargetPos).mag() <= 650 && !this.isFreeze) {
                    if (this.Attack = !0, !l.default.Instance.getWeapon(this.TargetSeat)) return;
                    this.StartAttack()
                }
            }
            StartAttack() {
                return s(this, void 0, void 0, function*() {
                    let e = l.default.Instance.getWeapon(this.TargetSeat).node,
                        t = e.getPosition();
                    this.skeleton.setCompleteListener(() => {
                        this.skeleton.setCompleteListener(null), this.skeleton.setAnimation(0, "SWIM", !0)
                    }), this.skeleton.setAnimation(0, "BITE", !1), c.default.Instance.Play("cavial_bite"), this.FishPool && this.HidePool && (this.node.parent = this.FishPool, this.node.zIndex = 50);
                    let i = e.opacity;
                    if (yield this.delay(1300), this.isFreeze) return;
                    e.opacity = 0, yield this.delay(250), e.opacity = i;
                    let n = o.default.SpawnEffect("WeaponBreak");
                    n && (n.setPosition(e.getPosition()), n.angle = e.angle), c.default.Instance.Play("frog_crocodile");
                    let s = 3;
                    e.runAction(cc.sequence(cc.repeat(cc.sequence(cc.moveTo(.05, e.getPosition().add(new cc.Vec2(s, -s))), cc.moveTo(.05, e.getPosition().add(new cc.Vec2(-s, s)))), 10), cc.callFunc(() => {
                        e.setPosition(t), s = 1
                    }), cc.repeat(cc.sequence(cc.moveTo(.05, e.getPosition().add(new cc.Vec2(-s, s))), cc.moveTo(.05, e.getPosition().add(new cc.Vec2(s, -s)))), 5), cc.callFunc(() => {
                        e.setPosition(t), s = .1
                    }), cc.repeat(cc.sequence(cc.moveTo(.05, e.getPosition().add(new cc.Vec2(s, s))), cc.moveTo(.05, e.getPosition().add(new cc.Vec2(-s, -s)))), 5), cc.callFunc(() => {
                        e.setPosition(t)
                    })))
                })
            }
            PauseBehavior(e, t) {
                super.PauseBehavior(e, t), this.skeleton.paused = !0, e > 0 && (this.isFreeze = !0)
            }
            ResumeBehavior() {
                super.ResumeBehavior(), this.skeleton.paused = !1
            }
            SpeedUp() {
                this.mSeek && this.aliveStatus == a.FishState.ALIVE && this.mSeek.AddSpeed(200, 1e3)
            }
            FishDie(e) {
                return s(this, void 0, void 0, function*() {
                    this.FishPool && this.HidePool && (this.node.parent = this.FishPool, this.node.zIndex = 50), c.default.Instance.Play("catch_cavial"), this.aliveStatus = a.FishState.DEAD, this.canCollision = !1, this.skeleton.timeScale = 0, this.StopAction();
                    let e = cc.sequence(cc.repeat(cc.sequence(cc.moveTo(.05, this.node.getPosition().add(new cc.Vec2(10, 10))), cc.moveTo(.05, this.node.getPosition().add(new cc.Vec2(-10, -10)))), 15), cc.delayTime(.4), cc.callFunc(() => {
                        h.default.CameraShakeEffect(1.5, 3), this.CoinEffect(), this.shapeNode.runAction(cc.fadeOut(.5))
                    }), cc.delayTime(2.5), cc.callFunc(() => {
                        this.RemoveSelf()
                    }));
                    this.node.runAction(e), yield this.delay(1e3), c.default.Instance.Play("41_catch_bigfish")
                })
            }
            onMove(e) {
                e.AddSpeed(220, 1e3)
            }
            RemoveSelf() {
                this.skeleton.setEventListener(null), this.skeleton.clearTracks(), super.RemoveSelf()
            }
        };
        n([m(sp.Skeleton)], p.prototype, "skeleton", void 0), p = n([u], p), i.default = p, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../Common/AudioManager": "AudioManager",
        "../Common/EnumFilter": "EnumFilter",
        "../Common/ResourceManager": "ResourceManager",
        "../Game/GameManager": "GameManager",
        "../Weapon/WeaponManager": "WeaponManager",
        "./BaseFish": "BaseFish"
    }],
    KING_SPIDER_CRAB: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "c6c4abcjXVDFYMU52TB3Mdv", "KING_SPIDER_CRAB");
        var n = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            s = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            o = e("../Common/AudioManager"),
            l = e("../Common/ResourceManager"),
            r = e("./BaseFish"),
            {
                ccclass: c,
                property: h
            } = cc._decorator;
        let d = class extends r.default {
            constructor() {
                super(...arguments), this.hitEffect = [], this.path_index = 0, this.turning_array = [], this.speed_array = [], this.step = 0, this.speed_time = 0, this.last_turning = !1
            }
            Init(e, t, i, n, s) {
                super.Init(e, t, i, n, s), this.o = 0, this.node.setPosition(cc.Vec2.ZERO), this.shapeNode = this.node.getChildByName("Shape"), this.shapeNode.runAction(cc.fadeIn(.5)), this.path_index = s.init, this.turning_array = s.turning, this.speed_array = s.speed
            }
            InitSeek(e, t, i) {
                if (this.AISeek) {
                    this.path_index = t || this.path_index;
                    const n = this.getOffset(this.o % 4);
                    let s = 0;
                    s = 0 == this.path_index ? 0 : 180, i.angle = s, this.AISeek.SetSeek(e, this.path_index, this.node, this.id, this.o, n, this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this), i)
                }
            }
            update(e) {
                super.update(e), this.speed_time <= 0 || (this.speed_time -= e, this.speed_time <= 0 && this.mSeek.ResetSpeedScale())
            }
            onMove(e) {
                const t = Boolean(this.turning_array[this.step]);
                this.step++, this.step >= 5 && (this.step = 0), !t || this.speed_time > 0 || (this.last_turning = e.IsReverse, this.speed_time = this.speed_array[this.step], e.SetSpeedScale(2, this.speed_time), e.Reverse(!this.last_turning), e.SetOriginAngle(e.OriginAngle + (this.last_turning ? 180 : -180), 1.25))
            }
            onEnd(e) {
                var t = cc.sequence(cc.fadeOut(.5), cc.callFunc(() => {
                    this.FishOut(r.FishOutType.FISH_PATH_FINISH)
                }));
                this.node.runAction(t)
            }
            FishFadeOut(e = .5, t) {
                this.mSeek.Pause(), super.FishFadeOut(e, t)
            }
            OnHitFish() {
                return s(this, void 0, void 0, function*() {
                    if (!this.shapeNode && (this.shapeNode = this.node.getChildByName("Shape"), !this.shapeNode)) return;
                    let e = this.shapeNode.children;
                    for (let t = 0; t < e.length; t++) this.hitEffect[t] && (this.hitEffect[t].isDone || (e[t].stopAction(this.hitEffect[t]), this.hitEffect = null, e[t].color = cc.Color.WHITE));
                    for (let t = 0; t < e.length; t++) {
                        let i = cc.repeat(cc.sequence(cc.tintTo(.1, 200, 0, 0), cc.tintTo(.1, 255, 255, 255)), 2);
                        this.hitEffect.push(i), yield e[t].runAction(i)
                    }
                })
            }
            FishDie(e) {
                return s(this, void 0, void 0, function*() {
                    this.PlayDieAnim(), this.aliveStatus = r.FishState.DEAD, this.canCollision = !1, this.StopAction(), o.default.Instance.Play("catch_crab");
                    let e = cc.sequence(cc.repeat(cc.sequence(cc.moveTo(.05, this.node.getPosition().add(new cc.Vec2(10, 10))), cc.moveTo(.05, this.node.getPosition().add(new cc.Vec2(-10, -10)))), 15), cc.delayTime(.4), cc.callFunc(() => {
                        a.default.CameraShakeEffect(1.5, 3);
                        const e = l.default.SpawnEffect("CoinBlast");
                        e && (e.setPosition(this.node.getPosition()), e.scale = 2), this.shapeNode.runAction(cc.fadeOut(.5))
                    }), cc.delayTime(2.5), cc.callFunc(() => {
                        this.RemoveSelf()
                    }));
                    this.node.runAction(e), yield this.delay(1e3), o.default.Instance.Play("41_catch_bigfish")
                })
            }
        };
        d = n([c], d), i.default = d, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../Common/AudioManager": "AudioManager",
        "../Common/ResourceManager": "ResourceManager",
        "./BaseFish": "BaseFish"
    }],
    KING_SQUID: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "f9991EMVxJGFZdW0XqB57ww", "KING_SQUID");
        var n = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            s = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            o = e("../Common/AudioManager"),
            l = e("./BaseFish"),
            {
                ccclass: r,
                property: c
            } = cc._decorator;
        let h = class extends l.default {
            constructor() {
                super(...arguments), this.skeleton = null, this.ice_group = [], this.size = 0
            }
            InitParameter() {
                super.InitParameter(), this.size = 0, this.parameter && this.parameter.hasOwnProperty("size") && this.changeLevel(this.parameter.size), this.shapeNode = this.node.getChildByName("Shape"), this.shapeNode && (this.shapeNode.opacity = 255), this.skeleton.timeScale = 1, this.skeleton.setAnimation(0, "swim", !0)
            }
            FishDie(e) {
                return s(this, void 0, void 0, function*() {
                    this.aliveStatus = l.FishState.DEAD, this.canCollision = !1, this.skeleton.timeScale = 0, this.ice_group.forEach(e => {
                        e.active = !1
                    });
                    let e = cc.sequence(cc.repeat(cc.sequence(cc.moveTo(.05, this.node.getPosition().add(new cc.Vec2(10, 10))), cc.moveTo(.05, this.node.getPosition().add(new cc.Vec2(-10, -10)))), 15), cc.delayTime(.4), cc.callFunc(() => {
                        a.default.CameraShakeEffect(1.5, 3), this.CoinEffect(2), this.shapeNode.runAction(cc.fadeOut(.5))
                    }), cc.delayTime(2.5), cc.callFunc(() => {
                        this.RemoveSelf()
                    }));
                    this.node.runAction(e), yield this.delay(1e3), o.default.Instance.Play("41_catch_bigfish")
                })
            }
            changeLevel(e) {
                if (this.size > e) return;
                this.size = e;
                let t = .01 * e;
                e < .8 && (e = .8), e > 1.8 && (e = 1.8), this.node.scale = t
            }
            moveToScreenOut() {
                const e = cc.v2(a.default.WinSize.width, a.default.WinSize.height);
                this.x -= 45, this.y -= 45, this.y *= -1, this.o += 90;
                const t = .004 * e.x * this.x,
                    i = .004 * e.y * this.y,
                    n = Math.tan(-cc.misc.degreesToRadians(this.o)),
                    s = -n * t + i;
                let o = 400 + 2 * this.size,
                    l = .5 * -e.x - o,
                    r = .5 * e.x + o,
                    c = .5 * e.y + o,
                    h = .5 * -e.y - o,
                    d = [cc.v2(l, n * l + s), cc.v2((s - h) / -n, h), cc.v2(r, n * r + s), cc.v2((s - c) / -n, c)],
                    u = [0, 1],
                    m = [cc.v2(cc.Vec2.ZERO.sub(d[0])).mag(), cc.v2(cc.Vec2.ZERO.sub(d[1])).mag()];
                for (let a = 1; a < d.length; a++) {
                    let e = cc.v2(cc.Vec2.ZERO.sub(d[a])).mag();
                    e <= m[0] ? (m[1] = m[0], m[0] = e, u[1] = u[0], u[0] = a) : e <= m[1] && (m[1] = e, u[1] = a)
                }
                let p = d[u[0]].y,
                    f = d[u[1]].y;
                this.o > 180 && this.o < 360 ? p < f ? (this.startPos = d[u[0]], this.targetPos = d[u[1]]) : (this.startPos = d[u[1]], this.targetPos = d[u[0]]) : p < f ? (this.startPos = d[u[1]], this.targetPos = d[u[0]]) : (this.startPos = d[u[0]], this.targetPos = d[u[1]])
            }
            PauseBehavior(e, t) {
                this.aliveStatus == l.FishState.ALIVE && (super.PauseBehavior(e, t), this.skeleton.paused = !0, this.ice_group.forEach(e => {
                    e.active = !0
                }))
            }
            ResumeBehavior() {
                super.ResumeBehavior(), this.skeleton.paused = !1, this.ice_group.forEach(e => {
                    e.active = !1
                })
            }
        };
        n([c(sp.Skeleton)], h.prototype, "skeleton", void 0), n([c([cc.Node])], h.prototype, "ice_group", void 0), h = n([r], h), i.default = h, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../Common/AudioManager": "AudioManager",
        "./BaseFish": "BaseFish"
    }],
    KING_TACO: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "6a504DOXX5GMpFuMVo12iYT", "KING_TACO");
        var n = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            s = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            o = e("../../System/FishSystem"),
            l = e("../Background/TacoBackground"),
            r = e("../Common/AudioManager"),
            c = e("../Common/EnumFilter"),
            h = e("../Game/GameManager"),
            d = e("./BaseFish"),
            {
                ccclass: u,
                property: m
            } = cc._decorator;
        let p = class extends d.default {
            constructor() {
                super(...arguments), this.Skeleton = null, this.Collider = null, this.BonesName = "", this.GreenSight = null, this.ice_group = [], this.boneNum = 1, this.bone = null, this.Life = null, this.HoldUp = null
            }
            Init(e, t, i, n) {
                switch (super.Init(e, t, i, n), SS.Common.GameEnvironment.CurrentGameNow) {
                    case c.FishGame.GO:
                        this.isFeature = !0;
                        break;
                    default:
                        this.isFeature = !1
                }
                this.Life = () => {
                    this.FishFadeOut(.5, d.FishOutType.FISH_PATH_FINISH)
                }, this.scheduleOnce(this.Life, 15), this.getTacoParent(e[o.FishData.type]) ? this.ShowUp() : (this.shapeNode.opacity = 0, this.GreenSight.opacity = 0, this.CanCollision = !1, this.HoldUp = () => {
                    this.getTacoParent(e[o.FishData.type]) ? this.ShowUp() : this.FishOut(d.FishOutType.FISH_OUT)
                }, this.scheduleOnce(this.HoldUp, 5))
            }
            getTacoParent(e) {
                let t = null;
                if (h.default.Instance.BackgroundNow) {
                    let i = h.default.Instance.BackgroundNow.getComponent(l.default);
                    i && (t = i.getParent(e))
                }
                return t ? (this.node.setParent(t), !0) : (cc.warn("Can't find Taco parent"), !1)
            }
            ShowUp() {
                this.CanCollision = !0, this.bone = this.Skeleton.findBone(this.BonesName), this.shapeNode.opacity = 255, this.Skeleton.timeScale = 1, this.Skeleton.setCompleteListener(() => {
                    this.Skeleton.setCompleteListener(null), this.Skeleton.setAnimation(0, "SWIM", !0)
                }), this.Skeleton.setAnimation(0, "INTO", !1), this.GreenSight.opacity = 0, this.GreenSight.active = !0, this.GreenSight.runAction(cc.fadeIn(1)), this.GreenSight.runAction(cc.repeatForever(cc.rotateBy(2, 360)))
            }
            FishDie(e) {
                return s(this, void 0, void 0, function*() {
                    r.default.Instance.Play("catch_octopus"), this.aliveStatus = d.FishState.DEAD, this.canCollision = !1, this.Skeleton.timeScale = 0, this.GreenSight.active = !1, this.unschedule(this.Life), this.Life = null;
                    let e = cc.sequence(cc.repeat(cc.sequence(cc.moveTo(.05, this.node.getPosition().add(new cc.Vec2(10, 10))), cc.moveTo(.05, this.node.getPosition().add(new cc.Vec2(-10, -10)))), 15), cc.delayTime(.4), cc.callFunc(() => {
                        a.default.CameraShakeEffect(1.5, 3), this.CoinEffect(2), this.shapeNode.runAction(cc.fadeOut(.5))
                    }), cc.delayTime(2.5), cc.callFunc(() => {
                        this.RemoveSelf()
                    }));
                    this.node.runAction(e), yield this.delay(1e3), r.default.Instance.Play("41_catch_bigfish")
                })
            }
            update(e) {
                super.update(e), this.Skeleton.updateWorldTransform(), this.bone && this.Collider.node.setPosition(new cc.Vec2(this.bone.worldX, this.bone.worldY)), this.GreenSight.setPosition(this.Collider.node.getPosition())
            }
            FishFadeOut(e = .5, t) {
                this.canCollision = !1, this.GreenSight.active = !1, this.unschedule(this.Life), this.Life = null, this.unschedule(this.HoldUp), this.HoldUp = null, this.Skeleton.timeScale = 1, this.Skeleton.setCompleteListener(() => {
                    this.Skeleton.setCompleteListener(null), this.Skeleton.timeScale = 0, this.FishOut(t)
                }), this.Skeleton.setAnimation(0, "LEAVE", !1)
            }
            PauseBehavior(e, t) {
                this.aliveStatus == d.FishState.ALIVE && (super.PauseBehavior(e, t), this.Skeleton.paused = !0, this.GreenSight.active = !1, this.ice_group.forEach(e => {
                    e.active = !0
                }))
            }
            ResumeBehavior() {
                super.ResumeBehavior(), this.Skeleton.paused = !1, this.Life && (this.GreenSight.active = !0), this.ice_group.forEach(e => {
                    e.active = !1
                })
            }
            RemoveSelf() {
                this.Skeleton.setEventListener(null), this.Skeleton.clearTracks(), super.RemoveSelf()
            }
        };
        n([m(sp.Skeleton)], p.prototype, "Skeleton", void 0), n([m(cc.Collider)], p.prototype, "Collider", void 0), n([m(cc.String)], p.prototype, "BonesName", void 0), n([m(cc.Node)], p.prototype, "GreenSight", void 0), n([m([cc.Node])], p.prototype, "ice_group", void 0), p = n([u], p), i.default = p, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../../System/FishSystem": "FishSystem",
        "../Background/TacoBackground": "TacoBackground",
        "../Common/AudioManager": "AudioManager",
        "../Common/EnumFilter": "EnumFilter",
        "../Game/GameManager": "GameManager",
        "./BaseFish": "BaseFish"
    }],
    KioskSystem: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "a4f01FfCaBGorw61EXEnedh", "KioskSystem");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("./baseSystem"),
            {
                ccclass: a,
                property: o
            } = cc._decorator;
        let l = class extends s.default {
            constructor(...e) {
                super(e[0], "kiosk"), this.UpdateKioskSetting = null, this.UpdateSubmarineOccupyInfo = null, this.SubmarineOccupyEvent = null, this.RegisterCmdCallback("BroadCastSetting", this.onBroadCastSetting.bind(this)), this.RegisterCmdCallback("BroadCastSubmarineOccupyInfo", this.onBroadSubmarineOccupyInfo.bind(this))
            }
            onBroadCastSetting(e, t) {
                cc.log("[onBroadCastSetting]data...: " + JSON.stringify(t)), this.UpdateKioskSetting && this.UpdateKioskSetting(t)
            }
            onBroadSubmarineOccupyInfo(e, t) {
                this.UpdateSubmarineOccupyInfo && this.UpdateSubmarineOccupyInfo(t)
            }
            onSubmarineOccupyByOther(e, t) {
                this.SubmarineOccupyEvent && this.SubmarineOccupyEvent(t)
            }
        };
        l = n([a], l), i.default = l, cc._RF.pop()
    }, {
        "./baseSystem": "baseSystem"
    }],
    LockSettingWindow: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "a0176c4ADpGvKVL10P/smsE", "LockSettingWindow");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("./WindowCtrl"),
            a = e("../Common/EnumFilter"),
            o = e("../../../../../LobbyCommon/Net/LobbyClient"),
            l = e("../Common/AudioManager"),
            r = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            {
                ccclass: c,
                property: h
            } = cc._decorator;
        let d = class extends s.default {
            constructor() {
                super(...arguments), this.TogglesParent = null, this.LabelsParent = null, this.TouchZone = null, this.lockTarget = null, this.oddsList = null, this.unhitList = null, this.triggering = !1, this.changeList = null, this.togglePosX = null, this.togglePosY = null
            }
            Init(e) {
                if (!this.lockTarget && (this.lockTarget = this.TogglesParent.getComponentsInChildren(cc.Toggle), this.TouchZone)) {
                    this.togglePosX = new Array, this.togglePosY = new Array;
                    for (let e = 0; e < 7; e++) this.togglePosX.push(this.lockTarget[e].node.getPosition().x - this.lockTarget[e].node.width / 2), this.togglePosX.push(this.lockTarget[e].node.getPosition().x + this.lockTarget[e].node.width / 2);
                    for (let e = 0; e < Math.ceil(this.lockTarget.length / 7); e++) this.togglePosY.push(this.lockTarget[7 * e].node.getPosition().y + this.lockTarget[7 * e].node.height / 2), this.togglePosY.push(this.lockTarget[7 * e].node.getPosition().y - this.lockTarget[7 * e].node.height / 2);
                    this.TouchZone.on(cc.Node.EventType.TOUCH_START, this.startTrigger.bind(this)), this.TouchZone.on(cc.Node.EventType.TOUCH_CANCEL, this.endTrigger.bind(this)), this.TouchZone.on(cc.Node.EventType.TOUCH_END, this.endTrigger.bind(this)), this.TouchZone.on(cc.Node.EventType.TOUCH_MOVE, this.onTrigger.bind(this))
                }
                this.oddsList || (this.oddsList = this.LabelsParent.getComponentsInChildren(cc.Label)), e && (this.unhitList = e.UnhitList);
                for (let t = 0; t < a.default.LockOrder.length; t++) this.unhitList && -1 != this.unhitList.indexOf(a.default.LockOrder[t]) ? (this.lockTarget[t].node.opacity = 125, this.oddsList[t].node.opacity = 125) : (this.lockTarget[t].node.opacity = 255, this.oddsList[t].node.opacity = 255), this.lockTarget[t].isChecked = a.default.playerLockSetting && -1 != a.default.playerLockSetting.indexOf(a.default.LockOrder[t])
            }
            confirmClick() {
                l.default.Instance.PlayByAudioClipTable("LOCK_SETTING_OK_BTN");
                let e = [];
                for (let t = 0; t < this.lockTarget.length; t++) this.lockTarget[t].isChecked && (e.push(a.default.LockOrder[t]), o.LobbyClient.Instance.GetUserClient.recordClickLog("FishLockSetting", a.default.LockOrder[t]));
                if (0 == e.length) a.default.playerLockSetting = null, a.default.LockSetting = null;
                else {
                    a.default.playerLockSetting = e;
                    let t = Array.from(e);
                    if (this.unhitList)
                        for (let e = 0; e < this.unhitList.length; e++) {
                            let i = t.indexOf(this.unhitList[e]); - 1 != i && t.splice(i, 1)
                        }
                    a.default.LockSetting = a.default.TransFishTypeList(t)
                }
                this.SaveLockSetting(), null != this.BtnEvent[0] && this.BtnEvent[0]()
            }
            SaveLockSetting() {
                let e = "";
                null != a.default.playerLockSetting && (e = a.default.playerLockSetting.toString());
                let t = "LOCKSETTING_DATA_" + SS.Network.LoginModel.LoginInfo.pin_ark_id + "_ALD";
                JSUtility.IsSupportLocalStorage() ? localStorage.setItem(t, e) : JSUtility.IsSupportCookie() && (document.cookie = t + "=" + e + ";")
            }
            DefaultClick() {
                l.default.Instance.PlayByAudioClipTable("LOCK_SETTING_CLEAR_BTN");
                for (let e = 0; e < this.lockTarget.length; e++) this.lockTarget[e].isChecked = !1
            }
            startTrigger(e) {
                this.triggering = !0, this.changeList = new Array(this.lockTarget.length), this.isOnToggle(r.default.ConvMousePos(e.getLocation()))
            }
            endTrigger() {
                this.triggering = !1, this.changeList = null
            }
            onTrigger(e) {
                this.triggering && this.isOnToggle(r.default.ConvMousePos(e.getLocation()))
            }
            isOnToggle(e) {
                r.default.isReverse && e.mulSelf(-1);
                let t = -1;
                for (let s = 0; s < this.togglePosX.length; s++) e.x > this.togglePosX[s] && (t = s);
                if (t % 2 != 0) return;
                let i = -1;
                for (let s = 0; s < this.togglePosY.length; s++) e.y < this.togglePosY[s] && (i = s);
                if (i % 2 != 0) return;
                let n = i / 2 * 7 + t / 2;
                !this.changeList[n] && this.lockTarget[n] && (this.changeList[n] = !0, this.lockTarget[n].isChecked = !this.lockTarget[n].isChecked, this.lockTarget[n].isChecked ? l.default.Instance.PlayByAudioClipTable("LOCK_SETTING_SELECTED") : l.default.Instance.PlayByAudioClipTable("LOCK_SETTING_CANCEL"), cc.tween(this.lockTarget[n].node).to(.1, {
                    scale: 1.1
                }).to(.1, {
                    scale: 1
                }).start())
            }
        };
        n([h(cc.Node)], d.prototype, "TogglesParent", void 0), n([h(cc.Node)], d.prototype, "LabelsParent", void 0), n([h(cc.Node)], d.prototype, "TouchZone", void 0), d = n([c], d), i.default = d, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../../../../../LobbyCommon/Net/LobbyClient": void 0,
        "../Common/AudioManager": "AudioManager",
        "../Common/EnumFilter": "EnumFilter",
        "./WindowCtrl": "WindowCtrl"
    }],
    LockWeapon: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "ebd705zvnFP6Lpt42jl09Hw", "LockWeapon");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("./BaseWeapon"),
            a = e("./WeaponManager"),
            o = e("../../GameClient"),
            l = e("../Skill/BaseSkill"),
            r = e("../Common/EnumFilter"),
            {
                ccclass: c,
                property: h
            } = cc._decorator;
        let d = class extends s.default {
            constructor() {
                super(...arguments), this.fishIconImg = null, this.fishIconAnim = null, this.IconAtlas = null, this.currentAnimStr = "", this.skill = null, this.addSkill = !0, this.GetFishIconIndex = null
            }
            Init(e, t) {
                super.Init(e, t), this.Type = a.WeaponType.Lock, this.addSkill && (this.skill = o.default.SkillSystem.AddSkill(l.skillEnum.Lock, e), this.skill.setWeapon(this, t))
            }
            onEnable() {
                this.skill && (this.skill.enabled = !0)
            }
            onDisable() {
                this.skill && (this.skill.enabled = !1)
            }
            SetFishIcon(e) {
                if (!this.fishIconImg) return;
                let t = this.getFishIcon(e);
                t ? (this.fishIconImg.spriteFrame = t, this.fishIconImg.node.active = !0) : this.fishIconImg.node.active = !1
            }
            SetFishIconAnim(e) {
                this.fishIconAnim && this.currentAnimStr != (e ? "LockIconAnim_Loop" : "LockIconAnim_Idel") && (this.currentAnimStr = e ? "LockIconAnim_Loop" : "LockIconAnim_Idel", this.fishIconAnim.play(this.currentAnimStr))
            }
            ShootState(e) {
                return 0
            }
            UnloadWeapon() {
                this.skill && this.skill.UnUseSkill(), this.skill = null, this.fishIconAnim.stop(), super.UnloadWeapon()
            }
            stopLock() {
                this.skill && this.skill.setLocking(null)
            }
            getFishIcon(e) {
                switch (SS.Common.GameEnvironment.CurrentGameNow) {
                    case r.FishGame.ALD:
                        switch (e) {
                            case 0:
                            case 47:
                                return this.IconAtlas.getSpriteFrame("LI_Scarab");
                            case 25:
                                return this.IconAtlas.getSpriteFrame("LI_Poseidon");
                            case 82:
                                return this.IconAtlas.getSpriteFrame("LI_Genie");
                            case 83:
                                return this.IconAtlas.getSpriteFrame("LI_Aladdin")
                        }
                        break;
                    case r.FishGame.ZB:
                        switch (e) {
                            case 0:
                            case 47:
                                return this.IconAtlas.getSpriteFrame("LI_bat");
                            case 80:
                                return this.IconAtlas.getSpriteFrame("LI_Pariteship");
                            case 82:
                                return this.IconAtlas.getSpriteFrame("LI_skeleton")
                        }
                        break;
                    case r.FishGame.KK:
                        switch (e) {
                            case 25:
                                return this.IconAtlas.getSpriteFrame("LI_Poseidon");
                            case 80:
                                return this.IconAtlas.getSpriteFrame("LI_Pariteship");
                            case 81:
                                return this.IconAtlas.getSpriteFrame("LI_Ragingdragon");
                            case 82:
                                return this.IconAtlas.getSpriteFrame("LI_Kingkong")
                        }
                        break;
                    case r.FishGame.MTY:
                    case r.FishGame.MTYL:
                        switch (e) {
                            case 0:
                            case 47:
                                return this.IconAtlas.getSpriteFrame("LI_redbat");
                            case 2:
                                return this.IconAtlas.getSpriteFrame("LI_carp")
                        }
                        break;
                    case r.FishGame.CIR:
                        switch (e) {
                            case 13:
                                return this.IconAtlas.getSpriteFrame("LI_JokerFish");
                            case 80:
                                return this.IconAtlas.getSpriteFrame("LI_Pariteship")
                        }
                        break;
                    case r.FishGame.TD:
                        switch (e) {
                            case 18:
                                return this.IconAtlas.getSpriteFrame("LI_HumpbackWhale_TD");
                            case 20:
                                return this.IconAtlas.getSpriteFrame("LI_Klacoste_TD");
                            case 22:
                                return this.IconAtlas.getSpriteFrame("LI_eletriccrab_TD");
                            case 23:
                                return this.IconAtlas.getSpriteFrame("LI_eledrillcrab_TD");
                            case 24:
                                return this.IconAtlas.getSpriteFrame("LI_Crab_TD");
                            case 34:
                                return this.IconAtlas.getSpriteFrame("LI_bombcrab_TD");
                            case 35:
                                return this.IconAtlas.getSpriteFrame("LI_Klanternfish_TD");
                            case 61:
                            case 62:
                            case 63:
                            case 64:
                            case 65:
                            case 66:
                                return this.IconAtlas.getSpriteFrame("LI_Ktaco_TD");
                            case 77:
                                return this.IconAtlas.getSpriteFrame("LI_runnercrab_TD")
                        }
                        break;
                    case r.FishGame.WCF:
                        switch (e) {
                            case 4:
                                return this.IconAtlas.getSpriteFrame("LI_Lionfish");
                            case 7:
                                return this.IconAtlas.getSpriteFrame("LI_Swordfish");
                            case 9:
                                return this.IconAtlas.getSpriteFrame("LI_Jellyfish");
                            case 12:
                                return this.IconAtlas.getSpriteFrame("LI_Stingray_MC");
                            case 13:
                                return this.IconAtlas.getSpriteFrame("LI_JokerFish");
                            case 18:
                                return this.IconAtlas.getSpriteFrame("LI_ClumsyCat");
                            case 25:
                                return this.IconAtlas.getSpriteFrame("LI_Wondermaid");
                            case 80:
                                return this.IconAtlas.getSpriteFrame("LI_MightyBomb")
                        }
                        break;
                    case r.FishGame.LL:
                        switch (e) {
                            case 111:
                                return this.IconAtlas.getSpriteFrame("LI_GoldenShip");
                            case 114:
                                return this.IconAtlas.getSpriteFrame("LI_GoldenToad");
                            case 115:
                                return this.IconAtlas.getSpriteFrame("LI_SlotLobster")
                        }
                }
                switch (e) {
                    case 0:
                    case 47:
                        return this.IconAtlas.getSpriteFrame("LI_gurnard");
                    case 1:
                    case 48:
                        return this.IconAtlas.getSpriteFrame("LI_Snemo");
                    case 2:
                        return this.IconAtlas.getSpriteFrame("LI_Sbutterfly");
                    case 3:
                        return this.IconAtlas.getSpriteFrame("LI_Spufferfish");
                    case 4:
                        return this.IconAtlas.getSpriteFrame("LI_snailfish");
                    case 5:
                        return this.IconAtlas.getSpriteFrame("LI_flatfish");
                    case 6:
                        return this.IconAtlas.getSpriteFrame("LI_lobster");
                    case 7:
                        return this.IconAtlas.getSpriteFrame("LI_sailfish");
                    case 8:
                        return this.IconAtlas.getSpriteFrame("LI_octopus");
                    case 9:
                        return this.IconAtlas.getSpriteFrame("LI_lantern");
                    case 10:
                        return this.IconAtlas.getSpriteFrame("LI_turtles");
                    case 11:
                        return this.IconAtlas.getSpriteFrame("LI_serrateshark");
                    case 12:
                        return this.IconAtlas.getSpriteFrame("LI_stingray");
                    case 13:
                        return this.IconAtlas.getSpriteFrame("LI_Lnemo_EN");
                    case 14:
                        return this.IconAtlas.getSpriteFrame("LI_Lbutterflyfish_EN");
                    case 15:
                        return this.IconAtlas.getSpriteFrame("LI_Lpufferfish_EN");
                    case 16:
                        return this.IconAtlas.getSpriteFrame("LI_shark");
                    case 17:
                        return this.IconAtlas.getSpriteFrame("LI_killerwhale");
                    case 18:
                        return this.IconAtlas.getSpriteFrame("LI_HumpbackWhale");
                    case 19:
                        return this.IconAtlas.getSpriteFrame("LI_FireDragon");
                    case 20:
                        return this.IconAtlas.getSpriteFrame("LI_Klacoste");
                    case 22:
                        return this.IconAtlas.getSpriteFrame("LI_eletriccrab");
                    case 23:
                        return this.IconAtlas.getSpriteFrame("LI_eledrillcrab");
                    case 24:
                        return this.IconAtlas.getSpriteFrame("LI_Crab");
                    case 25:
                        return this.IconAtlas.getSpriteFrame("LI_Mermaid");
                    case 29:
                        return this.IconAtlas.getSpriteFrame("LI_TreasureCrab");
                    case 32:
                        return this.IconAtlas.getSpriteFrame("LI_dragonturtle_TD");
                    case 34:
                        return this.IconAtlas.getSpriteFrame("LI_bombcrab");
                    case 35:
                        return this.IconAtlas.getSpriteFrame("LI_Klanternfish");
                    case 61:
                    case 62:
                    case 63:
                    case 64:
                    case 65:
                    case 66:
                        return this.IconAtlas.getSpriteFrame("LI_Ktaco");
                    case 77:
                        return this.IconAtlas.getSpriteFrame("LI_runnercrab");
                    case 78:
                        return this.IconAtlas.getSpriteFrame("LI_Brontosaurus");
                    case 79:
                        return this.IconAtlas.getSpriteFrame("LI_hammercrab");
                    case 80:
                        return this.IconAtlas.getSpriteFrame("LI_Phoenix");
                    case 81:
                        return this.IconAtlas.getSpriteFrame("LI_Buffalo");
                    case 82:
                        return this.IconAtlas.getSpriteFrame("LI_Patrick");
                    case 83:
                        return this.IconAtlas.getSpriteFrame("LI_vampire");
                    case 84:
                        return this.IconAtlas.getSpriteFrame("LI_buddha");
                    case 85:
                        return this.IconAtlas.getSpriteFrame("LI_dragonturtle");
                    case 86:
                        return this.IconAtlas.getSpriteFrame("LI_liondragon");
                    case 87:
                        return this.IconAtlas.getSpriteFrame("LI_IceDragon");
                    case 88:
                        return this.IconAtlas.getSpriteFrame("LI_RedDragon");
                    case 89:
                        return this.IconAtlas.getSpriteFrame("LI_ship_R");
                    case 90:
                        return this.IconAtlas.getSpriteFrame("LI_ship_G");
                    case 91:
                        return this.IconAtlas.getSpriteFrame("LI_ship_B");
                    case 92:
                        return this.IconAtlas.getSpriteFrame("LI_FortuneCat");
                    case 93:
                        return this.IconAtlas.getSpriteFrame("LI_clown");
                    case 94:
                        return this.IconAtlas.getSpriteFrame("LI_pig");
                    case 95:
                        return this.IconAtlas.getSpriteFrame("LI_tiger");
                    case 96:
                        return this.IconAtlas.getSpriteFrame("LI_blazingTiger");
                    case 129:
                        return this.IconAtlas.getSpriteFrame("LI_GKarmorCrab");
                    case 118:
                    case 119:
                    case 120:
                    case 121:
                    case 122:
                    case 123:
                        return this.IconAtlas.getSpriteFrame("LI_GKtaco");
                    case 124:
                        return this.IconAtlas.getSpriteFrame("LI_GKlacoste");
                    case 125:
                        return this.IconAtlas.getSpriteFrame("LI_GKlanternfish");
                    case 126:
                        return this.IconAtlas.getSpriteFrame("LI_GKsquid");
                    case 127:
                        return this.IconAtlas.getSpriteFrame("LI_GKjelly");
                    case 128:
                        return this.IconAtlas.getSpriteFrame("LI_jellyfishG");
                    case 111:
                        return this.IconAtlas.getSpriteFrame("LI_KingSquid");
                    case 112:
                        return this.IconAtlas.getSpriteFrame("LI_BluePhoenix");
                    case 113:
                        return this.IconAtlas.getSpriteFrame("LI_GreenDragon");
                    case 114:
                        return this.IconAtlas.getSpriteFrame("LI_GeneralLobster");
                    case 115:
                        return this.IconAtlas.getSpriteFrame("LI_SlotCrab");
                    case 116:
                        return this.IconAtlas.getSpriteFrame("LI_wealthGod");
                    case 55:
                    case 200:
                    case 201:
                    case 202:
                    case 203:
                    case 204:
                    case 205:
                    case 206:
                    case 207:
                    case 208:
                    case 209:
                    case 210:
                        return this.IconAtlas.getSpriteFrame("LI_windfish");
                    case 300:
                    case 301:
                    case 302:
                    case 303:
                    case 304:
                    case 305:
                    case 306:
                    case 307:
                    case 308:
                    case 309:
                        return this.IconAtlas.getSpriteFrame("LI_flashfish");
                    case 133:
                        return this.IconAtlas.getSpriteFrame("LI_EternalDragonTurtle");
                    case 134:
                        return this.IconAtlas.getSpriteFrame("LI_ThunderDragonEX")
                }
                return null
            }
        };
        n([h(cc.Sprite)], d.prototype, "fishIconImg", void 0), n([h(cc.Animation)], d.prototype, "fishIconAnim", void 0), n([h(cc.SpriteAtlas)], d.prototype, "IconAtlas", void 0), d = n([c], d), i.default = d, cc._RF.pop()
    }, {
        "../../GameClient": "GameClient",
        "../Common/EnumFilter": "EnumFilter",
        "../Skill/BaseSkill": "BaseSkill",
        "./BaseWeapon": "BaseWeapon",
        "./WeaponManager": "WeaponManager"
    }],
    Login: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "82b01CotBJLkJjvEkP50Vzj", "Login"), Object.defineProperty(i, "__esModule", {
            value: !0
        }), i.DoLoginSuccess = i.DoLoginFail = void 0;
        const n = e("../../../../LobbyCommon/Connect/Script/ConnectPanelMgr"),
            s = e("../../../../LobbyCommon/Loading/Script/LoadingMgr"),
            a = e("../../../../LobbyCommon/PopupMessage/Script/PopupMsgMgr"),
            o = e("./ErrorHandler");
        i.DoLoginSuccess = () => {
            s.LoadingMgr.Instance.OpenLoading(), s.LoadingMgr.Instance.SetProgress(80, 15), n.ConnectPanelMgr.Instance.DisableConnectPanel();
            let e = cc.director.getScene();
            cc.director.loadScene(e.name, null)
        }, i.DoLoginFail = (e, t, i) => {
            console.log("LoginFail", t), n.ConnectPanelMgr.Instance.DisableConnectPanel();
            let s = e.toString(),
                l = null;
            if ("VerifyMobile" === i) o.VerifyMobileFailHandle(e, t);
            else if ("DeviceLogin" === i) o.DeviceLoginFailHandle(e, t);
            else if ("PinLogin" === i) o.PinLoginFailHandle(e, t);
            else if ("BindSocket" === i) e == ArkSDK.SocketResult.OK ? s = "S133" : e == ArkSDK.SocketResult.Timeout ? s = "S134" : e == ArkSDK.SocketResult.Error ? s = "S135" : e == ArkSDK.SocketResult.NotReset && (s = "S136"), "The Internet was lost! Please login again!", o.ErrorHandler(s, t);
            else if ("ConnectWebSocket" === i) {
                let i = "";
                try {
                    i = JSON.stringify(t)
                } catch (r) {}
                a.PopupMsgMgr.Instance.ShowPopMsg(a.PopupPriority.Critical, "S172", SS.Common.GameEnvironment.CurrentGameNow, "connect socket error ! SocketResult : " + e + " data : " + i, null)
            }
        }, cc._RF.pop()
    }, {
        "../../../../LobbyCommon/Connect/Script/ConnectPanelMgr": void 0,
        "../../../../LobbyCommon/Loading/Script/LoadingMgr": void 0,
        "../../../../LobbyCommon/PopupMessage/Script/PopupMsgMgr": void 0,
        "./ErrorHandler": "ErrorHandler"
    }],
    MCGameClient: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "1e772ctTc5BV6nWULUIaemV", "MCGameClient");
        var n, s = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            a = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const o = e("./MainGame/Common/PreloadManager"),
            l = e("./MainGame/Common/MultiLangSystem"),
            r = e("./MainGame/Common/ResourceManager"),
            c = e("./MainGame/Player/PlayerManager"),
            h = e("./MainGame/Weapon/WeaponManager"),
            d = e("./MainGame/Fish/FishManager"),
            u = e("./MainGame/Game/GameManager"),
            m = e("./MainGame/Skill/BaseSkill"),
            p = e("./MainGame/Common/EnumFilter"),
            f = e("./MainGame/Player/PopupWindowCtrl"),
            S = e("../../../GameCommon/CommonRoot/Script/CommonRoot"),
            g = e("../../../LobbyCommon/Net/LobbyClient"),
            y = e("../../../LobbyCommon/PopupMessage/Script/PopupMsgMgr"),
            _ = e("../../../LobbyCommon/Connect/Script/ConnectPanelMgr"),
            C = e("../../../LobbyCommon/Loading/Script/LoadingMgr"),
            I = e("../../../LobbyCommon/Component/AudioMgr"),
            P = e("../../../FishCommon/Script/SSCanvasHandler"),
            v = e("../../../FishCommon/Script/FishCommonRoot"),
            b = e("../../../LobbyCommon/LobbyCommon"),
            M = e("../../../LobbyCommon/Helper/EventSystem"),
            E = e("./GameClient/Player"),
            F = e("./GameClient"),
            T = e("./GameClient/ErrorHandler"),
            A = e("./GameClient/Login"),
            w = e("./GameClient/ErrorCode"),
            k = e("../../../LobbyCommon/Net/ClickLogEnum"),
            L = e("../../../LobbyCommon/Net/ClickLog");
        var R;
        (function(e) {
            e[e.NONE = -1] = "NONE", e[e.SEND_CMD = 0] = "SEND_CMD", e[e.GET_RECV = 1] = "GET_RECV"
        })(R || (R = {}));
        const {
            ccclass: O,
            property: B
        } = cc._decorator;
        let D = n = class extends cc.Component {
            constructor() {
                super(...arguments), this.GameName = "", this.title = "", this.CommonRootPrefab = null, this.FishMenuRootPrefab = null, this.PopupWindowPrefab = null, this.BarRoot = null, this.HasJP = !1, this.HasBundle = !1, this.IsWaitInitJpValue = !0, this.DownloadBundleFinished = !0, this.gameNetWork = null, this.arkSocketClient = null, this.topBar = null, this.JPBarRoot = null, this.isReturnToLobby = !1, this.isStopUpdate = !1, this.m_EventInfoState = R.NONE, this.m_tempQuestData = void 0, this.m_isEnableMission = !1, this.m_isEnableItem = !1, this.m_strEventTime = "", this.m_iRecQuestNum = 0, this.m_CurBet = 1, this.m_CurBetScale = 1, this.m_CurShootPerSecond = 6, this.m_CurCostPerSecond = 0, this.GetPromEvent = null, this.RELOAD_EXPIRE_TIME = 30, this.RecordingSkillID = null, this.cheatBtn = null
            }
            static get Instance() {
                return this.instance ? this.instance : (this.instance = cc.find("MCGameClient").getComponent(n), this.instance)
            }
            get FishCommonRoot() {
                return S.CommonRoot.Instance ? S.CommonRoot.Instance : null
            }
            GetCurCostPerSecond() {
                return this.m_CurCostPerSecond
            }
            onLoad() {
                return a(this, void 0, void 0, function*() {
                    n.instance = this, "magiccity" == window.gd_nowLOGO && (b.LobbyCommon.Instance.OnSetupCompletedEvent = this.OnLobbyCommonReady.bind(this)), cc.view.resizeWithBrowserSize(!0), cc.view.setDesignResolutionSize(1136, 640, cc.ResolutionPolicy.SHOW_ALL), null != this.FishMenuRootPrefab && F.default.Client.InitFishMenu(this.FishMenuRootPrefab, this.BarRoot);
                    let e = null;
                    null != this.BarRoot && null != this.CommonRootPrefab && ((e = cc.instantiate(this.CommonRootPrefab)).parent = this.BarRoot, F.default.Client.InitFishUIMgr()), "magiccity" == window.gd_nowLOGO && null != this.PopupWindowPrefab && null != e && (cc.instantiate(this.PopupWindowPrefab).parent = e.getComponent(v.default).m_PopupWindowRoot), this.IsWaitInitJpValue = this.HasJP, this.HasBundle && (this.DownloadBundleFinished = !1, M.EventSystem.Event(M.FishHunter.DownloadBundleFinished).Insert(this.OnDownloadBundleFinished, this)), this.GameName = SS.Common.GameEnvironment.CurrentGameNow, this.title = SS.Common.GameEnvironment.CurrentGameNow, this.InitArkClient()
                })
            }
            start() {
                o.default.Instance.onReleaseSceneEvent.AddListener(this.Clear.bind(this))
            }
            update() {
                if (!this.isStopUpdate)
                    if (g.LobbyClient.Instance && g.LobbyClient.Instance.GetLobbySystem && g.LobbyClient.Instance.GetLobbySystem.m_isPosKick) g.LobbyClient.Instance.GetLobbySystem.m_isPosKick = !1, this.isStopUpdate = !0, this.NetworkClear(), y.PopupMsgMgr.Instance.ShowPopMsg(y.PopupPriority.Critical, "S171", this.title, "PosKick");
                    else if (g.LobbyClient.Instance && g.LobbyClient.Instance.GetLobbySystem && -1 != g.LobbyClient.Instance.GetLobbySystem.m_ServerToIdleWaitMin) {
                    let e = g.LobbyClient.Instance.GetLobbySystem.m_ServerToIdleWaitMin;
                    g.LobbyClient.Instance.GetLobbySystem.m_ServerToIdleWaitMin = -1;
                    let t = this;
                    clearTimeout(t.shutdownTimeoutID), console.log(" wait " + e + "min for server to idle"), t.shutdownTimeoutID = setTimeout(() => {
                        t.isStopUpdate = !0, this.NetworkClear(), y.PopupMsgMgr.Instance.ShowPopMsg(y.PopupPriority.Critical, "S170", this.title, "Server Maintain", null)
                    }, 6e4 * e)
                } else g.LobbyClient.Instance.IsSocketErrorClose && (g.LobbyClient.Instance.IsSocketErrorClose = !1, this.isStopUpdate = !0, this.NetworkClear(), this.isReturnToLobby || this.SocketErrorClose())
            }
            SocketErrorClose() {
                y.PopupMsgMgr.Instance.ShowPopMsg(y.PopupPriority.Disconnected, "C14", this.title, "The internet was diconnected.", () => {
                    let e, t;
                    _.ConnectPanelMgr.Instance.ShowConnectPanel(), e = SS.Common.GameEnvironment.UserID, t = SS.Common.GameEnvironment.UserPW, g.LobbyClient.Instance.DoLogin(window.location.protocol + "//" + SS.Common.GameEnvironment.ProjectSetting.Modules.Lobby.ServerHOST, e, t, A.DoLoginSuccess, A.DoLoginFail)
                })
            }
            InitArkClient() {
                Object.assign({}, g.LobbyClient.Instance.GetUserClient.GetPinClient), window.location.protocol, SS.Common.GameEnvironment.ProjectSetting.Modules[this.GameName].ServerHOST, l.default.Init("en-us", this.StartPreload.bind(this));
                let e = Object.assign({}, g.LobbyClient.Instance.GetUserClient.GetPinClient),
                    t = window.location.protocol + "//" + SS.Common.GameEnvironment.ProjectSetting.Modules[this.GameName].ServerHOST;
                this.gameNetWork = new SS.Network.GameNetwork(e, this.GameName, t, "kiosk"), this.gameNetWork.SendCmdButNotRetry("KioskUrl", {}, this.onGetKioskUrl.bind(this), e => {
                    T.ErrorHandler("C16", e.toString())
                })
            }
            StartPreload() {
                null != F.default.FishMenuMgr && F.default.FishMenuMgr.ShowMenu(), o.default.Instance.PreloadGameCommonRes(), o.default.Instance.LoadMainGame("normal", () => {
                    r.default.Instance.Init()
                })
            }
            onGetKioskUrl(e, t) {
                if (e == ArkSDK.HttpResult.OK && 0 == t.cmd_data.status) {
                    let e, i = t.cmd_data,
                        n = i.url,
                        s = i.surl,
                        a = !0;
                    s && "" != s ? e = s.split(":") : (e = n.split(":"), a = !1), this.arkSocketClient = new ArkSDK.ArkSocketClient(g.LobbyClient.Instance.GetUserClient.GetPinClient, 1024, 5), this.arkSocketClient.m_auth_exdata = {
                        kiosk_id: SS.Network.LoginModel.LoginInfo.kiosk_id,
                        device_id: SS.Network.LoginModel.LoginInfo.device_id,
                        machine_id: SS.Network.LoginModel.LoginInfo.machine_id,
                        is_mobile: !0
                    }, this.arkSocketClient.ConnectSocket(e[0], Number(e[1]), a, this.onOpen.bind(this), this.onMsg.bind(this), this.onClose.bind(this), this.onError.bind(this))
                } else this.ShowErrorMsg(t)
            }
            onOpen(e) {
                this.InitSocketSystem(this.arkSocketClient);
                let t = {};
                t.kiosk_id = SS.Network.LoginModel.LoginInfo.kiosk_id, t.allow_state = ArkSDK.ArkClient.allowState, t.device = 1, this.arkSocketClient.SendCmd("kiosk", "PlayerJoin", t, this.onPlayerJoin.bind(this))
            }
            onPlayerJoin(e, t) {
                t.data.hasOwnProperty("maxGate") && (c.PlayerManager.Instance.MaxBalance = t.data.maxGate), t.data.hasOwnProperty("itemEnable") && (this.m_isEnableItem = t.data.itemEnable), t.data.hasOwnProperty("commonInfo") && (this.m_strEventTime = t.data.commonInfo), t.data.hasOwnProperty("cannonEnable") && h.default.Instance.InitWeaponList(t.data.cannonEnable), c.PlayerManager.Instance.m_aryWeaponLvData = t.data.CannonBetRange, this.QuickStart(), !this.m_isEnableItem && F.default.FishMenuMgr && (F.default.FishMenuMgr.GetRootNode().active = !1)
            }
            onMsg(e, t) {}
            onClose(e) {
                this.NetworkClear(), this.isReturnToLobby || this.CallOnError("C33", "SocketClose")
            }
            onError(e, t) {
                this.NetworkClear(), t ? this.CallOnError("C32", "SocketError :" + t) : this.CallOnError("C32", "SocketError")
            }
            InitSocketSystem(e) {
                F.default.Client.InitSocketSystem(e), F.default.FishMissionSystem.EVENT_ERROR_RETURN_LOBBY = this.MissionDataError.bind(this), this.RegisterEvent()
            }
            QuickStart() {
                return a(this, void 0, void 0, function*() {
                    for (; !r.default.Instance.isLoadDone;) yield new Promise(e => {
                        setTimeout(e, 500)
                    });
                    let e = {
                        table_id: 0,
                        seat_id: 0
                    };
                    e.kiosk_id = SS.Network.LoginModel.LoginInfo.kiosk_id, e.quick_start = !0, this.arkSocketClient.SendCmd("kiosk", "JoinTable", e, this.onTableJoinCallback.bind(this))
                })
            }
            onTableJoinCallback(e, t) {
                if (e == ArkSDK.HttpResult.OK)
                    if (t.data && 0 == t.data.result) {
                        if (self == top) return;
                        g.LobbyClient.Instance.OnGameLoadingOK()
                    } else this.NetworkClear(), t.data ? this.CallOnError("S" + t.data.result, "ReceiveServerError") : this.CallOnError("C31", "ReceiveServerError");
                else this.ShowErrorMsg(t)
            }
            RegisterEvent() {
                F.default.GameSystem.TableJoinEvent = this.onTableJoin.bind(this), F.default.GameSystem.InitGameEvent = this.onInitGame.bind(this), F.default.GameSystem.KickOutEvent = this.onKickOut.bind(this), F.default.KioskSystem.UpdateKioskSetting = this.onBroadCastSetting.bind(this), F.default.PlayerSystem.InitPlayerEvent = c.PlayerManager.Instance.onInitPlayer.bind(c.PlayerManager.Instance), F.default.PlayerSystem.UpdatePlayerEvent = c.PlayerManager.Instance.onInitOtherPlayer.bind(c.PlayerManager.Instance), F.default.GameSystem.PlayerLeaveEvent = c.PlayerManager.Instance.onPlayerLeave.bind(c.PlayerManager.Instance), F.default.PlayerSystem.UpdateBetEvent = c.PlayerManager.Instance.onUpdateBet.bind(c.PlayerManager.Instance), F.default.PlayerSystem.ReflashEvent = c.PlayerManager.Instance.onReflash.bind(c.PlayerManager.Instance), F.default.WeaponSystem.ShootEvent = h.default.Instance.OtherPlayerShoot.bind(h.default.Instance), F.default.WeaponSystem.BlastEvent = h.default.Instance.HitFishRequestCallback.bind(h.default.Instance), F.default.WeaponSystem.BlastBetEvent = c.PlayerManager.Instance.CheckBetList.bind(c.PlayerManager.Instance), F.default.WeaponSystem.UniqueOddsEvent = d.default.Instance.UniqueFishOddsEvent.bind(d.default.Instance), F.default.FishSystem.FishScriptEvent = d.default.Instance.onFishScript.bind(d.default.Instance), F.default.FishSystem.CreateFishEvent = d.default.Instance.onCreateFish.bind(d.default.Instance), F.default.FishSystem.ScriptTimeEvent = d.default.Instance.onFishScriptTime.bind(d.default.Instance), F.default.FishSystem.ScriptEvent = u.default.Instance.onScriptEvent.bind(u.default.Instance), F.default.FishSystem.FeatureEvent = d.default.Instance.onFeatureEvent.bind(d.default.Instance), this.topBar ? (this.topBar.m_DelClickBackToLobby.Insert(this.ReturnToLobby.bind(this), this), this.topBar.m_DelClickSound.Insert(this.OnClickedSound, this), this.topBar.m_DelClickInfo.Insert(this.OnClickedInfo, this)) : (M.EventSystem.Event(M.SystemMsg.Open).Insert(this.OnSystemMessage, this), M.EventSystem.Event(M.DockFunction.BackToLobby).Insert(this.ReturnToLobby.bind(this), this), M.EventSystem.Event(M.DockFunction.Sound).Insert(this.OnClickedSound, this), M.EventSystem.Event(M.DockFunction.Info).Insert(this.OnClickedInfo, this), M.EventSystem.Event(M.DockFunction.Info).Insert(this.SendClickInfo, this), M.EventSystem.Event(M.DownBar.SetPlayerInfo).Insert(this.SetPlayerInfo, this), M.EventSystem.RegisterFunction(M.DownBar.GetPlayerEntries, () => c.PlayerManager.getPlayer(c.PlayerManager.MainSeat).entries), M.EventSystem.RegisterFunction(M.DownBar.GetPlayerWinnings, () => c.PlayerManager.getPlayer(c.PlayerManager.MainSeat).winning)), F.default.FishUIMgr.m_DelClickPurchase.Insert(this.CheckPlayingState, this), M.PurchaseEvent.OnPurchaseSuccess && M.EventSystem.Event(M.PurchaseEvent.OnPurchaseSuccess).Insert(this.onPurchaseSuccessByProfile, this), F.default.FishUIMgr.m_DelPurchaseSuccess.Insert(this.onPurchaseSuccess, this), F.default.FishUIMgr.m_DelBetChange.Insert(c.PlayerManager.Instance.SendUpdateBet, c.PlayerManager.Instance), F.default.FishUIMgr.m_DelClickAddBetLevel.Insert(c.PlayerManager.Instance.AddBet, c.PlayerManager.Instance), F.default.FishUIMgr.m_DelClickReduceBetLevel.Insert(c.PlayerManager.Instance.MinusBet, c.PlayerManager.Instance), F.default.FishUIMgr.m_DelClickChange.Insert(h.default.Instance.SwitchWeapon, h.default.Instance), F.default.FishUIMgr.m_DelClickAuto.Insert(h.default.Instance.SwitchAuto, h.default.Instance), F.default.FishUIMgr.m_DelClickLockSetting.Insert(h.default.Instance.LockSetting, h.default.Instance), F.default.FishUIMgr.m_DelCloseTeachPanel.Insert(this.ShowMenuEffectAndMission, this), F.default.FishUIMgr.m_DelClickWeaponChose.Insert(h.default.Instance.WeaponChose, h.default.Instance), F.default.FishUIMgr.m_DelClickWeaponChoseBtn.Insert(h.default.Instance.WeaponChoseBtnClick, h.default.Instance), F.default.FishUIMgr.m_FucGetWeaponSetting = h.default.Instance.BaseWeaponList.bind(h.default.Instance), F.default.FishMenuMgr && F.default.FishUIMgr.RegisterMouseEventList(F.default.FishMenuMgr.GetRootNode().children), this.HasJP && (g.LobbyClient.Instance.GetJPSystem.OnWinJPValueSignal.add(this.onWinJpVaule, this), g.LobbyClient.Instance.GetJPSystem.OnChangeJpValCmdSignal.add(this.RecvJPValCmd, this), g.LobbyClient.Instance.GetJPSystem.OnRecvJpCandidateSingnal.add(this.RecvJPCandidateCmd.bind(this)))
            }
            UNRegisterEvent() {
                M.PurchaseEvent.OnPurchaseSuccess && M.EventSystem.Event(M.PurchaseEvent.OnPurchaseSuccess).Remove(this.onPurchaseSuccessByProfile, this), this.topBar || (M.EventSystem.Event(M.SystemMsg.Open).Remove(this.OnSystemMessage, this), M.EventSystem.Event(M.DockFunction.BackToLobby).Remove(this.ReturnToLobby.bind(this), this), M.EventSystem.Event(M.DockFunction.Sound).Remove(this.OnClickedSound, this), M.EventSystem.Event(M.DockFunction.Info).Remove(this.OnClickedInfo, this), M.EventSystem.Event(M.DockFunction.Info).Remove(this.SendClickInfo, this), M.EventSystem.Event(M.DownBar.SetPlayerInfo).Remove(this.SetPlayerInfo, this), M.EventSystem.UnregisterFunction(M.DownBar.GetPlayerEntries), M.EventSystem.UnregisterFunction(M.DownBar.GetPlayerWinnings)), this.HasJP && (g.LobbyClient.Instance.GetJPSystem.OnWinJPValueSignal.remove(this.onWinJpVaule, this), g.LobbyClient.Instance.GetJPSystem.OnChangeJpValCmdSignal.remove(this.RecvJPValCmd, this), g.LobbyClient.Instance.GetJPSystem.OnRecvJpCandidateSingnal.remove(this.RecvJPCandidateCmd.bind(this)))
            }
            onTableJoin(e) {
                e || (this.NetworkClear(), this.CallOnError("C34", "NoTableID")), F.default.GameSystem.InitGame(e), F.default.PlayerSystem.InitPlayer(), F.default.FishSystem.GetFishScript(), this.GetSaveLockSetting()
            }
            onInitGame(e, t) {
                u.default.Instance.onInitScriptEvent(e, t)
            }
            onKickOut(e) {
                this.NetworkClear(), e ? this.CallOnError(w.ErrorCode(e), "KickOut") : this.CallOnError("C31", "KickOut")
            }
            onBroadCastSetting(e) {
                this.m_isEnableItem = e.itemEnable, null != F.default.FishMenuMgr && (F.default.FishMenuMgr.GetRootNode().active = this.m_isEnableItem);
                let t = [];
                if (e.hasOwnProperty("betRange") && (t = e.betRange, n.Instance.RecordingSkillID == m.skillEnum.FlameStorm || n.Instance.RecordingSkillID == m.skillEnum.Wheel ? c.PlayerManager.Instance.tempBetList = t : c.PlayerManager.Instance.CheckBetList(c.PlayerManager.MainSeat, t)), e.hasOwnProperty("cannonEnable")) {
                    let t = e.cannonEnable;
                    h.default.Instance.ChangeWeaponList(t)
                }
            }
            NetworkClear() {
                if (h.default.Instance && (h.default.Instance.AutoShoot = !1), c.PlayerManager.Instance)
                    for (let e = 0; e < 4; e++) c.PlayerManager.Instance.onPlayerLeave(e);
                I.AudioMgr.Instance.UncacheAudioClip(), this.gameNetWork && this.gameNetWork.Release(), this.gameNetWork = null, this.arkSocketClient && this.arkSocketClient.Close(), this.arkSocketClient = null, F.default.Client.NetworkClear()
            }
            onDestroy() {
                this.UNRegisterEvent(), this.isReturnToLobby = !0, this.NetworkClear()
            }
            ReturnToLobby() {
                if (!n.instance) return;
                _.ConnectPanelMgr.Instance.ShowConnectPanel(), L.ClickLog.DirectSend(k.LogName.PlayerConversion, k.LogType_PlayerConversion.GameLoading, k.LogEvent_LeaveGameProcess.BackToLobby), this.isReturnToLobby = !0, this.NetworkClear();
                let e = SS.Common.GameEnvironment.CurrentGameTypeNow,
                    t = SS.Common.GameEnvironment.GameTypeMapScrollContentPos[e],
                    i = SS.Common.GameEnvironment.IsMute ? "1" : "0",
                    s = JSUtility.FullScreen.IsFullScreen() ? "1" : "0",
                    a = (new Date).getTime();
                a += 1e3 * this.RELOAD_EXPIRE_TIME, JSUtility.IsSupportLocalStorage() ? (localStorage.setItem("IS_RELOAD_LEGALTIME", a.toString()), localStorage.setItem("IS_RELOAD", "1"), localStorage.setItem("CURRENT_GAME_TYPE", e), t && (localStorage.setItem("CURRENT_SCROLL_POS_X", t.x), localStorage.setItem("CURRENT_SCROLL_POS_Y", t.y)), localStorage.setItem("IS_FULL_SCREEN", s), localStorage.setItem("IS_MUTE", i)) : JSUtility.IsSupportCookie() && (document.cookie = "IS_RELOAD_LEGALTIME=" + a.toString() + ";", document.cookie = "IS_RELOAD=1;", document.cookie = "CURRENT_GAME_TYPE=" + e + ";", t && (document.cookie = "CURRENT_SCROLL_POS_X=" + t.x + ";", document.cookie = "CURRENT_SCROLL_POS_Y=" + t.y + ";"), document.cookie = "IS_FULL_SCREEN=" + s + ";", document.cookie = "IS_MUTE=" + i + ";");
                let o = "",
                    l = "",
                    r = SS.Common.BaseFunction.GetURLParameterByName("KioskDEV");
                SS.Common.BaseFunction.GetURLParameterByName("standalone") && (r ? (o = "index.html", l = ",standalone=true") : (o = "index_ni.html", l = "?standalone=true")), r ? location.replace("../../../" + o + "/?KioskDEV=" + r + l + this.customConfigParams) : location.replace("../../../" + o + l + this.customConfigParams)
            }
            LoadResError(e) {
                console.error("loadError:" + e), this.isReturnToLobby = !0, this.NetworkClear(), P.default.Clear(), y.PopupMsgMgr.Instance.ShowPopMsg(y.PopupPriority.Warning, "C31", this.title, "loadError:" + e, () => {
                    "magiccity" == window.gd_nowLOGO ? SS.Common.GameEnvironment.SplashDiv.style.display = "block" : SS.Common.GameEnvironment.Splash.style.display = "block", u.default.Instance.Clear();
                    let e = SS.Common.GameEnvironment.Language + "Lobby";
                    cc.assetManager.bundles.find(function(t) {
                        return t._config.getSceneInfo(e)
                    }) ? cc.director.loadScene(e) : cc.director.loadScene("Lobby")
                })
            }
            Clear() {
                n.instance = null
            }
            ShowErrorMsg(e) {
                if (this.NetworkClear(), e) {
                    if (e.status) return e.status.msg ? void this.CallOnError(w.ErrorCode(e.status), "ReceiveServerError:" + e.status.msg) : void this.CallOnError(w.ErrorCode(e.status), "ReceiveServerError:status_id_" + e.status);
                    if (e.cmd_data && e.cmd_data.status) return e.cmd_data.status.msg ? void this.CallOnError(w.ErrorCode(e.cmd_data.status), "ReceiveServerError:" + e.cmd_data.status.msg) : void this.CallOnError(w.ErrorCode(e.cmd_data.status), "ReceiveServerError:status_id_" + e.cmd_data.status)
                }
                this.CallOnError("C31", "ReceiveServerError")
            }
            SetLoadingProgress(e, t) {
                let i = 70 / t * e;
                i > 70 && (i = 70), C.LoadingMgr.Instance.SetProgress(30 + i)
                var data = JSON.stringify({event: 'loadProgress', value: i / 100});
                window.parent.postMessage(data, "*");
            }
            DelayCloseLoading() {
                return a(this, void 0, void 0, function*() {
                    for (yield SS.Common.WaitForSeconds(.5); !this.DownloadBundleFinished;) yield SS.Common.WaitForSeconds(.5);
                    for (; this.IsWaitInitJpValue;) yield SS.Common.WaitForSeconds(.5);
                    C.LoadingMgr.Instance.SetProgress(100), C.LoadingMgr.Instance.CloseLoading(), "magiccity" == window.gd_nowLOGO && (b.LobbyCommon.Instance.SetMaskActive(!1), this.scheduleOnce(this.FishCommonRoot.JoinGameAutoJPShrink.bind(this.FishCommonRoot), 5), L.ClickLog.DirectSend(k.LogName.PlayerConversion, k.LogType_PlayerConversion.GameLoading, k.LogEvent_EnterGameProcess.InGame))
                })
            }
            OnSystemMessage(e, t = cc.Size.ZERO, i = cc.Size.ZERO, n = 150, s = null, o = !1, l = !1) {
                return a(this, void 0, void 0, function*() {
                    l && (!h.default.Instance.AutoShoot && c.PlayerManager.BulletSync(0, c.PlayerManager.getPlayer(c.PlayerManager.MainSeat).winning) ? (_.ConnectPanelMgr.Instance.ShowConnectPanel(1), F.default.PlayerSystem.RefreshBalanceEvent = this.onRefreshBalanceBySystemMsg.bind(this), F.default.PlayerSystem.SendRefreshBalance()) : (h.default.Instance.AutoShoot = !1, M.EventSystem.Event(M.SystemMsg.Close).Notify(), y.PopupMsgMgr.Instance.ShowPopMsg(y.PopupPriority.Info, "C-1", this.title, "Sync Asset", null)))
                })
            }
            CheckPlayingState(e, t, i) {
                return a(this, void 0, void 0, function*() {
                    let i = c.PlayerManager.getPlayer(c.PlayerManager.MainSeat);
                    if (c.PlayerManager.Instance.MaxBalance && i.entries + i.winning >= c.PlayerManager.Instance.MaxBalance) y.PopupMsgMgr.Instance.ShowPopMsg(y.PopupPriority.Info, "C29", this.title, "MaxBalance", null);
                    else if (h.default.Instance.AutoShoot = !1, c.PlayerManager.Instance.BulletCount > 0) t();
                    else if (_.ConnectPanelMgr.Instance.ShowConnectPanel(0), yield new Promise(function(e) {
                            setTimeout(e, 500)
                        }.bind(this)), c.PlayerManager.Instance.BulletCount > 0) t();
                    else {
                        switch (t(!1), e) {
                            case "purchase":
                                F.default.PlayerSystem.UpdateBalanceEvent = this.onUpdateBalanceByClickPurchase.bind(this);
                                break;
                            case "profile":
                                F.default.PlayerSystem.UpdateBalanceEvent = this.onUpdateBalanceByClickProfile.bind(this);
                                break;
                            case "avatar":
                                F.default.PlayerSystem.UpdateBalanceEvent = this.onUpdateBalanceByClickAvatarEditor.bind(this)
                        }
                        F.default.PlayerSystem.SendUpdateBalance()
                    }
                })
            }
            SetPlayerInfo(e, t) {
                F.default.FishUIMgr.SetWinningNow(t, !1, !0), F.default.FishUIMgr.SetEntriesNow(e, !1), this.onPurchaseSuccess(t, e)
            }
            onPurchaseSuccessByProfile(e, t) {
                F.default.FishUIMgr.SetWinningNow(e, !1, !0), F.default.FishUIMgr.SetEntriesNow(t, !1), this.onPurchaseSuccess(e, t)
            }
            onPurchaseSuccess(e, t) {
                let i = c.PlayerManager.getPlayer(c.PlayerManager.MainSeat);
                i.entries = t, i.winning = e, _.ConnectPanelMgr.Instance.ShowConnectPanel(0), F.default.PlayerSystem.RefreshBalanceEvent = this.onRefreshBalance.bind(this), F.default.PlayerSystem.SendRefreshBalance(), F.default.FishUIMgr.ShowPurchaseHint(i.entries < i.bet_value)
            }
            onUpdateBalanceByClickPurchase() {
                F.default.PlayerSystem.UpdateBalanceEvent = null, _.ConnectPanelMgr.Instance.DisableConnectPanel(0), F.default.FishUIMgr.OpenPurchase()
            }
            onUpdateBalanceByClickProfile() {
                F.default.PlayerSystem.UpdateBalanceEvent = null, _.ConnectPanelMgr.Instance.DisableConnectPanel(0)
            }
            onUpdateBalanceByClickAvatarEditor() {
                F.default.PlayerSystem.UpdateBalanceEvent = null, _.ConnectPanelMgr.Instance.DisableConnectPanel(0)
            }
            onRefreshBalanceBySystemMsg() {
                F.default.PlayerSystem.RefreshBalanceEvent = null, _.ConnectPanelMgr.Instance.DisableConnectPanel(1)
            }
            onUpdateBalance() {
                F.default.PlayerSystem.UpdateBalanceEvent = null, _.ConnectPanelMgr.Instance.DisableConnectPanel(0), F.default.FishUIMgr.OpenPurchase()
            }
            onRefreshBalance() {
                F.default.PlayerSystem.RefreshBalanceEvent = null, _.ConnectPanelMgr.Instance.DisableConnectPanel(0)
            }
            OnClickedSound(e) {
                I.AudioMgr.Instance.SetMute(e)
            }
            OnClickedInfo() {
                S.CommonRoot.Instance.GetInfoMgr.OpenScrollViewInfoPage(this.title)
            }
            SendClickInfo() {
                M.EventSystem.Event(M.DockFunction.Info).Remove(this.SendClickInfo, this), L.ClickLog.DirectSend(k.LogName.PlayerAction, k.LogType_PlayerAction.InGame, k.LogEvent_InGame.ClickInfo)
            }
            HideTimeOut() {
                this.NetworkClear(), this.CallOnError("C31", "ClientKickOut_HideTimeOut")
            }
            HideEventReload() {
                y.PopupMsgMgr.Instance.ShowPopMsg(y.PopupPriority.Disconnected, "C31", this.title, "ClientKickOut_HideTimeOut", () => {
                    let e, t;
                    _.ConnectPanelMgr.Instance.ShowConnectPanel(), e = SS.Common.GameEnvironment.UserID, t = SS.Common.GameEnvironment.UserPW, g.LobbyClient.Instance.DoLogin(window.location.protocol + "//" + SS.Common.GameEnvironment.ProjectSetting.Modules.Lobby.ServerHOST, e, t, A.DoLoginSuccess, A.DoLoginFail)
                })
            }
            MissionDataError(e) {
                this.NetworkClear(), this.CallOnError(e, "ClientKickOut_MissionDataError")
            }
            ShowMenuEffectAndMission() {
                this.m_EventInfoState != R.SEND_CMD && (this.m_isEnableItem && null != F.default.FishMenuMgr && F.default.FishMenuMgr.MenuShowEffect(), null != F.default.FishMissionSystem && (this.m_tempQuestData && this.m_tempQuestData[900004] ? F.default.FishMissionSystem.RecMissionInfo(ArkSDK.HttpResult.OK, this.m_tempQuestData[900004]) : F.default.FishMissionSystem.SendGetMissionInfoCmd(), F.default.GameSystem.UpdateMissionProgressEvent = F.default.FishMissionSystem.onGetFishMissionProgress.bind(F.default.FishMissionSystem), F.default.ItemSystem.UpdateMissionProgressEvent = F.default.FishMissionSystem.onGetFishMissionProgress.bind(F.default.FishMissionSystem)))
            }
            GetSaveLockSetting() {
                let e = "",
                    t = "LOCKSETTING_DATA_" + SS.Network.LoginModel.LoginInfo.pin_ark_id + "_ALD";
                if (JSUtility.IsSupportLocalStorage() ? e = localStorage.getItem(t) : JSUtility.IsSupportCookie() && (e = JSUtility.GetCookie(t)), null != e && "" != e) {
                    let t = [];
                    e.split(",").forEach(e => {
                        t.push(Number(e))
                    }), p.default.playerLockSetting = t, p.default.LockSetting = p.default.TransFishTypeList(t), F.default.FishUIMgr.SwitchLockSettingButton(!0)
                }
            }
            CallOnError(e, t = "", i = !0) {
                i ? (h.default.Instance && h.default.Instance.ForceStopAuto(), console.error("CallOnError, code = " + e + ", reason = " + t), y.PopupMsgMgr.Instance.ShowPopMsg(y.PopupPriority.Warning, e, this.title, t, this.ReturnToLobby.bind(this))) : y.PopupMsgMgr.Instance.ShowPopMsg(y.PopupPriority.Warning, e, this.title, t, null)
            }
            RecordErrorLog(e, t = "") {
                g.LobbyClient.Instance && "maintain" != t && "updateVersion" != t && g.LobbyClient.Instance.CollectErrorLog(y.PopupPriority.Warning, e, this.GameName, t)
            }
            RecordClickLog(e) {
                g.LobbyClient.Instance && null != this.RecordingSkillID && g.LobbyClient.Instance.GetUserClient.recordClickLog("FishShootInSkill", this.RecordingSkillID + (e ? 0 : 1e4))
            }
            ReciveCmdTime(e) {
                f.default.EnableNetUnstable(e > 5, 2), e > .25 ? F.default.FishUIMgr.SetNetSignal(1) : e > .1 ? F.default.FishUIMgr.SetNetSignal(2) : F.default.FishUIMgr.SetNetSignal(3)
            }
            UpdateBetData(e, t, i) {
                this.m_CurBet = e, this.m_CurBetScale = t || this.m_CurBetScale, this.m_CurShootPerSecond = i || this.m_CurShootPerSecond, this.m_CurCostPerSecond = this.m_CurBet * this.m_CurBetScale * this.m_CurShootPerSecond
            }
            GetThemeIDByGameName(e) {
                try {
                    let i = SS.Common.GameEnvironment.GameSetting.Icon;
                    for (let t in i)
                        if (i[t].GameName == e) return t
                } catch (t) {}
                return ""
            }
            OnDownloadBundleFinished() {
                this.HasJP && g.LobbyClient.Instance.GetJPSystem.SendGetJPValCmd("Fish", this.RecvJPValCmd.bind(this)), this.DownloadBundleFinished = !0
            }
            GetPlayerByArkId(e) {
                return c.PlayerManager.getPlayerById(e)
            }
            GetPlayerArkId(e) {
                return c.PlayerManager.getPlayer(e).id
            }
            GetPlayerAsset(e) {
                let t = {};
                return t.entries = c.PlayerManager.getPlayer(e).entries, t.winning = c.PlayerManager.getPlayer(e).winning, t
            }
            UpdateOtherPlayerAsset(e) {
                for (let t = 0; t < e.length; t++) {
                    if (e[t].seat == c.PlayerManager.MainSeat) continue;
                    let i = c.PlayerManager.getPlayer(e[t].seat);
                    i.entries = e[t].entries, i.winning = e[t].winnings
                }
            }
            RecvJPValCmd(e, t, i, n, s, a) {
                "Fish" == a && (this.FishCommonRoot.GetJPMgr.ChangeJPVal(e, t, i, n, this.IsWaitInitJpValue), SS.Common.GameEnvironment.exchange_rate = s, this.IsWaitInitJpValue && (this.JPBarRoot = M.EventSystem.Function(M.TopBar.GetRoot)(), this.JPBarRoot && (this.JPBarRoot.active = !0, this.IsWaitInitJpValue = !1)))
            }
            RecvJPCandidateCmd(e) {
                e.group && g.LobbyClient.Instance.GetJPSystem.CheckJPRequest(this.GameName, e.group, this.m_CurBet * this.m_CurBetScale)
            }
            onWinJpVaule(e, t, i, n, s) {
                c.PlayerManager.BulletSync(1, null), F.default.PlayerSystem.RefreshBalanceByWinJPEvent = e => {
                    F.default.PlayerSystem.RefreshBalanceByWinJPEvent = null, SS.Common.GameEnvironment.IsUseScoreBox ? c.PlayerManager.Instance.ModifyPlayerWinning(c.PlayerManager.MainSeat, t, e.winnings, !0) : c.PlayerManager.Instance.ModifyPlayerEntries(c.PlayerManager.MainSeat, t, e.entries, !0)
                }, F.default.PlayerSystem.SendRefreshBalance()
            }
            OnLobbyCommonReady() {
                b.LobbyCommon.Instance.OnSetupCompletedEvent = null, b.LobbyCommon.Instance.UpdateRootScale()
            }
            sendGameEventLog() {
                if ("" == E.GameLogMainPlayer.SceneName) return;
                E.GameLogMainPlayer.setDataBeforeSend();
                let e = Math.floor(Date.now() / 1e3),
                    t = e - E.GameLogMainPlayer.lastPlayerTime;
                E.GameLogMainPlayer.lastPlayerTime = e;
                let i = E.GameLogMainPlayer.playerBeginTime.toString(),
                    n = "playgd" == window.gd_nowLOGO ? "GD" : "MC";
                E.GameLogMainPlayer.FishList.forEach(t => {
                    let i = {
                        Name: "FishShow"
                    };
                    i.SceneID = E.GameLogMainPlayer.SceneName, i.Type = t.FishType, i.Count = t.FishTime, i.ExtraData = {
                        SessionTs: e
                    }
                }), E.GameLogMainPlayer.HitList.forEach(t => {
                    let i = {
                        Name: "FishHit"
                    };
                    i.SceneID = E.GameLogMainPlayer.SceneName, i.Type = t.FishType, i.Count = t.Count, i.ExtraData = {
                        SessionTs: e,
                        Weapon: t.Weapon,
                        WinCount: [t.Medal, t.Kill],
                        Win: [t.MedalTotalWin, t.KillTotalWin],
                        BetValue: t.Bet
                    }
                });
                let s = {
                    Name: "FishPlayTime"
                };
                s.SceneID = E.GameLogMainPlayer.SceneName, s.Count = t, s.ExtraData = {
                    SessionTs: e,
                    LoginTs: i,
                    Logo: n
                }, E.GameLogMainPlayer.initAfterSend()
            }
            CheatKey(e, t) {
                let i = {};
                switch (t) {
                    case "show":
                        break;
                    case "changeSrage":
                        F.default.PlayerSystem.SendCustomCmd("CheatChangeScript");
                        break;
                    case "kill":
                        i.state = 1, F.default.PlayerSystem.SendCustomCmd("CheatShunGokuSatsu", i);
                        break;
                    case "normalkill":
                        i.state = 0, F.default.PlayerSystem.SendCustomCmd("CheatShunGokuSatsu", i);
                        break;
                    case "cantkill":
                        i.state = 2, F.default.PlayerSystem.SendCustomCmd("CheatShunGokuSatsu", i);
                        break;
                    case "Esmall":
                        i.state = 3, F.default.PlayerSystem.SendCustomCmd("CheatShunGokuSatsu", i);
                        break;
                    case "Emiddle":
                        i.state = 4, F.default.PlayerSystem.SendCustomCmd("CheatShunGokuSatsu", i);
                        break;
                    case "Ebig":
                        i.state = 5, F.default.PlayerSystem.SendCustomCmd("CheatShunGokuSatsu", i);
                        break;
                    case "Ekill":
                        i.state = 6, F.default.PlayerSystem.SendCustomCmd("CheatShunGokuSatsu", i)
                }
            }
            get customConfigParams() {
                let e = SS.Common.BaseFunction.GetURLParameterByName("CustomConfig");
                return "" != e ? `?CustomConfig=${e}` : ""
            }
        };
        D.instance = null, s([B(cc.Prefab)], D.prototype, "CommonRootPrefab", void 0), s([B(cc.Prefab)], D.prototype, "FishMenuRootPrefab", void 0), s([B(cc.Prefab)], D.prototype, "PopupWindowPrefab", void 0), s([B(cc.Node)], D.prototype, "BarRoot", void 0), s([B({
            displayName: "\u904a\u6232\u4e2d\u662f\u5426\u6709JP"
        })], D.prototype, "HasJP", void 0), s([B({
            displayName: "\u904a\u6232\u4e2d\u662f\u5426\u8981\u8f09Bundle"
        })], D.prototype, "HasBundle", void 0), s([B(cc.Node)], D.prototype, "cheatBtn", void 0), D = n = s([O], D), i.default = D, cc._RF.pop()
    }, {
        "../../../FishCommon/Script/FishCommonRoot": void 0,
        "../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../../../GameCommon/CommonRoot/Script/CommonRoot": void 0,
        "../../../LobbyCommon/Component/AudioMgr": void 0,
        "../../../LobbyCommon/Connect/Script/ConnectPanelMgr": void 0,
        "../../../LobbyCommon/Helper/EventSystem": void 0,
        "../../../LobbyCommon/Loading/Script/LoadingMgr": void 0,
        "../../../LobbyCommon/LobbyCommon": void 0,
        "../../../LobbyCommon/Net/ClickLog": void 0,
        "../../../LobbyCommon/Net/ClickLogEnum": void 0,
        "../../../LobbyCommon/Net/LobbyClient": void 0,
        "../../../LobbyCommon/PopupMessage/Script/PopupMsgMgr": void 0,
        "./GameClient": "GameClient",
        "./GameClient/ErrorCode": "ErrorCode",
        "./GameClient/ErrorHandler": "ErrorHandler",
        "./GameClient/Login": "Login",
        "./GameClient/Player": "Player",
        "./MainGame/Common/EnumFilter": "EnumFilter",
        "./MainGame/Common/MultiLangSystem": "MultiLangSystem",
        "./MainGame/Common/PreloadManager": "PreloadManager",
        "./MainGame/Common/ResourceManager": "ResourceManager",
        "./MainGame/Fish/FishManager": "FishManager",
        "./MainGame/Game/GameManager": "GameManager",
        "./MainGame/Player/PlayerManager": "PlayerManager",
        "./MainGame/Player/PopupWindowCtrl": "PopupWindowCtrl",
        "./MainGame/Skill/BaseSkill": "BaseSkill",
        "./MainGame/Weapon/WeaponManager": "WeaponManager"
    }],
    MERMAID: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "b0f69LV0pZL0a1EtDSBloha", "MERMAID");
        var n = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            s = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("./BaseSpineFish"),
            o = e("../Common/ResourceManager"),
            l = e("../Common/AudioManager"),
            r = e("./BaseFish"),
            c = e("../Common/EnumFilter"),
            {
                ccclass: h,
                property: d
            } = cc._decorator;
        let u = class extends a.default {
            constructor() {
                super(...arguments), this.eventIndex = 0
            }
            onInit() {
                switch (SS.Common.GameEnvironment.CurrentGameNow) {
                    case c.FishGame.WCF:
                        this.offsetPos = cc.v2(990, -250), this.skeleton.timeScale = 1;
                        break;
                    default:
                        this.offsetPos = cc.v2(500, -225), this.skeleton.timeScale = .5
                }
                this.node.angle = -this.o, this.skeleton.setAnimation(0, "SWIM", !1), this.eventIndex = 0, this.skeleton.setEventListener(() => {
                    this.aliveStatus != r.FishState.ALIVE || this.isSummon || (0 == this.eventIndex ? (o.default.SpawnEffect("MH").angle = this.node.angle, this.eventIndex++) : 1 == this.eventIndex && (o.default.SpawnEffect("MH2").angle = this.node.angle, this.eventIndex++))
                })
            }
            PlayDieAnim() {
                const e = Object.create(null, {
                    PlayDieAnim: {
                        get: () => super.PlayDieAnim
                    }
                });
                return s(this, void 0, void 0, function*() {
                    e.PlayDieAnim.call(this), l.default.Instance.Play("effect_mer_die1"), yield this.delay(1e3), l.default.Instance.Play("41_catch_bigfish")
                })
            }
        };
        u = n([h], u), i.default = u, cc._RF.pop()
    }, {
        "../Common/AudioManager": "AudioManager",
        "../Common/EnumFilter": "EnumFilter",
        "../Common/ResourceManager": "ResourceManager",
        "./BaseFish": "BaseFish",
        "./BaseSpineFish": "BaseSpineFish"
    }],
    MarqueeCtrl: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "aa7f7CfD6BGba6cPbV2gg8B", "MarqueeCtrl");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const {
            ccclass: s,
            property: a
        } = cc._decorator;
        class o {
            constructor(e, t) {
                this.Text = "", this.Time = 5, this.Text = e, this.Time = t
            }
        }
        let l = class extends cc.Component {
            constructor() {
                super(...arguments), this.Text = null, this.Marquees = [], this.MarqueeSchedule = null, this.fadeAction = null, this.MarqueeActive = !1
            }
            setMarquee(e, t = 5, i = !1) {
                let n = new o(e, t);
                i ? this.Marquees.unshift(n) : this.Marquees.push(n), this.MarqueeActive || this.NextMaquee()
            }
            NextMaquee() {
                if (this.Marquees.length > 0) {
                    let e = this.Marquees.shift();
                    this.MarqueeActive ? (this.Text.node.opacity = 255, this.fadeAction = cc.sequence(cc.fadeOut(.5), cc.delayTime(.5), cc.callFunc(() => {
                        e.Text.length > 80 ? this.Text.fontSize = 21 : e.Text.length > 70 ? this.Text.fontSize = 23 : this.Text.fontSize = 25, this.Text.string = e.Text
                    }), cc.fadeIn(.5)), this.Text.node.runAction(this.fadeAction)) : (this.node.stopAction(this.fadeAction), this.node.opacity = 0, this.node.active = !0, this.MarqueeActive = !0, this.Text.string = e.Text, this.fadeAction = cc.fadeIn(1), this.node.runAction(this.fadeAction)), this.MarqueeSchedule = this.scheduleOnce(() => {
                        this.NextMaquee()
                    }, e.Time + 1)
                } else this.MarqueeActive = !1, this.node.opacity = 255, this.fadeAction = cc.sequence(cc.fadeOut(1), cc.callFunc(() => {
                    this.node.active = !1, this.MarqueeSchedule = null
                })), this.node.runAction(this.fadeAction)
            }
        };
        n([a(cc.RichText)], l.prototype, "Text", void 0), l = n([s], l), i.default = l, cc._RF.pop()
    }, {}],
    MedalRoot: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "99b52eLHs5FYJ+aIteQyCDF", "MedalRoot");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("../Common/PoolObj"),
            {
                ccclass: a,
                property: o
            } = cc._decorator;
        let l = class extends s.default {
            constructor() {
                super(...arguments), this.posRoot = [], this.Medals = [null, null, null], this.Order = []
            }
            bindMedal(e) {
                e.recycleEvent = () => {
                    cc.Tween.stopAllByTarget(e.node);
                    let t = this.Medals.indexOf(e);
                    this.Medals[t] = null, e.forceEnding || this.Order.shift(), null == this.Medals[0] && null == this.Medals[1] && null == this.Medals[2] && this.Recycle()
                };
                let t = -1;
                if (null != this.Medals[0] && null != this.Medals[1] && null != this.Medals[2]) t = this.Order.shift(), this.Medals[t].ForceEnd(!0);
                else
                    for (let i = 0; i < this.posRoot.length; i++)
                        if (null == this.Medals[i]) {
                            t = i;
                            break
                        } return this.Medals[t] = e, this.Order.push(t), this.posRoot[t]
            }
            Recycle() {
                for (let e = 0; e < this.Medals.length; e++) null != this.Medals[e] && this.Medals[e].ForceEnd();
                super.Recycle()
            }
        };
        n([o([cc.Node])], l.prototype, "posRoot", void 0), l = n([a], l), i.default = l, cc._RF.pop()
    }, {
        "../Common/PoolObj": "PoolObj"
    }],
    MissionCtrl: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "8e681jkCRdJYrf4ZABgznFM", "MissionCtrl");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        }), i.MisProcStates = i.AwardIndex = void 0;
        const s = e("../System/ItemSystem"),
            a = e("../MainGame/Item/ItemManager"),
            o = e("../MainGame/Player/PlayerManager"),
            l = e("./FishMissionData"),
            r = e("./MissionNodeDrag"),
            c = e("../MainGame/Common/EnumFilter"),
            {
                ccclass: h,
                property: d
            } = cc._decorator;
        let u = class {
            constructor() {
                this.Name = "", this.SpriteFrame = null
            }
        };
        var m;
        n([d(cc.String)], u.prototype, "Name", void 0), n([d(cc.SpriteFrame)], u.prototype, "SpriteFrame", void 0), u = n([h("TargetIcon")], u),
            function(e) {
                e[e.ITEM_SUMMON = 0] = "ITEM_SUMMON", e[e.ITEM_FREEZE = 1] = "ITEM_FREEZE", e[e.COIN = 2] = "COIN"
            }(i.AwardIndex || (i.AwardIndex = {})),
            function(e) {
                e[e.INIT = 0] = "INIT", e[e.UPDATE_DATA = 1] = "UPDATE_DATA", e[e.GETTING_AWARD = 2] = "GETTING_AWARD", e[e.WAIT_UPDATE = 3] = "WAIT_UPDATE"
            }(m = i.MisProcStates || (i.MisProcStates = {}));
        let p = class extends cc.Component {
            constructor() {
                super(...arguments), this.EVENT_MISSION_COMPLETED = null, this.EVENT_GETAWARD_COMPLETED = null, this.EVENT_TOUCH_CHANGE_LAYOUT = null, this.EVENT_ERROR_RETURN_LOBBY = null, this.m_nodeRoot = null, this.m_nodeArrow = null, this.m_nodeCompleteEffect = null, this.m_NodeDrag = null, this.m_labTarget = null, this.m_labCurProgress = null, this.m_spTargetIcon = null, this.m_aryTargetIconCommon = [], this.m_aryTargetIconTD = [], this.m_aryTargetIconMTY = [], this.m_aryTargetIconALD = [], this.m_aryTargetIconZB = [], this.m_aryTargetIconKK = [], this.m_aryTargetIconKC = [], this.m_aryTargetIconCIR = [], this.m_aryTargetIcon = {}, this.m_aryAwardIcon = [], this.m_spAwardIcon = null, this.m_labAwardCount = null, this.m_TargetCount = 0, this.m_CurCount = 0, this.m_FishMissionAward = null, this.m_FishMissionData = null, this.m_BaseParentNode = null, this.m_iCurQuestLevel = -1, this.m_iState = m.INIT
            }
            Init(e) {
                switch (this.m_BaseParentNode = e, this.m_FishMissionAward = null, this.m_labTarget.string = "", this.m_labCurProgress.string = "", this.m_labAwardCount.string = "", this.m_CurCount = 0, this.m_TargetCount = 0, this.m_nodeArrow.active = !0, this.m_iCurQuestLevel = -1, this.m_nodeCompleteEffect.opacity = 0, this.m_spTargetIcon.node.active = !1, this.m_spAwardIcon.node.active = !1, SS.Common.GameEnvironment.CurrentGameNow) {
                    case c.FishGame.TD:
                        this.InitTargetIcon(this.m_aryTargetIconTD);
                        break;
                    case c.FishGame.MTY:
                    case c.FishGame.MTYL:
                        this.InitTargetIcon(this.m_aryTargetIconMTY);
                        break;
                    case c.FishGame.ALD:
                        this.InitTargetIcon(this.m_aryTargetIconALD);
                        break;
                    case c.FishGame.ZB:
                        this.InitTargetIcon(this.m_aryTargetIconZB);
                        break;
                    case c.FishGame.KK:
                        this.InitTargetIcon(this.m_aryTargetIconKK);
                        break;
                    case c.FishGame.LS:
                    case c.FishGame.GLP:
                    case c.FishGame.MF:
                    case c.FishGame.BS:
                        this.InitTargetIcon();
                        break;
                    case c.FishGame.CIR:
                        this.InitTargetIcon(this.m_aryTargetIconCIR);
                        break;
                    case c.FishGame.KC:
                        this.InitTargetIcon(this.m_aryTargetIconKC)
                }
            }
            UpdateMissionData(e) {
                if (this.m_iState == m.GETTING_AWARD) return;
                this.m_iState = m.UPDATE_DATA, this.m_FishMissionData = e, this.m_iCurQuestLevel = e.QuestLevel, this.SetTargetData(e);
                let t = this.GetAwardIconIndex(e.Award.ItemID[0]); - 1 != t ? (this.m_FishMissionAward = e.Award, this.m_spAwardIcon.node.active = !0, this.m_spAwardIcon.spriteFrame = this.m_aryAwardIcon[t], this.m_labAwardCount.string = e.Award.ItemAmount.toString()) : (this.m_spAwardIcon.node.active = !1, console.error("awardID = %s, can not find index", e.Award.ItemID[0]))
            }
            UpdateCurrentProgress(e, t) {
                if (this.m_iState == m.UPDATE_DATA) {
                    if (this.m_FishMissionData.Status != l.FishUserQuestDataStatus.AWARD_AVAILAALDE && this.m_FishMissionData.QuestLevel > this.m_iCurQuestLevel) return console.error("UpdateCurrentProgress error, curProgress = " + e + ", targetCount = " + t + ", this.m_iCurQuestLevel = " + this.m_iCurQuestLevel + ", this.m_FishMissionData.QuestLevel = " + this.m_FishMissionData.QuestLevel), void(null != this.EVENT_ERROR_RETURN_LOBBY && this.EVENT_ERROR_RETURN_LOBBY("C43"));
                    this.m_CurCount = e, this.m_TargetCount = t, this.m_labCurProgress.string = this.m_CurCount + " / " + this.m_TargetCount, this.m_nodeArrow.active = !0, this.m_nodeCompleteEffect.opacity = 0, this.m_CurCount == this.m_TargetCount && (this.m_iState = m.GETTING_AWARD, null != this.EVENT_MISSION_COMPLETED && this.EVENT_MISSION_COMPLETED(this.m_FishMissionData.QuestID, this.m_FishMissionData.QuestLevel), this.OnCompleteMission())
                }
            }
            OnCompleteMission() {
                this.m_FishMissionData.Status = l.FishUserQuestDataStatus.AWARD_CLAIMED, this.m_labTarget.string = "Congratulations!", this.m_labCurProgress.string = "A Goal Completed", this.m_nodeArrow.active = !1, this.m_spAwardIcon.node.active = !1, this.m_labAwardCount.string = "", this.m_nodeCompleteEffect.opacity = 0, this.m_nodeCompleteEffect.runAction(cc.fadeIn(.3));
                let e = cc.sequence(cc.scaleTo(.5, 1.5).easing(cc.easeBackOut()), cc.scaleTo(.5, 1).easing(cc.easeBackIn()));
                this.m_spTargetIcon.node.runAction(e);
                let t = this.m_FishMissionAward.ItemID[0],
                    i = this.m_FishMissionAward.ItemAmount[0],
                    n = this.m_BaseParentNode.getPosition().add(this.node.getPosition().add(this.m_spAwardIcon.node.getPosition())),
                    s = o.PlayerManager.MainSeat > 1 ? o.PlayerManager.MainSeat - 2 : o.PlayerManager.MainSeat;
                a.default.Instance.DropItemEffectByMission(o.PlayerManager.MainSeat, s, t, i, n, () => {
                    let e = cc.sequence(cc.fadeOut(.3), cc.callFunc(() => {
                        this.m_iState = m.WAIT_UPDATE, null != this.EVENT_GETAWARD_COMPLETED && this.EVENT_GETAWARD_COMPLETED()
                    }));
                    this.m_nodeCompleteEffect.runAction(e)
                })
            }
            OnTouchBaord() {
                null != this.EVENT_TOUCH_CHANGE_LAYOUT && this.EVENT_TOUCH_CHANGE_LAYOUT()
            }
            Clear() {
                this.m_FishMissionAward = null, this.m_FishMissionData = null, this.m_labTarget.string = "", this.m_labCurProgress.string = "", this.m_labAwardCount.string = "", this.m_CurCount = 0, this.m_TargetCount = 0, this.m_nodeArrow.active = !0, this.m_spTargetIcon.node.active = !1, this.m_spAwardIcon.node.active = !1, this.m_iCurQuestLevel = -1, this.m_iState = m.INIT
            }
            GetAwardIconIndex(e) {
                switch (e) {
                    case s.ITEM_ID.SUMMON:
                        return 0;
                    case s.ITEM_ID.FREEZE:
                        return 1;
                    default:
                        return -1
                }
            }
            SetTargetData(e) {
                let t = "";
                switch (e.CustomerType) {
                    case l.FishQustObjectiveType.GET_ANY_FISH:
                        t = "Catch any fish", this.m_spTargetIcon.spriteFrame = this.m_aryTargetIcon.GET_ANY_FISH;
                        break;
                    case l.FishQustObjectiveType.USE_ANY_ITEM:
                        t = "Use any item", this.m_spTargetIcon.spriteFrame = this.m_aryTargetIcon.USE_ANY_ITEM;
                        break;
                    case l.FishQustObjectiveType.ANY_CRAB:
                        t = "Catch any feature crab", this.m_spTargetIcon.spriteFrame = this.m_aryTargetIcon.ANY_CRAB;
                        break;
                    case l.FishQustObjectiveType.GET_FISH:
                        t = "Catch the target";
                        let i = e.CustomerInfo.FishName;
                        this.m_spTargetIcon.spriteFrame = this.m_aryTargetIcon[i]
                }
                this.m_spTargetIcon.spriteFrame ? (this.m_labTarget.string = t, this.m_spTargetIcon.node.active = !0, this.UpdateCurrentProgress(e.CustomerAmount, e.CustomerGate)) : (this.m_spTargetIcon.node.active = !1, console.error("fishType = %s, can not find index", e.CustomerInfo.FishName))
            }
            InitTargetIcon(e) {
                if (e)
                    for (let t = 0; t < e.length; t++) this.m_aryTargetIcon[e[t].Name] = e[t].SpriteFrame;
                for (let t = 0; t < this.m_aryTargetIconCommon.length; t++) this.m_aryTargetIcon.hasOwnProperty(this.m_aryTargetIconCommon[t].Name) || (this.m_aryTargetIcon[this.m_aryTargetIconCommon[t].Name] = this.m_aryTargetIconCommon[t].SpriteFrame)
            }
        };
        n([d(cc.Node)], p.prototype, "m_nodeRoot", void 0), n([d(cc.Node)], p.prototype, "m_nodeArrow", void 0), n([d(cc.Node)], p.prototype, "m_nodeCompleteEffect", void 0), n([d(r.MissionNodeDrag)], p.prototype, "m_NodeDrag", void 0), n([d(cc.Label)], p.prototype, "m_labTarget", void 0), n([d(cc.Label)], p.prototype, "m_labCurProgress", void 0), n([d(cc.Sprite)], p.prototype, "m_spTargetIcon", void 0), n([d([u])], p.prototype, "m_aryTargetIconCommon", void 0), n([d([u])], p.prototype, "m_aryTargetIconTD", void 0), n([d([u])], p.prototype, "m_aryTargetIconMTY", void 0), n([d([u])], p.prototype, "m_aryTargetIconALD", void 0), n([d([u])], p.prototype, "m_aryTargetIconZB", void 0), n([d([u])], p.prototype, "m_aryTargetIconKK", void 0), n([d([u])], p.prototype, "m_aryTargetIconKC", void 0), n([d([u])], p.prototype, "m_aryTargetIconCIR", void 0), n([d([cc.SpriteFrame])], p.prototype, "m_aryAwardIcon", void 0), n([d(cc.Sprite)], p.prototype, "m_spAwardIcon", void 0), n([d(cc.Label)], p.prototype, "m_labAwardCount", void 0), p = n([h], p), i.default = p, cc._RF.pop()
    }, {
        "../MainGame/Common/EnumFilter": "EnumFilter",
        "../MainGame/Item/ItemManager": "ItemManager",
        "../MainGame/Player/PlayerManager": "PlayerManager",
        "../System/ItemSystem": "ItemSystem",
        "./FishMissionData": "FishMissionData",
        "./MissionNodeDrag": "MissionNodeDrag"
    }],
    MissionInfoPageCtrl: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "bf7b1LoIrFHEoPAYtfizUBR", "MissionInfoPageCtrl");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const {
            ccclass: s,
            property: a
        } = cc._decorator;
        let o = class extends cc.Component {
            constructor() {
                super(...arguments), this.EVENT_CLOSE = null
            }
            OnClose() {
                null != this.EVENT_CLOSE && this.EVENT_CLOSE()
            }
        };
        o = n([s], o), i.default = o, cc._RF.pop()
    }, {}],
    MissionManager: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "23074GzAVhO2LBqIAVBezyx", "MissionManager");
        var n = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            s = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        }), i.FishMissionLayout = void 0;
        const a = e("../../../../FishCommon/Script/ClickLogDef"),
            o = e("../../../../LobbyCommon/Net/LobbyClient"),
            l = e("../MainGame/Common/ResourceManager"),
            r = e("./FishMissionData"),
            c = e("./MissionCtrl"),
            h = e("./MissionInfoPageCtrl"),
            {
                ccclass: d,
                property: u
            } = cc._decorator;
        var m;
        (function(e) {
            e[e.Layout1 = 0] = "Layout1", e[e.Layout2 = 1] = "Layout2"
        })(m = i.FishMissionLayout || (i.FishMissionLayout = {}));
        let p = class extends cc.Component {
            constructor() {
                super(...arguments), this.NODE_POS_WIDTH_MIN = -410, this.NODE_POS_WIDTH_MAX = 310, this.NODE_POS_HEIGHT_MIN = -130, this.NODE_POS_HEIGHT_MAX = 100, this.m_nodeRoot = null, this.m_nodeLayoutRoot = null, this.m_nodeL1Root = null, this.m_nodeL2Root = null, this.m_nodeAllMissionsComplete = null, this.m_pfMission = null, this.m_nodeBtnMinimize = null, this.m_nodeBtnMaxminize = null, this.m_nodeL2BtnSwiechLayout = null, this.m_btnL1PageNexp = null, this.m_btnL1PagePre = null, this.m_aryTimerAnchor = [], this.m_labTimer = null, this.m_nodeTimerBg = null, this.m_aryMissionCtrl = [], this.m_isMissionEnd = [], this.m_LayoutStyle = m.Layout1, this.m_iShowL1Index = 0, this.m_EndTimer = null, this.m_isFirstJoinGame = !0, this.m_MissionSystem = null, this.m_nodeInfo = null, this.m_MissionInfoPageCtrlALD = null
            }
            Init(e, t) {
                this.m_MissionSystem = e, this.m_MissionSystem.EVENT_UPDATE_MISSION_DATA = this.UpdateMissionData.bind(this), this.m_MissionSystem.EVENT_UPDATE_TIMER = this.UpdateTimer.bind(this), this.m_MissionSystem.EVENT_TIME_UP = this.OnTimeUp.bind(this), this.m_MissionSystem.EVENT_UPDATE_MISSION_PROGRESS = this.UpaateMissionProgress.bind(this), this.m_nodeAllMissionsComplete.active = !1, this.m_nodeRoot.active = !1, this.m_nodeTimerBg.active = !1, this.m_labTimer.node.active = !1, this.m_nodeBtnMinimize.active = !0, this.m_nodeBtnMaxminize.active = !1, this.m_iShowL1Index = 0, this.InitMission(t), this.OnShowLayout1()
            }
            UpdateTimer(e, t) {
                let i = e % 60,
                    n = Math.floor(e / 60) % 60,
                    s = Math.floor(e / 3600),
                    a = Math.floor(s / 24);
                s %= 24, t = (t = (t = (t = t.replace("{sec}", this.AddZero(i))).replace("{min}", this.AddZero(n))).replace("{hr}", this.AddZero(s))).replace("{day}", a.toString()), this.m_labTimer && (this.m_labTimer.string = t, this.m_labTimer.node.color = 0 == s ? cc.Color.RED : cc.Color.WHITE)
            }
            AddZero(e) {
                return e < 10 ? "0" + e.toString() : e.toString()
            }
            OnTimeUp() {
                this.CloseMission()
            }
            InitMission(e) {
                if (this.m_nodeRoot.active = !0, 0 == this.m_aryMissionCtrl.length)
                    for (let t = 0; t < e; t++) {
                        this.m_isMissionEnd[t] = !1;
                        let e = cc.instantiate(this.m_pfMission);
                        e.parent = this.m_nodeL1Root, this.m_aryMissionCtrl[t] = e.getComponent(c.default), this.m_aryMissionCtrl[t].Init(this.node), this.m_aryMissionCtrl[t].EVENT_MISSION_COMPLETED = this.OnMissionCompeted.bind(this), this.m_aryMissionCtrl[t].EVENT_GETAWARD_COMPLETED = this.OnGetAwardComplete.bind(this), this.m_aryMissionCtrl[t].EVENT_TOUCH_CHANGE_LAYOUT = this.OnSwitchLayout.bind(this), this.m_aryMissionCtrl[t].EVENT_ERROR_RETURN_LOBBY = this.OnGetDataError.bind(this)
                    }
            }
            UpdateMissionData(e) {
                !e || this.m_nodeRoot.activeInHierarchy || this.CheckMissionIsAllCompleted() || (this.m_nodeRoot.active = !0), e.sort(this.cmpPriority);
                for (let t = 0; t < e.length; t++) null != this.m_aryMissionCtrl[t] && (e[t].Status == r.FishUserQuestDataStatus.AWARD_CLAIMED ? (this.m_isMissionEnd[t] = !0, this.m_aryMissionCtrl[t].m_FishMissionData = e[t], this.m_aryMissionCtrl[t].node.active = !1, this.SetTimerPosition(), this.m_LayoutStyle == m.Layout1 && this.m_iShowL1Index == t && this.OnClickNextPage()) : (this.m_aryMissionCtrl[t].node.activeInHierarchy || (this.m_aryMissionCtrl[t].node.active = !0), this.m_aryMissionCtrl[t].UpdateMissionData(e[t])));
                this.CheckMissionIsAllCompleted() ? this.m_isFirstJoinGame ? this.CloseMission() : this.AllMissionsCompleted() : this.UpdateLayout()
            }
            UpaateMissionProgress(e) {
                this.m_isFirstJoinGame = !1;
                let t = 0;
                for (let i = 0; i < e.length; i++) e[i].Status == r.FishUserQuestDataStatus.AWARD_AVAILAALDE && t++;
                if (t > 1 && this.m_LayoutStyle == m.Layout1) this.UpaateMissionProgressDelay(e);
                else
                    for (let i = 0; i < e.length; i++) {
                        let t = this.FindCtrlByQuestID(e[i].QuestID);
                        null != t && t.m_FishMissionData.Status != r.FishUserQuestDataStatus.AWARD_CLAIMED && t.UpdateCurrentProgress(t.m_FishMissionData.CustomerAmount, t.m_FishMissionData.CustomerGate)
                    }
            }
            UpaateMissionProgressDelay(e) {
                return s(this, void 0, void 0, function*() {
                    let t = 0;
                    for (; t < e.length;) {
                        let i = this.FindCtrlByQuestID(e[t].QuestID);
                        if (null != i) {
                            let e = i.m_FishMissionData.Status;
                            if (e == r.FishUserQuestDataStatus.AWARD_CLAIMED) continue;
                            e == r.FishUserQuestDataStatus.AWARD_AVAILAALDE && (yield SS.Common.WaitForSeconds(1.5)), i.UpdateCurrentProgress(i.m_FishMissionData.CustomerAmount, i.m_FishMissionData.CustomerGate)
                        }
                        t++
                    }
                })
            }
            FindCtrlByQuestID(e) {
                for (let t = 0; t < this.m_aryMissionCtrl.length; t++)
                    if (null != this.m_aryMissionCtrl[t].m_FishMissionData && this.m_aryMissionCtrl[t].m_FishMissionData.QuestID == e) return this.m_aryMissionCtrl[t];
                return null
            }
            cmpPriority(e, t) {
                return e.Priority - t.Priority
            }
            CheckMissionIsAllCompleted() {
                let e = !0;
                for (let t = 0; t < this.m_isMissionEnd.length; t++) this.m_isMissionEnd[t] || (e = !1);
                return e
            }
            GetTimerShowPos() {
                return this.CheckMissionIsAllCompleted() ? 0 : this.m_LayoutStyle == m.Layout1 ? 1 : this.GetAliveQuestID()
            }
            GetAliveQuestID() {
                let e = 0;
                for (let t = 0; t < this.m_isMissionEnd.length; t++) this.m_isMissionEnd[t] || e++;
                return e
            }
            UpdateLayout() {
                this.m_LayoutStyle == m.Layout1 ? (this.SwitchLayer1Page(this.m_iShowL1Index), this.SetTimerPosition()) : this.OnShowLayout2()
            }
            OnShowLayout1() {
                this.m_LayoutStyle = m.Layout1, this.m_nodeL1Root.active = !0, this.m_nodeL2Root.active = !1;
                for (let e = 0; e < this.m_aryMissionCtrl.length; e++) this.m_isMissionEnd[e] || (this.m_aryMissionCtrl[e].node.parent = this.m_nodeL1Root, this.m_aryMissionCtrl[e].node.setPosition(cc.Vec2.ZERO));
                this.SwitchLayer1Page(this.m_iShowL1Index), this.SetTimerPosition()
            }
            OnShowLayout2() {
                this.m_LayoutStyle = m.Layout2, this.m_nodeL1Root.active = !1, this.m_nodeL2Root.active = !0;
                for (let e = 0; e < this.m_aryMissionCtrl.length; e++) this.m_isMissionEnd[e] || (this.m_aryMissionCtrl[e].node.active = !0, this.m_aryMissionCtrl[e].node.parent = this.m_nodeL2Root);
                this.SetTimerPosition()
            }
            SwitchLayer1Page(e) {
                if (!this.CheckMissionIsAllCompleted())
                    if (1 == this.GetAliveQuestID() ? (this.m_btnL1PageNexp.node.active = !1, this.m_btnL1PagePre.node.active = !1) : (this.m_btnL1PageNexp.node.activeInHierarchy || (this.m_btnL1PageNexp.node.active = !0), this.m_btnL1PagePre.node.activeInHierarchy || (this.m_btnL1PagePre.node.active = !0)), this.m_isMissionEnd[e]) this.OnClickNextPage();
                    else
                        for (let t = 0; t < this.m_aryMissionCtrl.length; t++) this.m_aryMissionCtrl[t].node.active = t == e
            }
            SetTimerPosition() {
                let e = this.GetTimerShowPos();
                if (e <= 0) return this.m_nodeTimerBg.active = !1, void(this.m_labTimer.node.active = !1);
                let t = e - 1;
                t < 0 && (t = 0), this.m_nodeTimerBg.active = !0, this.m_labTimer.node.active = !0, this.m_nodeTimerBg.parent = this.m_aryTimerAnchor[t], this.m_labTimer.node.parent = this.m_aryTimerAnchor[t], this.m_nodeTimerBg.setPosition(cc.Vec2.ZERO), this.m_labTimer.node.setPosition(new cc.Vec2(0, -1)), this.m_LayoutStyle == m.Layout2 && e > 1 ? (this.m_nodeL2BtnSwiechLayout.active = !0, this.m_nodeL2BtnSwiechLayout.parent = this.m_aryTimerAnchor[t], this.m_nodeL2BtnSwiechLayout.setPosition(new cc.Vec2(0, -35))) : this.m_nodeL2BtnSwiechLayout.active = !1
            }
            OnMissionCompeted(e, t) {
                if (this.m_nodeBtnMaxminize.activeInHierarchy) this.OnMaximizeLayout(), this.OnShowLayout1(), this.scheduleOnce(this.OnMinimizeLayout.bind(this), 5);
                else if (this.m_LayoutStyle != m.Layout1) return;
                for (let i = 0; i < this.m_aryMissionCtrl.length; i++)
                    if (this.m_aryMissionCtrl[i].m_FishMissionData.QuestID == e) {
                        this.m_iShowL1Index = i, this.SwitchLayer1Page(this.m_iShowL1Index);
                        break
                    }
            }
            OnGetAwardComplete() {
                null != this.m_MissionSystem && this.m_MissionSystem.SendGetMissionInfoCmd()
            }
            OnGetDataError(e) {
                null != this.m_MissionSystem && this.m_MissionSystem.OnGetDataError(e)
            }
            AllMissionsCompleted() {
                this.OnCloseInfo(), this.m_nodeLayoutRoot.active = !1, this.m_nodeBtnMinimize.active = !1, this.m_nodeBtnMaxminize.active = !1, this.m_nodeAllMissionsComplete.active = !0, this.m_nodeAllMissionsComplete.opacity = 0;
                let e = cc.spawn(cc.scaleTo(1, 1).easing(cc.easeBackIn()), cc.fadeIn(.5));
                this.m_nodeAllMissionsComplete.runAction(e), clearTimeout(this.m_EndTimer), this.m_EndTimer = setTimeout(() => {
                    let e = cc.sequence(cc.delayTime(.1), cc.spawn(cc.scaleTo(1, 0).easing(cc.easeBackIn()), cc.fadeOut(.5)), cc.callFunc(() => {
                        this.OnCloseMissionCompleteTitle()
                    }));
                    this.m_nodeAllMissionsComplete.runAction(e)
                }, 18e4)
            }
            CloseMission() {
                this.m_iShowL1Index = 0, this.m_nodeRoot.active = !1, this.m_nodeAllMissionsComplete.active = !1, this.m_nodeAllMissionsComplete.opacity = 0;
                for (let e = 0; e < this.m_aryMissionCtrl.length; e++) this.m_isMissionEnd[e] = !1, this.m_aryMissionCtrl[e].Clear(), this.m_aryMissionCtrl[e].node.active = !1, this.m_aryMissionCtrl[e].node.parent = this.m_nodeL1Root;
                this.OnMaximizeLayout()
            }
            OnMinimizeLayoutCallByPlayer() {
                o.LobbyClient.Instance.GetUserClient.recordClickLog("FishItemMission", a.ItemMissionClickLogID.MINI_LAYOUT), this.OnMinimizeLayout()
            }
            OnMinimizeLayout() {
                this.m_nodeLayoutRoot.active = !1, this.m_nodeBtnMinimize.active = !1, this.m_nodeBtnMaxminize.active = !0
            }
            OnMaximizeLayoutCallByPlayer() {
                o.LobbyClient.Instance.GetUserClient.recordClickLog("FishItemMission", a.ItemMissionClickLogID.MAX_LAYOUT), this.OnMaximizeLayout()
            }
            OnMaximizeLayout() {
                this.m_nodeLayoutRoot.active = !0, this.m_nodeBtnMinimize.active = !0, this.m_nodeBtnMaxminize.active = !1, this.unschedule(this.OnMinimizeLayout.bind(this))
            }
            OnCloseMissionCompleteTitle() {
                clearTimeout(this.m_EndTimer), this.CloseMission()
            }
            OnSwitchLayout() {
                this.m_LayoutStyle == m.Layout1 ? (o.LobbyClient.Instance.GetUserClient.recordClickLog("FishItemMission", a.ItemMissionClickLogID.SWITCH_LAYOUT_STRAIGHT), this.OnShowLayout2()) : (this.m_iShowL1Index = 0, o.LobbyClient.Instance.GetUserClient.recordClickLog("FishItemMission", a.ItemMissionClickLogID.SWITCH_LAYOUT_HORIZONTAL), this.OnShowLayout1())
            }
            OnClickNextPage() {
                this.m_LayoutStyle == m.Layout1 && (this.CheckMissionIsAllCompleted() || (this.m_iShowL1Index++, this.m_iShowL1Index > this.m_aryMissionCtrl.length - 1 && (this.m_iShowL1Index = 0), this.m_isMissionEnd[this.m_iShowL1Index] ? this.OnClickNextPage() : (o.LobbyClient.Instance.GetUserClient.recordClickLog("FishItemMission", a.ItemMissionClickLogID.NEXT_PAGE), this.SwitchLayer1Page(this.m_iShowL1Index))))
            }
            OnClickPrePage() {
                this.m_LayoutStyle == m.Layout1 && (this.CheckMissionIsAllCompleted() || (this.m_iShowL1Index--, this.m_iShowL1Index < 0 && (this.m_iShowL1Index = this.m_aryMissionCtrl.length - 1), this.m_isMissionEnd[this.m_iShowL1Index] ? this.OnClickPrePage() : (o.LobbyClient.Instance.GetUserClient.recordClickLog("FishItemMission", a.ItemMissionClickLogID.PRE_PAGE), this.SwitchLayer1Page(this.m_iShowL1Index))))
            }
            OnShowInfo() {
                o.LobbyClient.Instance.GetUserClient.recordClickLog("FishItemMission", a.ItemMissionClickLogID.SHOW_INFO), null == this.m_nodeInfo ? (this.m_nodeInfo = l.default.LoadGUI("FishMissionInfo"), this.m_nodeInfo.setPosition(cc.Vec2.ZERO), this.m_MissionInfoPageCtrlALD = this.m_nodeInfo.getComponent(h.default), this.m_MissionInfoPageCtrlALD.EVENT_CLOSE = this.OnCloseInfo.bind(this)) : this.m_nodeInfo.active = !0
            }
            OnCloseInfo() {
                null != this.m_nodeInfo && (this.m_nodeInfo.active = !1)
            }
        };
        n([u(cc.Node)], p.prototype, "m_nodeRoot", void 0), n([u(cc.Node)], p.prototype, "m_nodeLayoutRoot", void 0), n([u(cc.Node)], p.prototype, "m_nodeL1Root", void 0), n([u(cc.Node)], p.prototype, "m_nodeL2Root", void 0), n([u(cc.Node)], p.prototype, "m_nodeAllMissionsComplete", void 0), n([u(cc.Prefab)], p.prototype, "m_pfMission", void 0), n([u(cc.Node)], p.prototype, "m_nodeBtnMinimize", void 0), n([u(cc.Node)], p.prototype, "m_nodeBtnMaxminize", void 0), n([u(cc.Node)], p.prototype, "m_nodeL2BtnSwiechLayout", void 0), n([u(cc.Button)], p.prototype, "m_btnL1PageNexp", void 0), n([u(cc.Button)], p.prototype, "m_btnL1PagePre", void 0), n([u([cc.Node])], p.prototype, "m_aryTimerAnchor", void 0), n([u(cc.Label)], p.prototype, "m_labTimer", void 0), n([u(cc.Node)], p.prototype, "m_nodeTimerBg", void 0), p = n([d], p), i.default = p, cc._RF.pop()
    }, {
        "../../../../FishCommon/Script/ClickLogDef": void 0,
        "../../../../LobbyCommon/Net/LobbyClient": void 0,
        "../MainGame/Common/ResourceManager": "ResourceManager",
        "./FishMissionData": "FishMissionData",
        "./MissionCtrl": "MissionCtrl",
        "./MissionInfoPageCtrl": "MissionInfoPageCtrl"
    }],
    MissionNodeDrag: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "c1ab8GGrbJH4o1Sep3lAzR+", "MissionNodeDrag");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        }), i.MissionNodeDrag = void 0;
        const {
            ccclass: s,
            property: a
        } = cc._decorator;
        let o = class extends cc.Component {
            constructor() {
                super(...arguments), this.m_nodeMoveRoot = null, this.m_fMinWidth = -410, this.m_fMaxWidth = 410, this.m_fMinHeight = -210, this.m_fMaxHeight = 275, this.dragMovePos = cc.Vec2.ZERO, this.m_bIsLocked = !1
            }
            Init(e) {
                this.m_nodeMoveRoot = e, this.screenSize = cc.view.getVisibleSize(), this.node.on(cc.Node.EventType.TOUCH_START, this.OnDragInit.bind(this)), this.node.on(cc.Node.EventType.TOUCH_MOVE, this.OnDragItem.bind(this)), this.node.on(cc.Node.EventType.TOUCH_END, this.OnDragEnd.bind(this))
            }
            onDestroy() {
                this.node.off(cc.Node.EventType.TOUCH_START, this.OnDragInit.bind(this)), this.node.off(cc.Node.EventType.TOUCH_MOVE, this.OnDragItem.bind(this)), this.node.off(cc.Node.EventType.TOUCH_END, this.OnDragEnd.bind(this))
            }
            OnDragInit() {
                this.m_bIsLocked || (this.dragMovePos = cc.Vec2.ZERO, this.isDraging = !1, null != this.Event_DragStart && this.Event_DragStart())
            }
            OnDragItem(e) {
                if (this.m_bIsLocked) return;
                if (this.dragMovePos = e.getDelta(), this.dragMovePos.mag() < 1.5 && !this.isDraging) return;
                this.isDraging = !0;
                let t = this.m_nodeMoveRoot.getPosition(),
                    i = new cc.Vec2(t.x + this.dragMovePos.x, t.y + this.dragMovePos.y);
                i.x = SS.Common.BaseFunction.Clamp(this.m_fMinWidth, this.m_fMaxWidth, i.x), i.y = SS.Common.BaseFunction.Clamp(this.m_fMinHeight, this.m_fMaxHeight, i.y), this.m_nodeMoveRoot.setPosition(i)
            }
            OnDragEnd(e) {
                this.isDraging ? null != this.Event_DragEnd && this.Event_DragEnd() : null != this.Event_ClickItem && this.Event_ClickItem()
            }
            setLocked(e) {
                this.m_bIsLocked = e
            }
        };
        n([a(cc.Float)], o.prototype, "m_fMinWidth", void 0), n([a(cc.Float)], o.prototype, "m_fMaxWidth", void 0), n([a(cc.Float)], o.prototype, "m_fMinHeight", void 0), n([a(cc.Float)], o.prototype, "m_fMaxHeight", void 0), o = n([s], o), i.MissionNodeDrag = o, cc._RF.pop()
    }, {}],
    MissionSystem: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "69f7fzorB9Lt4mAfxtx95ui", "MissionSystem");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("../../../../LobbyCommon/Net/LobbyClient"),
            a = e("../GameClient"),
            o = e("../MainGame/Common/EnumFilter"),
            l = e("../MainGame/Common/ResourceManager"),
            r = e("../Mission/FishMissionData"),
            c = e("../Mission/MissionManager"),
            {
                ccclass: h,
                property: d
            } = cc._decorator;
        let u = class extends cc.Component {
            constructor() {
                super(...arguments), this.EVENT_ERROR_RETURN_LOBBY = null, this.m_aryMissionData = [], this.EVENT_UPDATE_MISSION_DATA = null, this.EVENT_UPDATE_TIMER = null, this.EVENT_TIME_UP = null, this.EVENT_UPDATE_MISSION_PROGRESS = null, this.m_TimerIntervalID = -1, this.m_iBeginTime = -1, this.m_iEndTime = -1, this.m_iNowTime = -1, this.m_iCountDownTime = 0, this.m_MissionManager = null, this.GAME_THEME_ID = -1
            }
            onGetFishMissionProgress(e) {
                cc.log("onGetFishMissionProgressdata: " + JSON.stringify(e));
                let t = e[900004].UserQuestData;
                this.ParseFishMissionQuestData(t)
            }
            SendGetMissionInfoCmd() {
                cc.log("SendCmd GetMissionBonusInfo"), null != s.LobbyClient.Instance.m_CommonEventInfo_900004 && s.LobbyClient.Instance.GetUserClient.getCommonEventInfo(this.RecMissionInfo.bind(this))
            }
            RecMissionInfo(e, t) {
                if (e == ArkSDK.HttpResult.OK && t && t.cmd_data) {
                    let e = t.cmd_data[900004];
                    if (e && 0 == e.result) {
                        let t = JSON.stringify(e.data);
                        if (this.ParseMisInfo(t)) {
                            if (null == this.m_MissionManager) {
                                let e = l.default.LoadGUI("FishMission");
                                e.setPosition(new cc.Vec2(0, 180)), this.m_MissionManager = e.getComponent(c.default), this.m_MissionManager.Init(this, this.m_aryMissionData.length), a.default.FishUIMgr.RegisterMouseEvent(e)
                            }
                            this.InitTimer(), null != this.EVENT_UPDATE_MISSION_DATA && this.EVENT_UPDATE_MISSION_DATA(this.m_aryMissionData)
                        }
                    }
                } else {
                    let t = "";
                    t = e == ArkSDK.HttpResult.Abort ? "S176" : e == ArkSDK.HttpResult.Condition ? "S177" : e == ArkSDK.HttpResult.Error ? "S180" : e == ArkSDK.HttpResult.NotReset ? "S178" : e == ArkSDK.HttpResult.Status ? "S179" : e == ArkSDK.HttpResult.Timeout ? "S181" : "S182", this.OnGetDataError(t)
                }
            }
            OnGetDataError(e) {
                cc.warn("\u6536\u5230\u9b5a\u6a5f\u4efb\u52d9\u8cc7\u6599\u932f\u8aa4 \u56de\u5927\u5ef3"), null != this.EVENT_ERROR_RETURN_LOBBY && this.EVENT_ERROR_RETURN_LOBBY(e)
            }
            ParseMisInfo(e) {
                cc.log("\u6536\u5230\u9b5a\u6a5f\u4efb\u52d9 ParseMisInfo = " + e);
                try {
                    let i = JSON.parse(e);
                    if (i.hasOwnProperty("Enable") && i.Enable && i.hasOwnProperty("QuestList") && i.QuestList.length > 0 && i.hasOwnProperty("UserQuestData")) {
                        let e = i.QuestList,
                            t = i.UserQuestData;
                        if (this.m_aryMissionData = [], 0 == e.length) return !1;
                        this.m_iBeginTime = i.BeginTimeUTC, this.m_iEndTime = i.EndTimeUTC, this.m_iNowTime = i.NowTimeUTC;
                        let n = !1;
                        for (let i = 0; i < e.length; i++) {
                            let s = new r.FishMissionData,
                                a = e[i],
                                o = a.TitleType,
                                l = a.GameThemeID;
                            if (this.GAME_THEME_ID < 0 && this.SetGameThemeID(), 200 == o && l == this.GAME_THEME_ID) {
                                cc.log("\u91d1\u525b\u4efb\u52d9\u8cc7\u8a0a %s", JSON.stringify(a)), n = !0, s.QuestID = a.QuestID, s.QuestLevel = a.QuestLevel, s.ThemeID = a.GameThemeID, s.CustomerGate = a.CustomGate, s.CustomerType = a.CustomType, s.CustomerInfo = a.CustomInfo, s.Priority = a.Priority, s.CycleSeconds = a.CycleSeconds, s.ExpireTimeUTC = a.ExpireTimeUTC;
                                let e = a.Award;
                                s.Award = new r.FishMissionAward, s.Award.AwardType = e.Type, s.Award.AwardEntries = e.AwardEntries, s.Award.AwardWinnings = e.AwardWinnings;
                                let i = e.AwardItem;
                                for (let t = 0; t < i.length; t++) {
                                    let e = i[t],
                                        n = e.ItemID,
                                        a = e.Amount;
                                    a > 0 && (s.Award.ItemID[t] = n, s.Award.ItemAmount[t] = a)
                                }
                                for (let n = 0; n < t.length; n++) {
                                    let e = t[n];
                                    if (s.QuestID == e.QuestID && s.QuestLevel == e.QuestLevel && s.ThemeID == e.GameThemeID) {
                                        s.CustomerAmount = e.CustomAmount, s.Status = e.Status;
                                        break
                                    }
                                }
                                this.m_aryMissionData.push(s)
                            }
                        }
                        return n
                    }
                    return !1
                } catch (t) {
                    return cc.error("parseMisInfo"), !1
                }
            }
            ParseFishMissionQuestData(e) {
                for (let t = 0; t < e.length; t++) {
                    let i = e[t],
                        n = this.m_aryMissionData.find(e => e.QuestID == i.QuestID);
                    null != n && (n.ThemeID == i.GameThemeID && n.QuestID == i.QuestID && n.QuestLevel == i.QuestLevel && (n.Status = i.Status, n.CustomerAmount = i.CustomAmount), n.QuestLevel = i.QuestLevel)
                }
                null != this.EVENT_UPDATE_MISSION_PROGRESS && this.EVENT_UPDATE_MISSION_PROGRESS(this.m_aryMissionData)
            }
            InitTimer() {
                let e = this.m_iEndTime - this.m_iNowTime;
                if (!(e < 0)) {
                    for (let t = 0; t < this.m_aryMissionData.length; t++) {
                        let i = this.m_aryMissionData[t].ExpireTimeUTC - this.m_iNowTime;
                        i > 0 && i < e && (e = i)
                    }
                    cc.log("InitTimer " + e), this.ForceSetTime(e)
                }
            }
            ForceSetTime(e) {
                cc.warn("ForceSetTime" + e), this.PauseTimer(), this.m_iCountDownTime = e, this.UpdateUI(this.m_iCountDownTime), this.StartConutDownTimer()
            }
            UpdateUI(e) {
                let t = e >= 86400 ? "ENDS IN: {day} days {hr}:{min}:{sec}" : "ENDS IN: {hr}:{min}:{sec}";
                null != this.EVENT_UPDATE_TIMER && this.EVENT_UPDATE_TIMER(e, t)
            }
            StartConutDownTimer() {
                -1 != this.m_TimerIntervalID && clearInterval(this.m_TimerIntervalID), this.m_TimerIntervalID = setInterval(() => this.Timer(this), 1e3)
            }
            PauseTimer() {
                clearInterval(this.m_TimerIntervalID)
            }
            Timer(e) {
                --e.m_iCountDownTime, e.m_iCountDownTime <= 0 && (e.m_iCountDownTime = 0, e.PauseTimer(), null != e.EVENT_TIME_UP && (e.EVENT_TIME_UP(), cc.log("\u6642\u9593\u5230\uff0c\u518d\u8981\u4e00\u6b21\u66f4\u65b0\u8cc7\u6599"), this.SendGetMissionInfoCmd())), e.UpdateUI(e.m_iCountDownTime)
            }
            ClearTimer() {
                -1 != this.m_TimerIntervalID && clearInterval(this.m_TimerIntervalID)
            }
            CallMinimizeLayout() {
                this.m_MissionManager && this.m_MissionManager.OnMinimizeLayout()
            }
            SetGameThemeID() {
                switch (SS.Common.GameEnvironment.CurrentGameNow) {
                    case o.FishGame.BS:
                        this.GAME_THEME_ID = 179001;
                        break;
                    case o.FishGame.TD:
                        this.GAME_THEME_ID = 178001;
                        break;
                    case o.FishGame.MTY:
                        this.GAME_THEME_ID = 171001;
                        break;
                    case o.FishGame.MTYL:
                        this.GAME_THEME_ID = 228001;
                        break;
                    case o.FishGame.ALD:
                        this.GAME_THEME_ID = 164001;
                        break;
                    case o.FishGame.ZB:
                        this.GAME_THEME_ID = 158001;
                        break;
                    case o.FishGame.KK:
                        this.GAME_THEME_ID = 152001;
                        break;
                    case o.FishGame.LS:
                        this.GAME_THEME_ID = 149001;
                        break;
                    case o.FishGame.GLP:
                        this.GAME_THEME_ID = 203001;
                        break;
                    case o.FishGame.MF:
                        this.GAME_THEME_ID = 148001;
                        break;
                    case o.FishGame.KC:
                        this.GAME_THEME_ID = 197001;
                        break;
                    case o.FishGame.CIR:
                        this.GAME_THEME_ID = 188001;
                        break;
                    case o.FishGame.LL:
                        this.GAME_THEME_ID = 206001
                }
            }
        };
        u = n([h], u), i.default = u, cc._RF.pop()
    }, {
        "../../../../LobbyCommon/Net/LobbyClient": void 0,
        "../GameClient": "GameClient",
        "../MainGame/Common/EnumFilter": "EnumFilter",
        "../MainGame/Common/ResourceManager": "ResourceManager",
        "../Mission/FishMissionData": "FishMissionData",
        "../Mission/MissionManager": "MissionManager"
    }],
    MultiLangObjCtrl: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "0c7eaBB4WNHgYEvKCbN9sxN", "MultiLangObjCtrl");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("./MultiLangSystem"),
            {
                ccclass: a,
                property: o
            } = cc._decorator;
        let l = class {
            constructor() {
                this.Lang = s.Language.CHT, this.Obj = []
            }
        };
        n([o(cc.Enum)], l.prototype, "Lang", void 0), n([o([cc.Node])], l.prototype, "Obj", void 0), l = n([a("ObjData")], l);
        let r = class extends cc.Component {
            constructor() {
                super(...arguments), this.MultiLangObjs = []
            }
            onEnable() {
                let e = null;
                for (let t = 0; t < this.MultiLangObjs.length; t++)
                    if (this.MultiLangObjs[t].Lang == s.default.UsingLang) e = this.MultiLangObjs[t];
                    else
                        for (let e = 0; e < this.MultiLangObjs[t].Obj.length; e++) this.MultiLangObjs[t].Obj[t].active = !1;
                for (let t = 0; t < e.Obj.length; t++) e.Obj[t].active = !0
            }
        };
        n([o([l])], r.prototype, "MultiLangObjs", void 0), r = n([a], r), i.default = r, cc._RF.pop()
    }, {
        "./MultiLangSystem": "MultiLangSystem"
    }],
    MultiLangSystem: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "01e23bNVwVNz6gj82ZLQvcZ", "MultiLangSystem");
        var n = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            s = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        }), i.Language = void 0;
        const a = e("../../GameClient/JsonUtils"),
            {
                ccclass: o
            } = cc._decorator;
        var l;
        (function(e) {
            e.CHT = "CHT", e.CHS = "CHS", e.EN = "EN", e.KM = "KM"
        })(l = i.Language || (i.Language = {}));
        let r = class {
            static get UsingLang() {
                return this._usingLang
            }
            static isUsingLang(e) {
                return e == this._usingLang
            }
            static Init(e, t) {
                return s(this, void 0, void 0, function*() {
                    switch (e) {
                        case "zh-tw":
                            this._usingLang = l.CHT;
                            break;
                        case "zh-cn":
                            this._usingLang = l.CHS;
                            break;
                        case "en-us":
                        default:
                            this._usingLang = l.EN
                    }
                    let i = this.getMultiLangUrl("FishHunter/Res/data/#ML#/TextList");
                    this.textList = yield a.LoadJson(i), t && t()
                })
            }
            static getMultiLangText(e) {
                return this.textList[e] ? this.textList[e] : ""
            }
            static getMultiLangUrl(e) {
                return e.replace("#ML#", this._usingLang)
            }
        };
        r._usingLang = null, r.textList = null, r = n([o], r), i.default = r, cc._RF.pop()
    }, {
        "../../GameClient/JsonUtils": "JsonUtils"
    }],
    NormalWeapon: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "327d9SWkxNErYnxD4jaBgLr", "NormalWeapon");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("./BaseWeapon"),
            a = e("./WeaponManager"),
            o = e("../Player/PlayerManager"),
            {
                ccclass: l,
                property: r
            } = cc._decorator;
        let c = class extends s.default {
            constructor() {
                super(...arguments), this.mainPlayer = null, this.lastShootTime = (new Date).getTime(), this.shootGap = 100, this.autoShootGap = 170
            }
            Init(e, t) {
                super.Init(e, t), this.Type = a.WeaponType.Normal, this.mainPlayer = o.PlayerManager.isMainSeat(e) ? o.PlayerManager.getPlayer(e) : null
            }
            ShootState(e) {
                if (!this.isGunReady) return 0;
                if (this.mainPlayer && this.mainPlayer.entries < this.mainPlayer.bet_value) return 2;
                if (o.PlayerManager.Instance.MaxBalance && this.mainPlayer.entries + this.mainPlayer.winning >= o.PlayerManager.Instance.MaxBalance) return 3;
                let t = (new Date).getTime() - this.lastShootTime;
                return t < this.shootGap ? 0 : !e && t < this.autoShootGap ? 0 : 1
            }
            ShootFunction(e) {
                super.ShootFunction(e), this.mainPlayer && (this.lastShootTime = (new Date).getTime(), o.PlayerManager.Instance.ModifyPlayerEntries(this.playerSeat, -this.mainPlayer.bet_value))
            }
        };
        c = n([l], c), i.default = c, cc._RF.pop()
    }, {
        "../Player/PlayerManager": "PlayerManager",
        "./BaseWeapon": "BaseWeapon",
        "./WeaponManager": "WeaponManager"
    }],
    OCTOPUS: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "c486fcP9ktG8aUhUNLCiwtv", "OCTOPUS");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("./BaseFish"),
            {
                ccclass: a
            } = cc._decorator;
        let o = class extends s.default {
            SpeedUp() {
                this.mSeek && this.aliveStatus == s.FishState.ALIVE && this.mSeek.AddSpeed(80, 750)
            }
        };
        o = n([a], o), i.default = o, cc._RF.pop()
    }, {
        "./BaseFish": "BaseFish"
    }],
    PARITE_SHIP: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "8febe4F4N5ALLGIMghoFmKZ", "PARITE_SHIP");
        var n = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            s = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("../Common/AudioManager"),
            o = e("./BaseFish"),
            {
                ccclass: l,
                property: r
            } = cc._decorator;
        let c = class extends o.default {
            constructor() {
                super(...arguments), this.skeleton = null, this.moveSound = null
            }
            Init(e, t) {
                super.Init(e, t), this.skeleton.timeScale = 1, this.skeleton.setAnimation(0, "animation", !0), this.moveSound = a.default.Instance.Play("Ghostship_move_01", .3, !0)
            }
            FishDie(e) {
                return s(this, void 0, void 0, function*() {
                    this.aliveStatus = o.FishState.DEAD, this.canCollision = !1, this.StopAction(), this.skeleton.timeScale = 0, this.moveSound && (a.default.Instance.Stop(this.moveSound), this.moveSound = null), a.default.Instance.Play("Ghostship_die_01"), this.node.runAction(cc.sequence(cc.repeat(cc.sequence(cc.moveTo(.05, this.node.getPosition().add(new cc.Vec2(3, 3))), cc.moveTo(.05, this.node.getPosition().add(new cc.Vec2(-3, -3)))), 10), cc.moveTo(.1, this.node.getPosition()), cc.callFunc(() => {
                        this.CoinEffect(3)
                    }), cc.fadeOut(1), cc.callFunc(() => {
                        a.default.Instance.Play("41_catch_bigfish"), this.RemoveSelf()
                    })))
                })
            }
            FishOut(e) {
                this.moveSound && (a.default.Instance.Stop(this.moveSound), this.moveSound = null), super.FishOut(e)
            }
            RemoveSelf() {
                this.moveSound && (a.default.Instance.Stop(this.moveSound), this.moveSound = null), this.skeleton.setEventListener(null), this.skeleton.clearTracks(), super.RemoveSelf()
            }
            PauseBehavior(e, t) {
                super.PauseBehavior(e, t), this.skeleton.paused = !0
            }
            ResumeBehavior() {
                super.ResumeBehavior(), this.skeleton.paused = !1
            }
        };
        n([r(sp.Skeleton)], c.prototype, "skeleton", void 0), c = n([l], c), i.default = c, cc._RF.pop()
    }, {
        "../Common/AudioManager": "AudioManager",
        "./BaseFish": "BaseFish"
    }],
    POSEIDON: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "60af6u2udlN6aLT7wRMYYMD", "POSEIDON");
        var n = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            s = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            o = e("../Common/AudioManager"),
            l = e("./BaseFish"),
            {
                ccclass: r,
                property: c
            } = cc._decorator;
        let h = class extends l.default {
            constructor() {
                super(...arguments), this.ModelAni = null, this.SMR = null, this.ModelMat = null, this.ccAni = null, this.bubble = null, this.ice_group = [], this.color = cc.Color.WHITE, this.tween = null, this.newMat = null
            }
            update(e) {
                super.update(e), this.tween && this.newMat.setProperty("diffuseColor", this.color)
            }
            InitParameter() {
                super.InitParameter(), this.node.setPosition(cc.Vec2.ZERO), this.o < 90 || this.o > 270 ? this.node.setScale(1, -1) : this.node.setScale(cc.Vec2.ONE), this.node.angle = this.o > 180 ? 180 : 0, this.newMat = cc.MaterialVariant.create(this.ModelMat, this.SMR), this.SMR.setMaterial(0, this.newMat), this.color = cc.Color.WHITE, this.newMat.setProperty("diffuseColor", this.color), this.ModelAni.stop(), this.ModelAni.play("swim"), this.ccAni.stop(), this.ccAni.play("Swim"), this.bubble.node.active = !0, this.bubble.resetSystem(), this.ice_group.forEach(e => {
                    e.active = !1
                }), this.ModelAni.once("lastframe", () => {
                    this.FishOut(l.FishOutType.FISH_PATH_FINISH)
                })
            }
            FishDie(e) {
                return s(this, void 0, void 0, function*() {
                    this.aliveStatus = l.FishState.DEAD, this.canCollision = !1, this.isInit = !1, this.Event_FishLeave && this.Event_FishLeave(this, 6), o.default.Instance.Play("effect_PO_die2"), this.ModelAni.pause(), this.ccAni.pause(), this.node.runAction(cc.sequence(cc.repeat(cc.sequence(cc.moveBy(.1, 10, 10), cc.moveBy(.1, -10, -10)), 5), cc.callFunc(() => {
                        this.CoinEffect(2)
                    }), cc.fadeOut(1), cc.callFunc(() => {
                        this.RemoveSelf()
                    }))), yield this.delay(1e3), o.default.Instance.Play("41_catch_bigfish")
                })
            }
            RemoveSelf() {
                this.ModelAni.stop(), this.ccAni.stop(), this.bubble.node.active = !1, super.RemoveSelf()
            }
            OnHitFish() {
                this.tween && (this.tween.stop(), this.tween = null, this.color = cc.Color.WHITE, this.newMat.setProperty("diffuseColor", this.color)), this.tween = cc.tween(this.color).repeat(2, cc.tween(this.color).to(.1, {
                    r: 200,
                    g: 0,
                    b: 0
                }).to(.1, {
                    r: 255,
                    g: 255,
                    b: 255
                })).call(() => {
                    this.tween = null, this.color = cc.Color.WHITE, this.newMat.setProperty("diffuseColor", this.color)
                }).start()
            }
            isLockInScreen(e) {
                if (e) {
                    let t = null;
                    if ((t = this.mainFishNode ? this.mainFishNode.convertToWorldSpaceAR(e.getPosition()) : this.node.convertToWorldSpaceAR(e.getPosition())).x >= -100 && t.x < a.default.WinSize.width - -100 && t.y >= -100 && t.y < a.default.WinSize.height - -100) return t
                }
                return null
            }
            PauseBehavior(e, t) {
                super.PauseBehavior(e, t), this.ModelAni.pause(), this.ccAni.pause(), this.ice_group.forEach(e => {
                    e.active = !0
                })
            }
            ResumeBehavior() {
                super.ResumeBehavior(), this.ModelAni.resume(), this.ccAni.resume(), this.ice_group.forEach(e => {
                    e.active = !1
                })
            }
            getPosArray(e) {
                super.getPosArray(), 330 == this.startPos.x && 125 == this.startPos.y ? this.offsetPos = cc.v2(0, 100) : 330 == this.startPos.x && -125 == this.startPos.y ? this.offsetPos = cc.v2(0, 150) : -330 == this.startPos.x && 125 == this.startPos.y ? this.offsetPos = cc.v2(0, -100) : -330 == this.startPos.x && -125 == this.startPos.y && (this.offsetPos = cc.v2(100, -100)), this.node.setPosition(this.offsetPos)
            }
        };
        n([c(cc.SkeletonAnimation)], h.prototype, "ModelAni", void 0), n([c(cc.SkinnedMeshRenderer)], h.prototype, "SMR", void 0), n([c(cc.Material)], h.prototype, "ModelMat", void 0), n([c(cc.Animation)], h.prototype, "ccAni", void 0), n([c(cc.ParticleSystem)], h.prototype, "bubble", void 0), n([c([cc.Node])], h.prototype, "ice_group", void 0), h = n([r], h), i.default = h, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../Common/AudioManager": "AudioManager",
        "./BaseFish": "BaseFish"
    }],
    PlayerManager: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "91abf7bjG5DCJ3oBIXmbZCQ", "PlayerManager");
        var n, s = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        }), i.Player = i.PlayerManager = i.PlayerUIType = void 0;
        const a = e("../Common/ResourceManager"),
            o = e("../Weapon/WeaponManager"),
            l = e("../Weapon/BetController"),
            r = e("../Fish/FishManager"),
            c = e("../Common/AudioManager"),
            h = e("../Common/MultiLangSystem"),
            d = e("../Common/PreloadManager"),
            u = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            m = e("../../../../../LobbyCommon/PopupMessage/Script/PopupMsgMgr"),
            p = e("../../../../../LobbyCommon/Net/LobbyClient"),
            f = e("../../System/SkillSystem"),
            S = e("../../../../../LobbyCommon/Helper/EventSystem"),
            g = e("../../GameClient"),
            y = e("../../../../../LobbyCommon/Net/ClickLog"),
            _ = e("../../../../../LobbyCommon/Net/ClickLogEnum");
        var C;
        (function(e) {
            e.BetCtrl = "0"
        })(C = i.PlayerUIType || (i.PlayerUIType = {}));
        const {
            ccclass: I,
            property: P
        } = cc._decorator;
        let v = n = class extends cc.Component {
            constructor() {
                super(...arguments), this.maxPlayer = 4, this.players = null, this.playerMainSeat = null, this.flipSeat = new Array(2, 3, 0, 1), this.betCtrl = null, this.bulletCount = 0, this.PlayerEntries = 0, this.PlayerWinning = 0, this.MaxBalance = null, this.isLockChangeBet = !1, this.tempBet = 5, this.betChange = !1, this.betList = null, this.tempBetList = null, this.m_aryWeaponLvData = null, this.m_isUIInitFinish = !1, this._isSendChangeBetLog = !1
            }
            static get Instance() {
                return this.instance
            }
            static getPlayer(e) {
                return null == this.instance.players && this.instance.Init(), this.instance.players[e]
            }
            static getPlayerById(e) {
                for (let t in this.instance.players)
                    if (this.instance.players[t].id == e) return this.instance.players[t];
                return null
            }
            static get MainSeat() {
                return this.instance.playerMainSeat
            }
            static isMainSeat(e) {
                return e == this.instance.playerMainSeat
            }
            static getBetCtrl(e) {
                return u.default.isReverse ? this.instance.betCtrl[this.instance.flipSeat[e]] : this.instance.betCtrl[e]
            }
            get BulletCount() {
                return this.bulletCount
            }
            onLoad() {
                n.instance = this
            }
            Init() {
                d.default.Instance.onReleaseSceneEvent.AddListener(this.Clear.bind(this)), this.players = new Array(null, null, null, null);
                for (let e = 0; e < this.maxPlayer; e++) {
                    let t = new b;
                    this.players[e] = t
                }
                "playgd" == window.gd_nowLOGO && (p.LobbyClient.Instance.GetJPSystem.OnUpdatePlayerInfoSignal.remove(this.OnUpdatePlayerInfo, this), p.LobbyClient.Instance.GetJPSystem.OnUpdatePlayerInfoSignal.add(this.OnUpdatePlayerInfo, this))
            }
            onDestroy() {
                "playgd" == window.gd_nowLOGO && p.LobbyClient.Instance && p.LobbyClient.Instance.GetJPSystem && p.LobbyClient.Instance.GetJPSystem.OnUpdatePlayerInfoSignal.remove(this.OnUpdatePlayerInfo, this)
            }
            InitUI() {
                this.betCtrl = new Array(null, null, null, null);
                for (let e = 0; e < this.maxPlayer; e++) this.betCtrl[e] = a.default.LoadGUI(C.BetCtrl).getComponent(l.default), this.betCtrl[e].Init(e);
                this.m_isUIInitFinish = !0
            }
            ModifyPlayerEntries(e, t, i, s = !0) {
                const a = this.players[e];
                a && a.isMain && (this.players[e].entries += t, this.players[e].entries < 0 ? g.default.FishUIMgr.SetEntriesNow(0) : g.default.FishUIMgr.SetEntriesNow(this.players[e].entries, t > 0), s && n.BulletSync(1, null))
            }
            ModifyPlayerWinning(e, t, i, s = !0, a = !1) {
                const o = this.players[e];
                if (o && o.isMain) {
                    this.players[e].entries += t;
                    g.default.FishUIMgr.SetEntriesNow(this.players[e].entries);
                    // SS.Common.GameEnvironment.IsUseScoreBox ? this.players[e].winning += t : this.players[e].entries += t;
                    // let a = !1;
                    // s && (a = n.BulletSync(-1, i)), a || (SS.Common.GameEnvironment.IsUseScoreBox ? (this.players[e].winning < 0 ? g.default.FishUIMgr.SetWinningNow(0, !1, !0) : g.default.FishUIMgr.SetWinningNow(this.players[e].winning), cc.log("Win\u5206\u8b8a\u52d5: " + this.players[e].winning)) : this.players[e].entries < 0 ? g.default.FishUIMgr.SetEntriesNow(0) : g.default.FishUIMgr.SetWinningNow(this.players[e].entries))
                }
            }
            onInitPlayer(e) {
                null == this.players && this.Init(), this.playerMainSeat = e.seat;
                let t = this.players[this.playerMainSeat];
                t.id = e.id, t.name = e.name, t.seat = e.seat, t.entries = e.entries, t.winning = e.winning, this.PlayerEntries = t.entries, this.PlayerWinning = t.winning, t.isMain = !0, this.betList = e.bet_list, t.bet_value = e.bet_value;
                let i = !1;
                t.bet_value > this.betList[this.betList.length - 1] && (t.bet_value = this.betList[this.betList.length - 1], i = !0), t.bet_value < this.betList[0] && (t.bet_value = this.betList[0], i = !0), this.RotateBackGround(t.seat), o.default.Instance.Init(this.playerMainSeat), this.InitUI(), n.getBetCtrl(t.seat).PlayerEnter(t), g.default.FishUIMgr.Init(), g.default.FishUIMgr.SetUserName(SS.Network.LoginModel.LoginInfo.user_id), g.default.FishUIMgr.SetGameVersion(SS.Common.GameEnvironment.CurrentGameVersion), g.default.FishUIMgr.SetEntriesNow(t.entries), g.default.FishUIMgr.SetWinningNow(t.winning), g.default.FishUIMgr.SetPurchaseBlockingMsg(h.default.getMultiLangText(SS.Common.GameEnvironment.IsShowDonate ? "DBH" : "PBH")), g.default.FishUIMgr.SetProfileBlockingMsg && g.default.FishUIMgr.SetProfileBlockingMsg(h.default.getMultiLangText("ProfileBlockHint")), g.default.FishUIMgr.SetUserInfoPosition(this.playerMainSeat);
                let s = 1280 / u.default.WinSize.width,
                    l = o.default.WeaponUIPosition(this.playerMainSeat);
                g.default.FishUIMgr.SetWeaponChangeAreaPosition(l.x * s, l.y * s), g.default.FishUIMgr.SetWeaponChangeHintPosition(l.x * s, l.y * s);
                let r = n.getBetCtrl(this.playerMainSeat).node.getPosition();
                g.default.FishUIMgr.SetBetBtnPosition(r.x * s, r.y * s), g.default.FishUIMgr.ShowPurchaseHint(t.entries < t.bet_value);
                let c = e.weapon;
                if (c && 0 != c || (c = 50001), this.m_aryWeaponLvData) {
                    let e = {};
                    for (let t = 0; t < this.m_aryWeaponLvData.length; t++) e[this.betList[t]] = this.m_aryWeaponLvData[t];
                    o.default.Instance.SetWeaponSkinData(e)
                }
                if (o.default.Instance.ChangeWeapon(t.seat, c), e.hasOwnProperty("BuddhaPalm")) {
                    let i = a.default.LoadGUI("BuddhaPalmUI"),
                        n = e.BuddhaPalm;
                    n.bet = t.bet_value;
                    let s = (e, t) => {
                        let i = {};
                        i.energy_bet = e, i.auto = t, g.default.SkillSystem.SendCustomCmd(f.SKILL_CMD_NAME.BUDDHA_PALM, i)
                    };
                    i.getComponent("BuddhaPalmUI").Init(n, s, this.playerMainSeat)
                }
                t.isPlaying = !0, "playgd" == window.gd_nowLOGO && (t.nickName = e.nick_name, t.equipAvatar = e.equip_avatar, t.equipAvatarFrame = e.equip_avatar_frame, g.default.FishUIMgr.SetMainPlayerAvatarInfo && g.default.FishUIMgr.SetMainPlayerAvatarInfo(e)), g.default.PlayerSystem.SendUpdatePlayer(), i && g.default.PlayerSystem.UpdateBetValue(t)
            }
            RotateBackGround(e) {
                e > 1 ? (r.default.Instance.ai_seek.SetFlip(!0), u.default.Instance.setReverse(!0)) : (r.default.Instance.ai_seek.SetFlip(!1), u.default.Instance.setReverse(!1)), S.EventSystem.Event(S.FishHunter.RotateBackGround).Notify(e)
            }
            onInitOtherPlayer(e) {
                let t = e.seat,
                    i = this.players[t];
                if (i.isPlaying) return;
                i.id = e.id, i.seat = t, i.entries = e.entries, i.winning = e.winning, i.bet_value = e.bet_value, n.getBetCtrl(t).PlayerEnter(i);
                let s = e.weapon;
                s && 0 != s || (s = 50001), o.default.Instance.ChangeWeapon(t, s), i.isPlaying = !0;
                let a = e.skillData;
                if (a && "fire_storm" == a.skill_id) {
                    let e = a.skill_info,
                        t = e.score,
                        n = e.multiple_all,
                        s = e.time_left;
                    g.default.SkillSystem && g.default.SkillSystem.CreateFlameStorm(i.seat, i.bet_value, s, t, n)
                }
                "playgd" == window.gd_nowLOGO && (i.nickName = e.nick_name, i.equipAvatar = e.equip_avatar, i.equipAvatarFrame = e.equip_avatar_frame, g.default.FishUIMgr.SetOtherPlayerInfo && g.default.FishUIMgr.SetOtherPlayerInfo(e))
            }
            onUpdateBet(e, t, i, s) {
                i != this.playerMainSeat && (n.getBetCtrl(i).UpdateBet(e, !1), null != t && (o.default.Instance.ChangeWeapon(i, t), o.default.Instance.AutoState(i, s)))
            }
            CheckBetListOnSkillEnd(e) {
                null != this.tempBetList && this.CheckBetList(e, this.tempBetList)
            }
            CheckBetList(e, t, i = 0, s = 0) {
                if (null == this.betList || e != this.playerMainSeat) return;
                this.tempBetList = null;
                let a = !1;
                if (-1 == i && (n.BulletSync(-1), n.Instance.ModifyPlayerEntries(this.playerMainSeat, s, null, !1), cc.warn("CheckBetList, \u5b50\u5f48 onBlast bet \u932f\u8aa4\u6536\u5230 -1 \u76ee\u524d\u5b50\u5f48\u6578 = " + n.Instance.bulletCount + ", \u52a0\u56de bet = " + s), o.default.Instance.AutoShoot && (o.default.Instance.AutoShoot = !1), a = !0), a || this.betList.toString() != t.toString()) {
                    cc.warn("ChangeBetList, \u6536\u5230\u65b0 bet \u6bb5 = ", t.toString() + ", \u76ee\u524d bet \u6bb5 = ", this.betList.toString() + ", \u76ee\u524d bet_value =" + this.players[this.playerMainSeat].bet_value + ", \u662f\u5426\u5b50\u5f48 bet \u932f\u8aa4 = " + a), this.betList = t;
                    let e = this.betList[this.betList.length - 1];
                    this.players[this.playerMainSeat].bet_value > e && (o.default.Instance.bulletLimit = 0, o.default.Instance.AutoShoot = !1, this.tempBet = e, this.betChange = !0, this.updateBet(e, !0), this.SendUpdateBet(), m.PopupMsgMgr.Instance.ShowPopMsg(m.PopupPriority.Warning, "C51", g.default.Instance.title, "BetListChange", () => {
                        o.default.Instance.bulletLimit = 20
                    }, e.toString()))
                }
            }
            onReflash(e, t, i, n, s) {
                this.players[t].isPlaying && this.players[t].id == e && i && (this.ModifyPlayerEntries(t, i, n, !1), this.ModifyPlayerWinning(t, -i, s, !1))
            }
            onPlayerLeave(e) {
                if (null == this.players) return;
                const t = this.players[e];
                t.isPlaying && (g.default.SkillSystem && g.default.SkillSystem.RemovePlayerSkill(e), n.getBetCtrl(e).PlayerLeave(), o.default.Instance.PlayerLeave(e), g.default.FishUIMgr.SetOtherPlayerInfo && g.default.FishUIMgr.SetOtherPlayerInfo(null, e), t.id = "", t.name = "", t.isPlaying = !1)
            }
            static BulletSync(e, t = null) {
                if (null != t && (this.Instance.PlayerWinning = t), null == e) return !1;
                this.Instance.bulletCount += e;
                let i = 0 == this.Instance.bulletCount;
                return i && (SS.Common.GameEnvironment.IsUseScoreBox ? (this.Instance.players[this.Instance.playerMainSeat].winning = this.Instance.PlayerWinning, this.updateWinningWindow()) : (this.Instance.players[this.Instance.playerMainSeat].entries += this.Instance.PlayerWinning, g.default.FishUIMgr.SetEntriesNow(this.Instance.players[this.Instance.playerMainSeat].entries))), this.Instance.bulletCount < 0 && (this.Instance.bulletCount = 0), i
            }
            static updateWinningWindow() {
                g.default.FishUIMgr.SetWinningNow(this.Instance.PlayerWinning, !1, !0)
            }
            SendUpdateBet() {
                this.betChange && (this.betChange = !1, this.players[this.playerMainSeat].bet_value = this.tempBet, g.default.PlayerSystem.UpdateBetValue(this.players[this.playerMainSeat]))
            }
            AddBet(e = !0) {
                if (c.default.Instance.PlayByAudioClipTable("PLUS_BET_BTN"), n.Instance.MaxBalance && this.players[this.playerMainSeat].entries + this.players[this.playerMainSeat].winning >= n.Instance.MaxBalance) return void m.PopupMsgMgr.Instance.ShowPopMsg(m.PopupPriority.Info, "C29", g.default.Instance.title, "MaxBalance", null);
                if (this.isLockChangeBet) return;
                if (o.default.Instance.AutoShoot && (o.default.Instance.AutoShoot = !1), this.tempBet == this.betList[this.betList.length - 1]) return e ? void 0 : (this.tempBet = this.betList[0], this.betChange = !0, void this.updateBet(this.tempBet, !1));
                let t = this.betList.indexOf(this.tempBet);
                this.tempBet = this.betList[t + 1], this.betChange = !0, this.updateBet(this.tempBet, this.tempBet == this.betList[this.betList.length - 1])
            }
            MinusBet(e = !1) {
                if (c.default.Instance.PlayByAudioClipTable("MINUS_BET_BTN"), n.Instance.MaxBalance && this.players[this.playerMainSeat].entries + this.players[this.playerMainSeat].winning >= n.Instance.MaxBalance) return void m.PopupMsgMgr.Instance.ShowPopMsg(m.PopupPriority.Info, "C29", g.default.Instance.title, "MaxBalance", null);
                if (this.isLockChangeBet) return;
                if (o.default.Instance.AutoShoot && (o.default.Instance.AutoShoot = !1), this.tempBet == this.betList[0]) return e ? void 0 : (this.tempBet = this.betList[this.betList.length - 1], this.betChange = !0, void this.updateBet(this.tempBet, !0));
                let t = this.betList.indexOf(this.tempBet);
                this.tempBet = -1 != t ? this.betList[t - 1] : this.betList[this.betList.length - 1], this.betChange = !0, this.updateBet(this.tempBet, !1)
            }
            SendChangeBetLog() {
                !1 === this._isSendChangeBetLog && (this._isSendChangeBetLog = !0, y.ClickLog.DirectSend(_.LogName.PlayerAction, _.LogType_PlayerAction.InGame, _.LogEvent_InGame.ChangeBet))
            }
            updateBet(e, t) {
                n.getBetCtrl(this.playerMainSeat).UpdateBet(e, t), o.default.Instance.OnBetChange(this.playerMainSeat), t ? (c.default.Instance.Play("02_maxbet"), S.EventSystem.Event(S.FishHunter.ReachMaxBet).Notify()) : S.EventSystem.Event(S.FishHunter.UpdateBet).Notify(), g.default.FishUIMgr.ShowPurchaseHint(this.players[this.playerMainSeat].entries < e * o.default.Instance.getBetScale), g.default.FishUIMgr.SetBet(e), g.default.Instance.UpdateBetData(e);
                let i = {};
                i.bet = e, i.auto = o.default.Instance.AutoShoot, S.EventSystem.Event(S.FishHunter.UpdateBuddhaPalm).Notify(i)
            }
            Clear() {
                this.betList.length = 0, n.instance = null
            }
            CheckPlayerBetMax() {
                return n.getPlayer(this.playerMainSeat).bet_value == this.betList[this.betList.length - 1]
            }
            OnUpdatePlayerInfo(e) {
                g.default.Instance.RecvPlayerInfo(e);
                let t = n.getPlayerById(e.ark_id);
                null != t && (t.nickName = e.nickname, t.equipAvatar = e.avatar_id, t.equipAvatarFrame = e.avatar_frame_id, g.default.FishUIMgr.UpdatePlayerInfo && g.default.FishUIMgr.UpdatePlayerInfo(t.seat, e))
            }
        };
        v.instance = null, v = n = s([I], v), i.PlayerManager = v;
        class b {
            constructor() {
                this.id = "", this.seat = 0, this.entries = 0, this.winning = 0, this.bet_value = 0, this.lv = 0, this.name = "", this.isMain = !1, this.isPlaying = !1, this.nickName = "", this.equipAvatar = "", this.equipAvatarFrame = ""
            }
        }
        i.Player = b, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../../../../../LobbyCommon/Helper/EventSystem": void 0,
        "../../../../../LobbyCommon/Net/ClickLog": void 0,
        "../../../../../LobbyCommon/Net/ClickLogEnum": void 0,
        "../../../../../LobbyCommon/Net/LobbyClient": void 0,
        "../../../../../LobbyCommon/PopupMessage/Script/PopupMsgMgr": void 0,
        "../../GameClient": "GameClient",
        "../../System/SkillSystem": "SkillSystem",
        "../Common/AudioManager": "AudioManager",
        "../Common/MultiLangSystem": "MultiLangSystem",
        "../Common/PreloadManager": "PreloadManager",
        "../Common/ResourceManager": "ResourceManager",
        "../Fish/FishManager": "FishManager",
        "../Weapon/BetController": "BetController",
        "../Weapon/WeaponManager": "WeaponManager"
    }],
    PlayerSystem: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "41aa6geNCZMK4VJW+hdAYvC", "PlayerSystem"), Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const n = e("../MainGame/Weapon/WeaponManager"),
            s = e("./baseSystem");
        i.default = class extends s.default {
            constructor(e) {
                super(e, "fish_player"), this.InitPlayerEvent = null, this.UpdatePlayerEvent = null, this.UpdateBetEvent = null, this.ReflashEvent = null, this.UpdateBalanceEvent = null, this.RefreshBalanceEvent = null, this.RefreshBalanceByWinJPEvent = null, this.GetFishQuestInfo = null, this.GetFishQuestUpdate = null, this.FishQuestUpdateBalanceEvent = null, this.FishQuestCollectEvent = null, this.FishQuestCheckEvent = null, this.FishPuzzleQuestCheckEvent = null, this.FishPuzzleQuestCollectEvent = null, this.FishPuzzleUpdateBalanceEvent = null, this.UpdateAssetEvent = null, this.tempSN = 0, this.RegisterCmdCallback("init_player", this.onInitPlayer.bind(this)), this.RegisterCmdCallback("update_player", this.onUpdatePlayer.bind(this)), this.RegisterCmdCallback("update_bet", this.onUpdateBet.bind(this)), this.RegisterCmdCallback("reflash", this.onReflash.bind(this)), this.RegisterCmdCallback("current_credit", this.onUpdateBalance.bind(this), "current_credit"), this.RegisterCmdCallback("refresh_credit", this.onRefreshEntries.bind(this), "refresh_credit"), this.RegisterCmdCallback("FishQuestInfo", this.onFishQuestInfo.bind(this)), this.RegisterCmdCallback("FishQuestUpdate", this.onGetFishQuestUpdate.bind(this)), this.RegisterCmdCallback("collect_quest", this.onGetFishQuestCollect.bind(this), "collect_quest"), this.RegisterCmdCallback("check_quest", this.onGetFishCheckllect.bind(this)), this.RegisterCmdCallback("puzzle_check", this.onGetFishCheckPuzzle.bind(this)), this.RegisterCmdCallback("puzzle_collect", this.onGetFishPuzzleQuestCollect.bind(this)), this.RegisterCmdCallback("synchronize_property", this.onGetSyncProperty.bind(this))
            }
            InitPlayer(e) {
                let t = {
                    lang: e
                };
                this.SendCmd("init_player", t)
            }
            onInitPlayer(e, t, i, n, s, a) {
                cc.log("[onInitPlayer]data: ", t), this.InitPlayerEvent && this.InitPlayerEvent(t)
            }
            SendUpdatePlayer() {
                this.SendCmd("update_player")
            }
            onUpdatePlayer(e, t, i, n, s, a) {
                this.UpdatePlayerEvent && Object.keys(t.players).forEach(e => {
                    this.UpdatePlayerEvent(t.players[e])
                })
            }
            UpdateBetValue(e) {
                let t = {};
                t.seat = e.seat, t.bet_value = e.bet_value, t.weapon = n.default.Instance.getWeaponType(e.seat), t.auto = n.default.Instance.AutoShoot, this.SendCmd("update_bet", t)
            }
            onUpdateBet(e, t, i, n, s, a) {
                if (this.UpdateBetEvent) {
                    const e = t.bet_value,
                        i = t.weapon,
                        n = t.seat,
                        s = t.auto;
                    this.UpdateBetEvent(e, i, n, s)
                }
            }
            onReflash(e, t, i, n, s, a) {
                if (this.ReflashEvent) {
                    if (t.trans_id <= this.tempSN) return;
                    this.tempSN = t.trans_id;
                    const e = t.player_id,
                        i = t.seat,
                        n = t.change_coin,
                        s = t.balance;
                    this.ReflashEvent(e, i, n, s)
                }
            }
            SendUpdateBalance() {
                this.SendCmd("current_credit")
            }
            SendRefreshBalance() {
                this.SendCmd("refresh_credit")
            }
            onUpdateBalance(e, t, i, n, s, a) {
                this.UpdateBalanceEvent && this.UpdateBalanceEvent(), this.FishQuestUpdateBalanceEvent && this.FishQuestUpdateBalanceEvent(t.winnings, t.entries)
            }
            onRefreshEntries(e, t, i, n, s, a) {
                this.RefreshBalanceEvent && this.RefreshBalanceEvent(t), this.RefreshBalanceByWinJPEvent && this.RefreshBalanceByWinJPEvent(t), this.FishPuzzleUpdateBalanceEvent && this.FishPuzzleUpdateBalanceEvent(t.winnings, t.entries), this.FishQuestUpdateBalanceEvent && this.FishQuestUpdateBalanceEvent(t.winnings, t.entries)
            }
            SendCollectQueat(e, t) {
                let i = {};
                i.quest_id = e, i.quest_level = t, this.SendCmd("collect_quest", i)
            }
            onGetFishQuestUpdate(e, t, i, n, s, a) {
                this.GetFishQuestUpdate && this.GetFishQuestUpdate(t)
            }
            onFishQuestInfo(e, t, i, n, s, a) {
                this.GetFishQuestInfo && this.GetFishQuestInfo(t)
            }
            onGetFishQuestCollect(e, t, i, n, s, a) {
                this.FishQuestCollectEvent && this.FishQuestCollectEvent(t)
            }
            SendCheckQueat() {
                this.SendCmd("check_quest")
            }
            onGetFishCheckllect(e, t, i, n, s, a) {
                this.FishQuestCheckEvent && this.FishQuestCheckEvent(t.check_result)
            }
            SendCheckPuzzleQueat() {
                this.SendCmd("puzzle_check")
            }
            onGetFishCheckPuzzle(e, t, i, n, s, a) {
                this.FishPuzzleQuestCheckEvent && this.FishPuzzleQuestCheckEvent(t.check_result)
            }
            SendFishPuzzleQuestCollect(e, t, i) {
                let n = {};
                n.name = e, n.serial_no = t, n.quest_level = i, this.SendCmd("puzzle_collect", n)
            }
            onGetFishPuzzleQuestCollect(e, t, i, n, s, a) {
                this.FishPuzzleQuestCollectEvent && this.FishPuzzleQuestCollectEvent(t)
            }
            SendCollectAward(e, t) {
                this.RegisterCmdCallback("collect_award", t), this.SendCmd("collect_award", e)
            }
            SendSyncAsset() {
                this.SendCmd("synchronize_property")
            }
            onGetSyncProperty(e, t, i, n, s, a) {
                let o = t.player_info;
                this.UpdateAssetEvent && this.UpdateAssetEvent(o)
            }
            SendCustomCmd(e, t) {
                this.SendCmd(e, t)
            }
        }, cc._RF.pop()
    }, {
        "../MainGame/Weapon/WeaponManager": "WeaponManager",
        "./baseSystem": "baseSystem"
    }],
    Player: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "ae8e4O3H7JBrZErFS3JxN3x", "Player"), Object.defineProperty(i, "__esModule", {
            value: !0
        }), i.GameLogMainPlayer = i.OpenOtherPlayerProfile = i.OpenMainPlayerProfile = void 0;
        const n = e("../GameClient"),
            s = e("../MainGame/Fish/FishManager"),
            a = e("../MainGame/Player/PlayerManager"),
            o = e("../MainGame/Weapon/WeaponManager");
        (function(e) {
            e[e.InFishBattleShipInfo = 5] = "InFishBattleShipInfo", e[e.InFishBattleShip = 6] = "InFishBattleShip", e[e.InFishBattleShipPanelInfo = 7] = "InFishBattleShipPanelInfo", e[e.InFishBattleShipPanelSingle = 8] = "InFishBattleShipPanelSingle", e[e.InFish = 9] = "InFish"
        })(i.OpenMainPlayerProfile || (i.OpenMainPlayerProfile = {})),
        function(e) {
            e[e.InFishBattleShipInfo = 2] = "InFishBattleShipInfo", e[e.InFishBattleShip = 3] = "InFishBattleShip", e[e.InFishBattleShipPanelInfo = 4] = "InFishBattleShipPanelInfo", e[e.InFishBattleShipPanelSingle = 5] = "InFishBattleShipPanelSingle", e[e.InFish = 6] = "InFish"
        }(i.OpenOtherPlayerProfile || (i.OpenOtherPlayerProfile = {}));
        class l {
            static init() {
                l.playerBeginTime = Math.floor(Date.now() / 1e3), l.lastPlayerTime = l.playerBeginTime, l.FishList = [], l.HitList = [], l.SceneName = "", n.default.Instance.schedule(() => {
                    n.default.Instance.sendGameEventLog()
                }, 30), l.isInit = !0
            }
            static pushFish(e) {
                if (-1 != l.recordFishTypeList.indexOf(e.Type)) {
                    let t = e.getAliveTime();
                    115 == e.Type && t > 30 && (t %= 30);
                    let i = null;
                    l.FishList.forEach(t => {
                        t.FishType == e.Type && (i = t)
                    }), i ? i.FishTime += t : (i = {
                        FishType: e.Type,
                        FishTime: t
                    }, l.FishList.push(i))
                }
            }
            static pushHit(e, t, i) {
                if (!a.PlayerManager.isMainSeat(i)) return;
                let n = o.default.Instance.getMainPlayerWeaponType(),
                    r = "";
                switch (n) {
                    case o.WeaponType.Normal:
                        r = "Normal";
                        break;
                    case o.WeaponType.Lock:
                        r = "Lock";
                        break;
                    case o.WeaponType.Tiger:
                        r = "Tiger";
                        break;
                    case o.WeaponType.Dragon:
                        r = "Dragon";
                        break;
                    default:
                        return
                }
                let c = s.default.Instance.GetFishByID(e);
                if (!c || null == c) return;
                if (-1 == l.recordFishTypeList.indexOf(c.Type)) return;
                let h = null;
                if (l.HitList.forEach(e => {
                        e.FishType == c.Type && e.Bet == t && e.Weapon == r && (h = e)
                    }), h) h.Count += 1;
                else {
                    let e = {};
                    e.FishType = c.Type, e.Bet = t, e.Weapon = r, e.Count = 1, e.KillTotalWin = 0, e.Kill = 0, e.MedalTotalWin = 0, e.Medal = 0, l.HitList.push(e)
                }
            }
            static pushWinning(e, t, i, n, s) {
                if (-1 == l.recordFishTypeList.indexOf(e.Type)) return;
                if (!a.PlayerManager.isMainSeat(i)) return;
                let r = "";
                switch (o.default.Instance.getMainPlayerWeaponType()) {
                    case o.WeaponType.Normal:
                        r = "Normal";
                        break;
                    case o.WeaponType.Lock:
                        r = "Lock";
                        break;
                    case o.WeaponType.Tiger:
                        r = "Tiger";
                        break;
                    case o.WeaponType.Dragon:
                        r = "Dragon";
                        break;
                    default:
                        return
                }
                if (-1 == l.recordFishTypeList.indexOf(e)) return;
                let c = null;
                if (l.HitList.forEach(i => {
                        i.FishType == e && i.Bet == t && i.Weapon == r && (c = i)
                    }), !c || null == c || null == c) {
                    let i = {};
                    i.FishType = e, i.Bet = t, i.Weapon = r, i.Count = 0, i.KillTotalWin = 0, i.Kill = 0, i.MedalTotalWin = 0, i.Medal = 0, c = i
                }
                c && (s ? (c.Kill += 1, c.KillTotalWin += n) : (c.Medal += 1, c.MedalTotalWin += n))
            }
            static setDataBeforeSend() {
                s.default.Instance.fish_manager.forEach(e => {
                    if (-1 != l.recordFishTypeList.indexOf(e.Type)) {
                        let t = e.getAliveTime(),
                            i = null;
                        l.FishList.forEach(t => {
                            t.FishType == e.Type && (i = t)
                        }), i ? i.FishTime += t : (i = {
                            FishType: e.Type,
                            FishTime: t
                        }, l.FishList.push(i))
                    }
                })
            }
            static initAfterSend() {
                l.FishList = [], l.HitList = []
            }
            static setScene(e) {
                switch (l.isInit || this.init(), "" != l.SceneName && n.default.Instance.sendGameEventLog(), e) {
                    case 4011:
                        l.SceneName = "GOLDEN_SLOT_CRAB";
                        break;
                    case 4201:
                        l.SceneName = "KING_SQUID";
                        break;
                    case 4202:
                        l.SceneName = "BLUE_PHOENIX";
                        break;
                    case 4203:
                        l.SceneName = "FLAMING_DRAGON";
                        break;
                    default:
                        l.SceneName = ""
                }
            }
        }
        i.GameLogMainPlayer = l, l.playerBeginTime = 0, l.lastPlayerTime = 0, l.FishList = [], l.HitList = [], l.TotalWin = 0, l.SceneName = "", l.isInit = !1, l.recordFishTypeList = [111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 78, 80], l.intervalEvent = -1, cc._RF.pop()
    }, {
        "../GameClient": "GameClient",
        "../MainGame/Fish/FishManager": "FishManager",
        "../MainGame/Player/PlayerManager": "PlayerManager",
        "../MainGame/Weapon/WeaponManager": "WeaponManager"
    }],
    PoolObj: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "ab29cfI18NAsbMxgD9cW3iT", "PoolObj");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("./EnumFilter"),
            {
                ccclass: a,
                property: o
            } = cc._decorator;
        let l = class extends cc.Component {
            constructor() {
                super(...arguments), this.pool = "Effect", this.type = "", this.ani = null, this.recycleEvent = null
            }
            onLoad() {
                this.ani = this.getComponent(cc.Animation)
            }
            reuse() {
                this.ani && (this.ani.stop(), this.ani.play())
            }
            Recycle() {
                this.recycleEvent && (this.recycleEvent(), this.recycleEvent = null), this.ani && this.ani.stop(), s.default.DespawnObj(this.pool, this.type, this.node)
            }
            setCustomData(e) {}
        };
        n([o(cc.String)], l.prototype, "pool", void 0), n([o(cc.String)], l.prototype, "type", void 0), l = n([a], l), i.default = l, cc._RF.pop()
    }, {
        "./EnumFilter": "EnumFilter"
    }],
    PopupWindowCtrl: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "4ea5dcGK91La4VOEcrqNStY", "PopupWindowCtrl");
        var n, s = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        }), i.WindowsData = i.Windows = void 0;
        const a = e("../../../../../GameCommon/CommonRoot/Script/CommonRoot"),
            o = e("./WindowCtrl"),
            {
                ccclass: l,
                property: r
            } = cc._decorator;
        (function(e) {
            e[e.None = 0] = "None", e[e.LockSetting = 1] = "LockSetting", e[e.WeaponChose = 2] = "WeaponChose", e[e.BattleShipInfo = 3] = "BattleShipInfo"
        })(i.Windows || (i.Windows = {}));
        class c {
            constructor(e, t = null, i = null, n) {
                this.type = e, this.events = t, this.texts = i, this.exData = n
            }
        }
        i.WindowsData = c;
        let h = n = class extends cc.Component {
            constructor() {
                super(...arguments), this.mWindows = [], this.mBlackBG = null, this.mTouchBlock = null, this.mUnstableMsg = null, this.mUnstabletext = null, this.mUnstableSprite = []
            }
            static get Instance() {
                if (null == this.mPopupWindowCtrl) try {
                    "playgd" == window.gd_nowLOGO ? this.mPopupWindowCtrl = cc.find("Canvas/PopupWindow").getComponent(n) : "magiccity" == window.gd_nowLOGO && (this.mPopupWindowCtrl = a.CommonRoot.Instance.getComponentInChildren(n))
                } catch (e) {
                    return null
                }
                return this.mPopupWindowCtrl
            }
            onLoad() {
                n.mPopupWindowCtrl = null
            }
            static ShowWindow(e, t = !0, i = !1) {
                let n = new c(e);
                this.EnableWindow(n, t, i)
            }
            static EnableWindow(e, t = !0, i = !1, n = 0) {
                if (this.OpeList.length > 0)
                    for (let s = 0; s < this.OpeList.length; s++) this.Instance.mWindows[this.OpeList[s].type - 1].closeWindow(), i || this.OpeList.pop();
                this.Instance.mBlackBG && (this.Instance.mBlackBG.active = t), this.Instance.mTouchBlock && (this.Instance.mTouchBlock.active = !0), this.Instance.mWindows[e.type - 1].showWindow(e.events, e.texts, e.exData), this.OpeList.push(e), n > 0 && (this.closeCD = !0, cc.tween(this).delay(n).call(() => {
                    this.closeCD = !1
                }).start())
            }
            static CloseWindow(e) {
                if (this.closeCD) return;
                let t = !1;
                if (this.OpeList.length > 0)
                    if (e && "number" == typeof e)
                        for (let i = 0; i < this.OpeList.length; i++) this.OpeList[i].type == e && (this.OpeList.splice(i, 1), this.Instance.mWindows[e - 1].closeWindow(), t = !0);
                    else if (this.Instance.mWindows[this.OpeList.pop().type - 1].closeWindow(), this.OpeList.length > 0) {
                    let e = this.OpeList.pop();
                    this.Instance.mWindows[e.type - 1].showWindow(e.events, e.texts)
                }
                return this.OpeList.length <= 0 && (this.Instance.mBlackBG && (this.Instance.mBlackBG.active = !1), this.Instance.mTouchBlock && (this.Instance.mTouchBlock.active = !1)), t
            }
            static EnableTouchBlock(e) {
                this.Instance.mTouchBlock && (this.Instance.mTouchBlock.active = e)
            }
            TouchBlock() {
                n.CloseWindow()
            }
            static EnableNetUnstable(e, t) {
                switch (t) {
                    case 1:
                        this.Instance.mUnstabletext.spriteFrame = this.Instance.mUnstableSprite[0];
                        break;
                    case 2:
                        this.Instance.mUnstabletext.spriteFrame = this.Instance.mUnstableSprite[1]
                }
                if (this.Instance.mUnstableMsg.active != e)
                    if (this.Instance.mUnstableMsg.active = e, e) {
                        let e = cc.repeatForever(cc.sequence(cc.fadeIn(1), cc.delayTime(.4), cc.fadeOut(1), cc.delayTime(.4)));
                        this.Instance.mUnstableMsg.runAction(e)
                    } else this.Instance.mUnstableMsg.stopAllActions()
            }
        };
        h.OpeList = [], h.closeCD = !1, s([r([o.default])], h.prototype, "mWindows", void 0), s([r(cc.Node)], h.prototype, "mBlackBG", void 0), s([r(cc.Node)], h.prototype, "mTouchBlock", void 0), s([r(cc.Node)], h.prototype, "mUnstableMsg", void 0), s([r(cc.Sprite)], h.prototype, "mUnstabletext", void 0), s([r([cc.SpriteFrame])], h.prototype, "mUnstableSprite", void 0), h = n = s([l], h), i.default = h, cc._RF.pop()
    }, {
        "../../../../../GameCommon/CommonRoot/Script/CommonRoot": void 0,
        "./WindowCtrl": "WindowCtrl"
    }],
    PreloadManager: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "3117bJ4U31D65v+arAI7Xqv", "PreloadManager");
        var n, s = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            a = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        }), i.SCENE_NAME = void 0;
        const o = e("./ArkGameUtility"),
            l = e("../../GameClient"),
            r = e("./MultiLangSystem"),
            c = e("../../GameClient/JsonUtils"),
            {
                ccclass: h,
                property: d
            } = cc._decorator,
            u = cc.Enum({
                NONE: 0,
                READY: 1,
                RELEASE: 2,
                LOAD_RES: 3,
                LOAD_DONE: 4,
                LOAD_SCENE: 5
            });
        i.SCENE_NAME = {
            PRELOAD: "Preload",
            MAIN_LOBBY: "MainLobby",
            MAIN_GAME: "MainGame",
            RELEASE: "Lobby"
        };
        let m = n = class extends cc.Component {
            constructor() {
                super(...arguments), this.secneName = i.SCENE_NAME.MAIN_LOBBY, this.nextSecneName = i.SCENE_NAME.MAIN_LOBBY, this.themeName = "", this.loadedLaunch = !0, this.sceneCompletedCount = 0, this.sceneTotalCount = 0, this.resCompletedCount = 0, this.resTotalCount = 0, this.commonResTotalCount = 0, this.waitloadCommonRes = !1, this.commonResLoaded = !1, this.waitloadThemeRes = !1, this.curConcurrent = 1, this.waitLoadingSec = 10, this.progressPercent = 0, this.statusQueue = [], this.nowStatus = u.NONE, this._loadResEvent = () => {}, this.loadStuckCount = 0, this.onReleaseSceneEvent = null, this.onLoadDone = null
            }
            static get Instance() {
                return this.instance
            }
            get completedCount() {
                return this.sceneCompletedCount + this.resCompletedCount
            }
            get totalCount() {
                return this.sceneTotalCount + this.resTotalCount
            }
            get nowSceneName() {
                return cc.director.getScene().name
            }
            get nowThemeName() {
                return this.themeName
            }
            set nowProgressPercent(e) {
                this.progressPercent = e, this.scheduleOnce(() => {
                    -1 == [u.LOAD_RES, u.LOAD_SCENE].indexOf(this.nowStatus) || this.progressPercent != e || this.progressPercent >= 100 || (this.loadStuckCount = 25, this.loadResErrorHandler("PercentTimeOut"))
                }, this.waitLoadingSec)
            }
            onLoad() {
                n.instance = this, n.loaderGroup = [], n.loadTaskDict = new o.Dictionary, n.permanentRes = new o.Dictionary, n.impermanentRes = new o.Dictionary, this.onReleaseSceneEvent = new o.EventDelegate
            }
            update(e) {
                if (this.nowStatus == u.READY) switch (this.nowStatus = this.statusQueue.shift(), this.nowStatus) {
                    case u.RELEASE:
                        this._releaseScene();
                        break;
                    case u.LOAD_RES:
                        this._loadResEvent();
                        break;
                    case u.LOAD_DONE:
                        this._loadResDone();
                        break;
                    case u.LOAD_SCENE:
                        this._loadScene(this.nextSecneName);
                        break;
                    default:
                        this.resetStatusQueue()
                }
            }
            PreloadGameCommonRes() {
                return a(this, void 0, void 0, function*() {
                    if (this.waitloadCommonRes) return;
                    this.waitloadCommonRes = !0, this.commonResLoaded = !1;
                    let e = "MainGame";
                    try {
                        yield c.CheckJson(`${SS.Common.GameEnvironment.CurrentGameNow}/${SS.Common.GameEnvironment.CurrentGameNow}/Res/data/preload/${window.gd_nowLOGO}_MainGame`).then(() => {
                            e = `${window.gd_nowLOGO}_MainGame`
                        })
                    } catch (t) {}
                    cc.log("PreloadManager json name = " + e), n.LoadRes(`${SS.Common.GameEnvironment.CurrentGameNow}/${SS.Common.GameEnvironment.CurrentGameNow}/Res/data/preload`, e, cc.Asset, (e, t) => {
                        let i = t.json;
                        if (!i) return this.waitloadCommonRes = !1, void this.PreloadGameCommonRes();
                        if (!i.COMMON) return this.waitloadCommonRes = !1, void cc.error("[loadThemeRes]COMMON is not exist");
                        this._resetProgress();
                        let s = Object.keys(i.COMMON);
                        this.commonResTotalCount = this.resTotalCount = s.length, s.forEach(e => {
                            let t = i.COMMON,
                                s = t[e].file,
                                a = this._getAssetType(t[e].type);
                            n.LoadRes(s, e, a, () => {
                                this.completedCount < this.totalCount || (this.waitloadCommonRes = !1, this.commonResLoaded = !0, this.waitloadThemeRes ? this.loadThemeRes(this.themeName) : this.nowStatus = u.READY)
                            }, !0)
                        })
                    })
                })
            }
            LoadMainGame(e, t) {
                this.statusQueue = [u.RELEASE, u.LOAD_RES, u.LOAD_DONE, u.NONE], this._loadResEvent = () => {
                    this.commonResLoaded || this.PreloadGameCommonRes(), this.loadThemeRes(e)
                }, this.themeName = e, this.onLoadDone = t
            }
            static LoadRes(e, t, i, s, a = !1) {
                let o = n.Instance,
                    l = o.GetRes(t);
                if (l) return o.resCompletedCount += 1, o._progress(), void(s && s(null, l));
                i = i || cc.Asset;
                let r = new f(e, t, i, s, a);
                if (n.loadTaskDict.ContainsKey(t)) return;
                n.loadTaskDict.Add(t, r);
                let c = o.getLoader();
                c && (r.Loading = !0, e.includes("resources") ? c.LoadRes(e, t, i, o.progressCallback.bind(o), o.onComplete.bind(o)) : c.LoadBundle(e, t, i, o.progressCallback.bind(o), o.onComplete.bind(o)))
            }
            GetRes(e) {
                let t = null;
                return (t = n.permanentRes.GetValue(e)) || (t = n.impermanentRes.GetValue(e)), t ? t.Resource : t
            }
            loadResErrorHandler(e) {
                l.default.Instance && l.default.Instance.LoadResError(e)
            }
            resetStatusQueue() {
                this.statusQueue = [], this.onLoadDone = null, this.nowStatus = u.NONE, n.loadTaskDict.Clear()
            }
            loadThemeRes(e) {
                return a(this, void 0, void 0, function*() {
                    if (this.waitloadCommonRes) return void(this.waitloadThemeRes = !0);
                    this.waitloadThemeRes = !1;
                    let t = "MainGame";
                    try {
                        yield c.CheckJson(`${SS.Common.GameEnvironment.CurrentGameNow}/${SS.Common.GameEnvironment.CurrentGameNow}/Res/data/preload/${window.gd_nowLOGO}_MainGame`).then(() => {
                            t = `${window.gd_nowLOGO}_MainGame`
                        })
                    } catch (i) {}
                    n.LoadRes(`${SS.Common.GameEnvironment.CurrentGameNow}/${SS.Common.GameEnvironment.CurrentGameNow}/Res/data/preload`, t, cc.Asset, (t, i) => {
                        let s = i.json;
                        if (!s) return void this.loadThemeRes(e);
                        if (!s[e]) return void cc.error("[loadThemeRes]theme_name: %s is not exist", e);
                        this._resetProgress();
                        let a = Object.keys(s[e]);
                        a.length < 1 ? this.nowStatus = u.READY : (this.resCompletedCount = this.commonResTotalCount, this.resTotalCount = a.length + this.commonResTotalCount, n.loaderGroup = [], a.forEach(t => {
                            let i = s[e],
                                a = i[t].file,
                                o = this._getAssetType(i[t].type);
                            n.LoadRes(a, t, o, () => {
                                this.completedCount < this.totalCount || (this.nowStatus = u.READY)
                            })
                        }))
                    })
                })
            }
            onProgress(e, t) {
                this.sceneCompletedCount = e, this.sceneTotalCount = t, this._progress()
            }
            onSceneLoaded(e, t) {
                if (e) return cc.error("[onSceneLoaded]error: ", e), this.loadStuckCount += 1, void this.loadResErrorHandler("LoadScene");
                (this.secneName == i.SCENE_NAME.PRELOAD || this.loadedLaunch) && (this.onReleaseSceneEvent.Broadcast(), this.onReleaseSceneEvent.RemoveAllListener(), cc.director.loadScene(this.secneName, this.onLaunched.bind(this)))
            }
            onLaunched() {
                this.nowSceneName, this._resetProgress(), this.nowStatus = u.READY
            }
            progressCallback(e, t, i) {}
            onComplete(e, t, i) {
                if (t) {
                    cc.error("[onComplete]error: ", t), this.loadStuckCount += 1;
                    let i = e.ResName;
                    return void this.loadResErrorHandler(i)
                }
                this.resCompletedCount += 1, this._progress();
                let s = e.ResName,
                    a = n.loadTaskDict.PopValue(s);
                if (a) {
                    t || (a.Resource = i, a.Permanent ? n.permanentRes.Add(s, a) : n.impermanentRes.ContainsKey(s) || n.impermanentRes.Add(s, a));
                    let e = a.OnComplete;
                    e && (n.loadTaskDict.Remove(s), e(t, i))
                }
                a = null;
                let o = n.loadTaskDict.Values();
                for (let n = 0; n < o.length; n++) {
                    let e = o[n];
                    if (!e.Loading) {
                        a = e;
                        break
                    }
                }
                a && (a.Loading = !0, e.LoadBundle(a.File, a.Name, a.Type, this.progressCallback.bind(this), this.onComplete.bind(this)))
            }
            getLoader() {
                let e = n.Instance,
                    t = null;
                if (n.loaderGroup.forEach(e => {
                        e.Idle && (t = e)
                    }), !t && e.curConcurrent < cc.macro.DOWNLOAD_MAX_CONCURRENT) {
                    e.curConcurrent *= 2;
                    for (let t = 0; t < e.curConcurrent; t++) n.loaderGroup.push(new p)
                }
                return n.loaderGroup.forEach(e => {
                    e.Idle && (t = e)
                }), t
            }
            _resetProgress() {
                this.sceneCompletedCount = 0, this.sceneTotalCount = 0, this.resCompletedCount = 0, this.resTotalCount = 0, this._progress()
            }
            _progress() {
                if (this.totalCount < 1 || this.totalCount < this.completedCount) return;
                let e = this.completedCount / this.totalCount * 10;
                l.default.Instance && l.default.Instance.SetLoadingProgress(this.completedCount,  150), this.nowProgressPercent = e
            }
            _getAssetType(e) {
                switch (e) {
                    case 1:
                        return cc.SpriteAtlas;
                    default:
                        return cc.Asset
                }
            }
            _loadResDone() {
                this.onLoadDone && this.onLoadDone(), this.nowStatus = u.READY
            }
            _loadScene(e) {
                this.secneName = e, cc.director.preloadScene(e, this.onProgress.bind(this), this.onSceneLoaded.bind(this))
            }
            _releaseScene() {
                let e = n.impermanentRes.Values();
                e.length < 1 && (this.nowStatus = u.READY);
                for (let t = e.length - 1; t > -1; t--) {
                    let i = e[t];
                    cc.resources.release(n.impermanentRes.PopValue(i.Name).Url), 0 == t && (this.nowStatus = u.READY)
                }
                cc.sys.garbageCollect()
            }
            Release() {
                this._releaseScene(), this.onReleaseSceneEvent.Broadcast(), this.onReleaseSceneEvent.RemoveAllListener(), this.onReleaseSceneEvent = null, n.instance = null, this.statusQueue = null, this._loadResEvent = null, n.loaderGroup = null, n.loadTaskDict.Clear(), n.loadTaskDict = null, n.permanentRes.Clear(), n.permanentRes = null, n.impermanentRes.Clear(), n.impermanentRes = null, this.onLoadDone = null, this.node.destroy()
            }
        };
        m.instance = null, m.loaderGroup = null, m.loadTaskDict = null, m.permanentRes = null, m.impermanentRes = null, m = n = s([h], m), i.default = m;
        class p {
            constructor() {
                this.idle = !0, this.startUnixTime = 0, this.resName = "", this.progressEvent = null, this.completeEvent = null
            }
            get Idle() {
                return this.idle
            }
            get StartUnixTime() {
                return this.startUnixTime
            }
            get ResName() {
                return this.resName
            }
            LoadRes(e, t, i, n, s) {
                this.idle = !1, this.progressEvent = n, this.completeEvent = s, this.startUnixTime = (new Date).getTime(), this.resName = t;
                let a = r.default.getMultiLangUrl("" != e ? e + "/" + t : t);
                cc.resources.load(a, i, this.onProgress.bind(this), this.onComplete.bind(this))
            }
            LoadBundle(e, t, i, n, s) {
                this.idle = !1, this.progressEvent = n, this.completeEvent = s, this.startUnixTime = (new Date).getTime(), this.resName = t;
                let a = e.indexOf("/"),
                    o = e.substring(0, a),
                    l = "" != e ? e.substring(a + 1, e.length) : "";
                l = r.default.getMultiLangUrl("" != l ? l + "/" + t : t);
                let c = cc.assetManager.getBundle(o);
                try {
                    c ? c.load(l, i, this.onProgress.bind(this), this.onComplete.bind(this)) : cc.assetManager.loadBundle(o, null, (e, t) => {
                        if (e) throw e;
                        t.load(l, i, this.onProgress.bind(this), this.onComplete.bind(this))
                    })
                } catch (h) {
                    console.error("sss Load " + o + "/" + l + " failed.")
                }
            }
            Release(e, t) {
                let i = e + "/" + t;
                cc.resources.release(i)
            }
            onProgress(e, t, i) {
                this.progressEvent && this.progressEvent(e, t, i)
            }
            onComplete(e, t) {
                this.completeEvent && this.completeEvent(this, e, t), this.idle = !0
            }
        }
        class f {
            constructor(e, t, i, n, s) {
                this.file = "", this.name = "", this.type = cc.Asset, this.resource = null, this.onComplete = null, this.loading = !1, this.permanent = !1, this.file = e, this.name = t, this.type = i, this.onComplete = n, this.permanent = s
            }
            get File() {
                return this.file
            }
            get Name() {
                return this.name
            }
            get Url() {
                return this.file + "/" + this.name
            }
            get Type() {
                return this.type
            }
            get Resource() {
                return this.resource
            }
            set Resource(e) {
                this.resource = e
            }
            get OnComplete() {
                return this.onComplete
            }
            get Loading() {
                return this.loading
            }
            set Loading(e) {
                this.loading = e
            }
            get Permanent() {
                return this.permanent
            }
        }
        cc._RF.pop()
    }, {
        "../../GameClient": "GameClient",
        "../../GameClient/JsonUtils": "JsonUtils",
        "./ArkGameUtility": "ArkGameUtility",
        "./MultiLangSystem": "MultiLangSystem"
    }],
    RED_DRAGON: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "9e1735LfwZMI4n3EiCVvQzi", "RED_DRAGON");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("../Common/AudioManager"),
            a = e("../Fish/BaseSpineFish"),
            {
                ccclass: o,
                property: l
            } = cc._decorator;
        let r = class extends a.default {
            onInit() {
                this.offsetPos = cc.v2(1245, -70), this.node.angle = -this.o, this.skeleton.timeScale = 1, this.skeleton.setAnimation(0, "SWIM", !1), s.default.Instance.Play("RedDragon_Announce")
            }
            InitParameter() {
                super.InitParameter(), this.isFeature = !0
            }
            PlayDieAnim() {
                this.skeleton.timeScale = 0, this.node.runAction(cc.sequence(cc.repeat(cc.sequence(cc.moveBy(.1, 10, 10), cc.moveBy(.1, -10, -10)), 5), cc.callFunc(() => {
                    this.CoinEffect(2.5 * this.shapeNode.scale)
                }), cc.fadeOut(1), cc.callFunc(() => {
                    this.RemoveSelf()
                }))), s.default.Instance.Play("RedDragon_Roar")
            }
            RemoveSelf() {
                this.defaultAliveTime = 60, super.RemoveSelf()
            }
        };
        r = n([o], r), i.default = r, cc._RF.pop()
    }, {
        "../Common/AudioManager": "AudioManager",
        "../Fish/BaseSpineFish": "BaseSpineFish"
    }],
    RedDragonReward: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "ba6acvHwdVChZ2PG0eUlbJX", "RedDragonReward");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("../Common/PoolObj"),
            {
                ccclass: a,
                property: o
            } = cc._decorator;
        let l = class extends s.default {
            constructor() {
                super(...arguments), this.label = null, this.spine = null, this.smoke = null, this.coinBack = null, this.coinFront_node1 = null, this.coinFront_node2 = null, this.coinFront1 = null, this.coinFront2 = null
            }
            Init(e) {
                this.label.string = e.toString(), null == this.coinFront1 && (this.coinFront1 = this.coinFront_node1.getComponentsInChildren(cc.Animation)), null == this.coinFront2 && (this.coinFront2 = this.coinFront_node2.getComponentsInChildren(cc.Animation)), this.spine.setAnimation(0, "RedDragonReward", !1), this.label.node.scale = 0, cc.tween(this.label.node).to(.2, {
                    scale: 1
                }).delay(.3).call(() => {
                    this.smoke.resetSystem(), this.coinBack.emissionRate = 50, this.DropCoins(this.coinFront1)
                }).to(.65, {
                    scale: 1.3
                }).call(() => {
                    this.coinBack.emissionRate = 0
                }).to(.65, {
                    scale: 1
                }).call(() => {
                    this.coinBack.emissionRate = 50, this.DropCoins(this.coinFront2)
                }).to(.65, {
                    scale: 1.5
                }).call(() => {
                    this.coinBack.emissionRate = 0
                }).to(.65, {
                    scale: 1
                }).delay(.65).to(.3, {
                    scale: 0
                }).delay(5).call(() => {}).start()
            }
            DropCoins(e) {
                for (let t = 0; t < e.length; t++) e[t].node.setPosition(cc.v3(800 * Math.random() - 400, 640 + 100 * Math.random())), e[t].node.angle = 360 * Math.random(), e[t].node.scale = .5 * Math.random() + 1, e[t].node.active = !0, e[t].play(null, Math.random()), cc.tween(e[t].node).by(Math.random() + 1.5, {
                    position: cc.v3(100 * Math.random() - 50, -1280)
                }).call(() => {
                    e[t].node.active = !1, e[t].stop()
                }).start()
            }
        };
        n([o(cc.Label)], l.prototype, "label", void 0), n([o(sp.Skeleton)], l.prototype, "spine", void 0), n([o(cc.ParticleSystem)], l.prototype, "smoke", void 0), n([o(cc.ParticleSystem)], l.prototype, "coinBack", void 0), n([o(cc.Node)], l.prototype, "coinFront_node1", void 0), n([o(cc.Node)], l.prototype, "coinFront_node2", void 0), l = n([a], l), i.default = l, cc._RF.pop()
    }, {
        "../Common/PoolObj": "PoolObj"
    }],
    ResourceManager: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "8b4d7BoK3ZEA5OkQWxZUqd6", "ResourceManager");
        var n, s = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            a = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const o = e("./PoolObj"),
            l = e("./AudioManager"),
            r = e("./PreloadManager"),
            c = e("../../../../../LobbyCommon/Component/SSSpawnPool"),
            h = e("../../GameClient/JsonUtils"),
            d = e("../../GameClient"),
            {
                ccclass: u,
                property: m
            } = cc._decorator;
        let p = n = class extends cc.Component {
            constructor() {
                super(...arguments), this.FlipObjects = null, this.Background = null, this.Fishes = null, this.Bullets = null, this.Award = null, this.Weapon = null, this.GUI = null, this.Effects = null, this.Skills = null, this.Titles = null, this.Bullets_own = null, this.Award_own = null, this.Weapon_own = null, this.Effects_own = null, this.Skills_own = null, this.Titles_own = null, this.TopRoot = null, this.FishPools = {}, this.BulletPools = {}, this.WeaponPools = {}, this.GUIPools = {}, this.EffectPools = {}, this.SkillPools = {}, this.AwardPools = {}, this.TitlePools = {}, this.BackgroundPools = {}, this.TopRootPools = {}, this.ParentManager = {}, this.isLoadDone = !1, this.stackKey = -1, this.lastStageData = {}, this.spawnpool = null, this.dropEggAry = []
            }
            static get Instance() {
                return this.instance
            }
            onLoad() {
                n.instance = this, this.spawnpool = this.addComponent(c.SpawnPool)
            }
            Init() {
                return a(this, void 0, void 0, function*() {
                    this.stackKey = r.default.Instance.onReleaseSceneEvent.AddListener(() => {
                        this.ClearAllPool()
                    });
                    let e = "resource_common";
                    try {
                        yield h.CheckJson(`${SS.Common.GameEnvironment.CurrentGameNow}/${SS.Common.GameEnvironment.CurrentGameNow}/Res/data/resource_common/${window.gd_nowLOGO}_resource_common`).then(() => {
                            e = `${window.gd_nowLOGO}_resource_common`
                        })
                    } catch (i) {}
                    const t = yield h.LoadJson(`${SS.Common.GameEnvironment.CurrentGameNow}/${SS.Common.GameEnvironment.CurrentGameNow}/Res/data/resource_common/${e}`);
                    this.initPool(t.Bullet, this.BulletPools, this.Bullets), this.initPool(t.Effect, this.EffectPools, this.Effects), this.initPool(t.Skill, this.SkillPools, this.Skills), this.initPool(t.Award, this.AwardPools, this.Award), this.initPool(t.Title, this.TitlePools, this.Titles), this.initPool(t.Background, this.BackgroundPools, this.Background), this.initPool(t.Fish, this.FishPools, this.Fishes), this.initPool(t.Weapon, this.WeaponPools, this.Weapon), this.initPool(t.GUI, this.GUIPools, this.GUI), this.initPool(t.TopRoot, this.TopRootPools, this.TopRoot), this.isLoadDone = !0, "playgd" == window.gd_nowLOGO && d.default.Instance.DownloadDropEgg(this.dropEggAry)
                })
            }
            ClearAllPool() {
                this.spawnpool.DespawnAll(), r.default.Instance.onReleaseSceneEvent.RemoveListenerByID(this.stackKey), this.ClearParentManager(), this.ClearPool(this.FishPools, this.Fishes), this.ClearPool(this.BulletPools, this.Bullets), this.ClearPool(this.WeaponPools, this.Weapon), this.ClearPool(this.GUIPools, this.GUI), this.ClearPool(this.EffectPools, this.Effects), this.ClearPool(this.SkillPools, this.Skills), this.ClearPool(this.AwardPools, this.Award), this.ClearPool(this.TitlePools, this.Titles), this.ClearPool(this.BackgroundPools, this.Background), this.ClearPool(this.TopRootPools, this.TopRoot), Object.keys(this.FishPools).forEach(e => {
                    let t = this.FishPools[e].pool;
                    t.size() > 10 && console.log("[FishPools]id: %s, size: %s", e, t.size())
                }), n.instance = null
            }
            ClearParentManager() {
                Object.keys(this.ParentManager).forEach(e => {
                    this.ParentManager[e].children.forEach(e => {
                        e.destroy()
                    })
                }), this.ParentManager = {}
            }
            ClearPool(e, t) {
                Object.keys(e).forEach(t => {
                    let i = e[t];
                    i.pool.clear(), delete i.pool, delete i.prefab, delete e[t]
                }), t.removeAllChildren(), e = {}
            }
            ChangeResource(e) {
                return a(this, void 0, void 0, function*() {
                    const t = yield h.LoadJson(`${SS.Common.GameEnvironment.CurrentGameNow}/${SS.Common.GameEnvironment.CurrentGameNow}/Res/data/resource_stage` + e.toString());
                    if (t) return this.refreshPool(t, "Background", this.BackgroundPools, this.Background), this.refreshPool(t, "Fish", this.FishPools, this.Fishes), this.refreshPool(t, "Skill", this.SkillPools, this.Skills), this.refreshPool(t, "Effect", this.EffectPools, this.Effects), this.refreshPool(t, "Award", this.AwardPools, this.Award), this.refreshPool(t, "Title", this.TitlePools, this.Titles), this.refreshPool(t, "GUI", this.GUIPools, this.GUI), this.lastStageData = t, cc.sys.garbageCollect(), !0;
                    console.error("Can't load stage config:" + e.toString())
                })
            }
            static SpawnFish(e) {
                var t = this.instance.getObject(this.instance.FishPools, e, this.instance.Fishes);
                return null == t ? (console.error("[SpawnFish]fish type: " + e + " is null"), null) : t
            }
            static DespawnFish(e, t) {
                this.instance.putObject(this.instance.FishPools, e, t)
            }
            static LoadBackground(e) {
                return this.instance.getObject(this.instance.BackgroundPools, e, this.instance.Background)
            }
            static UnLoadBackground(e, t) {
                this.instance.putObject(this.instance.BackgroundPools, e, t)
            }
            static SpawnBullet(e, t) {
                return t ? this.instance.getObject(this.instance.BulletPools, e, this.instance.Bullets_own) : this.instance.getObject(this.instance.BulletPools, e, this.instance.Bullets)
            }
            static DespawnBullet(e, t) {
                this.instance.putObject(this.instance.BulletPools, e, t)
            }
            static LoadWeapon(e, t) {
                return t ? this.instance.getObject(this.instance.WeaponPools, e, this.instance.Weapon_own) : this.instance.getObject(this.instance.WeaponPools, e, this.instance.Weapon)
            }
            static UnloadWeapon(e, t) {
                this.instance.putObject(this.instance.WeaponPools, e, t)
            }
            static LoadGUI(e) {
                return this.instance.getObject(this.instance.GUIPools, e, this.instance.GUI)
            }
            static UnloadGUI(e, t) {
                this.instance.putObject(this.instance.GUIPools, e, t)
            }
            static SpawnAward(e, t) {
                return t ? this.instance.getObject(this.instance.AwardPools, e, this.instance.Award_own) : this.instance.getObject(this.instance.AwardPools, e, this.instance.Award)
            }
            static DespawnAward(e, t) {
                this.instance.putObject(this.instance.AwardPools, e, t)
            }
            static SpawnEffect(e, t) {
                return t ? this.instance.getObject(this.instance.EffectPools, e, this.instance.Effects_own) : this.instance.getObject(this.instance.EffectPools, e, this.instance.Effects)
            }
            static DespawnEffect(e, t) {
                this.instance.putObject(this.instance.EffectPools, e, t)
            }
            static SpawnSkill(e, t) {
                return t ? this.instance.getObject(this.instance.SkillPools, e, this.instance.Skills_own) : this.instance.getObject(this.instance.SkillPools, e, this.instance.Skills)
            }
            static DespawnSkill(e, t) {
                this.instance.putObject(this.instance.SkillPools, e, t)
            }
            static SpawnTitle(e, t) {
                return t ? this.instance.getObject(this.instance.TitlePools, e, this.instance.Titles_own) : this.instance.getObject(this.instance.TitlePools, e, this.instance.Titles)
            }
            static DespawnTitle(e, t) {
                this.instance.putObject(this.instance.TitlePools, e, t)
            }
            static LoadTopRoot(e) {
                return this.instance.getObject(this.instance.TopRootPools, e, this.instance.TopRoot)
            }
            static UnloadTopRoot(e, t) {
                this.instance.putObject(this.instance.TopRootPools, e, t)
            }
            static SpawnPuzzleEggDropEgg(e) {
                let t = null;
                switch (e) {
                    case "DropEggNormal":
                        t = this.instance.dropEggAry[0];
                        break;
                    case "DropEggClassic":
                        t = this.instance.dropEggAry[1];
                        break;
                    case "DropEggLegend":
                        t = this.instance.dropEggAry[2]
                }
                if (t) {
                    let e = this.instance.spawnpool.Spawn(t, this.instance.TopRoot);
                    return e.active = !0, e
                }
                return null
            }
            static DespawnPuzzleEggDropEgg(e) {
                this.instance.spawnpool.Despawn(e)
            }
            initPool(e, t, i, n) {
                const s = Object.keys(e);
                for (let a = 0; a < s.length; a++) {
                    const n = s[a],
                        l = e[n].name;
                    if (!l) continue;
                    const c = e[n].layer || 0,
                        h = e[n].sound,
                        d = e[n].keep || 0,
                        u = r.default.Instance.GetRes(l);
                    if (!u || !u.data) {
                        console.error("[InitPool]name: %s, is not find prefab", l);
                        continue
                    }
                    let m = this.getParentNode(i, c),
                        p = null;
                    d > 0 && (p = new cc.NodePool(o.default)), this.ParentManager[i.name + c] = m, t[n] = {
                        pool: p,
                        layer: c,
                        prefab: u,
                        sound: h,
                        name: l,
                        keep: d
                    }
                }
            }
            refreshPool(e, t, i, n) {
                const s = Object.keys(e[t]),
                    a = this.lastStageData && this.lastStageData[t] ? Object.keys(this.lastStageData[t]) : [],
                    l = Math.max(s.length, a.length);
                for (let c = 0; c < l; c++) {
                    let l = s[c],
                        h = a[c];
                    if (l && -1 == a.indexOf(l)) {
                        const s = e[t][l],
                            a = s.name,
                            c = s.layer || 0,
                            h = s.sound,
                            d = s.keep || 0,
                            u = r.default.Instance.GetRes(a);
                        if (!u || !u.data) {
                            cc.error("[RefreshPool]name: %s not found prefab: %s", a, u);
                            continue
                        }
                        let m = this.getParentNode(n, c),
                            p = null;
                        d > 0 && (p = new cc.NodePool(o.default)), this.ParentManager[n.name + c] = m, i[l] = {
                            pool: p,
                            layer: c,
                            prefab: u,
                            sound: h,
                            name: a,
                            keep: d
                        }
                    }
                    if (h && -1 == s.indexOf(h) && i[h]) {
                        let e = i[h].pool;
                        if (e) {
                            for (let t = e.size(); t > 0; t--) e.get().destroy();
                            e.clear(), e = null
                        }
                        i[h] = null, delete i[h]
                    }
                }
            }
            getParentNode(e, t = 0) {
                let i = this.ParentManager[e.name + t];
                return null == i && (i = new cc.Node, e.addChild(i, t), i.setPosition(cc.Vec2.ZERO)), i
            }
            getObject(e, t, i) {
                let n = null;
                if (e.hasOwnProperty(t)) {
                    let a = e[t].pool,
                        r = e[t].layer,
                        c = e[t].sound;
                    if (a && (n = a.get()), null == n) {
                        const i = e[t].prefab;
                        if (!i || !i.data) return cc.error("[getObject] not found prefab: %s", i), n;
                        let s = null;
                        (n = cc.instantiate(i)) && (s = n.getComponent(o.default)), s && s.reuse()
                    }
                    if (n) {
                        let e = this.getParentNode(i, r);
                        try {
                            e.addChild(n, r)
                        } catch (s) {
                            cc.error("[getObject] type: %s addChildError: %s", t, s)
                        }
                        n.setPosition(cc.Vec2.ZERO), this.ParentManager[i.name + r] = e, c && l.default.Instance.Play(c)
                    } else console.error("[getObject]Obj: %s spawn fail!", t)
                }
                return n
            }
            putObject(e, t, i) {
                try {
                    if (i && null != i.parent) {
                        if (e.hasOwnProperty(t)) {
                            let n = e[t].pool,
                                s = e[t].keep;
                            if (n && n.size() < s) return i.removeFromParent(), void n.put(i)
                        }
                        i.destroy()
                    }
                } catch (n) {
                    console.error("[putObject]Obj: %s put fail!", t)
                }
            }
        };
        p.instance = null, s([m(cc.Node)], p.prototype, "FlipObjects", void 0), s([m(cc.Node)], p.prototype, "Background", void 0), s([m(cc.Node)], p.prototype, "Fishes", void 0), s([m(cc.Node)], p.prototype, "Bullets", void 0), s([m(cc.Node)], p.prototype, "Award", void 0), s([m(cc.Node)], p.prototype, "Weapon", void 0), s([m(cc.Node)], p.prototype, "GUI", void 0), s([m(cc.Node)], p.prototype, "Effects", void 0), s([m(cc.Node)], p.prototype, "Skills", void 0), s([m(cc.Node)], p.prototype, "Titles", void 0), s([m(cc.Node)], p.prototype, "Bullets_own", void 0), s([m(cc.Node)], p.prototype, "Award_own", void 0), s([m(cc.Node)], p.prototype, "Weapon_own", void 0), s([m(cc.Node)], p.prototype, "Effects_own", void 0), s([m(cc.Node)], p.prototype, "Skills_own", void 0), s([m(cc.Node)], p.prototype, "Titles_own", void 0), s([m(cc.Node)], p.prototype, "TopRoot", void 0), p = n = s([u], p), i.default = p, cc._RF.pop()
    }, {
        "../../../../../LobbyCommon/Component/SSSpawnPool": void 0,
        "../../GameClient": "GameClient",
        "../../GameClient/JsonUtils": "JsonUtils",
        "./AudioManager": "AudioManager",
        "./PoolObj": "PoolObj",
        "./PreloadManager": "PreloadManager"
    }],
    SEA_TURTLE: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "63145tFBQ5O7ol6zCC1sQyR", "SEA_TURTLE");
        var n = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            s = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("./BaseFish"),
            {
                ccclass: o
            } = cc._decorator;
        let l = class extends a.default {
            constructor() {
                super(...arguments), this.hitEffect = []
            }
            SpeedUp() {
                this.mSeek && this.aliveStatus == a.FishState.ALIVE && this.mSeek.AddSpeed(80, 500)
            }
            OnHitFish() {
                return s(this, void 0, void 0, function*() {
                    if (!this.shapeNode && (this.shapeNode = this.node.getChildByName("Shape"), !this.shapeNode)) return;
                    let e = this.shapeNode.children;
                    for (let t = 0; t < e.length; t++) this.hitEffect[t] && (this.hitEffect[t].isDone || (e[t].stopAction(this.hitEffect[t]), this.hitEffect = null, e[t].color = cc.Color.WHITE));
                    for (let t = 0; t < e.length; t++) {
                        let i = cc.repeat(cc.sequence(cc.tintTo(.1, 200, 0, 0), cc.tintTo(.1, 255, 255, 255)), 2);
                        this.hitEffect.push(i), yield e[t].runAction(i)
                    }
                })
            }
        };
        l = n([o], l), i.default = l, cc._RF.pop()
    }, {
        "./BaseFish": "BaseFish"
    }],
    SceneSlotCrab: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "7691bd7dv9Pw5HM36FWBUCl", "SceneSlotCrab");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("../Background/BaseBackGround"),
            {
                ccclass: a,
                property: o
            } = cc._decorator;
        let l = class extends s.default {
            constructor() {
                super(...arguments), this.innerRingCW = null, this.innerRingCCW = null, this.innerRingCW_ADD = null, this.innerRingCCW_ADD = null, this.diceLightA_ADD = null, this.diceLightB_ADD = null, this.aceLightA_ADD = null, this.aceLightB_ADD = null, this.aceLightC_ADD = null, this.aceLightD_ADD = null, this.graphicsLightA_ADD = null, this.graphicsLightB_ADD = null, this.graphicsLightC_ADD = null, this.graphicsLightD_ADD = null, this.spinLight777_ADD = null, this.tokenLight_ADD = null, this.lamps_ADD = []
            }
            update(e) {}
            start() {
                this.Init()
            }
            reuse() {
                super.reuse(), this.bossEnter = !1, this.Init()
            }
            Init() {
                this.innerRingCW.runAction(cc.rotateBy(2, 360).repeatForever()), this.innerRingCCW.runAction(cc.rotateBy(2, -360).repeatForever()), this.innerRingCW_ADD.runAction(cc.rotateBy(2, 360).repeatForever()), this.innerRingCCW_ADD.runAction(cc.rotateBy(2, -360).repeatForever()), this.diceLightA_ADD.runAction(cc.sequence(cc.fadeOut(1.5), cc.fadeIn(1.5)).repeatForever()), this.diceLightB_ADD.runAction(cc.sequence(cc.fadeIn(1.5), cc.fadeOut(1.5)).repeatForever()), this.aceLightA_ADD.runAction(cc.sequence(cc.delayTime(.2), cc.callFunc(() => {
                    this.aceLightA_ADD.runAction(cc.sequence(cc.fadeOut(.5), cc.fadeIn(.3)).repeatForever())
                }))), this.aceLightB_ADD.runAction(cc.sequence(cc.delayTime(.4), cc.callFunc(() => {
                    this.aceLightB_ADD.runAction(cc.sequence(cc.fadeOut(.5), cc.fadeIn(.3)).repeatForever())
                }))), this.aceLightC_ADD.runAction(cc.sequence(cc.delayTime(.6), cc.callFunc(() => {
                    this.aceLightC_ADD.runAction(cc.sequence(cc.fadeOut(.5), cc.fadeIn(.3)).repeatForever())
                }))), this.aceLightD_ADD.runAction(cc.sequence(cc.delayTime(.8), cc.callFunc(() => {
                    this.aceLightD_ADD.runAction(cc.sequence(cc.fadeOut(.5), cc.fadeIn(.3)).repeatForever())
                }))), this.lamps_ADD[0].runAction(cc.sequence(cc.fadeIn(.5), cc.fadeOut(.5), cc.fadeOut(1)).repeatForever()), this.lamps_ADD[1].runAction(cc.sequence(cc.fadeOut(1), cc.fadeIn(.5), cc.fadeOut(.5)).repeatForever()), this.graphicsLightA_ADD.runAction(cc.sequence(cc.fadeIn(.3), cc.fadeOut(.5), cc.fadeOut(2.6)).repeatForever()), this.graphicsLightB_ADD.runAction(cc.sequence(cc.fadeOut(.85), cc.fadeIn(.3), cc.fadeOut(.5), cc.fadeOut(1.75)).repeatForever()), this.graphicsLightD_ADD.runAction(cc.sequence(cc.fadeOut(1.7), cc.fadeIn(.3), cc.fadeOut(.5), cc.fadeOut(.9)).repeatForever()), this.graphicsLightC_ADD.runAction(cc.sequence(cc.fadeOut(2.55), cc.fadeIn(.3), cc.fadeOut(.5), cc.fadeOut(.05)).repeatForever()), this.spinLight777_ADD.runAction(cc.sequence(cc.fadeIn(1.22), cc.fadeOut(.07), cc.fadeIn(.07), cc.fadeOut(.07), cc.fadeIn(.07)).repeatForever()), this.tokenLight_ADD.runAction(cc.sequence(cc.fadeOut(.5), cc.fadeIn(.5), cc.fadeIn(1)).repeatForever())
            }
            BossEnter() {
                this.bossEnter || (this.ani.stop("Boss_Enter"), this.ani.playAdditive("Boss_Enter"), this.bossEnter = !0)
            }
        };
        n([o(cc.Node)], l.prototype, "innerRingCW", void 0), n([o(cc.Node)], l.prototype, "innerRingCCW", void 0), n([o(cc.Node)], l.prototype, "innerRingCW_ADD", void 0), n([o(cc.Node)], l.prototype, "innerRingCCW_ADD", void 0), n([o(cc.Node)], l.prototype, "diceLightA_ADD", void 0), n([o(cc.Node)], l.prototype, "diceLightB_ADD", void 0), n([o(cc.Node)], l.prototype, "aceLightA_ADD", void 0), n([o(cc.Node)], l.prototype, "aceLightB_ADD", void 0), n([o(cc.Node)], l.prototype, "aceLightC_ADD", void 0), n([o(cc.Node)], l.prototype, "aceLightD_ADD", void 0), n([o(cc.Node)], l.prototype, "graphicsLightA_ADD", void 0), n([o(cc.Node)], l.prototype, "graphicsLightB_ADD", void 0), n([o(cc.Node)], l.prototype, "graphicsLightC_ADD", void 0), n([o(cc.Node)], l.prototype, "graphicsLightD_ADD", void 0), n([o(cc.Node)], l.prototype, "spinLight777_ADD", void 0), n([o(cc.Node)], l.prototype, "tokenLight_ADD", void 0), n([o([cc.Node])], l.prototype, "lamps_ADD", void 0), l = n([a], l), i.default = l, cc._RF.pop()
    }, {
        "../Background/BaseBackGround": "BaseBackGround"
    }],
    ShadowCamera: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "3dd6dB8+FNF4JfjhjJ46Oci", "ShadowCamera");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const {
            ccclass: s,
            property: a
        } = cc._decorator;
        let o = class extends cc.Component {
            constructor() {
                super(...arguments), this.camera = null, this.sprite = null
            }
            start() {
                let e = new cc.RenderTexture;
                e.initWithSize(cc.winSize.width, cc.winSize.height);
                let t = new cc.SpriteFrame;
                t.setTexture(e), this.sprite.spriteFrame = t, this.camera.targetTexture = e
            }
        };
        n([a(cc.Camera)], o.prototype, "camera", void 0), n([a(cc.Sprite)], o.prototype, "sprite", void 0), o = n([s], o), i.default = o, cc._RF.pop()
    }, {}],
    SkillBuddhaPalm: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "cce33BvIdFBhoQ+m0qFe+vq", "SkillBuddhaPalm");
        var n = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            s = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            o = e("../Common/AudioManager"),
            l = e("../Common/ResourceManager"),
            r = e("../Fish/FishManager"),
            c = e("./BaseSkill"),
            {
                ccclass: h,
                property: d
            } = cc._decorator;
        let u = class extends c.default {
            constructor() {
                super(...arguments), this.Root = null, this.sekeleton = []
            }
            onLoad() {
                this.skillType = c.skillEnum.BuddhaPalm, this.limitTime = 30
            }
            InitProperties(e = null) {
                if (super.InitProperties(), 0 != e.Code) return void this.UnUseSkill();
                this.totalWin = e.win, this.playerBet = e.bet;
                let t = e.fish_type_list,
                    i = e.odds_list;
                if (this.totalOdds = 0, t)
                    for (let n = 0; n < t.length; n++) {
                        this.oddsList.push(i[n]), this.totalOdds += i[n], this.winList.push(i[n] * this.playerBet);
                        let e = r.default.Instance.CreateFakeFish(r.default.Instance.getNextFakeID(), t[n], null, 0);
                        this.dieFishList.push(e)
                    }
                this.node.angle = a.default.isReverse ? 180 : 0, this.node.opacity = this.isMainPlayer ? 255 : 120, o.default.Instance.Play("Hand_use")
            }
            UseSkill() {
                return s(this, void 0, void 0, function*() {
                    this.isGaveAward = !0, yield this.delay(1250), this.CreateSkillTitle(), this.sekeleton[0].node.active = !0, this.sekeleton[0].setAnimation(0, "BuddhaPalm", !1), yield this.delay(1066), this.sekeleton[1].node.setParent(l.default.Instance.Background), this.sekeleton[1].node.active = !0, this.sekeleton[1].setAnimation(0, "animation", !1);
                    let e = this.KillFishesAndShowAward();
                    o.default.Instance.Play("Hand01"), yield this.delay(1e3 + 1e3 * e), this.ShowSkillScore(this.totalWin), this.PlayAwardSound(), yield this.delay(4e3), this.UnUseSkill()
                })
            }
            UnUseSkill() {
                if (null != this.dieFishList) {
                    for (let e = 0; e < this.dieFishList.length; e++) this.dieFishList[e] && this.dieFishList[e].RemoveSelf();
                    this.dieFishList = null
                }
                this.sekeleton.forEach(e => {
                    e.clearTracks(), e.node.active = !1
                }), this.sekeleton[1].node.setParent(this.Root), super.UnUseSkill()
            }
        };
        n([d(cc.Node)], u.prototype, "Root", void 0), n([d([sp.Skeleton])], u.prototype, "sekeleton", void 0), u = n([h], u), i.default = u, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../Common/AudioManager": "AudioManager",
        "../Common/ResourceManager": "ResourceManager",
        "../Fish/FishManager": "FishManager",
        "./BaseSkill": "BaseSkill"
    }],
    SkillDragonWeapon: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "c1a4faeSJhKxZbOzVATz5Eg", "SkillDragonWeapon");
        var n = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            s = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            o = e("../../../../../LobbyCommon/Net/LobbyClient"),
            l = e("../../../../../LobbyCommon/PopupMessage/Script/PopupMsgMgr"),
            r = e("../../GameClient"),
            c = e("../Common/EnumFilter"),
            h = e("../Common/ResourceManager"),
            d = e("../Fish/FishManager"),
            u = e("../Player/PlayerManager"),
            m = e("../Weapon/WeaponManager"),
            p = e("./BaseSkill"),
            {
                ccclass: f,
                property: S
            } = cc._decorator;
        let g = class extends p.default {
            constructor() {
                super(...arguments), this.Line = null, this.LockAiming = null, this.player = null, this.targetFish = null, this.targetType = -1, this.lastType = null, this.touchFishID = "", this.mWeapon = null, this.ShootPos = null, this.betScale = 2, this.unhitList = null, this.splitAmount = 5, this.splitList = null, this.attackRate = .3333334, this.attackTimer = 0, this.isTouchHold = !1
            }
            onLoad() {
                this.skillType = p.skillEnum.DragonWeapon, this.limitTime = 0
            }
            onEnable() {
                this.isMainPlayer && (this.lastType && (this.targetType = this.lastType, this.lastType = null), this.RegisterTouchEvent(), d.default.Instance.Event_FishInit = this.OnFishInit.bind(this))
            }
            onDisable() {
                this.isMainPlayer && (this.CanelRegisterTouchEvent(), this.lastType = this.targetType, d.default.Instance.Event_FishInit = null), this.setLocking(null), this.isTouchHold = !1
            }
            InitProperties(e = null) {
                this.isUnuse = !1, this.attackTimer = 0, this.targetType = -1, this.targetFish = null, this.touchFishID = "", e && e.targetType && (this.targetType = e.targetType), this.player = u.PlayerManager.getPlayer(this.playerSeat)
            }
            UseSkill() {
                return s(this, void 0, void 0, function*() {
                    this.isMainPlayer && (this.RegisterTouchEvent(), this.enableLockAiming(!1), d.default.Instance.Event_FishEnter = this.OnFishEnter.bind(this), d.default.Instance.Event_FishInit = this.OnFishInit.bind(this)), this.node.setPosition(m.default.WeaponPosition(this.playerSeat))
                })
            }
            UnUseSkill() {
                this.attackTimer = 0, this.targetType = -1, this.Line.stop(), this.LockAiming.stop(), this.Line.node.active = !1, this.unhitList = null, this.isMainPlayer ? (this.targetFish && (this.targetFish.Event_FishLeave = null, this.targetFish = null, this.touchFishID = ""), this.enableLockAiming(!1), this.CanelRegisterTouchEvent(), d.default.Instance.Event_FishEnter = null, d.default.Instance.Event_FishInit = null) : this.targetFish && (this.targetFish = null), this.isMainPlayer = !1, this.isUnuse = !0, this.RemoveSkillEffect(), r.default.SkillSystem.RemoveSkill(this.skillType, this.playerSeat, this), h.default.DespawnSkill(this.skillType, this.node)
            }
            setWeapon(e, t) {
                this.mWeapon = e, this.attackRate = 1 / t["1secShoot"], this.betScale = t.betScale, this.isMainPlayer && (this.unhitList = c.default.TransFishTypeList(t.UnhitList), this.splitAmount = t.SplitAmount, this.splitList = c.default.TransFishTypeList(t.SplitList))
            }
            onHitFish(e, t, i) {
                if (!this.isMainPlayer) {
                    u.PlayerManager.Instance.ModifyPlayerEntries(t, -e);
                    let n = d.default.Instance.GetFishByID(i.toString());
                    if (n) {
                        let e = n.GetLockLinkPoint(this.node.getPosition());
                        if (e) {
                            this.ShootPos = a.default.ConvMousePos(e), this.mWeapon.ShootFunction(this.ShootPos);
                            let t = h.default.SpawnBullet("DragonBlastOther", !1);
                            t && (t.setPosition(this.ShootPos), t.angle = a.default.isReverse ? 180 : 0)
                        } else cc.warn("[SkillDragonWeapon] OnBlast TargetPos is null!")
                    }
                }
                this.mWeapon.autoAnim || r.default.Instance.RecordClickLog(this.isMainPlayer)
            }
            update(e) {
                this.isUnuse || (super.update(e), this.attackTimer < this.attackRate && (this.attackTimer += e), this.isMainPlayer && this.MainPlayerUpdate(e))
            }
            setLocking(e) {
                this.isMainPlayer && this.targetFish && e != this.targetFish && (this.targetFish.Event_FishLeave = null, this.touchFishID = ""), this.targetFish = e || null, this.targetType = e ? e.Type : -1, this.isMainPlayer && this.targetFish ? this.targetFish.Event_FishLeave = this.OnTargetChange.bind(this) : this.enableLockAiming(!1)
            }
            MainPlayerUpdate(e) {
                if (!m.default.Instance.getWeapon(this.playerSeat).isGunReady) return this.enableLockAiming(!1), void(this.isTouchHold = !1);
                if (this.checkTargetHitPos) {
                    if (this.enableLockAiming(!0), this.attackTimer >= this.attackRate) {
                        if (this.attackTimer = 0, this.player.entries < this.player.bet_value * this.betScale) {
                            let e = SS.Common.GameEnvironment.IsShowDonate ? "C42" : "C41";
                            return l.PopupMsgMgr.Instance.ShowPopMsg(l.PopupPriority.Info, e, r.default.Instance.title, "Insufficient balance", null), this.setLocking(null), m.default.Instance.AutoShoot = !1, this.isTouchHold = !1, void r.default.FishUIMgr.ShowPurchaseHint(!0)
                        }
                        if (u.PlayerManager.Instance.MaxBalance && this.player.entries + this.player.winning >= u.PlayerManager.Instance.MaxBalance) return l.PopupMsgMgr.Instance.ShowPopMsg(l.PopupPriority.Info, "C29", r.default.Instance.title, "MaxBalance", null), this.setLocking(null), m.default.Instance.AutoShoot = !1, void(this.isTouchHold = !1);
                        if (r.default.FishUIMgr.IsPurchaseOpen()) return;
                        if (0 == m.default.Instance.bulletLimit) return;
                        let e = h.default.SpawnBullet("DragonBlast", this.isMainPlayer);
                        e && (e.setPosition(this.ShootPos), e.angle = a.default.isReverse ? 180 : 0), this.targetFish.OnHitFish(), this.mWeapon.ShootFunction(this.ShootPos);
                        let t = d.default.Instance.GetRangeAttackableID(this.ShootPos, 200, 10),
                            i = [];
                        for (let n = 0; n < t.length; n++) {
                            let e = d.default.Instance.GetFishByID(t[n]);
                            if (t[n] != this.targetFish.ID && -1 != this.splitList.indexOf(e.Type)) {
                                let s = h.default.SpawnFish("DragonSplit");
                                s && s.setPosition(e.node.getPosition()), e.twitch(.3), i.push(t[n])
                            }
                            if (i.length >= this.splitAmount) break
                        }
                        i.unshift(this.targetFish.ID), this.targetFish.twitch(.4), r.default.SkillSystem.SendDragonHit(this.playerSeat, this.player.bet_value, null, i, this.targetFish.ID), u.PlayerManager.Instance.ModifyPlayerEntries(this.playerSeat, -this.player.bet_value * this.betScale), "playgd" == window.gd_nowLOGO && -1 == SS.Common.GameEnvironment.SentGameFlowStatus.indexOf(SS.Common.GameEnvironment.CurrentGameNow + o.GAME_STATUS.FIRST_SPIN) && (SS.Common.GameEnvironment.SentGameFlowStatus.push(SS.Common.GameEnvironment.CurrentGameNow + o.GAME_STATUS.FIRST_SPIN), o.LobbyClient.Instance.GetUserClient.SendPlayFlowData(SS.Common.GameEnvironment.DeviceInfo, SS.Common.GameEnvironment.CurrentGameNow, o.GAME_STATUS.FIRST_SPIN)), this.isTouchHold || m.default.Instance.AutoShoot || this.setLocking(null)
                    }
                } else m.default.Instance.AutoShoot || this.isTouchHold ? this.FindNextFish() : this.setLocking(null)
            }
            get checkTargetHitPos() {
                if (-1 == this.targetType) return !1;
                if (!this.targetFish) return !1;
                if (!this.targetFish.CanCollisionByMainSeat(this.isMainPlayer)) return !1;
                let e = this.node.getPosition(),
                    t = this.targetFish.GetLockLinkPoint(e);
                if (!t) return this.isMainPlayer && (m.default.Instance.AutoShoot || this.isTouchHold) ? this.FindNextFish() : this.setLocking(null), !1;
                t = a.default.ConvMousePos(t), this.mWeapon.SetGunRotateUsePos(t), this.ShootPos = t, this.node.angle = 57.29578 * -Math.atan2(Math.floor(t.x - e.x), Math.floor(t.y - e.y));
                let i = t.sub(e).mag() / 360;
                return this.Line.node.scaleY = i, this.Line.node.scaleX = 1 + i / 2, this.LockAiming.node.scaleY = 1 / i, this.LockAiming.node.scaleX = 1 / (1 + i / 2), !0
            }
            OnTouchStart(e) {
                if (!m.default.Instance.getWeapon(this.playerSeat).isGunReady) return;
                if (this.player.entries < this.player.bet_value * this.betScale) {
                    let e = SS.Common.GameEnvironment.IsShowDonate ? "C42" : "C41";
                    return l.PopupMsgMgr.Instance.ShowPopMsg(l.PopupPriority.Info, e, r.default.Instance.title, "Insufficient balance", null), void r.default.FishUIMgr.ShowPurchaseHint(!0)
                }
                if (u.PlayerManager.Instance.MaxBalance && this.player.entries + this.player.winning >= u.PlayerManager.Instance.MaxBalance) return void l.PopupMsgMgr.Instance.ShowPopMsg(l.PopupPriority.Info, "C29", r.default.Instance.title, "MaxBalance", null);
                let t = d.default.Instance.InFishRange(e.getLocation());
                t && (null == c.default.playerLockSetting && c.default.UseDefaultLockSetting(t.Type), this.setLocking(t), this.touchFishID = t.ID), this.isTouchHold = !0
            }
            OnTouchEnd(e) {
                this.isTouchHold = !1, m.default.Instance.AutoShoot || this.setLocking(null)
            }
            OnFishEnter(e) {
                if (m.default.Instance.AutoShoot && "" == this.touchFishID)
                    if (null == c.default.LockSetting);
                    else {
                        if (e.Type == this.targetType) return;
                        for (let t = 0; t < c.default.LockSetting.length; t++) {
                            if (c.default.LockSetting[t] == this.targetType) return;
                            if (e.Type == c.default.LockSetting[t]) return void this.setLocking(e)
                        }
                    }
            }
            OnFishInit(e) {
                -1 != this.unhitList.indexOf(e.Type) && e.SetShapeColor(cc.Color.GRAY)
            }
            OnTargetChange(e, t) {
                e && (e.Event_FishLeave = null), m.default.Instance.AutoShoot || this.isTouchHold ? this.FindNextFish() : this.setLocking(null)
            }
            FindNextFish() {
                if (!this.isMainPlayer) return;
                let e = this.targetFish ? this.targetFish.ID : "",
                    t = null;
                d.default.Instance && (t = d.default.Instance.GetNextLockFish(this.targetType, e)), t ? this.setLocking(t) : this.enableLockAiming(!1)
            }
            enableLockAiming(e) {
                this.Line.node.active != e && (this.Line.node.active = e, e ? (this.Line.play(), this.LockAiming.play()) : (this.Line.stop(), this.LockAiming.stop()))
            }
        };
        n([S(cc.Animation)], g.prototype, "Line", void 0), n([S(cc.Animation)], g.prototype, "LockAiming", void 0), g = n([f], g), i.default = g, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../../../../../LobbyCommon/Net/LobbyClient": void 0,
        "../../../../../LobbyCommon/PopupMessage/Script/PopupMsgMgr": void 0,
        "../../GameClient": "GameClient",
        "../Common/EnumFilter": "EnumFilter",
        "../Common/ResourceManager": "ResourceManager",
        "../Fish/FishManager": "FishManager",
        "../Player/PlayerManager": "PlayerManager",
        "../Weapon/WeaponManager": "WeaponManager",
        "./BaseSkill": "BaseSkill"
    }],
    SkillDrill: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "ca325w5vrBBCIUxOhTC9dY6", "SkillDrill");
        var n = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            s = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("./BaseSkill"),
            o = e("../Player/PlayerManager"),
            l = e("../Fish/FishManager"),
            r = e("../Fish/BaseFish"),
            c = e("../../System/SkillSystem"),
            h = e("../Weapon/WeaponManager"),
            d = e("../../GameClient"),
            u = e("../Common/AudioManager"),
            m = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            {
                ccclass: p,
                property: f
            } = cc._decorator;
        let S = class extends a.default {
            constructor() {
                super(...arguments), this.drillGunIconNode = null, this.drillWeapon = null, this.drillBullet = null, this.shootReady = !1, this.isReceiveServerShoot = !1, this.isTouchIng = !1, this.isShootEnd = !1, this.shootPos = cc.Vec2.ZERO, this.fishID = null, this.ScoreUIName = "ScoreUI_Drill", this.limitShootTime = 15, this.shootTimer = 0, this.fishAwardTime = 0, this.readySound = null
            }
            onLoad() {
                this.skillType = a.skillEnum.Drill, this.limitTime = 80, this.forceTime = 25
            }
            update(e) {
                super.update(e), this.isShootEnd || (this.isMainPlayer && this.shootTimer > 0 && (this.shootTimer -= e, this.shootTimer <= 10 && this.drillWeapon.setLimitTime(this.shootTimer), this.shootTimer <= 0 && (this.shootTimer = 0, this.MainPlayerShoot())), this.forceTimer > 0 && (this.forceTimer -= e, this.forceTimer <= 0 && (this.forceTimer = 0, this.isGaveAward = !0, this.isForceShowAward = !0, this.ShowExplodeAndAward(cc.Vec2.ZERO, !0))))
            }
            InitProperties(e) {
                super.InitProperties(), this.drillWeapon = null, this.isReceiveServerShoot = !1, this.drillBullet = null, this.shootReady = !1, this.isShootEnd = !1, this.isTouchIng = !1, this.shootPos = cc.Vec2.ZERO, this.playerBet = e.bet, this.fishID = e.crab
            }
            UseSkill() {
                return s(this, void 0, void 0, function*() {
                    let e = l.default.Instance.GetFishByID(this.fishID.toString());
                    u.default.Instance.Play("drill_hit_2");
                    var t = 700 + 50 * Math.random(),
                        i = 310 + 100 * Math.random(),
                        n = new cc.Vec2(t, i);
                    if (this.drillWeapon = h.default.Instance.GetSkillWeapon(this.playerSeat, h.WeaponType.Dirll), this.shootPos = this.drillWeapon.shootPos, null != e && (e.AliveStatus = r.FishState.DEAD, e.CanCollision = !1, e.StopAction(), e.PlayDieAnim(), n = e.node.getPosition(), e.node.runAction(cc.rotateBy(3, 360))), this.node.setPosition(n), this.node.scale = 1.5, null != this.drillGunIconNode) {
                        this.drillGunIconNode.angle = this.playerSeat > 1 ? 180 : 0;
                        var s = m.default.isReverse ? -100 : 100;
                        this.drillGunIconNode.runAction(cc.sequence(cc.moveTo(.3, cc.v2(0, s)).easing(cc.easeCubicActionOut()), cc.moveTo(.5, cc.Vec2.ZERO)))
                    }
                    yield this.delay(1e3), null != e && e.RemoveSelf();
                    let a = h.default.WeaponPosition(this.playerSeat);
                    this.node.runAction(cc.sequence(cc.spawn(cc.moveTo(1.2, a).easing(cc.easeSineOut()), cc.scaleTo(1.2, 1, 1)), cc.scaleTo(.5, 0, 0).easing(cc.easeCubicActionOut()))), u.default.Instance.Play("drill_addgun"), yield this.delay(1e3), this.CreateSkillTitle(), this.CreateScoreUI(), this.drillWeapon.ChangeGunAnim(), this.OnChangeGunEnd()
                })
            }
            UnUseSkill() {
                u.default.Instance.Stop(this.readySound), this.readySound = null, h.default.Instance.ReturnToBaseWeapon(this.playerSeat), this.drillBullet && (this.drillBullet.Recycle(), this.drillBullet.Event_OnBulletHit = null, this.drillBullet.Event_OnBulletReady = null, this.drillBullet.Event_OnBulletExplode = null, this.drillBullet = null), super.UnUseSkill()
            }
            ReceiveSkillData(e, t) {
                switch (t) {
                    case c.SKILL_CMD_NAME.DRILL_SHOOT:
                        this.SetOtherShootData(e.x, e.y);
                        break;
                    case c.SKILL_CMD_NAME.DRILL_HIT:
                        let h = e.fish_dead_dict,
                            d = Object.keys(h),
                            u = 0;
                        for (let e = 0; e < d.length; e++) {
                            let t = l.default.Instance.GetFishByID(d[e].toString());
                            if (null != t) {
                                if (t.Feature) continue;
                                let i = h[d[e]],
                                    n = i.coin,
                                    s = i.odds;
                                u += n, this.BulletHitFish(t, n, s)
                            }
                        }
                        break;
                    case c.SKILL_CMD_NAME.DRILL_BOMB:
                        var i = e.fish,
                            n = e.odds,
                            s = e.total_win,
                            a = e.total_odds,
                            o = new Array,
                            r = new Array;
                        if (null != i && null != n && this.playerBet > 0)
                            for (let e = 0; e < i.length && (o.push(l.default.Instance.GetFishByID(i[e])), !(e >= n.length)); e++) r.push(n[e] * this.playerBet);
                        this.SetExplodeData(o, r, n, s, a)
                }
            }
            SetOtherShootData(e, t) {
                this.isReceiveServerShoot = !0, this.shootPos = new cc.Vec2(e, t), this.CheckShoot()
            }
            SetExplodeData(e, t, i, n, s) {
                this.dieFishList = e, this.winList = t, this.oddsList = i, this.totalWin = this.currentWin + n, this.totalOdds = this.currentOdds + s, this.totalOdds = s, this.isGaveAward = !0, this.drillBullet && this.drillBullet.BulletExplode(), this.isShootEnd || this.drillWeapon && this.drillWeapon.SwitchGunObj(!1)
            }
            OnChangeGunEnd() {
                return s(this, void 0, void 0, function*() {
                    yield this.delay(1e3), this.shootReady = !0, this.shootTimer = this.limitShootTime, this.forceTimer = this.forceTime, this.isMainPlayer ? (this.RegisterTouchEvent(), m.default.Instance.IsLockChangeWeapon = !0) : this.CheckShoot()
                })
            }
            CheckShoot() {
                this.isMainPlayer || this.shootReady && this.isReceiveServerShoot && this.OtherPlayerShoot()
            }
            MainPlayerShoot() {
                return s(this, void 0, void 0, function*() {
                    this.drillWeapon && this.drillWeapon.isGunReady && this.isMainPlayer && (this.isShootEnd || (this.isShootEnd = !0, this.CanelRegisterTouchEvent(), m.default.Instance.IsLockChangeWeapon = !1, d.default.SkillSystem.SendSkillShoot(c.SKILL_CMD_NAME.DRILL_SHOOT, this.playerSeat, this.shootPos.x, this.shootPos.y), this.shootTimer = 999, this.drillWeapon.setLimitTime(null), this.drillWeapon.SwitchGunObj(!1), o.PlayerManager.Instance.players[this.playerSeat] && (this.drillBullet = h.default.Instance.CreateBullet(this.playerSeat, this.shootPos, this.playerBet), this.drillBullet && (this.drillBullet.Event_OnBulletHit = this.OnBulletHit.bind(this), this.drillBullet.Event_OnBulletReady = this.OnBulletExplodeReady.bind(this), this.drillBullet.Event_OnBulletExplode = this.OnBulletExple.bind(this))), u.default.Instance.Stop(this.readySound), this.readySound = null, u.default.Instance.Play("drill_shoot")))
                })
            }
            OtherPlayerShoot() {
                this.isShootEnd || this.drillWeapon && this.drillWeapon.isGunReady && (this.isShootEnd = !0, this.drillWeapon.SwitchGunObj(!1), o.PlayerManager.Instance.players[this.playerSeat] && (this.drillBullet = h.default.Instance.CreateBullet(this.playerSeat, this.shootPos), this.drillBullet && (this.drillBullet.Event_OnBulletExplode = this.OnBulletExple.bind(this))), u.default.Instance.Stop(this.readySound), this.readySound = null, u.default.Instance.Play("drill_shoot"))
            }
            ShowExplodeAndAward(e, t = !1) {
                return s(this, void 0, void 0, function*() {
                    t || this.CreateExplodeEffect(e);
                    let i = (new Date).getTime();
                    this.fishAwardTime = i < this.fishAwardTime ? this.fishAwardTime - i : 0;
                    let n = this.KillFishesAndShowAward();
                    this.SetScoreUICount(this.totalWin), this.fishAwardTime = n > this.fishAwardTime ? n : this.fishAwardTime, yield this.delay(1500), this.fishAwardTime = this.fishAwardTime >= 1.5 ? this.fishAwardTime - 1.5 : 0, yield this.delay(1e3 * this.fishAwardTime), this.HideSkillScoreUI(), this.ShowSkillScore(this.totalWin), this.PlayAwardSound(), yield this.delay(4e3), this.UnUseSkill()
                })
            }
            BulletHitFish(e, t, i) {
                e && l.default.Instance.KillFish(this.playerSeat, e, t, this.playerBet, !1, !0, e => {
                    let t = e + (new Date).getTime();
                    this.fishAwardTime = t > this.fishAwardTime ? t : this.fishAwardTime
                }), this.currentWin += t, this.currentOdds += i, this.SetScoreUICount(this.currentWin)
            }
            OnBulletHit(e) {
                this.isMainPlayer && d.default.SkillSystem.SendHitFish(c.SKILL_CMD_NAME.DRILL_HIT, e)
            }
            OnBulletExplodeReady(e) {
                this.isMainPlayer && d.default.SkillSystem.SendRangeFish(c.SKILL_CMD_NAME.DRILL_BOMB, e)
            }
            OnBulletExple(e, t) {
                this.isForceShowAward = e, this.ShowExplodeAndAward(t), this.drillBullet && (this.drillBullet.Event_OnBulletHit = null, this.drillBullet.Event_OnBulletReady = null, this.drillBullet.Event_OnBulletExplode = null, this.drillBullet = null)
            }
            CreateExplodeEffect(e) {
                this.AddSkillEffect("Bomb_Explode", e, 0, null), u.default.Instance.Play("drill_bomb"), this.CameraShakeEffect(1, 3)
            }
            OnTouchStart(e) {
                this.isTouchIng = !0, this.shootPos = m.default.ConvMousePos(e.getLocation()), null != this.drillWeapon && (this.drillWeapon.SetGunRotateUsePos(this.shootPos), null == this.readySound && (this.readySound = u.default.Instance.Play("drill_ready", 1, !0)))
            }
            OnTouchMove(e) {
                this.isTouchIng && this.drillWeapon && (this.shootPos = m.default.ConvMousePos(e.getLocation()), this.drillWeapon.SetGunRotateUsePos(this.shootPos))
            }
            OnTouchEnd(e) {
                this.isTouchIng && (this.isTouchIng = !1, this.shootPos = m.default.ConvMousePos(e.getLocation()), this.MainPlayerShoot())
            }
        };
        n([f(cc.Node)], S.prototype, "drillGunIconNode", void 0), S = n([p], S), i.default = S, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../../GameClient": "GameClient",
        "../../System/SkillSystem": "SkillSystem",
        "../Common/AudioManager": "AudioManager",
        "../Fish/BaseFish": "BaseFish",
        "../Fish/FishManager": "FishManager",
        "../Player/PlayerManager": "PlayerManager",
        "../Weapon/WeaponManager": "WeaponManager",
        "./BaseSkill": "BaseSkill"
    }],
    SkillElazingPhoneix: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "6cda6MDb7tGzJ1EidYIGpH6", "SkillElazingPhoneix");
        var n = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            s = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("./BaseSkill"),
            o = e("../Fish/BaseFish"),
            l = e("../Fish/FishManager"),
            r = e("../Common/ResourceManager"),
            c = e("../Common/AudioManager"),
            h = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            d = e("../../GameClient/Player"),
            {
                ccclass: u,
                property: m
            } = cc._decorator;
        var p;
        (function(e) {
            e[e.stay = 0] = "stay", e[e.move = 1] = "move"
        })(p || (p = {}));
        class f {
            constructor(e) {
                this.node = null, this.state = p.stay, this.oriPosition = null, this.oriScale = 0, this.node = e, this.oriPosition = e.getPosition(), this.oriScale = e.scale
            }
        }
        let S = class extends a.default {
            constructor() {
                super(...arguments), this.BirdsNode = [], this.Totem = null, this.Explosion = null, this.FrameFire = null, this.CountObj = null, this.label_number = null, this.Birds = [], this.isContinue = !0, this.currentBombNumber = 0, this.HitCount = 0, this.fishID = null, this.ScoreUIName = "ScoreUI_Awake", this.fishAwardTime = 0
            }
            onLoad() {
                this.skillType = a.skillEnum.AwakenPhoenix, this.limitTime = 120;
                for (let e = 0; e < this.BirdsNode.length; e++) this.Birds.push(new f(this.BirdsNode[e]))
            }
            update(e) {
                super.update(e), this.forceTimer > 0 && (this.forceTimer -= e, this.forceTimer <= 0 && (this.SetExplodeEndData(), this.forceTimer = 0))
            }
            InitProperties(e = null) {
                super.InitProperties(), this.node.scale = 0, this.isContinue = !0, this.currentBombNumber = 0, this.label_number.string = "1", this.forceTime = 7.5, this.playerBet = e.bet, this.FrameFire.node.opacity = 0, this.CountObj.opacity = 255, this.CountObj.angle = h.default.isReverse ? 180 : 0, this.fishID = e.bomb_fish_id
            }
            UseSkill() {
                return s(this, void 0, void 0, function*() {
                    let e = l.default.Instance.GetFishByID(this.fishID.toString());
                    e && (e.AliveStatus = o.FishState.DEAD, e.CanCollision = !1, e.StopAction(), e.PlayDieAnim(), c.default.Instance.Play("Phoenix_die_01", .5)), yield this.delay(2e3), this.node.setPosition(e ? this.node.parent.convertToNodeSpaceAR(e.getFishPos()) : cc.Vec2.ZERO);
                    let t = r.default.SpawnEffect("7", this.isMainPlayer);
                    t.scale = 2, t.setPosition(this.node.getPosition()), this.Totem.node.angle = h.default.isReverse ? 180 : 0, this.Totem.node.opacity = 255, this.Totem.node.active = !0, this.Totem.playAdditive("TotemBurn"), yield this.delay(500), this.node.runAction(cc.sequence(cc.scaleTo(1, 1), cc.moveTo(1, cc.Vec2.ZERO), cc.callFunc(() => {
                        this.Totem.playAdditive("TotemLoop"), c.default.Instance.Play("storm_shoot")
                    }), cc.delayTime(.8), cc.callFunc(() => {
                        this.Explosion.node.active = !0, this.Explosion.play("Explosion"), this.Totem.node.active = !1, c.default.Instance.Play("bomb_ex03")
                    }), cc.delayTime(1.4), cc.callFunc(() => {
                        this.Explosion.node.active = !1, this.FrameFire.node.active = !0, this.FrameFire.play("FrameFire"), this.FrameFire.node.runAction(cc.fadeIn(1)), c.default.Instance.Fade(c.default.Instance.GetBGMID(), 1, 0), this.bgmID = c.default.Instance.Play("Phoenix_out_01", .7, !0), c.default.Instance.Fade(this.bgmID, 0, 1);
                        for (let e = 0; e < this.Birds.length; e++) this.Birds[e].node.active = !0;
                        this.schedule(this.StartBirdAttack, .2), h.default.CameraShake(2)
                    }))), this.CreateSkillTitle(), this.CreateScoreUI(), this.forceTimer = this.forceTime, yield this.delay(5e3), this.schedule(this.UpdateHit, .1)
                })
            }
            UnUseSkill() {
                this.Totem.stop(), this.Totem.node.active = !1, this.CountObj.active = !1, this.Explosion.stop(), this.Explosion.node.active = !1, this.FrameFire.stop(), this.FrameFire.node.active = !1;
                for (let e = 0; e < this.Birds.length; e++) this.Birds[e].node.stopAllActions(), this.Birds[e].node.setPosition(this.Birds[e].oriPosition), this.Birds[e].node.scale = this.Birds[e].oriScale, this.Birds[e].state = p.stay, this.Birds[e].node.active = !1;
                h.default.CameraShake(-2), super.UnUseSkill()
            }
            ReceiveSkillData(e) {
                return s(this, void 0, void 0, function*() {
                    yield this.delay(3e3), this.dieFishList = new Array, this.winList = new Array;
                    let t = e.fish_dead_dict,
                        i = Object.keys(t);
                    if (i)
                        for (let e = 0; e < i.length; e++) {
                            const n = i[e],
                                s = l.default.Instance.GetFishByID(n);
                            s && (s.AliveStatus = o.FishState.DEAD, s.CanCollision = !1, s.StopAction(), this.dieFishList.push(s), this.winList.push(t[n].coin))
                        }
                    this.totalWin = e.total_wins, this.HitCount = e.hit_count, this.isContinue = e.continues, this.isContinue ? (d.GameLogMainPlayer.pushWinning(this.fishID, e.bet, e.seat, e.total_wins, !0), this.KillFish()) : (this.isGaveAward = !0, this.ShowExplode())
                })
            }
            SetExplodeEndData() {
                this.isContinue && (this.isGaveAward = !0, this.isForceShowAward = !0, this.isContinue = !1, this.ShowExplode())
            }
            KillFish() {
                let e = 0;
                this.forceTimer = 0, e = this.KillFishesAndShowAward(), e += (new Date).getTime(), this.fishAwardTime = this.fishAwardTime < e ? e : this.fishAwardTime, this.currentWin = this.totalWin, this.SetScoreUICount(this.currentWin), this.forceTimer = this.forceTime
            }
            ShowExplode() {
                return s(this, void 0, void 0, function*() {
                    r.default.SpawnEffect("Effect_Phoneix", this.isMainPlayer), yield this.delay(1e3), h.default.CameraShake(-2), this.unschedule(this.StartBirdAttack), this.unschedule(this.UpdateHit), this.currentBombNumber < this.HitCount && (this.currentBombNumber++, this.label_number.string = this.currentBombNumber.toString(), this.CountObj.scale = 1.2, this.CountObj.runAction(cc.scaleTo(.07, 1)), c.default.Instance.Play("Phoenix_count_02")), yield this.delay(1800);
                    let e = () => {
                        this.currentBombNumber++, this.label_number.string = this.currentBombNumber.toString(), c.default.Instance.Play("Phoenix_count_01"), this.currentBombNumber >= this.HitCount && (c.default.Instance.Play("Phoenix_count_03"), this.CountObj.scale = 1.5, this.CountObj.runAction(cc.sequence(cc.scaleTo(1, 1), cc.delayTime(2), cc.fadeOut(1))), this.unschedule(e))
                    };
                    this.Explosion.node.active = !0, this.Explosion.play("Explosion"), c.default.Instance.Play("Phoenix_attackend_01"), c.default.Instance.SetNextSound(this.bgmID, "Phoenix_out_02", .7), c.default.Instance.Fade(c.default.Instance.GetBGMID(), 0, 1), yield this.delay(800), c.default.Instance.Play("drill_bomb_1"), this.KillFish(), this.fishAwardTime -= (new Date).getTime(), this.CameraShakeEffect(2, 1.5), this.CountObj.scale = 1.2, this.schedule(e, 0), this.FrameFire.node.runAction(cc.fadeOut(1)), yield this.delay(1e3 * this.fishAwardTime), this.HideSkillScoreUI(), this.ShowSkillScore(this.totalWin), this.PlayAwardSound(), yield this.delay(4e3), this.UnUseSkill()
                })
            }
            StartBirdAttack() {
                for (let e = 0; e < 5; e++) {
                    let e = Math.floor(Math.random() * this.Birds.length);
                    this.Birds[e].state == p.stay && this.BirdAttack(e)
                }
                for (let e = 0; e < 2; e++) {
                    let e = r.default.SpawnEffect("Red_Blast");
                    if (!e) continue;
                    let t = new cc.Vec2(568 * Math.random() * (Math.random() >= .5 ? 1 : -1), 320 * Math.random() * (Math.random() >= .5 ? 1 : -1)),
                        i = 1.5 * Math.random() + 1,
                        n = Math.random() + 1;
                    e.parent = this.node.parent, e.zIndex = 0, e.active = !1, e.setPosition(t), e.scale = i, this.node.runAction(cc.sequence(cc.delayTime(n), cc.callFunc(() => {
                        e.active = !0, e.getComponent(cc.Animation).play("Blast"), c.default.Instance.Play("Phoenix_attack_01", .3)
                    })))
                }
            }
            BirdAttack(e) {
                if (this.Birds[e].state == p.move) return;
                this.Birds[e].state = p.move;
                let t = 50 * Math.random() * (Math.random() >= .5 ? 1 : -1),
                    i = .2 * Math.random() * (Math.random() >= .5 ? 1 : -1),
                    n = .9 * Math.random() + .1,
                    s = Math.random() + 1;
                this.Birds[e].node.setPosition(this.Birds[e].node.getPosition().add(new cc.Vec2(0, t))), this.Birds[e].node.scale += i, this.Birds[e].node.runAction(cc.sequence(cc.delayTime(n), cc.callFunc(() => {
                    let t = this.Birds[e].node.getComponent(cc.Animation),
                        i = s > 1.5 ? 2 : 1;
                    t && t.play("BirdFly0" + i.toString())
                }), cc.moveTo(s, new cc.Vec2(750, this.Birds[e].node.getPosition().y)), cc.callFunc(() => {
                    this.Birds[e].node.setPosition(this.Birds[e].oriPosition), this.Birds[e].node.scale = this.Birds[e].oriScale, this.Birds[e].state = p.stay
                })))
            }
            UpdateHit() {
                this.currentBombNumber >= this.HitCount || Math.random() >= .7 || (this.CountObj.active || (this.CountObj.active = !0), this.currentBombNumber++, this.label_number.string = this.currentBombNumber.toString(), this.CountObj.scale = 1.2, this.CountObj.runAction(cc.scaleTo(.07, 1)), c.default.Instance.Play("Phoenix_count_01"))
            }
        };
        n([m([cc.Node])], S.prototype, "BirdsNode", void 0), n([m(cc.Animation)], S.prototype, "Totem", void 0), n([m(cc.Animation)], S.prototype, "Explosion", void 0), n([m(cc.Animation)], S.prototype, "FrameFire", void 0), n([m(cc.Node)], S.prototype, "CountObj", void 0), n([m(cc.Label)], S.prototype, "label_number", void 0), S = n([u], S), i.default = S, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../../GameClient/Player": "Player",
        "../Common/AudioManager": "AudioManager",
        "../Common/ResourceManager": "ResourceManager",
        "../Fish/BaseFish": "BaseFish",
        "../Fish/FishManager": "FishManager",
        "./BaseSkill": "BaseSkill"
    }],
    SkillElectric: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "779c4t+/itMroOlbl7rKHIO", "SkillElectric");
        var n = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            s = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("./BaseSkill"),
            o = e("../Weapon/WeaponManager"),
            l = e("../Fish/BaseFish"),
            r = e("../../System/SkillSystem"),
            c = e("../Fish/FishManager"),
            h = e("../../GameClient"),
            d = e("../Common/AudioManager"),
            u = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            {
                ccclass: m,
                property: p
            } = cc._decorator;
        let f = class extends a.default {
            constructor() {
                super(...arguments), this.electricGunIconNode = null, this.electricWeapon = null, this.shootReady = !1, this.isReceiveServerShoot = !1, this.isTouchIng = !1, this.isShootEnd = !1, this.shootPos = cc.Vec2.ZERO, this.fishID = null, this.limitShootTime = 15, this.shootTimer = 0
            }
            onLoad() {
                this.skillType = a.skillEnum.Electric, this.limitTime = 80, this.forceTime = 25
            }
            update(e) {
                super.update(e), this.isShootEnd || (this.isMainPlayer && this.shootTimer > 0 && (this.shootTimer -= e, this.shootTimer <= 10 && this.electricWeapon.setLimitTime(this.shootTimer), this.shootTimer <= 0 && (this.shootTimer = 0, this.MainPlayerShoot())), this.forceTimer > 0 && (this.forceTimer -= e, this.forceTimer <= 0 && (this.forceTimer = 0, this.isGaveAward = !0, this.isForceShowAward = !0, this.OtherPlayerShoot())))
            }
            InitProperties(e = null) {
                super.InitProperties(), this.electricWeapon = null, this.shootReady = !1, this.isReceiveServerShoot = !1, this.isShootEnd = !1, this.isTouchIng = !1, this.shootPos = cc.Vec2.ZERO, this.playerBet = e.bet, this.fishID = e.crab
            }
            UseSkill() {
                return s(this, void 0, void 0, function*() {
                    let e = c.default.Instance.GetFishByID(this.fishID.toString());
                    d.default.Instance.Play("drill_hit_2");
                    var t = 700 + 50 * Math.random(),
                        i = 310 + 100 * Math.random(),
                        n = new cc.Vec2(t, i);
                    if (this.electricWeapon = o.default.Instance.GetSkillWeapon(this.playerSeat, o.WeaponType.Electric), this.shootPos = this.electricWeapon.shootPos, null != e && (e.AliveStatus = l.FishState.DEAD, e.CanCollision = !1, e.StopAction(), e.PlayDieAnim(), n = e.node.getPosition(), e.node.runAction(cc.rotateBy(3, 360))), this.node.setPosition(n), this.node.scale = 1.5, null != this.electricGunIconNode) {
                        this.electricGunIconNode.angle = this.playerSeat > 1 ? 180 : 0;
                        var s = u.default.isReverse ? -100 : 100;
                        this.electricGunIconNode.runAction(cc.sequence(cc.moveTo(.3, cc.v2(0, s)).easing(cc.easeCubicActionOut()), cc.moveTo(.5, cc.Vec2.ZERO)))
                    }
                    yield this.delay(1e3), null != e && e.RemoveSelf();
                    let a = o.default.WeaponPosition(this.playerSeat);
                    this.node.runAction(cc.sequence(cc.spawn(cc.moveTo(1.2, a).easing(cc.easeSineOut()), cc.scaleTo(1.2, 1, 1)), cc.scaleTo(.5, 0, 0).easing(cc.easeCubicActionOut()))), d.default.Instance.Play("drill_addgun"), yield this.delay(1700), this.CreateSkillTitle(), this.electricWeapon.ChangeGunAnim(), this.OnChangeGunEnd()
                })
            }
            UnUseSkill() {
                this.node.scale = 0, o.default.Instance.ReturnToBaseWeapon(this.playerSeat), this.CanelRegisterTouchEvent(), super.UnUseSkill()
            }
            ReceiveSkillData(e, t) {
                switch (t) {
                    case r.SKILL_CMD_NAME.ELECTRIC_SHOOT:
                        this.SetOtherShootData(e.x, e.y);
                        break;
                    case r.SKILL_CMD_NAME.ELECTRIC_HIT:
                        var i = e.fish,
                            n = e.odds,
                            s = e.total_win,
                            a = e.total_odds,
                            o = new Array,
                            l = new Array;
                        if (null != i && null != n && this.playerBet > 0)
                            for (let e = 0; e < i.length && (o.push(c.default.Instance.GetFishByID(i[e])), !(e >= n.length)); e++) l.push(n[e] * this.playerBet);
                        this.SetExplodeData(o, l, n, s, a)
                }
            }
            SetOtherShootData(e, t) {
                this.isReceiveServerShoot = !0, this.shootPos = new cc.Vec2(e, t), this.CheckShoot()
            }
            SetExplodeData(e, t, i, n, s) {
                if (this.dieFishList = e, this.winList = t, this.oddsList = i, this.totalWin = n, this.totalOdds = s, this.isGaveAward = !0, !this.isMainPlayer && !this.isReceiveServerShoot) return this.isReceiveServerShoot = !0, this.shootPos = cc.Vec2.ZERO, void this.CheckShoot();
                this.ShowExplodeAndAward()
            }
            OnChangeGunEnd() {
                return s(this, void 0, void 0, function*() {
                    yield this.delay(1e3), this.shootReady = !0, this.shootTimer = this.limitShootTime, this.forceTimer = this.forceTime, this.isMainPlayer ? (this.RegisterTouchEvent(), u.default.Instance.IsLockChangeWeapon = !0) : this.CheckShoot()
                })
            }
            CheckShoot() {
                this.isMainPlayer || this.shootReady && this.isReceiveServerShoot && this.OtherPlayerShoot()
            }
            MainPlayerShoot() {
                return s(this, void 0, void 0, function*() {
                    if (!this.electricWeapon) return;
                    if (!this.electricWeapon.isGunReady) return;
                    if (!this.isMainPlayer) return;
                    if (this.isShootEnd) return;
                    this.isShootEnd = !0, this.CanelRegisterTouchEvent(), u.default.Instance.IsLockChangeWeapon = !1, d.default.Instance.Play("CannonShoot"), h.default.SkillSystem.SendSkillShoot(r.SKILL_CMD_NAME.ELECTRIC_SHOOT, this.playerSeat, this.shootPos.x, this.shootPos.y), this.electricWeapon.ShootFunction(this.shootPos), this.shootTimer = 999, this.electricWeapon.setLimitTime(null), this.electricWeapon.SwitchCollision(!0), yield this.delay(1500);
                    let e = new Array;
                    e = Array.from(this.electricWeapon.GetFishIDList()), h.default.SkillSystem.SendRangeFish(r.SKILL_CMD_NAME.ELECTRIC_HIT, e), this.electricWeapon.SwitchCollision(!1)
                })
            }
            OtherPlayerShoot() {
                return s(this, void 0, void 0, function*() {
                    this.isShootEnd || this.electricWeapon && this.electricWeapon.isGunReady && (this.isShootEnd = !0, d.default.Instance.Play("CannonShoot"), this.electricWeapon.ShootFunction(this.shootPos), this.isGaveAward && (yield this.delay(1500), this.ShowExplodeAndAward()))
                })
            }
            ShowExplodeAndAward() {
                return s(this, void 0, void 0, function*() {
                    let e = this.KillFishesAndShowAward();
                    yield this.delay(1500), e = e > 1.5 ? e - 1.5 : 0, yield this.delay(1e3 * e), this.ShowSkillScore(this.totalWin), this.PlayAwardSound(), yield this.delay(4e3), this.UnUseSkill()
                })
            }
            OnTouchStart(e) {
                this.isTouchIng = !0, this.shootPos = u.default.ConvMousePos(new cc.Vec2(e.getLocation().x, e.getLocation().y)), null != this.electricWeapon && this.electricWeapon.SetGunRotateUsePos(this.shootPos)
            }
            OnTouchMove(e) {
                this.isTouchIng && this.electricWeapon && (this.shootPos = u.default.ConvMousePos(new cc.Vec2(e.getLocation().x, e.getLocation().y)), this.electricWeapon.SetGunRotateUsePos(this.shootPos))
            }
            OnTouchEnd(e) {
                this.isTouchIng && (this.isTouchIng = !1, this.shootPos = u.default.ConvMousePos(new cc.Vec2(e.getLocation().x, e.getLocation().y)), this.MainPlayerShoot(), this.CameraShakeEffect(2.5, 2))
            }
        };
        n([p(cc.Node)], f.prototype, "electricGunIconNode", void 0), f = n([m], f), i.default = f, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../../GameClient": "GameClient",
        "../../System/SkillSystem": "SkillSystem",
        "../Common/AudioManager": "AudioManager",
        "../Fish/BaseFish": "BaseFish",
        "../Fish/FishManager": "FishManager",
        "../Weapon/WeaponManager": "WeaponManager",
        "./BaseSkill": "BaseSkill"
    }],
    SkillEternalDragon: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "eb974yr0IVFMZ8JuyWkvuN0", "SkillEternalDragon");
        var n = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            s = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            o = e("../../GameClient"),
            l = e("../../GameClient/Player"),
            r = e("../../System/SkillSystem"),
            c = e("../Common/AudioManager"),
            h = e("../Common/EnumFilter"),
            d = e("../Common/ResourceManager"),
            u = e("../Common/Utility"),
            m = e("../Fish/FishManager"),
            p = e("../Player/PlayerManager"),
            f = e("../Weapon/WeaponManager"),
            S = e("./BaseSkill"),
            g = e("./EternalDragonReward"),
            {
                ccclass: y,
                property: _
            } = cc._decorator;
        let C = class extends S.default {
            constructor() {
                super(...arguments), this.number_label = null, this.score_label = null, this.totem = null, this.spine_node = null, this.lightBall_node = null, this.lighting_node = null, this.finalFire_node = null, this.fish_id = 0, this.current_bomb = 0, this.smallBombTimes = 0, this.bigBombTimes = 0, this.fishAwardTime = 0, this.showingScore = 0, this.spineEventStep = 0, this.cmdTimer = 0, this.lightBall = null, this.lighting = null, this.finalFire = null, this.isContinue = !0, this.spine_list = null, this.index_pair = [
                    [0, 2],
                    [1, 3],
                    [0, 1, 2, 3],
                    [4, 5, 6, 7]
                ]
            }
            onLoad() {
                this.limitTime = 180, this.spine_list = this.spine_node.getComponentsInChildren(sp.Skeleton);
                for (let e = 0; e < this.spine_list.length; e++) this.spine_list[e].setCompleteListener(() => {
                    this.spine_list[e].node.active = !1
                }), this.spine_list[e].setEventListener(this.spineEventListener.bind(this, e));
                this.lightBall = this.lightBall_node.getComponentsInChildren(cc.Animation), this.lighting = this.lighting_node.getComponentsInChildren(cc.Animation), this.finalFire = this.finalFire_node.getComponentsInChildren(cc.ParticleSystem)
            }
            update(e) {
                super.update(e), this.cmdTimer > 0 && (this.cmdTimer -= e, this.cmdTimer <= 0 && (this.cmdTimer = 0, cc.error("SkillOvertimeout"), this.SkillOver()))
            }
            InitProperties(e = null) {
                super.InitProperties(), this.current_bomb = 0, this.node.opacity = 0, this.cmdTimer = 0, this.isContinue = !0, this.lightBall.forEach(e => {
                    e.node.active = !1
                }), this.lighting.forEach(e => {
                    e.node.active = !1
                }), this.number_label.node.parent.opacity = 0, this.number_label.string = "1", this.showingScore = 0, this.score_label.node.parent.opacity = 0, this.score_label.string = "0", this.fish_id = e.id, this.playerBet = e.bet, this.bigBombTimes = e.big_bomb_times_target, this.smallBombTimes = e.small_bomb_times_target
            }
            UseSkill() {
                return s(this, void 0, void 0, function*() {
                    c.default.Instance.Play("42_dragon_blow");
                    const e = m.default.Instance.GetFishByID(this.fish_id);
                    if (!e) return void cc.warn("[InitInfo] Dragon is Null!");
                    e.CanCollision = !1, e.PlayDieAnim(), yield this.delay(2e3);
                    let t = this.node.parent.convertToNodeSpaceAR(e.getFishPos());
                    c.default.Instance.Play("41_catch_bigfish");
                    const i = d.default.SpawnEffect("7", this.isMainPlayer);
                    i && (i.scale = 2, i.setPosition(t)), this.InitTotem(t), m.default.Instance.getUniqueFishData(h.FishType.EternalFlamingDragon).getComponent.node.runAction(cc.fadeIn(2))
                })
            }
            CreateSkillTitle() {
                if (super.CreateSkillTitle(), o.default.SkillSystem.FindSkill(S.skillEnum.GoldenSlot, this.playerSeat)) {
                    let e = this.playerSeat > 1 ? cc.v2(0, -150) : cc.v2(0, 150);
                    this.SkillTitle.node.setPosition(this.SkillTitle.node.getPosition().add(e))
                }
            }
            UnUseSkill() {
                this.lightBall.forEach(e => {
                    e.stop()
                }), this.lighting.forEach(e => {
                    e.stop()
                });
                let e = {
                    time: 1e3,
                    callback: () => {
                        m.default.Instance.getUniqueFishData(h.FishType.EternalFlamingDragon).getComponent.node.runAction(cc.sequence(cc.fadeOut(2), cc.callFunc(() => {
                            m.default.Instance.recycleUniqueFishData(h.FishType.EternalFlamingDragon)
                        })))
                    }
                };
                m.default.Instance.getUniqueFishData(h.FishType.EternalFlamingDragon).setTimeEvent(e), super.UnUseSkill()
            }
            InitTotem(e) {
                this.node.setPosition(e), this.node.angle = a.default.isReverse ? 180 : 0, cc.tween(this.node).delay(.5).to(.75, {
                    opacity: 255
                }).call(() => {
                    c.default.Instance.Fade(c.default.Instance.GetBGMID(), 1, 0), this.bgmID = c.default.Instance.Play("RedDragon_StartBGM", 1, !0), c.default.Instance.Fade(this.bgmID, 0, 1)
                }).to(1.5, {
                    position: cc.Vec3.ZERO
                }).call(() => {
                    cc.tween(this.score_label.node.parent).to(.5, {
                        opacity: 255
                    }).start(), cc.tween(this.number_label.node.parent).to(.5, {
                        opacity: 255
                    }).start()
                }).delay(.5).call(() => {
                    this.SendBombRange()
                }).start()
            }
            SendBombRange() {
                if (this.isMainPlayer) {
                    let e = m.default.Instance.GetRangeAttackableID(cc.Vec2.ZERO, 1e3, 100);
                    o.default.SkillSystem.SendRangeFish(r.SKILL_CMD_NAME.RED_DRAGON_BOMB, e)
                }
                this.cmdTimer = 10
            }
            ReceiveSkillData(e) {
                this.cmdTimer = 0;
                let t = e.small_bomb_times_cnt,
                    i = e.big_bomb_times_cnt;
                if (this.current_bomb >= t + i) return void cc.error("RedDragonSkill \u5c01\u5305\u932f\u4e82");
                this.current_bomb < t + i - 1 && (cc.error("RedDragonSkill \u6f0f\u5c01\u5305"), this.current_bomb = t + i - 1), this.dieFishList.length = 0, this.winList.length = 0, this.totalWin = e.total_win, this.bigBombTimes = e.big_bomb_times_target, this.smallBombTimes = e.small_bomb_times_target, this.isContinue = e.continue;
                const n = e.win;
                if (this.currentWin += n, e.fish) {
                    const t = e.fish;
                    for (let e = 0; e < t.length; e++) {
                        const i = m.default.Instance.GetFishByID("" + t[e]);
                        this.dieFishList.push(i)
                    }
                    const i = e.odds;
                    for (let e = 0; e < i.length; e++) this.winList.push(this.playerBet * i[e])
                }
                this.current_bomb > this.smallBombTimes && l.GameLogMainPlayer.pushWinning(this.fish_id, e.bet, e.seat, e.win, !0), this.NextExplosion()
            }
            NextExplosion() {
                return s(this, void 0, void 0, function*() {
                    let e = null;
                    if (this.current_bomb < this.smallBombTimes) {
                        if (this.current_bomb < 8) {
                            let e = this.current_bomb % 4;
                            this.spine_list[e].node.active = !0, this.spine_list[e].setAnimation(0, "ATTACK_A", !1), c.default.Instance.Play("RedDragon_BreatheFire")
                        } else {
                            e = this.index_pair[this.current_bomb % 2];
                            for (let t = 0; t < e.length; t++) this.spine_list[e[t]].node.active = !0, this.spine_list[e[t]].setAnimation(0, "ATTACK_A", !1);
                            c.default.Instance.Play("RedDragon_BreatheFire")
                        }
                        this.spineEventStep = 1, this.current_bomb++, yield this.delay(3500), this.SendBombRange()
                    } else if (this.current_bomb == this.smallBombTimes) {
                        e = this.index_pair[2];
                        for (let t = 0; t < e.length; t++) this.spine_list[e[t]].node.active = !0, this.spine_list[e[t]].setAnimation(0, "ATTACK_A", !1);
                        c.default.Instance.Play("RedDragon_BreatheFire"), this.spineEventStep = 1, this.current_bomb++, yield this.delay(3500), this.SendBombRange()
                    } else {
                        e = this.index_pair[3];
                        for (let t = 0; t < e.length; t++) this.spine_list[e[t]].node.active = !0, this.spine_list[e[t]].setAnimation(0, "ATTACK_B", !1);
                        c.default.Instance.Play("RedDragon_FinalAttack"), this.spineEventStep = 2, this.current_bomb++, yield this.delay(5e3), this.SkillOver()
                    }
                })
            }
            spineEventListener(e, t, i) {
                return s(this, void 0, void 0, function*() {
                    if (i) switch (i.data.name) {
                        case "stanby":
                            break;
                        case "fiire_spurt":
                            if (this.lightBall[e].node.active = !0, this.lightBall[e].play(), this.lighting[e].node.active = !0, this.lighting[e].play(), 1 == this.spineEventStep) {
                                this.spineEventStep = 0, this.DragonBallHit(), c.default.Instance.Play("RedDragon_DragonBall_Scale"), this.CameraShakeEffect(.5, 4);
                                let e = {};
                                e.CoinEndPos = cc.Vec2.ZERO, e.AllTypeNormal = !0;
                                let t = 1e3 * this.KillFishesAndShowAward(e);
                                t += (new Date).getTime(), this.fishAwardTime = this.fishAwardTime < t ? t : this.fishAwardTime, this.CountScore()
                            }
                            break;
                        case "fire_end":
                            this.lightBall[e].stop(), this.lightBall[e].node.active = !1, this.lighting[e].stop(), this.lighting[e].node.active = !1;
                            break;
                        case "Hit_1":
                            2 == this.spineEventStep && (this.spineEventStep = 1, this.DragonBallHit(), c.default.Instance.Play("RedDragon_DragonBall_Scale"), this.finalFire.forEach(e => {
                                e.resetSystem()
                            }), c.default.Instance.Play("RedDragon_FinalAttack_Explode"), c.default.Instance.Fade(this.bgmID, 1, 0), this.bgmID = c.default.Instance.Play("RedDragon_EndBGM", 1, !1), c.default.Instance.Fade(this.bgmID, 0, 1));
                            break;
                        case "Hit_2":
                            if (1 == this.spineEventStep) {
                                this.spineEventStep = 0, c.default.Instance.Play("TD_Explode"), this.DragonBallHit(), this.CameraShakeEffect(1, 6);
                                let e = {};
                                e.CoinEndPos = cc.Vec2.ZERO, e.AllTypeNormal = !0;
                                let t = 1e3 * this.KillFishesAndShowAward(e);
                                t += (new Date).getTime(), this.fishAwardTime = this.fishAwardTime < t ? t : this.fishAwardTime, this.CountScore()
                            }
                    }
                })
            }
            DragonBallHit() {
                this.number_label.string = this.current_bomb.toString(), cc.tween(this.number_label.node.parent).to(.2, {
                    scale: 1.3
                }).to(.65, {
                    scale: 1
                }).start(), this.totem.playAdditive("TotemHit")
            }
            CountScore() {
                cc.tween(this.score_label.node.parent).delay(2.5).call(() => {
                    let e = this.currentWin,
                        t = (e - this.showingScore) / (.5 / .03);
                    cc.tween(this.node).repeat(.5 / .03, cc.tween(this.node).call(() => {
                        this.showingScore += t, this.score_label.string = u.default.NumberformatBet(this.showingScore, this.playerBet)
                    }).delay(.03)).call(() => {
                        this.showingScore = e, this.score_label.string = u.default.NumberformatBet(this.showingScore, this.playerBet)
                    }).start()
                }).to(.2, {
                    scale: 1.2
                }).to(.65, {
                    scale: 1
                }).start()
            }
            SkillOver() {
                return s(this, void 0, void 0, function*() {
                    if (m.default.Instance.getUniqueFishData(h.FishType.EternalFlamingDragon).getComponent.node.runAction(cc.fadeOut(2)), this.isMainPlayer && 0 == this.totalWin) return void o.default.Instance.CallOnError("C44", "SkillZeroWin");
                    this.isGaveAward = !0;
                    let e = (new Date).getTime();
                    this.fishAwardTime = this.fishAwardTime > e ? this.fishAwardTime - e : 0;
                    let t = 0;
                    t = a.default.isReverse ? this.playerSeat > 1 ? 220 : -170 : this.playerSeat > 1 ? -220 : 170, o.default.SkillSystem.FindSkill(S.skillEnum.GoldenSlot, this.playerSeat) && (t += this.playerSeat > 1 ? -150 : 150);
                    let i = p.PlayerManager.MainSeat > 1 ? -1 : 1,
                        n = f.default.WeaponUIPosition(this.playerSeat).add(new cc.Vec2(0, t)).scale(new cc.Vec2(i, i));
                    cc.tween(this.node).delay(2).call(() => {
                        this.node.setParent(this.isMainPlayer ? d.default.Instance.Effects_own : d.default.Instance.Effects)
                    }).to(1.5, {
                        position: cc.v3(n)
                    }).call(() => {
                        this.PlayAwardSound()
                    }).delay(1.5).to(.5, {
                        opacity: 0
                    }).call(() => {
                        this.CreateSkillTitle(), this.ShowSkillScore(this.totalWin)
                    }).delay(4).call(() => {
                        if (this.isMainPlayer) {
                            const e = d.default.SpawnEffect("EternalDragonReward", this.isMainPlayer);
                            e && (e.angle = a.default.isReverse ? 180 : 0, e.getComponent(g.default).Init(this.totalWin), c.default.Instance.Play("RedDragon_Result"))
                        }
                        this.UnUseSkill()
                    }).start()
                })
            }
        };
        n([_(cc.Label)], C.prototype, "number_label", void 0), n([_(cc.Label)], C.prototype, "score_label", void 0), n([_(cc.Animation)], C.prototype, "totem", void 0), n([_(cc.Node)], C.prototype, "spine_node", void 0), n([_(cc.Node)], C.prototype, "lightBall_node", void 0), n([_(cc.Node)], C.prototype, "lighting_node", void 0), n([_(cc.Node)], C.prototype, "finalFire_node", void 0), C = n([y], C), i.default = C, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../../GameClient": "GameClient",
        "../../GameClient/Player": "Player",
        "../../System/SkillSystem": "SkillSystem",
        "../Common/AudioManager": "AudioManager",
        "../Common/EnumFilter": "EnumFilter",
        "../Common/ResourceManager": "ResourceManager",
        "../Common/Utility": "Utility",
        "../Fish/FishManager": "FishManager",
        "../Player/PlayerManager": "PlayerManager",
        "../Weapon/WeaponManager": "WeaponManager",
        "./BaseSkill": "BaseSkill",
        "./EternalDragonReward": "EternalDragonReward"
    }],
    SkillFlameStorm: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "3e0147sPwtCsIYNVPI8Jczi", "SkillFlameStorm");
        var n = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            s = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("./BaseSkill"),
            o = e("../Player/PlayerManager"),
            l = e("../Common/ResourceManager"),
            r = e("../Fish/FishManager"),
            c = e("../Weapon/WeaponManager"),
            h = e("../Common/AudioManager"),
            d = e("../Common/Utility"),
            u = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            m = e("../../System/SkillSystem"),
            {
                ccclass: p,
                property: f
            } = cc._decorator;
        let S = class extends a.default {
            constructor() {
                super(...arguments), this.titleEffect = null, this.explanationAnim = null, this.award_light = null, this.ScoreUIName = "ScoreUI_FlameStrom", this.SkillScoreUI = null, this.weapon = null, this.isShootState = !1, this.hintTimer = 0, this.currentMulti = 1, this.fishAwardTime = 0
            }
            onLoad() {
                this.skillType = a.skillEnum.FlameStorm, this.limitTime = 180
            }
            update(e) {
                super.update(e), this.isShootState && (this.duration > 0 && (this.duration -= e), this.StartPlayHimtSound(e), this.duration < 0 && (this.duration = 0, this.isShootState = !1, this.weapon.isGunReady = !1, this.ShowAwardFunction(), h.default.Instance.Play("a010")), this.SkillScoreUI && this.SkillScoreUI.SetTimeText(this.duration))
            }
            InitProperties(e = null) {
                super.InitProperties(), o.PlayerManager.isMainSeat(this.playerSeat) && o.PlayerManager.BulletSync(1), this.currentMulti = 1, this.node.angle = 0, this.titleEffect.node.active = !0, this.titleEffect.resume(), this.explanationAnim.node.active = !1, this.explanationAnim.node.angle = this.playerSeat < 2 ? 0 : 180, this.award_light.active = !1, this.playerBet = e[9], this.duration = Math.floor(e[15]), this.hintTimer = 0
            }
            UseSkill() {
                this.isShootState || this.OnUseSkill()
            }
            OnUseSkill() {
                return s(this, void 0, void 0, function*() {
                    this.weapon = c.default.Instance.GetSkillWeapon(this.playerSeat, c.WeaponType.FlameStorm), this.titleEffect.play("FlameStorm_TitleAnim"), h.default.Instance.Play("storm_title2");
                    let e = c.default.WeaponPosition(this.playerSeat);
                    this.node.runAction(cc.spawn(cc.repeat(cc.rotateBy(1, 90), 100), cc.sequence(cc.delayTime(3), cc.callFunc(() => {
                        h.default.Instance.Play("storm_addgun")
                    }), cc.moveTo(1, e), cc.delayTime(.25), cc.callFunc(() => {
                        this.titleEffect.stop(), this.InitFlameStorm(), this.titleEffect.node.active = !1, this.node.stopAllActions()
                    }))))
                })
            }
            UnUseSkill() {
                this.isShootState = !1, c.default.Instance.ReturnToBaseWeapon(this.playerSeat), this.explanationAnim && this.explanationAnim.stop(), super.UnUseSkill()
            }
            ReceiveSkillData(e, t) {
                switch (t) {
                    case m.SKILL_CMD_NAME.FLAMES_TORM_SHOOT:
                        const i = e[1],
                            n = cc.v2(e[4], e[5]);
                        this.onShoot(i, n);
                        break;
                    case m.SKILL_CMD_NAME.FLAMES_TORM_CHECK:
                        let s = e[9],
                            a = e[15];
                        this.onCheckSkill(s, a);
                        break;
                    case m.SKILL_CMD_NAME.FLAMES_TORM_HIT:
                        const l = e[2];
                        if (o.PlayerManager.isMainSeat(l)) {
                            const t = e[3];
                            o.PlayerManager.BulletSync(null, t)
                        }
                        const r = e[8],
                            c = e[13],
                            h = e[15];
                        this.onHit(r, c, h);
                        break;
                    case m.SKILL_CMD_NAME.FLAMES_TORM_END:
                        const d = e.seat;
                        if (o.PlayerManager.isMainSeat(d)) {
                            const t = e.credits;
                            o.PlayerManager.BulletSync(null, t)
                        }
                        this.totalWin = e.total_win
                }
            }
            onCheckSkill(e, t) {
                this.playerBet = e, this.duration = Math.floor(t), this.hintTimer = 0, this.isShootState || this.OnUseSkill()
            }
            StartPlayHimtSound(e) {
                this.hintTimer += e, this.hintTimer >= 1 && (this.hintTimer = 0, h.default.Instance.Play("a008"), 10 != Math.floor(this.duration) && 5 != Math.floor(this.duration) || h.default.Instance.Play("hurryup"))
            }
            onShoot(e, t) {
                r.default.Instance.currect_fps < 20 || c.default.Instance.bulletCount[this.playerSeat] >= c.default.Instance.bulletLimit || (c.default.Instance.CreateBullet(this.playerSeat, t), c.default.Instance.getWeapon(this.playerSeat).ShootFunction(t))
            }
            onHit(e, t, i) {
                const n = Object.keys(e);
                let s = cc.Vec2.ZERO;
                n.forEach(t => {
                    const i = e[t].coin;
                    let n = r.default.Instance.GetFishByID(t.toString());
                    n && (s = n.node.getPosition(), r.default.Instance.KillFish(this.playerSeat, n, i, this.playerBet, !1, !0, e => {
                        let t = e + (new Date).getTime();
                        this.fishAwardTime = this.fishAwardTime < t ? t : this.fishAwardTime
                    }), this.currentWin += i, this.SetScoreUICount(this.currentWin))
                }), Object.keys(t).forEach(e => {
                    this.create_item(e, s, t[e])
                })
            }
            create_item(e, t, i) {
                const n = this.playerSeat > 1 ? new cc.Vec2(-100, -50) : new cc.Vec2(60, 50),
                    s = c.default.WeaponPosition(this.playerSeat).add(n);
                h.default.Instance.Play("storm_add");
                for (let a = 0; a < i; a++) {
                    const i = 100 * Math.random() - 50,
                        n = 100 * Math.random() - 50;
                    t.add(new cc.Vec2(i, n));
                    let a = "";
                    if ("13001" == e ? a = "FlameStorm_TimeItem" : "13002" == e && (a = "FlameStorm_MultiItem"), a) {
                        let t = l.default.SpawnEffect(a, this.isMainPlayer);
                        t.runAction(cc.sequence(cc.delayTime(.7), cc.moveTo(.5, s).easing(cc.easeSineOut()), cc.callFunc(() => {
                            "13001" == e ? this.AddTime() : "13002" == e && this.AddMulti(), h.default.Instance.Play("add_get"), l.default.DespawnEffect(a, t)
                        })))
                    }
                }
            }
            AddTime() {
                this.isShootState && (this.duration++, this.SkillScoreUI && this.SkillScoreUI.SetTimeText(this.duration))
            }
            AddMulti() {
                this.currentMulti++, this.SkillScoreUI && this.SkillScoreUI.SetMultiText(this.currentMulti)
            }
            ShowAwardFunction() {
                return s(this, void 0, void 0, function*() {
                    let e = (new Date).getTime();
                    this.fishAwardTime = this.fishAwardTime > e ? this.fishAwardTime - e : 0, yield this.delay(1e3 * this.fishAwardTime), this.award_light.active = !0, this.award_light.opacity = 255, 0 == this.totalWin && (yield this.delay(2e3)), this.SkillTitle || (this.ShowSkillScore(), this.PlayAwardSound(), yield this.delay(6e3), this.award_light.runAction(cc.fadeOut(.5)), yield this.delay(500), this.UnUseSkill())
                })
            }
            ShowSkillScore() {
                let e = l.default.SpawnEffect("GN", this.isMainPlayer);
                e && (e.setScale(1), e.angle = u.default.isReverse ? 180 : 0, e.setPosition(this.node.getPosition().add(cc.v2(0, this.playerSeat > 1 ? -100 : 100))));
                let t = e.getComponentInChildren(cc.Label),
                    i = 0,
                    n = (this.totalWin - i) / 40;
                e.runAction(cc.sequence(cc.repeat(cc.sequence(cc.callFunc(() => {
                    i += n, t.string = d.default.NumberformatBet(i, this.playerBet)
                }), cc.delayTime(.05)), 40), cc.delayTime(4), cc.callFunc(() => {
                    this.HideSkillScoreUI()
                }), cc.fadeOut(.5), cc.callFunc(() => {
                    e.opacity = 255, l.default.DespawnEffect("GN", e)
                })))
            }
            InitFlameStorm() {
                return s(this, void 0, void 0, function*() {
                    this.node.angle = u.default.isReverse ? 180 : 0, this.explanationAnim && (this.explanationAnim.node.active = !0, this.explanationAnim.play("FlameStorm_ExplanationShowUp"), h.default.Instance.Play("storm_title")), this.weapon.ChangeGunAnim(), this.CreateScoreUI();
                    let e = l.default.SpawnEffect("FlameStorm_Description", this.isMainPlayer);
                    e.setPosition(this.node.getPosition().add(cc.v2(0, this.playerSeat > 1 ? -80 : 80))), e.angle = this.node.angle, h.default.Instance.Play("ready"), yield this.delay(2e3), h.default.Instance.Play("go"), this.isShootState = !0, this.weapon.isGunReady = !0
                })
            }
            CreateScoreUI() {
                super.CreateScoreUI(), this.SkillScoreUI && (this.SkillScoreUI.SetScore(this.currentWin), this.SkillScoreUI.SetMultiText(this.currentMulti), this.SkillScoreUI.SetTimeText(this.duration))
            }
        };
        n([f(cc.Animation)], S.prototype, "titleEffect", void 0), n([f(cc.Animation)], S.prototype, "explanationAnim", void 0), n([f(cc.Node)], S.prototype, "award_light", void 0), S = n([p], S), i.default = S, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../../System/SkillSystem": "SkillSystem",
        "../Common/AudioManager": "AudioManager",
        "../Common/ResourceManager": "ResourceManager",
        "../Common/Utility": "Utility",
        "../Fish/FishManager": "FishManager",
        "../Player/PlayerManager": "PlayerManager",
        "../Weapon/WeaponManager": "WeaponManager",
        "./BaseSkill": "BaseSkill"
    }],
    SkillFlash: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "ceb87jqcthK9o7Dc13FFpOD", "SkillFlash");
        var n = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            s = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("./BaseSkill"),
            o = e("../Fish/FishManager"),
            l = e("../Fish/BaseFish"),
            r = e("../Weapon/WeaponManager"),
            c = e("../Common/AudioManager"),
            h = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            {
                ccclass: d,
                property: u
            } = cc._decorator;
        let m = class extends a.default {
            constructor() {
                super(...arguments), this.CountObj = null, this.CountLabel = null, this.BlastAnim = null, this.flashFish = null, this.ShockFishIDList = null, this.ShockFishList = null, this.NowNode = null, this.NowBallSize = null, this.ShockCount = null, this.waitNextFishTime = null, this.IsContinue = null, this.IsWaiting = null, this.WAIT_NEXT_MAX_TIME = null, this.UpDateFunc = null
            }
            onLoad() {
                this.skillType = a.skillEnum.Flash, this.limitTime = 100
            }
            InitProperties(e) {
                super.InitProperties(), this.ShockFishIDList = [], this.ShockFishList = [], this.UpDateFunc = [], this.NowNode = this.node, this.IsContinue = !0, this.IsWaiting = !1, this.WAIT_NEXT_MAX_TIME = 5, this.waitNextFishTime = 0, this.ShockCount = 0, this.NowBallSize = 0, this.CountLabel.string = "0", this.CountObj.active = !1, this.CountObj.setPosition(cc.Vec2.ZERO), this.BlastAnim.node.active = !1;
                let t = e.id;
                this.playerBet = e.bet;
                let i = e.type;
                this.totalWin = o.default.Instance.fish_info[i].odds * this.playerBet, this.flashFish = o.default.Instance.GetFishByID(t.toString()), null != this.flashFish ? (this.dieFishList.push(this.flashFish), this.winList.push(this.flashFish.GetFishScore(this.playerBet)), this.flashFish.CanCollision = !1, this.flashFish.AliveStatus = l.FishState.DEAD, this.flashFish.StopAction(), o.default.Instance.RemoveFishByID(t.toString()), this.NowNode.setPosition(r.default.WeaponPosition(this.playerSeat))) : this.UnUseSkill()
            }
            UseSkill() {
                this.schedule(this.WaitingNextFish, 1), this.flashFish && this.flashFish.flashAnim && this.flashFish.flashAnim.node && (this.flashFish.flashAnim.node.active = !1), this.CreateSkillTitle(), this.ShockFish(this.flashFish, this.NowNode, !0)
            }
            UnUseSkill() {
                null != this.flashFish && (this.flashFish.RemoveSelf(), this.flashFish = null), this.flashFish = null, this.ShockFishIDList = null, this.ShockFishList = null, this.NowNode = null, this.NowBallSize = null, this.ShockCount = null, this.waitNextFishTime = null, this.IsContinue = null, this.IsWaiting = null, this.WAIT_NEXT_MAX_TIME = null, this.UpDateFunc = null, this.BlastAnim && this.BlastAnim.stop(), this.BlastAnim.node.active = !1, super.UnUseSkill()
            }
            ReceiveSkillData(e) {
                this.totalWin = e.total_win, this.IsContinue = e.continue;
                let t = e.fish_dead_dict,
                    i = Object.keys(t);
                this.IsContinue || (this.isGaveAward = !0);
                for (let n = 0; n < i.length; n++) {
                    const e = i[n];
                    let s = o.default.Instance.GetFishByID(e);
                    o.default.Instance.RemoveFishByID(e), s || (s = this.CreateFakeFish(e)) || this.ShowAward(), s.AliveStatus = l.FishState.DEAD, s.CanCollision = !1, s.StopAction(), s.node.stopAllActions(), s.node.opacity = 255, this.dieFishList.push(s), this.winList.push(t[e].coin), this.ShockFishList.push(s), this.ShockFishIDList.push(e)
                }
            }
            ShockFish(e, t, i = !1) {
                this.IsWaiting = !1, this.ShockCount++, this.IsContinue && (this.waitNextFishTime = 0), this.CreateLingtningLineEffect(t, e.node, i)
            }
            CheckNextShockFish(e) {
                if (this.NowNode = e, this.ShockFishList.length > 0) {
                    let t = this.ShockFishList.shift(),
                        i = this.ShockFishIDList.shift();
                    t || (t = this.CreateFakeFish(i)), this.ShockFish(t, e)
                } else this.IsContinue ? this.IsWaiting = !0 : this.ShowAward()
            }
            ShowAward() {
                return s(this, void 0, void 0, function*() {
                    if (this.ShockFishList.length > 0) return;
                    this.unschedule(this.WaitingNextFish), yield this.delay(200), c.default.Instance.Play("24_flashend_main"), yield this.delay(600);
                    for (let t = 0; t < this.UpDateFunc.length; t++) this.unschedule(this.UpDateFunc[t]);
                    yield this.delay(200), this.BlastAnim.node.setPosition(this.NowNode.getPosition().sub(this.node.getPosition())), this.BlastAnim.node.active = !0, this.BlastAnim.play("Blast");
                    for (let t = 0; t < this.dieFishList.length; t++) this.dieFishList[t].StopAction(), this.dieFishList[t].PlayDieAnim();
                    this.RemoveSkillEffect(), this.CountObj.parent = this.node, this.CountLabel.string = "0", this.CountObj.setPosition(cc.Vec2.ZERO), this.CountObj.active = !1;
                    let e = this.KillFishesAndShowAward();
                    yield this.delay(1e3 * e), this.ShowSkillScore(this.totalWin), this.PlayAwardSound(), yield this.delay(4e3), this.UnUseSkill()
                })
            }
            CreateLingtningLineEffect(e, t, i = !1) {
                let n = this.NowBallSize,
                    s = t.getPosition().sub(e.getPosition()),
                    a = 57.29578 * Math.atan2(s.y, s.x),
                    o = (Math.sqrt(s.x * s.x + s.y * s.y) - 125 * n) / 534,
                    d = 0,
                    u = .5,
                    m = null,
                    p = !1,
                    f = t.getChildByName("Shape"),
                    S = null == f ? .5 : (f.width > f.height ? f.width : f.height) / 280;
                o <= 0 && (o = 0), this.AddSkillEffect("Flash_LightnIngLine", e.getPosition(), -a - 90, g => {
                    c.default.Instance.Play("22_flashline_main2");
                    let y = null,
                        _ = null,
                        C = null,
                        I = [],
                        P = null;
                    null != m && this.unschedule(m), g.stopAllActions(), g.opacity = 255, (y = g.getChildByName("LightningLineImg")).setPosition(0, -125 * n), this.AddSkillEffect("Flash_LightnIngHead", e.getPosition(), g.angle, e => {
                        _ = e, C = e.getChildByName("head"), I = _.getComponentsInChildren(cc.Sprite), C.getComponent(cc.Sprite).enabled = !0;
                        for (let t = 0; t < I.length; t++) I[t].enabled = !0;
                        this.CountObj.parent = C, this.CountObj.setPosition(0, 50), this.CountObj.angle = -e.angle + (h.default.isReverse ? 180 : 0), this.CountObj.active = !0, this.CountObj.getComponent(cc.Sprite).enabled = !0
                    }), y.setScale(u, d), _.angle = g.angle, C.setPosition(0, -1 * d * 534 - 125 * n);
                    let v = 0;
                    m = m => {
                        if (v += m, s = new cc.Vec2(t.x - e.x, t.y - e.y), a = 57.29578 * Math.atan2(s.y, s.x), (o = (Math.sqrt(s.x * s.x + s.y * s.y) - 125 * S - 125 * n) / 534) <= 0 && (o = 0), g.setPosition(e.getPosition()), g.angle = a + 90, d >= o) {
                            if (d = o, !p) {
                                p = !0;
                                for (let t = 0; t < I.length; t++) I[t].enabled = !1;
                                g.runAction(cc.fadeOut(5)), this.AddSkillEffect("Flash_LightnIngBall", t.getPosition(), 0, e => {
                                    c.default.Instance.Play("22_flashline_main3"), P = e;
                                    let t = e.getChildByName("LightningBallImg");
                                    S = null == f ? .5 : (f.width > f.height ? f.width : f.height) / t.height, this.NowBallSize = S, t.stopAllActions(), t.color = cc.color(130, 255, 70, 255), t.scale = 1, t.runAction(cc.spawn(cc.scaleTo(.5, S), cc.tintTo(.5, 70, 158, 255)))
                                }), this.CountLabel.string = this.ShockCount.toString();
                                let e = cc.Vec2.ZERO;
                                e = this.playerSeat > 1 ? new cc.Vec2(0, -200) : new cc.Vec2(0, 200);
                                let i = t.getComponent(l.default);
                                null != i && this.PullFishFunction(i, r.default.WeaponPosition(this.playerSeat).add(e)), this.scheduleOnce(() => {
                                    this.CheckNextShockFish(t)
                                }, 1.2 - v)
                            }
                        } else i || p ? d = o : d += o / 15;
                        p && (u -= .1 / 30), u <= 0 && (u = 0), y.setScale(u, d), _.setPosition(e.getPosition()), _.angle = g.angle, C.setPosition(0, -1 * d * 534 - 125 * n), P && P.setPosition(t.getPosition()), this.CountObj.angle = -_.angle + (h.default.isReverse ? 180 : 0)
                    }, this.UpDateFunc.push(m), this.schedule(m, 0)
                })
            }
            PullFishFunction(e, t) {
                let i = t.sub(e.node.getPosition());
                new cc.Vec2(i.x, i.y), i.normalizeSelf();
                let n = 50 + 100 * Math.random();
                t.addSelf(i.mul(n)), e.node.runAction(cc.rotateBy(5, 360).repeatForever()), e.node.runAction(cc.sequence(cc.delayTime(.5), cc.moveTo(4, t).easing(cc.easeQuadraticActionOut())))
            }
            CreateFakeFish(e) {
                var t = Math.random(),
                    i = 0,
                    n = 0;
                return t < .25 ? (i = 590 + 50 * Math.random(), n = 340 + 50 * Math.random()) : t < .5 ? (i = 50 * Math.random() - 590, n = 50 * Math.random() - 340) : t < .75 ? (i = 590 + 50 * Math.random(), n = 50 * Math.random() - 340) : (i = 50 * Math.random() - 590, n = 340 + 50 * Math.random()), o.default.Instance.CreateFakeFish(e, 1, new cc.Vec2(i, n))
            }
            WaitingNextFish() {
                this.IsWaiting && (this.CheckNextShockFish(this.NowNode), this.waitNextFishTime++, this.waitNextFishTime >= this.WAIT_NEXT_MAX_TIME && (this.waitNextFishTime = 0, this.ShowAward()))
            }
        };
        n([u(cc.Node)], m.prototype, "CountObj", void 0), n([u(cc.Label)], m.prototype, "CountLabel", void 0), n([u(cc.Animation)], m.prototype, "BlastAnim", void 0), m = n([d], m), i.default = m, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../Common/AudioManager": "AudioManager",
        "../Fish/BaseFish": "BaseFish",
        "../Fish/FishManager": "FishManager",
        "../Weapon/WeaponManager": "WeaponManager",
        "./BaseSkill": "BaseSkill"
    }],
    SkillHammer: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "18fe3FyTcpI4JaMslTTWh/q", "SkillHammer");
        var n = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            s = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("./BaseSkill"),
            o = e("../Fish/BaseFish"),
            l = e("../Fish/FishManager"),
            r = e("../Common/AudioManager"),
            c = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            {
                ccclass: h,
                property: d
            } = cc._decorator;
        let u = class extends a.default {
            constructor() {
                super(...arguments), this.hammer = null, this.hammer_effect = null, this.explode = null, this.particle = null, this.fishID = null, this.hammerStandbySound = -1
            }
            InitProperties(e = null) {
                super.InitProperties(), this.node.setPosition(cc.Vec2.ZERO), this.node.angle = c.default.isReverse ? 180 : 0, this.hammer.node.active = !1, this.hammer_effect.node.active = !1, this.fishID = e.id, this.playerBet = e.bet, this.particle.node.active = !1
            }
            UseSkill() {
                return s(this, void 0, void 0, function*() {
                    let e = l.default.Instance.GetFishByID(this.fishID.toString()),
                        t = -1;
                    e && (e.AliveStatus = o.FishState.DEAD, e.CanCollision = !1, e.StopAction(), e.node.runAction(cc.repeat(cc.rotateBy(1, 360), 2)), t = r.default.Instance.Play("smash_turn_01"), this.scheduleOnce(() => {
                        e.RemoveSelf(), r.default.Instance.Stop(t)
                    }, 1.5)), yield this.delay(1e3), this.CreateSkillTitle(), this.createHammer()
                })
            }
            UnUseSkill() {
                this.hammer.stop(), this.hammer_effect.stop(), this.explode.stop(), this.particle.node.active = !1, this.hammerStandbySound > 0 && r.default.Instance.Stop(this.hammerStandbySound), super.UnUseSkill()
            }
            ReceiveSkillData(e = null) {
                this.totalWin = e.total_win;
                const t = e.fish_dead_dict,
                    i = Object.keys(t);
                for (let n = 0; n < i.length; n++) {
                    const e = i[n],
                        s = l.default.Instance.GetFishByID(e);
                    s && (this.dieFishList.push(s), this.winList.push(t[e].coin))
                }
            }
            createHammer() {
                let e = 0;
                this.hammer.node.active = !0, this.node.runAction(cc.sequence(cc.spawn(cc.moveTo(.5, this.hammer_effect.node.getPosition()), cc.callFunc(() => {
                    this.hammer.play("hammer_reset"), this.hammerStandbySound = r.default.Instance.SetNextSound(r.default.Instance.Play("smash_standby_01"), "smash_standby_02", 1, !0)
                })), cc.delayTime(.35), cc.callFunc(() => {
                    this.hammer.play("hammer_idle"), this.hammer_effect.node.active = !0, this.hammer_effect.play("thunder_effect_normal")
                }), cc.delayTime(3.5), cc.callFunc(() => {
                    this.hammer.play("hammer_attack"), r.default.Instance.Stop(this.hammerStandbySound), r.default.Instance.SetNextSound(r.default.Instance.Play("smash_attack_01"), "smash_wave_01")
                }), cc.delayTime(2.1), cc.callFunc(() => {
                    this.CameraShakeEffect(2, 4), this.explode.stop(), this.explode.play("background_explode"), this.particle.resetSystem(), this.particle.node.active = !0, e = this.KillFishesAndShowAward(), r.default.Instance.Play("bomb_ex03")
                }), cc.delayTime(2), cc.callFunc(() => {
                    this.hammer.node.active = !1, this.particle.stopSystem(), this.CameraShakeEffect(4, 2), this.node.runAction(cc.sequence(cc.delayTime(e - 2 > 0 ? e - 2 : 0), cc.callFunc(() => {
                        this.ShowSkillScore(this.totalWin), this.PlayAwardSound()
                    }), cc.delayTime(4), cc.callFunc(() => {
                        this.UnUseSkill()
                    })))
                })))
            }
        };
        n([d(cc.Animation)], u.prototype, "hammer", void 0), n([d(cc.Animation)], u.prototype, "hammer_effect", void 0), n([d(cc.Animation)], u.prototype, "explode", void 0), n([d(cc.ParticleSystem)], u.prototype, "particle", void 0), u = n([h], u), i.default = u, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../Common/AudioManager": "AudioManager",
        "../Fish/BaseFish": "BaseFish",
        "../Fish/FishManager": "FishManager",
        "./BaseSkill": "BaseSkill"
    }],
    SkillKingAngler: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "b7138XYCq1FD7oiSPvTJ1DQ", "SkillKingAngler");
        var n = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            s = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            o = e("../../GameClient"),
            l = e("../../System/SkillSystem"),
            r = e("../Common/AudioManager"),
            c = e("../Fish/FishManager"),
            h = e("./BaseSkill"),
            {
                ccclass: d,
                property: u
            } = cc._decorator;
        let m = class extends h.default {
            constructor() {
                super(...arguments), this.Vortex = null, this.Totem = null, this.Explosion = null, this.Bullets = [], this.CountObj = null, this.label_number = null, this.kingAnglerFish = null, this.isContinue = !0, this.currentBombNumber = 1, this.fishID = null, this.ScoreUIName = "ScoreUI_Awake", this.fishAwardTime = 0
            }
            onLoad() {
                this.skillType = h.skillEnum.AwakenKingAnglerFish, this.limitTime = 120
            }
            update(e) {
                super.update(e), this.forceTimer > 0 && (this.forceTimer -= e, this.forceTimer <= 0 && (this.SetExplodeEndData(), this.forceTimer = 0))
            }
            InitProperties(e = null) {
                super.InitProperties(), this.playerBet = e.bet, this.isContinue = !0, this.currentBombNumber = 1, this.label_number.string = "1", this.forceTime = 7.5, this.node.setPosition(cc.Vec2.ZERO), this.fishID = e.bomb_fish_id
            }
            UseSkill() {
                return s(this, void 0, void 0, function*() {
                    this.kingAnglerFish = c.default.Instance.GetFishByID(this.fishID.toString()), this.kingAnglerFish && this.kingAnglerFish.FishDie(this.playerSeat), yield this.delay(3e3), this.CreateSkillTitle(), this.CreateScoreUI(), this.Vortex.opacity = 255, this.Vortex.scale = .5, this.Vortex.active = !0, this.Vortex.runAction(cc.scaleTo(.5, 4.03)), this.Totem.opacity = 255, this.Totem.setPosition(new cc.Vec2(-820, 10)), this.Totem.active = !0, this.Totem.runAction(cc.moveTo(1, new cc.Vec2(0, 10))), r.default.Instance.Play("41_catch_bigfish");
                    let e = a.default.isReverse ? -80 : 90;
                    if (this.CountObj.setPosition(new cc.Vec2(-820, e)), this.CountObj.angle = a.default.isReverse ? 180 : 0, this.CountObj.opacity = 255, this.CountObj.active = !0, this.CountObj.runAction(cc.moveTo(1, new cc.Vec2(0, e))), yield this.delay(500), r.default.Instance.Fade(r.default.Instance.GetBGMID(), 1, 0), this.bgmID = r.default.Instance.Play("BOSS_out01", 1, !0), r.default.Instance.Fade(this.bgmID, 0, 1), yield this.delay(1e3), this.isMainPlayer) {
                        let e = c.default.Instance.GetRangeAttackableID(this.node.getPosition(), 1e3, 100);
                        o.default.SkillSystem.SendRangeFish(l.SKILL_CMD_NAME.KING_ANGLER_BOMB, e)
                    }
                    this.forceTimer = this.forceTime
                })
            }
            UnUseSkill() {
                this.Vortex.active = !1, this.Totem.active = !1, this.CountObj.active = !1, this.Explosion.stop(), this.Explosion.node.active = !1;
                for (let e = 1; e < this.Bullets.length; e++) this.Bullets[e].stop(), this.Bullets[e].node.active = !1;
                super.UnUseSkill()
            }
            ReceiveSkillData(e) {
                this.dieFishList.length = 0, this.winList.length = 0;
                const t = e.fish;
                this.oddsList = e.odds;
                for (let i = 0; i < t.length; i++) this.dieFishList.push(c.default.Instance.GetFishByID(t[i])), this.winList.push(this.oddsList[i] * this.playerBet);
                this.isContinue = e.continue, this.totalWin = e.total_win, this.isContinue || (this.isGaveAward = !0), this.ShowExplode()
            }
            SetExplodeEndData() {
                this.isGaveAward = !0, this.isForceShowAward = !0, this.isContinue = !1, this.ShowExplode()
            }
            ShowExplode() {
                return s(this, void 0, void 0, function*() {
                    this.forceTimer = 0, yield this.delay(1e3), this.Explosion.node.active = !0, this.Explosion.play("Explosion"), yield this.delay(1166), this.Bullets[0].node.active = !0, this.Bullets[0].play("Shoot");
                    for (let i = 1; i < this.Bullets.length; i++) this.scheduleOnce(() => {
                        this.Bullets[i].node.active = !0, this.Bullets[i].play("Shoot")
                    }, .7 * Math.random());
                    yield this.delay(1500);
                    let e = Math.random() >= .5 ? "bomb_ex01" : "bomb_ex02";
                    r.default.Instance.Play(e), this.CameraShakeEffect(2, 3), this.isContinue && (this.currentBombNumber++, this.label_number.string = this.currentBombNumber.toString()), this.CountObj.scale = 1.5, this.CountObj.runAction(cc.scaleTo(.5, 1));
                    let t = 1e3 * this.KillFishesAndShowAward();
                    if (t += (new Date).getTime(), this.fishAwardTime = this.fishAwardTime < t ? t : this.fishAwardTime, this.currentWin = this.totalWin, this.SetScoreUICount(this.currentWin), !this.isContinue) {
                        r.default.Instance.Stop(this.bgmID), this.bgmID = null, r.default.Instance.Play("BOSS_out02"), r.default.Instance.Fade(r.default.Instance.GetBGMID(), 0, 1);
                        let e = (new Date).getTime();
                        return this.fishAwardTime = this.fishAwardTime > e ? this.fishAwardTime - e : 0, yield this.delay(this.fishAwardTime < 5e3 ? 5e3 : this.fishAwardTime), this.Vortex.runAction(cc.fadeOut(.5)), this.Totem.runAction(cc.fadeOut(.5)), this.CountObj.runAction(cc.fadeOut(.5)), this.HideSkillScoreUI(), this.ShowSkillScore(this.totalWin), this.PlayAwardSound(), yield this.delay(4e3), void this.UnUseSkill()
                    }
                    yield this.delay(3e3), this.Explosion.node.active = !1;
                    for (let i = 1; i < this.Bullets.length; i++) this.Bullets[i].node.active = !1;
                    if (this.isMainPlayer) {
                        let e = c.default.Instance.GetRangeAttackableID(this.node.getPosition(), 1e3, 100);
                        o.default.SkillSystem.SendRangeFish(l.SKILL_CMD_NAME.KING_ANGLER_BOMB, e)
                    }
                    this.forceTimer = this.forceTime
                })
            }
        };
        n([u(cc.Node)], m.prototype, "Vortex", void 0), n([u(cc.Node)], m.prototype, "Totem", void 0), n([u(cc.Animation)], m.prototype, "Explosion", void 0), n([u(cc.Animation)], m.prototype, "Bullets", void 0), n([u(cc.Node)], m.prototype, "CountObj", void 0), n([u(cc.Label)], m.prototype, "label_number", void 0), m = n([d], m), i.default = m, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../../GameClient": "GameClient",
        "../../System/SkillSystem": "SkillSystem",
        "../Common/AudioManager": "AudioManager",
        "../Fish/FishManager": "FishManager",
        "./BaseSkill": "BaseSkill"
    }],
    SkillKingCrab: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "db4edeBq8VCFJgmuRTSIICu", "SkillKingCrab");
        var n = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            s = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            o = e("../Common/AudioManager"),
            l = e("../Common/ResourceManager"),
            r = e("../Fish/FishManager"),
            c = e("../Player/PlayerManager"),
            h = e("../Weapon/WeaponManager"),
            d = e("./BaseSkill"),
            {
                ccclass: u,
                property: m
            } = cc._decorator;
        var p;
        (function(e) {
            e[e.None = 0] = "None", e[e.Explosion = 1] = "Explosion", e[e.ShowScore = 2] = "ShowScore"
        })(p || (p = {}));
        let f = class extends d.default {
            constructor() {
                super(...arguments), this.explosion_anim = null, this.burst_anim = null, this.number_anim = null, this.number_label = null, this.totem_node = null, this.crab01_Anim = null, this.crab02_Anim = null, this.multi_index = 0, this.id = "", this.kingCrab = null, this.swimTime = .8, this.delayTime = 1e3 * (this.swimTime + 1.07), this.multi_list = [], this.SkillState = p.None, this.isGetKillFish = !1, this.Timer = 0
            }
            onLoad() {
                this.skillType = d.skillEnum.AwakenKingSpiderCrab, this.limitTime = 100
            }
            update(e) {
                this.ChackExplodeData(e)
            }
            InitProperties(e = null) {
                super.InitProperties(), this.multi_index = 0, this.totem_node.active = !1, this.explosion_anim.node.active = !1, this.burst_anim.node.active = !1, this.number_anim.node.active = !1, this.number_anim.node.setPosition(cc.Vec2.ZERO), this.number_anim.node.angle = 0, this.crab01_Anim.node.setPosition(new cc.Vec2(900, 0)), this.crab02_Anim.node.setPosition(new cc.Vec2(-900, 0)), this.crab01_Anim.node.active = !1, this.crab02_Anim.node.active = !1, this.id = "", this.playerBet = 0, this.Timer = 0, this.isGetKillFish = !1, this.SkillState = p.None, this.id = e.id, this.playerBet = e.bet, this.multi_list = e.multi
            }
            UseSkill() {
                this.kingCrab = r.default.Instance.GetFishByID(this.id), this.kingCrab ? this.SkillProcess(this.kingCrab.node.getPosition(), this.playerSeat) : cc.warn("[InitInfo] Crab is Null!")
            }
            UnUseSkill() {
                super.UnUseSkill(), this.number_anim.node.parent = this.node, this.number_anim.node.setPosition(cc.Vec2.ZERO), this.kingCrab = null, this.crab01_Anim.node.stopAllActions(), this.crab01_Anim.node.setPosition(new cc.Vec2(900, 0)), this.crab02_Anim.node.stopAllActions(), this.crab02_Anim.node.setPosition(new cc.Vec2(-900, 0)), this.explosion_anim.stop(), this.burst_anim.stop(), this.number_anim.stop(), this.crab01_Anim.stop(), this.crab02_Anim.stop()
            }
            ReceiveSkillData(e) {
                if (this.id != e.id) return void cc.warn("[InitExplosion] ID isn't current!");
                this.totalWin = e.total_win;
                const t = e.fish_dead_dict,
                    i = Object.keys(t);
                for (let n = 0; n < i.length; n++) {
                    const e = i[n],
                        s = r.default.Instance.GetFishByID(e);
                    s && (this.dieFishList.push(s), this.winList.push(t[e].coin))
                }
                this.isGetKillFish = !0
            }
            SkillProcess(e, t) {
                let i;
                this.kingCrab && this.kingCrab.FishDie(t), this.node.setPosition(e), this.node.angle = a.default.isReverse ? 180 : 0, this.node.runAction(cc.sequence(cc.fadeOut(.1), cc.delayTime(2), cc.callFunc(() => {
                    (i = l.default.SpawnEffect("7")).setPosition(this.node.getPosition()), i.scale = 2
                }), cc.fadeIn(1), cc.callFunc(() => {
                    this.totem_node.active = !0, this.CreateSkillTitle()
                }), cc.moveTo(2, cc.v2(0, 0)), cc.delayTime(1), cc.callFunc(() => {
                    this.crab01_Anim.node.active = !0, this.crab02_Anim.node.active = !0, this.explosion_anim.node.active = !0, o.default.Instance.Fade(o.default.Instance.GetBGMID(), 1, 0), this.bgmID = o.default.Instance.Play("BOSS_out01", 1, !0), o.default.Instance.Fade(this.bgmID, 0, 1)
                }), cc.callFunc(() => {
                    o.default.Instance.Play("jump_01"), this.number_anim.node.active = !0, this.number_anim.node.runAction(cc.sequence(cc.callFunc(() => {
                        this.multi_index++, this.number_label.string = "x" + this.multi_list[this.multi_index]
                    }), cc.scaleTo(0, 2), cc.scaleTo(1, 1))), this.totem_node.runAction(cc.sequence(cc.scaleTo(0, 2.5), cc.scaleTo(1, 1.3)))
                }), cc.delayTime(1), cc.callFunc(() => {
                    this.CrabAttackShow(t)
                })))
            }
            CrabAttackShow(e) {
                return s(this, void 0, void 0, function*() {
                    let e = cc.sequence(cc.callFunc(() => {
                            this.crab01_Anim.play("Skill_Swim")
                        }), cc.moveTo(this.swimTime, cc.v2(310, 0)), cc.callFunc(() => {
                            this.crab01_Anim.play("Skill_Attack01")
                        }), cc.delayTime(.7), cc.callFunc(() => {
                            this.TotemHurtShow(this.multi_list, 2)
                        }), cc.delayTime(.37), cc.callFunc(() => {
                            this.crab01_Anim.play("Skill_Swim")
                        }), cc.moveTo(this.swimTime, cc.v2(900, 0))),
                        t = cc.sequence(cc.callFunc(() => {
                            this.crab02_Anim.play("Skill_Swim")
                        }), cc.moveTo(this.swimTime, cc.v2(-310, 0)), cc.callFunc(() => {
                            this.crab02_Anim.play("Skill_Attack01")
                        }), cc.delayTime(.7), cc.callFunc(() => {
                            this.TotemHurtShow(this.multi_list, 2)
                        }), cc.delayTime(.37), cc.callFunc(() => {
                            this.crab02_Anim.play("Skill_Swim")
                        }), cc.moveTo(this.swimTime, cc.v2(-900, 0)));
                    this.crab01_Anim.node.runAction(e), yield this.delay(this.delayTime), this.crab02_Anim.node.runAction(t), yield this.delay(this.delayTime), this.crab01_Anim.node.runAction(e), yield this.delay(this.delayTime), this.crab02_Anim.node.runAction(cc.sequence(cc.callFunc(() => {
                        this.crab02_Anim.play("Skill_Swim")
                    }), cc.moveTo(this.swimTime, cc.v2(-310, 0)), cc.callFunc(() => {
                        this.crab02_Anim.play("Skill_Attack01")
                    }), cc.delayTime(.7), cc.callFunc(() => {
                        this.TotemHurtShow(this.multi_list, 2)
                    }), cc.delayTime(.37), cc.callFunc(() => {
                        this.crab02_Anim.play("Skill_Swim")
                    }))), yield this.delay(940), this.crab01_Anim.node.runAction(cc.sequence(cc.callFunc(() => {
                        this.crab01_Anim.play("Skill_Swim")
                    }), cc.moveTo(1.07, cc.v2(310, 0)), cc.callFunc(() => {
                        this.SkillState = p.Explosion
                    })))
                })
            }
            ExplodeShow() {
                return s(this, void 0, void 0, function*() {
                    let e = 0;
                    this.crab01_Anim.node.runAction(cc.sequence(cc.callFunc(() => {
                        this.crab01_Anim.play("Skill_Attack01")
                    }), cc.delayTime(.7), cc.callFunc(() => {
                        this.TotemHurtShow(this.multi_list, 1, !0), this.number_anim.play("Number"), this.totem_node.active = !1, e = this.KillFishesAndShowAward()
                    }), cc.delayTime(.37), cc.callFunc(() => {
                        this.crab01_Anim.play("Skill_Swim")
                    }), cc.moveTo(this.swimTime, cc.v2(900, 0)))), this.crab02_Anim.node.runAction(cc.sequence(cc.callFunc(() => {
                        this.crab02_Anim.play("Skill_Attack01")
                    }), cc.delayTime(1.07), cc.callFunc(() => {
                        this.crab02_Anim.play("Skill_Swim")
                    }), cc.moveTo(this.swimTime, cc.v2(-900, 0)))), e < 1 && (e = 1), yield this.delay(1e3 * e), this.ShowScore()
                })
            }
            ShowScore() {
                return s(this, void 0, void 0, function*() {
                    let e = 0;
                    e = a.default.isReverse ? this.playerSeat > 1 ? 120 : -120 : this.playerSeat > 1 ? -120 : 120, this.ShowSkillScore(this.totalWin / this.multi_list[this.multi_index]), yield this.delay(2130), this.number_anim.node.parent = l.default.Instance.Effects, this.number_anim.node.zIndex = 50, this.number_anim.node.angle = c.PlayerManager.MainSeat > 1 ? 180 : 0;
                    let t = c.PlayerManager.MainSeat > 1 ? -1 : 1,
                        i = h.default.WeaponUIPosition(this.playerSeat).add(new cc.Vec2(0, e)).scale(new cc.Vec2(t, t));
                    this.number_anim.stop(), this.number_anim.node.runAction(cc.moveTo(1.5, i)), yield this.delay(1500), this.number_label.string = "", this.multi_list[this.multi_index] > 1 ? (this.number_anim.node.stopAllActions(), this.SetSkillScore(this.totalWin, 3), yield this.delay(3e3), this.PlayAwardSound()) : this.PlayAwardSound(), yield this.delay(1e3), this.UnUseSkill()
                })
            }
            TotemHurtShow(e, t, i = !1) {
                if (i) return this.burst_anim.node.active = !0, this.burst_anim.play("Burst"), o.default.Instance.Play("TD_Explode"), o.default.Instance.Stop(this.bgmID), this.bgmID = null, o.default.Instance.Play("BOSS_out02"), o.default.Instance.Fade(o.default.Instance.GetBGMID(), 0, 1), void this.CameraShakeEffect(3, 2);
                this.explosion_anim.play("Explosion"), this.CameraShakeEffect(1, 3), this.number_anim.node.runAction(cc.repeat(cc.sequence(cc.callFunc(() => {
                    this.multi_index++, this.multi_index >= e.length && (this.multi_index = e.length - 1), this.number_label.string = "x" + e[this.multi_index]
                }), cc.scaleTo(0, 2), cc.scaleTo(.5, 1)), t)), this.totem_node.runAction(cc.repeat(cc.sequence(cc.callFunc(() => {
                    if (!i) {
                        let e = this.multi_index > 9 ? 9 : this.multi_index;
                        o.default.Instance.Play("jump_0" + e.toString())
                    }
                }), cc.scaleTo(0, 2.5), cc.scaleTo(.5, 1.3)), t))
            }
            ChackExplodeData(e) {
                if (this.SkillState != p.None)
                    if (this.Timer += e, this.isGetKillFish) {
                        switch (this.SkillState) {
                            case p.Explosion:
                                this.ExplodeShow();
                                break;
                            case p.ShowScore:
                                this.ShowScore()
                        }
                        this.SkillState = p.None
                    } else this.Timer >= 10 ? this.UnUseSkill() : this.Timer >= 5 && (this.SkillState = p.ShowScore)
            }
        };
        n([m(cc.Animation)], f.prototype, "explosion_anim", void 0), n([m(cc.Animation)], f.prototype, "burst_anim", void 0), n([m(cc.Animation)], f.prototype, "number_anim", void 0), n([m(cc.Label)], f.prototype, "number_label", void 0), n([m(cc.Node)], f.prototype, "totem_node", void 0), n([m(cc.Animation)], f.prototype, "crab01_Anim", void 0), n([m(cc.Animation)], f.prototype, "crab02_Anim", void 0), f = n([u], f), i.default = f, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../Common/AudioManager": "AudioManager",
        "../Common/ResourceManager": "ResourceManager",
        "../Fish/FishManager": "FishManager",
        "../Player/PlayerManager": "PlayerManager",
        "../Weapon/WeaponManager": "WeaponManager",
        "./BaseSkill": "BaseSkill"
    }],
    SkillKingLacoste: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "dd267UUXC5DE7DkA8GaZOYG", "SkillKingLacoste");
        var n = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            s = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("./BaseSkill"),
            o = e("../../System/SkillSystem"),
            l = e("../Game/GameManager"),
            r = e("../Fish/FishManager"),
            c = e("../Common/ResourceManager"),
            h = e("../../GameClient"),
            d = e("../Common/AudioManager"),
            u = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            {
                ccclass: m,
                property: p
            } = cc._decorator;
        let f = class extends a.default {
            constructor() {
                super(...arguments), this.Totem = null, this.LacosteBite = null, this.LacosteSpine = new Array(2), this.Explosion = null, this.CountObj = null, this.label_number = null, this.KingLacoste = null, this.HidePool = null, this.isContinue = !0, this.currentBombNumber = 1, this.LacosteAnimNum = 1, this.fishAwardTime = 0, this.fishID = null, this.ScoreUIName = "ScoreUI_Awake"
            }
            onLoad() {
                this.skillType = a.skillEnum.AwakenKingLacoste, this.limitTime = 120
            }
            update(e) {
                super.update(e), this.forceTimer > 0 && (this.forceTimer -= e, this.forceTimer <= 0 && (this.SetExplodeEndData(), this.forceTimer = 0))
            }
            InitProperties(e = null) {
                super.InitProperties(), this.node.scale = 0, super.UseSkill(), this.isContinue = !0, this.currentBombNumber = 1, this.label_number.string = "1", this.forceTime = 7.5, this.LacosteAnimNum = 1, this.HidePool = l.default.Instance.BackgroundNow.node.getChildByName("LacosteHide"), this.playerBet = e.bet, this.fishID = e.bomb_fish_id
            }
            UseSkill() {
                return s(this, void 0, void 0, function*() {
                    this.KingLacoste = r.default.Instance.GetFishByID(this.fishID.toString()), this.KingLacoste && this.KingLacoste.FishDie(this.playerSeat), yield this.delay(2e3), this.node.setPosition(this.KingLacoste.node.getPosition());
                    let e = c.default.SpawnEffect("7");
                    e.scale = 2, e.setPosition(this.node.getPosition()), this.Totem.opacity = 255, this.Totem.active = !0;
                    let t = u.default.isReverse ? -75 : 75;
                    if (this.CountObj.setPosition(new cc.Vec2(0, t)), this.CountObj.angle = u.default.isReverse ? 180 : 0, this.CountObj.opacity = 255, this.CountObj.active = !0, yield this.delay(500), this.node.runAction(cc.sequence(cc.scaleTo(1, 1), cc.moveTo(1, cc.Vec2.ZERO))), yield this.delay(500), d.default.Instance.Fade(d.default.Instance.GetBGMID(), 1, 0), this.bgmID = d.default.Instance.Play("BOSS_out01", 1, !0), d.default.Instance.Fade(this.bgmID, 0, 1), this.CreateSkillTitle(), this.CreateScoreUI(), yield this.delay(1e3), this.isMainPlayer) {
                        let e = r.default.Instance.GetRangeAttackableID(this.node.getPosition(), 1e3, 100);
                        h.default.SkillSystem.SendRangeFish(o.SKILL_CMD_NAME.KING_LACOSTE_BOMB, e)
                    }
                    this.forceTimer = this.forceTime, this.LacosteBite.node.active = !0
                })
            }
            UnUseSkill() {
                this.Totem.active = !1, this.CountObj.active = !1, this.Explosion.stop(), this.Explosion.node.active = !1;
                for (let e = 0; e < this.LacosteSpine.length; e++) this.LacosteSpine[e].node && (this.LacosteSpine[e].node.parent = this.LacosteBite.node);
                this.LacosteBite.stop(), this.LacosteBite.node && (this.LacosteBite.node.active = !1), super.UnUseSkill()
            }
            ReceiveSkillData(e) {
                this.dieFishList.length = 0, this.winList.length = 0;
                const t = e.fish;
                this.oddsList = e.odds;
                for (let i = 0; i < t.length; i++) this.dieFishList.push(r.default.Instance.GetFishByID(t[i])), this.winList.push(this.oddsList[i] * this.playerBet);
                this.totalWin = e.total_win, this.isContinue = e.continue, this.ShowExplode(), this.isContinue || (this.isGaveAward = !0)
            }
            SetExplodeEndData() {
                this.isForceShowAward = !0, this.isContinue = !1, this.ShowExplode(), this.isGaveAward = !0
            }
            ShowExplode() {
                return s(this, void 0, void 0, function*() {
                    if (this.isGaveAward) return;
                    this.forceTimer = 0;
                    let e = this.LacosteAnimNum > 0 ? "Left" : "Right",
                        t = this.LacosteAnimNum > 0 ? 0 : 1;
                    yield this.delay(1e3), this.LacosteBite.play("Bite_" + e), this.LacosteSpine[t].setCompleteListener(() => {
                        this.LacosteSpine[t].setCompleteListener(null), this.LacosteSpine[t].setAnimation(0, "SWIM", !0)
                    }), this.LacosteSpine[t].setAnimation(0, "BITE_SKILL", !1), yield this.delay(1e3), this.Explosion.node.active = !0, this.Explosion.play("Burst");
                    let i = Math.random() >= .5 ? "bomb_ex01" : "bomb_ex02";
                    d.default.Instance.Play(i), this.CameraShakeEffect(3, 2), this.isContinue && (this.currentBombNumber++, this.label_number.string = this.currentBombNumber.toString()), this.CountObj.scale = 1.5, this.CountObj.runAction(cc.scaleTo(.5, 1)), this.HidePool && (this.LacosteSpine[t].node.parent = this.HidePool);
                    let n = 1e3 * this.KillFishesAndShowAward();
                    if (n += (new Date).getTime(), this.fishAwardTime = this.fishAwardTime < n ? n : this.fishAwardTime, this.currentWin = this.totalWin, this.SetScoreUICount(this.currentWin), !this.isContinue) {
                        d.default.Instance.Stop(this.bgmID), this.bgmID = null, d.default.Instance.Play("BOSS_out02"), d.default.Instance.Fade(d.default.Instance.GetBGMID(), 0, 1);
                        let e = (new Date).getTime();
                        return this.fishAwardTime = this.fishAwardTime > e ? this.fishAwardTime - e : 0, yield this.delay(this.fishAwardTime < 5e3 ? 5e3 : this.fishAwardTime), this.Totem.runAction(cc.fadeOut(.5)), this.CountObj.runAction(cc.fadeOut(.5)), this.HideSkillScoreUI(), this.ShowSkillScore(this.totalWin), this.PlayAwardSound(), yield this.delay(4e3), void this.UnUseSkill()
                    }
                    if (yield this.delay(2e3), this.Explosion.node.active = !1, this.LacosteSpine[t].node.parent = this.LacosteBite.node, this.isMainPlayer) {
                        let e = r.default.Instance.GetRangeAttackableID(this.node.getPosition(), 1e3, 100);
                        h.default.SkillSystem.SendRangeFish(o.SKILL_CMD_NAME.KING_LACOSTE_BOMB, e)
                    }
                    this.forceTimer = this.forceTime, this.LacosteAnimNum *= -1
                })
            }
        };
        n([p(cc.Node)], f.prototype, "Totem", void 0), n([p(cc.Animation)], f.prototype, "LacosteBite", void 0), n([p([sp.Skeleton])], f.prototype, "LacosteSpine", void 0), n([p(cc.Animation)], f.prototype, "Explosion", void 0), n([p(cc.Node)], f.prototype, "CountObj", void 0), n([p(cc.Label)], f.prototype, "label_number", void 0), f = n([m], f), i.default = f, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../../GameClient": "GameClient",
        "../../System/SkillSystem": "SkillSystem",
        "../Common/AudioManager": "AudioManager",
        "../Common/ResourceManager": "ResourceManager",
        "../Fish/FishManager": "FishManager",
        "../Game/GameManager": "GameManager",
        "./BaseSkill": "BaseSkill"
    }],
    SkillLock: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "e068dHpAFRIn4f49TTd2X0t", "SkillLock");
        var n = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            s = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("./BaseSkill"),
            o = e("../Player/PlayerManager"),
            l = e("../Fish/FishManager"),
            r = e("../Weapon/WeaponManager"),
            c = e("../../GameClient"),
            h = e("../Common/AudioManager"),
            d = e("../Common/EnumFilter"),
            u = e("../Common/ResourceManager"),
            m = e("../../../../../LobbyCommon/PopupMessage/Script/PopupMsgMgr"),
            p = e("../../../../../LobbyCommon/Net/LobbyClient"),
            f = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            {
                ccclass: S,
                property: g
            } = cc._decorator;
        let y = class extends a.default {
            constructor() {
                super(...arguments), this.lightningNode = null, this.lightningEndAnim = null, this.lightningLineAnim = null, this.player = null, this.targetFish = null, this.targetType = -1, this.lastType = null, this.touchFishID = "", this.lockGunWeapon = null, this.attackRate = .1666667, this.attackTimer = 0, this.maxWaitShootTime = 1, this.maxWaitShootTimer = 0, this.sound = -1, this.isTouchHold = !1
            }
            onLoad() {
                this.skillType = a.skillEnum.Lock, this.limitTime = 0
            }
            onEnable() {
                this.isMainPlayer && this.lastType && (this.targetType = this.lastType, this.lastType = null, this.RegisterTouchEvent())
            }
            onDisable() {
                this.isMainPlayer && (this.CanelRegisterTouchEvent(), this.lastType = this.targetType), this.setLocking(null), this.isTouchHold = !1
            }
            InitProperties(e = null) {
                this.dieFishList = new Array, this.winList = new Array, this.oddsList = new Array, this.currentWin = 0, this.totalWin = 0, this.totalOdds = 0, this.limitTimer = this.limitTime, this.forceTimer = 0, this.isGaveAward = !1, this.isUnuse = !1, this.isForceShowAward = !1, this.attackTimer = 0, this.maxWaitShootTimer = 0, this.targetType = -1, this.targetFish = null, this.touchFishID = "", e && e.targetType && (this.targetType = e.targetType), this.player = o.PlayerManager.getPlayer(this.playerSeat)
            }
            UseSkill() {
                return s(this, void 0, void 0, function*() {
                    this.switchLightningObj(!1), this.isMainPlayer && (this.RegisterTouchEvent(), l.default.Instance.Event_FishEnter = this.OnFishEnter.bind(this));
                    let e = new cc.Vec2(0, 0);
                    SS.Common.GameEnvironment.CurrentGameNow == d.FishGame.MTY || SS.Common.GameEnvironment.CurrentGameNow == d.FishGame.MTYL ? e = this.playerSeat > 1 ? new cc.Vec2(0, -105) : new cc.Vec2(0, 105) : SS.Common.GameEnvironment.CurrentGameNow !== d.FishGame.MF && (e = this.playerSeat > 1 ? new cc.Vec2(0, -80) : new cc.Vec2(0, 80));
                    let t = r.default.WeaponPosition(this.playerSeat).addSelf(e);
                    this.node.setPosition(t), h.default.Instance.Play("lacer_fuel")
                })
            }
            UnUseSkill() {
                this.attackTimer = 0, this.targetType = -1, this.lightningEndAnim.stop(), this.lightningLineAnim.stop(), this.isMainPlayer ? (this.targetFish && (this.targetFish.Event_FishLeave = null, this.targetFish = null, this.touchFishID = ""), this.CanelRegisterTouchEvent(), l.default.Instance.Event_FishEnter = null) : this.targetFish && (this.targetFish = null), this.isMainPlayer = !1, this.isUnuse = !0, this.RemoveSkillEffect(), c.default.SkillSystem.RemoveSkill(this.skillType, this.playerSeat, this), u.default.DespawnSkill(this.skillType, this.node)
            }
            setWeapon(e, t) {
                this.lockGunWeapon = e, this.attackRate = 1 / t["1secShoot"]
            }
            onHitFish(e, t, i) {
                if (!this.isMainPlayer) {
                    o.PlayerManager.Instance.ModifyPlayerEntries(t, -e);
                    let n = l.default.Instance.GetFishByID(i.toString());
                    n && (this.targetFish = n, this.targetType = n.Type, this.maxWaitShootTimer = this.maxWaitShootTime, this.setLocking(n))
                }
            }
            update(e) {
                this.isUnuse || (super.update(e), this.isMainPlayer ? this.MainPlayerUpdate(e) : (this.OtherPlayerUpdate(e), this.maxWaitShootTimer > 0 && (this.maxWaitShootTimer -= e, this.maxWaitShootTimer <= 0 && (this.maxWaitShootTimer = 0, this.setLocking(null)))))
            }
            setLocking(e) {
                e ? (this.isMainPlayer && (this.targetFish && (this.targetFish.Event_FishLeave = null), e.ID != this.touchFishID && (this.touchFishID = "")), this.targetFish = e, this.targetType = e.Type, this.isMainPlayer && (this.targetFish.Event_FishLeave = this.OnTargetChange.bind(this)), this.lockGunWeapon && this.lockGunWeapon.SetFishIcon(e.Type)) : (this.switchLightningObj(!1), this.targetFish && this.isMainPlayer && (this.targetFish.Event_FishLeave = null), this.targetFish = null, this.targetType = -1, this.touchFishID = "", this.lockGunWeapon && this.lockGunWeapon.SetFishIcon(this.targetType))
            }
            switchLightningObj(e) {
                this.lightningNode && (this.lightningNode.active = e), this.lockGunWeapon && this.lockGunWeapon.SetFishIconAnim(e), this.sound && -1 != this.sound && h.default.Instance.Stop(this.sound), e ? (this.sound = h.default.Instance.Play("lacer_shoot", 1, !0), this.lightningEndAnim.play(), this.lightningLineAnim.play()) : (this.lightningEndAnim.stop(), this.lightningLineAnim.stop())
            }
            get checkLightning() {
                return -1 != this.targetType && !!this.targetFish && !!this.targetFish.CanCollisionByMainSeat(this.isMainPlayer)
            }
            MainPlayerUpdate(e) {
                if (!r.default.Instance.getWeapon(this.playerSeat).isGunReady || 0 == r.default.Instance.bulletLimit) return this.setLocking(null), void(this.isTouchHold = !1);
                if (this.checkLightning) {
                    if (this.player.entries < this.player.bet_value) {
                        let e = SS.Common.GameEnvironment.IsShowDonate ? "C42" : "C41";
                        return m.PopupMsgMgr.Instance.ShowPopMsg(m.PopupPriority.Info, e, c.default.Instance.title, "Insufficient balance", null), this.setLocking(null), r.default.Instance.AutoShoot = !1, this.isTouchHold = !1, void c.default.FishUIMgr.ShowPurchaseHint(!0)
                    }
                    if (o.PlayerManager.Instance.MaxBalance && this.player.entries + this.player.winning >= o.PlayerManager.Instance.MaxBalance) return m.PopupMsgMgr.Instance.ShowPopMsg(m.PopupPriority.Info, "C29", c.default.Instance.title, "MaxBalance", null), this.setLocking(null), r.default.Instance.AutoShoot = !1, void(this.isTouchHold = !1);
                    if (!this.UpdateLightningPos()) return;
                    if (this.lightningNode.active) {
                        if (this.attackTimer > 0 && (this.attackTimer -= e), this.attackTimer <= 0) {
                            if (this.attackTimer = this.attackRate, c.default.FishUIMgr.IsPurchaseOpen()) return;
                            this.targetFish.OnHitFish(), o.PlayerManager.Instance.ModifyPlayerEntries(this.playerSeat, -this.player.bet_value), c.default.SkillSystem.SendLockHit(this.playerSeat, this.player.bet_value, "", Number(this.targetFish.ID)), "playgd" == window.gd_nowLOGO && -1 == SS.Common.GameEnvironment.SentGameFlowStatus.indexOf(SS.Common.GameEnvironment.CurrentGameNow + p.GAME_STATUS.FIRST_SPIN) && (SS.Common.GameEnvironment.SentGameFlowStatus.push(SS.Common.GameEnvironment.CurrentGameNow + p.GAME_STATUS.FIRST_SPIN), p.LobbyClient.Instance.GetUserClient.SendPlayFlowData(SS.Common.GameEnvironment.DeviceInfo, SS.Common.GameEnvironment.CurrentGameNow, p.GAME_STATUS.FIRST_SPIN)), this.isTouchHold || r.default.Instance.AutoShoot || this.setLocking(null)
                        }
                    } else this.attackTimer = this.attackRate, this.switchLightningObj(!0)
                } else r.default.Instance.AutoShoot || this.isTouchHold ? this.FindNextFish() : this.setLocking(null)
            }
            OtherPlayerUpdate(e) {
                this.checkLightning ? (this.lightningNode.active || this.switchLightningObj(!0), this.UpdateLightningPos()) : this.lightningNode.active && this.setLocking(null)
            }
            UpdateLightningPos() {
                if (!this.targetFish) return !1;
                let e = this.node.getPosition(),
                    t = this.targetFish.GetLockLinkPoint(e);
                if (!t) return this.isMainPlayer && (r.default.Instance.AutoShoot || this.isTouchHold) ? this.FindNextFish() : this.setLocking(null), !1;
                t = f.default.ConvMousePos(t), SS.Common.GameEnvironment.CurrentGameNow == d.FishGame.MF && this.lockGunWeapon.SetGunRotateUsePos(t), this.node.angle = 57.29578 * -Math.atan2(Math.floor(t.x - e.x), Math.floor(t.y - e.y));
                let i, n = t.sub(e);
                switch (SS.Common.GameEnvironment.CurrentGameNow) {
                    case d.FishGame.MF:
                        i = Math.sqrt(n.x * n.x + n.y * n.y) / 350, this.lightningLineAnim && this.lightningLineAnim.node && (this.lightningLineAnim.node.scaleY = i), this.lightningEndAnim && this.lightningEndAnim.node && (this.lightningEndAnim.node.scaleY = 1 / i);
                        break;
                    case d.FishGame.ALD:
                        i = n.mag() / 550, this.lightningLineAnim && this.lightningLineAnim.node && (this.lightningLineAnim.node.scaleY = -i, this.lightningLineAnim.node.scaleX = .5 + i / 2), this.lightningEndAnim && this.lightningEndAnim.node && (this.lightningEndAnim.node.scaleY = 1.5 / i, this.lightningEndAnim.node.scaleX = 1.5 / (.5 + i / 2));
                        break;
                    case d.FishGame.ZB:
                        i = n.mag() / 300, this.lightningLineAnim && this.lightningLineAnim.node && (this.lightningLineAnim.node.scaleY = i, this.lightningLineAnim.node.scaleX = .5 + i / 2), this.lightningEndAnim && this.lightningEndAnim.node && (this.lightningEndAnim.node.scaleY = 1.5 / i, this.lightningEndAnim.node.scaleX = 1.5 / (.5 + i / 2));
                        break;
                    case d.FishGame.LS:
                    case d.FishGame.GLP:
                    case d.FishGame.KK:
                    default:
                        i = n.mag() / 300, this.lightningLineAnim && this.lightningLineAnim.node && (this.lightningLineAnim.node.scaleY = i), this.lightningEndAnim && this.lightningEndAnim.node && (this.lightningEndAnim.node.scaleY = 1 / i)
                }
                return !0
            }
            OnTouchStart(e) {
                if (!r.default.Instance.getWeapon(this.playerSeat).isGunReady) return;
                if (this.player.entries < this.player.bet_value) {
                    let e = SS.Common.GameEnvironment.IsShowDonate ? "C42" : "C41";
                    return m.PopupMsgMgr.Instance.ShowPopMsg(m.PopupPriority.Info, e, c.default.Instance.title, "Insufficient balance", null), void c.default.FishUIMgr.ShowPurchaseHint(!0)
                }
                if (o.PlayerManager.Instance.MaxBalance && this.player.entries + this.player.winning >= o.PlayerManager.Instance.MaxBalance) return void m.PopupMsgMgr.Instance.ShowPopMsg(m.PopupPriority.Info, "C29", c.default.Instance.title, "MaxBalance", null);
                let t = l.default.Instance.InFishRange(e.getLocation());
                t && (null == d.default.playerLockSetting && d.default.UseDefaultLockSetting(t.Type), this.setLocking(t), this.touchFishID = t.ID), this.isTouchHold = !0
            }
            OnTouchEnd(e) {
                this.isTouchHold = !1
            }
            OnFishEnter(e) {
                if (r.default.Instance.AutoShoot && "" == this.touchFishID)
                    if (null == d.default.LockSetting);
                    else {
                        if (e.Type == this.targetType) return;
                        for (let t = 0; t < d.default.LockSetting.length; t++) {
                            if (d.default.LockSetting[t] == this.targetType) return;
                            if (e.Type == d.default.LockSetting[t]) return void this.setLocking(e)
                        }
                    }
            }
            OnTargetChange(e, t) {
                e && (e.Event_FishLeave = null), r.default.Instance.AutoShoot || this.isTouchHold ? this.FindNextFish() : this.setLocking(null)
            }
            FindNextFish() {
                if (!this.isMainPlayer) return;
                let e = this.targetFish ? this.targetFish.ID : "",
                    t = null;
                l.default.Instance && (t = l.default.Instance.GetNextLockFish(this.targetType, e)), t ? this.setLocking(t) : this.switchLightningObj(!1)
            }
            SetLockLvType(e) {
                this.skillType = e
            }
        };
        n([g(cc.Node)], y.prototype, "lightningNode", void 0), n([g(cc.Animation)], y.prototype, "lightningEndAnim", void 0), n([g(cc.Animation)], y.prototype, "lightningLineAnim", void 0), y = n([S], y), i.default = y, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../../../../../LobbyCommon/Net/LobbyClient": void 0,
        "../../../../../LobbyCommon/PopupMessage/Script/PopupMsgMgr": void 0,
        "../../GameClient": "GameClient",
        "../Common/AudioManager": "AudioManager",
        "../Common/EnumFilter": "EnumFilter",
        "../Common/ResourceManager": "ResourceManager",
        "../Fish/FishManager": "FishManager",
        "../Player/PlayerManager": "PlayerManager",
        "../Weapon/WeaponManager": "WeaponManager",
        "./BaseSkill": "BaseSkill"
    }],
    SkillMermaid: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "c8f51UN82tDd6KTpCltVHew", "SkillMermaid");
        var n = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            s = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("./BaseSkill"),
            o = e("../../System/SkillSystem"),
            l = e("../Fish/BaseFish"),
            r = e("../Common/AudioManager"),
            c = e("../Fish/FishManager"),
            h = e("../Common/ResourceManager"),
            d = e("../../GameClient"),
            u = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            {
                ccclass: m,
                property: p
            } = cc._decorator;
        let f = class extends a.default {
            constructor() {
                super(...arguments), this.heart_anim = null, this.radiance_anim = null, this.laber_count = null, this.explode_node = null, this.heart_particle = null, this.backe_particle = new Array, this.explode_count = null, this.spine_list = new Array, this.fishAwardTime = 0, this.fishID = null, this.ScoreUIName = "ScoreUI_Awake"
            }
            onLoad() {
                this.limitTime = 120, this.spine_list = this.explode_node.getComponentsInChildren(sp.Skeleton)
            }
            InitProperties(e = null) {
                super.InitProperties(), this.laber_count.string = "1", this.currentWin = 0, this.heart_anim.node.opacity = 255, this.heart_anim.node.active = !1, this.heart_anim.node.setPosition(cc.Vec2.ZERO), this.explode_count = 1, this.heart_anim.node.angle = this.playerSeat > 1 ? 180 : 0, this.fishID = e.bomb_fish_id, this.playerBet = e.bet
            }
            UseSkill() {
                return s(this, void 0, void 0, function*() {
                    let e = cc.Vec2.ZERO,
                        t = c.default.Instance.GetFishByID("" + this.fishID);
                    t && (t.AliveStatus = l.FishState.DEAD, t.CanCollision = !1, e = this.node.parent.convertToNodeSpaceAR(t.getFishPos()), t.PlayDieAnim(), r.default.Instance.Play("effect_mer_die1")), r.default.Instance.Play("41_catch_bigfish"), yield this.delay(2e3);
                    const i = h.default.SpawnEffect("7");
                    i.scale = 2, i && (i.setPosition(e), yield this.delay(500)), this.heart_anim.node.setPosition(e), this.heart_anim.node.angle = u.default.isReverse ? 180 : 0, this.heart_anim.node.active = !0, this.heart_anim.play("heart_init"), this.heart_particle.resetSystem(), yield this.delay(1e3), this.heart_anim.node.runAction(cc.moveTo(1, cc.Vec2.ZERO)), this.CreateSkillTitle(), r.default.Instance.Fade(r.default.Instance.GetBGMID(), 1, 0), this.bgmID = r.default.Instance.Play("FD_out01", 1, !0), r.default.Instance.Fade(this.bgmID, 0, 1), this.CreateScoreUI(), yield this.delay(2e3), this.SendBombRange()
                })
            }
            UnUseSkill() {
                this.heart_anim.stop(), this.radiance_anim.stop(), this.backe_particle.forEach(e => s(this, void 0, void 0, function*() {
                    e.stop()
                })), this.explode_count = null, super.UnUseSkill()
            }
            SendBombRange() {
                if (this.isMainPlayer) {
                    let e = c.default.Instance.GetRangeAttackableID(cc.Vec2.ZERO, 1e3, 100);
                    d.default.SkillSystem.SendRangeFish(o.SKILL_CMD_NAME.MERMAID_BOMB, e)
                }
            }
            ReceiveSkillData(e = null) {
                return s(this, void 0, void 0, function*() {
                    this.dieFishList.length = 0, this.winList.length = 0;
                    const t = e.fish;
                    for (let e = 0; e < t.length; e++) {
                        const i = c.default.Instance.GetFishByID("" + t[e]);
                        this.dieFishList.push(i)
                    }
                    const i = e.odds;
                    for (let e = 0; e < i.length; e++) this.winList.push(this.playerBet * i[e]);
                    this.ShowExplode(), r.default.Instance.Play("effect_mer_attack1"), yield this.delay(1800), this.initBackeParticle();
                    const n = e.continue;
                    this.explode_count = e.bomb_times_cnt + (n ? 1 : 0), this.onAddExplodeCount(), yield this.delay(500), this.CameraShakeEffect(3, 1.5);
                    let s = 1e3 * this.KillFishesAndShowAward();
                    s += (new Date).getTime(), this.fishAwardTime = this.fishAwardTime < s ? s : this.fishAwardTime, r.default.Instance.Play("drill_bomb_1");
                    const a = e.win;
                    if (this.currentWin += a, yield this.delay(2e3), n) this.SendBombRange();
                    else {
                        r.default.Instance.Stop(this.bgmID), this.bgmID = null, r.default.Instance.Play("FD_out02"), r.default.Instance.Fade(r.default.Instance.GetBGMID(), 0, 1), this.heart_particle.stopSystem(), this.explode_node.active = !1, this.heart_anim.play("heart_over");
                        let t = (new Date).getTime();
                        this.fishAwardTime = this.fishAwardTime > t ? this.fishAwardTime - t : 0, this.fishAwardTime -= 1500, yield this.delay(this.fishAwardTime > 0 ? this.fishAwardTime : 0), this.SetScoreUICount(this.currentWin), this.ShowSkillScore(this.currentWin), this.PlayAwardSound(), yield this.delay(4e3), this.totalWin = e.total_win, this.HideSkillScoreUI(), this.UnUseSkill()
                    }
                })
            }
            ShowExplode() {
                this.explode_node.active = !0, this.spine_list.forEach(e => {
                    e.setAnimation(0, "ATK", !1)
                })
            }
            onAddExplodeCount() {
                this.laber_count.string = "" + this.explode_count, this.heart_anim.node.scale = 2, this.heart_anim.node.runAction(cc.scaleTo(1, 1)), this.radiance_anim.play("radiance"), this.SetScoreUICount(this.currentWin)
            }
            initBackeParticle() {
                this.backe_particle.forEach(e => s(this, void 0, void 0, function*() {
                    e.node.active = !0, e.play("ExplodeHeartInit")
                }))
            }
        };
        n([p(cc.Animation)], f.prototype, "heart_anim", void 0), n([p(cc.Animation)], f.prototype, "radiance_anim", void 0), n([p(cc.Label)], f.prototype, "laber_count", void 0), n([p(cc.Node)], f.prototype, "explode_node", void 0), n([p(cc.ParticleSystem)], f.prototype, "heart_particle", void 0), n([p([cc.Animation])], f.prototype, "backe_particle", void 0), f = n([m], f), i.default = f, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../../GameClient": "GameClient",
        "../../System/SkillSystem": "SkillSystem",
        "../Common/AudioManager": "AudioManager",
        "../Common/ResourceManager": "ResourceManager",
        "../Fish/BaseFish": "BaseFish",
        "../Fish/FishManager": "FishManager",
        "./BaseSkill": "BaseSkill"
    }],
    SkillMultiBomb: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "4f047B8OPxLjrH6Fs8r9rvV", "SkillMultiBomb");
        var n = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            s = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("./BaseSkill"),
            o = e("../Fish/BaseFish"),
            l = e("../../GameClient"),
            r = e("../../System/SkillSystem"),
            c = e("../Common/ResourceManager"),
            h = e("../Award/SkillTitle"),
            d = e("../Weapon/WeaponManager"),
            u = e("../Fish/FishManager"),
            m = e("../Common/AudioManager"),
            p = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            {
                ccclass: f,
                property: S
            } = cc._decorator;
        let g = class extends a.default {
            constructor() {
                super(...arguments), this.bombRangeNode = null, this.bombRangeAnim = new Array, this.label_number = null, this.CrabParent = null, this.multiBombCrab = null, this.isContinue = !0, this.currentBombNumber = 0, this.army_name = "", this.army_id = 0, this.rangeSound = -1, this.fishAwardTime = 0, this.fishID = null, this.ScoreUIName = "ScoreUI_Bomb"
            }
            get bombPosList() {
                const e = .5 * p.default.WinSize.width,
                    t = .5 * p.default.WinSize.height;
                return [cc.v2(.616 * e, .625 * -t), cc.v2(.625 * -e, .468 * -t), cc.v2(.616 * e, .625 * t), cc.v2(.625 * -e, .468 * -t)]
            }
            onLoad() {
                this.skillType = a.skillEnum.MultiBomb, this.limitTime = 120
            }
            update(e) {
                super.update(e), this.forceTimer > 0 && (this.forceTimer -= e, this.forceTimer <= 0 && (this.SetExplodeEndData(), this.forceTimer = 0))
            }
            InitProperties(e = null) {
                super.InitProperties(), this.isContinue = !0, this.currentBombNumber = 0, this.forceTime = 7.5, this.playerBet = e.bet, this.fishID = e.crab
            }
            UseSkill() {
                return s(this, void 0, void 0, function*() {
                    if (this.multiBombCrab = u.default.Instance.GetFishByID(this.fishID.toString()), this.multiBombCrab || this.isMainPlayer && (this.multiBombCrab = u.default.Instance.CreateFakeFish(this.fishID.toString(), 34, new cc.Vec2(700, 360))), this.multiBombCrab) {
                        this.CreateSkillTitle(), this.label_number.node.parent.active = !0, this.label_number.node.angle = p.default.isReverse ? 180 : 0, this.label_number.string = (this.currentBombNumber + 1).toString(), this.CreateScoreUI();
                        let e = this.multiBombCrab.node.getPosition();
                        if (this.label_number.node.parent.setPosition(e), this.multiBombCrab.AliveStatus = o.FishState.DEAD, this.multiBombCrab.CanCollision = !1, this.multiBombCrab.StopAction(), this.multiBombCrab.PlayReadyExplode(), this.multiBombCrab.SetAnimationTimeScale(1.2), this.multiBombCrab.node.parent = this.CrabParent, this.multiBombCrab.node.runAction(cc.rotateBy(1, 360).repeatForever()), this.multiBombCrab.node.runAction(cc.moveTo(.88, cc.Vec2.ZERO)), this.label_number.node.parent.runAction(cc.moveTo(.88, cc.Vec2.ZERO)), yield this.delay(1e3), this.SwitchBombRange(!0), yield this.delay(2900), this.isMainPlayer) {
                            let e = u.default.Instance.GetRangeAttackableID(this.multiBombCrab.node.getPosition(), 1e3, 100);
                            l.default.SkillSystem.SendRangeFish(r.SKILL_CMD_NAME.MULTI_BOMB_BOMB, e)
                        }
                        this.forceTimer = this.forceTime
                    }
                })
            }
            UnUseSkill() {
                this.multiBombCrab && (this.multiBombCrab.RemoveSelf(), this.multiBombCrab = null), this.SwitchBombRange(!1), this.bombRangeAnim[0].stop(), this.bombRangeAnim[1].stop(), super.UnUseSkill()
            }
            CreateSkillTitle() {
                this.SkillTitle && this.HideSkillTitle(!1);
                let e = c.default.SpawnTitle(this.skillType, this.isMainPlayer);
                if (e) {
                    e.angle = p.default.isReverse ? 180 : 0, e.opacity = 255, this.SkillTitle = e.getComponent(h.default), this.SkillTitle.SetBet(this.playerBet, this.isMainPlayer);
                    let t = this.multiBombCrab.node.getPosition();
                    e.setPosition(t);
                    let i = this.playerSeat > 1 ? new cc.Vec2(0, -180) : new cc.Vec2(0, 180),
                        n = d.default.WeaponPosition(this.playerSeat).add(i);
                    e.runAction(cc.sequence(cc.delayTime(1), cc.moveTo(.75, n)))
                }
            }
            ReceiveSkillData(e) {
                this.dieFishList.length = 0, this.winList.length = 0;
                const t = e.fish;
                this.oddsList = e.odds;
                for (let n = 0; n < t.length; n++) this.dieFishList.push(u.default.Instance.GetFishByID(t[n])), this.winList.push(this.oddsList[n] * this.playerBet);
                this.isContinue = e.continue, this.isContinue || (this.isGaveAward = !0), this.totalWin = e.total_win;
                let i = e.army_info;
                i && (this.army_name = i.army_name, this.army_id = i.army_id), this.ShowExplode()
            }
            SetExplodeEndData() {
                this.isGaveAward = !0, this.isForceShowAward = !0, this.isContinue = !1, this.ShowExplode()
            }
            ShowExplode() {
                return s(this, void 0, void 0, function*() {
                    this.forceTimer = 0, this.SwitchBombRange(!1);
                    const e = this.currentBombNumber % this.bombPosList.length;
                    if (this.army_name && this.army_id && this.isContinue && u.default.Instance.GenerateArmy(this.army_name, this.army_id, 0, 0, this.bombPosList[e]), yield this.delay(300), this.CreateExplodeEffect(), this.isContinue) {
                        this.currentBombNumber++;
                        let t = .5,
                            i = new cc.Vec2(this.bombPosList[e].x / 2, this.bombPosList[e].y / 2).scale(new cc.Vec2(t, t));
                        this.label_number.node.parent.runAction(cc.sequence(cc.moveTo(e % 2 == 1 ? .66 : .4875, i), cc.moveTo(e % 2 == 1 ? .66 : .4875, this.bombPosList[e]))), this.multiBombCrab.node.runAction(cc.sequence(cc.moveTo(e % 2 == 1 ? .66 : .4875, i), cc.moveTo(e % 2 == 1 ? .66 : .4875, this.bombPosList[e]))), this.multiBombCrab.node.runAction(cc.sequence(cc.scaleTo(e % 2 == 1 ? .66 : .4875, 1.5), cc.scaleTo(e % 2 == 1 ? .66 : .4875, 1))), this.label_number.string = (this.currentBombNumber + 1).toString()
                    } else this.multiBombCrab.RemoveSelf(), this.multiBombCrab = null, this.label_number.node.parent.active = !1;
                    let t = 1e3 * this.KillFishesAndShowAward();
                    if (t += (new Date).getTime(), this.fishAwardTime = this.fishAwardTime < t ? t : this.fishAwardTime, this.SetScoreUICount(this.currentWin), !this.isContinue) {
                        let e = (new Date).getTime();
                        return this.fishAwardTime = this.fishAwardTime > e ? this.fishAwardTime - e : 0, yield this.delay(this.fishAwardTime < 1500 ? 1500 : this.fishAwardTime), this.SetScoreUICount(this.totalWin), this.ShowSkillScore(1), this.SetSkillScore(this.totalWin, 3), yield this.delay(3e3), this.HideSkillScoreUI(), this.PlayAwardSound(), yield this.delay(4e3), void this.UnUseSkill()
                    }
                    if (yield this.delay(450 + (e % 2 == 1 ? 870 : 525)), this.currentWin = this.totalWin, this.SwitchBombRange(!0), yield this.delay(2e3), this.isMainPlayer) {
                        var i = new Array;
                        i = u.default.Instance.GetRangeAttackableID(this.multiBombCrab ? this.multiBombCrab.node.getPosition() : cc.Vec2.ZERO, 1e3, 100), l.default.SkillSystem.SendRangeFish(r.SKILL_CMD_NAME.MULTI_BOMB_BOMB, i)
                    }
                    this.forceTimer = this.forceTime
                })
            }
            SwitchBombRange(e = !0) {
                this.bombRangeNode && (this.bombRangeNode.active = e, e ? (this.multiBombCrab && this.bombRangeNode.setPosition(this.multiBombCrab.node.getPosition()), this.bombRangeAnim[0].play(), this.bombRangeAnim[1].play(), this.rangeSound = m.default.Instance.Play("18_bomba_main")) : m.default.Instance.Stop(this.rangeSound))
            }
            CreateExplodeEffect() {
                return s(this, void 0, void 0, function*() {
                    let e = c.default.SpawnEffect("Bomb_Explode", this.isMainPlayer);
                    e && (e.setParent(c.default.Instance.Award), e.setPosition(this.multiBombCrab ? this.multiBombCrab.node.getPosition() : cc.Vec2.ZERO));
                    let t = Math.random();
                    t < .25 ? m.default.Instance.Play("19_bomba_main") : t < .5 ? m.default.Instance.Play("bomb_ex01") : t < .75 ? m.default.Instance.Play("bomb_ex02") : m.default.Instance.Play("bomb_ex03"), this.CameraShakeEffect(1, 3)
                })
            }
        };
        n([S(cc.Node)], g.prototype, "bombRangeNode", void 0), n([S([cc.Animation])], g.prototype, "bombRangeAnim", void 0), n([S(cc.Label)], g.prototype, "label_number", void 0), n([S(cc.Node)], g.prototype, "CrabParent", void 0), g = n([f], g), i.default = g, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../../GameClient": "GameClient",
        "../../System/SkillSystem": "SkillSystem",
        "../Award/SkillTitle": "SkillTitle",
        "../Common/AudioManager": "AudioManager",
        "../Common/ResourceManager": "ResourceManager",
        "../Fish/BaseFish": "BaseFish",
        "../Fish/FishManager": "FishManager",
        "../Weapon/WeaponManager": "WeaponManager",
        "./BaseSkill": "BaseSkill"
    }],
    SkillPariteShip: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "41ef3ikwxhG5YycyK5z2fI2", "SkillPariteShip");
        var n = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            s = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            o = e("../Common/AudioManager"),
            l = e("../Common/ResourceManager"),
            r = e("../Fish/BaseFish"),
            c = e("../Fish/FishManager"),
            h = e("./BaseSkill"),
            {
                ccclass: d,
                property: u
            } = cc._decorator;
        var m;
        (function(e) {
            e[e.stay = 0] = "stay", e[e.move = 1] = "move"
        })(m || (m = {}));
        class p {
            constructor(e) {
                this.node = null, this.anim = null, this.state = m.stay, this.oriPosition = null, this.oriScale = 0, this.node = e, this.anim = e.getComponent(cc.Animation), this.oriPosition = e.getPosition(), this.oriScale = e.scale
            }
        }
        let f = class extends h.default {
            constructor() {
                super(...arguments), this.SmallShip = null, this.Totem = null, this.Explosion = null, this.FrameFire = null, this.CountObj = null, this.label_number = null, this.ships = [], this.isContinue = !0, this.currentBombNumber = 0, this.HitCount = 0, this.fishID = null, this.ScoreUIName = "ScoreUI_Awake", this.fishAwardTime = 0
            }
            onLoad() {
                this.skillType = h.skillEnum.AwakenPhoenix, this.limitTime = 120;
                for (let e = 0; e < this.SmallShip.childrenCount; e++) this.ships.push(new p(this.SmallShip.children[e]))
            }
            update(e) {
                super.update(e), this.forceTimer > 0 && (this.forceTimer -= e, this.forceTimer <= 0 && (this.SetExplodeEndData(), this.forceTimer = 0))
            }
            InitProperties(e = null) {
                super.InitProperties(), this.node.scale = 0, this.isContinue = !0, this.currentBombNumber = 0, this.label_number.string = "1", this.forceTime = 7.5, this.playerBet = e.bet, this.FrameFire.node.opacity = 0, this.CountObj.opacity = 255, this.CountObj.angle = a.default.isReverse ? 180 : 0, this.fishID = e.bomb_fish_id
            }
            UseSkill() {
                return s(this, void 0, void 0, function*() {
                    let e = c.default.Instance.GetFishByID(this.fishID.toString());
                    e && e.FishDie(this.playerSeat, !1), yield this.delay(2e3), this.node.setPosition(e ? this.node.parent.convertToNodeSpaceAR(e.getFishPos()) : cc.Vec2.ZERO);
                    let t = l.default.SpawnEffect("7", this.isMainPlayer);
                    t.scale = 2, t.setPosition(this.node.getPosition()), this.Totem.node.angle = a.default.isReverse ? 180 : 0, this.Totem.node.opacity = 255, this.Totem.node.active = !0, this.Totem.play("TotemLoop"), yield this.delay(500), this.node.runAction(cc.sequence(cc.scaleTo(1, 1), cc.moveTo(1, cc.Vec2.ZERO), cc.callFunc(() => {
                        o.default.Instance.Play("storm_shoot")
                    }), cc.delayTime(.8), cc.callFunc(() => {
                        this.Explosion.node.active = !0, this.Explosion.play("Explosion"), this.Totem.node.active = !1, o.default.Instance.Play("bomb_ex03")
                    }), cc.delayTime(1.4), cc.callFunc(() => {
                        this.Explosion.node.active = !1, this.FrameFire.node.active = !0, this.FrameFire.play("FrameFire"), this.FrameFire.node.runAction(cc.fadeIn(1)), o.default.Instance.Fade(o.default.Instance.GetBGMID(), 1, 0), this.bgmID = o.default.Instance.Play("Ghostship_out_01", .7, !0), o.default.Instance.Fade(this.bgmID, 0, 1);
                        for (let e = 0; e < this.ships.length; e++) this.ships[e].node.active = !0;
                        this.schedule(this.StartBirdAttack, .2), a.default.CameraShake(2)
                    }))), this.CreateSkillTitle(), this.CreateScoreUI(), this.forceTimer = this.forceTime, yield this.delay(5e3), this.schedule(this.UpdateHit, .1)
                })
            }
            UnUseSkill() {
                this.Totem.stop(), this.Totem.node.active = !1, this.CountObj.active = !1, this.Explosion.stop(), this.Explosion.node.active = !1, this.FrameFire.stop(), this.FrameFire.node.active = !1;
                for (let e = 0; e < this.ships.length; e++) this.ships[e].anim.stop(), this.ships[e].node.stopAllActions(), this.ships[e].node.setPosition(this.ships[e].oriPosition), this.ships[e].node.scale = this.ships[e].oriScale, this.ships[e].state = m.stay, this.ships[e].node.active = !1;
                a.default.CameraShake(-2), super.UnUseSkill()
            }
            ReceiveSkillData(e) {
                return s(this, void 0, void 0, function*() {
                    yield this.delay(3e3), this.dieFishList = new Array, this.winList = new Array;
                    let t = e.fish_dead_dict,
                        i = Object.keys(t);
                    if (i)
                        for (let e = 0; e < i.length; e++) {
                            const n = i[e],
                                s = c.default.Instance.GetFishByID(n);
                            s && (s.AliveStatus = r.FishState.DEAD, s.CanCollision = !1, s.StopAction(), this.dieFishList.push(s), this.winList.push(t[n].coin))
                        }
                    this.totalWin = e.total_wins, this.HitCount = e.hit_count, this.isContinue = e.continues, this.isContinue ? this.KillFish() : (this.isGaveAward = !0, this.ShowExplode())
                })
            }
            SetExplodeEndData() {
                this.isContinue && (this.isGaveAward = !0, this.isForceShowAward = !0, this.isContinue = !1, this.ShowExplode())
            }
            KillFish() {
                let e = 0;
                this.forceTimer = 0, e = this.KillFishesAndShowAward(), e += (new Date).getTime(), this.fishAwardTime = this.fishAwardTime < e ? e : this.fishAwardTime, this.currentWin = this.totalWin, this.SetScoreUICount(this.currentWin), this.forceTimer = this.forceTime
            }
            ShowExplode() {
                return s(this, void 0, void 0, function*() {
                    l.default.SpawnEffect("FinalShip", this.isMainPlayer), yield this.delay(1e3), a.default.CameraShake(-2), this.unschedule(this.StartBirdAttack), this.unschedule(this.UpdateHit), this.currentBombNumber < this.HitCount && (this.currentBombNumber++, this.label_number.string = this.currentBombNumber.toString(), this.CountObj.scale = 1.2, this.CountObj.runAction(cc.scaleTo(.07, 1))), o.default.Instance.Play("Ghostship_attackend_01"), yield this.delay(1800);
                    let e = () => {
                        this.currentBombNumber++, this.label_number.string = this.currentBombNumber.toString(), this.currentBombNumber >= this.HitCount && (this.CountObj.scale = 1.5, this.CountObj.runAction(cc.sequence(cc.scaleTo(1, 1), cc.delayTime(2), cc.fadeOut(1))), this.unschedule(e))
                    };
                    this.Explosion.node.active = !0, this.Explosion.play("Explosion"), o.default.Instance.SetNextSound(this.bgmID, "Ghostship_out_02", .7), o.default.Instance.Fade(o.default.Instance.GetBGMID(), 0, 1), yield this.delay(800), o.default.Instance.Play("drill_bomb_1"), this.KillFish(), this.fishAwardTime -= (new Date).getTime(), this.CameraShakeEffect(2, 1.5), this.CountObj.scale = 1.2, this.schedule(e, 0), this.FrameFire.node.runAction(cc.fadeOut(1)), yield this.delay(1e3 * this.fishAwardTime), this.HideSkillScoreUI(), this.ShowSkillScore(this.totalWin), this.PlayAwardSound(), yield this.delay(4e3), this.UnUseSkill()
                })
            }
            StartBirdAttack() {
                for (let e = 0; e < 5; e++) {
                    let e = Math.floor(Math.random() * this.ships.length);
                    this.ships[e].state == m.stay && this.BirdAttack(e)
                }
                for (let e = 0; e < 2; e++) {
                    let e = l.default.SpawnEffect("Green_Blast", this.isMainPlayer);
                    if (!e) continue;
                    let t = new cc.Vec2(568 * Math.random() * (Math.random() >= .5 ? 1 : -1), 320 * Math.random() * (Math.random() >= .5 ? 1 : -1)),
                        i = 1.5 * Math.random() + 1,
                        n = Math.random() + 1;
                    e.parent = this.node.parent, e.zIndex = 0, e.active = !1, e.setPosition(t), e.scale = i, this.node.runAction(cc.sequence(cc.delayTime(n), cc.callFunc(() => {
                        e.active = !0, e.getComponent(cc.Animation).play("Blast")
                    })))
                }
            }
            BirdAttack(e) {
                if (this.ships[e].state == m.move) return;
                this.ships[e].state = m.move;
                let t = 50 * Math.random() * (Math.random() >= .5 ? 1 : -1),
                    i = .2 * Math.random() * (Math.random() >= .5 ? 1 : -1),
                    n = .9 * Math.random() + .1,
                    s = Math.random() + 1.5;
                this.ships[e].node.setPosition(this.ships[e].node.getPosition().add(new cc.Vec2(0, t))), this.ships[e].node.scale += i, this.ships[e].node.runAction(cc.sequence(cc.delayTime(n), cc.callFunc(() => {
                    let t = s > 1.5 ? 2 : 1;
                    this.ships[e].anim.play("SmallShip0" + t.toString())
                }), cc.moveTo(s, new cc.Vec2(750, this.ships[e].node.position.y)), cc.callFunc(() => {
                    this.ships[e].anim.stop(), this.ships[e].node.setPosition(this.ships[e].oriPosition), this.ships[e].node.scale = this.ships[e].oriScale, this.ships[e].state = m.stay
                })))
            }
            UpdateHit() {
                this.currentBombNumber >= this.HitCount || Math.random() >= .7 || (this.CountObj.active || (this.CountObj.active = !0), this.currentBombNumber++, this.label_number.string = this.currentBombNumber.toString(), this.CountObj.scale = 1.2, this.CountObj.runAction(cc.scaleTo(.07, 1)))
            }
        };
        n([u(cc.Node)], f.prototype, "SmallShip", void 0), n([u(cc.Animation)], f.prototype, "Totem", void 0), n([u(cc.Animation)], f.prototype, "Explosion", void 0), n([u(cc.Animation)], f.prototype, "FrameFire", void 0), n([u(cc.Node)], f.prototype, "CountObj", void 0), n([u(cc.Label)], f.prototype, "label_number", void 0), f = n([d], f), i.default = f, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../Common/AudioManager": "AudioManager",
        "../Common/ResourceManager": "ResourceManager",
        "../Fish/BaseFish": "BaseFish",
        "../Fish/FishManager": "FishManager",
        "./BaseSkill": "BaseSkill"
    }],
    SkillPoseidon: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "032abWecR9NhYuhJEVqAjyP", "SkillPoseidon");
        var n = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            s = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            o = e("../../GameClient"),
            l = e("../../System/SkillSystem"),
            r = e("../Common/AudioManager"),
            c = e("../Common/ResourceManager"),
            h = e("../Fish/FishManager"),
            d = e("./BaseSkill"),
            {
                ccclass: u,
                property: m
            } = cc._decorator;
        let p = class extends d.default {
            constructor() {
                super(...arguments), this.jew_anim = null, this.lighting = null, this.laber_count = null, this.skeletons = null, this.Atk_anim = null, this.explode_count = null, this.skeleton_list = new Array, this.fishAwardTime = 0, this.fishID = null, this.ScoreUIName = "ScoreUI_Awake"
            }
            onLoad() {
                this.limitTime = 120, this.skeleton_list = this.skeletons.getComponentsInChildren(cc.SkeletonAnimation)
            }
            InitProperties(e = null) {
                super.InitProperties(), this.laber_count.string = "1", this.currentWin = 0, this.jew_anim.node.opacity = 255, this.jew_anim.node.active = !1, this.jew_anim.node.setPosition(cc.Vec2.ZERO), this.explode_count = 1, this.lighting.node.active = !1, this.jew_anim.node.angle = this.playerSeat > 1 ? 180 : 0, this.fishID = e.bomb_fish_id, this.playerBet = e.bet
            }
            UseSkill() {
                return s(this, void 0, void 0, function*() {
                    let e = cc.Vec2.ZERO,
                        t = h.default.Instance.GetFishByID("" + this.fishID);
                    t && (e = this.node.parent.convertToNodeSpaceAR(t.getFishPos()), t.FishDie(this.playerSeat)), yield this.delay(2e3);
                    const i = c.default.SpawnEffect("7", this.isMainPlayer);
                    i.scale = 2, i && (i.setPosition(e), yield this.delay(500)), this.jew_anim.node.setPosition(e), this.jew_anim.node.angle = a.default.isReverse ? 180 : 0, this.jew_anim.node.active = !0, this.jew_anim.play("jew_init"), yield this.delay(1e3), r.default.Instance.Play("effect_PO_die"), this.jew_anim.node.runAction(cc.moveTo(1, cc.Vec2.ZERO)), this.CreateSkillTitle(), r.default.Instance.Fade(r.default.Instance.GetBGMID(), 1, 0), this.bgmID = r.default.Instance.Play("FD_out01", 1, !0), r.default.Instance.Fade(this.bgmID, 0, 1), this.CreateScoreUI(), yield this.delay(2e3), this.SendBombRange()
                })
            }
            UnUseSkill() {
                this.jew_anim.stop(), this.lighting.stop(), this.explode_count = null, super.UnUseSkill()
            }
            SendBombRange() {
                if (this.isMainPlayer) {
                    let e = h.default.Instance.GetRangeAttackableID(cc.Vec2.ZERO, 1e3, 100);
                    o.default.SkillSystem.SendRangeFish(l.SKILL_CMD_NAME.MERMAID_BOMB, e)
                }
            }
            ReceiveSkillData(e = null) {
                return s(this, void 0, void 0, function*() {
                    this.dieFishList.length = 0, this.winList.length = 0;
                    const t = e.fish;
                    for (let e = 0; e < t.length; e++) {
                        const i = h.default.Instance.GetFishByID("" + t[e]);
                        this.dieFishList.push(i)
                    }
                    const i = e.odds;
                    for (let e = 0; e < i.length; e++) this.winList.push(this.playerBet * i[e]);
                    this.skeletons.active = !0, this.skeleton_list.forEach(e => {
                        e.play("attack"), e.once("lastframe", () => {
                            e.stop()
                        })
                    }), this.Atk_anim.play(), yield this.delay(800), r.default.Instance.Play("effect_PO_wave1"), yield this.delay(1800), r.default.Instance.Play("effect_PO_wave2"), yield this.delay(200);
                    const n = e.continue;
                    this.explode_count = e.bomb_times_cnt + (n ? 1 : 0);
                    const s = e.win;
                    this.currentWin += s, this.onAddExplodeCount(), this.lighting.node.active = !0, this.lighting.play("Explosion"), this.CameraShakeEffect(3, 1), this.CameraShakeEffect(1.5, 4);
                    let a = 1e3 * this.KillFishesAndShowAward();
                    if (a += (new Date).getTime(), this.fishAwardTime = this.fishAwardTime < a ? a : this.fishAwardTime, r.default.Instance.Play("effect_PO_wave3"), yield this.delay(2e3), n) this.SendBombRange();
                    else {
                        r.default.Instance.Stop(this.bgmID), this.bgmID = null, r.default.Instance.Play("FD_out02"), r.default.Instance.Fade(r.default.Instance.GetBGMID(), 0, 1), this.skeletons.active = !1, this.jew_anim.play("jew_over");
                        let t = (new Date).getTime();
                        this.fishAwardTime = this.fishAwardTime > t ? this.fishAwardTime - t : 0, this.fishAwardTime -= 1500, yield this.delay(this.fishAwardTime > 0 ? this.fishAwardTime : 0), this.HideSkillScoreUI(), this.totalWin = e.total_win, this.ShowSkillScore(this.totalWin), this.PlayAwardSound(), yield this.delay(4e3), this.UnUseSkill()
                    }
                })
            }
            onAddExplodeCount() {
                this.laber_count.string = "" + this.explode_count, this.jew_anim.node.runAction(cc.sequence(cc.scaleTo(.4, .7), cc.scaleTo(0, 1.6), cc.scaleTo(1, .8))), this.SetScoreUICount(this.currentWin)
            }
        };
        n([m(cc.Animation)], p.prototype, "jew_anim", void 0), n([m(cc.Animation)], p.prototype, "lighting", void 0), n([m(cc.Label)], p.prototype, "laber_count", void 0), n([m(cc.Node)], p.prototype, "skeletons", void 0), n([m(cc.Animation)], p.prototype, "Atk_anim", void 0), p = n([u], p), i.default = p, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../../GameClient": "GameClient",
        "../../System/SkillSystem": "SkillSystem",
        "../Common/AudioManager": "AudioManager",
        "../Common/ResourceManager": "ResourceManager",
        "../Fish/FishManager": "FishManager",
        "./BaseSkill": "BaseSkill"
    }],
    SkillRedDragon: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "e4e2ewCsE1CEK8+0LilNj6m", "SkillRedDragon");
        var n = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            s = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            o = e("../../GameClient"),
            l = e("../../System/SkillSystem"),
            r = e("../Common/AudioManager"),
            c = e("../Common/EnumFilter"),
            h = e("../Common/ResourceManager"),
            d = e("../Common/Utility"),
            u = e("../Fish/FishManager"),
            m = e("../Player/PlayerManager"),
            p = e("../Skill/BaseSkill"),
            f = e("../Weapon/WeaponManager"),
            S = e("./RedDragonReward"),
            {
                ccclass: g,
                property: y
            } = cc._decorator;
        let _ = class extends p.default {
            constructor() {
                super(...arguments), this.number_label = null, this.score_label = null, this.totem = null, this.spine_node = null, this.lightBall_node = null, this.lighting_node = null, this.finalFire_node = null, this.fish_id = 0, this.current_bomb = 0, this.smallBombTimes = 0, this.bigBombTimes = 0, this.fishAwardTime = 0, this.showingScore = 0, this.spineEventStep = 0, this.cmdTimer = 0, this.lightBall = null, this.lighting = null, this.finalFire = null, this.spine_list = null, this.index_pair = [
                    [0, 2],
                    [1, 3],
                    [0, 1, 2, 3],
                    [4, 5, 6, 7]
                ]
            }
            onLoad() {
                this.limitTime = 180, this.spine_list = this.spine_node.getComponentsInChildren(sp.Skeleton);
                for (let e = 0; e < this.spine_list.length; e++) this.spine_list[e].setCompleteListener(() => {
                    this.spine_list[e].node.active = !1
                }), this.spine_list[e].setEventListener(this.spineEventListener.bind(this, e));
                this.lightBall = this.lightBall_node.getComponentsInChildren(cc.Animation), this.lighting = this.lighting_node.getComponentsInChildren(cc.Animation), this.finalFire = this.finalFire_node.getComponentsInChildren(cc.ParticleSystem)
            }
            update(e) {
                super.update(e), this.cmdTimer > 0 && (this.cmdTimer -= e, this.cmdTimer <= 0 && (this.cmdTimer = 0, this.SkillOver()))
            }
            InitProperties(e = null) {
                super.InitProperties(), this.current_bomb = 0, this.node.opacity = 0, this.cmdTimer = 0, this.lightBall.forEach(e => {
                    e.node.active = !1
                }), this.lighting.forEach(e => {
                    e.node.active = !1
                }), this.number_label.node.parent.opacity = 0, this.number_label.string = "1", this.showingScore = 0, this.score_label.node.parent.opacity = 0, this.score_label.string = "0", this.fish_id = e.id, this.playerBet = e.bet, this.bigBombTimes = e.big_bomb_times_target, this.smallBombTimes = e.small_bomb_times_target
            }
            UseSkill() {
                return s(this, void 0, void 0, function*() {
                    r.default.Instance.Play("42_dragon_blow");
                    const e = u.default.Instance.GetFishByID(this.fish_id);
                    if (!e) return void cc.warn("[InitInfo] Dragon is Null!");
                    e.CanCollision = !1, e.PlayDieAnim(), yield this.delay(2e3);
                    let t = this.node.parent.convertToNodeSpaceAR(e.getFishPos());
                    r.default.Instance.Play("41_catch_bigfish");
                    const i = h.default.SpawnEffect("7", this.isMainPlayer);
                    i && (i.scale = 2, i.setPosition(t)), this.InitTotem(t);
                    let n = {
                        time: 18e4,
                        callback: () => {
                            u.default.Instance.recycleUniqueFishData(c.FishType.RedDragon)
                        }
                    };
                    u.default.Instance.getUniqueFishData(c.FishType.RedDragon).setTimeEvent(n)
                })
            }
            UnUseSkill() {
                this.lightBall.forEach(e => {
                    e.stop()
                }), this.lighting.forEach(e => {
                    e.stop()
                });
                let e = {
                    time: 1e3,
                    callback: () => {
                        u.default.Instance.recycleUniqueFishData(c.FishType.RedDragon)
                    }
                };
                u.default.Instance.getUniqueFishData(c.FishType.RedDragon).setTimeEvent(e), super.UnUseSkill()
            }
            InitTotem(e) {
                this.node.setPosition(e), this.node.angle = a.default.isReverse ? 180 : 0, cc.tween(this.node).to(.75, {
                    opacity: 255
                }).call(() => {
                    r.default.Instance.Fade(r.default.Instance.GetBGMID(), 1, 0), this.bgmID = r.default.Instance.Play("RedDragon_StartBGM", 1, !0), r.default.Instance.Fade(this.bgmID, 0, 1)
                }).to(1.5, {
                    position: cc.Vec3.ZERO
                }).call(() => {
                    cc.tween(this.score_label.node.parent).to(.5, {
                        opacity: 255
                    }).start(), cc.tween(this.number_label.node.parent).to(.5, {
                        opacity: 255
                    }).start()
                }).delay(.5).call(() => {
                    this.SendBombRange()
                }).start()
            }
            SendBombRange() {
                if (this.isMainPlayer) {
                    let e = u.default.Instance.GetRangeAttackableID(cc.Vec2.ZERO, 1e3, 100);
                    o.default.SkillSystem.SendRangeFish(l.SKILL_CMD_NAME.RED_DRAGON_BOMB, e)
                }
                this.cmdTimer = 10
            }
            ReceiveSkillData(e) {
                this.cmdTimer = 0;
                let t = e.small_bomb_times_cnt,
                    i = e.big_bomb_times_cnt;
                if (this.current_bomb >= t + i) return void cc.error("RedDragonSkill \u5c01\u5305\u932f\u4e82");
                this.current_bomb < t + i - 1 && (cc.error("RedDragonSkill \u6f0f\u5c01\u5305"), this.current_bomb = t + i - 1), this.dieFishList.length = 0, this.winList.length = 0, this.totalWin = e.total_win, this.bigBombTimes = e.big_bomb_times_target, this.smallBombTimes = e.small_bomb_times_target;
                const n = e.win;
                if (this.currentWin += n, e.fish) {
                    const t = e.fish;
                    for (let e = 0; e < t.length; e++) {
                        const i = u.default.Instance.GetFishByID("" + t[e]);
                        this.dieFishList.push(i)
                    }
                    const i = e.odds;
                    for (let e = 0; e < i.length; e++) this.winList.push(this.playerBet * i[e])
                }
                this.NextExplosion()
            }
            NextExplosion() {
                return s(this, void 0, void 0, function*() {
                    let e = null;
                    if (this.current_bomb < this.smallBombTimes) {
                        if (this.current_bomb < 8) {
                            let e = this.current_bomb % 4;
                            this.spine_list[e].node.active = !0, this.spine_list[e].setAnimation(0, "ATTACK_A", !1), r.default.Instance.Play("RedDragon_BreatheFire")
                        } else {
                            e = this.index_pair[this.current_bomb % 2];
                            for (let t = 0; t < e.length; t++) this.spine_list[e[t]].node.active = !0, this.spine_list[e[t]].setAnimation(0, "ATTACK_A", !1);
                            r.default.Instance.Play("RedDragon_BreatheFire")
                        }
                        this.spineEventStep = 1, this.current_bomb++, yield this.delay(3500), this.SendBombRange()
                    } else if (this.current_bomb == this.smallBombTimes) {
                        e = this.index_pair[2];
                        for (let t = 0; t < e.length; t++) this.spine_list[e[t]].node.active = !0, this.spine_list[e[t]].setAnimation(0, "ATTACK_A", !1);
                        r.default.Instance.Play("RedDragon_BreatheFire"), this.spineEventStep = 1, this.current_bomb++, yield this.delay(3500), this.SendBombRange()
                    } else {
                        e = this.index_pair[3];
                        for (let t = 0; t < e.length; t++) this.spine_list[e[t]].node.active = !0, this.spine_list[e[t]].setAnimation(0, "ATTACK_B", !1);
                        r.default.Instance.Play("RedDragon_FinalAttack"), this.spineEventStep = 2, this.current_bomb++, yield this.delay(5e3), this.SkillOver()
                    }
                })
            }
            spineEventListener(e, t, i) {
                return s(this, void 0, void 0, function*() {
                    if (i) switch (i.data.name) {
                        case "stanby":
                            break;
                        case "fiire_spurt":
                            if (this.lightBall[e].node.active = !0, this.lightBall[e].play(), this.lighting[e].node.active = !0, this.lighting[e].play(), 1 == this.spineEventStep) {
                                this.spineEventStep = 0, this.DragonBallHit(), r.default.Instance.Play("RedDragon_DragonBall_Scale"), this.CameraShakeEffect(.5, 4);
                                let e = {};
                                e.CoinEndPos = cc.Vec2.ZERO, e.AllTypeNormal = !0;
                                let t = 1e3 * this.KillFishesAndShowAward(e);
                                t += (new Date).getTime(), this.fishAwardTime = this.fishAwardTime < t ? t : this.fishAwardTime, this.CountScore()
                            }
                            break;
                        case "fire_end":
                            this.lightBall[e].stop(), this.lightBall[e].node.active = !1, this.lighting[e].stop(), this.lighting[e].node.active = !1;
                            break;
                        case "Hit_1":
                            2 == this.spineEventStep && (this.spineEventStep = 1, this.DragonBallHit(), r.default.Instance.Play("RedDragon_DragonBall_Scale"), this.finalFire.forEach(e => {
                                e.resetSystem()
                            }), r.default.Instance.Play("RedDragon_FinalAttack_Explode"), r.default.Instance.Fade(this.bgmID, 1, 0), this.bgmID = r.default.Instance.Play("RedDragon_EndBGM", 1, !1), r.default.Instance.Fade(this.bgmID, 0, 1));
                            break;
                        case "Hit_2":
                            if (1 == this.spineEventStep) {
                                this.spineEventStep = 0, r.default.Instance.Play("TD_Explode"), this.DragonBallHit(), this.CameraShakeEffect(1, 6);
                                let e = {};
                                e.CoinEndPos = cc.Vec2.ZERO, e.AllTypeNormal = !0;
                                let t = 1e3 * this.KillFishesAndShowAward(e);
                                t += (new Date).getTime(), this.fishAwardTime = this.fishAwardTime < t ? t : this.fishAwardTime, this.CountScore()
                            }
                    }
                })
            }
            DragonBallHit() {
                this.number_label.string = this.current_bomb.toString(), cc.tween(this.number_label.node.parent).to(.2, {
                    scale: 1.3
                }).to(.65, {
                    scale: 1
                }).start(), this.totem.playAdditive("TotemHit")
            }
            CountScore() {
                cc.tween(this.score_label.node.parent).delay(2.5).call(() => {
                    let e = this.currentWin,
                        t = (e - this.showingScore) / (.5 / .03);
                    cc.tween(this.node).repeat(.5 / .03, cc.tween(this.node).call(() => {
                        this.showingScore += t, this.score_label.string = d.default.NumberformatBet(this.showingScore, this.playerBet)
                    }).delay(.03)).call(() => {
                        this.showingScore = e, this.score_label.string = d.default.NumberformatBet(this.showingScore, this.playerBet)
                    }).start()
                }).to(.2, {
                    scale: 1.2
                }).to(.65, {
                    scale: 1
                }).start()
            }
            SkillOver() {
                return s(this, void 0, void 0, function*() {
                    if (this.isMainPlayer && 0 == this.totalWin) return void o.default.Instance.CallOnError("C44", "SkillZeroWin");
                    this.isGaveAward = !0;
                    let e = (new Date).getTime();
                    this.fishAwardTime = this.fishAwardTime > e ? this.fishAwardTime - e : 0;
                    let t = 0;
                    t = a.default.isReverse ? this.playerSeat > 1 ? 220 : -170 : this.playerSeat > 1 ? -220 : 170;
                    let i = m.PlayerManager.MainSeat > 1 ? -1 : 1,
                        n = f.default.WeaponUIPosition(this.playerSeat).add(new cc.Vec2(0, t)).scale(new cc.Vec2(i, i));
                    cc.tween(this.node).delay(this.fishAwardTime / 1e3 < 2 ? 2 : this.fishAwardTime / 1e3).call(() => {
                        this.node.setParent(this.isMainPlayer ? h.default.Instance.Effects_own : h.default.Instance.Effects)
                    }).to(1.5, {
                        position: cc.v3(n)
                    }).call(() => {
                        this.PlayAwardSound()
                    }).delay(1.5).to(.5, {
                        opacity: 0
                    }).call(() => {
                        this.CreateSkillTitle(), this.ShowSkillScore(this.totalWin)
                    }).delay(4).call(() => {
                        if (this.isMainPlayer) {
                            const e = h.default.SpawnEffect("RedDragonReward", this.isMainPlayer);
                            e && (e.angle = a.default.isReverse ? 180 : 0, e.getComponent(S.default).Init(this.totalWin), r.default.Instance.Play("RedDragon_Result"))
                        }
                        this.UnUseSkill()
                    }).start()
                })
            }
        };
        n([y(cc.Label)], _.prototype, "number_label", void 0), n([y(cc.Label)], _.prototype, "score_label", void 0), n([y(cc.Animation)], _.prototype, "totem", void 0), n([y(cc.Node)], _.prototype, "spine_node", void 0), n([y(cc.Node)], _.prototype, "lightBall_node", void 0), n([y(cc.Node)], _.prototype, "lighting_node", void 0), n([y(cc.Node)], _.prototype, "finalFire_node", void 0), _ = n([g], _), i.default = _, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../../GameClient": "GameClient",
        "../../System/SkillSystem": "SkillSystem",
        "../Common/AudioManager": "AudioManager",
        "../Common/EnumFilter": "EnumFilter",
        "../Common/ResourceManager": "ResourceManager",
        "../Common/Utility": "Utility",
        "../Fish/FishManager": "FishManager",
        "../Player/PlayerManager": "PlayerManager",
        "../Skill/BaseSkill": "BaseSkill",
        "../Weapon/WeaponManager": "WeaponManager",
        "./RedDragonReward": "RedDragonReward"
    }],
    SkillRocket: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "3a2f1VN/SZNGrC9N4wvwsP7", "SkillRocket");
        var n = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            s = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("./BaseSkill"),
            o = e("../Common/Utility"),
            l = e("../Fish/FishManager"),
            r = e("../Player/PlayerManager"),
            c = e("../Common/ResourceManager"),
            h = e("../Weapon/WeaponManager"),
            d = e("../Common/PoolObj"),
            u = e("../Common/AudioManager"),
            m = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            {
                ccclass: p
            } = cc._decorator;
        let f = class extends a.default {
            constructor() {
                super(...arguments), this.weaponAnim = !1, this.fish_dead_dict = null
            }
            onLoad() {
                this.skillType = a.skillEnum.Rocket
            }
            InitProperties(e = null) {
                if (super.InitProperties(), r.PlayerManager.isMainSeat(this.playerSeat)) {
                    const t = e.credits;
                    r.PlayerManager.BulletSync(1, t)
                }
                this.weaponAnim = !1, this.playerBet = e.bet, this.totalWin = e.total_win, this.fish_dead_dict = e.fish_dead_dict
            }
            UseSkill() {
                return s(this, void 0, void 0, function*() {
                    const e = Object.keys(this.fish_dead_dict);
                    if (!e || e.length <= 0) return;
                    let t = 0,
                        i = h.default.WeaponUIPosition(this.playerSeat).add(cc.v2(-70, 60));
                    i = m.default.isReverse ? o.default.ConvertWorldPosition(i) : i;
                    const n = h.default.Instance.getWeapon(this.playerSeat);
                    for (let a = 0; a < e.length; a++) {
                        let s = e[a],
                            r = this.fish_dead_dict[s].coin,
                            h = this.playerSeat,
                            m = this.playerBet,
                            p = l.default.Instance.GetFishByID(s);
                        if (!p) continue;
                        if (o.default.GetLengthFrom2Point(i, p.node.getPosition()) > 640) continue;
                        n && !this.weaponAnim && (n.PlayRocketShoot(), this.weaponAnim = !0);
                        let f = c.default.SpawnEffect(this.skillType, this.isMainPlayer);
                        if (!f) continue;
                        f.setPosition(i), f.angle = this.playerSeat > 1 ? 180 : 0, f.getComponent(d.default).recycleEvent = () => {
                            let i = c.default.SpawnEffect("Red_Blast", this.isMainPlayer);
                            i.setPosition(f.getPosition()), i.setScale(1.5), u.default.Instance.Play("04_boom"), l.default.Instance.KillFish(h, p, r, m, !1, !0, i => {
                                t < i - .25 * (e.length - 1 - a) && (t = i - .25 * (e.length - 1 - a))
                            })
                        };
                        let S = o.default.GetPointWithVector(p.node.getPosition(), 120, p.node.angle);
                        f.angle = 90 - o.default.GetAngleFrom2Point(f.getPosition(), p.node.getPosition()), f.runAction(cc.moveTo(1.24, S).easing(cc.easeIn(1.5))), yield this.delay(250)
                    }
                    yield this.delay(1500), yield this.delay(1e3 * t);
                    let s = c.default.SpawnEffect("RN", this.isMainPlayer);
                    if (s) {
                        s.angle = m.default.isReverse ? 180 : 0;
                        const e = this.playerSeat > 1 ? new cc.Vec2(0, -80) : new cc.Vec2(0, 80);
                        s.setPosition(h.default.WeaponPosition(this.playerSeat).add(e)), s.getComponentInChildren(cc.Label).string = o.default.NumberformatBet(this.totalWin, this.playerBet), s.runAction(cc.sequence(cc.fadeIn(.5), cc.delayTime(1), cc.fadeOut(.5), cc.callFunc(() => {
                            c.default.DespawnEffect("RN", s)
                        })))
                    }
                    this.PlayAwardSound(), this.UnUseSkill()
                })
            }
            UnUseSkill() {
                this.fish_dead_dict = null, super.UnUseSkill()
            }
        };
        f = n([p], f), i.default = f, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../Common/AudioManager": "AudioManager",
        "../Common/PoolObj": "PoolObj",
        "../Common/ResourceManager": "ResourceManager",
        "../Common/Utility": "Utility",
        "../Fish/FishManager": "FishManager",
        "../Player/PlayerManager": "PlayerManager",
        "../Weapon/WeaponManager": "WeaponManager",
        "./BaseSkill": "BaseSkill"
    }],
    SkillSystem: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "8cef922g1pMLJmijlJxc0AU", "SkillSystem"), Object.defineProperty(i, "__esModule", {
            value: !0
        }), i.SKILL_CMD_NAME = void 0;
        const n = e("../../../../FishCommon/Script/SSCanvasHandler"),
            s = e("../Event/EventPuzzleDropEggMgr"),
            a = e("../MainGame/Award/AwardManager"),
            o = e("../MainGame/Common/EnumFilter"),
            l = e("../MainGame/Common/ResourceManager"),
            r = e("../MainGame/Fish/FishManager"),
            c = e("../MainGame/Item/ItemManager"),
            h = e("../MainGame/Player/PlayerManager"),
            d = e("../MainGame/Skill/BaseSkill"),
            u = e("../MainGame/Weapon/WeaponManager"),
            m = e("./baseSystem"),
            p = e("./ItemSystem"),
            f = e("./WeaponSystem"),
            S = e("../../../../LobbyCommon/Helper/EventSystem"),
            g = e("../GameClient/Player");
        var y;
        (function(e) {
            e.DRILL_GET = "sk_drill", e.DRILL_SHOOT = "sk_drill_shoot", e.DRILL_HIT = "sk_drill_hit", e.DRILL_BOMB = "sk_drill_bomb", e.ELECTRIC_GET = "sk_electric", e.ELECTRIC_SHOOT = "sk_electric_use", e.ELECTRIC_HIT = "sk_electric_hit", e.MULTI_BOMB_GET = "sk_bomb", e.MULTI_BOMB_BOMB = "sk_bomb_range", e.FLAME_STORM_GET = "sk15", e.FLAMES_TORM_SHOOT = "sk16", e.FLAMES_TORM_HIT = "sk17", e.FLAMES_TORM_END = "sk18", e.FLAMES_TORM_CHECK = "sk19", e.WHEEL_GET = "sk_12", e.WHEEL_CLICK = "sk_13", e.WIND_GET = "sk_wind", e.LOCK_HIT = "sk24", e.TIGER_HIT = "sk_scale_lock_blast", e.DRAGON_HIT = "sk_multi_lock_blast", e.THUNDER_DRAGON_GET = "sk_25", e.THUNDER_DRAGON_BOMB = "sk_26", e.KING_CRAB_GET = "sk_25_kp", e.KING_CRAB_BOMB = "sk_26_kp", e.KING_TACO_GET = "sk_25_kt", e.KING_TACO_BOMB = "sk_26_kt", e.KING_ANGLER_GET = "sk_af_bomb", e.KING_ANGLER_BOMB = "sk_af_bomb_range", e.KING_LACOSTE_GET = "sk_kl_bomb", e.KING_LACOSTE_BOMB = "sk_kl_bomb_range", e.ROCKET_GET = "sk_88", e.FLASH_GET = "sk_flash", e.FLASH_NEXT = "sk_3", e.HAMMER_GET = "sk_flash_hammer", e.HAMMER_BOMB = "sk_flash_hammer_explore", e.MERMAID_GET = "sk_km_bomb", e.MERMAID_BOMB = "sk_km_bomb_range", e.PHOENIX_GET = "sk_kp_ph", e.PHOENIX_BOMB = "sk_kp_ph_explore", e.BUFFALO_GET = "sk_buffalo_bomb", e.BUFFALO_BOMB = "sk_buffalo_bomb_range", e.LUCKY_SHAMROCK_GET = "sk_lucky_shamrock_bomb", e.LUCKY_SHAMROCK_BOMB = "sk_lucky_shamrock_bomb_range", e.KINGKONG_GET = "sk_KingKong_bomb", e.KINGKONG_BOMB = "sk_KingKong_bomb_range", e.ROCKSKULL_GET = "sk_RockSkeleton_bomb", e.ROCKSKULL_BOME = "sk_RockSkeleton_bomb_range", e.VAMPIRE_GET = "sk_Vampire", e.VAMPIRE_ODDS = "VampireOdds", e.LIONDANCE_GET = "sk_LionDance", e.LIONDANCE_END = "sk_LionDance_finish", e.BUDDHA_GET = "sk_LuckyBuddha", e.BUDDHA_ODDS = "LuckyBuddhaOdds", e.BUDDHA_END = "sk_LuckyBuddha_finish", e.DRAGON_TURTLE_GET = "sk_TurtleBoss_bomb", e.DRAGON_TURTLE_BOMB = "sk_TurtleBoss_bomb_range", e.ETERNAL_DRAGON_TURTLE_GET = "sk_EternalDragonTurtle_bomb", e.ETERNAL_DRAGON_TURTLE_BOMB = "sk_EternalDragonTurtle_bomb_range", e.RED_DRAGON_GET = "sk_RedDragon_bomb", e.RED_DRAGON_BOMB = "sk_RedDragon_bomb_range", e.TREASURE_CRAB = "sk_TreasureCrab", e.TREASURE_CRAB_INFO = "sk_TreasureCrabInfo", e.SUBMARINE_EVENT = "sk_submarine_event", e.SUBMARINE_END = "sk_submarine_show_over", e.LUCKY_CAT_GET = "sk_LuckyCat", e.LUCKY_CAT_END = "sk_LuckyCat_finish", e.CLOWN_GET = "sk_CircusClown", e.CLOWN_ODDS = "CircusClownOdds", e.CLOWN_END = "sk_CircusClown_finish", e.PIG_GET = "sk_CircusPig_bomb", e.PIG_BOMB = "sk_CircusPig_bomb_range", e.TIGER_GET = "sk_CircusTiger", e.TIGER_END = "sk_CircusTiger_finish", e.BLAZING_TIGER_GET = "sk_FlamingTiger", e.BLAZING_TIGER_ODDS = "FlamingTigerOdds", e.BLAZING_TIGER_END = "sk_FlamingTiger_finish", e.BUDDHA_PALM = "sk_buddha_palm", e.UPDATE_BUDDHA_PALM = "update_energy", e.ETERNAL_BOSS = "sk_eternal", e.GOLDEN_SLOT_CRAB = "sk_king_of_crab", e.FISH_STATUS_SYNC = "sk_fish_status", e.GOLDEN_TACO_GET = "SK_GOLDEN_OCTOPUS", e.GOLDEN_TACO_BOMB = "SK_GOLDEN_OCTOPUS_BOMB", e.GOLDEN_ANGLER_GET = "SK_GOLDEN_MONSTER", e.GOLDEN_ANGLER_BOMB = "SK_GOLDEN_MONSTER_BOMB", e.GOLDEN_LACOSTE_GET = "SK_GOLDEN_CROCODILE", e.GOLDEN_LACOSTE_BOMB = "SK_GOLDEN_CROCODILE_BOMB", e.THUNDER_DRAGON_EX_GET = "sk_DragonEX"
        })(y = i.SKILL_CMD_NAME || (i.SKILL_CMD_NAME = {})), i.default = class extends m.default {
            constructor(e) {
                super(e, "skill"), this.UpdateAssetEvent = null, this.UpdateEnergyEvent = null, this.skillList = new Array, this.RegisterCmdCallback(y.DRILL_GET, this.onGetSkill.bind(this)), this.RegisterCmdCallback(y.DRILL_SHOOT, this.onReceiveSkillData.bind(this)), this.RegisterCmdCallback(y.DRILL_HIT, this.onSkillExplosion.bind(this)), this.RegisterCmdCallback(y.DRILL_BOMB, this.onSkillExplosion.bind(this)), this.RegisterCmdCallback(y.ELECTRIC_GET, this.onGetSkill.bind(this)), this.RegisterCmdCallback(y.ELECTRIC_SHOOT, this.onReceiveSkillData.bind(this)), this.RegisterCmdCallback(y.ELECTRIC_HIT, this.onSkillExplosion.bind(this)), this.RegisterCmdCallback(y.FLAME_STORM_GET, this.onGetSkill.bind(this)), this.RegisterCmdCallback(y.FLAMES_TORM_CHECK, this.onReceiveSkillData.bind(this)), this.RegisterCmdCallback(y.FLAMES_TORM_END, this.onReceiveSkillData.bind(this)), this.RegisterCmdCallback(y.FLAMES_TORM_SHOOT, this.onReceiveSkillData.bind(this)), this.RegisterCmdCallback(y.FLAMES_TORM_HIT, this.onReceiveSkillData.bind(this)), this.RegisterCmdCallback(y.LOCK_HIT, this.OnSkillWeaponHit.bind(this), y.LOCK_HIT, [null, "2"]), this.RegisterCmdCallback(y.TIGER_HIT, this.OnSkillWeaponHit.bind(this), y.TIGER_HIT, [null, "2"]), this.RegisterCmdCallback(y.DRAGON_HIT, this.OnSkillWeaponHit.bind(this), y.DRAGON_HIT, [null, "2"]), this.RegisterCmdCallback(y.ROCKET_GET, this.onGetSkill.bind(this)), this.RegisterCmdCallback(y.WHEEL_GET, this.onGetSkill.bind(this)), this.RegisterCmdCallback(y.WHEEL_CLICK, this.onReceiveSkillData.bind(this)), this.RegisterCmdCallback(y.MULTI_BOMB_GET, this.onGetSkill.bind(this)), this.RegisterCmdCallback(y.MULTI_BOMB_BOMB, this.onSkillExplosion.bind(this)), this.RegisterCmdCallback(y.WIND_GET, this.onGetSkill.bind(this)), this.RegisterCmdCallback(y.FLASH_GET, this.onGetSkill.bind(this)), this.RegisterCmdCallback(y.FLASH_NEXT, this.onSkillExplosion.bind(this)), this.RegisterCmdCallback(y.THUNDER_DRAGON_GET, this.onGetSkill.bind(this)), this.RegisterCmdCallback(y.THUNDER_DRAGON_BOMB, this.onSkillExplosion.bind(this)), this.RegisterCmdCallback(y.KING_CRAB_GET, this.onGetSkill.bind(this)), this.RegisterCmdCallback(y.KING_CRAB_BOMB, this.onSkillExplosion.bind(this)), this.RegisterCmdCallback(y.KING_TACO_GET, this.onGetSkill.bind(this)), this.RegisterCmdCallback(y.KING_TACO_BOMB, this.onSkillExplosion.bind(this)), this.RegisterCmdCallback(y.KING_ANGLER_GET, this.onGetSkill.bind(this)), this.RegisterCmdCallback(y.KING_ANGLER_BOMB, this.onSkillExplosion.bind(this)), this.RegisterCmdCallback(y.HAMMER_GET, this.onGetSkill.bind(this)), this.RegisterCmdCallback(y.HAMMER_BOMB, this.onSkillExplosion.bind(this)), this.RegisterCmdCallback(y.KING_LACOSTE_GET, this.onGetSkill.bind(this)), this.RegisterCmdCallback(y.KING_LACOSTE_BOMB, this.onSkillExplosion.bind(this)), this.RegisterCmdCallback(y.MERMAID_GET, this.onGetSkill.bind(this)), this.RegisterCmdCallback(y.MERMAID_BOMB, this.onSkillExplosion.bind(this)), this.RegisterCmdCallback(y.PHOENIX_GET, this.onGetSkill.bind(this)), this.RegisterCmdCallback(y.PHOENIX_BOMB, this.onSkillExplosion.bind(this)), this.RegisterCmdCallback(y.BUFFALO_GET, this.onGetSkill.bind(this)), this.RegisterCmdCallback(y.BUFFALO_BOMB, this.onSkillExplosion.bind(this)), this.RegisterCmdCallback(y.LUCKY_SHAMROCK_GET, this.onGetSkill.bind(this)), this.RegisterCmdCallback(y.LUCKY_SHAMROCK_BOMB, this.onSkillExplosion.bind(this)), this.RegisterCmdCallback(y.KINGKONG_GET, this.onGetSkill.bind(this)), this.RegisterCmdCallback(y.KINGKONG_BOMB, this.onSkillExplosion.bind(this)), this.RegisterCmdCallback(y.ROCKSKULL_GET, this.onGetSkill.bind(this)), this.RegisterCmdCallback(y.ROCKSKULL_BOME, this.onSkillExplosion.bind(this)), this.RegisterCmdCallback(y.VAMPIRE_GET, this.onGetSkill.bind(this)), this.RegisterCmdCallback(y.VAMPIRE_ODDS, this.onSyncFishOdds.bind(this)), this.RegisterCmdCallback(y.LIONDANCE_GET, this.onGetSkill.bind(this)), this.RegisterCmdCallback(y.BUDDHA_GET, this.onGetSkill.bind(this)), this.RegisterCmdCallback(y.BUDDHA_ODDS, this.onSyncFishOdds.bind(this)), this.RegisterCmdCallback(y.DRAGON_TURTLE_GET, this.onGetSkill.bind(this)), this.RegisterCmdCallback(y.DRAGON_TURTLE_BOMB, this.onSkillExplosion.bind(this)), this.RegisterCmdCallback(y.RED_DRAGON_GET, this.onGetSkill.bind(this)), this.RegisterCmdCallback(y.RED_DRAGON_BOMB, this.onSkillExplosion.bind(this)), this.RegisterCmdCallback(y.TREASURE_CRAB, this.onTreasureCrabEvent.bind(this)), this.RegisterCmdCallback(y.TREASURE_CRAB_INFO, this.onTreasureCrabEvent.bind(this)), this.RegisterCmdCallback(y.SUBMARINE_EVENT, this.onSubmarineEvent.bind(this)), this.RegisterCmdCallback(y.LUCKY_CAT_GET, this.onGetSkill.bind(this)), this.RegisterCmdCallback(y.CLOWN_GET, this.onGetSkill.bind(this)), this.RegisterCmdCallback(y.CLOWN_ODDS, this.onSyncFishOdds.bind(this)), this.RegisterCmdCallback(y.PIG_GET, this.onGetSkill.bind(this)), this.RegisterCmdCallback(y.PIG_BOMB, this.onSkillExplosion.bind(this)), this.RegisterCmdCallback(y.TIGER_GET, this.onGetSkill.bind(this)), this.RegisterCmdCallback(y.BLAZING_TIGER_GET, this.onGetSkill.bind(this)), this.RegisterCmdCallback(y.BLAZING_TIGER_ODDS, this.onSyncFishOdds.bind(this)), this.RegisterCmdCallback(y.BUDDHA_PALM, this.onGetSkill.bind(this)), this.RegisterCmdCallback(y.UPDATE_BUDDHA_PALM, this.onUpdateEnergy.bind(this)), this.RegisterCmdCallback(y.ETERNAL_BOSS, this.onGetMedalEvent.bind(this)), this.RegisterCmdCallback(y.GOLDEN_SLOT_CRAB, this.onGetSlotEvent.bind(this)), this.RegisterCmdCallback(y.FISH_STATUS_SYNC, this.onFishStatusSyncEvent.bind(this)), this.RegisterCmdCallback(y.GOLDEN_TACO_GET, this.onGetSkill.bind(this)), this.RegisterCmdCallback(y.GOLDEN_TACO_BOMB, this.onSkillExplosion.bind(this)), this.RegisterCmdCallback(y.GOLDEN_ANGLER_GET, this.onGetSkill.bind(this)), this.RegisterCmdCallback(y.GOLDEN_ANGLER_BOMB, this.onSkillExplosion.bind(this)), this.RegisterCmdCallback(y.GOLDEN_LACOSTE_GET, this.onGetSkill.bind(this)), this.RegisterCmdCallback(y.GOLDEN_LACOSTE_BOMB, this.onSkillExplosion.bind(this)), this.RegisterCmdCallback(y.ETERNAL_DRAGON_TURTLE_GET, this.onGetSkill.bind(this)), this.RegisterCmdCallback(y.ETERNAL_DRAGON_TURTLE_BOMB, this.onSkillExplosion.bind(this)), this.RegisterCmdCallback(y.THUNDER_DRAGON_EX_GET, this.onGetSkill.bind(this));
                for (let t = 0; t < 4; t++) this.skillList.push(new Array)
            }
            onGetSkill(e, t, i, n, s, a) {
                if (e != ArkSDK.HttpConnect.HttpResult.OK) return void cc.warn("Get skill Fail.");
                if (!t) return void cc.warn("Get skill data is null.");
                let o = t.seat;
                if (a == y.FLAME_STORM_GET ? o = t[2] : a == y.BUDDHA_PALM && S.EventSystem.Event(S.FishHunter.UseBuddhaPalm).Notify(t), h.PlayerManager.Instance.players[o]) {
                    switch (a) {
                        case y.DRILL_GET:
                            this.AddSkill(d.skillEnum.Drill, o, t);
                            break;
                        case y.ELECTRIC_GET:
                            this.AddSkill(d.skillEnum.Electric, o, t);
                            break;
                        case y.KING_CRAB_GET:
                            this.AddSkill(d.skillEnum.AwakenKingSpiderCrab, o, t);
                            break;
                        case y.FLASH_GET:
                            this.AddSkill(d.skillEnum.Flash, o, t);
                            break;
                        case y.WHEEL_GET:
                            this.AddSkill(d.skillEnum.Wheel, o, t);
                            break;
                        case y.WIND_GET:
                            this.AddSkill(d.skillEnum.Wind, o, t);
                            break;
                        case y.MULTI_BOMB_GET:
                            this.AddSkill(d.skillEnum.MultiBomb, o, t);
                            break;
                        case y.KING_TACO_GET:
                        case y.GOLDEN_TACO_GET:
                            this.AddSkill(d.skillEnum.AwakenKingTaco, o, t);
                            break;
                        case y.THUNDER_DRAGON_GET:
                            this.AddSkill(d.skillEnum.ThunderDragon, o, t);
                            break;
                        case y.ROCKET_GET:
                            this.AddSkill(d.skillEnum.Rocket, o, t);
                            break;
                        case y.KING_ANGLER_GET:
                        case y.GOLDEN_ANGLER_GET:
                            this.AddSkill(d.skillEnum.AwakenKingAnglerFish, o, t);
                            break;
                        case y.HAMMER_GET:
                            this.AddSkill(d.skillEnum.Hammer, o, t);
                            break;
                        case y.KING_LACOSTE_GET:
                        case y.GOLDEN_LACOSTE_GET:
                            this.AddSkill(d.skillEnum.AwakenKingLacoste, o, t);
                            break;
                        case y.MERMAID_GET:
                            this.AddSkill(d.skillEnum.AwakenMermaid, o, t);
                            break;
                        case y.PHOENIX_GET:
                            this.AddSkill(d.skillEnum.AwakenPhoenix, o, t);
                            break;
                        case y.BUFFALO_GET:
                            if ("FishKingOfCrab" == SS.Common.GameEnvironment.CurrentGameNow) {
                                this.AddSkill(d.skillEnum.RedDragon, o, t);
                                break
                            }
                            this.AddSkill(d.skillEnum.Buffalo, o, t);
                            break;
                        case y.LUCKY_SHAMROCK_GET:
                            this.AddSkill(d.skillEnum.Patrick, o, t);
                            break;
                        case y.KINGKONG_GET:
                            this.AddSkill(d.skillEnum.KingKong, o, t);
                            break;
                        case y.ROCKSKULL_GET:
                            this.AddSkill(d.skillEnum.RockSkull, o, t);
                            break;
                        case y.VAMPIRE_GET:
                            this.AddSkill(d.skillEnum.Vampire, o, t);
                            break;
                        case y.DRAGON_TURTLE_GET:
                            this.AddSkill(d.skillEnum.DragonTurtle, o, t);
                            break;
                        case y.BUDDHA_GET:
                            this.AddSkill(d.skillEnum.Buddha, o, t);
                            break;
                        case y.LIONDANCE_GET:
                            this.AddSkill(d.skillEnum.LionDance, o, t);
                            break;
                        case y.RED_DRAGON_GET:
                            this.AddSkill(d.skillEnum.RedDragon, o, t);
                            break;
                        case y.SUBMARINE_EVENT:
                            this.AddSkill(d.skillEnum.Submarine, o, t);
                            break;
                        case y.LUCKY_CAT_GET:
                            this.AddSkill(d.skillEnum.LuckyCat, o, t);
                            break;
                        case y.CLOWN_GET:
                            this.AddSkill(d.skillEnum.Clown, o, t);
                            break;
                        case y.PIG_GET:
                            this.AddSkill(d.skillEnum.Pig, o, t);
                            break;
                        case y.TIGER_GET:
                            this.AddSkill(d.skillEnum.Tiger, o, t);
                            break;
                        case y.BLAZING_TIGER_GET:
                            this.AddSkill(d.skillEnum.BlazingTiger, o, t);
                            break;
                        case y.BUDDHA_PALM:
                            this.AddSkill(d.skillEnum.BuddhaPalm, o, t);
                            break;
                        case y.ETERNAL_DRAGON_TURTLE_GET:
                            this.AddSkill(d.skillEnum.EternalDragonTurtle, o, t);
                            break;
                        case y.FLAME_STORM_GET:
                            this.AddSkill(d.skillEnum.FlameStorm, o, t);
                            break;
                        case y.THUNDER_DRAGON_EX_GET:
                            t.hasOwnProperty("win_type") && ("fake_bomb_ultimate" == t.win_type ? this.AddSkill(d.skillEnum.ThunderDragonEx, o, t) : "fake_bomb_small" == t.win_type && (h.PlayerManager.isMainSeat(o) && h.PlayerManager.BulletSync(1), this.AddSkill(d.skillEnum.ThunderDragonEx_Small, o, t)))
                    }
                    if (t.hasOwnProperty("player_info")) {
                        let e = t.player_info;
                        this.UpdateAssetEvent && this.UpdateAssetEvent(e)
                    }
                } else cc.warn("Skill can't find player.")
            }
            AddSkill(e, t, i = null) {
                let n = null,
                    s = null;
                if (e != d.skillEnum.RedDragon && e != d.skillEnum.ThunderDragonEx_Small && (n = this.FindSkill(e, t)), t < this.skillList.length) {
                    let n = l.default.SpawnSkill(e, h.PlayerManager.isMainSeat(t));
                    n ? ((s = n.getComponent(d.default)).SetSkillType(e), s.Init(t, i), this.skillList[t].push(s)) : cc.warn("Can't spawn skill: " + e)
                }
                return n && (cc.warn("\u6280\u80fd\u5df2\u7d93\u5b58\u5728\u4e86"), n.UnUseSkill(), n = null), s
            }
            FindSkill(e, t) {
                if (t >= this.skillList.length) return null;
                for (let i = 0; i < this.skillList[t].length; i++)
                    if (this.skillList[t][i].GetSkillType() == e && !this.skillList[t][i].IsGaveAward()) return this.skillList[t][i]
            }
            RemoveSkill(e, t, i) {
                if (!(t >= this.skillList.length))
                    for (let n = 0; n < this.skillList[t].length; n++)
                        if (this.skillList[t][n].GetSkillType() == e && this.skillList[t][n] == i) {
                            this.skillList[t].splice(n, 1);
                            break
                        }
            }
            RemovePlayerSkill(e) {
                if (!(e >= this.skillList.length))
                    for (let t = this.skillList[e].length - 1; t >= 0; t--) this.skillList[e][t].UnUseSkill()
            }
            checkSkill(e) {
                for (let t = 0; t < this.skillList[e].length; t++)
                    if (this.skillList[e][t].GetSkillType() != d.skillEnum.Lock) return !0;
                return !1
            }
            SendHitFish(e, t) {
                let i = {};
                i.fish = t, this.SendCmd(e, i)
            }
            SendRangeFish(e, t, i) {
                let n = null;
                (n = i || {}).fish = t, this.SendCmd(e, n)
            }
            SendSkillShoot(e, t, i, n) {
                let s = {};
                s.seat = t, s.x = i, s.y = n, this.SendCmd(e, s)
            }
            onSkillExplosion(e, t, i, n, s, a) {
                let o = 0,
                    l = 0;
                if (!t) return void cc.warn("Skill explosion data is null.");
                const r = t.seat;
                if (h.PlayerManager.isMainSeat(r)) {
                    const e = t.credits;
                    h.PlayerManager.BulletSync(null, e)
                }
                let c = null,
                    u = !1;
                switch (a) {
                    case y.KING_CRAB_BOMB:
                        c = this.FindSkill(d.skillEnum.AwakenKingSpiderCrab, r), l = t.total_win, u = !0;
                        break;
                    case y.KING_TACO_BOMB:
                    case y.GOLDEN_TACO_BOMB:
                        c = this.FindSkill(d.skillEnum.AwakenKingTaco, r), l = t.total_win, u = !0;
                        break;
                    case y.MULTI_BOMB_BOMB:
                        c = this.FindSkill(d.skillEnum.MultiBomb, r), o = t.win;
                        break;
                    case y.THUNDER_DRAGON_BOMB:
                        c = this.FindSkill(d.skillEnum.ThunderDragon, r), l = t.total_win, u = !0;
                        break;
                    case y.KING_ANGLER_BOMB:
                    case y.GOLDEN_ANGLER_BOMB:
                        c = this.FindSkill(d.skillEnum.AwakenKingAnglerFish, r), o = t.win;
                        break;
                    case y.KING_LACOSTE_BOMB:
                    case y.GOLDEN_LACOSTE_BOMB:
                        c = this.FindSkill(d.skillEnum.AwakenKingLacoste, r), o = t.win;
                        break;
                    case y.PHOENIX_BOMB:
                        if (!(c = this.FindSkill(d.skillEnum.AwakenPhoenix, r))) {
                            let e = t.fish_dead_dict,
                                i = Object.keys(e);
                            for (let t = 0; t < i.length; t++) o += e[i[t]].coin
                        }
                        break;
                    case y.HAMMER_BOMB:
                        c = this.FindSkill(d.skillEnum.Hammer, r), l = t.total_win, u = !0;
                        break;
                    case y.MERMAID_BOMB:
                        c = this.FindSkill(d.skillEnum.AwakenMermaid, r), o = t.win;
                        break;
                    case y.BUFFALO_BOMB:
                        c = this.FindSkill(d.skillEnum.Buffalo, r), o = t.win;
                        break;
                    case y.LUCKY_SHAMROCK_BOMB:
                        c = this.FindSkill(d.skillEnum.Patrick, r), o = t.win;
                        break;
                    case y.KINGKONG_BOMB:
                        c = this.FindSkill(d.skillEnum.KingKong, r), o = t.win;
                        break;
                    case y.ROCKSKULL_BOME:
                        c = this.FindSkill(d.skillEnum.RockSkull, r), o = t.win;
                        break;
                    case y.DRAGON_TURTLE_BOMB:
                        c = this.FindSkill(d.skillEnum.DragonTurtle, r), o = t.win;
                        break;
                    case y.RED_DRAGON_BOMB:
                        c = this.FindSkill(d.skillEnum.RedDragon, r), o = t.win;
                        break;
                    case y.PIG_BOMB:
                        c = this.FindSkill(d.skillEnum.Pig, r), o = t.win;
                        break;
                    case y.DRILL_HIT:
                        if (!(c = this.FindSkill(d.skillEnum.Drill, r))) {
                            let e = t.fish_dead_dict,
                                i = Object.keys(e);
                            for (let t = 0; t < i.length; t++) o += e[i[t]].coin
                        }
                        break;
                    case y.DRILL_BOMB:
                        c = this.FindSkill(d.skillEnum.Drill, r), l = t.total_win, u = !0;
                        break;
                    case y.ELECTRIC_HIT:
                        c = this.FindSkill(d.skillEnum.Electric, r), l = t.total_win, u = !0;
                        break;
                    case y.FLASH_NEXT:
                        if (null == (c = this.FindSkill(d.skillEnum.Flash, r))) {
                            let e = t.fish_dead_dict,
                                i = Object.keys(e);
                            for (let t = 0; t < i.length; t++) o += e[i[t]].coin
                        }
                        break;
                    case y.ETERNAL_DRAGON_TURTLE_BOMB:
                        c = this.FindSkill(d.skillEnum.EternalDragonTurtle, r), o = t.win
                }
                if (c ? c.ReceiveSkillData(t, a) : h.PlayerManager.Instance.ModifyPlayerWinning(r, o > 0 ? o : l, null), t.hasOwnProperty("player_info") && (0 == t.continue || 0 == t.continues)) {
                    let e = t.player_info;
                    this.UpdateAssetEvent && this.UpdateAssetEvent(e)
                }
            }
            onReceiveSkillData(e, t, i, n, s, a) {
                if (!t) return void cc.warn("Skill data is null.");
                let o = t.seat,
                    l = null,
                    r = 0;
                switch (a) {
                    case y.DRILL_SHOOT:
                        if (!h.PlayerManager.Instance || h.PlayerManager.isMainSeat(o)) return;
                        l = this.FindSkill(d.skillEnum.Drill, o);
                        break;
                    case y.ELECTRIC_SHOOT:
                        if (!h.PlayerManager.Instance || h.PlayerManager.isMainSeat(o)) return;
                        l = this.FindSkill(d.skillEnum.Electric, o);
                        break;
                    case y.FLAMES_TORM_SHOOT:
                        if (!h.PlayerManager.Instance || h.PlayerManager.isMainSeat(o)) return;
                    case y.FLAMES_TORM_END:
                        l = this.FindSkill(d.skillEnum.FlameStorm, o);
                        break;
                    case y.FLAMES_TORM_CHECK:
                        o = t[2], l = this.FindSkill(d.skillEnum.FlameStorm, o);
                        break;
                    case y.FLAMES_TORM_HIT:
                        if (o = t[2], null == (l = this.FindSkill(d.skillEnum.FlameStorm, o))) {
                            let e = t[8],
                                i = Object.keys(e);
                            for (let t = 0; t < i.length; t++) r += e[i[t]].coin
                        }
                        break;
                    case y.WHEEL_CLICK:
                        l = this.FindSkill(d.skillEnum.Wheel, o)
                }
                if (t.hasOwnProperty("player_info")) {
                    let e = t.player_info;
                    this.UpdateAssetEvent && this.UpdateAssetEvent(e)
                }
                l ? l.ReceiveSkillData(t, a) : r > 0 && h.PlayerManager.Instance.ModifyPlayerWinning(o, r, null)
            }
            CreateFlameStorm(e, t, i, n = 0, s = 1) {}
            FlameStormShoot(e, t) {
                const i = {
                    1: e,
                    4: t.x,
                    5: t.y
                };
                this.SendCmd(y.FLAMES_TORM_SHOOT, i)
            }
            FlameStormBlast(e, t, i) {
                const n = {
                    1: e,
                    2: t,
                    6: i
                };
                this.SendCmd(y.FLAMES_TORM_HIT, n)
            }
            OnSkillWeaponHit(e, t, i, n, s, a) {
                if (!t) return void console.warn("[OnSkillWeaponHit] Data is NULL.");
                const l = t[f.WeaponData.seat];
                if (this.CheckBetList(l, t)) return;
                const c = t[f.WeaponData.bet],
                    m = t[f.WeaponData.credits];
                h.PlayerManager.isMainSeat(l) && h.PlayerManager.BulletSync(null, m), this.ParsePuzzelDropEgg(l, t);
                let p = null;
                switch (a) {
                    case y.LOCK_HIT:
                        let e = SS.Common.GameEnvironment.CurrentGameNow == o.FishGame.MF ? u.default.Instance.GetSkillLockLv(l) : d.skillEnum.Lock;
                        p = this.FindSkill(e, l);
                        break;
                    case y.TIGER_HIT:
                        p = this.FindSkill(d.skillEnum.TigerWeapon, l);
                        break;
                    case y.DRAGON_HIT:
                        p = this.FindSkill(d.skillEnum.DragonWeapon, l)
                }
                let S = t[f.WeaponData.fish_id];
                if (!S) {
                    let e = Object.keys(t[f.WeaponData.fish_dead_dict]);
                    S = parseInt(e[0])
                }
                if (p && p.onHitFish(c, l, S), t.hasOwnProperty("player_info")) {
                    let e = t.player_info;
                    this.UpdateAssetEvent && this.UpdateAssetEvent(e)
                }
                const _ = t[f.WeaponData.feature],
                    C = t.hit_fish_id_list[0];
                g.GameLogMainPlayer.pushHit(C, c, l);
                let I = t[f.WeaponData.fish_dead_dict];
                null == I || I.length <= 0 ? r.default.Instance.IsEternalFish(t.hit_fish_id_list) ? h.PlayerManager.isMainSeat(l) && setTimeout(() => {
                    h.PlayerManager.BulletSync(-1)
                }, 1e3) : h.PlayerManager.isMainSeat(l) && h.PlayerManager.BulletSync(-1) : (Object.keys(I).length > 1 && h.PlayerManager.isMainSeat(l) && h.PlayerManager.BulletSync(Object.keys(I).length - 1), this.SolveDieFish(l, c, _, I))
            }
            CheckBetList(e, t) {
                if (t.hasOwnProperty("result")) {
                    let i = t.result;
                    if (t.hasOwnProperty("betRange") && t.hasOwnProperty("bet")) {
                        let n = t.betRange,
                            s = 0;
                        t.hasOwnProperty("bet") && (s = t.bet), h.PlayerManager.isMainSeat(e) && h.PlayerManager.Instance.CheckBetList(e, n, i, s)
                    }
                    if (-1 == i) return !0
                }
                return !1
            }
            ParsePuzzelDropEgg(e, t) {
                if (t.hasOwnProperty("puzzle_ack") && t.hasOwnProperty("hit_fish_id_list")) {
                    const i = t.puzzle_ack,
                        n = t.hit_fish_id_list[0];
                    i.hasOwnProperty("900005") && s.default.Instance.ParsePuzzelDropEgg(e, h.PlayerManager.isMainSeat(e), i, n)
                }
            }
            SolveDieFish(e, t, i, s) {
                const a = Object.keys(s);
                for (let l = 0; l < a.length; l++) {
                    let c = s[a[l]],
                        d = c[f.WeaponData.fs_item_dict],
                        u = c[f.WeaponData.coin],
                        m = c.hasOwnProperty(f.WeaponData.feature) ? c[f.WeaponData.feature] : i,
                        p = cc.Vec2.ZERO,
                        S = r.default.Instance.GetFishByID(a[l].toString());
                    if (S) S.IsFeatureFish && (m = !0), m && !o.default.KillableFeatureFish(S.Type) || r.default.Instance.KillFish(e, S, u, t, null, null, null, c), o.default.getFishType(S.Type) == o.FishType.WealthGod ? (p = n.default.isReverse ? cc.v2(0, -100) : cc.v2(0, 100), setTimeout(() => {
                        this.CallDropItem(e, d, p, !1)
                    }, 5e3)) : this.CallDropItem(e, d, p, !1);
                    else if (u > 0 && h.PlayerManager.Instance.ModifyPlayerWinning(e, u), h.PlayerManager.isMainSeat(e)) {
                        let t, i;
                        Math.random() > .5 ? (t = Math.floor(1136 * Math.random() - 568), i = Math.random() > .5 ? 350 : -320) : (t = Math.random() > .5 ? 600 : -600, i = Math.floor(660 * Math.random() - 320)), p = cc.v2(t, i), this.CallDropItem(e, d, p)
                    }
                }
            }
            CallDropItem(e, t, i, n = !0) {
                if (null != t) {
                    let n = t.freeze_amount,
                        s = t.summon_amount;
                    Object.keys(t).forEach(a => {
                        if (a == p.ITEM_ID.FREEZE || a == p.ITEM_ID.SUMMON) {
                            let o = t[a];
                            o > 0 && c.default.Instance.DropItemEffect(e, a, o, i, !0, null, n, s)
                        }
                    })
                }
            }
            SendLockHit(e, t, i, n) {
                let s = {};
                s[f.WeaponData.id] = i, s[f.WeaponData.seat] = e, s[f.WeaponData.bet] = t, s[f.WeaponData.fish_id] = n, this.SendCmd(y.LOCK_HIT, s, !1, e)
            }
            SendTigerHit(e, t, i, n) {
                let s = {};
                s[f.WeaponData.id] = i, s[f.WeaponData.seat] = e, s[f.WeaponData.bet] = t, s[f.WeaponData.fish_id] = n, this.SendCmd(y.TIGER_HIT, s, !1, e)
            }
            SendDragonHit(e, t, i, n, s) {
                let a = {};
                a[f.WeaponData.id] = i, a[f.WeaponData.seat] = e, a[f.WeaponData.bet] = t, a[f.WeaponData.fish_id] = s, a[f.WeaponData.fish_id_list] = n, this.SendCmd(y.DRAGON_HIT, a, !1, e)
            }
            SendStopWheel(e) {
                let t = {};
                t.click = e, this.SendCmd(y.WHEEL_CLICK, t)
            }
            onSyncFishOdds(e, t) {
                if (t.hasOwnProperty("Vampire_odds")) {
                    let e = t.Vampire_odds;
                    r.default.Instance.UniqueFishOddsEvent(e, o.FishType.Vampire)
                }
                if (t.hasOwnProperty("LuckyBuddha_odds")) {
                    let e = t.LuckyBuddha_odds;
                    r.default.Instance.UniqueFishOddsEvent(e, o.FishType.Buddha)
                }
                if (t.hasOwnProperty("CircusClown_odds")) {
                    let e = t.CircusClown_odds;
                    r.default.Instance.UniqueFishOddsEvent(e, o.FishType.CircusClown)
                }
                if (t.hasOwnProperty("FlamingTiger_odds")) {
                    let e = t.FlamingTiger_odds;
                    r.default.Instance.UniqueFishOddsEvent(e, o.FishType.BlazingTiger)
                }
            }
            SendCustomCmd(e, t) {
                this.SendCmd(e, t)
            }
            onTreasureCrabEvent(e, t) {
                if (t.hasOwnProperty("treasure_score") && r.default.Instance.getUniqueFishData(o.FishType.TreasureCrab).setTargetNumber(t.treasure_score), t.hasOwnProperty("win_type")) {
                    const e = t.seat;
                    switch (t.win_type) {
                        case "capture":
                            const i = t.id;
                            let n = r.default.Instance.GetFishByID(i);
                            const s = t.win,
                                a = t.bet;
                            r.default.Instance.KillFish(e, n, s, a);
                            break;
                        case "upgrade":
                            h.PlayerManager.isMainSeat(e) && h.PlayerManager.BulletSync(1), r.default.Instance.getUniqueFishData(o.FishType.TreasureCrab).TreasureCrabLevelUp(t)
                    }
                }
            }
            onSubmarineEvent(e, t) {
                if (t.hasOwnProperty("win_type")) {
                    const e = t.seat,
                        i = t.win_type,
                        n = t.bet;
                    switch (i) {
                        case "small":
                            let s = t.win_odds_list[0];
                            const o = t.id;
                            let l = r.default.Instance.GetFishByID(o);
                            a.default.Instance.SmallTreasure(l ? l.node : null, s, n, e);
                            break;
                        case "big":
                            let c = t.win_odds_list[0];
                            const h = t.id;
                            let d = r.default.Instance.GetFishByID(h);
                            a.default.Instance.BigTreasure(d ? d.node : null, c, n, e);
                            break;
                        case "versus1":
                        case "versus2":
                        case "capture":
                            this.onGetSkill(0, t, null, null, null, y.SUBMARINE_EVENT)
                    }
                }
            }
            onGetMedalEvent(e, t) {
                let i = r.default.Instance.GetFishByID(t.fish);
                if (!i) return void console.error("onGetMedalEvent can't find target fish, fish id = ", t.fish);
                let n = t.win_type;
                if ("kill" == n) switch (o.default.getFishType(i.Type)) {
                    case o.FishType.EternalSquid:
                        return g.GameLogMainPlayer.pushWinning(i.Type, t.bet, t.seat, t.win, !0), void a.default.Instance.EternalSquidAward(i, t.win, t.bet, t.seat, !0);
                    case o.FishType.GeneralLobster:
                        if (2 == t.old_level) return g.GameLogMainPlayer.pushWinning(i.Type, t.bet, t.seat, t.win, !0), void a.default.Instance.GeneralLobsterAward(i, t.win, t.bet, t.seat, !0);
                        break;
                    case o.FishType.ArmorKingCrab:
                        return g.GameLogMainPlayer.pushWinning(i.Type, t.bet, t.seat, t.win, !0), i.FishDie(t.seat), a.default.Instance.BossAward(i, t.win, t.bet, t.seat, !0), void r.default.Instance.recycleUniqueFishData(o.FishType.ArmorKingCrab);
                    case o.FishType.KingJellyFish:
                    case o.FishType.KingSquid:
                        return g.GameLogMainPlayer.pushWinning(i.Type, t.bet, t.seat, t.win, !0), void a.default.Instance.BossAward(i, t.win, t.bet, t.seat, !0)
                }
                let s = t.win_type;
                "kill" != s && "big" != s || (s = "middle");
                let c = t.win,
                    d = t.bet,
                    u = t.seat;
                if (h.PlayerManager.isMainSeat(u) && h.PlayerManager.BulletSync(1), i) {
                    let e = null;
                    switch (o.default.getFishType(i.Type)) {
                        case o.FishType.GeneralLobster:
                            if (g.GameLogMainPlayer.pushWinning(i.Type, t.bet, t.seat, t.win, !1), e = a.default.Instance.MedalAward(s, i, c, d, u, !0), t.hasOwnProperty("new_level") && t.hasOwnProperty("old_level") && t.new_level > t.old_level) {
                                i.changeLevel(t.new_level);
                                let n = l.default.SpawnAward("LevelUpMedal", h.PlayerManager.isMainSeat(u));
                                n.setParent(e.node), n.getComponent(cc.Animation).play()
                            }
                            break;
                        case o.FishType.ArmorKingCrab:
                            if (g.GameLogMainPlayer.pushWinning(i.Type, t.bet, t.seat, t.win, !1), "big" == n) {
                                let e = !!t.hasOwnProperty("multiple") && t.multiple > 1;
                                a.default.Instance.ArmorCrabBigMedal(i, c, d, u, e)
                            } else a.default.Instance.MedalAward(s, i, c, d, u, !0);
                            let m = {};
                            t.hasOwnProperty("hp") && (m.hp = t.hp), t.hasOwnProperty("new_level") && (m.level = t.new_level), r.default.Instance.GetFishByType(o.FishType.ArmorKingCrab) && r.default.Instance.getUniqueFishData(o.FishType.ArmorKingCrab).setCustomData(m);
                            break;
                        case o.FishType.KingSquid:
                        case o.FishType.KingJellyFish:
                            t.hasOwnProperty("size") && i.changeLevel(t.size);
                        default:
                            g.GameLogMainPlayer.pushWinning(i.Type, t.bet, t.seat, t.win, !1), e = a.default.Instance.MedalAward(s, i, c, d, u, !0)
                    }
                }
            }
            onGetSlotEvent(e, t) {
                g.GameLogMainPlayer.pushWinning(115, t.bet, t.seat, t.win, !1);
                let i = t.seat;
                h.PlayerManager.isMainSeat(i) && h.PlayerManager.BulletSync(1);
                let n = d.skillEnum.GoldenSlot,
                    s = this.FindSkill(n, i);
                if (s) s.ReceiveSkillData(t);
                else {
                    let e = l.default.SpawnSkill(n, h.PlayerManager.isMainSeat(i));
                    h.PlayerManager.isMainSeat(i) ? e.setParent(l.default.Instance.Effects_own) : e.setParent(l.default.Instance.Effects), e ? ((s = e.getComponent(d.default)).SetSkillType(n), s.Init(i, t), this.skillList[i].push(s), s.ReceiveSkillData(t)) : cc.warn("Can't spawn skill: " + n)
                }
            }
            onFishStatusSyncEvent(e, t) {
                switch (SS.Common.GameEnvironment.CurrentGameNow) {
                    case o.FishGame.KC:
                    case o.FishGame.LL:
                        let e = r.default.Instance.GetFishByType(o.FishType.GeneralLobster);
                        e && e.setExdata(t);
                        break;
                    case o.FishGame.GO:
                        if (t.hasOwnProperty("ARMOR_KING_SPIDER_CRAB")) {
                            let e = t.ARMOR_KING_SPIDER_CRAB;
                            r.default.Instance.GetFishByType(o.FishType.ArmorKingCrab) && r.default.Instance.getUniqueFishData(o.FishType.ArmorKingCrab).setCustomData(e)
                        }
                        if (t.hasOwnProperty("GOLDEN_MEDUSA")) {
                            let e = r.default.Instance.GetFishByID(t.GOLDEN_MEDUSA.fish_id);
                            e && e.changeLevel(t.GOLDEN_MEDUSA.size)
                        }
                        if (t.hasOwnProperty("GOLDEN_SQUID")) {
                            let e = r.default.Instance.GetFishByID(t.GOLDEN_SQUID.fish_id);
                            e && e.changeLevel(t.GOLDEN_SQUID.size)
                        }
                }
            }
            onUpdateEnergy(e, t, i, n, s, a) {
                t.hasOwnProperty("BuddhaPalm") && S.EventSystem.Event(S.FishHunter.UpdateBuddhaPalm).Notify(t.BuddhaPalm)
            }
        }, cc._RF.pop()
    }, {
        "../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../../../../LobbyCommon/Helper/EventSystem": void 0,
        "../Event/EventPuzzleDropEggMgr": "EventPuzzleDropEggMgr",
        "../GameClient/Player": "Player",
        "../MainGame/Award/AwardManager": "AwardManager",
        "../MainGame/Common/EnumFilter": "EnumFilter",
        "../MainGame/Common/ResourceManager": "ResourceManager",
        "../MainGame/Fish/FishManager": "FishManager",
        "../MainGame/Item/ItemManager": "ItemManager",
        "../MainGame/Player/PlayerManager": "PlayerManager",
        "../MainGame/Skill/BaseSkill": "BaseSkill",
        "../MainGame/Weapon/WeaponManager": "WeaponManager",
        "./ItemSystem": "ItemSystem",
        "./WeaponSystem": "WeaponSystem",
        "./baseSystem": "baseSystem"
    }],
    SkillTaco: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "a2a5bVyv4FMGpvivkGQv7zj", "SkillTaco");
        var n = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            s = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            o = e("../../GameClient"),
            l = e("../Common/AudioManager"),
            r = e("../Common/EnumFilter"),
            c = e("../Common/ResourceManager"),
            h = e("../Fish/FishManager"),
            d = e("../Player/PlayerManager"),
            u = e("../Weapon/WeaponManager"),
            m = e("./BaseSkill"),
            {
                ccclass: p,
                property: f
            } = cc._decorator;
        var S;
        (function(e) {
            e[e.None = 0] = "None", e[e.Explosion = 1] = "Explosion", e[e.ShowScore = 2] = "ShowScore"
        })(S || (S = {}));
        let g = class extends m.default {
            constructor() {
                super(...arguments), this.explosion_anim = null, this.burst_anim = null, this.number_anim = null, this.number_label = null, this.totem_node = null, this.Tacos = [], this.multi_List = [], this.multi_index = 0, this.id = "", this.Taco = null, this.SkillState = S.None, this.isGetKillFish = !1, this.Timer = 0
            }
            onLoad() {
                this.skillType = m.skillEnum.AwakenKingTaco, this.limitTime = 100
            }
            update(e) {
                this.ChackExplodeData(e)
            }
            InitProperties(e = null) {
                super.InitProperties(), this.multi_index = 0, this.totem_node.active = !1, this.explosion_anim.node.active = !1, this.burst_anim.node.active = !1, this.number_anim.node.active = !1, this.number_anim.node.setPosition(cc.Vec2.ZERO), this.number_anim.node.angle = 0, this.id = "", this.Timer = 0, this.isGetKillFish = !1, this.SkillState = S.None, this.id = e.id, this.playerBet = e.bet, this.multi_List = e.multi
            }
            UseSkill() {
                this.Taco = h.default.Instance.GetFishByID(this.id), this.Taco ? this.SkillProcess(this.Taco.node.parent.getPosition(), this.playerSeat) : cc.warn("[InitInfo] Crab is Null!")
            }
            UnUseSkill() {
                super.UnUseSkill(), this.number_anim.node.parent = this.node, this.Taco = null, this.explosion_anim.stop(), this.burst_anim.stop(), this.number_anim.stop();
                for (let e = 0; e < this.Tacos.length; e++) this.Tacos[e].stop(), this.Tacos[e].node.opacity = 0
            }
            ReceiveSkillData(e) {
                if (this.id != e.id) return void cc.warn("[InitExplosion] ID isn't current!");
                this.totalWin = e.total_win;
                const t = e.fish_dead_dict,
                    i = Object.keys(t);
                for (let n = 0; n < i.length; n++) {
                    const e = i[n],
                        s = h.default.Instance.GetFishByID(e);
                    s && (this.dieFishList.push(s), this.winList.push(t[e].coin))
                }
                this.isGetKillFish = !0
            }
            SkillProcess(e, t) {
                return s(this, void 0, void 0, function*() {
                    this.Taco && this.Taco.FishDie(t), yield this.delay(2e3), this.node.setPosition(e), this.node.angle = a.default.isReverse ? 180 : 0, this.totem_node.opacity = 0, this.totem_node.active = !0, this.node.runAction(cc.sequence(cc.callFunc(() => {
                        c.default.SpawnEffect(r.EffectType.BallFire, this.isMainPlayer).setPosition(this.node.getPosition()), this.totem_node.runAction(cc.sequence(cc.delayTime(1), cc.fadeIn(1)))
                    }), cc.delayTime(1), cc.callFunc(() => {
                        l.default.Instance.Fade(l.default.Instance.GetBGMID(), 1, 0), this.bgmID = l.default.Instance.Play("BOSS_out01", 1, !0), l.default.Instance.Fade(this.bgmID, 0, 1)
                    }), cc.moveTo(2, cc.v2(0, 0)), cc.callFunc(() => {
                        this.CreateSkillTitle(), l.default.Instance.Play("jump_01"), this.explosion_anim.node.active = !0, this.number_anim.node.active = !0, this.number_anim.node.runAction(cc.sequence(cc.callFunc(() => {
                            this.number_label.string = "x" + this.multi_List[this.multi_index]
                        }), cc.scaleTo(0, 2), cc.scaleTo(1, 1))), this.totem_node.runAction(cc.sequence(cc.scaleTo(0, 2.5), cc.scaleTo(1, 1.3)))
                    }), cc.delayTime(1), cc.callFunc(() => {
                        this.TacoAttackShow(t, this.multi_List)
                    })))
                })
            }
            TacoAttackShow(e, t) {
                this.node.runAction(cc.sequence(cc.repeat(cc.sequence(cc.callFunc(() => {
                    this.Tacos[0].node.opacity = 255, this.Tacos[3].node.opacity = 255, this.Tacos[0].play(), this.Tacos[3].play()
                }), cc.delayTime(.233), cc.callFunc(() => {
                    this.TotemHurtShow(t, 2)
                }), cc.delayTime(1.7), cc.callFunc(() => {
                    this.Tacos[2].node.opacity = 255, this.Tacos[5].node.opacity = 255, this.Tacos[2].play(), this.Tacos[5].play()
                }), cc.delayTime(.233), cc.callFunc(() => {
                    this.TotemHurtShow(t, 2)
                }), cc.delayTime(1.7)), 2), cc.callFunc(() => {
                    this.SkillState = S.Explosion
                })))
            }
            ExplodeShow() {
                return s(this, void 0, void 0, function*() {
                    let e = 0;
                    for (let t = 0; t < this.Tacos.length; t++) this.Tacos[t].node.opacity = 255, this.Tacos[t].play();
                    yield this.delay(233.3), this.TotemHurtShow(this.multi_List, 1, !0), this.number_anim.play("Number"), this.totem_node.active = !1, e = this.KillFishesAndShowAward(), yield this.delay(1e3 * e), this.ShowScore()
                })
            }
            ShowScore() {
                return s(this, void 0, void 0, function*() {
                    if (this.isMainPlayer && 0 == this.totalWin) return void o.default.Instance.CallOnError("C44", "SkillZeroWin");
                    let e = 0;
                    e = a.default.isReverse ? this.playerSeat > 1 ? 120 : -120 : this.playerSeat > 1 ? -120 : 120, this.ShowSkillScore(this.totalWin / this.multi_List[this.multi_index]), yield this.delay(1700), this.number_anim.node.parent = c.default.Instance.Effects, this.number_anim.node.zIndex = 50, this.number_anim.node.angle = d.PlayerManager.MainSeat > 1 ? 180 : 0;
                    let t = d.PlayerManager.MainSeat > 1 ? -1 : 1,
                        i = u.default.WeaponUIPosition(this.playerSeat).add(new cc.Vec2(0, e)).scale(new cc.Vec2(t, t));
                    this.number_anim.stop(), this.number_anim.node.runAction(cc.moveTo(1.5, i)), yield this.delay(1500), this.number_label.string = "", this.multi_List[this.multi_index] > 1 ? (this.number_anim.node.stopAllActions(), this.SetSkillScore(this.totalWin, 3), yield this.delay(3e3), this.PlayAwardSound()) : this.PlayAwardSound(), yield this.delay(1e3), this.UnUseSkill()
                })
            }
            TotemHurtShow(e, t, i = !1) {
                if (i) return this.burst_anim.node.active = !0, this.burst_anim.play("Burst"), l.default.Instance.Play("TD_Explode"), l.default.Instance.Stop(this.bgmID), this.bgmID = null, l.default.Instance.Play("BOSS_out02"), l.default.Instance.Fade(l.default.Instance.GetBGMID(), 0, 1), void this.CameraShakeEffect(3, 2);
                this.explosion_anim.play("Explosion"), this.CameraShakeEffect(1, 3), this.number_anim.node.runAction(cc.repeat(cc.sequence(cc.callFunc(() => {
                    this.multi_index++, this.multi_index >= e.length && (this.multi_index = e.length - 1), this.number_label.string = "x" + e[this.multi_index]
                }), cc.scaleTo(0, 2), cc.scaleTo(.5, 1)), t)), this.totem_node.runAction(cc.repeat(cc.sequence(cc.callFunc(() => {
                    if (!i) {
                        let e = this.multi_index > 9 ? 9 : this.multi_index;
                        l.default.Instance.Play("jump_0" + e.toString())
                    }
                }), cc.scaleTo(0, 2.5), cc.scaleTo(.5, 1.3)), t))
            }
            ChackExplodeData(e) {
                if (this.SkillState != S.None)
                    if (this.Timer += e, this.isGetKillFish) {
                        switch (this.SkillState) {
                            case S.Explosion:
                                this.ExplodeShow();
                                break;
                            case S.ShowScore:
                                this.ShowScore()
                        }
                        this.SkillState = S.None
                    } else this.Timer >= 10 ? this.UnUseSkill() : this.Timer >= 5 && (this.SkillState = S.ShowScore)
            }
        };
        n([f(cc.Animation)], g.prototype, "explosion_anim", void 0), n([f(cc.Animation)], g.prototype, "burst_anim", void 0), n([f(cc.Animation)], g.prototype, "number_anim", void 0), n([f(cc.Label)], g.prototype, "number_label", void 0), n([f(cc.Node)], g.prototype, "totem_node", void 0), n([f([cc.Animation])], g.prototype, "Tacos", void 0), g = n([p], g), i.default = g, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../../GameClient": "GameClient",
        "../Common/AudioManager": "AudioManager",
        "../Common/EnumFilter": "EnumFilter",
        "../Common/ResourceManager": "ResourceManager",
        "../Fish/FishManager": "FishManager",
        "../Player/PlayerManager": "PlayerManager",
        "../Weapon/WeaponManager": "WeaponManager",
        "./BaseSkill": "BaseSkill"
    }],
    SkillThunderDragon: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "8dfa2h62zVFU5ow7ehkq1pp", "SkillThunderDragon");
        var n = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            s = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("./BaseSkill"),
            o = e("../Player/PlayerManager"),
            l = e("../Fish/FishManager"),
            r = e("../Common/ResourceManager"),
            c = e("../Weapon/WeaponManager"),
            h = e("../Common/AudioManager"),
            d = e("../../GameClient"),
            u = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            m = e("../../GameClient/Player");
        var p;
        (function(e) {
            e[e.None = 0] = "None", e[e.Explosion = 1] = "Explosion", e[e.ShowScore = 2] = "ShowScore"
        })(p || (p = {}));
        const {
            ccclass: f,
            property: S
        } = cc._decorator;
        let g = class extends a.default {
            constructor() {
                super(...arguments), this.explosion_anim = null, this.number_anim = null, this.number_label = null, this.totem_node = null, this.spine_node = null, this.SkillState = p.None, this.multi_index = 0, this.multi_list = null, this.id = "", this.isGetKillFish = !1, this.Timer = 0, this.spine_list = null, this.spine_anim_config = [
                    [],
                    [90, -90, 0, 0, 0, 0, 0, 0],
                    [0, 0, 1, -180, 0, 0, 0, 0],
                    [90, 0, 0, 0, -135, 0, 0, -90],
                    [0, 135, -90, 0, 0, -1, -180, 0],
                    [1, 72, 144, 216, 288, 45, 90, 135]
                ]
            }
            onLoad() {
                this.limitTime = 30, this.spine_list = this.spine_node.getComponentsInChildren(sp.Skeleton), this.spine_list.forEach(e => {
                    e.setCompleteListener(() => {
                        e.node.active = !1
                    })
                })
            }
            update(e) {
                this.ChackExplodeData(e)
            }
            InitProperties(e = null) {
                super.InitProperties(), this.multi_index = 0, this.multi_list = [], this.totem_node.active = !1, this.totem_node.scale = 1, this.explosion_anim.node.active = !1, this.number_anim.node.active = !1, this.number_anim.node.setPosition(cc.Vec2.ZERO), this.number_anim.node.angle = 0, this.id = "", this.SkillState = p.None, this.isGetKillFish = !1, this.Timer = 0, this.id = e.id, this.playerBet = e.bet, this.multi_list = e.multi
            }
            UseSkill() {
                return s(this, void 0, void 0, function*() {
                    h.default.Instance.Play("42_dragon_blow");
                    const e = l.default.Instance.GetFishByID(this.id);
                    if (!e) return void cc.warn("[InitInfo] Dragon is Null!");
                    e.CanCollision = !1, e.PlayDieAnim(), yield this.delay(2e3);
                    let t = this.node.parent.convertToNodeSpaceAR(e.getFishPos());
                    h.default.Instance.Play("41_catch_bigfish");
                    const i = r.default.SpawnEffect("7", this.isMainPlayer);
                    i && (i.scale = 2, i.setPosition(t)), yield this.delay(750), this.InitTotem(t)
                })
            }
            UnUseSkill() {
                super.UnUseSkill(), this.multi_list = null, this.number_anim.node.parent = this.node, this.explosion_anim.stop(), this.number_anim.stop()
            }
            ReceiveSkillData(e) {
                if (this.id != e.id) return void cc.warn("[InitExplosion] ID isn't current!");
                this.totalWin = e.total_win;
                const t = e.fish_dead_dict,
                    i = Object.keys(t);
                for (let n = 0; n < i.length; n++) {
                    const e = i[n],
                        s = l.default.Instance.GetFishByID(e);
                    s && (this.dieFishList.push(s), this.winList.push(t[e].coin))
                }
                this.isGetKillFish = !0, cc.error(e), m.GameLogMainPlayer.pushWinning(this.id, this.playerBet, this.playerSeat, e.total_win, !0)
            }
            InitTotem(e) {
                this.node.setPosition(e), this.node.angle = u.default.isReverse ? 180 : 0, this.node.runAction(cc.sequence(cc.callFunc(() => {
                    this.totem_node.active = !0
                }), cc.callFunc(() => {
                    h.default.Instance.Fade(h.default.Instance.GetBGMID(), 1, 0), this.bgmID = h.default.Instance.Play("TD_Out01_1", .8), cc.audioEngine.setFinishCallback(this.bgmID, () => {
                        this.bgmID = null, h.default.Instance.Fade(h.default.Instance.GetBGMID(), 0, 1)
                    }), h.default.Instance.Fade(this.bgmID, 0, 1)
                }), cc.moveTo(1.5, cc.v2(0, 0)), cc.delayTime(.5), cc.callFunc(() => {
                    this.explosion_anim.node.active = !0, this.explosion_anim.play("Explosion"), this.number_anim.node.active = !0, this.DragonBallHit(), this.CreateSkillTitle(), this.SetMainAnim()
                })))
            }
            SetMainAnim() {
                return s(this, void 0, void 0, function*() {
                    let e = 1;
                    this.node.runAction(cc.sequence(cc.repeat(cc.sequence(cc.delayTime(1.5), cc.callFunc(() => {
                        e <= 4 && this.SetSpineAnimByConfig(e), e++
                    })), 4), cc.repeat(cc.sequence(cc.delayTime(.3), cc.callFunc(() => {
                        this.SetSpineAnimByRandom(4)
                    })), 4))), yield this.delay(8e3), this.SkillState = p.Explosion
                })
            }
            ExplodeShow() {
                return s(this, void 0, void 0, function*() {
                    this.explosion_anim.play("Explosion"), this.number_anim.play("Number"), this.totem_node.active = !1, h.default.Instance.Play("TD_Explode");
                    let e = this.KillFishesAndShowAward();
                    this.CameraShakeEffect(1, 4), this.node.runAction(cc.repeat(cc.sequence(cc.callFunc(() => {
                        this.SmallBlast()
                    }), cc.delayTime(1.5)), 2)), yield this.delay(1e3 * e), this.ShowScore()
                })
            }
            ShowScore() {
                return s(this, void 0, void 0, function*() {
                    if (this.isMainPlayer && 0 == this.totalWin) return void d.default.Instance.CallOnError("C44", "SkillZeroWin");
                    let e = 0;
                    e = u.default.isReverse ? this.playerSeat > 1 ? 120 : -120 : this.playerSeat > 1 ? -120 : 120, this.ShowSkillScore(Math.ceil(this.totalWin / this.multi_list[this.multi_index])), yield this.delay(3e3), this.number_anim.node.parent = r.default.Instance.Effects, this.number_anim.node.zIndex = 50, this.number_anim.node.angle = o.PlayerManager.MainSeat > 1 ? 180 : 0;
                    let t = o.PlayerManager.MainSeat > 1 ? -1 : 1,
                        i = c.default.WeaponUIPosition(this.playerSeat).add(new cc.Vec2(0, e)).scale(new cc.Vec2(t, t));
                    this.number_anim.stop(), this.number_anim.node.runAction(cc.sequence(cc.moveTo(1.5, i), cc.callFunc(() => s(this, void 0, void 0, function*() {
                        this.number_label.string = "", this.multi_list[this.multi_index] > 1 ? (this.number_anim.node.stopAllActions(), this.SetSkillScore(this.totalWin, 3), yield this.delay(3e3), this.PlayAwardSound()) : this.PlayAwardSound(), yield this.delay(1e3), this.UnUseSkill()
                    }))))
                })
            }
            SmallBlast() {
                for (let e = 0; e < 15; e++) {
                    let e = r.default.SpawnEffect("Blue_Blast", this.isMainPlayer);
                    if (!e) continue;
                    let t = new cc.Vec2(568 * Math.random() * (Math.random() >= .5 ? 1 : -1), 320 * Math.random() * (Math.random() >= .5 ? 1 : -1)),
                        i = 1.5 * Math.random() + 1,
                        n = Math.random();
                    e.active = !1, e.setPosition(t), e.scale = i, this.node.runAction(cc.sequence(cc.delayTime(n), cc.callFunc(() => {
                        e.active = !0, e.getComponent(cc.Animation).play("Blast")
                    })))
                }
            }
            SetSpineAnimByConfig(e) {
                return s(this, void 0, void 0, function*() {
                    if (e >= this.spine_anim_config.length) return;
                    const t = this.spine_anim_config[e];
                    for (let e = 0; e < this.spine_list.length; e++) {
                        const i = t[e];
                        if (0 != i) {
                            const t = this.spine_list[e];
                            t.node.active = !0, t.node.angle = -i, t.setAnimation(0, "SWIM", !1)
                        }
                    }
                    yield this.delay(500), this.multi_index++, this.DragonBallHit(), yield this.delay(200), this.multi_list[this.multi_index] != this.multi_list[this.multi_index + 1] && (this.multi_index++, this.DragonBallHit(!0))
                })
            }
            SetSpineAnimByRandom(e) {
                return s(this, void 0, void 0, function*() {
                    const t = this.spine_anim_config[5];
                    let i = !1;
                    for (let n = this.spine_list.length - 1; n >= 0; n--) {
                        const s = t[n],
                            a = this.spine_list[n];
                        if (!a.node.active && (a.node.active = !0, a.node.angle = -s, a.setAnimation(0, "SWIM", !1), i = !0, --e <= 0)) break;
                        yield this.delay(100)
                    }
                    if (i)
                        for (let e = 0; e < 1; e++) this.multi_index++, this.DragonBallHit(), yield this.delay(350)
                })
            }
            DragonBallHit(e = !1) {
                return s(this, void 0, void 0, function*() {
                    this.CameraShakeEffect(1, 3), this.multi_index == this.multi_list.length && (this.multi_index = this.multi_list.length - 1), this.number_label.string = "x" + this.multi_list[this.multi_index];
                    let t = this.multi_index > 9 ? 9 : this.multi_index;
                    0 == t && (t = 1), h.default.Instance.Play("jump_0" + t.toString()), e || this.totem_node.runAction(cc.sequence(cc.scaleTo(0, 2), cc.scaleTo(.25, 1))), this.number_anim.node.runAction(cc.sequence(cc.scaleTo(0, 1.5), cc.scaleTo(.25, 1)))
                })
            }
            ChackExplodeData(e) {
                if (this.SkillState != p.None)
                    if (this.Timer += e, this.isGetKillFish) {
                        switch (this.SkillState) {
                            case p.Explosion:
                                this.ExplodeShow();
                                break;
                            case p.ShowScore:
                                this.ShowScore()
                        }
                        this.SkillState = p.None
                    } else this.Timer >= 10 ? this.UnUseSkill() : this.Timer >= 5 && (this.SkillState = p.ShowScore)
            }
        };
        n([S(cc.Animation)], g.prototype, "explosion_anim", void 0), n([S(cc.Animation)], g.prototype, "number_anim", void 0), n([S(cc.Label)], g.prototype, "number_label", void 0), n([S(cc.Node)], g.prototype, "totem_node", void 0), n([S(cc.Node)], g.prototype, "spine_node", void 0), g = n([f], g), i.default = g, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../../GameClient": "GameClient",
        "../../GameClient/Player": "Player",
        "../Common/AudioManager": "AudioManager",
        "../Common/ResourceManager": "ResourceManager",
        "../Fish/FishManager": "FishManager",
        "../Player/PlayerManager": "PlayerManager",
        "../Weapon/WeaponManager": "WeaponManager",
        "./BaseSkill": "BaseSkill"
    }],
    SkillTigerWeapon: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "59c01u5tx1P7bExM+i6twUb", "SkillTigerWeapon");
        var n = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            s = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            o = e("../../../../../LobbyCommon/Net/LobbyClient"),
            l = e("../../../../../LobbyCommon/PopupMessage/Script/PopupMsgMgr"),
            r = e("../../GameClient"),
            c = e("../Common/EnumFilter"),
            h = e("../Common/ResourceManager"),
            d = e("../Fish/FishManager"),
            u = e("../Player/PlayerManager"),
            m = e("../Weapon/TigerBullet"),
            p = e("../Weapon/WeaponManager"),
            f = e("./BaseSkill"),
            {
                ccclass: S,
                property: g
            } = cc._decorator;
        let y = class extends f.default {
            constructor() {
                super(...arguments), this.LockAiming = null, this.player = null, this.targetFish = null, this.targetType = -1, this.lastType = null, this.touchFishID = "", this.mWeapon = null, this.betScale = 2, this.unhitList = null, this.StartPos = cc.Vec2.ZERO, this.ShootPos = cc.Vec2.ZERO, this.attackRate = .1666667, this.attackTimer = 0, this.isTouchHold = !1
            }
            onLoad() {
                this.skillType = f.skillEnum.TigerWeapon, this.limitTime = 0
            }
            onEnable() {
                this.isMainPlayer && (this.lastType && (this.targetType = this.lastType, this.lastType = null), this.RegisterTouchEvent(), d.default.Instance.Event_FishInit = this.OnFishInit.bind(this))
            }
            onDisable() {
                this.isMainPlayer && (this.CanelRegisterTouchEvent(), this.lastType = this.targetType, d.default.Instance.Event_FishInit = null), this.setLocking(null), this.isTouchHold = !1
            }
            InitProperties(e = null) {
                this.isUnuse = !1, this.attackTimer = 0, this.targetType = -1, this.targetFish = null, this.touchFishID = "", e && e.targetType && (this.targetType = e.targetType), this.player = u.PlayerManager.getPlayer(this.playerSeat)
            }
            UseSkill() {
                return s(this, void 0, void 0, function*() {
                    this.isMainPlayer && (this.RegisterTouchEvent(), this.enableLockAiming(!1), d.default.Instance.Event_FishEnter = this.OnFishEnter.bind(this), d.default.Instance.Event_FishInit = this.OnFishInit.bind(this)), this.StartPos = p.default.WeaponPosition(this.playerSeat).addSelf(this.playerSeat > 1 ? new cc.Vec2(0, -80) : new cc.Vec2(0, 80))
                })
            }
            UnUseSkill() {
                this.attackTimer = 0, this.targetType = -1, this.unhitList = null, this.LockAiming.node.active = !1, this.isMainPlayer ? (this.targetFish && (this.targetFish.Event_FishLeave = null, this.targetFish = null, this.touchFishID = ""), this.enableLockAiming(!1), this.CanelRegisterTouchEvent(), d.default.Instance.Event_FishEnter = null, d.default.Instance.Event_FishInit = null) : this.targetFish && (this.targetFish = null), this.isMainPlayer = !1, this.isUnuse = !0, this.RemoveSkillEffect(), r.default.SkillSystem.RemoveSkill(this.skillType, this.playerSeat, this), h.default.DespawnSkill(this.skillType, this.node)
            }
            setWeapon(e, t) {
                this.mWeapon = e, this.attackRate = 1 / t["1secShoot"], this.betScale = t.betScale, this.isMainPlayer && (this.unhitList = c.default.TransFishTypeList(t.UnhitList))
            }
            onHitFish(e, t, i) {
                if (!this.isMainPlayer) {
                    u.PlayerManager.Instance.ModifyPlayerEntries(t, -e * this.betScale);
                    let n = d.default.Instance.GetFishByID(i.toString());
                    if (n) {
                        let e = h.default.SpawnBullet("56001", this.isMainPlayer).getComponent(m.default);
                        e && (e.node.setPosition(this.mWeapon.node.getPosition()), e.skillInit(n, this.playerSeat, this.player.bet_value, this.betScale));
                        let t = n.GetLockLinkPoint(this.node.getPosition());
                        t && (this.ShootPos = a.default.ConvMousePos(t)), this.mWeapon.ShootFunction(this.ShootPos)
                    }
                }
                this.mWeapon.autoAnim || r.default.Instance.RecordClickLog(this.isMainPlayer)
            }
            update(e) {
                this.isUnuse || (super.update(e), this.attackTimer < this.attackRate && (this.attackTimer += e), this.isMainPlayer && this.MainPlayerUpdate(e))
            }
            setLocking(e) {
                this.isMainPlayer && this.targetFish && e != this.targetFish && (this.targetFish.Event_FishLeave = null, this.touchFishID = ""), this.targetFish = e || null, this.targetType = e ? e.Type : -1, this.isMainPlayer && this.targetFish ? this.targetFish.Event_FishLeave = this.OnTargetChange.bind(this) : this.enableLockAiming(!1)
            }
            MainPlayerUpdate(e) {
                if (!p.default.Instance.getWeapon(this.playerSeat).isGunReady || 0 == p.default.Instance.bulletLimit) return this.enableLockAiming(!1), void(this.isTouchHold = !1);
                if (this.checkTargetHitPos) {
                    if (this.enableLockAiming(!0), this.LockAiming.node.setPosition(this.ShootPos), this.attackTimer >= this.attackRate) {
                        if (this.attackTimer = 0, this.player.entries < this.player.bet_value * this.betScale) {
                            let e = SS.Common.GameEnvironment.IsShowDonate ? "C42" : "C41";
                            return l.PopupMsgMgr.Instance.ShowPopMsg(l.PopupPriority.Info, e, r.default.Instance.title, "Insufficient balance", null), this.setLocking(null), p.default.Instance.AutoShoot = !1, this.isTouchHold = !1, void r.default.FishUIMgr.ShowPurchaseHint(!0)
                        }
                        if (u.PlayerManager.Instance.MaxBalance && this.player.entries + this.player.winning >= u.PlayerManager.Instance.MaxBalance) return l.PopupMsgMgr.Instance.ShowPopMsg(l.PopupPriority.Info, "C29", r.default.Instance.title, "MaxBalance", null), this.setLocking(null), p.default.Instance.AutoShoot = !1, void(this.isTouchHold = !1);
                        if (r.default.FishUIMgr.IsPurchaseOpen()) return;
                        let e = h.default.SpawnBullet("56001", this.isMainPlayer).getComponent(m.default);
                        e && (e.node.setPosition(this.mWeapon.node.getPosition()), e.skillInit(this.targetFish, this.playerSeat, this.player.bet_value, this.betScale)), this.mWeapon.ShootFunction(this.ShootPos), u.PlayerManager.Instance.ModifyPlayerEntries(this.playerSeat, -this.player.bet_value * this.betScale), "playgd" == window.gd_nowLOGO && -1 == SS.Common.GameEnvironment.SentGameFlowStatus.indexOf(SS.Common.GameEnvironment.CurrentGameNow + o.GAME_STATUS.FIRST_SPIN) && (SS.Common.GameEnvironment.SentGameFlowStatus.push(SS.Common.GameEnvironment.CurrentGameNow + o.GAME_STATUS.FIRST_SPIN), o.LobbyClient.Instance.GetUserClient.SendPlayFlowData(SS.Common.GameEnvironment.DeviceInfo, SS.Common.GameEnvironment.CurrentGameNow, o.GAME_STATUS.FIRST_SPIN)), this.isTouchHold || p.default.Instance.AutoShoot || this.setLocking(null)
                    }
                } else p.default.Instance.AutoShoot || this.isTouchHold ? this.FindNextFish() : this.setLocking(null)
            }
            get checkTargetHitPos() {
                if (-1 == this.targetType) return !1;
                if (!this.targetFish) return !1;
                if (!this.targetFish.CanCollisionByMainSeat(this.isMainPlayer)) return !1;
                let e = this.targetFish.GetLockLinkPoint(this.StartPos);
                return e ? (this.ShootPos = a.default.ConvMousePos(e), !0) : (this.isMainPlayer && (p.default.Instance.AutoShoot || this.isTouchHold) ? this.FindNextFish() : this.setLocking(null), !1)
            }
            OnTouchStart(e) {
                if (!p.default.Instance.getWeapon(this.playerSeat).isGunReady) return;
                if (this.player.entries < this.player.bet_value * this.betScale) {
                    let e = SS.Common.GameEnvironment.IsShowDonate ? "C42" : "C41";
                    return l.PopupMsgMgr.Instance.ShowPopMsg(l.PopupPriority.Info, e, r.default.Instance.title, "Insufficient balance", null), void r.default.FishUIMgr.ShowPurchaseHint(!0)
                }
                if (u.PlayerManager.Instance.MaxBalance && this.player.entries + this.player.winning >= u.PlayerManager.Instance.MaxBalance) return void l.PopupMsgMgr.Instance.ShowPopMsg(l.PopupPriority.Info, "C29", r.default.Instance.title, "MaxBalance", null);
                let t = d.default.Instance.InFishRange(e.getLocation());
                t && (null == c.default.playerLockSetting && c.default.UseDefaultLockSetting(t.Type), this.setLocking(t), this.touchFishID = t.ID), this.isTouchHold = !0
            }
            OnTouchEnd(e) {
                this.isTouchHold = !1, p.default.Instance.AutoShoot || this.setLocking(null)
            }
            OnFishEnter(e) {
                if (-1 != this.unhitList.indexOf(e.Type) && e.SetShapeColor(cc.Color.GRAY), p.default.Instance.AutoShoot && "" == this.touchFishID)
                    if (null == c.default.LockSetting);
                    else {
                        if (e.Type == this.targetType) return;
                        for (let t = 0; t < c.default.LockSetting.length; t++) {
                            if (c.default.LockSetting[t] == this.targetType) return;
                            if (e.Type == c.default.LockSetting[t]) return void this.setLocking(e)
                        }
                    }
            }
            OnFishInit(e) {
                -1 != this.unhitList.indexOf(e.Type) && e.SetShapeColor(cc.Color.GRAY)
            }
            OnTargetChange(e, t) {
                e && (e.Event_FishLeave = null), p.default.Instance.AutoShoot || this.isTouchHold ? this.FindNextFish() : this.setLocking(null)
            }
            FindNextFish() {
                if (!this.isMainPlayer) return;
                let e = this.targetFish ? this.targetFish.ID : "",
                    t = null;
                d.default.Instance && (t = d.default.Instance.GetNextLockFish(this.targetType, e)), t ? this.setLocking(t) : this.enableLockAiming(!1)
            }
            enableLockAiming(e) {
                this.LockAiming.node.active != e && (this.LockAiming.node.active = e, e ? this.LockAiming.play() : this.LockAiming.stop())
            }
        };
        n([g(cc.Animation)], y.prototype, "LockAiming", void 0), y = n([S], y), i.default = y, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../../../../../LobbyCommon/Net/LobbyClient": void 0,
        "../../../../../LobbyCommon/PopupMessage/Script/PopupMsgMgr": void 0,
        "../../GameClient": "GameClient",
        "../Common/EnumFilter": "EnumFilter",
        "../Common/ResourceManager": "ResourceManager",
        "../Fish/FishManager": "FishManager",
        "../Player/PlayerManager": "PlayerManager",
        "../Weapon/TigerBullet": "TigerBullet",
        "../Weapon/WeaponManager": "WeaponManager",
        "./BaseSkill": "BaseSkill"
    }],
    SkillTitle: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "37bf6WkOVxEyK69qXfGHbd+", "SkillTitle");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("../Common/Utility"),
            a = e("../Common/PoolObj"),
            o = e("../Common/ResourceManager"),
            l = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            {
                ccclass: r,
                property: c
            } = cc._decorator;
        let h = class extends a.default {
            constructor() {
                super(...arguments), this.BetLabel = null, this.Bet = 0, this.isScoreShowing = !1, this.ShowingScore = 0, this.CountingAct = null, this.ScoreNode = null, this.ScoreLabel = null, this.owned = !1
            }
            SetBet(e, t) {
                this.Bet = e, this.owned = t, this.BetLabel && (this.BetLabel.string = s.default.NumberformatBet(e, e))
            }
            ShowScore(e) {
                this.isScoreShowing || (this.ScoreNode = o.default.SpawnEffect("SN", this.owned), this.ScoreNode && (this.ScoreLabel = this.ScoreNode.getComponentInChildren(cc.Label)), this.ScoreLabel && (this.ScoreNode.setPosition(this.node.getPosition().sub(cc.v2(0, l.default.isReverse ? -55 : 55))), this.ScoreNode.angle = this.node.angle, this.ScoreNode.runAction(cc.fadeIn(.5)), this.ScoreNode.runAction(cc.repeat(cc.sequence(cc.moveBy(.5, cc.v2(0, 20)), cc.moveBy(.5, cc.v2(0, -20))), cc.macro.REPEAT_FOREVER)), this.ShowingScore = e, this.ScoreLabel.string = s.default.NumberformatBet(e, this.Bet), this.ani.play("SkillTitleShowScore"), this.isScoreShowing = !0))
            }
            SetScore(e, t = .5) {
                if (this.ScoreLabel)
                    if (this.CountingAct && (this.ScoreLabel.node.stopAction(this.CountingAct), this.CountingAct = null), t > 0) {
                        let i = t / .05,
                            n = (e - this.ShowingScore) / i;
                        this.CountingAct = cc.repeat(cc.sequence(cc.callFunc(() => {
                            this.ShowingScore += n, this.ScoreLabel.string = s.default.NumberformatBet(this.ShowingScore, this.Bet)
                        }), cc.delayTime(.05)), i), this.ScoreLabel.node.runAction(this.CountingAct)
                    } else this.ShowingScore = e, this.ScoreLabel.string = s.default.NumberformatBet(this.ShowingScore, this.Bet)
            }
            Hide(e = !0) {
                e ? (this.ani.play("SkillTitleFadeOut"), this.ScoreNode && this.ScoreNode.runAction(cc.fadeOut(.5))) : this.Recycle()
            }
            Recycle() {
                this.ScoreNode && (this.ScoreNode.stopAllActions(), this.ScoreNode.setScale(1), this.ScoreNode.opacity = 255, o.default.DespawnEffect("SN", this.ScoreNode), this.ScoreNode = null), this.ScoreLabel && (this.ScoreLabel.string = "0", this.ScoreLabel = null), this.isScoreShowing = !1, this.ShowingScore = 0, super.Recycle()
            }
        };
        n([c(cc.Label)], h.prototype, "BetLabel", void 0), h = n([r], h), i.default = h, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../Common/PoolObj": "PoolObj",
        "../Common/ResourceManager": "ResourceManager",
        "../Common/Utility": "Utility"
    }],
    SkillWheel: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "084a1E980lEHIf9WxKMjO0l", "SkillWheel");
        var n = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            s = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("./BaseSkill"),
            o = e("./WheelItem"),
            l = e("../Player/PlayerManager"),
            r = e("../Fish/BaseFish"),
            c = e("../Fish/FishManager"),
            h = e("../Weapon/WeaponManager"),
            d = e("../../GameClient"),
            u = e("../Common/AudioManager"),
            m = e("../Common/ResourceManager"),
            p = e("../Common/Utility"),
            f = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            {
                ccclass: S,
                property: g
            } = cc._decorator;
        var y;
        (function(e) {
            e[e.NONE = 0] = "NONE", e[e.READY_TO_SPIN = 1] = "READY_TO_SPIN", e[e.RUNNING = 2] = "RUNNING", e[e.SLOW = 3] = "SLOW", e[e.RESULT = 4] = "RESULT", e[e.WAIT_SPIN = 5] = "WAIT_SPIN", e[e.END = 6] = "END"
        })(y || (y = {}));
        let _ = class extends a.default {
            constructor() {
                super(...arguments), this.WheelObj = null, this.AwardTitleAnim = null, this.BullionAnim = null, this.WheelSpinObjList = [], this.WheelItemAnimList_Out = [], this.WheelItemAnimList_Mid = [], this.WheelItemAnimList_In = [], this.PointerObj = null, this.PointerAnim_Out = null, this.PointerAnim_Mid = null, this.PointerAnim_In = null, this.PointerAnim_Head = null, this.Timelimit = null, this.TimeScore = null, this.OutFrameEffect = null, this.HitBullionEffect = null, this.TapHint = null, this.ClickStopEffect = null, this.fixedUpdateTime = .033, this.fixedUpdateTimer = 0, this.maxUpdateTimes = 5, this.SingleGridAngles = [45, 60, 120], this.PointerInitAngles = [2.5, 33, -60], this.wheelState = y.NONE, this.wheelCircleIndex = 0, this.isFlip = !1, this.isHitBullion = !1, this.isWhellAllRotate = !1, this.currentAngle = 0, this.maxSpeed = 435, this.currentSpeed = 0, this.addSpeed = 0, this.waitStopTime = 15, this.waitStopTimer = 0, this.addSpeedTime = 1, this.LeftOffset = 10, this.RightOffset = -10, this.slowDownStage = 0, this.slowDownSpeedList = [150, 50, 20, 0], this.slowDownTimeList = [2, 1.1, .5, 1], this.decreaseTimer = 0, this.m_OutCircle_OddsList = null, this.m_MidCircle_OddsList = null, this.m_InCircle_OddsList = null, this.m_PassList = null, this.OffsetAngle = 2.860545, this.rollSound = -1, this.stopEvent = null, this.fishID = null
            }
            onLoad() {
                this.skillType = a.skillEnum.Wheel, this.limitTime = 90
            }
            update(e) {
                super.update(e), this.fixedUpdateTimer += e;
                for (let t = 0; t < this.maxUpdateTimes && this.fixedUpdateTimer > this.fixedUpdateTime; t++) this.fixedUpdateTimer -= this.fixedUpdateTime, this.UpdateWheelState(this.fixedUpdateTime), this.RotateWheel(this.fixedUpdateTime)
            }
            onDestroy() {
                u.default.Instance && u.default.Instance.Stop(this.rollSound)
            }
            InitProperties(e = null) {
                super.InitProperties(), this.wheelState = y.NONE, this.isFlip = !1, this.node.angle = 0, this.wheelCircleIndex = 0, this.fixedUpdateTimer = 0, this.decreaseTimer = 0, this.waitStopTimer = 0, this.stopEvent = null, this.ClickStopEffect.totalParticles = 0, this.ClickStopEffect.node.active = !1, this.fishID = e.id, this.playerBet = e.bet, this.totalWin = e.win, this.totalOdds = e.odds, this.m_OutCircle_OddsList = e.c0, this.m_MidCircle_OddsList = e.c1, this.m_InCircle_OddsList = e.c2, this.m_PassList = e.ci
            }
            UseSkill() {
                let e = c.default.Instance.GetFishByID(this.fishID.toString());
                if (!e && !this.isMainPlayer) return void this.UnUseSkill();
                if (d.default.SkillSystem.FindSkill(this.skillType, this.playerSeat) && !this.isMainPlayer) return void this.UnUseSkill();
                u.default.Instance.Play("50_shell_info_j");
                let t = l.PlayerManager.MainSeat;
                (t > 1 && this.playerSeat < 2 || t < 2 && this.playerSeat > 1) && (this.isFlip = !0), this.playerSeat > 1 && (this.node.angle = 180), h.default.Instance.GetSkillWeapon(this.playerSeat, null);
                let i = null;
                null != e ? (e.AliveStatus = r.FishState.DEAD, e.CanCollision = !1, e.StopAction(), e.PlayDieAnim(), i = e.node.getPosition(), e.RemoveSelf()) : i = cc.v2(700 + 50 * Math.random(), 310 + 100 * Math.random()), m.default.SpawnEffect("CoinBlast").setPosition(i), this.InitWheel(i)
            }
            UnUseSkill() {
                super.UnUseSkill(), this.tapHintActive(!1), this.wheelState = y.NONE, u.default.Instance.Stop(this.rollSound), this.PointerAnim_Head.node.stopAllActions(), this.OutFrameEffect.node.active = !1, this.OutFrameEffect.stop(), this.HitBullionEffect.node.active = !1, this.HitBullionEffect.stop(), this.AwardTitleAnim.stop(), this.BullionAnim.stop(), this.PointerAnim_Out.stop(), this.PointerAnim_Mid.stop(), this.PointerAnim_In.stop(), this.PointerAnim_Head.stop(), this.node.opacity = 255, this.m_OutCircle_OddsList = null, this.m_MidCircle_OddsList = null, this.m_InCircle_OddsList = null, this.m_PassList = null, this.stopEvent = null, this.ClickStopEffect.totalParticles = 0, this.ClickStopEffect.node.active = !1, h.default.Instance.ReturnToBaseWeapon(this.playerSeat), this.isMainPlayer && (f.default.CanelTouchEvent(cc.Node.EventType.TOUCH_START, this.WheelTouchEvent, this), f.default.Instance.IsLockChangeWeapon = !1, l.PlayerManager.Instance.CheckBetListOnSkillEnd(this.playerSeat))
            }
            ReceiveSkillData(e, t) {
                const i = e.click;
                this.OnStopWheelReceive(i)
            }
            OnStopWheelReceive(e) {
                this.isMainPlayer || (this.stopEvent = null, this.stopEvent = () => {
                    e < this.wheelCircleIndex || (this.waitStopTimer = 0, this.Timelimit.active = !1)
                })
            }
            InitWheel(e) {
                if (this.InitWheelItemData(), this.node.setPosition(e), this.PointerAnim_Head && this.PointerAnim_Head.node.setPosition(0, 150), !this.WheelObj) return;
                this.WheelObj.scale = 0;
                let t = cc.sequence(cc.spawn(cc.moveTo(.3, cc.v2(0, 100)).easing(cc.easeCubicActionOut()), cc.scaleTo(.3, 1, 1).easing(cc.easeSineInOut())), cc.moveTo(.5, cc.Vec2.ZERO), cc.delayTime(.2), cc.callFunc(this.AppearWheelItem.bind(this)));
                this.WheelObj.runAction(t)
            }
            InitWheelItemData() {
                this.isWhellAllRotate = !1, this.isHitBullion = !1, this.currentAngle = 0 == this.wheelCircleIndex ? -2.5 : 0, this.currentSpeed = 0;
                for (let t = 0; t < this.WheelSpinObjList.length; t++) this.WheelSpinObjList[t].angle = 0 == t ? 2.5 : 0;
                let e = 0;
                for (let t = 0; t < this.WheelItemAnimList_Out.length; t++) this.WheelItemAnimList_Out[t].Init(this.m_OutCircle_OddsList[e]), e++;
                e = 0;
                for (let t = 0; t < this.WheelItemAnimList_Mid.length; t++) this.WheelItemAnimList_Mid[t].Init(this.m_MidCircle_OddsList[e]), e++;
                e = 0;
                for (let t = 0; t < this.WheelItemAnimList_In.length; t++) this.WheelItemAnimList_In[t].Init(this.m_InCircle_OddsList[e]), e++;
                this.BullionAnim.node.angle = this.isFlip ? 180 : 0, this.BullionAnim.node.opacity = 0, this.PointerObj.opacity = 0, this.PointerAnim_Out.node.active = !1, this.PointerAnim_Mid.node.active = !1, this.PointerAnim_In.node.active = !1, this.OutFrameEffect.node.active = !1, this.HitBullionEffect.node.active = !1
            }
            AppearWheelItem() {
                return s(this, void 0, void 0, function*() {
                    let e = h.default.WeaponPosition(this.playerSeat);
                    this.node.runAction(cc.moveTo(1.2, e).easing(cc.easeSineOut())), yield this.delay(1300);
                    for (let i = 0; i < this.WheelItemAnimList_Out.length; i++) this.WheelItemAnimList_Out[i].AppearFunction();
                    for (let i = 0; i < this.WheelItemAnimList_Mid.length; i++) this.WheelItemAnimList_Mid[i].AppearFunction();
                    for (let i = 0; i < this.WheelItemAnimList_In.length; i++) this.WheelItemAnimList_In[i].AppearFunction();
                    this.BullionAnim.node.runAction(cc.fadeIn(.5)), this.BullionAnim.play(), this.PointerAnim_Out.node.active = !0, this.PointerAnim_Out.play(), this.PointerAnim_Head.play(), this.PointerObj.runAction(cc.fadeIn(.5)), this.PointerAnim_Head.node.runAction(cc.sequence(cc.moveTo(.7, 0, 180).easing(cc.easeSineOut()), cc.callFunc(this.PointerHeadLoop.bind(this, !1)))), yield this.delay(1e3), this.AwardTitleAnim.node.angle = this.isFlip ? 180 : 0, this.AwardTitleAnim.node.active = !0, this.AwardTitleAnim.play(), u.default.Instance.Play("wheel_max"), yield this.delay(2e3), this.AwardTitleAnim && (this.AwardTitleAnim.node.active = !1), this.node.setPosition(e);
                    let t = this.node.parent.convertToWorldSpaceAR(cc.Vec2.ZERO);
                    this.TapHint.node.setPosition(this.node.convertToNodeSpaceAR(t)), this.InitWheelSpin()
                })
            }
            PointerHeadLoop(e) {
                this.PointerAnim_Head.node.stopAllActions(), e ? this.PointerAnim_Head.node.runAction(cc.repeatForever(cc.sequence(cc.moveTo(.7, 5, 190), cc.moveTo(.7, 5, 210)))) : this.PointerAnim_Head.node.runAction(cc.repeatForever(cc.sequence(cc.moveTo(.7, 0, 170), cc.moveTo(.7, 0, 190))))
            }
            InitWheelSpin() {
                return s(this, void 0, void 0, function*() {
                    this.currentAngle = 0 == this.wheelCircleIndex ? -2.5 : 0, this.currentSpeed = 0, this.addSpeed = this.maxSpeed / this.addSpeedTime, this.wheelState = y.READY_TO_SPIN, this.rollSound = u.default.Instance.SetNextSound(u.default.Instance.Play("wheel_roll1"), "wheel_roll2", 1, !0), this.tapHintActive(!0), this.RightOffset = -10 - Math.random() * (this.SingleGridAngles[this.wheelCircleIndex] - 25), this.isMainPlayer && (f.default.RegisterTouchEvent(cc.Node.EventType.TOUCH_START, this.WheelTouchEvent, this), f.default.Instance.IsLockChangeWeapon = !0)
                })
            }
            DelayWheelSpin() {
                return s(this, void 0, void 0, function*() {
                    this.currentAngle = 0 == this.wheelCircleIndex ? -2.5 : 0, this.wheelState = y.WAIT_SPIN, yield this.delay(1e3), this.InitWheelSpin()
                })
            }
            UpdateWheelState(e) {
                switch (this.wheelState) {
                    case y.NONE:
                        break;
                    case y.READY_TO_SPIN:
                        this.ReadySpin(e);
                        break;
                    case y.RUNNING:
                        this.SpinRun(e);
                        break;
                    case y.SLOW:
                        this.SpinSlow(e);
                        break;
                    case y.RESULT:
                        this.SpinResult(e);
                        break;
                    case y.END:
                        this.SpinEnd(e)
                }
            }
            RotateWheel(e) {
                if (this.isWhellAllRotate)
                    for (let t = 0; t < this.WheelSpinObjList.length; t++) {
                        let i = this.WheelSpinObjList[t].angle;
                        i += t % 2 == 0 ? 100 * e : -100 * e, this.WheelSpinObjList[t].angle = i
                    } else this.wheelCircleIndex < this.WheelSpinObjList.length && (this.WheelSpinObjList[this.wheelCircleIndex].angle = this.currentAngle)
            }
            ReadySpin(e) {
                this.currentSpeed += e * this.addSpeed, this.currentSpeed >= this.maxSpeed && (this.waitStopTimer = this.waitStopTime, this.wheelState = y.RUNNING, this.currentSpeed = this.maxSpeed, this.addSpeed = 0), this.currentAngle -= e * this.currentSpeed
            }
            SpinRun(e) {
                if (this.waitStopTimer > 0 && (this.waitStopTimer -= e), this.currentAngle -= e * this.currentSpeed, this.isMainPlayer && this.waitStopTimer <= 10 && this.waitStopTimer > 0 && (this.Timelimit.active || (this.Timelimit.active = !0), this.TimeScore.string = this.waitStopTimer.toFixed(0)), null != this.stopEvent && (this.stopEvent(), this.stopEvent = null), this.waitStopTimer <= 0) {
                    this.stopEvent = null, this.Timelimit.active = !1, this.tapHintActive(!1);
                    let e = this.SingleGridAngles[this.wheelCircleIndex],
                        t = e * this.m_PassList[this.wheelCircleIndex],
                        i = this.PointerInitAngles[this.wheelCircleIndex] + t + this.LeftOffset,
                        n = this.PointerInitAngles[this.wheelCircleIndex] + t + e + this.RightOffset,
                        s = this.currentAngle + this.OffsetAngle;
                    for (; s < i;) s += 360;
                    s > i && s < n && (this.wheelState = y.SLOW, this.slowDownStage = 0, this.decreaseTimer = this.slowDownTimeList[this.slowDownStage], this.PointerObj.runAction(cc.sequence(cc.moveTo(.15, 0, 25), cc.moveTo(.25, 0, 0))), u.default.Instance.Play("wheel_press"), u.default.Instance.SetNextSound(this.rollSound, "wheel_stop"), this.isMainPlayer && d.default.SkillSystem.SendStopWheel(this.wheelCircleIndex))
                }
            }
            SpinSlow(e) {
                if (this.decreaseTimer <= 0) {
                    if (this.slowDownStage += 1, !(this.slowDownStage < this.slowDownTimeList.length)) return void(this.wheelState = y.RESULT);
                    this.decreaseTimer = this.slowDownTimeList[this.slowDownStage]
                }
                this.currentSpeed <= 0 ? this.wheelState = y.RESULT : (this.decreaseTimer -= e, 0 == this.slowDownStage ? (this.currentSpeed -= e * (this.maxSpeed - this.slowDownSpeedList[this.slowDownStage]) / this.slowDownTimeList[this.slowDownStage], this.decreaseTimer < 0 && (this.currentSpeed += -this.decreaseTimer * (this.maxSpeed - this.slowDownSpeedList[this.slowDownStage]) / this.slowDownTimeList[this.slowDownStage], this.slowDownStage + 1 < this.slowDownSpeedList.length && (this.currentSpeed -= this.decreaseTimer * (this.slowDownSpeedList[this.slowDownStage] - this.slowDownSpeedList[this.slowDownStage + 1]) / this.slowDownTimeList[this.slowDownStage]))) : this.slowDownStage > 0 && (this.currentSpeed -= e * (this.slowDownSpeedList[this.slowDownStage - 1] - this.slowDownSpeedList[this.slowDownStage]) / this.slowDownTimeList[this.slowDownStage], this.decreaseTimer < 0 && (this.currentSpeed += -this.decreaseTimer * (this.slowDownSpeedList[this.slowDownStage - 1] - this.slowDownSpeedList[this.slowDownStage]) / this.slowDownTimeList[this.slowDownStage], this.slowDownStage + 1 < this.slowDownSpeedList.length && (this.currentSpeed -= this.decreaseTimer * (this.slowDownSpeedList[this.slowDownStage] - this.slowDownSpeedList[this.slowDownStage + 1]) / this.slowDownTimeList[this.slowDownStage]))), this.currentAngle -= e * this.currentSpeed)
            }
            SpinResult(e) {
                return s(this, void 0, void 0, function*() {
                    if (0 == this.wheelCircleIndex) {
                        let e = this.WheelItemAnimList_Out[this.m_PassList[this.wheelCircleIndex]];
                        if (!e) return;
                        if (e.HitFunction(), u.default.Instance.Play("wheel_forward"), e.IsArrow()) return this.wheelCircleIndex++, this.currentAngle = 0, this.wheelState = y.WAIT_SPIN, yield this.delay(500), this.PointerAnim_Out.node.active = !1, this.PointerAnim_Mid.node.active = !0, this.PointerAnim_Mid.play(), this.OutFrameEffect.node.active = !0, this.OutFrameEffect.play(), void this.DelayWheelSpin()
                    } else if (1 == this.wheelCircleIndex) {
                        let e = this.WheelItemAnimList_Mid[this.m_PassList[this.wheelCircleIndex]];
                        if (!e) return;
                        if (e.HitFunction(), u.default.Instance.Play("wheel_forward"), e.IsArrow()) return this.wheelCircleIndex++, this.currentAngle = 0, this.wheelState = y.WAIT_SPIN, yield this.delay(500), this.PointerAnim_Mid.node.active = !1, this.PointerAnim_In.node.active = !0, this.PointerAnim_In.play(), this.PointerAnim_Head.play("WheelPointerAnim_FireHead"), this.PointerHeadLoop(!0), void this.DelayWheelSpin()
                    } else if (2 == this.wheelCircleIndex) {
                        let e = this.WheelItemAnimList_In[this.m_PassList[this.wheelCircleIndex]];
                        if (!e) return;
                        e.HitFunction(), e.IsArrow() ? (this.isHitBullion = !0, u.default.Instance.Play("wheel_golden")) : u.default.Instance.Play("wheel_forward")
                    }
                    this.wheelState = y.END
                })
            }
            SpinEnd(e) {
                return s(this, void 0, void 0, function*() {
                    this.isGaveAward = !0, this.wheelState = y.NONE, yield this.delay(500), this.isHitBullion ? (this.BullionAnim.play("BullionAnim_Hit"), yield this.delay(800), this.HitBullionEffect.node.active = !0, this.HitBullionEffect.play(), yield this.delay(2e3), this.ShowSkillScore(), yield this.delay(1e3), this.isWhellAllRotate = !0) : this.ShowSkillScore(), yield this.delay(this.isHitBullion ? 4e3 : 3e3), this.node.runAction(cc.fadeOut(1)), yield this.delay(1e3), this.UnUseSkill()
                })
            }
            ShowSkillScore() {
                if (this.isMainPlayer && 0 == this.totalWin) return void d.default.Instance.CallOnError("C44", "SkillZeroWin");
                let e = m.default.SpawnEffect("GN", this.isMainPlayer);
                e && (e.setScale(1), e.angle = f.default.isReverse ? 180 : 0, e.setPosition(this.node.getPosition().add(cc.v2(0, this.playerSeat > 1 ? -80 : 80))));
                let t = e.getComponentInChildren(cc.Label),
                    i = 0,
                    n = (this.totalWin - i) / 40;
                e.runAction(cc.sequence(cc.repeat(cc.sequence(cc.callFunc(() => {
                    i += n, t.string = p.default.NumberformatBet(i, this.playerBet)
                }), cc.delayTime(.05)), 40), cc.delayTime(2), cc.fadeOut(.5), cc.callFunc(() => {
                    e.opacity = 255, m.default.DespawnEffect("GN", e)
                }))), this.PlayAwardSound()
            }
            WheelTouchEvent() {
                this.wheelState == y.READY_TO_SPIN && (this.wheelState = y.RUNNING, this.currentSpeed = this.maxSpeed, this.addSpeed = 0, this.waitStopTimer = -1), this.wheelState == y.RUNNING && (this.waitStopTimer = 0, this.Timelimit.active = !1, this.tapHintActive(!1), this.ClickStopEffect.node.active = !0, this.ClickStopEffect.totalParticles = 200, this.scheduleOnce(() => {
                    this.ClickStopEffect.totalParticles = 0
                }, .5))
            }
            tapHintActive(e) {
                e && !this.TapHint.node.active && this.isMainPlayer && (this.TapHint.node.active = !0, this.TapHint.play(), this.TapHint.node.setScale(0), this.TapHint.node.runAction(cc.scaleTo(.5, 1).easing(cc.easeBounceOut()))), !e && this.TapHint.node.active && (this.TapHint.node.active = !1, this.TapHint.stop())
            }
        };
        n([g(cc.Node)], _.prototype, "WheelObj", void 0), n([g(cc.Animation)], _.prototype, "AwardTitleAnim", void 0), n([g(cc.Animation)], _.prototype, "BullionAnim", void 0), n([g([cc.Node])], _.prototype, "WheelSpinObjList", void 0), n([g([o.default])], _.prototype, "WheelItemAnimList_Out", void 0), n([g([o.default])], _.prototype, "WheelItemAnimList_Mid", void 0), n([g([o.default])], _.prototype, "WheelItemAnimList_In", void 0), n([g(cc.Node)], _.prototype, "PointerObj", void 0), n([g(cc.Animation)], _.prototype, "PointerAnim_Out", void 0), n([g(cc.Animation)], _.prototype, "PointerAnim_Mid", void 0), n([g(cc.Animation)], _.prototype, "PointerAnim_In", void 0), n([g(cc.Animation)], _.prototype, "PointerAnim_Head", void 0), n([g(cc.Node)], _.prototype, "Timelimit", void 0), n([g(cc.Label)], _.prototype, "TimeScore", void 0), n([g(cc.Animation)], _.prototype, "OutFrameEffect", void 0), n([g(cc.Animation)], _.prototype, "HitBullionEffect", void 0), n([g(cc.Animation)], _.prototype, "TapHint", void 0), n([g(cc.ParticleSystem)], _.prototype, "ClickStopEffect", void 0), _ = n([S], _), i.default = _, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../../GameClient": "GameClient",
        "../Common/AudioManager": "AudioManager",
        "../Common/ResourceManager": "ResourceManager",
        "../Common/Utility": "Utility",
        "../Fish/BaseFish": "BaseFish",
        "../Fish/FishManager": "FishManager",
        "../Player/PlayerManager": "PlayerManager",
        "../Weapon/WeaponManager": "WeaponManager",
        "./BaseSkill": "BaseSkill",
        "./WheelItem": "WheelItem"
    }],
    SkillWind: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "34c5b27HVVOhIaJiIe9LJXW", "SkillWind");
        var n = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            s = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("./BaseSkill"),
            o = e("../Fish/BaseFish"),
            l = e("../Fish/FishManager"),
            r = e("../Common/ResourceManager"),
            c = e("../Weapon/WeaponManager"),
            h = e("../Common/AudioManager"),
            {
                ccclass: d,
                property: u
            } = cc._decorator;
        let m = class extends a.default {
            constructor() {
                super(...arguments), this.windAnim = null, this.twisterFish = null, this.dieFishIDList = null, this.fishType = -1
            }
            onLoad() {
                this.skillType = a.skillEnum.Wind, this.limitTime = 12
            }
            InitProperties(e = null) {
                super.InitProperties(), this.dieFishIDList = e.fish, this.totalWin = e.win, this.totalOdds = e.odds;
                let t = this.totalOdds / this.dieFishIDList.length;
                if (this.playerBet = e.bet, null != this.dieFishIDList && this.playerBet > 0)
                    for (let i = 0; i < this.dieFishIDList.length; i++) this.dieFishList.push(l.default.Instance.GetFishByID(this.dieFishIDList[i])), this.oddsList.push(t), this.winList.push(t * this.playerBet), l.default.Instance.RemoveFishByID(this.dieFishIDList[i]);
                this.node.parent = r.default.Instance.Background, this.fishType = this.GetFishType()
            }
            UseSkill() {
                return s(this, void 0, void 0, function*() {
                    this.isGaveAward = !0, this.dieFishList.length > 0 && (this.twisterFish = this.dieFishList[this.dieFishList.length - 1]), null != this.twisterFish && (this.twisterFish.CanCollision = !1, this.twisterFish.switchWindEffect(!1), this.twisterFish.ShakeCoinEffect(this.playerSeat, 1)), this.CreateSkillTitle();
                    var e = this.playerSeat > 1 ? new cc.Vec2(0, -200) : new cc.Vec2(0, 200),
                        t = c.default.WeaponPosition(this.playerSeat).addSelf(e);
                    this.node.setPosition(t), this.windAnim && this.windAnim.play(), h.default.Instance.Play("15_wind_main"), this.PullFishFunction(this.node.getPosition()), yield this.delay(2500), this.KillFishesAndShowAward(), yield this.delay(1500), this.ShowSkillScore(this.totalWin), this.PlayAwardSound(), yield this.delay(4e3), this.UnUseSkill()
                })
            }
            UnUseSkill() {
                if (null != this.dieFishList) {
                    for (let e = 0; e < this.dieFishList.length; e++) this.dieFishList[e] && this.dieFishList[e].RemoveSelf();
                    this.dieFishList = null
                }
                this.node.parent = r.default.Instance.Skills, this.windAnim.stop(), super.UnUseSkill()
            }
            GetFishType() {
                for (let e = 0; e < this.dieFishList.length; e++) {
                    let t = this.dieFishList[e];
                    if (t) return t.Type
                }
                return -1
            }
            PullFishFunction(e) {
                for (let n = 0; n < this.dieFishList.length; n++) {
                    let s = this.dieFishList[n];
                    if (null == s) {
                        if (-1 != this.fishType) {
                            var t = 50 * Math.random(),
                                i = 100 * Math.random() - 50;
                            s = l.default.Instance.CreateFakeFish(this.dieFishIDList[n], this.fishType, new cc.Vec2(700 + t, 360 + i)), this.dieFishList[n] = s
                        }
                        if (null == s) continue
                    }
                    s.AliveStatus = o.FishState.DEAD, s.CanCollision = !1, s.StopAction(), s.PlayDieAnim();
                    let a = e.sub(s.node.getPosition());
                    a.normalizeSelf();
                    let r = 40 * Math.random() - 20;
                    e.addSelf(a.mul(r)), s.node.runAction(cc.rotateBy(3, 360).repeatForever()), s.node.runAction(cc.moveTo(2, e).easing(cc.easeInOut(4)))
                }
            }
        };
        n([u(cc.Animation)], m.prototype, "windAnim", void 0), m = n([d], m), i.default = m, cc._RF.pop()
    }, {
        "../Common/AudioManager": "AudioManager",
        "../Common/ResourceManager": "ResourceManager",
        "../Fish/BaseFish": "BaseFish",
        "../Fish/FishManager": "FishManager",
        "../Weapon/WeaponManager": "WeaponManager",
        "./BaseSkill": "BaseSkill"
    }],
    SlotCrabMedal: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "b34a2HKElBCy7SJqhRnwO9g", "SlotCrabMedal");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("./BaseMedal"),
            a = e("../Common/PoolObj"),
            {
                ccclass: o,
                property: l
            } = cc._decorator;
        let r = class extends s.default {
            constructor() {
                super(...arguments), this.silverMedalIcon = null, this.goldenMedalIcon = null, this.medalSprite = null
            }
            Init(e, t, i, n) {
                "small" == e ? this.medalSprite.spriteFrame = this.silverMedalIcon : "middle" == e ? this.medalSprite.spriteFrame = this.goldenMedalIcon : cc.error("SlotCrabMedal Init error"), super.Init(e, t, i, n)
            }
            Recycle() {
                let e = this.node.getChildByName("LevelUpMedal");
                e && e.getComponent(a.default).Recycle(), super.Recycle()
            }
        };
        n([l(cc.SpriteFrame)], r.prototype, "silverMedalIcon", void 0), n([l(cc.SpriteFrame)], r.prototype, "goldenMedalIcon", void 0), n([l(cc.Sprite)], r.prototype, "medalSprite", void 0), r = n([o], r), i.default = r, cc._RF.pop()
    }, {
        "../Common/PoolObj": "PoolObj",
        "./BaseMedal": "BaseMedal"
    }],
    SystemTip: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "82df8nrkyNPyps22jJV6dHn", "SystemTip");
        var n, s = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        }), i.TIP_CLIP_TYPE = i.SYSTEM_TIP_TYPE = void 0, i.SYSTEM_TIP_TYPE = {
            SUMMON_MAX: "M102",
            QTY_LACK: "",
            BULLET_MAX: "",
            COOLDOWN: "M101",
            CHANGE_SCENE: "M103",
            ITEM_WAIT: "",
            FREEZE_WAIT: "M106",
            ITEM_CLOSE: "M107"
        }, i.TIP_CLIP_TYPE = {
            FADE_IN: "SystemTip_FadeIn",
            FADE_OUT: "SystemTip_FadeOut"
        };
        const {
            ccclass: a
        } = cc._decorator;
        let o = n = class extends cc.Component {
            constructor() {
                super(...arguments), this._anim = null, this._backGround = null, this._top = null, this._bottom = null, this._word = null, this.close_flag = !1, this.use_flag = !1
            }
            static get Instance() {
                return this.instance
            }
            onLoad() {
                this._anim = this.getComponent(cc.Animation), this._backGround = this.node.getChildByName("BackGround"), this._top = this._backGround.getChildByName("Top"), this._bottom = this._backGround.getChildByName("Bottom"), this._word = this._backGround.getChildByName("Word").getComponent(cc.RichText), this._anim.on("finished", () => {
                    this.close_flag && (this._backGround.active = this.use_flag = this.close_flag = !1)
                }, this), n.instance = this
            }
            static Open(e, t = 1, s = !0) {
                if (null == (e = SS.Common.GameEnvironment.GameMsg[e])) return;
                let a = n.instance;
                if (!s) {
                    if (a.use_flag) return;
                    a.use_flag = !0
                }
                a._word.string = "<outline color=white width=0.2>" + e + "</outline>";
                let o = a._word.node.width;
                a._backGround.width = o + 100, a._top.width = a._bottom.width = o + 120, a._backGround.active = !0, a._anim.play(i.TIP_CLIP_TYPE.FADE_IN), a.unscheduleAllCallbacks(), t > 0 && a.scheduleOnce(() => {
                    n.Close()
                }, t)
            }
            static Close() {
                n.instance._anim.play(i.TIP_CLIP_TYPE.FADE_OUT), n.instance.close_flag = !0
            }
        };
        o.instance = null, o = n = s([a], o), i.default = o, cc._RF.pop()
    }, {}],
    THUNDER_DRAGON: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "a48bcOz87NCeLBoH8l764qX", "THUNDER_DRAGON");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("./BaseSpineFish"),
            {
                ccclass: a,
                property: o
            } = cc._decorator;
        let l = class extends s.default {
            onInit() {
                this.offsetPos = cc.v2(940, -70), this.node.angle = -this.o, this.skeleton.timeScale = .5, this.skeleton.setAnimation(0, "SWIM", !1)
            }
            InitParameter() {
                super.InitParameter(), this.isFeature = !0
            }
        };
        l = n([a], l), i.default = l, cc._RF.pop()
    }, {
        "./BaseSpineFish": "BaseSpineFish"
    }],
    TWISTER_GURNARD: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "025809EEJtPZ7/aICt1QwuX", "TWISTER_GURNARD");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("./BaseFish"),
            a = e("./BaseTwisterFish"),
            {
                ccclass: o
            } = cc._decorator;
        let l = class extends a.default {
            SpeedUp() {
                this.mSeek && this.aliveStatus == s.FishState.ALIVE && this.mSeek.AddSpeed(50, 1e3)
            }
        };
        l = n([o], l), i.default = l, cc._RF.pop()
    }, {
        "./BaseFish": "BaseFish",
        "./BaseTwisterFish": "BaseTwisterFish"
    }],
    TWISTER_OCTOPUS: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "683045+Zc5O5K6asFLNnAk9", "TWISTER_OCTOPUS");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("./BaseFish"),
            a = e("./BaseTwisterFish"),
            {
                ccclass: o
            } = cc._decorator;
        let l = class extends a.default {
            SpeedUp() {
                this.mSeek && this.aliveStatus == s.FishState.ALIVE && this.mSeek.AddSpeed(80, 750)
            }
        };
        l = n([o], l), i.default = l, cc._RF.pop()
    }, {
        "./BaseFish": "BaseFish",
        "./BaseTwisterFish": "BaseTwisterFish"
    }],
    TWIST_FLAT_FISH: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "07769uy4LBIRqM1cRieOHCi", "TWIST_FLAT_FISH");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("./BaseTwisterFish"),
            {
                ccclass: a
            } = cc._decorator;
        let o = class extends s.default {
            InitParameter() {
                super.InitParameter(), this.shapeNode.angle = 90
            }
            onMove(e) {
                e.AddSpeed(-70, 500);
                const t = e.PonitIndex,
                    i = e.GetTargetPoint(t),
                    n = e.GetTargetPoint(t + 1);
                if (n) {
                    const t = 180 - cc.misc.radiansToDegrees(Math.atan2(i.y - n.y, i.x - n.x));
                    this.shapeNode.runAction(cc.sequence(cc.delayTime(.3), cc.callFunc(() => {
                        e.Rotate(t, .4)
                    }), cc.delayTime(.4), cc.callFunc(() => {
                        this.mAnim.play("Swim"), e.AddSpeed(70, 500)
                    }), cc.repeat(cc.sequence(cc.rotateBy(.1, 5), cc.rotateBy(.1, -5)), 2)))
                }
            }
        };
        o = n([a], o), i.default = o, cc._RF.pop()
    }, {
        "./BaseTwisterFish": "BaseTwisterFish"
    }],
    TWIST_SEA_TURTLE: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "43aa6wPQCZHGJMVIM7Z6sdV", "TWIST_SEA_TURTLE");
        var n = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            s = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("./BaseFish"),
            o = e("./BaseTwisterFish"),
            {
                ccclass: l
            } = cc._decorator;
        let r = class extends o.default {
            constructor() {
                super(...arguments), this.hitEffect = []
            }
            SpeedUp() {
                this.mSeek && this.aliveStatus == a.FishState.ALIVE && this.mSeek.AddSpeed(80, 500)
            }
            OnHitFish() {
                return s(this, void 0, void 0, function*() {
                    if (!this.shapeNode && (this.shapeNode = this.node.getChildByName("Shape"), !this.shapeNode)) return;
                    let e = this.shapeNode.children;
                    for (let t = 0; t < e.length; t++) this.hitEffect[t] && (this.hitEffect[t].isDone || (e[t].stopAction(this.hitEffect[t]), this.hitEffect = null, e[t].color = cc.Color.WHITE));
                    for (let t = 0; t < e.length; t++) {
                        let i = cc.repeat(cc.sequence(cc.tintTo(.1, 200, 0, 0), cc.tintTo(.1, 255, 255, 255)), 2);
                        this.hitEffect.push(i), yield e[t].runAction(i)
                    }
                })
            }
        };
        r = n([l], r), i.default = r, cc._RF.pop()
    }, {
        "./BaseFish": "BaseFish",
        "./BaseTwisterFish": "BaseTwisterFish"
    }],
    TacoBackground: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "2690fee/OtEyLks1pgMV2iH", "TacoBackground");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("./BaseBackGround"),
            {
                ccclass: a,
                property: o
            } = cc._decorator;
        let l = class extends s.default {
            constructor() {
                super(...arguments), this.BG_Blue = null, this.BG_Red = null, this.TacoParent = []
            }
            BossEnter() {
                this.bossEnter || (this.node.runAction(cc.sequence(cc.rotateTo(2, 0), cc.delayTime(2), cc.callFunc(() => {
                    this.ani.play("Boss_Loop"), this.BG_Blue && (this.BG_Blue.active = !1)
                }))), this.BG_Red && (this.BG_Red.opacity = 0, this.BG_Red.active = !0, this.BG_Red.runAction(cc.sequence(cc.delayTime(2), cc.fadeIn(2)))), this.bossEnter = !0)
            }
            getParent(e) {
                switch (e) {
                    case 61:
                    case 117:
                        return this.TacoParent[0];
                    case 62:
                    case 118:
                        return this.TacoParent[1];
                    case 63:
                    case 119:
                        return this.TacoParent[2];
                    case 64:
                    case 120:
                        return this.TacoParent[3];
                    case 65:
                    case 121:
                        return this.TacoParent[4];
                    case 66:
                    case 122:
                        return this.TacoParent[5]
                }
                return null
            }
        };
        n([o(cc.Node)], l.prototype, "BG_Blue", void 0), n([o(cc.Node)], l.prototype, "BG_Red", void 0), n([o([cc.Node])], l.prototype, "TacoParent", void 0), l = n([a], l), i.default = l, cc._RF.pop()
    }, {
        "./BaseBackGround": "BaseBackGround"
    }],
    TigerBullet: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "ac599BfjxdCmZ3iA2DbxzIW", "TigerBullet");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            a = e("../../GameClient"),
            o = e("../Common/AudioManager"),
            l = e("../Common/MultiLangSystem"),
            r = e("../Common/ResourceManager"),
            c = e("../Player/PlayerManager"),
            h = e("./BaseBullet"),
            {
                ccclass: d,
                property: u
            } = cc._decorator;
        let m = class extends h.default {
            constructor() {
                super(...arguments), this.targetFish = null, this.targetNode = null, this.betScale = 2, this.EndPos = null, this.dis = Number.MAX_SAFE_INTEGER
            }
            BulletMove(e) {
                this.bulletVec && this.node.setPosition(this.node.getPosition().add(this.bulletVec.mul(this.bulletSpeed * e))), this.bulletSpeed *= 1.05, this.updateTargetPos()
            }
            updateTargetPos() {
                if (this.targetFish && this.targetFish.enabled && this.targetFish.CanCollision && (this.targetNode || this.targetFish.GetLockLinkPoint(this.node.getPosition(), e => {
                        this.targetNode = e
                    }), this.targetNode)) {
                    let e = this.targetNode.convertToWorldSpaceAR(cc.Vec2.ZERO);
                    this.EndPos = this.node.parent.convertToNodeSpaceAR(e);
                    let t = this.EndPos.sub(this.node.getPosition()),
                        i = t.len();
                    if (i <= 20 || i > this.dis + 10) return void this.onBlast();
                    this.dis = i, this.bulletVec = t.normalizeSelf(), this.node.angle = cc.misc.radiansToDegrees(Math.atan2(this.bulletVec.y, this.bulletVec.x))
                }
            }
            skillInit(e, t, i, n) {
                this.targetFish = e, this.seat = t, this.bulletBet = i, this.betScale = n, this.bulletSpeed = 400, this.targetNode = null, this.dis = Number.MAX_SAFE_INTEGER, this.updateTargetPos(), this.bulletVec && this.node.setPosition(this.node.getPosition().add(this.bulletVec.mul(120))), this.node.setScale(0), cc.tween(this.node).to(.1, {
                    scale: 1.3
                }, {
                    easing: e => cc.easeOut(.3).easing(e)
                }).to(.15, {
                    scale: .9
                }, {
                    easing: e => cc.easeInOut(.3).easing(e)
                }).delay(.5).call(this.onBlast.bind(this)).start();
                let s = r.default.LoadWeapon("TigerWeaponFire", c.PlayerManager.isMainSeat(this.seat));
                s.setPosition(this.node.getPosition()), s.angle = this.node.angle
            }
            onBlast() {
                if (cc.Tween.stopAllByTarget(this.node), this.targetFish && this.targetFish.enabled && this.targetFish.CanCollision) {
                    c.PlayerManager.isMainSeat(this.seat) && this.targetFish.OnHitFish(), this.CreateExplodeEffect(this.node.getPosition());
                    const e = this.seat;
                    c.PlayerManager.isMainSeat(e) && a.default.SkillSystem.SendTigerHit(e, this.bulletBet, "", Number(this.targetFish.ID))
                } else if (c.PlayerManager.isMainSeat(this.seat)) {
                    let e = r.default.SpawnEffect("RefundLabel", !0);
                    e.angle = s.default.isReverse ? 180 : 0;
                    let t = cc.v2(-450, -180);
                    s.default.isReverse ? t.scaleSelf(cc.v2(this.seat % 2 == 0 ? -1 : 1, -1)) : t.scaleSelf(cc.v2(this.seat % 2 == 0 ? 1 : -1, 1)), e.setPosition(t), e.getComponentInChildren(cc.Label).string = l.default.getMultiLangText("Refund") + (this.bulletBet * this.betScale).toString(), c.PlayerManager.Instance.ModifyPlayerEntries(this.seat, this.bulletBet * this.betScale, null, !1), c.PlayerManager.BulletSync(-1, null)
                }
                this.Recycle()
            }
            CreateExplodeEffect(e) {
                let t = r.default.SpawnSkill("TigerBulletBlast", c.PlayerManager.isMainSeat(this.seat));
                t && (t.setPosition(e), t.angle = 360 * Math.random()), c.PlayerManager.isMainSeat(this.seat) && o.default.Instance.Play("TigerBulletBlast")
            }
        };
        m = n([d], m), i.default = m, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../../GameClient": "GameClient",
        "../Common/AudioManager": "AudioManager",
        "../Common/MultiLangSystem": "MultiLangSystem",
        "../Common/ResourceManager": "ResourceManager",
        "../Player/PlayerManager": "PlayerManager",
        "./BaseBullet": "BaseBullet"
    }],
    TigerWeapon: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "bf81aA7es1IF48SXfLmXPhu", "TigerWeapon");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("../../GameClient"),
            a = e("../Common/EnumFilter"),
            o = e("../Skill/BaseSkill"),
            l = e("./BaseWeapon"),
            r = e("./WeaponManager"),
            {
                ccclass: c,
                property: h
            } = cc._decorator;
        let d = class extends l.default {
            constructor() {
                super(...arguments), this.skill = null, this.ShowUpEffect = null
            }
            Init(e, t) {
                if (super.Init(e, t), this.Type = r.WeaponType.Tiger, this.ShowUpEffect.play(), this.skill = s.default.SkillSystem.AddSkill(o.skillEnum.TigerWeapon, e), this.skill.setWeapon(this, t), a.default.playerLockSetting) {
                    let e = Array.from(a.default.playerLockSetting),
                        i = t.UnhitList;
                    if (i)
                        for (let t = 0; t < i.length; t++) {
                            let n = e.indexOf(i[t]); - 1 != n && e.splice(n, 1)
                        }
                    a.default.LockSetting = a.default.TransFishTypeList(e)
                }
            }
            onEnable() {
                this.skill && (this.skill.enabled = !0)
            }
            onDisable() {
                this.skill && (this.skill.enabled = !1)
            }
            ShootState(e) {
                return 0
            }
            ShootFunction(e) {
                this.SetGunRotateUsePos(e), this.FortAni && this.FortAni.play("Shoot")
            }
            UnloadWeapon() {
                this.skill && this.skill.UnUseSkill(), this.skill = null, super.UnloadWeapon()
            }
            stopLock() {
                this.skill && this.skill.setLocking(null)
            }
        };
        n([h(cc.Animation)], d.prototype, "ShowUpEffect", void 0), d = n([c], d), i.default = d, cc._RF.pop()
    }, {
        "../../GameClient": "GameClient",
        "../Common/EnumFilter": "EnumFilter",
        "../Skill/BaseSkill": "BaseSkill",
        "./BaseWeapon": "BaseWeapon",
        "./WeaponManager": "WeaponManager"
    }],
    UniqueFishData: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "364b8c/dOdNfI6x+NdsGA8D", "UniqueFishData");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("../Common/EnumFilter"),
            a = e("../Common/ResourceManager"),
            {
                ccclass: o
            } = cc._decorator;
        let l = class {
            constructor(...e) {
                this.com = null, this.tween = null;
                let t = null;
                switch (e[0]) {
                    case s.FishType.Vampire:
                        switch (SS.Common.GameEnvironment.CurrentGameNow) {
                            case s.FishGame.ZB:
                                (t = a.default.SpawnSkill("VampireOdds")) && (this.com = t.getComponent("BaseSkillOddsUI"));
                                break;
                            case s.FishGame.ALD:
                                (t = a.default.SpawnSkill("AladdinOdds")) && (this.com = t.getComponent("BaseSkillOddsUI"))
                        }
                        break;
                    case s.FishType.Buddha:
                        (t = a.default.SpawnSkill("BuddhaOdds")) && (this.com = t.getComponent("BaseSkillOddsUI"));
                        break;
                    case s.FishType.RedDragon:
                        (t = a.default.LoadBackground("PurpleFrameFire")) && (this.com = t.getComponent("PoolObj"));
                        break;
                    case s.FishType.EternalFlamingDragon:
                        (t = a.default.LoadBackground("YellowFrameFire")) && (this.com = t.getComponent("PoolObj"));
                        break;
                    case s.FishType.BattleShip:
                        (t = a.default.LoadGUI("ShipInfo")) && (this.com = t.getComponent("ShipInfo"));
                        break;
                    case s.FishType.CircusClown:
                        (t = a.default.SpawnSkill("ClownOdds")) && (this.com = t.getComponent("BaseSkillOddsUI"));
                        break;
                    case s.FishType.BlazingTiger:
                        (t = a.default.SpawnSkill("BlazingTigerOdds")) && (this.com = t.getComponent("BaseSkillOddsUI"));
                        break;
                    case s.FishType.ArmorKingCrab:
                        (t = a.default.LoadGUI("ArmorCrabInfo")) && (this.com = t.getComponent("ArmorCrabInfo"))
                }
            }
            get getComponent() {
                return this.com
            }
            setTargetNumber(e) {
                this.com && this.com.setTargetNumber(e)
            }
            getTargetNumber() {
                if (this.com) return this.com.getTargetNumber
            }
            bindFish(e) {
                this.com && this.com.bindFish(e)
            }
            Hide(e = !0, t = !0) {
                this.com && this.com.Hide && this.com.Hide(e, t)
            }
            TreasureCrabInit(e, t, i) {
                this.com && this.com.node != e.node && this.com.FishFadeOut(.5, 1), this.com = e.getComponent("TREASURE_CRAB"), this.com.InitScore(t, i)
            }
            TreasureCrabLevelUp(e) {
                if (e) {
                    let t = e.seat,
                        i = e.bet,
                        n = e.win;
                    this.com.upgrade(t, i, n)
                }
            }
            get getLevel() {
                return this.com ? this.com.Level : 1
            }
            setTimeEvent(e) {
                if (e && e.hasOwnProperty("time") && e.hasOwnProperty("callback")) {
                    let t = e.time;
                    this.tween && this.tween.stop();
                    let i = e.callback;
                    this.tween = cc.tween(this).delay(t / 1e3).call(() => {
                        i(), this.tween = null
                    }).start()
                }
            }
            setCustomData(e) {
                this.com && this.com.setCustomData(e)
            }
        };
        l = n([o], l), i.default = l, cc._RF.pop()
    }, {
        "../Common/EnumFilter": "EnumFilter",
        "../Common/ResourceManager": "ResourceManager"
    }],
    Utility: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "3d66eTYz/1No7ngyTdMIW6j", "Utility"), Object.defineProperty(i, "__esModule", {
            value: !0
        }), i.default = class {
            static NormalitionFloat(e) {
                return Math.round(e / 1 * 1) / 1
            }
            static Numberformat(e, t, i = !1) {
                let n = (e / 1).toFixed(t);
                return i && (n = n.replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")), n
            }
            static NumberformatBet(e, t, i = !1) {
                return t < 1 ? this.Numberformat(e, 1, i) : this.Numberformat(e, 0, i)
            }
            static IsOpposite(e, t) {
                return e <= 1 ? !(t <= 1) : t <= 1
            }
            static ConvertWorldPosition(e) {
                return e.neg()
            }
            static GetAngleFrom2Point(e, t) {
                const i = cc.v2(e.sub(t));
                return -cc.misc.radiansToDegrees(Math.atan2(i.y, i.x))
            }
            static GetLengthFrom2Point(e, t) {
                return cc.v2(e.sub(t)).mag()
            }
            static GetPointWithVector(e, t, i) {
                i = 2 * Math.PI / 360 * (i + 90);
                const n = cc.v2(Math.sin(i), Math.cos(i)).mul(t);
                return e.add(n)
            }
        }, cc._RF.pop()
    }, {}],
    WEALTH_GOD: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "0e97b86lSJHNa+H2MX6XrBu", "WEALTH_GOD");
        var n = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            s = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const a = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            o = e("../../System/WeaponSystem"),
            l = e("../Common/AudioManager"),
            r = e("./BaseFish"),
            {
                ccclass: c,
                property: h
            } = cc._decorator;
        let d = class extends r.default {
            constructor() {
                super(...arguments), this.skeleton = null, this.InitLockPos = new cc.Vec2, this.ColliderList = new Array, this.InitOddsPos = new cc.Vec2, this.OddsNode = null, this.OddsLabel = null, this.oddsBone = null, this.boardOddsBone = null, this.catchOddsBone = null, this.swimSfx = -1, this.currentOdds = 0, this.rollingOdds = 0, this.currentLevel = 0, this.isDisplay = !1, this.isSyncData = !1, this.config = {
                    MAX_ODDS: 9999,
                    MAX_LEVEL: 6,
                    SYNC_INTERVAL: 1,
                    SWIM_STATE: "SWIM",
                    CHANGE_STATE: "CHANGE",
                    CATCH_STATE: "CATCH",
                    ODDS_CHANGE_COLOR: 1,
                    ODDS_COUNT_UP: 2,
                    ODDS_ZOOM: 3,
                    FISH_OFFSET: 4
                }
            }
            get CurrentLevel() {
                return this.currentLevel
            }
            Init(e, t) {
                super.Init(e, t), this.shapeNode = this.node.getChildByName("Shape"), this.o = 180 * Math.floor(Number(this.id) % 4 * .5), this.mainCoillder.setPosition(this.InitLockPos.x, this.InitLockPos.y), this.OddsNode.setPosition(this.InitOddsPos.x, this.InitOddsPos.y), this.OddsLabel.node.stopAllActions(), this.OddsLabel.node.setScale(1, 1), this.oddsBone = null, this.boardOddsBone = null, this.catchOddsBone = null, this.SetOdds(1), this.SetLevel(1), cc.log("[Wealth God]%cFish: %s %cInit %cSetDisplay: false", "color:green;font-size:14px;font-weight:bold", this.id, "color:orange", "color:white"), this.SetDisplay(!1), this.isSyncData = !0
            }
            InitParameter() {
                super.InitParameter(), this.isFeature = !0
            }
            update(e) {
                super.update(e), this.node.angle = a.default.isReverse ? 180 : 0, this.isDisplay && (null != this.oddsBone && this.isDisplay && this.OddsNode.setPosition(this.shapeNode.x + this.oddsBone.worldX, this.shapeNode.y + this.oddsBone.worldY), null != this.boardOddsBone && this.OddsNode.setScale(this.boardOddsBone.scaleX, this.boardOddsBone.scaleY), null != this.catchOddsBone && this.OddsNode.setScale(this.catchOddsBone.scaleX, this.catchOddsBone.scaleY))
            }
            InitSeek(e, t, i) {
                if (this.behaviorType = r.BEHAVIOR_TYPE.SEEK, this.AISeek) {
                    t = Number(this.id) % 12;
                    const n = this.getOffset(this.o % 4);
                    this.AISeek.SetSeek(e, t, this.node, this.id, this.o, n, this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this), i)
                }
            }
            FishOut(e) {
                super.FishOut(e), -1 != this.swimSfx && l.default.Instance.Stop(this.swimSfx), this.swimSfx = -1, this.SetDisplay(!1)
            }
            GetLockLinkPoint(e) {
                if (!this.node || !this.node.active || !this.isInScreen) return null;
                let t = this.node.convertToWorldSpaceAR(this.mainCoillder.getPosition()),
                    i = this.isLockInScreen(this.mainCoillder);
                if (i) return t;
                if (i = this.isLockInScreen(this.lockNode)) return t;
                if (this.lockNode = null, this.subColliderList || (this.subColliderList = this.node.getComponentsInChildren(cc.Collider)), this.subColliderList.length <= 0) return t;
                let n = Number.MAX_VALUE;
                for (let s = 0; s < this.subColliderList.length; s++) {
                    let a = this.isLockInScreen(this.subColliderList[s].node);
                    if (a) {
                        let o = e.sub(a).mag();
                        o < n && (n = o, i = t, this.lockNode = this.subColliderList[s].node)
                    }
                }
                return i
            }
            isLockInScreen(e) {
                let t = -this.fishRadius;
                if (e) {
                    let i = this.node.convertToWorldSpaceAR(e.getPosition());
                    if (this.isSummon && this.mainFishNode && (i = this.mainFishNode.convertToWorldSpaceAR(e.getPosition())), i.x >= t && i.x < a.default.WinSize.width - t && i.y >= t && i.y < a.default.WinSize.height - t) return i
                }
                return null
            }
            SyncData(e, t) {
                null != e && null != t && this.isSyncData && (e != this.currentOdds && this.SetOdds(e, this.isDisplay), t != this.currentLevel && this.SetLevel(t, this.isDisplay), this.isDisplay || (cc.log("[Wealth God]%cFish: %s %cSyncData %cSetDisplay: true", "color:green;font-size:14px;font-weight:bold", this.id, "color:orange", "color:white"), this.SetDisplay(!0, !0)))
            }
            SetDisplay(e, t = !1) {
                this.isDisplay = e, this.canCollision = this.isDisplay, this.node.stopAllActions(), this.isDisplay ? t ? this.node.runAction(cc.fadeIn(.5)) : this.node.opacity = 255 : t ? this.node.runAction(cc.fadeOut(.5)) : this.node.opacity = 0
            }
            SetOdds(e, t = !1) {
                if (!(e < 0 || e > 9999))
                    if (this.currentOdds = e, this.OddsLabel.node.stopActionByTag(this.config.ODDS_COUNT_UP), t && this.rollingOdds != this.currentOdds) {
                        let t = this.rollingOdds,
                            i = e - t,
                            n = Date.now(),
                            s = 0,
                            a = 0;
                        this.OddsLabel.node.runAction(cc.repeatForever(cc.sequence(cc.delayTime(.001), cc.callFunc(() => {
                            s = .001 * (Date.now() - n), a = this.rollingOdds, this.rollingOdds = t + Math.round(i * (s / this.config.SYNC_INTERVAL)), this.rollingOdds >= t + i && (this.rollingOdds = t + i, this.OddsLabel.node.stopActionByTag(this.config.ODDS_COUNT_UP)), this.OddsLabel.string = "x" + this.rollingOdds, a != this.rollingOdds && null == this.OddsNode.getActionByTag(this.config.ODDS_ZOOM) && this.OddsNode.runAction(cc.sequence(cc.scaleTo(.133, 1.33, 1.33), cc.scaleTo(.133, 1, 1)).easing(cc.easeSineInOut())).setTag(this.config.ODDS_ZOOM)
                        }, this)))).setTag(this.config.ODDS_COUNT_UP)
                    } else this.rollingOdds = this.currentOdds, this.OddsLabel.string = "x" + this.currentOdds, this.OddsNode.stopActionByTag(this.config.ODDS_ZOOM), this.OddsNode.setScale(1, 1)
            }
            SetLevel(e, t = !1, i) {
                if (!(e < 1 || e > this.config.MAX_LEVEL))
                    if (this.OddsLabel.node.setScale(1, 1), t && 0 != this.currentLevel && e == this.currentLevel + 1) this.NextLevel(i);
                    else {
                        switch (this.currentLevel = e, this.SetAnimation(this.currentLevel, this.config.SWIM_STATE, !0), this.SetColliderPosition(), this.SetOddsColor(), this.currentLevel) {
                            case 5:
                            case 6:
                            case 7:
                            case 8:
                                this.boardOddsBone = this.skeleton.findBone("LV10");
                                break;
                            default:
                                this.boardOddsBone = null
                        }
                        if (-1 != this.swimSfx && l.default.Instance.Stop(this.swimSfx), this.isDisplay) switch (this.currentLevel) {
                            case 1:
                                this.swimSfx = l.default.Instance.Play("01_wg_copperup", .6, !1);
                                break;
                            case 2:
                                this.swimSfx = l.default.Instance.Play("03_wg_silver", .6, !1);
                                break;
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                            case 8:
                                this.swimSfx = l.default.Instance.Play("05_wg_gold", .6, !1)
                        }
                        i && i(), i = null
                    }
            }
            NextLevel(e) {
                if (this.currentLevel >= this.config.MAX_LEVEL) return;
                let t = ++this.currentLevel;
                if (this.SetAnimation(this.currentLevel - 1, this.config.CHANGE_STATE, !1, () => {
                        this.SetLevel(t, !1, e), e = null
                    }), this.SetColliderPosition(!0), this.SetOddsColor(!0), this.isDisplay) switch (this.currentLevel - 1) {
                    case 1:
                        l.default.Instance.Play("02_wg_level up_1");
                        break;
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                        l.default.Instance.Play("04_wg_level up_2")
                }
            }
            SetOddsColor(e = !1) {
                this.OddsLabel.node.stopActionByTag(this.config.ODDS_CHANGE_COLOR);
                let t = null;
                switch (this.currentLevel) {
                    case 1:
                        t = cc.color(255, 192, 160);
                        break;
                    case 2:
                        t = cc.color(223, 223, 223);
                        break;
                    case 3:
                    case 4:
                        t = cc.color(255, 223, 160);
                        break;
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                        t = cc.color(160, 255, 255);
                        break;
                    default:
                        return
                }
                this.OddsLabel.node.color.equals(t) || (e ? this.OddsLabel.node.runAction(cc.tintTo(.33, t.getR(), t.getG(), t.getB())).setTag(this.config.ODDS_CHANGE_COLOR) : this.OddsLabel.node.color = t)
            }
            SetAnimation(e, t, i, n) {
                this.skeleton.setCompleteListener(null), this.skeleton.setAnimation(0, "LV" + e + "_" + t, i), n && this.skeleton.setCompleteListener(n), n = null
            }
            SetColliderPosition(e = !1) {
                try {
                    this.mainCoillder.stopActionByTag(this.config.FISH_OFFSET), this.ColliderList.forEach(e => {
                        e.node.stopActionByTag(this.config.FISH_OFFSET)
                    }), this.shapeNode.stopActionByTag(this.config.FISH_OFFSET), this.OddsNode.stopActionByTag(this.config.FISH_OFFSET);
                    let i = this.node.getChildByName("CollidersLevelPosition").getChildByName("LV" + this.currentLevel),
                        n = i.children[0].getPosition(),
                        s = i.children[i.childrenCount - 1].getPosition(),
                        a = n.add(s).scaleSelf(new cc.Vec2(-.5, -.5));
                    for (let t = 0; t < this.ColliderList.length; t++) {
                        let n = i.children[t];
                        null != n ? e ? this.ColliderList[t].node.runAction(cc.moveTo(.3, n.getPosition().add(a))).setTag(this.config.FISH_OFFSET) : this.ColliderList[t].node.setPosition(n.getPosition().add(a)) : this.ColliderList[t].node.setPosition(i.children[0].getPosition().add(a))
                    }
                    e ? (this.mainCoillder.runAction(cc.moveTo(.3, this.InitLockPos.add(a))).setTag(this.config.FISH_OFFSET), this.shapeNode.runAction(cc.moveTo(.3, a)).setTag(this.config.FISH_OFFSET), this.OddsNode.runAction(cc.moveTo(.3, this.InitOddsPos.add(a))).setTag(this.config.FISH_OFFSET)) : (this.mainCoillder.setPosition(this.InitLockPos.add(a)), this.shapeNode.setPosition(a), this.OddsNode.setPosition(this.InitOddsPos.add(a)))
                } catch (t) {
                    cc.error(t)
                }
            }
            FishDie(e, t = !0, i) {
                return s(this, void 0, void 0, function*() {
                    let n = i[o.WeaponData.coin],
                        s = i[o.WeaponData.bet],
                        a = n / s,
                        c = i.level;
                    if (this.isDisplay = !0, this.node.stopAllActions(), this.node.opacity = 255, this.isSyncData = !1, this.aliveStatus = r.FishState.DEAD, this.canCollision = !1, this.StopAction(), null != n && null != s && null != c && (a != this.currentOdds || c != this.currentLevel) && a >= 1 && a <= this.config.MAX_ODDS && c >= 1 && c <= this.config.MAX_LEVEL) return this.SetOdds(n / s), void this.SetLevel(c, !0, () => {
                        this.FishDie(e, t, i)
                    });
                    switch (this.ShakeCoinEffect(e), this.CoinEffect(), this.SetAnimation(this.currentLevel, this.config.CATCH_STATE, !1, () => {
                        this.skeleton.setCompleteListener(null), cc.log("[Wealth God]%cFish: %s %cFishDie %cSetDisplay: false", "color:green;font-size:14px;font-weight:bold", this.id, "color:orange", "color:white"), this.SetDisplay(!1), this.RemoveSelf()
                    }), this.boardOddsBone = null, this.currentLevel) {
                        case 1:
                            this.oddsBone = this.skeleton.findBone("Text_LV1"), this.catchOddsBone = this.skeleton.findBone("LV1");
                            break;
                        case 2:
                            this.oddsBone = this.skeleton.findBone("Text_LV2"), this.catchOddsBone = this.skeleton.findBone("LV2");
                            break;
                        case 3:
                        case 4:
                            this.oddsBone = this.skeleton.findBone("Text_LV3"), this.catchOddsBone = this.skeleton.findBone("LV3");
                            break;
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                            this.oddsBone = this.skeleton.findBone("Text_LV4"), this.catchOddsBone = this.skeleton.findBone("LV4")
                    } - 1 != this.swimSfx && l.default.Instance.Stop(this.swimSfx), l.default.Instance.Play("06_wg_get")
                })
            }
            PauseBehavior(e, t) {
                super.PauseBehavior(e, t), this.skeleton.paused = !0
            }
            ResumeBehavior() {
                super.ResumeBehavior(), this.skeleton.paused = !1
            }
        };
        n([h(sp.Skeleton)], d.prototype, "skeleton", void 0), n([h(cc.Vec2)], d.prototype, "InitLockPos", void 0), n([h([cc.Collider])], d.prototype, "ColliderList", void 0), n([h(cc.Vec2)], d.prototype, "InitOddsPos", void 0), n([h(cc.Node)], d.prototype, "OddsNode", void 0), n([h(cc.Label)], d.prototype, "OddsLabel", void 0), d = n([c], d), i.default = d, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../../System/WeaponSystem": "WeaponSystem",
        "../Common/AudioManager": "AudioManager",
        "./BaseFish": "BaseFish"
    }],
    WeaponChoseWindow: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "ba819nszVNKZJc9dayl1jGR", "WeaponChoseWindow");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("../Weapon/WeaponManager"),
            a = e("./PopupWindowCtrl"),
            o = e("./WindowCtrl"),
            {
                ccclass: l,
                property: r
            } = cc._decorator;
        let c = class extends o.default {
            constructor() {
                super(...arguments), this.toggleParent = null, this.WeaponBtnList = null, this.WeaponBtnType = [s.WeaponType.Normal, s.WeaponType.Lock, s.WeaponType.Tiger, s.WeaponType.Dragon], this.RichTextList = null
            }
            showWindow(e = null, t = null, i) {
                if (super.showWindow(e, t, i), this.RichTextList = this.toggleParent.getComponentsInChildren(cc.RichText), null != t && this.RichTextList.length >= t.length)
                    for (let n = 0; n < t.length; n++) this.RichTextList[n].string = t[n]
            }
            Init(e) {
                if (e) {
                    let t = e.WeaponList,
                        i = e.currentType;
                    this.WeaponBtnList = this.toggleParent.toggleItems, this.toggleParent.enabled = !1;
                    for (let e = 0; e < this.WeaponBtnList.length; e++) this.WeaponBtnList[e].node.active = -1 != t.indexOf(this.WeaponBtnType[e]), this.WeaponBtnList[e].isChecked = !1;
                    this.toggleParent.enabled = !0, this.WeaponBtnList[this.WeaponBtnType.indexOf(i)].isChecked = !0
                } else a.default.CloseWindow()
            }
            WeaponBtnClick(e, t) {
                null != this.BtnEvent[0] ? this.BtnEvent[0](parseInt(t)) : a.default.CloseWindow()
            }
        };
        n([r(cc.ToggleContainer)], c.prototype, "toggleParent", void 0), c = n([l], c), i.default = c, cc._RF.pop()
    }, {
        "../Weapon/WeaponManager": "WeaponManager",
        "./PopupWindowCtrl": "PopupWindowCtrl",
        "./WindowCtrl": "WindowCtrl"
    }],
    WeaponManager: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "fc86b0jlGZD3qC9rUArPalI", "WeaponManager");
        var n, s = this && this.__decorate || function(e, t, i, n) {
                var s, a = arguments.length,
                    o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
                else
                    for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
                return a > 3 && o && Object.defineProperty(t, i, o), o
            },
            a = this && this.__awaiter || function(e, t, i, n) {
                return new(i || (i = Promise))(function(s, a) {
                    function o(e) {
                        try {
                            r(n.next(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function l(e) {
                        try {
                            r(n.throw(e))
                        } catch (t) {
                            a(t)
                        }
                    }

                    function r(e) {
                        var t;
                        e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                            e(t)
                        })).then(o, l)
                    }
                    r((n = n.apply(e, t || [])).next())
                })
            };
        Object.defineProperty(i, "__esModule", {
            value: !0
        }), i.WeaponType = void 0;
        const o = e("../Common/ResourceManager"),
            l = e("../Player/PlayerManager"),
            r = e("../Fish/FishManager"),
            c = e("./BaseBullet"),
            h = e("../../GameClient"),
            d = e("../../System/WeaponSystem"),
            u = e("./BaseWeapon"),
            m = e("../Skill/BaseSkill"),
            p = e("../Common/EnumFilter"),
            f = e("../Common/AudioManager"),
            S = e("../Common/MultiLangSystem"),
            g = e("../Player/PopupWindowCtrl"),
            y = e("../Common/PreloadManager"),
            _ = e("../Item/ItemManager"),
            C = e("../../System/ItemSystem"),
            I = e("../../Event/EventPuzzleDropEggMgr"),
            P = e("../../../../../FishCommon/Script/SSCanvasHandler"),
            v = e("../../../../../LobbyCommon/PopupMessage/Script/PopupMsgMgr"),
            b = e("../../../../../LobbyCommon/Net/LobbyClient"),
            M = e("../../GameClient/JsonUtils"),
            E = e("../../GameClient/Player"),
            F = e("../../../../../LobbyCommon/Helper/EventSystem"),
            T = e("../../../../../LobbyCommon/Net/ClickLog"),
            A = e("../../../../../LobbyCommon/Net/ClickLogEnum");
        var w;
        (function(e) {
            e[e.None = -1] = "None", e[e.Normal = 50001] = "Normal", e[e.Lock = 51001] = "Lock", e[e.Dirll = 54001] = "Dirll", e[e.FlameStorm = 54002] = "FlameStorm", e[e.Electric = 55001] = "Electric", e[e.Tiger = 56001] = "Tiger", e[e.Dragon = 57001] = "Dragon"
        })(w = i.WeaponType || (i.WeaponType = {}));
        const {
            ccclass: k
        } = cc._decorator;
        let L = n = class extends cc.Component {
            constructor() {
                super(...arguments), this.playerShoot = !1, this.firstTouch = !1, this.autoShoot = !1, this.weaponNow = [null, null, null, null], this.weaponLast = [null, null, null, null], this.bulletCount = [0, 0, 0, 0], this.weaponAuto = [!1, !1, !1, !1], this.mousePositionNow = cc.Vec2.ZERO, this.bulletLimit = 20, this.bulletSN = 0, this.bullet_manager = {}, this.MainSeat = 0, this.m_weaponSkinData = {}, this.m_weaponSkinNow = [0, 0, 0, 0], this.m_weaponLvNow = [0, 0, 0, 0], this.m_curWeaponType = w.Normal, this.m_isPopupShow = !1, this.weapon_setting = {}, this.baseWeaponList = [], this._isSendSpinLog = !1, this.cooldownCW = !1, this.cooldownWA = !1
            }
            static get Instance() {
                return this.instance
            }
            get AutoShoot() {
                return this.autoShoot
            }
            set IsPopupShow(e) {
                this.m_isPopupShow = e
            }
            BaseWeaponList() {
                return this.baseWeaponList
            }
            onLoad() {
                return a(this, void 0, void 0, function*() {
                    n.instance = this;
                    let e = "weapon_setting";
                    try {
                        yield M.CheckJson(`${SS.Common.GameEnvironment.CurrentGameNow}/${SS.Common.GameEnvironment.CurrentGameNow}/Res/data/weapon_setting/${window.gd_nowLOGO}_weapon_setting`).then(() => {
                            e = `${window.gd_nowLOGO}_weapon_setting`
                        })
                    } catch (t) {}
                    this.weapon_setting = yield M.LoadJson(`${SS.Common.GameEnvironment.CurrentGameNow}/${SS.Common.GameEnvironment.CurrentGameNow}/Res/data/weapon_setting/${e}`), 0 == this.baseWeaponList.length && (this.baseWeaponList = this.weapon_setting.BaseWeaponList)
                })
            }
            Init(e) {
                y.default.Instance.onReleaseSceneEvent.AddListener(this.Clear.bind(this)), this.weaponPosition = new Array(4);
                let t = P.default.WinSize;
                this.weaponPosition[0] = cc.v2(-.25 * t.width, -.44 * t.height), this.weaponPosition[1] = cc.v2(.25 * t.width, -.44 * t.height), this.weaponPosition[2] = cc.v2(.25 * t.width, .44 * t.height), this.weaponPosition[3] = cc.v2(-.25 * t.width, .44 * t.height), P.default.RegisterTouchEvent(cc.Node.EventType.TOUCH_START, this.touchStart, this), P.default.RegisterTouchEvent(cc.Node.EventType.TOUCH_MOVE, this.touchMove, this), P.default.RegisterTouchEvent(cc.Node.EventType.TOUCH_END, this.touchEnd, this), P.default.RegisterTouchEvent(cc.Node.EventType.TOUCH_CANCEL, this.touchCancel, this), this.MainSeat = e;
                for (let i = 0; i < this.weaponPosition.length; i++) i != this.MainSeat && this.LoadWeapon(i, w.Normal, !0)
            }
            touchStart(e) {
                this.playerShoot = !0, this.firstTouch = !0, this.mousePositionNow = P.default.ConvMousePos(e.getLocation())
            }
            touchMove(e) {
                this.playerShoot && (this.mousePositionNow = P.default.ConvMousePos(e.getLocation()))
            }
            touchEnd(e) {
                this.playerShoot = !1
            }
            touchCancel(e) {
                this.playerShoot = !1
            }
            SwitchWeapon() {
                if (!this.checkChangeWeaponState) return;
                if (this.cooldownCW || !this.weaponNow[this.MainSeat]) return;
                g.default.CloseWindow(g.Windows.WeaponChose);
                let e = this.baseWeaponList.indexOf(this.weaponNow[this.MainSeat].Type); - 1 == e && cc.error("SwitchWeapon error unknow weapon"), (e += 1) >= this.baseWeaponList.length && (e -= this.baseWeaponList.length), this.mainPlayerChangeWeapon(this.baseWeaponList[e])
            }
            get checkChangeWeaponState() {
                return l.PlayerManager.Instance.MaxBalance && l.PlayerManager.getPlayer(this.MainSeat).entries + l.PlayerManager.getPlayer(this.MainSeat).winning >= l.PlayerManager.Instance.MaxBalance ? (v.PopupMsgMgr.Instance.ShowPopMsg(v.PopupPriority.Info, "C29", h.default.Instance.title, "MaxBalance", null), !1) : !l.PlayerManager.Instance.isLockChangeBet
            }
            mainPlayerChangeWeapon(e) {
                switch (this.weaponNow[this.MainSeat].Type) {
                    case w.Lock:
                        let e = h.default.SkillSystem.FindSkill(m.skillEnum.Lock, this.MainSeat);
                        e && e.UnUseSkill();
                        break;
                    case w.Tiger:
                        let t = h.default.SkillSystem.FindSkill(m.skillEnum.TigerWeapon, this.MainSeat);
                        t && t.UnUseSkill();
                        break;
                    case w.Dragon:
                        let i = h.default.SkillSystem.FindSkill(m.skillEnum.DragonWeapon, this.MainSeat);
                        i && i.UnUseSkill()
                }
                switch (this.RecycleWeapon(this.MainSeat), this.LoadWeapon(this.MainSeat, e), this.AutoShoot = !1, e) {
                    case w.Normal:
                    case w.Lock:
                        f.default.Instance.Play("gunswitch_on");
                        break;
                    case w.Tiger:
                        f.default.Instance.Play("13_wild_tiger");
                        break;
                    case w.Dragon:
                        f.default.Instance.Play("canon_dragon_05")
                }
                this.m_curWeaponType = e;
                let t = this.weapon_setting[e].UnhitList;
                t ? r.default.Instance.SetUnhitableFishColor(p.default.TransFishTypeList(t), cc.Color.GRAY) : r.default.Instance.SetUnhitableFishColor([], cc.Color.WHITE), h.default.FishUIMgr.ChangeWeaponButton(e, this.baseWeaponList);
                let i = 1,
                    s = 6;
                this.weapon_setting[e].betScale && (i = this.weapon_setting[e].betScale), this.weapon_setting[e]["1secShoot"] && (s = this.weapon_setting[e]["1secShoot"]);
                let a = l.PlayerManager.getPlayer(this.MainSeat);
                h.default.FishUIMgr.ShowPurchaseHint(a.entries < a.bet_value * n.Instance.getBetScale), h.default.FishUIMgr.SetBet(a.bet_value, i), h.default.Instance.UpdateBetData(a.bet_value, i, s), this.cooldownCW = !0, this.scheduleOnce(() => {
                    this.cooldownCW = !1, h.default.FishUIMgr.ResetWeaponToggle && h.default.FishUIMgr.ResetWeaponToggle()
                }, .3), this.CheckWeaponChangeHint()
            }
            SwitchAuto() {
                if (this.checkChangeWeaponState && !this.cooldownWA) {
                    if (g.default.CloseWindow(g.Windows.WeaponChose), n.Instance.AutoShoot = !n.Instance.AutoShoot, F.EventSystem.Event(F.FishHunter.SwitchAuto).Notify(n.Instance.AutoShoot), f.default.Instance.Play("common01"), n.Instance.AutoShoot && p.default.playerLockSetting) {
                        let e = Array.from(p.default.playerLockSetting),
                            t = this.weapon_setting[this.getWeaponType(this.MainSeat)].UnhitList;
                        if (t)
                            for (let i = 0; i < t.length; i++) {
                                let n = e.indexOf(t[i]); - 1 != n && e.splice(n, 1)
                            }
                        p.default.LockSetting = p.default.TransFishTypeList(e)
                    } else 0 == this.bulletLimit && this.ForceStopAuto();
                    this.cooldownWA = !0, this.scheduleOnce(() => {
                        this.cooldownWA = !1
                    }, .3)
                }
            }
            set AutoShoot(e) {
                this.autoShoot = e, this.AutoState(this.MainSeat, e), h.default.PlayerSystem && h.default.PlayerSystem.UpdateBetValue(l.PlayerManager.getPlayer(this.MainSeat)), h.default.FishUIMgr.SwitchAutoButton(this.autoShoot)
            }
            ForceStopAuto() {
                switch (this.AutoShoot = !1, this.playerShoot = !1, this.getWeaponType(l.PlayerManager.MainSeat)) {
                    case w.Lock:
                        let e = h.default.SkillSystem.FindSkill(m.skillEnum.Lock, l.PlayerManager.MainSeat);
                        e && (cc.warn("setLocking null"), e.setLocking(null));
                        break;
                    case w.Tiger:
                        let t = h.default.SkillSystem.FindSkill(m.skillEnum.TigerWeapon, l.PlayerManager.MainSeat);
                        t && (cc.warn("setLocking null"), t.setLocking(null));
                        break;
                    case w.Dragon:
                        let i = h.default.SkillSystem.FindSkill(m.skillEnum.DragonWeapon, l.PlayerManager.MainSeat);
                        i && (cc.warn("setLocking null"), i.setLocking(null))
                }
            }
            GetSkillWeapon(e, t) {
                if (this.weaponNow[e] && (this.weaponNow[e].enabled = !1, this.weaponNow[e].node.active = !1), this.weaponLast[e] || (this.weaponLast[e] = this.weaponNow[e]), e == this.MainSeat) {
                    l.PlayerManager.Instance.isLockChangeBet = !0;
                    let t = null;
                    this.weaponLast[e] && (t = this.weapon_setting[this.weaponLast[e].Type].UnhitList), t && r.default.Instance.SetUnhitableFishColor([], cc.Color.WHITE)
                }
                if (t) return this.LoadWeapon(e, t), this.weaponNow[e];
                this.weaponNow[e] = null
            }
            ReturnToBaseWeapon(e) {
                if (this.weaponLast[e]) {
                    this.RecycleWeapon(e), this.weaponNow[e] = this.weaponLast[e], this.weaponLast[e] = null;
                    let t = null;
                    this.weaponNow[e] && (t = this.weapon_setting[this.weaponNow[e].Type].UnhitList), t && r.default.Instance.SetUnhitableFishColor(t, cc.Color.GRAY)
                }
                this.weaponNow[e].node.active = !0, this.weaponNow[e].enabled = !0, this.AutoState(e, this.weaponAuto[e]), e == this.MainSeat && (l.PlayerManager.Instance.isLockChangeBet = !1)
            }
            ChangeWeapon(e, t, i = !1) {
                this.getWeaponType(e) != t ? (this.RecycleWeapon(e), this.LoadWeapon(e, t, i)) : this.weaponNow[e].GunAlpha(i), SS.Common.GameEnvironment.CurrentGameNow == p.FishGame.MF && this.LoadWeapon(e, t, i)
            }
            OnBetChange(e) {
                SS.Common.GameEnvironment.CurrentGameNow == p.FishGame.MF && this.LoadWeapon(e, this.m_curWeaponType)
            }
            SetWeaponSkinData(e) {
                this.m_weaponSkinData = e
            }
            GetWeaponSkipID(e, t, i = !1) {
                let n = t.toString(),
                    s = l.PlayerManager.getPlayer(e).bet_value;
                l.PlayerManager.Instance.m_isUIInitFinish && (s = Number.parseInt(l.PlayerManager.getBetCtrl(e).betLabel.string));
                let a = this.m_weaponSkinData[s];
                (null == a || i) && (a = 11, cc.warn("weaponLv == undefined || alpha"), s > 300 && (a = 32)), this.m_weaponLvNow[e] = a;
                let o = n + a.toString();
                return Number.parseInt(o)
            }
            LoadWeapon(e, t, i = !1) {
                if (SS.Common.GameEnvironment.CurrentGameNow == p.FishGame.MF) {
                    let i = t;
                    if (i == w.Normal || i == w.Lock) {
                        if ((i = this.GetWeaponSkipID(e, t)) == this.m_weaponSkinNow[e]) return;
                        this.m_weaponSkinNow[e] = i, this.RecycleWeapon(e), t = i
                    }
                }
                let n = o.default.LoadWeapon(t, this.MainSeat == e);
                n && (n.setPosition(this.weaponPosition[e]), this.weaponNow[e] = n.getComponent(u.default), this.weaponNow[e].Init(e, this.weapon_setting[t]), this.weaponNow[e].GunAlpha(i))
            }
            RecycleWeapon(e) {
                this.weaponNow[e] && (this.weaponNow[e].UnloadWeapon(), o.default.UnloadWeapon(this.weaponNow[e].Type, this.weaponNow[e].node), this.weaponNow[e] = null)
            }
            getWeapon(e) {
                if (this.weaponNow[e]) return this.weaponNow[e]
            }
            getWeaponType(e) {
                if (this.weaponNow[e]) return this.weaponNow[e].Type
            }
            GetWeaponPosition(e) {
                return this.weaponNow[e].node.parent.convertToWorldSpaceAR(this.weaponPosition[e])
            }
            static WeaponPosition(e, t = cc.Vec2.ZERO, i = 1) {
                if (!this.instance) return;
                let n = cc.v2(this.instance.weaponPosition[e]);
                return (e > 1 ? n.sub(t) : n.add(t)).scale(cc.v2(i, i))
            }
            static WeaponUIPosition(e) {
                return P.default.isReverse ? e < 2 ? cc.v2(this.instance.weaponPosition[e + 2]) : cc.v2(this.instance.weaponPosition[e - 2]) : cc.v2(this.instance.weaponPosition[e])
            }
            static WeaponGUIRotation(e, t = !1) {
                return t ? P.default.isReverse && e > 1 ? 180 : 0 : P.default.isReverse ? 180 : 0
            }
            update(e) {
                this.PlayerShoot()
            }
            PlayerShoot() {
                if (!this.m_isPopupShow && (this.playerShoot || this.AutoShoot)) {
                    if (!this.weaponNow[this.MainSeat]) return;
                    switch (this.weaponNow[this.MainSeat].ShootState(this.firstTouch)) {
                        case 0:
                            return;
                        case 1:
                            this.firstTouch = !1;
                            break;
                        case 2:
                            let e = SS.Common.GameEnvironment.IsShowDonate ? "C42" : "C41";
                            return v.PopupMsgMgr.Instance.ShowPopMsg(v.PopupPriority.Info, e, h.default.Instance.title, "Insufficient balance", null), this.AutoShoot = !1, this.playerShoot = !1, void h.default.FishUIMgr.ShowPurchaseHint(!0);
                        case 3:
                            return v.PopupMsgMgr.Instance.ShowPopMsg(v.PopupPriority.Info, "C29", h.default.Instance.title, "MaxBalance", null), this.AutoShoot = !1, void(this.playerShoot = !1)
                    }
                    if (h.default.FishUIMgr.IsPurchaseOpen()) return;
                    if (this.bulletCount[this.MainSeat] >= this.bulletLimit) return;
                    F.EventSystem.Event(F.FishHunter.PlayerShoot).Notify();
                    let e = this.mousePositionNow;
                    !P.default.isReverse && e.y < -250 && (e.y = -250), P.default.isReverse && e.y > 250 && (e.y = 250);
                    let t = l.PlayerManager.getPlayer(this.MainSeat),
                        i = this.CreateBullet(this.MainSeat, e, t.bet_value);
                    this.SendShootCmd(i.bulletID, t.bet_value), this.weaponNow[this.MainSeat].ShootFunction(e), this.AutoShoot || h.default.Instance.RecordClickLog(!0), "playgd" == window.gd_nowLOGO && -1 == SS.Common.GameEnvironment.SentGameFlowStatus.indexOf(SS.Common.GameEnvironment.CurrentGameNow + b.GAME_STATUS.FIRST_SPIN) && (SS.Common.GameEnvironment.SentGameFlowStatus.push(SS.Common.GameEnvironment.CurrentGameNow + b.GAME_STATUS.FIRST_SPIN), b.LobbyClient.Instance.GetUserClient.SendPlayFlowData(SS.Common.GameEnvironment.DeviceInfo, SS.Common.GameEnvironment.CurrentGameNow, b.GAME_STATUS.FIRST_SPIN)), !1 === this._isSendSpinLog && (this._isSendSpinLog = !0, T.ClickLog.DirectSend(A.LogName.PlayerAction, A.LogType_PlayerAction.InGame, A.LogEvent_InGame.Spin)), this.CheckWeaponChangeHint()
                }
            }
            SendShootCmd(e, t) {
                switch (this.weaponNow[this.MainSeat].Type) {
                    case w.Normal:
                        h.default.WeaponSystem && h.default.WeaponSystem.Shoot(this.MainSeat, this.mousePositionNow, e, t);
                        break;
                    case w.FlameStorm:
                        h.default.SkillSystem.FlameStormShoot(e, this.mousePositionNow)
                }
            }
            OtherPlayerShoot(e, t, i, n) {
                if (l.PlayerManager.isMainSeat(e)) return;
                if (r.default.Instance.currect_fps < 20 || this.bulletCount[e] >= this.bulletLimit || !this.weaponNow[e] || this.weaponNow[e].Type != w.Normal) return;
                let s = new cc.Vec2(i, n);
                this.CreateBullet(e, s), this.weaponNow[e].ShootFunction(s), this.weaponNow[e].autoAnim || h.default.Instance.RecordClickLog(!1)
            }
            CreateBullet(e, t, i) {
                let n = e + "_" + this.bulletSN;
                this.bulletSN >= Number.MAX_VALUE ? this.bulletSN = 0 : this.bulletSN++;
                let s = this.weaponNow[e].Type;
                SS.Common.GameEnvironment.CurrentGameNow == p.FishGame.MF && (s = s == w.Normal ? this.m_weaponSkinNow[e] : s);
                const a = o.default.SpawnBullet(s, this.MainSeat == e).getComponent(c.default);
                return t && a.Init(n, e, this.weaponNow[e].Type, t, i), this.bulletCount[e]++, this.bullet_manager[a.bulletID] = a, a
            }
            HitFishRequest(e, t) {
                const i = e.bulletID;
                if (!this.bullet_manager.hasOwnProperty(i)) return;
                delete this.bullet_manager[i];
                const n = e.seat;
                e.Recycle(), this.bulletCount[n]--;
                let s = p.EffectType.Blast;
                this.weaponNow[n] && SS.Common.GameEnvironment.CurrentGameNow == p.FishGame.MF && (s = this.weaponNow[n].Type == w.Normal ? this.m_weaponSkinNow[n] : p.EffectType.Blast), o.default.SpawnEffect(s, n == this.MainSeat).setPosition(e.node.getPosition()), n == this.MainSeat && 0 != t.length && null != t && h.default.WeaponSystem && h.default.WeaponSystem.Blast(n, i, e.bulletBet, t)
            }
            getMainPlayerWeaponType() {
                return this.weaponNow[this.MainSeat] ? this.weaponNow[this.MainSeat].Type : this.weaponLast[this.MainSeat] ? this.weaponLast[this.MainSeat].Type : -1
            }
            HitFishRequestCallback(e, t, i, n, s, a, o, c) {
                if (s == this.MainSeat ? l.PlayerManager.BulletSync(null, e) : this.bulletCount[s]--, "playgd" == window.gd_nowLOGO && o && o.hasOwnProperty("900005") && I.default.Instance.ParsePuzzelDropEgg(s, s == this.MainSeat, o, c), null == i || i.length <= 0) return void(s == this.MainSeat && (r.default.Instance.IsEternalFish(c) ? setTimeout(() => {
                    l.PlayerManager.BulletSync(-1)
                }, 1e3) : l.PlayerManager.BulletSync(-1)));
                let h, u, m = 0,
                    f = cc.Vec2.ZERO,
                    S = Object.keys(i);
                for (let g = 0; g < S.length; g++) {
                    m = (h = i[S[g]])[d.WeaponData.coin], u = h[d.WeaponData.fs_item_dict];
                    let t = r.default.Instance.GetFishByID(S[g].toString());
                    if (t) E.GameLogMainPlayer.pushWinning(t.Type, n, s, m, !0), t.IsFeatureFish && (a = !0), a && !p.default.KillableFeatureFish(t.Type) || r.default.Instance.KillFish(s, t, m, n, null, null, null, h), f = P.default.ConvMousePos(t.getFishPos()), p.default.getFishType(t.Type) == p.FishType.WealthGod ? (f = P.default.isReverse ? cc.v2(0, -100) : cc.v2(0, 100), setTimeout(() => {
                        this.CallDropItem(s, u, f, !1)
                    }, 5e3)) : this.CallDropItem(s, u, f, !1);
                    else if (m > 0 && l.PlayerManager.Instance.ModifyPlayerWinning(s, m, e), s == this.MainSeat) {
                        let e, t;
                        Math.random() > .5 ? (e = Math.floor(1136 * Math.random() - 568), t = Math.random() > .5 ? 350 : -320) : (e = Math.random() > .5 ? 600 : -600, t = Math.floor(660 * Math.random() - 320)), f = cc.v2(e, t), this.CallDropItem(s, u, f)
                    }
                }
            }
            CallDropItem(e, t, i, n = !0) {
                if (null != t) {
                    let s = t.freeze_amount,
                        a = t.summon_amount;
                    Object.keys(t).forEach(o => {
                        if (o == C.ITEM_ID.FREEZE || o == C.ITEM_ID.SUMMON) {
                            let l = t[o];
                            l > 0 && _.default.Instance.DropItemEffect(e, o, l, i, n, null, s, a)
                        }
                    })
                }
            }
            AutoState(e, t) {
                this.weaponNow && this.weaponNow[e] && (this.weaponAuto[e] = t, this.weaponNow[e].AutoState(t))
            }
            PlayerLeave(e) {
                this.AutoState(e, !1), this.ChangeWeapon(e, w.Normal, !0)
            }
            WeaponChose() {
                switch (window.gd_nowLOGO) {
                    case "magiccity":
                        break;
                    default:
                        if (g.default.CloseWindow(g.Windows.WeaponChose)) return
                }
                if (!this.checkChangeWeaponState) return;
                if (!this.weaponNow[this.MainSeat]) return;
                if (2 == this.baseWeaponList.length) return void this.SwitchWeapon();
                let e = "",
                    t = "";
                this.baseWeaponList.indexOf(w.Tiger) >= 0 && (e = S.default.getMultiLangText("TigerInfo").replace("#BS#", "x" + this.weapon_setting[w.Tiger].betScale)), this.baseWeaponList.indexOf(w.Dragon) >= 0 && (t = S.default.getMultiLangText("DragonInfo").replace("#BS#", "x" + this.weapon_setting[w.Dragon].betScale));
                let i = {};
                switch (i.currentType = this.getWeaponType(this.MainSeat), i.WeaponList = this.baseWeaponList, window.gd_nowLOGO) {
                    case "magiccity":
                        let n = [S.default.getMultiLangText("SpeedInfo"), S.default.getMultiLangText("LockInfo")];
                        "" != e && n.push(e), "" != t && n.push(t), h.default.FishUIMgr.showWeaponChosePanel(n, i);
                        break;
                    default:
                        let s = new g.WindowsData(g.Windows.WeaponChose, [this.WeaponChoseBtnClick.bind(this)], [S.default.getMultiLangText("SpeedInfo"), S.default.getMultiLangText("LockInfo"), e, t], i);
                        g.default.EnableWindow(s, !1)
                }
            }
            WeaponChoseBtnClick(e) {
                e != this.getWeaponType(this.MainSeat) ? this.checkChangeWeaponState && !this.cooldownCW && this.weaponNow[this.MainSeat] && this.mainPlayerChangeWeapon(e) : g.default.CloseWindow(g.Windows.WeaponChose)
            }
            LockSetting() {
                if (!this.checkChangeWeaponState) return;
                let e = JSON.parse(JSON.stringify(this.weapon_setting[this.getWeaponType(this.MainSeat)]));
                if (SS.Common.GameEnvironment.CurrentGameNow == p.FishGame.BS) {
                    let t = SS.Network.LoginModel.LoginInfo.pin_ark_id,
                        i = r.default.Instance.getUniqueFishData(p.FishType.BattleShip).getComponent.getData();
                    for (let n = 89; n < 92; n++) {
                        let s = "";
                        switch (n) {
                            case 89:
                                s = "SUBMARINE_R";
                                break;
                            case 90:
                                s = "SUBMARINE_G";
                                break;
                            case 91:
                                s = "SUBMARINE_B"
                        }
                        if (i[s].ark_id == t) {
                            let t = e.UnhitList;
                            t ? t.push(n) : t = [n], e.UnhitList = t
                        }
                    }
                }
                let t = new g.WindowsData(g.Windows.LockSetting, [this.LockSettingConfirm.bind(this)], [S.default.getMultiLangText("LockSetting"), S.default.getMultiLangText("Ok"), S.default.getMultiLangText("Clear")], e);
                g.default.EnableWindow(t), f.default.Instance.PlayByAudioClipTable("LOCK_SETTING_BTN")
            }
            LockSettingConfirm() {
                g.default.CloseWindow();
                let e = null;
                switch (n.Instance.getWeaponType(l.PlayerManager.MainSeat)) {
                    case w.Lock:
                        e = SS.Common.GameEnvironment.CurrentGameNow == p.FishGame.MF ? h.default.SkillSystem.FindSkill(this.GetSkillLockLv(this.MainSeat), l.PlayerManager.MainSeat) : h.default.SkillSystem.FindSkill(m.skillEnum.Lock, l.PlayerManager.MainSeat);
                        break;
                    case w.Tiger:
                        e = h.default.SkillSystem.FindSkill(m.skillEnum.TigerWeapon, l.PlayerManager.MainSeat);
                        break;
                    case w.Dragon:
                        e = h.default.SkillSystem.FindSkill(m.skillEnum.DragonWeapon, l.PlayerManager.MainSeat)
                }
                if (e)
                    if (e.setLocking(null), null != p.default.LockSetting) {
                        if (h.default.FishUIMgr.SwitchLockSettingButton(!0), l.PlayerManager.getPlayer(this.MainSeat).entries < this.getBetScale) {
                            let e = SS.Common.GameEnvironment.IsShowDonate ? "C42" : "C41";
                            return v.PopupMsgMgr.Instance.ShowPopMsg(v.PopupPriority.Info, e, h.default.Instance.title, "Insufficient balance", null), void h.default.FishUIMgr.ShowPurchaseHint(!0)
                        }
                        e.FindNextFish(), n.Instance.AutoShoot || (n.Instance.AutoShoot = !0)
                    } else h.default.FishUIMgr.SwitchLockSettingButton(!1)
            }
            CheckWeaponChangeHint() {
                h.default.FishUIMgr.CloseWeaponActiveHint(), h.default.FishUIMgr.IsWeaponChangeHintActive && h.default.FishUIMgr.CloseWeaponChangeHint()
            }
            get getBetScale() {
                let e = 1;
                return this.weapon_setting[this.getWeaponType(this.MainSeat)] && this.weapon_setting[this.getWeaponType(this.MainSeat)].betScale && (e = this.weapon_setting[this.getWeaponType(this.MainSeat)].betScale), e
            }
            InitWeaponList(e) {
                let t = [w.Normal, w.Lock];
                e.hasOwnProperty("Scale") && e.Scale && t.push(w.Tiger), e.hasOwnProperty("MultipleScale") && e.MultipleScale && t.push(w.Dragon), this.baseWeaponList = t
            }
            ChangeWeaponList(e) {
                let t = [w.Normal, w.Lock];
                e.hasOwnProperty("Scale") && e.Scale && t.push(w.Tiger), e.hasOwnProperty("MultipleScale") && e.MultipleScale && t.push(w.Dragon);
                let i = [];
                for (let a = 0; a < t.length; a++) - 1 == this.baseWeaponList.indexOf(t[a]) && i.push(t[a]);
                i.length > 0 && (g.default.CloseWindow(g.Windows.WeaponChose), h.default.FishUIMgr.WeaponActiveHint(i));
                let n = [],
                    s = !1;
                for (let a = 0; a < this.baseWeaponList.length; a++) - 1 == t.indexOf(this.baseWeaponList[a]) && (n.push(this.baseWeaponList[a]), this.weaponNow[this.MainSeat].Type == this.baseWeaponList[a] && (s = !0));
                if (n.length > 0 && g.default.CloseWindow(g.Windows.WeaponChose), s) {
                    let e = "";
                    n.length > 1 ? e = "C63" : n[0] == w.Tiger ? e = "C61" : n[0] == w.Dragon && (e = "C62"), this.mainPlayerChangeWeapon(w.Lock), v.PopupMsgMgr.Instance.ShowPopMsg(v.PopupPriority.Info, e, h.default.Instance.title, "WeaponOff")
                } else h.default.FishUIMgr.ChangeWeaponButton(this.getWeaponType(this.MainSeat), this.baseWeaponList);
                this.baseWeaponList = t
            }
            Clear() {
                this.weaponNow = [null, null, null, null], this.weaponLast = [null, null, null, null], this.bulletCount = [0, 0, 0, 0], this.bullet_manager = {}, this.m_weaponSkinData = {}, n.instance = null
            }
            GetSkillLockLv(e) {
                l.PlayerManager.getBetCtrl(e).betLabel.string;
                let t = this.m_weaponLvNow[e],
                    i = m.skillEnum.Lock;
                switch (t) {
                    case 11:
                    case 12:
                        i = m.skillEnum.Lock;
                        break;
                    case 21:
                    case 22:
                        i = m.skillEnum.LockLv2;
                        break;
                    case 31:
                    case 32:
                        i = m.skillEnum.LockLv3
                }
                return i
            }
        };
        L.instance = null, L = n = s([k], L), i.default = L, cc._RF.pop()
    }, {
        "../../../../../FishCommon/Script/SSCanvasHandler": void 0,
        "../../../../../LobbyCommon/Helper/EventSystem": void 0,
        "../../../../../LobbyCommon/Net/ClickLog": void 0,
        "../../../../../LobbyCommon/Net/ClickLogEnum": void 0,
        "../../../../../LobbyCommon/Net/LobbyClient": void 0,
        "../../../../../LobbyCommon/PopupMessage/Script/PopupMsgMgr": void 0,
        "../../Event/EventPuzzleDropEggMgr": "EventPuzzleDropEggMgr",
        "../../GameClient": "GameClient",
        "../../GameClient/JsonUtils": "JsonUtils",
        "../../GameClient/Player": "Player",
        "../../System/ItemSystem": "ItemSystem",
        "../../System/WeaponSystem": "WeaponSystem",
        "../Common/AudioManager": "AudioManager",
        "../Common/EnumFilter": "EnumFilter",
        "../Common/MultiLangSystem": "MultiLangSystem",
        "../Common/PreloadManager": "PreloadManager",
        "../Common/ResourceManager": "ResourceManager",
        "../Fish/FishManager": "FishManager",
        "../Item/ItemManager": "ItemManager",
        "../Player/PlayerManager": "PlayerManager",
        "../Player/PopupWindowCtrl": "PopupWindowCtrl",
        "../Skill/BaseSkill": "BaseSkill",
        "./BaseBullet": "BaseBullet",
        "./BaseWeapon": "BaseWeapon"
    }],
    WeaponSystem: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "2b8a3yHuPFKoKONvzZ33amW", "WeaponSystem"), Object.defineProperty(i, "__esModule", {
            value: !0
        }), i.WeaponData = void 0;
        const n = e("../GameClient/Player"),
            s = e("../MainGame/Common/EnumFilter"),
            a = e("../MainGame/Fish/FishManager"),
            o = e("../MainGame/Player/PlayerManager"),
            l = e("./baseSystem"),
            r = "w1",
            c = "w2",
            h = "VampireOdds",
            d = "LuckyBuddhaOdds",
            u = "TreasureCrab",
            m = "TreasureCrabInfo",
            p = "CircusClownOdds",
            f = "FlamingTigerOdds";
        i.WeaponData = {
            id: "1",
            seat: "2",
            credits: "3",
            x: "4",
            y: "5",
            fish_id: "6",
            fish_id_list: "7",
            fish_dead_dict: "8",
            bet: "9",
            odds: "10",
            coin: "11",
            fs_item_dict: "13",
            time: "15",
            multiple: "16",
            feature: "17",
            item: "18"
        }, i.default = class extends l.default {
            constructor(e) {
                super(e, "weapon"), this.ShootEvent = null, this.UpdateAssetEvent = null, this.BlastEvent = null, this.BlastBetEvent = null, this.UniqueOddsEvent = null, this.RegisterCmdCallback(r, this.onShoot.bind(this)), this.RegisterCmdCallback(c, this.onBlast.bind(this), c, [null, "2"]), this.RegisterCmdCallback(h, this.onSyncFishOdds.bind(this)), this.RegisterCmdCallback(d, this.onSyncFishOdds.bind(this)), this.RegisterCmdCallback(p, this.onSyncFishOdds.bind(this)), this.RegisterCmdCallback(f, this.onSyncFishOdds.bind(this)), this.RegisterCmdCallback(u, this.onTreasureCrabEvent.bind(this)), this.RegisterCmdCallback(m, this.onTreasureCrabEvent.bind(this))
            }
            Shoot(e, t, n, s) {
                let a = {};
                a[i.WeaponData.x] = t.x, a[i.WeaponData.y] = t.y, a[i.WeaponData.id] = n, a[i.WeaponData.seat] = e, a[i.WeaponData.bet] = s, this.SendCmd(r, a)
            }
            Blast(e, t, n, s) {
                let a = {};
                a[i.WeaponData.id] = t, a[i.WeaponData.seat] = e, a[i.WeaponData.bet] = n, a[i.WeaponData.fish_id_list] = s, this.SendCmd(c, a, !1, e)
            }
            onShoot(e, t) {
                if (this.ShootEvent) {
                    const e = t[i.WeaponData.seat],
                        n = t[i.WeaponData.bet],
                        s = t[i.WeaponData.x],
                        a = t[i.WeaponData.y];
                    this.ShootEvent(e, n, s, a)
                }
                if (t.hasOwnProperty("player_info")) {
                    let e = t.player_info;
                    this.UpdateAssetEvent && this.UpdateAssetEvent(e)
                }
            }
            onBlast(e, t) {
                if (t.hasOwnProperty("result")) {
                    let e = t.result;
                    const s = t[i.WeaponData.seat];
                    if (t.hasOwnProperty("betRange") && t.hasOwnProperty("bet")) {
                        let i = t.betRange,
                            n = 0;
                        t.hasOwnProperty("bet") && (n = t.bet), this.BlastBetEvent(s, i, e, n)
                    }
                    if (0 == e && this.BlastEvent) {
                        const e = t[i.WeaponData.credits],
                            a = t[i.WeaponData.id],
                            o = t[i.WeaponData.fish_dead_dict],
                            l = t[i.WeaponData.bet],
                            r = t[i.WeaponData.feature],
                            c = t.puzzle_ack,
                            h = t.hit_fish_id_list[0];
                        n.GameLogMainPlayer.pushHit(h, l, s), this.BlastEvent(e, a, o, l, s, r, c, h)
                    }
                }
                if (t.hasOwnProperty("player_info")) {
                    let e = t.player_info;
                    this.UpdateAssetEvent && this.UpdateAssetEvent(e)
                }
            }
            onSyncFishOdds(e, t) {
                if (this.UniqueOddsEvent) {
                    if (t.hasOwnProperty("Vampire_odds")) {
                        let e = t.Vampire_odds;
                        this.UniqueOddsEvent(e, s.FishType.Vampire)
                    }
                    if (t.hasOwnProperty("LuckyBuddha_odds")) {
                        let e = t.LuckyBuddha_odds;
                        a.default.Instance.UniqueFishOddsEvent(e, s.FishType.Buddha)
                    }
                    if (t.hasOwnProperty("CircusClown_odds")) {
                        let e = t.CircusClown_odds;
                        a.default.Instance.UniqueFishOddsEvent(e, s.FishType.CircusClown)
                    }
                    if (t.hasOwnProperty("FlamingTiger_odds")) {
                        let e = t.FlamingTiger_odds;
                        a.default.Instance.UniqueFishOddsEvent(e, s.FishType.BlazingTiger)
                    }
                }
            }
            onTreasureCrabEvent(e, t) {
                if (t.hasOwnProperty("treasure_score") && a.default.Instance.getUniqueFishData(s.FishType.TreasureCrab).setTargetNumber(t.treasure_score), t.hasOwnProperty("win_type")) {
                    const e = t.seat;
                    switch (t.win_type) {
                        case "capture":
                            const i = t.id;
                            let n = a.default.Instance.GetFishByID(i);
                            const l = t.win,
                                r = t.bet;
                            a.default.Instance.KillFish(e, n, l, r);
                            break;
                        case "upgrade":
                            o.PlayerManager.isMainSeat(e) && o.PlayerManager.BulletSync(1), a.default.Instance.getUniqueFishData(s.FishType.TreasureCrab).TreasureCrabLevelUp(t)
                    }
                }
            }
        }, cc._RF.pop()
    }, {
        "../GameClient/Player": "Player",
        "../MainGame/Common/EnumFilter": "EnumFilter",
        "../MainGame/Fish/FishManager": "FishManager",
        "../MainGame/Player/PlayerManager": "PlayerManager",
        "./baseSystem": "baseSystem"
    }],
    WheelItem: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "9a377FzYiZHLbYU0oPbYD76", "WheelItem");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const {
            ccclass: s,
            property: a
        } = cc._decorator;
        let o = class extends cc.Component {
            constructor() {
                super(...arguments), this.arrowAnim = null, this.oddsText = null, this.hitAnim = null, this.spriteList = null, this.itemOdds = 0, this.isArrow = !1
            }
            Init(e) {
                if (this.itemOdds = e, this.SetMultiOddsText(e), this.hitAnim && (this.hitAnim.node.active = !1), this.spriteList || (this.spriteList = this.getComponentsInChildren(cc.Sprite)), this.spriteList)
                    for (let t = 0; t < this.spriteList.length; t++) this.spriteList[t].node.opacity = 0;
                this.oddsText && (this.oddsText.node.opacity = 0)
            }
            SetMultiOddsText(e) {
                e <= 0 ? (this.arrowAnim && (this.arrowAnim.node.active = !0, this.arrowAnim.play()), this.oddsText && (this.oddsText.node.active = !1), this.isArrow = !0) : (this.arrowAnim && (this.arrowAnim.node.active = !1), this.oddsText && (this.oddsText.node.active = !0, this.oddsText.string = e.toString()), this.isArrow = !1)
            }
            GetOdds() {
                return this.itemOdds
            }
            IsArrow() {
                return this.isArrow
            }
            AppearFunction() {
                if (this.spriteList) {
                    for (let e = 0; e < this.spriteList.length; e++) this.spriteList[e].node.runAction(cc.fadeIn(.5));
                    this.oddsText && this.oddsText.node.runAction(cc.fadeIn(.5))
                }
            }
            HitFunction() {
                this.hitAnim && (this.hitAnim.node.active = !0, this.hitAnim.play())
            }
            Reset() {
                this.arrowAnim.stop(), this.hitAnim.stop(), this.oddsText.string = null
            }
        };
        n([a(cc.Animation)], o.prototype, "arrowAnim", void 0), n([a(cc.Label)], o.prototype, "oddsText", void 0), n([a(cc.Animation)], o.prototype, "hitAnim", void 0), o = n([s], o), i.default = o, cc._RF.pop()
    }, {}],
    WindowCtrl: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "2ef1e1ks+BKQaYCGC2Pf1wP", "WindowCtrl");
        var n = this && this.__decorate || function(e, t, i, n) {
            var s, a = arguments.length,
                o = a < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, i) : n;
            if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, n);
            else
                for (var l = e.length - 1; l >= 0; l--)(s = e[l]) && (o = (a < 3 ? s(o) : a > 3 ? s(t, i, o) : s(t, i)) || o);
            return a > 3 && o && Object.defineProperty(t, i, o), o
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        });
        const s = e("../Common/AudioManager"),
            a = e("./PopupWindowCtrl"),
            {
                ccclass: o,
                property: l
            } = cc._decorator;
        let r = class extends cc.Component {
            constructor() {
                super(...arguments), this.BtnList = [], this.LabelList = [], this._BtnEvent = []
            }
            get BtnEvent() {
                return this._BtnEvent
            }
            set BtnEvent(e) {
                this._BtnEvent = e
            }
            showWindow(e = null, t = null, i) {
                if (this.Init(i), this.node.active = !0, null != e && (this.BtnEvent = e), null != t && this.LabelList.length >= t.length)
                    for (let n = 0; n < t.length; n++) this.LabelList[n].string = t[n]
            }
            Init(e) {}
            closeWindow() {
                this.BtnEvent = null, this.node.active = !1
            }
            BtnClick(e, t) {
                null != this.BtnEvent[t] ? this.BtnEvent[t]() : t == this.BtnList.length - 1 && (s.default.Instance.Play("Btn_Select_n_v01"), a.default.CloseWindow())
            }
        };
        n([l([cc.Node])], r.prototype, "BtnList", void 0), n([l([cc.Label])], r.prototype, "LabelList", void 0), r = n([o], r), i.default = r, cc._RF.pop()
    }, {
        "../Common/AudioManager": "AudioManager",
        "./PopupWindowCtrl": "PopupWindowCtrl"
    }],
    baseSystem: [function(e, t, i) {
        "use strict";
        cc._RF.push(t, "0c113Vwkp1BeZ+CKzbrXpwt", "baseSystem");
        var n = this && this.__awaiter || function(e, t, i, n) {
            return new(i || (i = Promise))(function(s, a) {
                function o(e) {
                    try {
                        r(n.next(e))
                    } catch (t) {
                        a(t)
                    }
                }

                function l(e) {
                    try {
                        r(n.throw(e))
                    } catch (t) {
                        a(t)
                    }
                }

                function r(e) {
                    var t;
                    e.done ? s(e.value) : (t = e.value, t instanceof i ? t : new i(function(e) {
                        e(t)
                    })).then(o, l)
                }
                r((n = n.apply(e, t || [])).next())
            })
        };
        Object.defineProperty(i, "__esModule", {
            value: !0
        }), i.necessaryCallbackDataALD = void 0;
        const s = e("../GameClient");
        i.default = class {
            constructor(e, t) {
                this.arkSocketClient = null, this.baseSocketSystem = null, this.systemName = null, this.necessaryCallbackList = null, this.necessaryCallbackData = null, this.necessaryCallbackCheck = null, this.arkSocketClient = e, this.systemName = t, this.baseSocketSystem = new ArkSDK.BaseSocketSystem(e, t), null == this.necessaryCallbackList && (this.necessaryCallbackList = new Array), null == this.necessaryCallbackData && (this.necessaryCallbackData = new Array), null == this.necessaryCallbackCheck && (this.necessaryCallbackCheck = new Array)
            }
            RegisterCmdCallback(e, t, i, n) {
                if (i) return this.necessaryCallbackList.push(i), this.necessaryCallbackCheck.push(n), void(this.baseSocketSystem.cmdDict[e] = (i, n, a, o, l, r, c) => {
                    for (let t = 0; t < this.necessaryCallbackData.length; t++)
                        if (this.necessaryCallbackData[t].cmdName == e) {
                            if (null != this.necessaryCallbackData[t].checkData) {
                                let e = n;
                                for (let i = 1; i < this.necessaryCallbackData[t].checkData.length; i++) e.hasOwnProperty([this.necessaryCallbackData[t].checkData[i]]) && (e = e[this.necessaryCallbackData[t].checkData[i]]);
                                if (e != this.necessaryCallbackData[t].checkData[0]) continue
                            }
                            s.default.Instance.unschedule(this.necessaryCallbackData[t].func), this.necessaryCallbackData[t].Clear(), this.necessaryCallbackData.splice(t, 1);
                            break
                        }
                    t(i, n, a, o, l, r, c)
                });
                this.baseSocketSystem.cmdDict[e] = t.bind(this)
            }
            SendCmd(e, t, i, o) {
                return n(this, void 0, void 0, function*() {
                    if (i) var n = this.baseSocketSystem.cmdDict[e];
                    for (let t = 0; t < this.necessaryCallbackList.length; t++)
                        if (this.necessaryCallbackList[t] == e) {
                            let i = () => {
                                cc.error("CmdTimeOut  " + e);
                                let t = "CmdTimeOut_" + e;
                                s.default.Instance.CallOnError("C35", t)
                            };
                            s.default.Instance.scheduleOnce(i, 15), null != this.necessaryCallbackCheck[t] && (this.necessaryCallbackCheck[t][0] = o);
                            let n = new a(e, i, this.necessaryCallbackCheck[t]);
                            this.necessaryCallbackData.push(n);
                            break
                        }
                    this.arkSocketClient.SendCmd(this.systemName, e, t, n)
                })
            }
        };
        class a {
            constructor(e, t, i) {
                this.cmdName = null, this.func = null, this.checkData = null, this.cmdName = e, this.func = t, this.checkData = i
            }
            Clear() {
                this.cmdName = null, this.func = null, this.checkData = null
            }
        }
        i.necessaryCallbackDataALD = a, cc._RF.pop()
    }, {
        "../GameClient": "GameClient"
    }]
}, {}, ["EventPuzzleDropEggMgr", "GDGameClient", "GameClient", "CheatKey", "ErrorCode", "ErrorHandler", "JsonUtils", "Login", "Player", "MCGameClient", "AwardManager", "BaseMedal", "GoldenSlot", "MedalRoot", "SkillTitle", "SlotCrabMedal", "AngleBackground", "BaseBackGround", "SceneSlotCrab", "TacoBackground", "AISeek", "ArkGameUtility", "AudioClipList", "AudioManager", "EnumFilter", "FishMenu", "FishMenuMgr", "MultiLangObjCtrl", "MultiLangSystem", "PoolObj", "PreloadManager", "ResourceManager", "ShadowCamera", "SystemTip", "Utility", "DebugManager", "BLAZING_PHONEIX", "BaseCrab", "BaseFish", "BaseFlashFish", "BaseSpineFish", "BaseTwisterFish", "DRAGON_TURTLE", "ELAZING_PHONEIX", "ETERNAL_FLAMING_DRAGON", "FLASH_FLAT_FISH", "FLASH_GURNARD", "FLASH_OCTOPUS", "FLAT_FISH", "FishManager", "GENERAL_LOBSTER", "GIANT_PUFFER_FISH", "GURNARD", "GoldenSlotCrab", "HUMPBACK_WHALE", "JELLY_FISH", "KILLER_WHALE", "KING_ANGLER_FISH", "KING_JELLY_FISH", "KING_LACOSTE", "KING_SPIDER_CRAB", "KING_SQUID", "KING_TACO", "MERMAID", "OCTOPUS", "PARITE_SHIP", "POSEIDON", "RED_DRAGON", "SEA_TURTLE", "THUNDER_DRAGON", "TWISTER_GURNARD", "TWISTER_OCTOPUS", "TWIST_FLAT_FISH", "TWIST_SEA_TURTLE", "UniqueFishData", "WEALTH_GOD", "GameLogMainPlayer", "GameManager", "AwardItem", "DropItem", "FreezeEffect", "ItemButton", "ItemManager", "ItemTitle", "BtnSprite", "BuddhaPalmUI", "FishAvatarIcon", "LockSettingWindow", "MarqueeCtrl", "PlayerManager", "PopupWindowCtrl", "WeaponChoseWindow", "WindowCtrl", "BaseSkill", "BaseSkillAward", "BaseSkillOddsUI", "BaseSkillScoreUI", "BaseSkillTitleUI", "Effect_Phoneix", "EternalDragonReward", "FinalShip", "FlameStorm_ScoreUI", "RedDragonReward", "SkillBuddhaPalm", "SkillDragonWeapon", "SkillDrill", "SkillElazingPhoneix", "SkillElectric", "SkillEternalDragon", "SkillFlameStorm", "SkillFlash", "SkillHammer", "SkillKingAngler", "SkillKingCrab", "SkillKingLacoste", "SkillLock", "SkillMermaid", "SkillMultiBomb", "SkillPariteShip", "SkillPoseidon", "SkillRedDragon", "SkillRocket", "SkillTaco", "SkillThunderDragon", "SkillTigerWeapon", "SkillWheel", "SkillWind", "WheelItem", "BaseTitle", "BaseBullet", "BaseWeapon", "BetController", "DragonWeapon", "DrillBullet", "DrillWeapon", "ElectricCollider", "ElectricWeapon", "FlameStormBullet", "FlameStormWeapon", "LockWeapon", "NormalWeapon", "TigerBullet", "TigerWeapon", "WeaponManager", "FishMissionData", "MissionCtrl", "MissionInfoPageCtrl", "MissionManager", "MissionNodeDrag", "FishSystem", "GameSystem", "ItemSystem", "KioskSystem", "MissionSystem", "PlayerSystem", "SkillSystem", "WeaponSystem", "baseSystem"]);