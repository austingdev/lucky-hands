var $jscomp = $jscomp || {};
$jscomp.scope = {};
$jscomp.ASSUME_ES5 = !1;
$jscomp.ASSUME_NO_NATIVE_MAP = !1;
$jscomp.ASSUME_NO_NATIVE_SET = !1;
$jscomp.defineProperty = $jscomp.ASSUME_ES5 || "function" == typeof Object.defineProperties ? Object.defineProperty : function(g, q, m) {
    g != Array.prototype && g != Object.prototype && (g[q] = m.value)
};
$jscomp.getGlobal = function(g) {
    return "undefined" != typeof window && window === g ? g : "undefined" != typeof global && null != global ? global : g
};
$jscomp.global = $jscomp.getGlobal(this);
$jscomp.SYMBOL_PREFIX = "jscomp_symbol_";
$jscomp.initSymbol = function() {
    $jscomp.initSymbol = function() {};
    $jscomp.global.Symbol || ($jscomp.global.Symbol = $jscomp.Symbol)
};
$jscomp.symbolCounter_ = 0;
$jscomp.Symbol = function(g) {
    return $jscomp.SYMBOL_PREFIX + (g || "") + $jscomp.symbolCounter_++
};
$jscomp.initSymbolIterator = function() {
    $jscomp.initSymbol();
    var g = $jscomp.global.Symbol.iterator;
    g || (g = $jscomp.global.Symbol.iterator = $jscomp.global.Symbol("iterator"));
    "function" != typeof Array.prototype[g] && $jscomp.defineProperty(Array.prototype, g, {
        configurable: !0,
        writable: !0,
        value: function() {
            return $jscomp.arrayIterator(this)
        }
    });
    $jscomp.initSymbolIterator = function() {}
};
$jscomp.arrayIterator = function(g) {
    var q = 0;
    return $jscomp.iteratorPrototype(function() {
        return q < g.length ? {
            done: !1,
            value: g[q++]
        } : {
            done: !0
        }
    })
};
$jscomp.iteratorPrototype = function(g) {
    $jscomp.initSymbolIterator();
    g = {
        next: g
    };
    g[$jscomp.global.Symbol.iterator] = function() {
        return this
    };
    return g
};
$jscomp.owns = function(g, q) {
    return Object.prototype.hasOwnProperty.call(g, q)
};
$jscomp.polyfill = function(g, q, m, h) {
    if (q) {
        m = $jscomp.global;
        g = g.split(".");
        for (h = 0; h < g.length - 1; h++) {
            var e = g[h];
            e in m || (m[e] = {});
            m = m[e]
        }
        g = g[g.length - 1];
        h = m[g];
        q = q(h);
        q != h && null != q && $jscomp.defineProperty(m, g, {
            configurable: !0,
            writable: !0,
            value: q
        })
    }
};
$jscomp.polyfill("Object.assign", function(g) {
    return g ? g : function(g, m) {
        for (var h = 1; h < arguments.length; h++) {
            var e = arguments[h];
            if (e)
                for (var d in e) $jscomp.owns(e, d) && (g[d] = e[d])
        }
        return g
    }
}, "es6", "es3");
$jscomp.checkStringArgs = function(g, q, m) {
    if (null == g) throw new TypeError("The 'this' value for String.prototype." + m + " must not be null or undefined");
    if (q instanceof RegExp) throw new TypeError("First argument to String.prototype." + m + " must not be a regular expression");
    return g + ""
};
$jscomp.polyfill("String.prototype.repeat", function(g) {
    return g ? g : function(g) {
        var m = $jscomp.checkStringArgs(this, null, "repeat");
        if (0 > g || 1342177279 < g) throw new RangeError("Invalid count value");
        g |= 0;
        for (var h = ""; g;)
            if (g & 1 && (h += m), g >>>= 1) m += m;
        return h
    }
}, "es6", "es3");
$jscomp.iteratorFromArray = function(g, q) {
    $jscomp.initSymbolIterator();
    g instanceof String && (g += "");
    var m = 0,
        h = {
            next: function() {
                if (m < g.length) {
                    var e = m++;
                    return {
                        value: q(e, g[e]),
                        done: !1
                    }
                }
                h.next = function() {
                    return {
                        done: !0,
                        value: void 0
                    }
                };
                return h.next()
            }
        };
    h[Symbol.iterator] = function() {
        return h
    };
    return h
};
$jscomp.polyfill("Array.prototype.keys", function(g) {
    return g ? g : function() {
        return $jscomp.iteratorFromArray(this, function(g) {
            return g
        })
    }
}, "es6", "es3");
$jscomp.polyfill("Array.prototype.values", function(g) {
    return g ? g : function() {
        return $jscomp.iteratorFromArray(this, function(g, m) {
            return m
        })
    }
}, "es6", "es3");
$jscomp.findInternal = function(g, q, m) {
    g instanceof String && (g = String(g));
    for (var h = g.length, e = 0; e < h; e++) {
        var d = g[e];
        if (q.call(m, d, e, g)) return {
            i: e,
            v: d
        }
    }
    return {
        i: -1,
        v: void 0
    }
};
$jscomp.polyfill("Array.prototype.find", function(g) {
    return g ? g : function(g, m) {
        return $jscomp.findInternal(this, g, m).v
    }
}, "es6", "es3");
$jscomp.polyfill("Object.is", function(g) {
    return g ? g : function(g, m) {
        return g === m ? 0 !== g || 1 / g === 1 / m : g !== g && m !== m
    }
}, "es6", "es3");
$jscomp.polyfill("Array.prototype.includes", function(g) {
    return g ? g : function(g, m) {
        var h = this;
        h instanceof String && (h = String(h));
        var e = h.length;
        for (m = m || 0; m < e; m++)
            if (h[m] == g || Object.is(h[m], g)) return !0;
        return !1
    }
}, "es7", "es3");
$jscomp.polyfill("String.prototype.includes", function(g) {
    return g ? g : function(g, m) {
        return -1 !== $jscomp.checkStringArgs(this, g, "includes").indexOf(g, m || 0)
    }
}, "es6", "es3");
$jscomp.polyfill("Math.trunc", function(g) {
    return g ? g : function(g) {
        g = Number(g);
        if (isNaN(g) || Infinity === g || -Infinity === g || 0 === g) return g;
        var m = Math.floor(Math.abs(g));
        return 0 > g ? -m : m
    }
}, "es6", "es3");
$jscomp.polyfill("Math.sign", function(g) {
    return g ? g : function(g) {
        g = Number(g);
        return 0 === g || isNaN(g) ? g : 0 < g ? 1 : -1
    }
}, "es6", "es3");
$jscomp.polyfill("Array.prototype.findIndex", function(g) {
    return g ? g : function(g, m) {
        return $jscomp.findInternal(this, g, m).i
    }
}, "es6", "es3");
$jscomp.polyfill("Array.from", function(g) {
    return g ? g : function(g, m, h) {
        $jscomp.initSymbolIterator();
        m = null != m ? m : function(c) {
            return c
        };
        var e = [],
            d = g[Symbol.iterator];
        if ("function" == typeof d)
            for (g = d.call(g); !(d = g.next()).done;) e.push(m.call(h, d.value));
        else {
            d = g.length;
            for (var k = 0; k < d; k++) e.push(m.call(h, g[k]))
        }
        return e
    }
}, "es6", "es3");
$jscomp.polyfill("Array.prototype.copyWithin", function(g) {
    return g ? g : function(g, m, h) {
        var e = this.length;
        g = Number(g);
        m = Number(m);
        h = Number(null != h ? h : e);
        if (g < m)
            for (h = Math.min(h, e); m < h;) m in this ? this[g++] = this[m++] : (delete this[g++], m++);
        else
            for (h = Math.min(h, e + m - g), g += h - m; h > m;) --h in this ? this[--g] = this[h] : delete this[g];
        return this
    }
}, "es6", "es3");
$jscomp.polyfill("String.prototype.startsWith", function(g) {
    return g ? g : function(g, m) {
        var h = $jscomp.checkStringArgs(this, g, "startsWith");
        g += "";
        var e = h.length,
            d = g.length;
        m = Math.max(0, Math.min(m | 0, h.length));
        for (var k = 0; k < d && m < e;)
            if (h[m++] != g[k++]) return !1;
        return k >= d
    }
}, "es6", "es3");
$jscomp.polyfill("String.prototype.endsWith", function(g) {
    return g ? g : function(g, m) {
        var h = $jscomp.checkStringArgs(this, g, "endsWith");
        g += "";
        void 0 === m && (m = h.length);
        m = Math.max(0, Math.min(m | 0, h.length));
        for (var e = g.length; 0 < e && 0 < m;)
            if (h[--m] != g[--e]) return !1;
        return 0 >= e
    }
}, "es6", "es3");
$jscomp.makeIterator = function(g) {
    $jscomp.initSymbolIterator();
    var q = g[Symbol.iterator];
    return q ? q.call(g) : $jscomp.arrayIterator(g)
};
$jscomp.FORCE_POLYFILL_PROMISE = !1;
$jscomp.polyfill("Promise", function(g) {
    function q() {
        this.batch_ = null
    }

    function m(d) {
        return d instanceof e ? d : new e(function(c, a) {
            c(d)
        })
    }
    if (g && !$jscomp.FORCE_POLYFILL_PROMISE) return g;
    q.prototype.asyncExecute = function(d) {
        null == this.batch_ && (this.batch_ = [], this.asyncExecuteBatch_());
        this.batch_.push(d);
        return this
    };
    q.prototype.asyncExecuteBatch_ = function() {
        var d = this;
        this.asyncExecuteFunction(function() {
            d.executeBatch_()
        })
    };
    var h = $jscomp.global.setTimeout;
    q.prototype.asyncExecuteFunction = function(d) {
        h(d,
            0)
    };
    q.prototype.executeBatch_ = function() {
        for (; this.batch_ && this.batch_.length;) {
            var d = this.batch_;
            this.batch_ = [];
            for (var c = 0; c < d.length; ++c) {
                var a = d[c];
                delete d[c];
                try {
                    a()
                } catch (b) {
                    this.asyncThrow_(b)
                }
            }
        }
        this.batch_ = null
    };
    q.prototype.asyncThrow_ = function(d) {
        this.asyncExecuteFunction(function() {
            throw d;
        })
    };
    var e = function(d) {
        this.state_ = 0;
        this.result_ = void 0;
        this.onSettledCallbacks_ = [];
        var c = this.createResolveAndReject_();
        try {
            d(c.resolve, c.reject)
        } catch (a) {
            c.reject(a)
        }
    };
    e.prototype.createResolveAndReject_ =
        function() {
            function d(b) {
                return function(l) {
                    a || (a = !0, b.call(c, l))
                }
            }
            var c = this,
                a = !1;
            return {
                resolve: d(this.resolveTo_),
                reject: d(this.reject_)
            }
        };
    e.prototype.resolveTo_ = function(d) {
        if (d === this) this.reject_(new TypeError("A Promise cannot resolve to itself"));
        else if (d instanceof e) this.settleSameAsPromise_(d);
        else {
            a: switch (typeof d) {
                case "object":
                    var c = null != d;
                    break a;
                case "function":
                    c = !0;
                    break a;
                default:
                    c = !1
            }
            c ? this.resolveToNonPromiseObj_(d) : this.fulfill_(d)
        }
    };
    e.prototype.resolveToNonPromiseObj_ = function(d) {
        var c =
            void 0;
        try {
            c = d.then
        } catch (a) {
            this.reject_(a);
            return
        }
        "function" == typeof c ? this.settleSameAsThenable_(c, d) : this.fulfill_(d)
    };
    e.prototype.reject_ = function(d) {
        this.settle_(2, d)
    };
    e.prototype.fulfill_ = function(d) {
        this.settle_(1, d)
    };
    e.prototype.settle_ = function(d, c) {
        if (0 != this.state_) throw Error("Cannot settle(" + d + ", " + c | "): Promise already settled in state" + this.state_);
        this.state_ = d;
        this.result_ = c;
        this.executeOnSettledCallbacks_()
    };
    e.prototype.executeOnSettledCallbacks_ = function() {
        if (null != this.onSettledCallbacks_) {
            for (var d =
                    this.onSettledCallbacks_, c = 0; c < d.length; ++c) d[c].call(), d[c] = null;
            this.onSettledCallbacks_ = null
        }
    };
    var d = new q;
    e.prototype.settleSameAsPromise_ = function(d) {
        var c = this.createResolveAndReject_();
        d.callWhenSettled_(c.resolve, c.reject)
    };
    e.prototype.settleSameAsThenable_ = function(d, c) {
        var a = this.createResolveAndReject_();
        try {
            d.call(c, a.resolve, a.reject)
        } catch (b) {
            a.reject(b)
        }
    };
    e.prototype.then = function(d, c) {
        function a(a, c) {
            return "function" == typeof a ? function(c) {
                try {
                    b(a(c))
                } catch (p) {
                    l(p)
                }
            } : c
        }
        var b, l, f = new e(function(a,
            c) {
            b = a;
            l = c
        });
        this.callWhenSettled_(a(d, b), a(c, l));
        return f
    };
    e.prototype.catch = function(d) {
        return this.then(void 0, d)
    };
    e.prototype.callWhenSettled_ = function(k, c) {
        function a() {
            switch (b.state_) {
                case 1:
                    k(b.result_);
                    break;
                case 2:
                    c(b.result_);
                    break;
                default:
                    throw Error("Unexpected state: " + b.state_);
            }
        }
        var b = this;
        null == this.onSettledCallbacks_ ? d.asyncExecute(a) : this.onSettledCallbacks_.push(function() {
            d.asyncExecute(a)
        })
    };
    e.resolve = m;
    e.reject = function(d) {
        return new e(function(c, a) {
            a(d)
        })
    };
    e.race = function(d) {
        return new e(function(c,
            a) {
            for (var b = $jscomp.makeIterator(d), l = b.next(); !l.done; l = b.next()) m(l.value).callWhenSettled_(c, a)
        })
    };
    e.all = function(d) {
        var c = $jscomp.makeIterator(d),
            a = c.next();
        return a.done ? m([]) : new e(function(b, l) {
            function f(a) {
                return function(c) {
                    d[a] = c;
                    u--;
                    0 == u && b(d)
                }
            }
            var d = [],
                u = 0;
            do d.push(void 0), u++, m(a.value).callWhenSettled_(f(d.length - 1), l), a = c.next(); while (!a.done)
        })
    };
    return e
}, "es6", "es3");
$jscomp.polyfill("Object.setPrototypeOf", function(g) {
    return g ? g : "object" != typeof "".__proto__ ? null : function(g, m) {
        g.__proto__ = m;
        if (g.__proto__ !== m) throw new TypeError(g + " is not extensible");
        return g
    }
}, "es6", "es5");
$jscomp.polyfill("Array.prototype.fill", function(g) {
    return g ? g : function(g, m, h) {
        var e = this.length || 0;
        0 > m && (m = Math.max(0, e + m));
        if (null == h || h > e) h = e;
        h = Number(h);
        0 > h && (h = Math.max(0, e + h));
        for (m = Number(m || 0); m < h; m++) this[m] = g;
        return this
    }
}, "es6", "es3");
$jscomp.polyfill("Number.isFinite", function(g) {
    return g ? g : function(g) {
        return "number" !== typeof g ? !1 : !isNaN(g) && Infinity !== g && -Infinity !== g
    }
}, "es6", "es3");
$jscomp.polyfill("Number.isInteger", function(g) {
    return g ? g : function(g) {
        return Number.isFinite(g) ? g === Math.floor(g) : !1
    }
}, "es6", "es3");
$jscomp.polyfill("Number.EPSILON", function(g) {
    return Math.pow(2, -52)
}, "es6", "es3");
$jscomp.polyfill("Number.MAX_SAFE_INTEGER", function() {
    return 9007199254740991
}, "es6", "es3");
$jscomp.polyfill("Object.getOwnPropertySymbols", function(g) {
    return g ? g : function() {
        return []
    }
}, "es6", "es5");
$jscomp.polyfill("Reflect.ownKeys", function(g) {
    return g ? g : function(g) {
        var m = [],
            h = Object.getOwnPropertyNames(g);
        g = Object.getOwnPropertySymbols(g);
        for (var e = 0; e < h.length; e++)("jscomp_symbol_" == h[e].substring(0, 14) ? g : m).push(h[e]);
        return m.concat(g)
    }
}, "es6", "es5");
$jscomp.polyfill("Object.getOwnPropertyDescriptors", function(g) {
    return g ? g : function(g) {
        for (var m = {}, h = Reflect.ownKeys(g), e = 0; e < h.length; e++) m[h[e]] = Object.getOwnPropertyDescriptor(g, h[e]);
        return m
    }
}, "es8", "es5");
$jscomp.polyfill("Math.log2", function(g) {
    return g ? g : function(g) {
        return Math.log(g) / Math.LN2
    }
}, "es6", "es3");
(function(g, q, m) {
    function h(d, k) {
        k = q[d];
        if (!k) {
            var c = g[d];
            if (!c) return;
            var a = {};
            k = q[d] = {
                exports: a
            };
            c[0](function(a) {
                return h(c[1][a] || a)
            }, k, a)
        }
        return k.exports
    }
    for (var e = 0; e < m.length; e++) h(m[e]);
    return h
})({
    1: [function(g, q, m) {
        q.exports = {
            1001: "cocos2d: removeAction: Target not found",
            1002: "cc.ActionManager.removeActionByTag(): an invalid tag",
            1003: "cc.ActionManager.removeActionByTag(): target must be non-null",
            1004: "cc.ActionManager.getActionByTag(): an invalid tag",
            1005: "cocos2d : getActionByTag(tag = %s): Action not found",
            1006: "[Action step]. override me",
            1007: "[Action update]. override me",
            1008: "cocos2d: FiniteTimeAction#reverse: Implement me",
            1009: "cc.EaseElastic.reverse(): it should be overridden in subclass.",
            1010: "cc.IntervalAction: reverse not implemented.",
            1011: "cc.ActionInterval.setAmplitudeRate(): it should be overridden in subclass.",
            1012: "cc.ActionInterval.getAmplitudeRate(): it should be overridden in subclass.",
            1013: "The speed parameter error",
            1014: "The repeat parameter error",
            1015: "parameters should not be ending with null in Javascript",
            1016: "cc.RotateTo.reverse(): it should be overridden in subclass.",
            1019: "Failed to construct, Sequence construction needs two or more actions.",
            1020: "Failed to construct, Spawn construction needs two or more actions.",
            1021: "cc.Speed.initWithAction(): action must be non nil",
            1022: "cc.Follow.initWithAction(): followedNode must be non nil",
            1023: "cc.ActionEase.initWithAction(): action must be non nil",
            1024: "Invalid configuration. It must at least have one control point",
            1025: "cc.Sequence.initWithTwoActions(): arguments must all be non nil",
            1026: "cc.RepeatForever.initWithAction(): action must be non null",
            1027: "cc.Spawn.initWithTwoActions(): arguments must all be non null",
            1028: "cc.ReverseTime.initWithAction(): action must be non null",
            1029: "cc.ReverseTime.initWithAction(): the action was already passed in.",
            1030: "cc.Animate.initWithAnimation(): animation must be non-NULL",
            1031: "Illegal parameter get passed in cc.tween: %s.",
            1100: "Expected 'data' dict, but not found. Config file: %s",
            1101: "Please load the resource first : %s",
            1200: "cocos2d: Director: Error in gettimeofday",
            1201: "cocos2d: Director: unrecognized projection",
            1203: "cocos2d: Director: Error in gettimeofday",
            1204: "running scene should not null",
            1205: "the scene should not null",
            1206: "loadScene: The scene index to load (%s) is out of range.",
            1207: "loadScene: Unknown name type to load: '%s'",
            1208: "loadScene: Failed to load scene '%s' because '%s' is already being loaded.",
            1209: "loadScene: Can not load the scene '%s' because it was not in the build settings before playing.",
            1210: "Failed to preload '%s', %s",
            1211: "loadScene: The scene index to load (%s) is out of range.",
            1212: "loadScene: Unknown name type to load: '%s'",
            1213: "loadScene: Failed to load scene '%s' because '%s' is already loading",
            1214: "loadScene: Can not load the scene '%s' because it was not in the build settings before playing.",
            1215: "Failed to preload '%s', %s",
            1216: "Director.runSceneImmediate: scene is not valid",
            1300: "element type is wrong!",
            1400: "'%s' is deprecated, please use '%s' instead.",
            1404: "cc.spriteFrameCache is removed, please use cc.loader to load and cache sprite frames of atlas format.",
            1405: "The '%s' has been removed, please use '%s' instead.",
            1406: "'%s.%s' is removed",
            1408: "'%s' is not support in the '%s', please use '%s' instead.",
            1502: "cc.scheduler.scheduleCallbackForTarget(): target should be non-null.",
            1503: "cc.Scheduler.pauseTarget():target should be non-null",
            1504: "cc.Scheduler.resumeTarget():target should be non-null",
            1505: "cc.Scheduler.isTargetPaused():target should be non-null",
            1506: "warning: you CANNOT change update priority in scheduled function",
            1507: 'CCScheduler#scheduleSelector. Selector already scheduled. Updating interval from: %s to %s"',
            1508: "Argument callback must not be empty",
            1509: "Argument target must be non-nullptr",
            1510: "cc.Scheduler: Illegal target which doesn't have uuid or instanceId.",
            1511: "cc.Scheduler: pause state of the scheduled task doesn't match the element pause state in Scheduler, the given paused state will be ignored.",
            1513: "cc.Scheduler: scheduler stopped using `__instanceId` as id since v2.0, you should do scheduler.enableForTarget(target) before all scheduler API usage on target",
            1605: "child already added. It can't be added again",
            1606: "child must be non-null",
            1610: "cocos2d: removeChildByTag(tag = %s): child not found!",
            1612: "cc.Node.stopActionBy(): argument tag an invalid tag",
            1613: "cc.Node.getActionByTag(): argument tag is an invalid tag",
            1617: "child must be non-null",
            1618: "cc.Node.runAction(): action must be non-null",
            1619: "callback function must be non-null",
            1620: "interval must be positive",
            1623: "Set '%s' to normal node (not persist root node).",
            1624: "Replacing with the same sgNode",
            1625: "The replacement sgNode should not contain any child.",
            1626: "Should not set alpha via 'color', set 'opacity' please.",
            1627: "Not support for asynchronous creating node in SG",
            1632: "Node name can not include '/'.",
            1633: "Internal error, should not remove unknown node from parent.",
            1634: "addChild: The child to add must be instance of cc.Node, not %s.",
            1635: "reorderChild: this child is not in children list.",
            1636: "Node's zIndex value can't be greater than cc.macro.MAX_ZINDEX, setting to the maximum value",
            1637: "Node's zIndex value can't be smaller than cc.macro.MIN_ZINDEX, setting to the minimum value",
            1638: "Private node's zIndex can't be set, it will keep cc.macro.MIN_ZINDEX as its value",
            1639: "cc.Action is deprecated, please use cc.Tween instead",
            1800: "cc._EventListenerKeyboard.checkAvailable(): Invalid EventListenerKeyboard!",
            1801: "cc._EventListenerTouchOneByOne.checkAvailable(): Invalid EventListenerTouchOneByOne!",
            1802: "cc._EventListenerTouchAllAtOnce.checkAvailable(): Invalid EventListenerTouchAllAtOnce!",
            1803: "cc._EventListenerAcceleration.checkAvailable(): _onAccelerationEvent must be non-nil",
            1900: "Invalid parameter.",
            2E3: "Don't call this method if the event is for touch.",
            2200: "Design resolution not valid",
            2201: "should set resolutionPolicy",
            2300: "The touches is more than MAX_TOUCHES, nUnusedIndex = %s",
            2400: "WebGL error %s",
            2602: "cc.Sprite.setDisplayFrameWithAnimationName(): Frame not found",
            2603: "cc.Sprite.setDisplayFrameWithAnimationName(): Invalid frame index",
            2606: "cc.Sprite.initWithSpriteFrame(): spriteFrame should be non-null",
            2607: "cc.Sprite.initWithSpriteFrameName(): spriteFrameName should be non-null",
            2608: "%s is null, please check.",
            2609: "cc.Sprite.initWithFile(): filename should be non-null",
            2610: "cc.Sprite.setDisplayFrameWithAnimationName(): animationName must be non-null",
            2614: "cc.Sprite.addChild(): child should be non-null",
            2616: "cc.SpriteBatchNode.updateQuadFromSprite(): cc.SpriteBatchNode only supports cc.Sprites as children",
            2617: "cc.SpriteBatchNode.insertQuadFromSprite(): cc.SpriteBatchNode only supports cc.Sprites as children",
            2618: "cc.SpriteBatchNode.addChild(): cc.SpriteBatchNode only supports cc.Sprites as children",
            2619: "cc.SpriteBatchNode.addChild(): cc.Sprite is not using the same texture",
            2623: "cc.SpriteBatchNode.updateQuadFromSprite(): sprite should be non-null",
            2625: "too many tiles, only 16384 tiles will be show",
            2626: "Unrecognized fill type in bar fill",
            2627: "Can not generate quad",
            2628: "%s does not exist",
            2712: "Invalid spriteFrameName",
            3005: "cocos2d: '%s' id=%s %s x %s",
            3006: "cocos2d: '%s' id= HTMLCanvasElement %s x %s",
            3007: "cocos2d: TextureCache dumpDebugInfo: %s textures, HTMLCanvasElement for %s KB (%s MB)",
            3103: "cc.Texture.addImage(): path should be non-null",
            3112: "cc.Texture.addImage(): path should be non-null",
            3113: "NSInternalInconsistencyException",
            3116: "WebGLRenderingContext.CLAMP_TO_EDGE should be used in NPOT textures",
            3117: "Mimpap texture only works in POT textures",
            3119: "Lazy init texture with image element failed due to image loading failure: %s",
            3120: "Loading texture with unsupported type: '%s'. Add '%s' into 'cc.macro.SUPPORT_TEXTURE_FORMATS' please.",
            3121: "Can't find a texture format supported by the current platform! Please add a fallback format in the editor.",
            3300: "Rect width exceeds maximum margin: %s",
            3400: "Rect height exceeds maximum margin: %s",
            3401: "Set texture with a url of image is not supported anymore. Please use cc.assetManager.loadRemote to load a texture first.",
            3500: "0 priority is forbidden for fixed priority since it's used for scene graph based priority.",
            3501: "Invalid listener type!",
            3502: "Can't set fixed priority with scene graph based listener.",
            3503: "Invalid parameters.",
            3504: "listener must be a cc.EventListener object when adding a fixed priority listener",
            3505: "The listener has been registered, please don't register it again.",
            3506: "Unsupported listener target.",
            3507: "Invalid scene graph priority!",
            3508: "If program goes here, there should be event in dispatch.",
            3509: "_inDispatch should be 1 here.",
            3510: "%s's scene graph node not contains in the parent's children",
            3511: "event is undefined",
            3600: "cc.Class will automatically call super constructor of %s, you should not call it manually.",
            3601: "The editor property 'playOnFocus' should be used with 'executeInEditMode' in class '%s'",
            3602: "Unknown editor property '%s' in class '%s'.",
            3603: "Use 'cc.Float' or 'cc.Integer' instead of 'cc.Number' please.",
            3604: "Can only indicate one type attribute for %s.",
            3605: "The default value of %s is not instance of %s.",
            3606: "No needs to indicate the '%s' attribute for %s, which its default value is type of %s.",
            3607: "The default value of %s must be an empty string.",
            3608: "The type of %s must be cc.String, not String.",
            3609: "The type of %s must be cc.Boolean, not Boolean.",
            3610: "The type of %s must be cc.Float or cc.Integer, not Number.",
            3611: "Can not indicate the '%s' attribute for %s, which its default value is type of %s.",
            3612: "%s Just set the default value to 'new %s()' and it will be handled properly.",
            3613: "'No need to use 'serializable: false' or 'editorOnly: true' for the getter of '%s.%s', every getter is actually non-serialized.",
            3614: "Should not define constructor for cc.Component %s.",
            3615: "Each script can have at most one Component.",
            3616: "Should not specify class name %s for Component which defines in project.",
            3617: "Can not instantiate CCClass '%s' with arguments.",
            3618: "ctor of '%s' can not be another CCClass",
            3619: "ctor of '%s' must be function type",
            3620: "this._super declared in '%s.%s' but no super method defined",
            3621: "Unknown type of %s.%s, maybe you want is '%s'.",
            3622: "Unknown type of %s.%s, property should be defined in 'properties' or 'ctor'",
            3623: "Can not use 'editor' attribute, '%s' not inherits from Components.",
            3624: "'%s' overrided '%s' but '%s' is defined as 'false' so the super method will not be called. You can set '%s' to null to disable this warning.",
            3625: "[isChildClassOf] superclass should be function type, not",
            3626: "Can't remove '%s' because '%s' depends on it.",
            3627: "Should not add renderer component (%s) to a Canvas node.",
            3628: "Should not add %s to a node which size is already used by its other component.",
            3633: "Properties function of '%s' should return an object!",
            3634: "Disallow to use '.' in property name",
            3635: "Default array must be empty, set default value of %s.%s to [], and initialize in 'onLoad' or 'ctor' please. (just like 'this.%s = [...];')",
            3636: "Do not set default value to non-empty object, unless the object defines its own 'clone' function. Set default value of %s.%s to null or {}, and initialize in 'onLoad' or 'ctor' please. (just like 'this.%s = {foo: bar};')",
            3637: "Can not declare %s.%s, it is already defined in the prototype of %s",
            3638: "'%s': the getter of '%s' is already defined!",
            3639: "Can not apply the specified attribute to the getter of '%s.%s', attribute index: %s",
            3640: "'%s': the setter of '%s' is already defined!",
            3641: "Can not construct %s because it contains object property.",
            3642: "Cannot define %s.%s because static member name can not be '%s'.",
            3643: "Can not define a member called 'constructor' in the class '%s', please use 'ctor' instead.",
            3644: "Please define 'type' parameter of %s.%s as the actual constructor.",
            3645: "Please define 'type' parameter of %s.%s as the constructor of %s.",
            3646: "Unknown 'type' parameter of %s.%s\uff1a%s",
            3647: "The length of range array must be equal or greater than 2",
            3648: "Can not declare %s.%s method, it is already defined in the properties of %s.",
            3649: "CCClass %s have conflict between its ctor and __ctor__.",
            3651: 'Can not call `_super` or `prototype.ctor` in ES6 Classes "%s", use `super` instead please.',
            3652: "Failed to `new %s()` under the hood, %s\nIt is used for getting default values declared in TypeScript in the first place.\nPlease ensure the constructor can be called during the script's initialization.",
            3653: 'Please do not specifiy "default" attribute in decorator of "%s" property in "%s" class.  \nDefault value must be initialized at their declaration:\n \n// Before:\n@property({\n  type: cc.SpriteFrame\n  default: null  // <--\n})\nmyProp;\n// After:\n@property({\n  type: cc.SpriteFrame\n})\nmyProp = null;   // <--',
            3654: 'Please specifiy a default value for "%s.%s" at its declaration:\n \n// Before:\n@property(...)\nmyProp;\n// After:\n@property(...)\nmyProp = 0;',
            3655: 'Can not specifiy "get" or "set"  attribute in decorator for "%s" property in "%s" class.  \nPlease use:\n \n@property(...)\nget %s () {\n    ...\n}\n@property\nset %s (value) {\n    ...\n}',
            3700: "internal error: _prefab is undefined",
            3701: "Failed to load prefab asset for node '%s'",
            3800: "The target can not be made persist because it's not a cc.Node or it doesn't have _id property.",
            3801: "The node can not be made persist because it's not under root node.",
            3802: "The node can not be made persist because it's not in current scene.",
            3803: "The target can not be made persist because it's not a cc.Node or it doesn't have _id property.",
            3804: "getComponent: Type must be non-nil",
            3805: "Can't add component '%s' because %s already contains the same component.",
            3806: "Can't add component '%s' to %s because it conflicts with the existing '%s' derived component.",
            3807: "addComponent: Failed to get class '%s'",
            3808: "addComponent: Should not add component ('%s') when the scripts are still loading.",
            3809: "addComponent: The component to add must be a constructor",
            3810: "addComponent: The component to add must be child class of cc.Component",
            3811: "_addComponentAt: The component to add must be a constructor",
            3812: "_addComponentAt: Index out of range",
            3813: "removeComponent: Component must be non-nil",
            3814: "Argument must be non-nil",
            3815: "Component not owned by this entity",
            3816: "Node '%s' is already activating",
            3817: "Sorry, the component of '%s' which with an index of %s is corrupted! It has been removed.",
            3818: "Failed to read or parse project.json",
            3819: "Warning: target element is not a DIV or CANVAS",
            3820: "The renderer doesn't support the renderMode %s",
            3821: "Cannot change hierarchy while activating or deactivating the parent.",
            3900: "Invalid clip to add",
            3901: "Invalid clip to remove",
            3902: "clip is defaultClip, set force to true to force remove clip and animation state",
            3903: "animation state is playing, set force to true to force stop and remove clip and animation state",
            3904: "motion path of target [%s] in prop [%s] frame [%s] is not valid",
            3905: "sprite frames must be an Array.",
            3906: "Can't find easing type [%s]",
            3907: "animator not added or already removed",
            3912: "already-playing",
            4003: "Label font size can't be shirnked less than 0!",
            4004: "force notify all fonts loaded!",
            4011: "Property spriteFrame of Font '%s' is invalid. Using system font instead.",
            4012: "The texture of Font '%s' must be already loaded on JSB. Using system font instead.",
            4013: "Sorry, lineHeight of system font not supported on JSB.",
            4200: "MaskType: IMAGE_STENCIL only support WebGL mode.",
            4201: "The alphaThreshold invalid in Canvas Mode.",
            4202: "The inverted invalid in Canvas Mode.",
            4300: "can not found the %s page.",
            4400: "Invalid RichText img tag! The sprite frame name can't be found in the ImageAtlas!",
            4600: "Script attached to '%s' is missing or invalid.",
            4700: "The dom control is not created!",
            4800: "unknown asset type",
            4901: "loadRes: should not specify the extname in %s %s",
            4902: "No need to release non-cached asset.",
            4914: "Resources url '%s' does not exist.",
            4915: "Pack indices and data do not match in size",
            4916: "Failed to download package for %s",
            4921: "Invalid pipe or invalid index provided!",
            4922: "The pipe to be inserted is already in the pipeline!",
            4923: "Uuid Loader: Parse asset [ %s ] failed : %s",
            4924: "JSON Loader: Input item doesn't contain string content",
            4925: "Uuid Loader: Deserialize asset [ %s ] failed : %s",
            4926: "Audio Downloader: no web audio context.",
            4927: "Audio Downloader: audio not supported on this browser!",
            4928: "Load %s failed!",
            4929: "Load Webp ( %s ) failed",
            4930: "Load image ( %s ) failed",
            4932: 'Since v1.10, for any atlas ("%s") in the "resources" directory, it is not possible to find the contained SpriteFrames via `loadRes`, `getRes` or `releaseRes`. Load the SpriteAtlas first and then use `spriteAtlas.getSpriteFrame(name)` instead please.',
            4933: "Download Font [ %s ] failed, using Arial or system default font instead",
            5E3: "object already destroyed",
            5001: "object not yet destroyed",
            5100: "Not a plist file!",
            5200: "Warning: localStorage isn't enabled. Please confirm browser cookie or privacy option",
            5201: "browser don't support web audio",
            5202: "This feature supports WebGL render mode only.",
            5300: "Type of target to deserialize not matched with data: target is %s, data is %s",
            5301: "Can not find script '%s'",
            5302: "Can not find class '%s'",
            5303: "Failed to deserialize %s, missing _deserialize function.",
            5304: "Unable to deserialize version %s data.",
            5402: "cc.js.addon called on non-object:",
            5403: "cc.js.mixin: arguments must be type object:",
            5404: "The base class to extend from must be non-nil",
            5405: "The class to extend must be non-nil",
            5406: "Class should be extended before assigning any prototype members.",
            5500: "'notify' can not be used in 'get/set' !",
            5501: "'notify' must be used with 'default' !",
            5507: "The 'default' attribute of '%s.%s' must be an array",
            5508: "Invalid type of %s.%s",
            5510: "The 'type' attribute of '%s.%s' can not be 'Number', use cc.Float or cc.Integer instead please.",
            5511: "The 'type' attribute of '%s.%s' is undefined when loading script",
            5512: "Can not serialize '%s.%s' because the specified type is anonymous, please provide a class name or set the 'serializable' attribute of '%s.%s' to 'false'.",
            5513: "The 'default' value of '%s.%s' should not be used with a 'get' function.",
            5514: "The 'default' value of '%s.%s' should not be used with a 'set' function.",
            5515: "The 'default' value of '%s.%s' can not be an constructor. Set default to null please.",
            5516: "Property '%s.%s' must define at least one of 'default', 'get' or 'set'.",
            5517: "'%s.%s' hides inherited property '%s.%s'. To make the current property override that implementation, add the `override: true` attribute please.",
            5601: "Can not get current scene.",
            5602: "Scene is destroyed",
            5603: "reference node is destroyed",
            5700: "no %s or %s on %s",
            5800: "%s.lerp not yet implemented.",
            5801: "%s.clone not yet implemented.",
            5802: "%s.equals not yet implemented.",
            5900: "MotionStreak only support WebGL mode.",
            5901: "cc.MotionStreak.getOpacity has not been supported.",
            5902: "cc.MotionStreak.setOpacity has not been supported.",
            6E3: "Custom should not be false if file is not specified.",
            6001: "The new %s must not be NaN",
            6017: "Incomplete or corrupt PNG file",
            6018: "Invalid filter algorithm: %s",
            6019: "Invalid byte order value.",
            6020: "You forgot your towel!",
            6021: "Unknown Field Tag: %s",
            6022: "Too many bits requested",
            6023: "No bits requested",
            6024: "Cannot recover from missing StripByteCounts",
            6025: "Cannot handle sub-byte bits per sample",
            6026: "Cannot handle sub-byte bits per pixel",
            6027: "Palette image missing color map",
            6028: "Unknown Photometric Interpretation: %s",
            6029: "Unkown error",
            6030: "cc.ParticleSystem: error decoding or ungzipping textureImageData in plist '%s'",
            6031: "cc.ParticleSystem: unknown image format with Data in plist %s",
            6032: "cc.ParticleSystem.initWithDictionary() : error loading the texture in plist '%s'",
            6400: "asset.url is not usable in core process",
            6402: "AssetLibrary has already been initialized!",
            6500: "Widget target must be one of the parent nodes of it",
            6600: "collider not added or already removed",
            6601: "Can't find testFunc for (%s, $s).",
            6700: "Can't init canvas '%s' because it conflicts with the existing '%s', the scene should only have one active canvas at the same time.",
            6800: "Callback of event must be non-nil",
            6801: "The message must be provided",
            6900: "The thing you want to instantiate must be an object",
            6901: "The thing you want to instantiate is nil",
            6902: "The thing you want to instantiate is destroyed",
            6903: "The instantiate method for given asset do not implemented",
            6904: "Can not instantiate array",
            6905: "Can not instantiate DOM element",
            7100: "%s already defined in Enum.",
            7101: "Sorry, 'cc.Enum' not available on this platform, please report this error here: https://github.com/cocos-creator/engine/issues/new",
            7200: "Method 'initWithTMXFile' is no effect now, please set property 'tmxAsset' instead.",
            7201: "Method 'initWithXML' is no effect now, please set property 'tmxAsset' instead.",
            7202: "Add component TiledLayer into node failed.",
            7203: "Property 'mapLoaded' is unused now. Please write the logic to the callback 'start'.",
            7210: "TMX Hexa zOrder not supported",
            7211: "TMX invalid value",
            7215: "cocos2d: Warning: TMX Layer %s has no tiles",
            7216: "cocos2d: TMXFormat: Unsupported TMX version: %s",
            7217: "cocos2d: TMXFomat: Unsupported orientation: %s",
            7218: "cc.TMXMapInfo.parseXMLFile(): unsupported compression method",
            7219: "cc.TMXMapInfo.parseXMLFile(): Only base64 and/or gzip/zlib maps are supported",
            7221: "cc.TMXMapInfo.parseXMLFile(): Texture '%s' not found.",
            7222: "Parse %s failed.",
            7236: "cc.TMXLayer.getTileAt(): TMXLayer: the tiles map has been released",
            7237: "cc.TMXLayer.getTileGIDAt(): TMXLayer: the tiles map has been released",
            7238: "cc.TMXLayer.setTileGID(): TMXLayer: the tiles map has been released",
            7239: "cc.TMXLayer.setTileGID(): invalid gid: %s",
            7240: "cc.TMXLayer.getTileFlagsAt(): TMXLayer: the tiles map has been released",
            7241: "cc.TiledMap.initWithXML(): Map not found. Please check the filename.",
            7401: "Failed to set _defaultArmatureIndex for '%s' because the index is out of range.",
            7402: "Failed to set _animationIndex for '%s' because the index is out of range.",
            7501: "Failed to set _defaultSkinIndex for '%s' because the index is out of range.",
            7502: "Failed to set _animationIndex for '%s' because its skeletonData is invalid.",
            7503: "Failed to set _animationIndex for '%s' because the index is out of range.",
            7504: "Can not render dynamic created SkeletonData",
            7506: "Failed to load spine atlas '$s'",
            7507: "Please re-import '%s' because its textures is not initialized! (This workflow will be improved in the future.)",
            7508: "The atlas asset of '%s' is not exists!",
            7509: "Spine: Animation not found: %s",
            7510: "Spine: Animation not found: %s",
            7600: "The context of RenderTexture is invalid.",
            7601: "cc.RenderTexture._initWithWidthAndHeightForWebGL() : only RGB and RGBA formats are valid for a render texture;",
            7602: "Could not attach texture to the framebuffer",
            7603: "clearDepth isn't supported on Cocos2d-Html5",
            7604: "saveToFile isn't supported on Cocos2d-Html5",
            7605: "newCCImage isn't supported on Cocos2d-Html5",
            7700: "On the web is always keep the aspect ratio",
            7701: "Can't know status",
            7702: "Video player's duration is not ready to get now!",
            7800: "Web does not support loading",
            7801: "Web does not support query history",
            7802: "Web does not support query history",
            7803: "The current browser does not support the GoBack",
            7804: "The current browser does not support the GoForward",
            7805: "Web does not support zoom",
            7900: "cc.math.Matrix3.assign(): current matrix equals matIn",
            7901: "cc.math.mat4Assign(): pOut equals pIn",
            7902: "cc.mat.Matrix4.assignFrom(): mat4 equals current matrix",
            7903: "cc.math.Matrix4 equal: pMat1 and pMat2 are same object.",
            7904: "cc.math.Matrix4.extractPlane: Invalid plane index",
            7905: "cc.math.mat4Assign(): pOut equals pIn",
            7906: "cc.mat.Matrix4.assignFrom(): mat4 equals current matrix",
            7907: "cc.math.Matrix4 equals: pMat1 and pMat2 are same object.",
            7908: "Invalid matrix mode specified",
            7909: "current quaternion is an invalid value",
            8E3: "Can't handle this field type or size",
            8001: "No bytes requested",
            8002: "Too many bytes requested",
            8003: "Missing StripByteCounts!",
            8103: "cc.GLProgram.link(): Cannot link invalid program",
            8104: "cocos2d: ERROR: Failed to link program: %s",
            8105: "cocos2d: cc.shaderCache._loadDefaultShader, error shader type",
            8106: "Please load the resource firset : %s",
            8107: "cc.GLProgram.getUniformLocationForName(): uniform name should be non-null",
            8108: "cc.GLProgram.getUniformLocationForName(): Invalid operation. Cannot get uniform location when program is not initialized",
            8109: "modelView matrix is undefined.",
            8200: "Please set node's active instead of rigidbody's enabled.",
            8300: "Should only one camera exists, please check your project.",
            8301: "Camera does not support Canvas Mode.",
            8400: "Wrong type arguments, 'filePath' must be a String.",
            8401: "Since 1.10, `%s` accept %s instance directly, not a URL string. Please directly reference the %s object in your script, or load %s by loader first. Don't use %s's URL anymore.",
            9E3: "Stencil manager does not support level bigger than %d in this device.",
            9001: "Stencil manager is already empty, cannot pop any mask.",
            9100: "LabelAtlas '%s' cannot be loaded, raw texture does not exist.",
            9101: "LabelAtlas '%s' cannot be loaded, fnt data does not exist.",
            9102: "Program not support highp precision, will change to mediump.",
            9103: "%s : Failed to set property [%s], property not found.",
            9104: "%s : Failed to define [%s], define not found.",
            9105: "%s : Failed to set property [%s], property length not correct.",
            9106: "%s : Set property [%s] warning : should transform object to ArrayBuffer.",
            9107: "%s : illegal property: [%s], myabe defined an unused property;",
            9200: "cc.view.enableAntiAlias is deprecated, please use cc.Texture2D.setFilters instead",
            "0100": "%s not yet implemented."
        }
    }, {}],
    2: [function(g, q, m) {
        g("../core/platform/CCClass");
        var h = g("../core/utils/misc");
        cc.Action = cc.Class({
            name: "cc.Action",
            ctor: function() {
                this.target = this.originalTarget = null;
                this.tag = cc.Action.TAG_INVALID
            },
            clone: function() {
                var e = new cc.Action;
                e.originalTarget = null;
                e.target = null;
                e.tag = this.tag;
                return e
            },
            isDone: function() {
                return !0
            },
            startWithTarget: function(e) {
                this.target = this.originalTarget = e
            },
            stop: function() {
                this.target = null
            },
            step: function(e) {
                cc.logID(1006)
            },
            update: function(e) {
                cc.logID(1007)
            },
            getTarget: function() {
                return this.target
            },
            setTarget: function(e) {
                this.target = e
            },
            getOriginalTarget: function() {
                return this.originalTarget
            },
            setOriginalTarget: function(e) {
                this.originalTarget = e
            },
            getTag: function() {
                return this.tag
            },
            setTag: function(e) {
                this.tag = e
            },
            retain: function() {},
            release: function() {}
        });
        cc.Action.TAG_INVALID = -1;
        cc.FiniteTimeAction =
            cc.Class({
                name: "cc.FiniteTimeAction",
                extends: cc.Action,
                ctor: function() {
                    this._duration = 0
                },
                getDuration: function() {
                    return this._duration * (this._timesForRepeat || 1)
                },
                setDuration: function(e) {
                    this._duration = e
                },
                reverse: function() {
                    cc.logID(1008);
                    return null
                },
                clone: function() {
                    return new cc.FiniteTimeAction
                }
            });
        cc.Speed = cc.Class({
            name: "cc.Speed",
            extends: cc.Action,
            ctor: function(e, d) {
                this._speed = 0;
                this._innerAction = null;
                e && this.initWithAction(e, d)
            },
            getSpeed: function() {
                return this._speed
            },
            setSpeed: function(e) {
                this._speed =
                    e
            },
            initWithAction: function(e, d) {
                if (!e) return cc.errorID(1021), !1;
                this._innerAction = e;
                this._speed = d;
                return !0
            },
            clone: function() {
                var e = new cc.Speed;
                e.initWithAction(this._innerAction.clone(), this._speed);
                return e
            },
            startWithTarget: function(e) {
                cc.Action.prototype.startWithTarget.call(this, e);
                this._innerAction.startWithTarget(e)
            },
            stop: function() {
                this._innerAction.stop();
                cc.Action.prototype.stop.call(this)
            },
            step: function(e) {
                this._innerAction.step(e * this._speed)
            },
            isDone: function() {
                return this._innerAction.isDone()
            },
            reverse: function() {
                return new cc.Speed(this._innerAction.reverse(), this._speed)
            },
            setInnerAction: function(e) {
                this._innerAction !== e && (this._innerAction = e)
            },
            getInnerAction: function() {
                return this._innerAction
            }
        });
        cc.speed = function(e, d) {
            return new cc.Speed(e, d)
        };
        cc.Follow = cc.Class({
            name: "cc.Follow",
            extends: cc.Action,
            ctor: function(e, d) {
                this._followedNode = null;
                this._boundaryFullyCovered = this._boundarySet = !1;
                this._fullScreenSize = this._halfScreenSize = null;
                this.bottomBoundary = this.topBoundary = this.rightBoundary =
                    this.leftBoundary = 0;
                this._worldRect = cc.rect(0, 0, 0, 0);
                e && (d ? this.initWithTarget(e, d) : this.initWithTarget(e))
            },
            clone: function() {
                var e = new cc.Follow,
                    d = this._worldRect;
                d = new cc.Rect(d.x, d.y, d.width, d.height);
                e.initWithTarget(this._followedNode, d);
                return e
            },
            isBoundarySet: function() {
                return this._boundarySet
            },
            setBoundarySet: function(e) {
                this._boundarySet = e
            },
            setBoudarySet: function(e) {
                this.setBoundarySet(e)
            },
            initWithTarget: function(e, d) {
                if (!e) return cc.errorID(1022), !1;
                d = d || cc.rect(0, 0, 0, 0);
                this._followedNode =
                    e;
                this._worldRect = d;
                this._boundarySet = !(0 === d.width && 0 === d.height);
                this._boundaryFullyCovered = !1;
                e = cc.winSize;
                this._fullScreenSize = cc.v2(e.width, e.height);
                this._halfScreenSize = this._fullScreenSize.mul(.5);
                this._boundarySet && (this.leftBoundary = -(d.x + d.width - this._fullScreenSize.x), this.rightBoundary = -d.x, this.topBoundary = -d.y, this.bottomBoundary = -(d.y + d.height - this._fullScreenSize.y), this.rightBoundary < this.leftBoundary && (this.rightBoundary = this.leftBoundary = (this.leftBoundary + this.rightBoundary) /
                    2), this.topBoundary < this.bottomBoundary && (this.topBoundary = this.bottomBoundary = (this.topBoundary + this.bottomBoundary) / 2), this.topBoundary === this.bottomBoundary && this.leftBoundary === this.rightBoundary && (this._boundaryFullyCovered = !0));
                return !0
            },
            step: function(e) {
                e = this.target.convertToWorldSpaceAR(cc.Vec2.ZERO);
                var d = this._followedNode.convertToWorldSpaceAR(cc.Vec2.ZERO);
                e = e.sub(d);
                e = this.target.parent.convertToNodeSpaceAR(e.add(this._halfScreenSize));
                this._boundarySet ? this._boundaryFullyCovered || this.target.setPosition(h.clampf(e.x,
                    this.leftBoundary, this.rightBoundary), h.clampf(e.y, this.bottomBoundary, this.topBoundary)) : this.target.setPosition(e.x, e.y)
            },
            isDone: function() {
                return !this._followedNode.activeInHierarchy
            },
            stop: function() {
                this.target = null;
                cc.Action.prototype.stop.call(this)
            }
        });
        cc.follow = function(e, d) {
            return new cc.Follow(e, d)
        }
    }, {
        "../core/platform/CCClass": 227,
        "../core/utils/misc": 310
    }],
    3: [function(g, q, m) {
        function h(d, c) {
            return d[Math.min(d.length - 1, Math.max(c, 0))]
        }

        function e(d) {
            for (var c = [], a = d.length - 1; 0 <= a; a--) c.push(cc.v2(d[a].x,
                d[a].y));
            return c
        }

        function d(d) {
            for (var c = [], a = 0; a < d.length; a++) c.push(cc.v2(d[a].x, d[a].y));
            return c
        }
        cc.CardinalSplineTo = cc.Class({
            name: "cc.CardinalSplineTo",
            extends: cc.ActionInterval,
            ctor: function(d, c, a) {
                this._points = [];
                this._tension = this._deltaT = 0;
                this._accumulatedDiff = this._previousPosition = null;
                void 0 !== a && cc.CardinalSplineTo.prototype.initWithDuration.call(this, d, c, a)
            },
            initWithDuration: function(d, c, a) {
                return c && 0 !== c.length ? cc.ActionInterval.prototype.initWithDuration.call(this, d) ? (this.setPoints(c),
                    this._tension = a, !0) : !1 : (cc.errorID(1024), !1)
            },
            clone: function() {
                var k = new cc.CardinalSplineTo;
                k.initWithDuration(this._duration, d(this._points), this._tension);
                return k
            },
            startWithTarget: function(d) {
                cc.ActionInterval.prototype.startWithTarget.call(this, d);
                this._deltaT = 1 / (this._points.length - 1);
                this._previousPosition = cc.v2(this.target.x, this.target.y);
                this._accumulatedDiff = cc.v2(0, 0)
            },
            update: function(d) {
                d = this._computeEaseTime(d);
                var c = this._points;
                if (1 === d) {
                    var a = c.length - 1;
                    var b = 1
                } else {
                    var l = this._deltaT;
                    a = 0 | d / l;
                    b = (d - l * a) / l
                }
                d = h(c, a - 1);
                l = h(c, a - 0);
                var f = h(c, a + 1);
                a = h(c, a + 2);
                var n = b * b,
                    u = n * b,
                    k = (1 - this._tension) / 2;
                c = k * (2 * n - u - b);
                var p = k * (-u + n) + (2 * u - 3 * n + 1);
                b = k * (u - 2 * n + b) + (-2 * u + 3 * n);
                n = k * (u - n);
                d = cc.v2(d.x * c + l.x * p + f.x * b + a.x * n, d.y * c + l.y * p + f.y * b + a.y * n);
                cc.macro.ENABLE_STACKABLE_ACTIONS && (l = this.target.x - this._previousPosition.x, f = this.target.y - this._previousPosition.y, 0 !== l || 0 !== f) && (b = this._accumulatedDiff, l = b.x + l, f = b.y + f, b.x = l, b.y = f, d.x += l, d.y += f);
                this.updatePosition(d)
            },
            reverse: function() {
                var d = e(this._points);
                return cc.cardinalSplineTo(this._duration, d, this._tension)
            },
            updatePosition: function(d) {
                this.target.setPosition(d);
                this._previousPosition = d
            },
            getPoints: function() {
                return this._points
            },
            setPoints: function(d) {
                this._points = d
            }
        });
        cc.cardinalSplineTo = function(d, c, a) {
            return new cc.CardinalSplineTo(d, c, a)
        };
        cc.CardinalSplineBy = cc.Class({
            name: "cc.CardinalSplineBy",
            extends: cc.CardinalSplineTo,
            ctor: function(d, c, a) {
                this._startPosition = cc.v2(0, 0);
                void 0 !== a && this.initWithDuration(d, c, a)
            },
            startWithTarget: function(d) {
                cc.CardinalSplineTo.prototype.startWithTarget.call(this,
                    d);
                this._startPosition.x = d.x;
                this._startPosition.y = d.y
            },
            reverse: function() {
                for (var d = this._points.slice(), c, a = d[0], b = 1; b < d.length; ++b) c = d[b], d[b] = c.sub(a), a = c;
                d = e(d);
                a = d[d.length - 1];
                d.pop();
                a.x = -a.x;
                a.y = -a.y;
                d.unshift(a);
                for (b = 1; b < d.length; ++b) c = d[b], c.x = -c.x, c.y = -c.y, c.x += a.x, c.y += a.y, a = d[b] = c;
                return cc.cardinalSplineBy(this._duration, d, this._tension)
            },
            updatePosition: function(d) {
                var c = this._startPosition,
                    a = d.x + c.x;
                d = d.y + c.y;
                this._previousPosition.x = a;
                this._previousPosition.y = d;
                this.target.setPosition(a,
                    d)
            },
            clone: function() {
                var k = new cc.CardinalSplineBy;
                k.initWithDuration(this._duration, d(this._points), this._tension);
                return k
            }
        });
        cc.cardinalSplineBy = function(d, c, a) {
            return new cc.CardinalSplineBy(d, c, a)
        };
        cc.CatmullRomTo = cc.Class({
            name: "cc.CatmullRomTo",
            extends: cc.CardinalSplineTo,
            ctor: function(d, c) {
                c && this.initWithDuration(d, c)
            },
            initWithDuration: function(d, c) {
                return cc.CardinalSplineTo.prototype.initWithDuration.call(this, d, c, .5)
            },
            clone: function() {
                var k = new cc.CatmullRomTo;
                k.initWithDuration(this._duration,
                    d(this._points));
                return k
            }
        });
        cc.catmullRomTo = function(d, c) {
            return new cc.CatmullRomTo(d, c)
        };
        cc.CatmullRomBy = cc.Class({
            name: "cc.CatmullRomBy",
            extends: cc.CardinalSplineBy,
            ctor: function(d, c) {
                c && this.initWithDuration(d, c)
            },
            initWithDuration: function(d, c) {
                return cc.CardinalSplineTo.prototype.initWithDuration.call(this, d, c, .5)
            },
            clone: function() {
                var k = new cc.CatmullRomBy;
                k.initWithDuration(this._duration, d(this._points));
                return k
            }
        });
        cc.catmullRomBy = function(d, c) {
            return new cc.CatmullRomBy(d, c)
        }
    }, {}],
    4: [function(g,
        q, m) {
        function h(a) {
            if (a < 1 / 2.75) return 7.5625 * a * a;
            if (a < 2 / 2.75) return a -= 1.5 / 2.75, 7.5625 * a * a + .75;
            if (a < 2.5 / 2.75) return a -= 2.25 / 2.75, 7.5625 * a * a + .9375;
            a -= 2.625 / 2.75;
            return 7.5625 * a * a + .984375
        }
        cc.easeIn = function(a) {
            return {
                _rate: a,
                easing: function(a) {
                    return Math.pow(a, this._rate)
                },
                reverse: function() {
                    return cc.easeIn(1 / this._rate)
                }
            }
        };
        cc.easeOut = function(a) {
            return {
                _rate: a,
                easing: function(a) {
                    return Math.pow(a, 1 / this._rate)
                },
                reverse: function() {
                    return cc.easeOut(1 / this._rate)
                }
            }
        };
        cc.easeInOut = function(a) {
            return {
                _rate: a,
                easing: function(a) {
                    a *= 2;
                    return 1 > a ? .5 * Math.pow(a, this._rate) : 1 - .5 * Math.pow(2 - a, this._rate)
                },
                reverse: function() {
                    return cc.easeInOut(this._rate)
                }
            }
        };
        var e = {
            easing: function(a) {
                return 0 === a ? 0 : Math.pow(2, 10 * (a - 1))
            },
            reverse: function() {
                return d
            }
        };
        cc.easeExponentialIn = function() {
            return e
        };
        var d = {
            easing: function(a) {
                return 1 === a ? 1 : 1 - Math.pow(2, -10 * a)
            },
            reverse: function() {
                return e
            }
        };
        cc.easeExponentialOut = function() {
            return d
        };
        var k = {
            easing: function(a) {
                return 1 !== a && 0 !== a ? (a *= 2, 1 > a ? .5 * Math.pow(2, 10 * (a - 1)) : .5 * (2 -
                    Math.pow(2, -10 * (a - 1)))) : a
            },
            reverse: function() {
                return k
            }
        };
        cc.easeExponentialInOut = function() {
            return k
        };
        var c = {
            easing: function(a) {
                return 0 === a || 1 === a ? a : -1 * Math.cos(a * Math.PI / 2) + 1
            },
            reverse: function() {
                return a
            }
        };
        cc.easeSineIn = function() {
            return c
        };
        var a = {
            easing: function(a) {
                return 0 === a || 1 === a ? a : Math.sin(a * Math.PI / 2)
            },
            reverse: function() {
                return c
            }
        };
        cc.easeSineOut = function() {
            return a
        };
        var b = {
            easing: function(a) {
                return 0 === a || 1 === a ? a : -.5 * (Math.cos(Math.PI * a) - 1)
            },
            reverse: function() {
                return b
            }
        };
        cc.easeSineInOut =
            function() {
                return b
            };
        var l = {
            easing: function(a) {
                if (0 === a || 1 === a) return a;
                --a;
                return -Math.pow(2, 10 * a) * Math.sin((a - .075) * Math.PI * 2 / .3)
            },
            reverse: function() {
                return f
            }
        };
        cc.easeElasticIn = function(a) {
            return a && .3 !== a ? {
                _period: a,
                easing: function(a) {
                    if (0 === a || 1 === a) return a;
                    --a;
                    return -Math.pow(2, 10 * a) * Math.sin((a - this._period / 4) * Math.PI * 2 / this._period)
                },
                reverse: function() {
                    return cc.easeElasticOut(this._period)
                }
            } : l
        };
        var f = {
            easing: function(a) {
                return 0 === a || 1 === a ? a : Math.pow(2, -10 * a) * Math.sin((a - .075) * Math.PI * 2 /
                    .3) + 1
            },
            reverse: function() {
                return l
            }
        };
        cc.easeElasticOut = function(a) {
            return a && .3 !== a ? {
                _period: a,
                easing: function(a) {
                    return 0 === a || 1 === a ? a : Math.pow(2, -10 * a) * Math.sin((a - this._period / 4) * Math.PI * 2 / this._period) + 1
                },
                reverse: function() {
                    return cc.easeElasticIn(this._period)
                }
            } : f
        };
        cc.easeElasticInOut = function(a) {
            return {
                _period: a || .3,
                easing: function(a) {
                    var b = this._period;
                    if (0 !== a && 1 !== a) {
                        b || (b = this._period = .3 * 1.5);
                        var c = b / 4;
                        a = 2 * a - 1;
                        a = 0 > a ? -.5 * Math.pow(2, 10 * a) * Math.sin((a - c) * Math.PI * 2 / b) : Math.pow(2, -10 * a) * Math.sin((a -
                            c) * Math.PI * 2 / b) * .5 + 1
                    }
                    return a
                },
                reverse: function() {
                    return cc.easeElasticInOut(this._period)
                }
            }
        };
        var n = {
            easing: function(a) {
                return 1 - h(1 - a)
            },
            reverse: function() {
                return u
            }
        };
        cc.easeBounceIn = function() {
            return n
        };
        var u = {
            easing: function(a) {
                return h(a)
            },
            reverse: function() {
                return n
            }
        };
        cc.easeBounceOut = function() {
            return u
        };
        var v = {
            easing: function(a) {
                return .5 > a ? .5 * (1 - h(1 - 2 * a)) : .5 * h(2 * a - 1) + .5
            },
            reverse: function() {
                return v
            }
        };
        cc.easeBounceInOut = function() {
            return v
        };
        var p = {
            easing: function(a) {
                return 0 === a || 1 === a ? a : a * a *
                    (2.70158 * a - 1.70158)
            },
            reverse: function() {
                return t
            }
        };
        cc.easeBackIn = function() {
            return p
        };
        var t = {
            easing: function(a) {
                if (0 === a) return 0;
                --a;
                return a * a * (2.70158 * a + 1.70158) + 1
            },
            reverse: function() {
                return p
            }
        };
        cc.easeBackOut = function() {
            return t
        };
        var x = {
            easing: function(a) {
                a *= 2;
                if (1 > a) return a * a * (3.5949095 * a - 2.5949095) / 2;
                a -= 2;
                return a * a * (3.5949095 * a + 2.5949095) / 2 + 1
            },
            reverse: function() {
                return x
            }
        };
        cc.easeBackInOut = function() {
            return x
        };
        cc.easeBezierAction = function(a, b, c, f) {
            return {
                easing: function(d) {
                    return Math.pow(1 -
                        d, 3) * a + 3 * d * Math.pow(1 - d, 2) * b + 3 * Math.pow(d, 2) * (1 - d) * c + Math.pow(d, 3) * f
                },
                reverse: function() {
                    return cc.easeBezierAction(f, c, b, a)
                }
            }
        };
        var z = {
            easing: function(a) {
                return Math.pow(a, 2)
            },
            reverse: function() {
                return z
            }
        };
        cc.easeQuadraticActionIn = function() {
            return z
        };
        var E = {
            easing: function(a) {
                return -a * (a - 2)
            },
            reverse: function() {
                return E
            }
        };
        cc.easeQuadraticActionOut = function() {
            return E
        };
        var w = {
            easing: function(a) {
                a *= 2;
                1 > a ? a = a * a * .5 : (--a, a = -.5 * (a * (a - 2) - 1));
                return a
            },
            reverse: function() {
                return w
            }
        };
        cc.easeQuadraticActionInOut =
            function() {
                return w
            };
        var A = {
            easing: function(a) {
                return a * a * a * a
            },
            reverse: function() {
                return A
            }
        };
        cc.easeQuarticActionIn = function() {
            return A
        };
        var B = {
            easing: function(a) {
                --a;
                return -(a * a * a * a - 1)
            },
            reverse: function() {
                return B
            }
        };
        cc.easeQuarticActionOut = function() {
            return B
        };
        var y = {
            easing: function(a) {
                a *= 2;
                if (1 > a) return .5 * a * a * a * a;
                a -= 2;
                return -.5 * (a * a * a * a - 2)
            },
            reverse: function() {
                return y
            }
        };
        cc.easeQuarticActionInOut = function() {
            return y
        };
        var C = {
            easing: function(a) {
                return a * a * a * a * a
            },
            reverse: function() {
                return C
            }
        };
        cc.easeQuinticActionIn =
            function() {
                return C
            };
        var F = {
            easing: function(a) {
                --a;
                return a * a * a * a * a + 1
            },
            reverse: function() {
                return F
            }
        };
        cc.easeQuinticActionOut = function() {
            return F
        };
        var G = {
            easing: function(a) {
                a *= 2;
                if (1 > a) return .5 * a * a * a * a * a;
                a -= 2;
                return .5 * (a * a * a * a * a + 2)
            },
            reverse: function() {
                return G
            }
        };
        cc.easeQuinticActionInOut = function() {
            return G
        };
        var D = {
            easing: function(a) {
                return -1 * (Math.sqrt(1 - a * a) - 1)
            },
            reverse: function() {
                return D
            }
        };
        cc.easeCircleActionIn = function() {
            return D
        };
        var I = {
            easing: function(a) {
                --a;
                return Math.sqrt(1 - a * a)
            },
            reverse: function() {
                return I
            }
        };
        cc.easeCircleActionOut = function() {
            return I
        };
        var K = {
            easing: function(a) {
                a *= 2;
                if (1 > a) return -.5 * (Math.sqrt(1 - a * a) - 1);
                a -= 2;
                return .5 * (Math.sqrt(1 - a * a) + 1)
            },
            reverse: function() {
                return K
            }
        };
        cc.easeCircleActionInOut = function() {
            return K
        };
        var L = {
            easing: function(a) {
                return a * a * a
            },
            reverse: function() {
                return L
            }
        };
        cc.easeCubicActionIn = function() {
            return L
        };
        var R = {
            easing: function(a) {
                --a;
                return a * a * a + 1
            },
            reverse: function() {
                return R
            }
        };
        cc.easeCubicActionOut = function() {
            return R
        };
        var M = {
            easing: function(a) {
                a *= 2;
                if (1 > a) return .5 *
                    a * a * a;
                a -= 2;
                return .5 * (a * a * a + 2)
            },
            reverse: function() {
                return M
            }
        };
        cc.easeCubicActionInOut = function() {
            return M
        }
    }, {}],
    5: [function(g, q, m) {
        cc.ActionInstant = cc.Class({
            name: "cc.ActionInstant",
            extends: cc.FiniteTimeAction,
            isDone: function() {
                return !0
            },
            step: function(h) {
                this.update(1)
            },
            update: function(h) {},
            reverse: function() {
                return this.clone()
            },
            clone: function() {
                return new cc.ActionInstant
            }
        });
        cc.Show = cc.Class({
            name: "cc.Show",
            extends: cc.ActionInstant,
            update: function(h) {
                h = this.target.getComponentsInChildren(cc.RenderComponent);
                for (var e = 0; e < h.length; ++e) h[e].enabled = !0
            },
            reverse: function() {
                return new cc.Hide
            },
            clone: function() {
                return new cc.Show
            }
        });
        cc.show = function() {
            return new cc.Show
        };
        cc.Hide = cc.Class({
            name: "cc.Hide",
            extends: cc.ActionInstant,
            update: function(h) {
                h = this.target.getComponentsInChildren(cc.RenderComponent);
                for (var e = 0; e < h.length; ++e) h[e].enabled = !1
            },
            reverse: function() {
                return new cc.Show
            },
            clone: function() {
                return new cc.Hide
            }
        });
        cc.hide = function() {
            return new cc.Hide
        };
        cc.ToggleVisibility = cc.Class({
            name: "cc.ToggleVisibility",
            extends: cc.ActionInstant,
            update: function(h) {
                h = this.target.getComponentsInChildren(cc.RenderComponent);
                for (var e = 0; e < h.length; ++e) {
                    var d = h[e];
                    d.enabled = !d.enabled
                }
            },
            reverse: function() {
                return new cc.ToggleVisibility
            },
            clone: function() {
                return new cc.ToggleVisibility
            }
        });
        cc.toggleVisibility = function() {
            return new cc.ToggleVisibility
        };
        cc.RemoveSelf = cc.Class({
            name: "cc.RemoveSelf",
            extends: cc.ActionInstant,
            ctor: function(h) {
                this._isNeedCleanUp = !0;
                void 0 !== h && this.init(h)
            },
            update: function(h) {
                this.target.removeFromParent(this._isNeedCleanUp)
            },
            init: function(h) {
                this._isNeedCleanUp = h;
                return !0
            },
            reverse: function() {
                return new cc.RemoveSelf(this._isNeedCleanUp)
            },
            clone: function() {
                return new cc.RemoveSelf(this._isNeedCleanUp)
            }
        });
        cc.removeSelf = function(h) {
            return new cc.RemoveSelf(h)
        };
        cc.DestroySelf = cc.Class({
            name: "cc.DestroySelf",
            extends: cc.ActionInstant,
            update: function() {
                this.target.destroy()
            },
            reverse: function() {
                return new cc.DestroySelf
            },
            clone: function() {
                return new cc.DestroySelf
            }
        });
        cc.destroySelf = function() {
            return new cc.DestroySelf
        };
        cc.FlipX =
            cc.Class({
                name: "cc.FlipX",
                extends: cc.ActionInstant,
                ctor: function(h) {
                    this._flippedX = !1;
                    void 0 !== h && this.initWithFlipX(h)
                },
                initWithFlipX: function(h) {
                    this._flippedX = h;
                    return !0
                },
                update: function(h) {
                    this.target.scaleX = Math.abs(this.target.scaleX) * (this._flippedX ? -1 : 1)
                },
                reverse: function() {
                    return new cc.FlipX(!this._flippedX)
                },
                clone: function() {
                    var h = new cc.FlipX;
                    h.initWithFlipX(this._flippedX);
                    return h
                }
            });
        cc.flipX = function(h) {
            return new cc.FlipX(h)
        };
        cc.FlipY = cc.Class({
            name: "cc.FlipY",
            extends: cc.ActionInstant,
            ctor: function(h) {
                this._flippedY = !1;
                void 0 !== h && this.initWithFlipY(h)
            },
            initWithFlipY: function(h) {
                this._flippedY = h;
                return !0
            },
            update: function(h) {
                this.target.scaleY = Math.abs(this.target.scaleY) * (this._flippedY ? -1 : 1)
            },
            reverse: function() {
                return new cc.FlipY(!this._flippedY)
            },
            clone: function() {
                var h = new cc.FlipY;
                h.initWithFlipY(this._flippedY);
                return h
            }
        });
        cc.flipY = function(h) {
            return new cc.FlipY(h)
        };
        cc.Place = cc.Class({
            name: "cc.Place",
            extends: cc.ActionInstant,
            ctor: function(h, e) {
                this._y = this._x = 0;
                void 0 !==
                    h && (void 0 !== h.x && (e = h.y, h = h.x), this.initWithPosition(h, e))
            },
            initWithPosition: function(h, e) {
                this._x = h;
                this._y = e;
                return !0
            },
            update: function(h) {
                this.target.setPosition(this._x, this._y)
            },
            clone: function() {
                var h = new cc.Place;
                h.initWithPosition(this._x, this._y);
                return h
            }
        });
        cc.place = function(h, e) {
            return new cc.Place(h, e)
        };
        cc.CallFunc = cc.Class({
            name: "cc.CallFunc",
            extends: cc.ActionInstant,
            ctor: function(h, e, d) {
                this._data = this._function = this._selectorTarget = null;
                this.initWithFunction(h, e, d)
            },
            initWithFunction: function(h,
                e, d) {
                h && (this._function = h);
                e && (this._selectorTarget = e);
                void 0 !== d && (this._data = d);
                return !0
            },
            execute: function() {
                this._function && this._function.call(this._selectorTarget, this.target, this._data)
            },
            update: function(h) {
                this.execute()
            },
            getTargetCallback: function() {
                return this._selectorTarget
            },
            setTargetCallback: function(h) {
                h !== this._selectorTarget && (this._selectorTarget && (this._selectorTarget = null), this._selectorTarget = h)
            },
            clone: function() {
                var h = new cc.CallFunc;
                h.initWithFunction(this._function, this._selectorTarget,
                    this._data);
                return h
            }
        });
        cc.callFunc = function(h, e, d) {
            return new cc.CallFunc(h, e, d)
        }
    }, {}],
    6: [function(g, q, m) {
        function h(e, d, k, c, a) {
            return Math.pow(1 - a, 3) * e + 3 * a * Math.pow(1 - a, 2) * d + 3 * Math.pow(a, 2) * (1 - a) * k + Math.pow(a, 3) * c
        }
        cc.ActionInterval = cc.Class({
            name: "cc.ActionInterval",
            extends: cc.FiniteTimeAction,
            ctor: function(e) {
                this.MAX_VALUE = 2;
                this._elapsed = 0;
                this._firstTick = !1;
                this._easeList = null;
                this._timesForRepeat = this._speed = 1;
                this._speedMethod = this._repeatMethod = this._repeatForever = !1;
                void 0 !== e && cc.ActionInterval.prototype.initWithDuration.call(this,
                    e)
            },
            getElapsed: function() {
                return this._elapsed
            },
            initWithDuration: function(e) {
                this._duration = 0 === e ? cc.macro.FLT_EPSILON : e;
                this._elapsed = 0;
                return this._firstTick = !0
            },
            isDone: function() {
                return this._elapsed >= this._duration
            },
            _cloneDecoration: function(e) {
                e._repeatForever = this._repeatForever;
                e._speed = this._speed;
                e._timesForRepeat = this._timesForRepeat;
                e._easeList = this._easeList;
                e._speedMethod = this._speedMethod;
                e._repeatMethod = this._repeatMethod
            },
            _reverseEaseList: function(e) {
                if (this._easeList) {
                    e._easeList = [];
                    for (var d = 0; d < this._easeList.length; d++) e._easeList.push(this._easeList[d].reverse())
                }
            },
            clone: function() {
                var e = new cc.ActionInterval(this._duration);
                this._cloneDecoration(e);
                return e
            },
            easing: function(e) {
                this._easeList ? this._easeList.length = 0 : this._easeList = [];
                for (var d = 0; d < arguments.length; d++) this._easeList.push(arguments[d]);
                return this
            },
            _computeEaseTime: function(e) {
                var d = this._easeList;
                if (!d || 0 === d.length) return e;
                for (var k = 0, c = d.length; k < c; k++) e = d[k].easing(e);
                return e
            },
            step: function(e) {
                this._firstTick ?
                    (this._firstTick = !1, this._elapsed = 0) : this._elapsed += e;
                e = this._elapsed / (1.192092896E-7 < this._duration ? this._duration : 1.192092896E-7);
                e = 1 > e ? e : 1;
                this.update(0 < e ? e : 0);
                this._repeatMethod && 1 < this._timesForRepeat && this.isDone() && (this._repeatForever || this._timesForRepeat--, this.startWithTarget(this.target), this.step(this._elapsed - this._duration))
            },
            startWithTarget: function(e) {
                cc.Action.prototype.startWithTarget.call(this, e);
                this._elapsed = 0;
                this._firstTick = !0
            },
            reverse: function() {
                cc.logID(1010);
                return null
            },
            setAmplitudeRate: function(e) {
                cc.logID(1011)
            },
            getAmplitudeRate: function() {
                cc.logID(1012);
                return 0
            },
            speed: function(e) {
                if (0 >= e) return cc.logID(1013), this;
                this._speedMethod = !0;
                this._speed *= e;
                return this
            },
            getSpeed: function() {
                return this._speed
            },
            setSpeed: function(e) {
                this._speed = e;
                return this
            },
            repeat: function(e) {
                e = Math.round(e);
                if (isNaN(e) || 1 > e) return cc.logID(1014), this;
                this._repeatMethod = !0;
                this._timesForRepeat *= e;
                return this
            },
            repeatForever: function() {
                this._repeatMethod = !0;
                this._timesForRepeat = this.MAX_VALUE;
                this._repeatForever = !0;
                return this
            }
        });
        cc.actionInterval = function(e) {
            return new cc.ActionInterval(e)
        };
        cc.Sequence = cc.Class({
            name: "cc.Sequence",
            extends: cc.ActionInterval,
            ctor: function(e) {
                this._actions = [];
                this._split = null;
                this._last = 0;
                this._reversed = !1;
                var d = e instanceof Array ? e : arguments;
                if (1 === d.length) cc.errorID(1019);
                else {
                    var k = d.length - 1;
                    0 <= k && null == d[k] && cc.logID(1015);
                    if (0 <= k) {
                        for (var c = d[0], a = 1; a < k; a++) d[a] && (c = cc.Sequence._actionOneTwo(c, d[a]));
                        this.initWithTwoActions(c, d[k])
                    }
                }
            },
            initWithTwoActions: function(e,
                d) {
                if (!e || !d) return cc.errorID(1025), !1;
                var k = e._duration,
                    c = d._duration;
                k *= e._repeatMethod ? e._timesForRepeat : 1;
                c *= d._repeatMethod ? d._timesForRepeat : 1;
                this.initWithDuration(k + c);
                this._actions[0] = e;
                this._actions[1] = d;
                return !0
            },
            clone: function() {
                var e = new cc.Sequence;
                this._cloneDecoration(e);
                e.initWithTwoActions(this._actions[0].clone(), this._actions[1].clone());
                return e
            },
            startWithTarget: function(e) {
                cc.ActionInterval.prototype.startWithTarget.call(this, e);
                this._split = this._actions[0]._duration / this._duration;
                this._split *= this._actions[0]._repeatMethod ? this._actions[0]._timesForRepeat : 1;
                this._last = -1
            },
            stop: function() {
                -1 !== this._last && this._actions[this._last].stop();
                cc.Action.prototype.stop.call(this)
            },
            update: function(e) {
                var d = 0,
                    k = this._split,
                    c = this._actions,
                    a = this._last;
                e = this._computeEaseTime(e);
                e < k ? (e = 0 !== k ? e / k : 1, 0 === d && 1 === a && this._reversed && (c[1].update(0), c[1].stop())) : (d = 1, e = 1 === k ? 1 : (e - k) / (1 - k), -1 === a && (c[0].startWithTarget(this.target), c[0].update(1), c[0].stop()), 0 === a && (c[0].update(1), c[0].stop()));
                c = c[d];
                a === d && c.isDone() || (a !== d && c.startWithTarget(this.target), e *= c._timesForRepeat, c.update(1 < e ? e % 1 : e), this._last = d)
            },
            reverse: function() {
                var e = cc.Sequence._actionOneTwo(this._actions[1].reverse(), this._actions[0].reverse());
                this._cloneDecoration(e);
                this._reverseEaseList(e);
                e._reversed = !0;
                return e
            }
        });
        cc.sequence = function(e) {
            var d = e instanceof Array ? e : arguments;
            if (1 === d.length) return cc.errorID(1019), null;
            var k = d.length - 1;
            0 <= k && null == d[k] && cc.logID(1015);
            var c = null;
            if (0 <= k) {
                c = d[0];
                for (var a = 1; a <=
                    k; a++) d[a] && (c = cc.Sequence._actionOneTwo(c, d[a]))
            }
            return c
        };
        cc.Sequence._actionOneTwo = function(e, d) {
            var k = new cc.Sequence;
            k.initWithTwoActions(e, d);
            return k
        };
        cc.Repeat = cc.Class({
            name: "cc.Repeat",
            extends: cc.ActionInterval,
            ctor: function(e, d) {
                this._nextDt = this._total = this._times = 0;
                this._actionInstant = !1;
                this._innerAction = null;
                void 0 !== d && this.initWithAction(e, d)
            },
            initWithAction: function(e, d) {
                return this.initWithDuration(e._duration * d) ? (this._times = d, this._innerAction = e, e instanceof cc.ActionInstant &&
                    (this._actionInstant = !0, --this._times), this._total = 0, !0) : !1
            },
            clone: function() {
                var e = new cc.Repeat;
                this._cloneDecoration(e);
                e.initWithAction(this._innerAction.clone(), this._times);
                return e
            },
            startWithTarget: function(e) {
                this._total = 0;
                this._nextDt = this._innerAction._duration / this._duration;
                cc.ActionInterval.prototype.startWithTarget.call(this, e);
                this._innerAction.startWithTarget(e)
            },
            stop: function() {
                this._innerAction.stop();
                cc.Action.prototype.stop.call(this)
            },
            update: function(e) {
                e = this._computeEaseTime(e);
                var d = this._innerAction,
                    k = this._duration,
                    c = this._times,
                    a = this._nextDt;
                if (e >= a) {
                    for (; e > a && this._total < c;) d.update(1), this._total++, d.stop(), d.startWithTarget(this.target), a += d._duration / k, this._nextDt = 1 < a ? 1 : a;
                    1 <= e && this._total < c && (d.update(1), this._total++);
                    this._actionInstant || (this._total === c ? d.stop() : d.update(e - (a - d._duration / k)))
                } else d.update(e * c % 1)
            },
            isDone: function() {
                return this._total === this._times
            },
            reverse: function() {
                var e = new cc.Repeat(this._innerAction.reverse(), this._times);
                this._cloneDecoration(e);
                this._reverseEaseList(e);
                return e
            },
            setInnerAction: function(e) {
                this._innerAction !== e && (this._innerAction = e)
            },
            getInnerAction: function() {
                return this._innerAction
            }
        });
        cc.repeat = function(e, d) {
            return new cc.Repeat(e, d)
        };
        cc.repeatForever = function(e) {
            return new cc.RepeatForever(e)
        };
        cc.RepeatForever = cc.Class({
            name: "cc.RepeatForever",
            extends: cc.ActionInterval,
            ctor: function(e) {
                this._innerAction = null;
                e && this.initWithAction(e)
            },
            initWithAction: function(e) {
                if (!e) return cc.errorID(1026), !1;
                this._innerAction = e;
                return !0
            },
            clone: function() {
                var e = new cc.RepeatForever;
                this._cloneDecoration(e);
                e.initWithAction(this._innerAction.clone());
                return e
            },
            startWithTarget: function(e) {
                cc.ActionInterval.prototype.startWithTarget.call(this, e);
                this._innerAction.startWithTarget(e)
            },
            step: function(e) {
                var d = this._innerAction;
                d.step(e);
                d.isDone() && (d.startWithTarget(this.target), d.step(d.getElapsed() - d._duration))
            },
            isDone: function() {
                return !1
            },
            reverse: function() {
                var e = new cc.RepeatForever(this._innerAction.reverse());
                this._cloneDecoration(e);
                this._reverseEaseList(e);
                return e
            },
            setInnerAction: function(e) {
                this._innerAction !== e && (this._innerAction = e)
            },
            getInnerAction: function() {
                return this._innerAction
            }
        });
        cc.repeatForever = function(e) {
            return new cc.RepeatForever(e)
        };
        cc.Spawn = cc.Class({
            name: "cc.Spawn",
            extends: cc.ActionInterval,
            ctor: function(e) {
                this._two = this._one = null;
                var d = e instanceof Array ? e : arguments;
                if (1 === d.length) cc.errorID(1020);
                else {
                    var k = d.length - 1;
                    0 <= k && null == d[k] && cc.logID(1015);
                    if (0 <= k) {
                        for (var c = d[0], a = 1; a < k; a++) d[a] && (c = cc.Spawn._actionOneTwo(c,
                            d[a]));
                        this.initWithTwoActions(c, d[k])
                    }
                }
            },
            initWithTwoActions: function(e, d) {
                if (!e || !d) return cc.errorID(1027), !1;
                var k = !1,
                    c = e._duration,
                    a = d._duration;
                this.initWithDuration(Math.max(c, a)) && (this._one = e, this._two = d, c > a ? this._two = cc.Sequence._actionOneTwo(d, cc.delayTime(c - a)) : c < a && (this._one = cc.Sequence._actionOneTwo(e, cc.delayTime(a - c))), k = !0);
                return k
            },
            clone: function() {
                var e = new cc.Spawn;
                this._cloneDecoration(e);
                e.initWithTwoActions(this._one.clone(), this._two.clone());
                return e
            },
            startWithTarget: function(e) {
                cc.ActionInterval.prototype.startWithTarget.call(this,
                    e);
                this._one.startWithTarget(e);
                this._two.startWithTarget(e)
            },
            stop: function() {
                this._one.stop();
                this._two.stop();
                cc.Action.prototype.stop.call(this)
            },
            update: function(e) {
                e = this._computeEaseTime(e);
                this._one && this._one.update(e);
                this._two && this._two.update(e)
            },
            reverse: function() {
                var e = cc.Spawn._actionOneTwo(this._one.reverse(), this._two.reverse());
                this._cloneDecoration(e);
                this._reverseEaseList(e);
                return e
            }
        });
        cc.spawn = function(e) {
            var d = e instanceof Array ? e : arguments;
            if (1 === d.length) return cc.errorID(1020),
                null;
            0 < d.length && null == d[d.length - 1] && cc.logID(1015);
            for (var k = d[0], c = 1; c < d.length; c++) null != d[c] && (k = cc.Spawn._actionOneTwo(k, d[c]));
            return k
        };
        cc.Spawn._actionOneTwo = function(e, d) {
            var k = new cc.Spawn;
            k.initWithTwoActions(e, d);
            return k
        };
        cc.RotateTo = cc.Class({
            name: "cc.RotateTo",
            extends: cc.ActionInterval,
            statics: {
                _reverse: !1
            },
            ctor: function(e, d) {
                this._angle = this._dstAngle = this._startAngle = 0;
                void 0 !== d && this.initWithDuration(e, d)
            },
            initWithDuration: function(e, d) {
                return cc.ActionInterval.prototype.initWithDuration.call(this,
                    e) ? (this._dstAngle = d, !0) : !1
            },
            clone: function() {
                var e = new cc.RotateTo;
                this._cloneDecoration(e);
                e.initWithDuration(this._duration, this._dstAngle);
                return e
            },
            startWithTarget: function(e) {
                cc.ActionInterval.prototype.startWithTarget.call(this, e);
                e = e.angle % 360;
                var d = cc.RotateTo._reverse ? this._dstAngle - e : this._dstAngle + e;
                180 < d && (d -= 360); - 180 > d && (d += 360);
                this._startAngle = e;
                this._angle = cc.RotateTo._reverse ? d : -d
            },
            reverse: function() {
                cc.logID(1016)
            },
            update: function(e) {
                e = this._computeEaseTime(e);
                this.target && (this.target.angle =
                    this._startAngle + this._angle * e)
            }
        });
        cc.rotateTo = function(e, d) {
            return new cc.RotateTo(e, d)
        };
        cc.RotateBy = cc.Class({
            name: "cc.RotateBy",
            extends: cc.ActionInterval,
            statics: {
                _reverse: !1
            },
            ctor: function(e, d) {
                d *= cc.RotateBy._reverse ? 1 : -1;
                this._startAngle = this._deltaAngle = 0;
                void 0 !== d && this.initWithDuration(e, d)
            },
            initWithDuration: function(e, d) {
                return cc.ActionInterval.prototype.initWithDuration.call(this, e) ? (this._deltaAngle = d, !0) : !1
            },
            clone: function() {
                var e = new cc.RotateBy;
                this._cloneDecoration(e);
                e.initWithDuration(this._duration,
                    this._deltaAngle);
                return e
            },
            startWithTarget: function(e) {
                cc.ActionInterval.prototype.startWithTarget.call(this, e);
                this._startAngle = e.angle
            },
            update: function(e) {
                e = this._computeEaseTime(e);
                this.target && (this.target.angle = this._startAngle + this._deltaAngle * e)
            },
            reverse: function() {
                var e = new cc.RotateBy;
                e.initWithDuration(this._duration, -this._deltaAngle);
                this._cloneDecoration(e);
                this._reverseEaseList(e);
                return e
            }
        });
        cc.rotateBy = function(e, d) {
            return new cc.RotateBy(e, d)
        };
        cc.MoveBy = cc.Class({
            name: "cc.MoveBy",
            extends: cc.ActionInterval,
            ctor: function(e, d, k) {
                this._positionDelta = cc.v2(0, 0);
                this._startPosition = cc.v2(0, 0);
                this._previousPosition = cc.v2(0, 0);
                void 0 !== d && cc.MoveBy.prototype.initWithDuration.call(this, e, d, k)
            },
            initWithDuration: function(e, d, k) {
                return cc.ActionInterval.prototype.initWithDuration.call(this, e) ? (void 0 !== d.x && (k = d.y, d = d.x), this._positionDelta.x = d, this._positionDelta.y = k, !0) : !1
            },
            clone: function() {
                var e = new cc.MoveBy;
                this._cloneDecoration(e);
                e.initWithDuration(this._duration, this._positionDelta);
                return e
            },
            startWithTarget: function(e) {
                cc.ActionInterval.prototype.startWithTarget.call(this, e);
                var d = e.x;
                e = e.y;
                this._previousPosition.x = d;
                this._previousPosition.y = e;
                this._startPosition.x = d;
                this._startPosition.y = e
            },
            update: function(e) {
                e = this._computeEaseTime(e);
                if (this.target) {
                    var d = this._positionDelta.x * e;
                    e *= this._positionDelta.y;
                    var k = this._startPosition;
                    if (cc.macro.ENABLE_STACKABLE_ACTIONS) {
                        var c = this.target.y,
                            a = this._previousPosition;
                        k.x = k.x + this.target.x - a.x;
                        k.y = k.y + c - a.y;
                        d += k.x;
                        e += k.y;
                        a.x = d;
                        a.y =
                            e;
                        this.target.setPosition(d, e)
                    } else this.target.setPosition(k.x + d, k.y + e)
                }
            },
            reverse: function() {
                var e = new cc.MoveBy(this._duration, cc.v2(-this._positionDelta.x, -this._positionDelta.y));
                this._cloneDecoration(e);
                this._reverseEaseList(e);
                return e
            }
        });
        cc.moveBy = function(e, d, k) {
            return new cc.MoveBy(e, d, k)
        };
        cc.MoveTo = cc.Class({
            name: "cc.MoveTo",
            extends: cc.MoveBy,
            ctor: function(e, d, k) {
                this._endPosition = cc.v2(0, 0);
                void 0 !== d && this.initWithDuration(e, d, k)
            },
            initWithDuration: function(e, d, k) {
                return cc.MoveBy.prototype.initWithDuration.call(this,
                    e, d, k) ? (void 0 !== d.x && (k = d.y, d = d.x), this._endPosition.x = d, this._endPosition.y = k, !0) : !1
            },
            clone: function() {
                var e = new cc.MoveTo;
                this._cloneDecoration(e);
                e.initWithDuration(this._duration, this._endPosition);
                return e
            },
            startWithTarget: function(e) {
                cc.MoveBy.prototype.startWithTarget.call(this, e);
                this._positionDelta.x = this._endPosition.x - e.x;
                this._positionDelta.y = this._endPosition.y - e.y
            }
        });
        cc.moveTo = function(e, d, k) {
            return new cc.MoveTo(e, d, k)
        };
        cc.SkewTo = cc.Class({
            name: "cc.SkewTo",
            extends: cc.ActionInterval,
            ctor: function(e, d, k) {
                this._deltaY = this._deltaX = this._endSkewY = this._endSkewX = this._startSkewY = this._startSkewX = this._skewY = this._skewX = 0;
                void 0 !== k && cc.SkewTo.prototype.initWithDuration.call(this, e, d, k)
            },
            initWithDuration: function(e, d, k) {
                var c = !1;
                cc.ActionInterval.prototype.initWithDuration.call(this, e) && (this._endSkewX = d, this._endSkewY = k, c = !0);
                return c
            },
            clone: function() {
                var e = new cc.SkewTo;
                this._cloneDecoration(e);
                e.initWithDuration(this._duration, this._endSkewX, this._endSkewY);
                return e
            },
            startWithTarget: function(e) {
                cc.ActionInterval.prototype.startWithTarget.call(this,
                    e);
                this._startSkewX = e.skewX % 180;
                this._deltaX = this._endSkewX - this._startSkewX;
                180 < this._deltaX && (this._deltaX -= 360); - 180 > this._deltaX && (this._deltaX += 360);
                this._startSkewY = e.skewY % 360;
                this._deltaY = this._endSkewY - this._startSkewY;
                180 < this._deltaY && (this._deltaY -= 360); - 180 > this._deltaY && (this._deltaY += 360)
            },
            update: function(e) {
                e = this._computeEaseTime(e);
                this.target.skewX = this._startSkewX + this._deltaX * e;
                this.target.skewY = this._startSkewY + this._deltaY * e
            }
        });
        cc.skewTo = function(e, d, k) {
            return new cc.SkewTo(e,
                d, k)
        };
        cc.SkewBy = cc.Class({
            name: "cc.SkewBy",
            extends: cc.SkewTo,
            ctor: function(e, d, k) {
                void 0 !== k && this.initWithDuration(e, d, k)
            },
            initWithDuration: function(e, d, k) {
                var c = !1;
                cc.SkewTo.prototype.initWithDuration.call(this, e, d, k) && (this._skewX = d, this._skewY = k, c = !0);
                return c
            },
            clone: function() {
                var e = new cc.SkewBy;
                this._cloneDecoration(e);
                e.initWithDuration(this._duration, this._skewX, this._skewY);
                return e
            },
            startWithTarget: function(e) {
                cc.SkewTo.prototype.startWithTarget.call(this, e);
                this._deltaX = this._skewX;
                this._deltaY =
                    this._skewY;
                this._endSkewX = this._startSkewX + this._deltaX;
                this._endSkewY = this._startSkewY + this._deltaY
            },
            reverse: function() {
                var e = new cc.SkewBy(this._duration, -this._skewX, -this._skewY);
                this._cloneDecoration(e);
                this._reverseEaseList(e);
                return e
            }
        });
        cc.skewBy = function(e, d, k) {
            return new cc.SkewBy(e, d, k)
        };
        cc.JumpBy = cc.Class({
            name: "cc.JumpBy",
            extends: cc.ActionInterval,
            ctor: function(e, d, k, c, a) {
                this._startPosition = cc.v2(0, 0);
                this._previousPosition = cc.v2(0, 0);
                this._delta = cc.v2(0, 0);
                this._jumps = this._height =
                    0;
                void 0 !== c && cc.JumpBy.prototype.initWithDuration.call(this, e, d, k, c, a)
            },
            initWithDuration: function(e, d, k, c, a) {
                return cc.ActionInterval.prototype.initWithDuration.call(this, e) ? (void 0 === a && (a = c, c = k, k = d.y, d = d.x), this._delta.x = d, this._delta.y = k, this._height = c, this._jumps = a, !0) : !1
            },
            clone: function() {
                var e = new cc.JumpBy;
                this._cloneDecoration(e);
                e.initWithDuration(this._duration, this._delta, this._height, this._jumps);
                return e
            },
            startWithTarget: function(e) {
                cc.ActionInterval.prototype.startWithTarget.call(this,
                    e);
                var d = e.x;
                e = e.y;
                this._previousPosition.x = d;
                this._previousPosition.y = e;
                this._startPosition.x = d;
                this._startPosition.y = e
            },
            update: function(e) {
                e = this._computeEaseTime(e);
                if (this.target) {
                    var d = e * this._jumps % 1;
                    d = 4 * this._height * d * (1 - d);
                    d += this._delta.y * e;
                    e *= this._delta.x;
                    var k = this._startPosition;
                    if (cc.macro.ENABLE_STACKABLE_ACTIONS) {
                        var c = this.target.y,
                            a = this._previousPosition;
                        k.x = k.x + this.target.x - a.x;
                        k.y = k.y + c - a.y;
                        e += k.x;
                        d += k.y;
                        a.x = e;
                        a.y = d;
                        this.target.setPosition(e, d)
                    } else this.target.setPosition(k.x +
                        e, k.y + d)
                }
            },
            reverse: function() {
                var e = new cc.JumpBy(this._duration, cc.v2(-this._delta.x, -this._delta.y), this._height, this._jumps);
                this._cloneDecoration(e);
                this._reverseEaseList(e);
                return e
            }
        });
        cc.jumpBy = function(e, d, k, c, a) {
            return new cc.JumpBy(e, d, k, c, a)
        };
        cc.JumpTo = cc.Class({
            name: "cc.JumpTo",
            extends: cc.JumpBy,
            ctor: function(e, d, k, c, a) {
                this._endPosition = cc.v2(0, 0);
                void 0 !== c && this.initWithDuration(e, d, k, c, a)
            },
            initWithDuration: function(e, d, k, c, a) {
                return cc.JumpBy.prototype.initWithDuration.call(this, e,
                    d, k, c, a) ? (void 0 === a && (k = d.y, d = d.x), this._endPosition.x = d, this._endPosition.y = k, !0) : !1
            },
            startWithTarget: function(e) {
                cc.JumpBy.prototype.startWithTarget.call(this, e);
                this._delta.x = this._endPosition.x - this._startPosition.x;
                this._delta.y = this._endPosition.y - this._startPosition.y
            },
            clone: function() {
                var e = new cc.JumpTo;
                this._cloneDecoration(e);
                e.initWithDuration(this._duration, this._endPosition, this._height, this._jumps);
                return e
            }
        });
        cc.jumpTo = function(e, d, k, c, a) {
            return new cc.JumpTo(e, d, k, c, a)
        };
        cc.BezierBy =
            cc.Class({
                name: "cc.BezierBy",
                extends: cc.ActionInterval,
                ctor: function(e, d) {
                    this._config = [];
                    this._startPosition = cc.v2(0, 0);
                    this._previousPosition = cc.v2(0, 0);
                    d && cc.BezierBy.prototype.initWithDuration.call(this, e, d)
                },
                initWithDuration: function(e, d) {
                    return cc.ActionInterval.prototype.initWithDuration.call(this, e) ? (this._config = d, !0) : !1
                },
                clone: function() {
                    var e = new cc.BezierBy;
                    this._cloneDecoration(e);
                    for (var d = [], k = 0; k < this._config.length; k++) {
                        var c = this._config[k];
                        d.push(cc.v2(c.x, c.y))
                    }
                    e.initWithDuration(this._duration,
                        d);
                    return e
                },
                startWithTarget: function(e) {
                    cc.ActionInterval.prototype.startWithTarget.call(this, e);
                    var d = e.x;
                    e = e.y;
                    this._previousPosition.x = d;
                    this._previousPosition.y = e;
                    this._startPosition.x = d;
                    this._startPosition.y = e
                },
                update: function(e) {
                    e = this._computeEaseTime(e);
                    if (this.target) {
                        var d = this._config,
                            k = d[0].y,
                            c = d[1].y,
                            a = d[2].y;
                        d = h(0, d[0].x, d[1].x, d[2].x, e);
                        e = h(0, k, c, a, e);
                        k = this._startPosition;
                        cc.macro.ENABLE_STACKABLE_ACTIONS ? (c = this.target.y, a = this._previousPosition, k.x = k.x + this.target.x - a.x, k.y = k.y +
                            c - a.y, d += k.x, e += k.y, a.x = d, a.y = e, this.target.setPosition(d, e)) : this.target.setPosition(k.x + d, k.y + e)
                    }
                },
                reverse: function() {
                    var e = this._config,
                        d = e[0].x,
                        k = e[0].y,
                        c = e[2].x,
                        a = e[2].y;
                    e = [cc.v2(e[1].x - c, e[1].y - a), cc.v2(d - c, k - a), cc.v2(-c, -a)];
                    e = new cc.BezierBy(this._duration, e);
                    this._cloneDecoration(e);
                    this._reverseEaseList(e);
                    return e
                }
            });
        cc.bezierBy = function(e, d) {
            return new cc.BezierBy(e, d)
        };
        cc.BezierTo = cc.Class({
            name: "cc.BezierTo",
            extends: cc.BezierBy,
            ctor: function(e, d) {
                this._toConfig = [];
                d && this.initWithDuration(e,
                    d)
            },
            initWithDuration: function(e, d) {
                return cc.ActionInterval.prototype.initWithDuration.call(this, e) ? (this._toConfig = d, !0) : !1
            },
            clone: function() {
                var e = new cc.BezierTo;
                this._cloneDecoration(e);
                e.initWithDuration(this._duration, this._toConfig);
                return e
            },
            startWithTarget: function(e) {
                cc.BezierBy.prototype.startWithTarget.call(this, e);
                e = this._startPosition;
                var d = this._toConfig,
                    k = this._config;
                k[0] = d[0].sub(e);
                k[1] = d[1].sub(e);
                k[2] = d[2].sub(e)
            }
        });
        cc.bezierTo = function(e, d) {
            return new cc.BezierTo(e, d)
        };
        cc.ScaleTo =
            cc.Class({
                name: "cc.ScaleTo",
                extends: cc.ActionInterval,
                ctor: function(e, d, k) {
                    this._startScaleY = this._startScaleX = this._scaleY = this._scaleX = 1;
                    this._deltaY = this._deltaX = this._endScaleY = this._endScaleX = 0;
                    void 0 !== d && cc.ScaleTo.prototype.initWithDuration.call(this, e, d, k)
                },
                initWithDuration: function(e, d, k) {
                    return cc.ActionInterval.prototype.initWithDuration.call(this, e) ? (this._endScaleX = d, this._endScaleY = null != k ? k : d, !0) : !1
                },
                clone: function() {
                    var e = new cc.ScaleTo;
                    this._cloneDecoration(e);
                    e.initWithDuration(this._duration,
                        this._endScaleX, this._endScaleY);
                    return e
                },
                startWithTarget: function(e) {
                    cc.ActionInterval.prototype.startWithTarget.call(this, e);
                    this._startScaleX = e.scaleX;
                    this._startScaleY = e.scaleY;
                    this._deltaX = this._endScaleX - this._startScaleX;
                    this._deltaY = this._endScaleY - this._startScaleY
                },
                update: function(e) {
                    e = this._computeEaseTime(e);
                    this.target && (this.target.scaleX = this._startScaleX + this._deltaX * e, this.target.scaleY = this._startScaleY + this._deltaY * e)
                }
            });
        cc.scaleTo = function(e, d, k) {
            return new cc.ScaleTo(e, d, k)
        };
        cc.ScaleBy = cc.Class({
            name: "cc.ScaleBy",
            extends: cc.ScaleTo,
            startWithTarget: function(e) {
                cc.ScaleTo.prototype.startWithTarget.call(this, e);
                this._deltaX = this._startScaleX * this._endScaleX - this._startScaleX;
                this._deltaY = this._startScaleY * this._endScaleY - this._startScaleY
            },
            reverse: function() {
                var e = new cc.ScaleBy(this._duration, 1 / this._endScaleX, 1 / this._endScaleY);
                this._cloneDecoration(e);
                this._reverseEaseList(e);
                return e
            },
            clone: function() {
                var e = new cc.ScaleBy;
                this._cloneDecoration(e);
                e.initWithDuration(this._duration,
                    this._endScaleX, this._endScaleY);
                return e
            }
        });
        cc.scaleBy = function(e, d, k) {
            return new cc.ScaleBy(e, d, k)
        };
        cc.Blink = cc.Class({
            name: "cc.Blink",
            extends: cc.ActionInterval,
            ctor: function(e, d) {
                this._times = 0;
                this._originalState = !1;
                void 0 !== d && this.initWithDuration(e, d)
            },
            initWithDuration: function(e, d) {
                return cc.ActionInterval.prototype.initWithDuration.call(this, e) ? (this._times = d, !0) : !1
            },
            clone: function() {
                var e = new cc.Blink;
                this._cloneDecoration(e);
                e.initWithDuration(this._duration, this._times);
                return e
            },
            update: function(e) {
                e =
                    this._computeEaseTime(e);
                if (this.target && !this.isDone()) {
                    var d = 1 / this._times;
                    this.target.opacity = e % d > d / 2 ? 255 : 0
                }
            },
            startWithTarget: function(e) {
                cc.ActionInterval.prototype.startWithTarget.call(this, e);
                this._originalState = e.opacity
            },
            stop: function() {
                this.target.opacity = this._originalState;
                cc.ActionInterval.prototype.stop.call(this)
            },
            reverse: function() {
                var e = new cc.Blink(this._duration, this._times);
                this._cloneDecoration(e);
                this._reverseEaseList(e);
                return e
            }
        });
        cc.blink = function(e, d) {
            return new cc.Blink(e,
                d)
        };
        cc.FadeTo = cc.Class({
            name: "cc.FadeTo",
            extends: cc.ActionInterval,
            ctor: function(e, d) {
                this._fromOpacity = this._toOpacity = 0;
                void 0 !== d && cc.FadeTo.prototype.initWithDuration.call(this, e, d)
            },
            initWithDuration: function(e, d) {
                return cc.ActionInterval.prototype.initWithDuration.call(this, e) ? (this._toOpacity = d, !0) : !1
            },
            clone: function() {
                var e = new cc.FadeTo;
                this._cloneDecoration(e);
                e.initWithDuration(this._duration, this._toOpacity);
                return e
            },
            update: function(e) {
                e = this._computeEaseTime(e);
                var d = void 0 !== this._fromOpacity ?
                    this._fromOpacity : 255;
                this.target.opacity = d + (this._toOpacity - d) * e
            },
            startWithTarget: function(e) {
                cc.ActionInterval.prototype.startWithTarget.call(this, e);
                this._fromOpacity = e.opacity
            }
        });
        cc.fadeTo = function(e, d) {
            return new cc.FadeTo(e, d)
        };
        cc.FadeIn = cc.Class({
            name: "cc.FadeIn",
            extends: cc.FadeTo,
            ctor: function(e) {
                null == e && (e = 0);
                this._reverseAction = null;
                this.initWithDuration(e, 255)
            },
            reverse: function() {
                var e = new cc.FadeOut;
                e.initWithDuration(this._duration, 0);
                this._cloneDecoration(e);
                this._reverseEaseList(e);
                return e
            },
            clone: function() {
                var e = new cc.FadeIn;
                this._cloneDecoration(e);
                e.initWithDuration(this._duration, this._toOpacity);
                return e
            },
            startWithTarget: function(e) {
                this._reverseAction && (this._toOpacity = this._reverseAction._fromOpacity);
                cc.FadeTo.prototype.startWithTarget.call(this, e)
            }
        });
        cc.fadeIn = function(e) {
            return new cc.FadeIn(e)
        };
        cc.FadeOut = cc.Class({
            name: "cc.FadeOut",
            extends: cc.FadeTo,
            ctor: function(e) {
                null == e && (e = 0);
                this._reverseAction = null;
                this.initWithDuration(e, 0)
            },
            reverse: function() {
                var e = new cc.FadeIn;
                e._reverseAction = this;
                e.initWithDuration(this._duration, 255);
                this._cloneDecoration(e);
                this._reverseEaseList(e);
                return e
            },
            clone: function() {
                var e = new cc.FadeOut;
                this._cloneDecoration(e);
                e.initWithDuration(this._duration, this._toOpacity);
                return e
            }
        });
        cc.fadeOut = function(e) {
            return new cc.FadeOut(e)
        };
        cc.TintTo = cc.Class({
            name: "cc.TintTo",
            extends: cc.ActionInterval,
            ctor: function(e, d, k, c) {
                this._to = cc.color(0, 0, 0);
                this._from = cc.color(0, 0, 0);
                d instanceof cc.Color && (c = d.b, k = d.g, d = d.r);
                void 0 !== c && this.initWithDuration(e,
                    d, k, c)
            },
            initWithDuration: function(e, d, k, c) {
                return cc.ActionInterval.prototype.initWithDuration.call(this, e) ? (this._to = cc.color(d, k, c), !0) : !1
            },
            clone: function() {
                var e = new cc.TintTo;
                this._cloneDecoration(e);
                var d = this._to;
                e.initWithDuration(this._duration, d.r, d.g, d.b);
                return e
            },
            startWithTarget: function(e) {
                cc.ActionInterval.prototype.startWithTarget.call(this, e);
                this._from = this.target.color
            },
            update: function(e) {
                e = this._computeEaseTime(e);
                var d = this._from,
                    k = this._to;
                d && (this.target.color = cc.color(d.r + (k.r -
                    d.r) * e, d.g + (k.g - d.g) * e, d.b + (k.b - d.b) * e))
            }
        });
        cc.tintTo = function(e, d, k, c) {
            return new cc.TintTo(e, d, k, c)
        };
        cc.TintBy = cc.Class({
            name: "cc.TintBy",
            extends: cc.ActionInterval,
            ctor: function(e, d, k, c) {
                this._fromB = this._fromG = this._fromR = this._deltaB = this._deltaG = this._deltaR = 0;
                void 0 !== c && this.initWithDuration(e, d, k, c)
            },
            initWithDuration: function(e, d, k, c) {
                return cc.ActionInterval.prototype.initWithDuration.call(this, e) ? (this._deltaR = d, this._deltaG = k, this._deltaB = c, !0) : !1
            },
            clone: function() {
                var e = new cc.TintBy;
                this._cloneDecoration(e);
                e.initWithDuration(this._duration, this._deltaR, this._deltaG, this._deltaB);
                return e
            },
            startWithTarget: function(e) {
                cc.ActionInterval.prototype.startWithTarget.call(this, e);
                e = e.color;
                this._fromR = e.r;
                this._fromG = e.g;
                this._fromB = e.b
            },
            update: function(e) {
                e = this._computeEaseTime(e);
                this.target.color = cc.color(this._fromR + this._deltaR * e, this._fromG + this._deltaG * e, this._fromB + this._deltaB * e)
            },
            reverse: function() {
                var e = new cc.TintBy(this._duration, -this._deltaR, -this._deltaG, -this._deltaB);
                this._cloneDecoration(e);
                this._reverseEaseList(e);
                return e
            }
        });
        cc.tintBy = function(e, d, k, c) {
            return new cc.TintBy(e, d, k, c)
        };
        cc.DelayTime = cc.Class({
            name: "cc.DelayTime",
            extends: cc.ActionInterval,
            update: function(e) {},
            reverse: function() {
                var e = new cc.DelayTime(this._duration);
                this._cloneDecoration(e);
                this._reverseEaseList(e);
                return e
            },
            clone: function() {
                var e = new cc.DelayTime;
                this._cloneDecoration(e);
                e.initWithDuration(this._duration);
                return e
            }
        });
        cc.delayTime = function(e) {
            return new cc.DelayTime(e)
        };
        cc.ReverseTime =
            cc.Class({
                name: "cc.ReverseTime",
                extends: cc.ActionInterval,
                ctor: function(e) {
                    this._other = null;
                    e && this.initWithAction(e)
                },
                initWithAction: function(e) {
                    return e ? e === this._other ? (cc.errorID(1029), !1) : cc.ActionInterval.prototype.initWithDuration.call(this, e._duration) ? (this._other = e, !0) : !1 : (cc.errorID(1028), !1)
                },
                clone: function() {
                    var e = new cc.ReverseTime;
                    this._cloneDecoration(e);
                    e.initWithAction(this._other.clone());
                    return e
                },
                startWithTarget: function(e) {
                    cc.ActionInterval.prototype.startWithTarget.call(this,
                        e);
                    this._other.startWithTarget(e)
                },
                update: function(e) {
                    e = this._computeEaseTime(e);
                    this._other && this._other.update(1 - e)
                },
                reverse: function() {
                    return this._other.clone()
                },
                stop: function() {
                    this._other.stop();
                    cc.Action.prototype.stop.call(this)
                }
            });
        cc.reverseTime = function(e) {
            return new cc.ReverseTime(e)
        };
        cc.TargetedAction = cc.Class({
            name: "cc.TargetedAction",
            extends: cc.ActionInterval,
            ctor: function(e, d) {
                this._forcedTarget = this._action = null;
                d && this.initWithTarget(e, d)
            },
            initWithTarget: function(e, d) {
                return this.initWithDuration(d._duration) ?
                    (this._forcedTarget = e, this._action = d, !0) : !1
            },
            clone: function() {
                var e = new cc.TargetedAction;
                this._cloneDecoration(e);
                e.initWithTarget(this._forcedTarget, this._action.clone());
                return e
            },
            startWithTarget: function(e) {
                cc.ActionInterval.prototype.startWithTarget.call(this, e);
                this._action.startWithTarget(this._forcedTarget)
            },
            stop: function() {
                this._action.stop()
            },
            update: function(e) {
                e = this._computeEaseTime(e);
                this._action.update(e)
            },
            getForcedTarget: function() {
                return this._forcedTarget
            },
            setForcedTarget: function(e) {
                this._forcedTarget !==
                    e && (this._forcedTarget = e)
            }
        });
        cc.targetedAction = function(e, d) {
            return new cc.TargetedAction(e, d)
        }
    }, {}],
    7: [function(g, q, m) {
        g("../core/platform/CCClass");
        var h = g("../core/platform/js"),
            e = function() {
                this.actions = [];
                this.target = null;
                this.actionIndex = 0;
                this.currentAction = null;
                this.lock = this.paused = !1
            };
        cc.ActionManager = function() {
            this._hashTargets = h.createMap(!0);
            this._arrayTargets = [];
            this._currentTarget = null;
            cc.director._scheduler && cc.director._scheduler.enableForTarget(this)
        };
        cc.ActionManager.prototype = {
            constructor: cc.ActionManager,
            _elementPool: [],
            _searchElementByTarget: function(d, k) {
                for (var c = 0; c < d.length; c++)
                    if (k === d[c].target) return d[c];
                return null
            },
            _getElement: function(d, k) {
                var c = this._elementPool.pop();
                c || (c = new e);
                c.target = d;
                c.paused = !!k;
                return c
            },
            _putElement: function(d) {
                d.actions.length = 0;
                d.actionIndex = 0;
                d.currentAction = null;
                d.paused = !1;
                d.target = null;
                d.lock = !1;
                this._elementPool.push(d)
            },
            addAction: function(d, k, c) {
                if (d && k) {
                    var a = this._hashTargets[k._id];
                    a ? a.actions || (a.actions = []) : (a = this._getElement(k,
                        c), this._hashTargets[k._id] = a, this._arrayTargets.push(a));
                    a.actions.push(d);
                    d.startWithTarget(k)
                } else cc.errorID(1E3)
            },
            removeAllActions: function() {
                for (var d = this._arrayTargets, k = 0; k < d.length; k++) {
                    var c = d[k];
                    c && this._putElement(c)
                }
                this._arrayTargets.length = 0;
                this._hashTargets = h.createMap(!0)
            },
            removeAllActionsFromTarget: function(d, k) {
                null != d && (d = this._hashTargets[d._id]) && (d.actions.length = 0, this._deleteHashElement(d))
            },
            removeAction: function(d) {
                if (d) {
                    var k = d.getOriginalTarget();
                    if (k = this._hashTargets[k._id])
                        for (var c =
                                0; c < k.actions.length; c++)
                            if (k.actions[c] === d) {
                                k.actions.splice(c, 1);
                                k.actionIndex >= c && k.actionIndex--;
                                break
                            }
                }
            },
            _removeActionByTag: function(d, k, c) {
                for (var a = 0, b = k.actions.length; a < b; ++a) {
                    var l = k.actions[a];
                    if (l && l.getTag() === d && (!c || l.getOriginalTarget() === c)) {
                        this._removeActionAtIndex(a, k);
                        break
                    }
                }
            },
            _removeAllActionsByTag: function(d, k, c) {
                for (var a = k.actions.length - 1; 0 <= a; --a) {
                    var b = k.actions[a];
                    !b || b.getTag() !== d || c && b.getOriginalTarget() !== c || this._removeActionAtIndex(a, k)
                }
            },
            removeActionByTag: function(d,
                k) {
                d === cc.Action.TAG_INVALID && cc.logID(1002);
                var c = this._hashTargets;
                if (k)(c = c[k._id]) && this._removeActionByTag(d, c, k);
                else
                    for (var a in c) this._removeActionByTag(d, c[a])
            },
            removeAllActionsByTag: function(d, k) {
                d === cc.Action.TAG_INVALID && cc.logID(1002);
                var c = this._hashTargets;
                if (k)(c = c[k._id]) && this._removeAllActionsByTag(d, c, k);
                else
                    for (var a in c) this._removeAllActionsByTag(d, c[a])
            },
            getActionByTag: function(d, k) {
                d === cc.Action.TAG_INVALID && cc.logID(1004);
                if (k = this._hashTargets[k._id]) {
                    if (null != k.actions)
                        for (var c =
                                0; c < k.actions.length; ++c) {
                            var a = k.actions[c];
                            if (a && a.getTag() === d) return a
                        }
                    cc.logID(1005, d)
                }
                return null
            },
            getNumberOfRunningActionsInTarget: function(d) {
                return (d = this._hashTargets[d._id]) ? d.actions ? d.actions.length : 0 : 0
            },
            pauseTarget: function(d) {
                (d = this._hashTargets[d._id]) && (d.paused = !0)
            },
            resumeTarget: function(d) {
                (d = this._hashTargets[d._id]) && (d.paused = !1)
            },
            pauseAllRunningActions: function() {
                for (var d = [], k = this._arrayTargets, c = 0; c < k.length; c++) {
                    var a = k[c];
                    a && !a.paused && (a.paused = !0, d.push(a.target))
                }
                return d
            },
            resumeTargets: function(d) {
                if (d)
                    for (var k = 0; k < d.length; k++) d[k] && this.resumeTarget(d[k])
            },
            pauseTargets: function(d) {
                if (d)
                    for (var k = 0; k < d.length; k++) d[k] && this.pauseTarget(d[k])
            },
            purgeSharedManager: function() {
                cc.director.getScheduler().unscheduleUpdate(this)
            },
            _removeActionAtIndex: function(d, k) {
                k.actions.splice(d, 1);
                k.actionIndex >= d && k.actionIndex--;
                0 === k.actions.length && this._deleteHashElement(k)
            },
            _deleteHashElement: function(d) {
                var k = !1;
                if (d && !d.lock && this._hashTargets[d.target._id]) {
                    delete this._hashTargets[d.target._id];
                    k = this._arrayTargets;
                    for (var c = 0, a = k.length; c < a; c++)
                        if (k[c] === d) {
                            k.splice(c, 1);
                            break
                        }
                    this._putElement(d);
                    k = !0
                }
                return k
            },
            update: function(d) {
                for (var k = this._arrayTargets, c, a = 0; a < k.length; a++) {
                    c = this._currentTarget = k[a];
                    if (!c.paused && c.actions) {
                        c.lock = !0;
                        for (c.actionIndex = 0; c.actionIndex < c.actions.length; c.actionIndex++)
                            if (c.currentAction = c.actions[c.actionIndex], c.currentAction) {
                                c.currentAction.step(d * (c.currentAction._speedMethod ? c.currentAction._speed : 1));
                                if (c.currentAction && c.currentAction.isDone()) {
                                    c.currentAction.stop();
                                    var b = c.currentAction;
                                    c.currentAction = null;
                                    this.removeAction(b)
                                }
                                c.currentAction = null
                            }
                        c.lock = !1
                    }
                    0 === c.actions.length && this._deleteHashElement(c) && a--
                }
            }
        };
        !1
    }, {
        "../core/platform/CCClass": 227,
        "../core/platform/js": 248
    }],
    8: [function(g, q, m) {
        g("./CCActionManager");
        g("./CCAction");
        g("./CCActionInterval");
        g("./CCActionInstant");
        g("./CCActionEase");
        g("./CCActionCatmullRom");
        g("./tween")
    }, {
        "./CCAction": 2,
        "./CCActionCatmullRom": 3,
        "./CCActionEase": 4,
        "./CCActionInstant": 5,
        "./CCActionInterval": 6,
        "./CCActionManager": 7,
        "./tween": 9
    }],
    9: [function(g, q, m) {
        function h(a) {
            this._actions = [];
            this._finalAction = null;
            this._target = a;
            this._tag = cc.Action.TAG_INVALID
        }

        function e(a) {
            return function() {
                b.length = 0;
                for (var c = arguments.length, f = 0; f < c; f++) {
                    var d = b[f] = arguments[f];
                    d instanceof h && (b[f] = d._union())
                }
                return a.apply(this, b)
            }
        }
        var d = g("../animation/bezier"),
            k = 0,
            c = cc.Class({
                name: "cc.TweenAction",
                extends: cc.ActionInterval,
                ctor: function(a, b, c) {
                    this._opts = c = c || Object.create(null);
                    this._props = Object.create(null);
                    c.progress = c.progress ||
                        this.progress;
                    if (c.easing && "string" === typeof c.easing) {
                        var f = c.easing;
                        c.easing = cc.easing[f];
                        !c.easing && cc.warnID(1031, f)
                    }
                    c = this._opts.relative;
                    for (var d in b) {
                        f = b[d];
                        var l = void 0,
                            n = void 0;
                        void 0 !== f.value && (f.easing || f.progress) && ("string" === typeof f.easing ? (l = cc.easing[f.easing], !l && cc.warnID(1031, f.easing)) : l = f.easing, n = f.progress, f = f.value);
                        if ("number" === typeof f || f.lerp && (!c || f.add || f.mul) && f.clone) {
                            var u = Object.create(null);
                            u.value = f;
                            u.easing = l;
                            u.progress = n;
                            this._props[d] = u
                        } else cc.warn("Can not animate " +
                            d + " property, because it do not have [lerp, (add|mul), clone] function.")
                    }
                    this._originProps = b;
                    this.initWithDuration(a)
                },
                clone: function() {
                    var a = new c(this._duration, this._originProps, this._opts);
                    this._cloneDecoration(a);
                    return a
                },
                startWithTarget: function(a) {
                    cc.ActionInterval.prototype.startWithTarget.call(this, a);
                    var b = !!this._opts.relative,
                        c = this._props,
                        f;
                    for (f in c) {
                        var d = a[f],
                            l = c[f];
                        "number" === typeof d ? (l.start = d, l.current = d, l.end = b ? d + l.value : l.value) : (l.start = d.clone(), l.current = d.clone(), l.end =
                            b ? (d.add || d.mul).call(d, l.value) : l.value)
                    }
                },
                update: function(a) {
                    var b = this._opts,
                        c = a;
                    b.easing && (c = b.easing(a));
                    var f = this.target;
                    if (f) {
                        var d = this._props,
                            l = b.progress,
                            n;
                        for (n in d) {
                            var u = d[n],
                                p = u.easing ? u.easing(a) : c;
                            u = u.current = (u.progress || l)(u.start, u.end, u.current, p);
                            f[n] = u
                        }(b = b.onUpdate) && b(f, a)
                    }
                },
                progress: function(a, b, c, f) {
                    "number" === typeof a ? c = a + (b - a) * f : a.lerp(b, f, c);
                    return c
                }
            }),
            a = cc.Class({
                name: "cc.SetAction",
                extends: cc.ActionInstant,
                ctor: function(a) {
                    this._props = {};
                    void 0 !== a && this.init(a)
                },
                init: function(a) {
                    for (var b in a) this._props[b] = a[b];
                    return !0
                },
                update: function() {
                    var a = this._props,
                        b = this.target,
                        c;
                    for (c in a) b[c] = a[c]
                },
                clone: function() {
                    var b = new a;
                    b.init(this._props);
                    return b
                }
            });
        h.stopAll = function() {
            cc.director.getActionManager().removeAllActions()
        };
        h.stopAllByTag = function(a) {
            cc.director.getActionManager().removeAllActionsByTag(a)
        };
        h.stopAllByTarget = function(a) {
            cc.director.getActionManager().removeAllActionsFromTarget(a)
        };
        h.prototype.then = function(a) {
            a instanceof cc.Action ? this._actions.push(a.clone()) :
                this._actions.push(a._union());
            return this
        };
        h.prototype.target = function(a) {
            this._target = a;
            return this
        };
        h.prototype.start = function() {
            var a = this._target;
            if (!a) return cc.warn("Please set target to tween first"), this;
            if (!(a instanceof cc.Object) || a.isValid) return this._finalAction && cc.director.getActionManager().removeAction(this._finalAction), this._finalAction = this._union(), void 0 === a._id && (a._id = ++k), this._finalAction.setTag(this._tag), cc.director.getActionManager().addAction(this._finalAction, a, !1),
                this
        };
        h.prototype.stop = function() {
            this._finalAction && (cc.director.getActionManager().removeAction(this._finalAction), this._finalAction = null);
            return this
        };
        h.prototype.tag = function(a) {
            this._tag = a;
            return this
        };
        h.prototype.clone = function(a) {
            var b = this._union();
            return cc.tween(a).then(b.clone())
        };
        h.prototype.union = function() {
            var a = this._union();
            this._actions.length = 0;
            this._actions.push(a);
            return this
        };
        h.prototype._union = function() {
            var a = this._actions;
            return a = 1 === a.length ? a[0] : cc.sequence(a)
        };
        Object.assign(h.prototype, {
            bezierTo: function(a, b, c, f, l) {
                var n = b.x,
                    u = b.y,
                    p = c.x,
                    k = c.y;
                l = l || Object.create(null);
                l.progress = function(a, b, c, f) {
                    c.x = (0, d.bezier)(a.x, n, p, b.x, f);
                    c.y = (0, d.bezier)(a.y, u, k, b.y, f);
                    return c
                };
                return this.to(a, {
                    position: f
                }, l)
            },
            bezierBy: function(a, b, c, f, l) {
                var n = b.x,
                    u = b.y,
                    p = c.x,
                    k = c.y;
                l = l || Object.create(null);
                l.progress = function(a, b, c, f) {
                    var l = a.x;
                    a = a.y;
                    c.x = (0, d.bezier)(l, n + l, p + l, b.x, f);
                    c.y = (0, d.bezier)(a, u + a, k + a, b.y, f);
                    return c
                };
                return this.by(a, {
                    position: f
                }, l)
            },
            flipX: function() {
                var a = this;
                return this.call(function() {
                    a._target.scaleX *=
                        -1
                }, this)
            },
            flipY: function() {
                var a = this;
                return this.call(function() {
                    a._target.scaleY *= -1
                }, this)
            },
            blink: function(a, b, c) {
                var f = 1 / b;
                c = c || Object.create(null);
                c.progress = function(a, b, c, d) {
                    return 1 <= d ? a : d % f > f / 2 ? 255 : 0
                };
                return this.to(a, {
                    opacity: 1
                }, c)
            }
        });
        var b = [],
            l = {
                to: function(a, b, f) {
                    f = f || Object.create(null);
                    f.relative = !1;
                    return new c(a, b, f)
                },
                by: function(a, b, f) {
                    f = f || Object.create(null);
                    f.relative = !0;
                    return new c(a, b, f)
                },
                set: function(b) {
                    return new a(b)
                },
                delay: cc.delayTime,
                call: cc.callFunc,
                hide: cc.hide,
                show: cc.show,
                removeSelf: cc.removeSelf,
                sequence: e(cc.sequence),
                parallel: e(cc.spawn)
            },
            f = {
                repeat: cc.repeat,
                repeatForever: cc.repeatForever,
                reverseTime: cc.reverseTime
            },
            n = Object.keys(l);
        g = function() {
            var a = n[u];
            h.prototype[a] = function() {
                var b = l[a].apply(this, arguments);
                this._actions.push(b);
                return this
            }
        };
        for (var u = 0; u < n.length; u++) g();
        n = Object.keys(f);
        g = function() {
            var a = n[v];
            h.prototype[a] = function() {
                var b = this._actions,
                    c = arguments[arguments.length - 1],
                    d = arguments.length - 1;
                c instanceof cc.Tween ? c = c._union() : c instanceof
                cc.Action || (c = b[b.length - 1], --b.length, d += 1);
                c = [c];
                for (var l = 0; l < d; l++) c.push(arguments[l]);
                c = f[a].apply(this, c);
                b.push(c);
                return this
            }
        };
        for (var v = 0; v < n.length; v++) g();
        cc.tween = function(a) {
            return new h(a)
        };
        cc.Tween = h
    }, {
        "../animation/bezier": 15
    }],
    10: [function(g, q, m) {
        function h(a, b) {
            k.call(this);
            this.target = a;
            this.animation = b;
            this._anims = new d.array.MutableForwardIterator([])
        }

        function e(f, d) {
            var n = d.clip;
            d.duration = n.duration;
            d.speed = n.speed;
            d.wrapMode = n.wrapMode;
            d.frameRate = n.sample;
            (d.wrapMode & b.Loop) ===
            b.Loop ? d.repeatCount = Infinity : d.repeatCount = 1;
            var k = d.curves = n.createCurves(d, f);
            n = n.events;
            if (!0, n)
                for (var p, t = 0, e = n.length; t < e; t++) {
                    p || (p = new c, p.target = f, k.push(p));
                    var h = n[t],
                        g = h.frame / d.duration;
                    var w = l(p.ratios, g);
                    0 <= w ? w = p.events[w] : (w = new a, p.ratios.push(g), p.events.push(w));
                    w.add(h.func, h.params)
                }
        }
        var d = cc.js,
            k = g("./playable");
        m = g("./animation-curves");
        var c = m.EventAnimCurve,
            a = m.EventInfo,
            b = g("./types").WrapModeMask,
            l = g("../core/utils/binary-search").binarySearchEpsilon;
        d.extend(h, k);
        g = h.prototype;
        g.playState = function(a, b) {
            a.clip && (a.curveLoaded || e(this.target, a), a.animator = this, a.play(), "number" === typeof b && a.setTime(b), this.play())
        };
        g.stopStatesExcept = function(a) {
            var b = this._anims,
                c = b.array;
            for (b.i = 0; b.i < c.length; ++b.i) {
                var f = c[b.i];
                f !== a && this.stopState(f)
            }
        };
        g.addAnimation = function(a) {
            -1 === this._anims.array.indexOf(a) && this._anims.push(a);
            a._setEventTarget(this.animation)
        };
        g.removeAnimation = function(a) {
            var b = this._anims.array.indexOf(a);
            0 <= b ? (this._anims.fastRemoveAt(b), 0 === this._anims.array.length &&
                this.stop()) : cc.errorID(3907);
            a.animator = null
        };
        g.sample = function() {
            var a = this._anims,
                b = a.array;
            for (a.i = 0; a.i < b.length; ++a.i) b[a.i].sample()
        };
        g.stopState = function(a) {
            a && a.stop()
        };
        g.pauseState = function(a) {
            a && a.pause()
        };
        g.resumeState = function(a) {
            a && a.resume();
            this.isPaused && this.resume()
        };
        g.setStateTime = function(a, b) {
            if (void 0 !== b) a && (a.setTime(b), a.sample());
            else {
                b = a;
                a = this._anims.array;
                for (var c = 0; c < a.length; ++c) {
                    var f = a[c];
                    f.setTime(b);
                    f.sample()
                }
            }
        };
        g.onStop = function() {
            var a = this._anims,
                b = a.array;
            for (a.i = 0; a.i < b.length; ++a.i) b[a.i].stop()
        };
        g.onPause = function() {
            for (var a = this._anims.array, b = 0; b < a.length; ++b) {
                var c = a[b];
                c.pause();
                c.animator = null
            }
        };
        g.onResume = function() {
            for (var a = this._anims.array, b = 0; b < a.length; ++b) {
                var c = a[b];
                c.animator = this;
                c.resume()
            }
        };
        g._reloadClip = function(a) {
            e(this.target, a)
        };
        !1;
        !1;
        q.exports = h
    }, {
        "../core/utils/binary-search": 303,
        "./animation-curves": 12,
        "./playable": 19,
        "./types": 20
    }],
    11: [function(g, q, m) {
        m = g("./types").WrapMode;
        var h = g("./animation-curves"),
            e = h.DynamicAnimCurve,
            d = h.quickFindIndex,
            k = g("./motion-path-helper").sampleMotionPaths,
            c = g("../core/utils/binary-search").binarySearchEpsilon,
            a = cc.Class({
                name: "cc.AnimationClip",
                extends: cc.Asset,
                properties: {
                    _duration: {
                        default: 0,
                        type: cc.Float
                    },
                    duration: {
                        get: function() {
                            return this._duration
                        }
                    },
                    sample: {
                        default: 60
                    },
                    speed: {
                        default: 1
                    },
                    wrapMode: {
                        default: m.Normal
                    },
                    curveData: {
                        default: {},
                        visible: !1
                    },
                    events: {
                        default: [],
                        visible: !1
                    }
                },
                statics: {
                    createWithSpriteFrames: function(b, c) {
                        if (!Array.isArray(b)) return cc.errorID(3905), null;
                        var f =
                            new a;
                        f.sample = c || f.sample;
                        f._duration = b.length / f.sample;
                        c = [];
                        for (var d = 1 / f.sample, l = 0, k = b.length; l < k; l++) c[l] = {
                            frame: l * d,
                            value: b[l]
                        };
                        f.curveData = {
                            comps: {
                                "cc.Sprite": {
                                    spriteFrame: c
                                }
                            }
                        };
                        return f
                    }
                },
                onLoad: function() {
                    this._duration = Number.parseFloat(this.duration);
                    this.speed = Number.parseFloat(this.speed);
                    this.wrapMode = Number.parseInt(this.wrapMode);
                    this.frameRate = Number.parseFloat(this.sample)
                },
                createPropCurve: function(a, l, f) {
                    var b = [],
                        u = a instanceof cc.Node && "position" === l,
                        v = new e;
                    v.target = a;
                    v.prop = l;
                    l = 0;
                    for (var p = f.length; l < p; l++) {
                        var t = f[l];
                        v.ratios.push(t.frame / this.duration);
                        u && b.push(t.motionPath);
                        v.values.push(t.value);
                        if (t = t.curve) {
                            if ("string" === typeof t) {
                                v.types.push(t);
                                continue
                            }
                            if (Array.isArray(t)) {
                                t[0] === t[1] && t[2] === t[3] ? v.types.push(e.Linear) : v.types.push(e.Bezier(t));
                                continue
                            }
                        }
                        v.types.push(e.Linear)
                    }
                    u && k(b, v, this.duration, this.sample, a);
                    a = v.ratios;
                    b = !0;
                    u = 1;
                    for (l = a.length; u < l; u++)
                        if (f = a[u] - a[u - 1], 1 === u) var x = f;
                        else if (1E-6 < Math.abs(f - x)) {
                        b = !1;
                        break
                    }
                    v._findFrameIndex = b ? d : c;
                    x = v.values[0];
                    void 0 === x || null === x || v._lerp || ("number" === typeof x ? v._lerp = e.prototype._lerpNumber : x instanceof cc.Quat ? v._lerp = e.prototype._lerpQuat : x instanceof cc.Vec2 ? v._lerp = e.prototype._lerpVector2 : x instanceof cc.Vec3 ? v._lerp = e.prototype._lerpVector3 : x.lerp && (v._lerp = e.prototype._lerpObject));
                    return v
                },
                createTargetCurves: function(a, c, f) {
                    var b = c.props;
                    c = c.comps;
                    if (b)
                        for (var d in b) {
                            var l = this.createPropCurve(a, d, b[d]);
                            f.push(l)
                        }
                    if (c)
                        for (var k in c)
                            if (b = a.getComponent(k)) {
                                d = c[k];
                                for (var t in d) l = this.createPropCurve(b,
                                    t, d[t]), f.push(l)
                            }
                },
                createCurves: function(a, c) {
                    var b = this.curveData;
                    a = b.paths;
                    var d = [];
                    this.createTargetCurves(c, b, d);
                    for (var l in a)(b = cc.find(l, c)) && this.createTargetCurves(b, a[l], d);
                    return d
                }
            });
        cc.AnimationClip = q.exports = a
    }, {
        "../core/utils/binary-search": 303,
        "./animation-curves": 12,
        "./motion-path-helper": 18,
        "./types": 20
    }],
    12: [function(g, q, m) {
        function h(a, b) {
            if ("string" === typeof b) {
                var c = cc.easing[b];
                c ? a = c(a) : cc.errorID(3906, b)
            } else Array.isArray(b) && (a = e(b, a));
            return a
        }
        var e = g("./bezier").bezierByTime,
            d = g("../core/utils/binary-search").binarySearchEpsilon,
            k = g("./types").WrapModeMask,
            c = g("./types").WrappedInfo;
        g = cc.Class({
            name: "cc.AnimCurve",
            sample: function(a, b, c) {},
            onTimeChangedManually: void 0
        });
        m = cc.Class({
            name: "cc.DynamicAnimCurve",
            extends: g,
            ctor: function() {
                this._cachedIndex = 0
            },
            properties: {
                target: null,
                prop: "",
                values: [],
                ratios: [],
                types: []
            },
            _findFrameIndex: d,
            _lerp: void 0,
            _lerpNumber: function(a, b, c) {
                return a + (b - a) * c
            },
            _lerpObject: function(a, b, c) {
                return a.lerp(b, c)
            },
            _lerpQuat: function() {
                var a = cc.quat();
                return function(b, c, d) {
                    return b.lerp(c, d, a)
                }
            }(),
            _lerpVector2: function() {
                var a = cc.v2();
                return function(b, c, d) {
                    return b.lerp(c, d, a)
                }
            }(),
            _lerpVector3: function() {
                var a = cc.v3();
                return function(b, c, d) {
                    return b.lerp(c, d, a)
                }
            }(),
            sample: function(a, b, c) {
                a = this.values;
                c = this.ratios;
                var f = c.length;
                if (0 !== f) {
                    var d = !0,
                        l = this._cachedIndex;
                    if (0 > l && (l = ~l, 0 < l && l < c.length)) {
                        var n = c[l];
                        b > c[l - 1] && b < n && (d = !1)
                    }
                    d && (this._cachedIndex = this._findFrameIndex(c, b));
                    d = this._cachedIndex;
                    0 > d ? (d = ~d, 0 >= d ? b = a[0] : d >= f ? b = a[f - 1] : (f = a[d -
                        1], this._lerp ? (n = c[d - 1], l = this.types[d - 1], b = (b - n) / (c[d] - n), l && (b = h(b, l)), b = this._lerp(f, a[d], b)) : b = f)) : b = a[d];
                    this.target[this.prop] = b
                }
            }
        });
        m.Linear = null;
        m.Bezier = function(a) {
            return a
        };
        var a = function() {
            this.events = []
        };
        a.prototype.add = function(a, b) {
            this.events.push({
                func: a || "",
                params: b || []
            })
        };
        var b = cc.Class({
            name: "cc.EventAnimCurve",
            extends: g,
            properties: {
                target: null,
                ratios: [],
                events: [],
                _wrappedInfo: {
                    default: function() {
                        return new c
                    }
                },
                _lastWrappedInfo: null,
                _ignoreIndex: NaN
            },
            _wrapIterations: function(a) {
                0 ===
                    a - (0 | a) && --a;
                return 0 | a
            },
            sample: function(a, b, n) {
                a = this.ratios.length;
                b = n.getWrappedInfo(n.time, this._wrappedInfo);
                var f = b.direction,
                    l = d(this.ratios, b.ratio);
                0 > l && (l = ~l - 1, 0 > f && (l += 1));
                this._ignoreIndex !== l && (this._ignoreIndex = NaN);
                b.frameIndex = l;
                if (this._lastWrappedInfo) {
                    n = n.wrapMode;
                    var p = this._wrapIterations(b.iterations);
                    f = this._lastWrappedInfo;
                    var t = this._wrapIterations(f.iterations),
                        e = f.frameIndex;
                    f = f.direction;
                    var h = -1 !== t && p !== t;
                    if (e === l && h && 1 === a) this._fireEvent(0);
                    else if (e !== l || h) {
                        do {
                            if (e !==
                                l) {
                                -1 === f && 0 === e && 0 < l ? ((n & k.PingPong) === k.PingPong ? f *= -1 : e = a, t++) : 1 === f && e === a - 1 && l < a - 1 && ((n & k.PingPong) === k.PingPong ? f *= -1 : e = -1, t++);
                                if (e === l) break;
                                if (t > p) break
                            }
                            e += f;
                            cc.director.getAnimationManager().pushDelayEvent(this, "_fireEvent", [e])
                        } while (e !== l && -1 < e && e < a)
                    }
                    this._lastWrappedInfo.set(b)
                } else this._fireEvent(l), this._lastWrappedInfo = new c(b)
            },
            _fireEvent: function(a) {
                if (!(0 > a || a >= this.events.length || this._ignoreIndex === a) && (a = this.events[a].events, this.target.isValid))
                    for (var b = this.target._components,
                            c = 0; c < a.length; c++)
                        for (var d = a[c], l = d.func, k = 0; k < b.length; k++) {
                            var t = b[k],
                                e = t[l];
                            e && e.apply(t, d.params)
                        }
            },
            onTimeChangedManually: function(a, b) {
                this._lastWrappedInfo = null;
                this._ignoreIndex = NaN;
                b = b.getWrappedInfo(a, this._wrappedInfo);
                a = b.direction;
                b = d(this.ratios, b.ratio);
                0 > b && (b = ~b - 1, 0 > a && (b += 1), this._ignoreIndex = b)
            }
        });
        !1;
        q.exports = {
            AnimCurve: g,
            DynamicAnimCurve: m,
            EventAnimCurve: b,
            EventInfo: a,
            computeRatioByType: h,
            quickFindIndex: function(a, b) {
                var c = a.length - 1;
                if (0 === c) return 0;
                var f = a[0];
                if (b < f) return 0;
                var d = a[c];
                if (b > d) return ~a.length;
                a = (b - f) / (d - f) / (1 / c);
                b = 0 | a;
                return 1E-6 > a - b ? b : 1E-6 > b + 1 - a ? b + 1 : ~(b + 1)
            }
        }
    }, {
        "../core/utils/binary-search": 303,
        "./bezier": 15,
        "./types": 20
    }],
    13: [function(g, q, m) {
        var h = cc.js;
        g = cc.Class({
            ctor: function() {
                this._anims = new h.array.MutableForwardIterator([]);
                this._delayEvents = [];
                cc.director._scheduler && cc.director._scheduler.enableForTarget(this)
            },
            update: function(e) {
                var d = this._anims,
                    k = d.array;
                for (d.i = 0; d.i < k.length; ++d.i) {
                    var c = k[d.i];
                    c._isPlaying && !c._isPaused && c.update(e)
                }
                e =
                    this._delayEvents;
                for (d = 0; d < e.length; d++) k = e[d], k.target[k.func].apply(k.target, k.args);
                e.length = 0
            },
            destruct: function() {},
            addAnimation: function(e) {
                -1 === this._anims.array.indexOf(e) && this._anims.push(e)
            },
            removeAnimation: function(e) {
                e = this._anims.array.indexOf(e);
                0 <= e ? this._anims.fastRemoveAt(e) : cc.errorID(3907)
            },
            pushDelayEvent: function(e, d, k) {
                this._delayEvents.push({
                    target: e,
                    func: d,
                    args: k
                })
            }
        });
        cc.AnimationManager = q.exports = g
    }, {}],
    14: [function(g, q, m) {
        function h(b, f) {
            k.call(this);
            this._currentFramePlayed = !1;
            this._delayTime = this._delay = 0;
            this._wrappedInfo = new c;
            this._lastWrappedInfo = null;
            this._process = e;
            this._clip = b;
            this._name = f || b && b.name;
            this.animator = null;
            this.curves = [];
            this.delay = 0;
            this.speed = this.duration = this.repeatCount = 1;
            this.wrapMode = a.Normal;
            this.time = 0;
            this._target = null;
            this._lastframeEventOn = !1;
            this.emit = function() {
                for (var a = Array(arguments.length), b = 0, c = a.length; b < c; b++) a[b] = arguments[b];
                cc.director.getAnimationManager().pushDelayEvent(this, "_emit", a)
            }
        }

        function e() {
            var a = this.sample();
            if (this._lastframeEventOn) {
                var b = this._lastWrappedInfo ? this._lastWrappedInfo : this._lastWrappedInfo = new c(a);
                1 < this.repeatCount && (0 | a.iterations) > (0 | b.iterations) && this.emit("lastframe", this);
                b.set(a)
            }
            a.stopped && (this.stop(), this.emit("finished", this))
        }

        function d() {
            var a = this.time,
                b = this.duration;
            a > b ? (a %= b, 0 === a && (a = b)) : 0 > a && (a %= b, 0 !== a && (a += b));
            b = a / b;
            for (var c = this.curves, d = 0, k = c.length; d < k; d++) c[d].sample(a, b, this);
            this._lastframeEventOn && (void 0 === this._lastIterations && (this._lastIterations = b),
                (0 < this.time && this._lastIterations > b || 0 > this.time && this._lastIterations < b) && this.emit("lastframe", this), this._lastIterations = b)
        }
        m = cc.js;
        var k = g("./playable");
        g = g("./types");
        var c = g.WrappedInfo,
            a = g.WrapMode,
            b = g.WrapModeMask;
        m.extend(h, k);
        g = h.prototype;
        g._emit = function(a, b) {
            this._target && this._target.isValid && this._target.emit(a, a, b)
        };
        g.on = function(a, b, c) {
            return this._target && this._target.isValid ? ("lastframe" === a && (this._lastframeEventOn = !0), this._target.on(a, b, c)) : null
        };
        g.once = function(a, b, c) {
            if (this._target &&
                this._target.isValid) {
                "lastframe" === a && (this._lastframeEventOn = !0);
                var f = this;
                return this._target.once(a, function(a) {
                    b.call(c, a);
                    f._lastframeEventOn = !1
                })
            }
            return null
        };
        g.off = function(a, b, c) {
            this._target && this._target.isValid && ("lastframe" === a && (this._target.hasEventListener(a) || (this._lastframeEventOn = !1)), this._target.off(a, b, c))
        };
        g._setEventTarget = function(a) {
            this._target = a
        };
        g.onPlay = function() {
            this.setTime(0);
            this._delayTime = this._delay;
            cc.director.getAnimationManager().addAnimation(this);
            this.animator &&
                this.animator.addAnimation(this);
            this.emit("play", this)
        };
        g.onStop = function() {
            this.isPaused || cc.director.getAnimationManager().removeAnimation(this);
            this.animator && this.animator.removeAnimation(this);
            this.emit("stop", this)
        };
        g.onResume = function() {
            cc.director.getAnimationManager().addAnimation(this);
            this.emit("resume", this)
        };
        g.onPause = function() {
            cc.director.getAnimationManager().removeAnimation(this);
            this.emit("pause", this)
        };
        g.setTime = function(a) {
            this._currentFramePlayed = !1;
            this.time = a || 0;
            for (var b =
                    this.curves, c = 0, d = b.length; c < d; c++) {
                var l = b[c];
                l.onTimeChangedManually && l.onTimeChangedManually(a, this)
            }
        };
        g.update = function(a) {
            if (0 < this._delayTime && (this._delayTime -= a, 0 < this._delayTime)) return;
            this._currentFramePlayed ? this.time += a * this.speed : this._currentFramePlayed = !0;
            this._process()
        };
        g._needRevers = function(a) {
            var c = this.wrapMode,
                d = !1;
            (c & b.PingPong) === b.PingPong && (0 === a - (0 | a) && 0 < a && --a, 1 & a && (d = !d));
            (c & b.Reverse) === b.Reverse && (d = !d);
            return d
        };
        g.getWrappedInfo = function(a, f) {
            f = f || new c;
            var d = !1,
                l =
                this.duration,
                k = this.repeatCount,
                p = 0 < a ? a / l : -a / l;
            p >= k && (p = k, d = !0, k -= 0 | k, 0 === k && (k = 1), a = k * l * (0 < a ? 1 : -1));
            a > l ? (a %= l, a = 0 === a ? l : a) : 0 > a && (a %= l, 0 !== a && (a += l));
            k = !1;
            var t = this._wrapMode & b.ShouldWrap;
            t && (k = this._needRevers(p));
            var e = k ? -1 : 1;
            0 > this.speed && (e *= -1);
            t && k && (a = l - a);
            f.ratio = a / l;
            f.time = a;
            f.direction = e;
            f.stopped = d;
            f.iterations = p;
            return f
        };
        g.sample = function() {
            for (var a = this.getWrappedInfo(this.time, this._wrappedInfo), b = this.curves, c = 0, d = b.length; c < d; c++) b[c].sample(a.time, a.ratio, this);
            return a
        };
        m.get(g,
            "clip",
            function() {
                return this._clip
            });
        m.get(g, "name", function() {
            return this._name
        });
        m.obsolete(g, "AnimationState.length", "duration");
        m.getset(g, "curveLoaded", function() {
            return 0 < this.curves.length
        }, function() {
            this.curves.length = 0
        });
        m.getset(g, "wrapMode", function() {
            return this._wrapMode
        }, function(a) {
            this._wrapMode = a;
            !1;
            this.time = 0;
            a & b.Loop ? this.repeatCount = Infinity : this.repeatCount = 1
        });
        m.getset(g, "repeatCount", function() {
            return this._repeatCount
        }, function(a) {
            this._repeatCount = a;
            var c = this._wrapMode &
                b.ShouldWrap,
                l = (this.wrapMode & b.Reverse) === b.Reverse;
            this._process = Infinity !== a || c || l ? e : d
        });
        m.getset(g, "delay", function() {
            return this._delay
        }, function(a) {
            this._delayTime = this._delay = a
        });
        cc.AnimationState = q.exports = h
    }, {
        "./playable": 19,
        "./types": 20
    }],
    15: [function(g, q, m) {
        function h(a) {
            return 0 > a ? -Math.pow(-a, 1 / 3) : Math.pow(a, 1 / 3)
        }
        var e = Math.cos,
            d = Math.acos,
            k = Math.max,
            c = 2 * Math.PI,
            a = Math.sqrt;
        !1;
        q.exports = {
            bezier: function(a, c, f, d, u) {
                var b = 1 - u;
                return b * (b * (a + (3 * c - a) * u) + 3 * f * u * u) + d * u * u * u
            },
            bezierByTime: function(b,
                l) {
                var f = l - 0;
                var n = l - b[0];
                var u = 3 * f,
                    v = 3 * n,
                    p = 3 * (l - b[2]),
                    t = 1 / (-f + v - p + (l - 1));
                l = 1 / 3;
                p = (u - 6 * n + p) * t;
                n = p * l;
                var x = (-u + v) * t;
                u = (3 * x - p * p) * l;
                v = u * l;
                f = (2 * p * p * p - 9 * p * x + 27 * f * t) / 27;
                t = f / 2;
                v = t * t + v * v * v;
                0 > v ? (t = -u * l, t = a(t * t * t), f = -f / (2 * t), u = d(-1 > f ? -1 : 1 < f ? 1 : f), v = 2 * h(t), f = v * e(u * l) - n, t = v * e((u + c) * l) - n, n = v * e((u + 2 * c) * l) - n, n = 0 <= f && 1 >= f ? 0 <= t && 1 >= t ? 0 <= n && 1 >= n ? k(f, t, n) : k(f, t) : 0 <= n && 1 >= n ? k(f, n) : f : 0 <= t && 1 >= t ? 0 <= n && 1 >= n ? k(t, n) : t : n) : 0 === v ? (l = 0 > t ? h(-t) : -h(t), f = 2 * l - n, t = -l - n, n = 0 <= f && 1 >= f ? 0 <= t && 1 >= t ? k(f, t) : f : t) : (f = a(v), l = h(-t + f), f = h(t + f),
                    n = l - f - n);
                l = b[1];
                return ((1 - n) * (l + (b[3] - l) * n) * 3 + n * n) * n
            }
        }
    }, {}],
    16: [function(g, q, m) {
        function h(d, k) {
            return function(c) {
                return .5 > c ? k(2 * c) / 2 : d(2 * c - 1) / 2 + .5
            }
        }
        var e = {
            constant: function() {
                return 0
            },
            linear: function(d) {
                return d
            },
            quadIn: function(d) {
                return d * d
            },
            quadOut: function(d) {
                return d * (2 - d)
            },
            quadInOut: function(d) {
                return 1 > (d *= 2) ? .5 * d * d : -.5 * (--d * (d - 2) - 1)
            },
            cubicIn: function(d) {
                return d * d * d
            },
            cubicOut: function(d) {
                return --d * d * d + 1
            },
            cubicInOut: function(d) {
                return 1 > (d *= 2) ? .5 * d * d * d : .5 * ((d -= 2) * d * d + 2)
            },
            quartIn: function(d) {
                return d *
                    d * d * d
            },
            quartOut: function(d) {
                return 1 - --d * d * d * d
            },
            quartInOut: function(d) {
                return 1 > (d *= 2) ? .5 * d * d * d * d : -.5 * ((d -= 2) * d * d * d - 2)
            },
            quintIn: function(d) {
                return d * d * d * d * d
            },
            quintOut: function(d) {
                return --d * d * d * d * d + 1
            },
            quintInOut: function(d) {
                return 1 > (d *= 2) ? .5 * d * d * d * d * d : .5 * ((d -= 2) * d * d * d * d + 2)
            },
            sineIn: function(d) {
                return 1 - Math.cos(d * Math.PI / 2)
            },
            sineOut: function(d) {
                return Math.sin(d * Math.PI / 2)
            },
            sineInOut: function(d) {
                return .5 * (1 - Math.cos(Math.PI * d))
            },
            expoIn: function(d) {
                return 0 === d ? 0 : Math.pow(1024, d - 1)
            },
            expoOut: function(d) {
                return 1 ===
                    d ? 1 : 1 - Math.pow(2, -10 * d)
            },
            expoInOut: function(d) {
                return 0 === d ? 0 : 1 === d ? 1 : 1 > (d *= 2) ? .5 * Math.pow(1024, d - 1) : .5 * (2 - Math.pow(2, -10 * (d - 1)))
            },
            circIn: function(d) {
                return 1 - Math.sqrt(1 - d * d)
            },
            circOut: function(d) {
                return Math.sqrt(1 - --d * d)
            },
            circInOut: function(d) {
                return 1 > (d *= 2) ? -.5 * (Math.sqrt(1 - d * d) - 1) : .5 * (Math.sqrt(1 - (d -= 2) * d) + 1)
            },
            elasticIn: function(d) {
                var k = .1;
                if (0 === d) return 0;
                if (1 === d) return 1;
                if (!k || 1 > k) {
                    k = 1;
                    var c = .1
                } else c = .4 * Math.asin(1 / k) / (2 * Math.PI);
                return -k * Math.pow(2, 10 * --d) * Math.sin(2 * (d - c) * Math.PI / .4)
            },
            elasticOut: function(d) {
                var k = .1;
                if (0 === d) return 0;
                if (1 === d) return 1;
                if (!k || 1 > k) {
                    k = 1;
                    var c = .1
                } else c = .4 * Math.asin(1 / k) / (2 * Math.PI);
                return k * Math.pow(2, -10 * d) * Math.sin(2 * (d - c) * Math.PI / .4) + 1
            },
            elasticInOut: function(d) {
                var k = .1;
                if (0 === d) return 0;
                if (1 === d) return 1;
                if (!k || 1 > k) {
                    k = 1;
                    var c = .1
                } else c = .4 * Math.asin(1 / k) / (2 * Math.PI);
                return 1 > (d *= 2) ? k * Math.pow(2, 10 * --d) * Math.sin(2 * (d - c) * Math.PI / .4) * -.5 : k * Math.pow(2, -10 * --d) * Math.sin(2 * (d - c) * Math.PI / .4) * .5 + 1
            },
            backIn: function(d) {
                return d * d * (2.70158 * d - 1.70158)
            },
            backOut: function(d) {
                return --d *
                    d * (2.70158 * d + 1.70158) + 1
            },
            backInOut: function(d) {
                return 1 > (d *= 2) ? d * d * (3.5949095 * d - 2.5949095) * .5 : .5 * ((d -= 2) * d * (3.5949095 * d + 2.5949095) + 2)
            },
            bounceIn: function(d) {
                return 1 - e.bounceOut(1 - d)
            },
            bounceOut: function(d) {
                return d < 1 / 2.75 ? 7.5625 * d * d : d < 2 / 2.75 ? 7.5625 * (d -= 1.5 / 2.75) * d + .75 : d < 2.5 / 2.75 ? 7.5625 * (d -= 2.25 / 2.75) * d + .9375 : 7.5625 * (d -= 2.625 / 2.75) * d + .984375
            },
            bounceInOut: function(d) {
                return .5 > d ? .5 * e.bounceIn(2 * d) : .5 * e.bounceOut(2 * d - 1) + .5
            },
            smooth: function(d) {
                return 0 >= d ? 0 : 1 <= d ? 1 : d * d * (3 - 2 * d)
            },
            fade: function(d) {
                return 0 >=
                    d ? 0 : 1 <= d ? 1 : d * d * d * (d * (6 * d - 15) + 10)
            }
        };
        e.quadOutIn = h(e.quadIn, e.quadOut);
        e.cubicOutIn = h(e.cubicIn, e.cubicOut);
        e.quartOutIn = h(e.quartIn, e.quartOut);
        e.quintOutIn = h(e.quintIn, e.quintOut);
        e.sineOutIn = h(e.sineIn, e.sineOut);
        e.expoOutIn = h(e.expoIn, e.expoOut);
        e.circOutIn = h(e.circIn, e.circOut);
        e.backOutIn = h(e.backIn, e.backOut);
        e.bounceIn = function(d) {
            return 1 - e.bounceOut(1 - d)
        };
        e.bounceInOut = function(d) {
            return .5 > d ? .5 * e.bounceIn(2 * d) : .5 * e.bounceOut(2 * d - 1) + .5
        };
        e.bounceOutIn = h(e.bounceIn, e.bounceOut);
        cc.easing = q.exports =
            e
    }, {}],
    17: [function(g, q, m) {
        g("./bezier");
        g("./easing");
        g("./types");
        g("./motion-path-helper");
        g("./animation-curves");
        g("./animation-clip");
        g("./animation-manager");
        g("./animation-state");
        g("./animation-animator")
    }, {
        "./animation-animator": 10,
        "./animation-clip": 11,
        "./animation-curves": 12,
        "./animation-manager": 13,
        "./animation-state": 14,
        "./bezier": 15,
        "./easing": 16,
        "./motion-path-helper": 18,
        "./types": 20
    }],
    18: [function(g, q, m) {
        function h(a) {
            this.points = a || [];
            this.beziers = [];
            this.ratios = [];
            this.progresses = [];
            this.length = 0;
            this.computeBeziers()
        }

        function e() {
            this.start = l();
            this.end = l();
            this.startCtrlPoint = l();
            this.endCtrlPoint = l()
        }

        function d(a) {
            if (!Array.isArray(a)) return !1;
            for (var b = 0, c = a.length; b < c; b++) {
                var f = a[b];
                if (!Array.isArray(f) || 6 !== f.length) return !1
            }
            return !0
        }
        var k = g("./animation-curves").DynamicAnimCurve,
            c = g("./animation-curves").computeRatioByType,
            a = g("./bezier").bezier,
            b = g("../core/utils/binary-search").binarySearchEpsilon,
            l = cc.v2;
        h.prototype.computeBeziers = function() {
            this.beziers.length =
                0;
            this.ratios.length = 0;
            this.length = this.progresses.length = 0;
            for (var a, b = 1; b < this.points.length; b++) {
                var c = this.points[b - 1],
                    d = this.points[b];
                a = new e;
                a.start = c.pos;
                a.startCtrlPoint = c.out;
                a.end = d.pos;
                a.endCtrlPoint = d["in"];
                this.beziers.push(a);
                this.length += a.getLength()
            }
            for (b = c = 0; b < this.beziers.length; b++) a = this.beziers[b], this.ratios[b] = a.getLength() / this.length, this.progresses[b] = c += this.ratios[b];
            return this.beziers
        };
        e.prototype.getPointAt = function(a) {
            a = this.getUtoTmapping(a);
            return this.getPoint(a)
        };
        e.prototype.getPoint = function(b) {
            var c = a(this.start.x, this.startCtrlPoint.x, this.endCtrlPoint.x, this.end.x, b);
            b = a(this.start.y, this.startCtrlPoint.y, this.endCtrlPoint.y, this.end.y, b);
            return new l(c, b)
        };
        e.prototype.getLength = function() {
            var a = this.getLengths();
            return a[a.length - 1]
        };
        e.prototype.getLengths = function(a) {
            a || (a = this.__arcLengthDivisions ? this.__arcLengthDivisions : 200);
            if (this.cacheArcLengths && this.cacheArcLengths.length === a + 1) return this.cacheArcLengths;
            var b = [],
                c = this.getPoint(0),
                f = l(),
                d,
                k = 0;
            b.push(0);
            for (d = 1; d <= a; d++) {
                var e = this.getPoint(d / a);
                f.x = c.x - e.x;
                f.y = c.y - e.y;
                k += f.mag();
                b.push(k);
                c = e
            }
            return this.cacheArcLengths = b
        };
        e.prototype.getUtoTmapping = function(a, b) {
            var c = this.getLengths(),
                f = c.length;
            b = b || a * c[f - 1];
            for (var d = 0, l = f - 1, n; d <= l;)
                if (a = Math.floor(d + (l - d) / 2), n = c[a] - b, 0 > n) d = a + 1;
                else if (0 < n) l = a - 1;
            else {
                l = a;
                break
            }
            a = l;
            if (c[a] === b) return a / (f - 1);
            d = c[a];
            return (a + (b - d) / (c[a + 1] - d)) / (f - 1)
        };
        !1;
        q.exports = {
            sampleMotionPaths: function(a, n, u, v, p) {
                function f(a) {
                    return a instanceof cc.Vec2 ? { in: a,
                        pos: a,
                        out: a
                    } : Array.isArray(a) && 6 === a.length ? { in: l(a[2], a[3]),
                        pos: l(a[0], a[1]),
                        out: l(a[4], a[5])
                    } : { in: cc.Vec2.ZERO,
                        pos: cc.Vec2.ZERO,
                        out: cc.Vec2.ZERO
                    }
                }

                function e(a, b, c) {
                    B.push(a);
                    y.push(b);
                    C.push(c)
                }
                var g = n.values = n.values.map(function(a) {
                    Array.isArray(a) && (a = 2 === a.length ? cc.v2(a[0], a[1]) : cc.v3(a[0], a[1], a[2]));
                    return a
                });
                if (0 !== a.length && 0 !== g.length) {
                    for (var E = !1, w = 0; w < a.length; w++) {
                        var A = a[w];
                        A && !d(A) && (cc.errorID(3904, p ? p.name : "", "position", w), A = null);
                        if (A && 0 < A.length) {
                            E = !0;
                            break
                        }
                    }
                    if (E && 1 !== g.length) {
                        p =
                            n.types;
                        E = n.ratios;
                        var B = n.values = [],
                            y = n.types = [],
                            C = n.ratios = [];
                        n = 0;
                        var F = k.Linear;
                        w = 0;
                        for (A = a.length; w < A - 1; w++) {
                            var m = a[w],
                                D = E[w],
                                I = E[w + 1] - D,
                                q = g[w],
                                L = g[w + 1];
                            F = p[w];
                            var R = [],
                                M = n / I,
                                S = 1 / (I * u * v);
                            if (m && 0 < m.length) {
                                var O = [];
                                O.push(f(q));
                                q = 0;
                                for (var Q = m.length; q < Q; q++) {
                                    var V = f(m[q]);
                                    O.push(V)
                                }
                                O.push(f(L));
                                L = new h(O);
                                L.computeBeziers();
                                for (m = L.progresses; 1E-6 < 1 - M;) O = M, O = c(O, F), 0 > O ? (q = L.beziers[0], Q = (0 - O) * q.getLength(), O = q.start.sub(q.endCtrlPoint).normalize(), O = q.start.add(O.mul(Q))) : 1 < O ? (q = L.beziers[L.beziers.length -
                                    1], Q = (O - 1) * q.getLength(), O = q.end.sub(q.startCtrlPoint).normalize(), O = q.end.add(O.mul(Q))) : (q = b(m, O), 0 > q && (q = ~q), O -= 0 < q ? m[q - 1] : 0, O /= L.ratios[q], O = L.beziers[q].getPointAt(O)), R.push(O), M += S
                            } else
                                for (; 1E-6 < 1 - M;) O = M, O = c(O, F), R.push(q.lerp(L, O)), M += S;
                            F = "constant" === F ? F : k.Linear;
                            q = 0;
                            for (Q = R.length; q < Q; q++) e(R[q], F, D + n + S * q * I);
                            n = 1E-6 < Math.abs(M - 1) ? (M - 1) * I : 0
                        }
                        E[E.length - 1] !== C[C.length - 1] && e(g[g.length - 1], F, E[E.length - 1])
                    }
                }
            },
            Curve: h,
            Bezier: e
        }
    }, {
        "../core/utils/binary-search": 303,
        "./animation-curves": 12,
        "./bezier": 15
    }],
    19: [function(g, q, m) {
        function h() {
            this._stepOnce = this._isPaused = this._isPlaying = !1
        }
        m = cc.js;
        var e = g("../core/CCDebug");
        g = h.prototype;
        m.get(g, "isPlaying", function() {
            return this._isPlaying
        }, !0);
        m.get(g, "isPaused", function() {
            return this._isPaused
        }, !0);
        m = function() {};
        g.onPlay = m;
        g.onPause = m;
        g.onResume = m;
        g.onStop = m;
        g.onError = m;
        g.play = function() {
            if (this._isPlaying)
                if (this._isPaused) this._isPaused = !1, this.onResume();
                else this.onError(e.getError(3912));
            else this._isPlaying = !0, this.onPlay()
        };
        g.stop = function() {
            this._isPlaying &&
                (this._isPlaying = !1, this.onStop(), this._isPaused = !1)
        };
        g.pause = function() {
            this._isPlaying && !this._isPaused && (this._isPaused = !0, this.onPause())
        };
        g.resume = function() {
            this._isPlaying && this._isPaused && (this._isPaused = !1, this.onResume())
        };
        g.step = function() {
            this.pause();
            this._stepOnce = !0;
            this._isPlaying || this.play()
        };
        q.exports = h
    }, {
        "../core/CCDebug": 58
    }],
    20: [function(g, q, m) {
        function h(e) {
            e ? this.set(e) : (this.time = this.ratio = 0, this.direction = 1, this.stopped = !0, this.iterations = 0, this.frameIndex = void 0)
        }
        g = {
            Loop: 2,
            ShouldWrap: 4,
            PingPong: 22,
            Reverse: 36
        };
        m = cc.Enum({
            Default: 0,
            Normal: 1,
            Reverse: g.Reverse,
            Loop: g.Loop,
            LoopReverse: g.Loop | g.Reverse,
            PingPong: g.PingPong,
            PingPongReverse: g.PingPong | g.Reverse
        });
        cc.WrapMode = m;
        h.prototype.set = function(e) {
            this.ratio = e.ratio;
            this.time = e.time;
            this.direction = e.direction;
            this.stopped = e.stopped;
            this.iterations = e.iterations;
            this.frameIndex = e.frameIndex
        };
        q.exports = {
            WrapModeMask: g,
            WrapMode: m,
            WrappedInfo: h
        }
    }, {}],
    21: [function(g, q, m) {
        var h = g("../core/event/event-target"),
            e = g("../core/platform/CCSys"),
            d = g("../core/assets/CCAudioClip").LoadMode,
            k = !1,
            c = [],
            a = function n(a) {
                h.call(this);
                this._shouldRecycleOnEnded = !1;
                this._src = a;
                this._element = null;
                this.id = 0;
                this._state = n.State.INITIALZING;
                var b = this;
                this._onended = function() {
                    b._state = n.State.STOPPED;
                    b.emit("ended")
                };
                this._onendedSecond = function() {
                    b._unbindEnded(b._onendedSecond);
                    b._bindEnded()
                }
            };
        cc.js.extend(a, h);
        a.State = {
            ERROR: -1,
            INITIALZING: 0,
            PLAYING: 1,
            PAUSED: 2,
            STOPPED: 3
        };
        (function(b) {
            b._bindEnded = function(a) {
                a = a || this._onended;
                if (!a._binded) {
                    a._binded = !0;
                    var b = this._element;
                    this._src && b instanceof HTMLAudioElement ? b.addEventListener("ended", a) : b.onended = a
                }
            };
            b._unbindEnded = function(a) {
                a = a || this._onended;
                if (a._binded) {
                    a._binded = !1;
                    var b = this._element;
                    b instanceof HTMLAudioElement ? b.removeEventListener("ended", a) : b && (b.onended = null)
                }
            };
            b._onLoaded = function() {
                this._createElement();
                this._state = a.State.INITIALZING;
                this.setVolume(1);
                this.setLoop(!1)
            };
            b._createElement = function() {
                var a = this._src._nativeAsset;
                a instanceof HTMLAudioElement ? (this._element ||
                    (this._element = document.createElement("audio")), this._element.src = a.src) : this._element = new l(a, this)
            };
            b.play = function() {
                var b = this;
                this._src && this._src._ensureLoaded(function() {
                    b._state = a.State.PLAYING;
                    b._bindEnded();
                    var c = b._element.play();
                    window.Promise && c instanceof Promise && c["catch"](function(a) {});
                    b._touchToPlay()
                })
            };
            b._touchToPlay = function() {
                this._src && this._src.loadMode === d.DOM_AUDIO && this._element.paused && c.push({
                    instance: this,
                    offset: 0,
                    audio: this._element
                });
                k || (k = !0, cc.game.canvas.addEventListener("ontouchend" in
                    window ? "touchend" : "mousedown",
                    function() {
                        for (var a; a = c.pop();) a.audio.play(a.offset)
                    }))
            };
            b.destroy = function() {
                this._element = null
            };
            b.pause = function() {
                if (this.getState() === a.State.PLAYING) {
                    var b = this;
                    this._src && this._src._ensureLoaded(function() {
                        b._unbindEnded();
                        b._element.pause();
                        b._state = a.State.PAUSED
                    })
                }
            };
            b.resume = function() {
                if (this.getState() === a.State.PAUSED) {
                    var b = this;
                    this._src && this._src._ensureLoaded(function() {
                        b._bindEnded();
                        b._element.play();
                        b._state = a.State.PLAYING
                    })
                }
            };
            b.stop = function() {
                var b =
                    this;
                this._src && this._src._ensureLoaded(function() {
                    b._element.pause();
                    for (var d = b._element.currentTime = 0; d < c.length; d++)
                        if (c[d].instance === b) {
                            c.splice(d, 1);
                            break
                        }
                    b._unbindEnded();
                    b.emit("stop");
                    b._state = a.State.STOPPED
                })
            };
            b.setLoop = function(a) {
                var b = this;
                this._src && this._src._ensureLoaded(function() {
                    b._element.loop = a
                })
            };
            b.getLoop = function() {
                return !!this._element && this._element.loop
            };
            b.setVolume = function(a) {
                var b = this;
                this._src && this._src._ensureLoaded(function() {
                    b._element.volume = a
                })
            };
            b.getVolume =
                function() {
                    return this._element ? this._element.volume : 1
                };
            b.setCurrentTime = function(a) {
                var b = this;
                this._src && this._src._ensureLoaded(function() {
                    b._unbindEnded();
                    b._bindEnded(b._onendedSecond);
                    b._element.currentTime = a
                })
            };
            b.getCurrentTime = function() {
                return this._element ? this._element.currentTime : 0
            };
            b.getDuration = function() {
                return this._src ? this._src.duration : 0
            };
            b.getState = function(a) {
                void 0 === a && (a = !0);
                a && this._forceUpdatingState();
                return this._state
            };
            b._forceUpdatingState = function() {
                var b = this._element;
                b && (a.State.PLAYING === this._state && b.paused ? this._state = a.State.STOPPED : a.State.STOPPED !== this._state || b.paused || (this._state = a.State.PLAYING))
            };
            Object.defineProperty(b, "src", {
                get: function() {
                    return this._src
                },
                set: function(b) {
                    this._unbindEnded();
                    if (b && b.isValid) {
                        if (b !== this._src)
                            if (this._src = b, b.loaded) this._onLoaded();
                            else {
                                var c = this;
                                b.once("load", function() {
                                    b === c._src && c._onLoaded()
                                })
                            }
                    } else this._src = null, this._element instanceof l ? this._element = null : this._element && (this._element.src = ""), this._state =
                        a.State.INITIALZING
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(b, "paused", {
                get: function() {
                    return !this._element || this._element.paused
                },
                enumerable: !0,
                configurable: !0
            })
        })(a.prototype);
        var b = cc.sys.browserType === cc.sys.BROWSER_TYPE_EDGE || cc.sys.browserType === cc.sys.BROWSER_TYPE_BAIDU || cc.sys.browserType === cc.sys.BROWSER_TYPE_UC ? .01 : 0;
        var l = function(a, b) {
            this._audio = b;
            this._context = e.__audioSupport.context;
            this._buffer = a;
            this._gainObj = this._context.createGain();
            this.volume = 1;
            this._gainObj.connect(this._context.destination);
            this._loop = !1;
            this._startTime = -1;
            this._currentSource = null;
            this.playedLength = 0;
            this._currentTimer = null;
            this._endCallback = function() {
                this.onended && this.onended(this)
            }.bind(this)
        };
        (function(a) {
            a.play = function(a) {
                this._currentSource && !this.paused && (this._currentSource.onended = null, this._currentSource.stop(0), this.playedLength = 0);
                var b = this._context.createBufferSource();
                b.buffer = this._buffer;
                b.connect(this._gainObj);
                b.loop = this._loop;
                this._startTime = this._context.currentTime;
                (a = a || this.playedLength) &&
                (this._startTime -= a);
                var d = this._buffer.duration,
                    l = a;
                this._loop ? b.start ? b.start(0, l) : b.notoGrainOn ? b.noteGrainOn(0, l) : b.noteOn(0, l) : (d -= a, b.start ? b.start(0, l, d) : b.noteGrainOn ? b.noteGrainOn(0, l, d) : b.noteOn(0, l, d));
                this._currentSource = b;
                b.onended = this._endCallback;
                if ((!b.context.state || "suspended" === b.context.state) && 0 === this._context.currentTime) {
                    var n = this;
                    clearTimeout(this._currentTimer);
                    this._currentTimer = setTimeout(function() {
                            0 === n._context.currentTime && c.push({
                                instance: n._audio,
                                offset: a,
                                audio: n
                            })
                        },
                        10)
                }
                l = cc.sys;
                l.os === l.OS_IOS && l.isBrowser && l.isMobile && ("suspended" === b.context.state && 0 !== this._context.currentTime || "interrupted" === b.context.state) && b.context.resume()
            };
            a.pause = function() {
                clearTimeout(this._currentTimer);
                if (!this.paused) {
                    this.playedLength = this._context.currentTime - this._startTime;
                    this.playedLength %= this._buffer.duration;
                    var a = this._currentSource;
                    a && (a.onended && (a.onended._binded = !1, a.onended = null), a.stop(0));
                    this._currentSource = null;
                    this._startTime = -1
                }
            };
            Object.defineProperty(a,
                "paused", {
                    get: function() {
                        return this._currentSource && this._currentSource.loop ? !1 : -1 === this._startTime ? !0 : this._context.currentTime - this._startTime > this._buffer.duration
                    },
                    enumerable: !0,
                    configurable: !0
                });
            Object.defineProperty(a, "loop", {
                get: function() {
                    return this._loop
                },
                set: function(a) {
                    this._currentSource && (this._currentSource.loop = a);
                    this._loop = a
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "volume", {
                get: function() {
                    return this._volume
                },
                set: function(a) {
                    this._volume = a;
                    if (this._gainObj.gain.setTargetAtTime) try {
                        this._gainObj.gain.setTargetAtTime(a,
                            this._context.currentTime, b)
                    } catch (v) {
                        this._gainObj.gain.setTargetAtTime(a, this._context.currentTime, .01)
                    } else this._gainObj.gain.value = a;
                    e.os === e.OS_IOS && !this.paused && this._currentSource && (this._currentSource.onended = null, this.pause(), this.play())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "currentTime", {
                get: function() {
                    if (this.paused) return this.playedLength;
                    this.playedLength = this._context.currentTime - this._startTime;
                    return this.playedLength %= this._buffer.duration
                },
                set: function(a) {
                    this.paused ?
                        this.playedLength = a : (this.pause(), this.playedLength = a, this.play())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "duration", {
                get: function() {
                    return this._buffer.duration
                },
                enumerable: !0,
                configurable: !0
            })
        })(l.prototype);
        q.exports = cc._Audio = a
    }, {
        "../core/assets/CCAudioClip": 95,
        "../core/event/event-target": 174,
        "../core/platform/CCSys": 236
    }],
    22: [function(g, q, m) {
        var h = g("./CCAudio"),
            e = g("../core/assets/CCAudioClip"),
            d = cc.js,
            k = 0,
            c = d.createMap(!0),
            a = {},
            b = [],
            l = function(f) {
                var d = ++k,
                    l = a[f];
                l || (l = a[f] = []);
                n._maxAudioInstance <= l.length && (f = l.shift(), c[f].stop());
                f = b.pop() || new h;
                var u = function() {
                    if (c[this.id]) {
                        delete c[this.id];
                        var a = l.indexOf(this.id);
                        cc.js.array.fastRemoveAt(l, a)
                    }
                    this._shouldRecycleOnEnded && (this._finishCallback = null, this.off("ended"), this.off("stop"), this.src = null, cc.sys.platform === cc.sys.ALIPAY_GAME ? this.destroy() : b.includes(this) || (b.length < n._maxPoolSize ? b.push(this) : this.destroy()), this._shouldRecycleOnEnded = !1)
                };
                f.on("ended", function() {
                    this._finishCallback && this._finishCallback();
                    this.getLoop() || u.call(this)
                }, f);
                f.on("stop", u, f);
                f.id = d;
                c[d] = f;
                l.push(d);
                return f
            },
            f = function(a) {
                void 0 === a ? a = 1 : "string" === typeof a && (a = Number.parseFloat(a));
                return a
            },
            n = {
                AudioState: h.State,
                _maxAudioInstance: 24,
                _maxPoolSize: 32,
                _id2audio: c,
                play: function(a, b, c) {
                    !1;
                    if (!(a instanceof e)) return cc.error("Wrong type of AudioClip.");
                    var d = l(a.nativeUrl);
                    d.src = a;
                    a._ensureLoaded();
                    d._shouldRecycleOnEnded = !0;
                    d.setLoop(b || !1);
                    c = f(c);
                    d.setVolume(c);
                    d.play();
                    return d.id
                },
                setLoop: function(a, b) {
                    (a = c[a]) && a.setLoop &&
                        a.setLoop(b)
                },
                isLoop: function(a) {
                    return (a = c[a]) && a.getLoop ? a.getLoop() : !1
                },
                setVolume: function(a, b) {
                    (a = c[a]) && a.setVolume(b)
                },
                getVolume: function(a) {
                    return (a = c[a]) ? a.getVolume() : 1
                },
                setCurrentTime: function(a, b) {
                    return (a = c[a]) ? (a.setCurrentTime(b), !0) : !1
                },
                getCurrentTime: function(a) {
                    return (a = c[a]) ? a.getCurrentTime() : 0
                },
                getDuration: function(a) {
                    return (a = c[a]) ? a.getDuration() : 0
                },
                getState: function(a) {
                    return (a = c[a]) ? a.getState() : this.AudioState.ERROR
                },
                isPlaying: function(a) {
                    return this.getState(a) === this.AudioState.PLAYING
                },
                setFinishCallback: function(a, b) {
                    if (a = c[a]) a._finishCallback = b
                },
                pause: function(a) {
                    return (a = c[a]) ? (a.pause(), !0) : !1
                },
                _pauseIDCache: [],
                pauseAll: function() {
                    for (var a in c) {
                        var b = c[a];
                        b.getState() === h.State.PLAYING && (this._pauseIDCache.push(a), b.pause())
                    }
                },
                resume: function(a) {
                    (a = c[a]) && a.resume()
                },
                resumeAll: function() {
                    for (var a = 0; a < this._pauseIDCache.length; ++a) {
                        var b = c[this._pauseIDCache[a]];
                        b && b.resume()
                    }
                    this._pauseIDCache.length = 0
                },
                stop: function(a) {
                    return (a = c[a]) ? (a.stop(), !0) : !1
                },
                stopAll: function() {
                    for (var a in c) {
                        var b =
                            c[a];
                        b && b.stop()
                    }
                },
                setMaxAudioInstance: function(a) {
                    !0;
                    cc.warn("Since v2.4.0, maxAudioInstance has become a read only property.\naudioEngine.setMaxAudioInstance() method will be removed in the future")
                },
                getMaxAudioInstance: function() {
                    return this._maxAudioInstance
                },
                uncache: function(b) {
                    if ("string" === typeof b) cc.warnID(8401, "cc.audioEngine", "cc.AudioClip", "AudioClip", "cc.AudioClip", "audio");
                    else {
                        if (!b) return;
                        b = b.nativeUrl
                    }
                    if (b = a[b])
                        for (; 0 < b.length;) {
                            var f = b.pop(),
                                d = c[f];
                            d && (d.stop(), delete c[f])
                        }
                },
                uncacheAll: function() {
                    this.stopAll();
                    var f, l;
                    for (l in c)(f = c[l]) && f.destroy();
                    for (; f = b.pop();) f.destroy();
                    c = d.createMap(!0);
                    a = {}
                },
                _breakCache: null,
                _break: function() {
                    this._breakCache = [];
                    for (var a in c) {
                        var b = c[a];
                        b.getState() === h.State.PLAYING && (this._breakCache.push(a), b.pause())
                    }
                },
                _restore: function() {
                    if (this._breakCache) {
                        for (; 0 < this._breakCache.length;) {
                            var a = this._breakCache.pop();
                            (a = c[a]) && a.resume && a.resume()
                        }
                        this._breakCache = null
                    }
                },
                _music: {
                    id: -1,
                    loop: !1,
                    volume: 1
                },
                _effect: {
                    volume: 1,
                    pauseCache: []
                },
                playMusic: function(a, b) {
                    var c = this._music;
                    this.stop(c.id);
                    c.id = this.play(a, b, c.volume);
                    c.loop = b;
                    return c.id
                },
                stopMusic: function() {
                    this.stop(this._music.id)
                },
                pauseMusic: function() {
                    this.pause(this._music.id);
                    return this._music.id
                },
                resumeMusic: function() {
                    this.resume(this._music.id);
                    return this._music.id
                },
                getMusicVolume: function() {
                    return this._music.volume
                },
                setMusicVolume: function(a) {
                    a = f(a);
                    var b = this._music;
                    b.volume = a;
                    this.setVolume(b.id, b.volume);
                    return b.volume
                },
                isMusicPlaying: function() {
                    return this.getState(this._music.id) === this.AudioState.PLAYING
                },
                playEffect: function(a, b) {
                    return this.play(a, b || !1, this._effect.volume)
                },
                setEffectsVolume: function(a) {
                    a = f(a);
                    var b = this._music.id;
                    this._effect.volume = a;
                    for (var d in c) {
                        var l = c[d];
                        l && l.id !== b && n.setVolume(d, a)
                    }
                },
                getEffectsVolume: function() {
                    return this._effect.volume
                },
                pauseEffect: function(a) {
                    return this.pause(a)
                },
                pauseAllEffects: function() {
                    var a = this._music.id,
                        b = this._effect;
                    b.pauseCache.length = 0;
                    for (var f in c) {
                        var d = c[f];
                        d && d.id !== a && d.getState() === this.AudioState.PLAYING && (b.pauseCache.push(f), d.pause())
                    }
                },
                resumeEffect: function(a) {
                    this.resume(a)
                },
                resumeAllEffects: function() {
                    for (var a = this._effect.pauseCache, b = 0; b < a.length; ++b) {
                        var f = c[a[b]];
                        f && f.resume()
                    }
                },
                stopEffect: function(a) {
                    return this.stop(a)
                },
                stopAllEffects: function() {
                    var a = this._music.id,
                        b;
                    for (b in c) {
                        var f = c[b];
                        f && f.id !== a && f.getState() === n.AudioState.PLAYING && f.stop()
                    }
                }
            };
        q.exports = cc.audioEngine = n
    }, {
        "../core/assets/CCAudioClip": 95,
        "./CCAudio": 21
    }],
    23: [function(g, q, m) {
        var h = {
            name: "Jacob__Codec"
        };
        h.Base64 = g("./base64");
        h.GZip = g("./gzip");
        h.unzip =
            function() {
                return h.GZip.gunzip.apply(h.GZip, arguments)
            };
        h.unzipBase64 = function() {
            var e = h.Base64.decode.apply(h.Base64, arguments);
            try {
                return h.GZip.gunzip.call(h.GZip, e)
            } catch (d) {
                return e.slice(7)
            }
        };
        h.unzipBase64AsArray = function(e, d) {
            d = d || 1;
            e = this.unzipBase64(e);
            var k = [],
                c, a;
            var b = 0;
            for (a = e.length / d; b < a; b++)
                for (k[b] = 0, c = d - 1; 0 <= c; --c) k[b] += e.charCodeAt(b * d + c) << 8 * c;
            return k
        };
        h.unzipAsArray = function(e, d) {
            d = d || 1;
            e = this.unzip(e);
            var k = [],
                c, a;
            var b = 0;
            for (a = e.length / d; b < a; b++)
                for (k[b] = 0, c = d - 1; 0 <= c; --c) k[b] +=
                    e.charCodeAt(b * d + c) << 8 * c;
            return k
        };
        cc.codec = q.exports = h
    }, {
        "./base64": 24,
        "./gzip": 25
    }],
    24: [function(g, q, m) {
        var h = g("../core/utils/misc").BASE64_VALUES;
        q.exports = {
            name: "Jacob__Codec__Base64",
            decode: function(e) {
                var d = [],
                    k = 0;
                for (e = e.replace(/[^A-Za-z0-9\+\/\=]/g, ""); k < e.length;) {
                    var c = h[e.charCodeAt(k++)];
                    var a = h[e.charCodeAt(k++)];
                    var b = h[e.charCodeAt(k++)];
                    var l = h[e.charCodeAt(k++)];
                    c = c << 2 | a >> 4;
                    a = (15 & a) << 4 | b >> 2;
                    var f = (3 & b) << 6 | l;
                    d.push(String.fromCharCode(c));
                    64 !== b && d.push(String.fromCharCode(a));
                    64 !==
                        l && d.push(String.fromCharCode(f))
                }
                return d = d.join("")
            },
            decodeAsArray: function(e, d) {
                e = this.decode(e);
                var k = [],
                    c, a;
                var b = 0;
                for (a = e.length / d; b < a; b++)
                    for (k[b] = 0, c = d - 1; 0 <= c; --c) k[b] += e.charCodeAt(b * d + c) << 8 * c;
                return k
            }
        }
    }, {
        "../core/utils/misc": 310
    }],
    25: [function(g, q, m) {
        var h = function(e) {
            this.data = e;
            this.debug = !1;
            this.gpflags = void 0;
            this.files = 0;
            this.unzipped = [];
            this.buf32k = Array(32768);
            this.bIdx = 0;
            this.modeZIP = !1;
            this.bytepos = 0;
            this.bb = 1;
            this.bits = 0;
            this.nameBuf = [];
            this.fileout = void 0;
            this.literalTree = Array(h.LITERALS);
            this.distanceTree = Array(32);
            this.treepos = 0;
            this.Places = null;
            this.len = 0;
            this.fpos = Array(17);
            this.fpos[0] = 0;
            this.fmax = this.flens = void 0
        };
        h.gunzip = function(e) {
            e.constructor === Array || e.constructor === String;
            return (new h(e)).gunzip()[0][0]
        };
        h.HufNode = function() {
            this.b1 = this.b0 = 0;
            this.jump = null;
            this.jumppos = -1
        };
        h.LITERALS = 288;
        h.NAMEMAX = 256;
        h.bitReverse = [0, 128, 64, 192, 32, 160, 96, 224, 16, 144, 80, 208, 48, 176, 112, 240, 8, 136, 72, 200, 40, 168, 104, 232, 24, 152, 88, 216, 56, 184, 120, 248, 4, 132, 68, 196, 36, 164, 100, 228, 20, 148, 84, 212,
            52, 180, 116, 244, 12, 140, 76, 204, 44, 172, 108, 236, 28, 156, 92, 220, 60, 188, 124, 252, 2, 130, 66, 194, 34, 162, 98, 226, 18, 146, 82, 210, 50, 178, 114, 242, 10, 138, 74, 202, 42, 170, 106, 234, 26, 154, 90, 218, 58, 186, 122, 250, 6, 134, 70, 198, 38, 166, 102, 230, 22, 150, 86, 214, 54, 182, 118, 246, 14, 142, 78, 206, 46, 174, 110, 238, 30, 158, 94, 222, 62, 190, 126, 254, 1, 129, 65, 193, 33, 161, 97, 225, 17, 145, 81, 209, 49, 177, 113, 241, 9, 137, 73, 201, 41, 169, 105, 233, 25, 153, 89, 217, 57, 185, 121, 249, 5, 133, 69, 197, 37, 165, 101, 229, 21, 149, 85, 213, 53, 181, 117, 245, 13, 141, 77, 205, 45, 173, 109, 237,
            29, 157, 93, 221, 61, 189, 125, 253, 3, 131, 67, 195, 35, 163, 99, 227, 19, 147, 83, 211, 51, 179, 115, 243, 11, 139, 75, 203, 43, 171, 107, 235, 27, 155, 91, 219, 59, 187, 123, 251, 7, 135, 71, 199, 39, 167, 103, 231, 23, 151, 87, 215, 55, 183, 119, 247, 15, 143, 79, 207, 47, 175, 111, 239, 31, 159, 95, 223, 63, 191, 127, 255
        ];
        h.cplens = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0];
        h.cplext = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 99, 99];
        h.cpdist = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769,
            1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577
        ];
        h.cpdext = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13];
        h.border = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
        h.prototype.gunzip = function() {
            this.outputArr = [];
            this.nextFile();
            return this.unzipped
        };
        h.prototype.readByte = function() {
            this.bits += 8;
            return this.bytepos < this.data.length ? this.data.charCodeAt(this.bytepos++) : -1
        };
        h.prototype.byteAlign = function() {
            this.bb = 1
        };
        h.prototype.readBit = function() {
            this.bits++;
            var e = 1 & this.bb;
            this.bb >>= 1;
            0 === this.bb && (this.bb = this.readByte(), e = 1 & this.bb, this.bb = this.bb >> 1 | 128);
            return e
        };
        h.prototype.readBits = function(e) {
            for (var d = 0, k = e; k--;) d = d << 1 | this.readBit();
            e && (d = h.bitReverse[d] >> 8 - e);
            return d
        };
        h.prototype.flushBuffer = function() {
            this.bIdx = 0
        };
        h.prototype.addBuffer = function(e) {
            this.buf32k[this.bIdx++] = e;
            this.outputArr.push(String.fromCharCode(e));
            32768 === this.bIdx && (this.bIdx = 0)
        };
        h.prototype.IsPat = function() {
            for (;;) {
                if (this.fpos[this.len] >= this.fmax) return -1;
                if (this.flens[this.fpos[this.len]] ===
                    this.len) return this.fpos[this.len]++;
                this.fpos[this.len]++
            }
        };
        h.prototype.Rec = function() {
            var e = this.Places[this.treepos];
            if (17 === this.len) return -1;
            this.treepos++;
            this.len++;
            var d = this.IsPat();
            if (0 <= d) e.b0 = d;
            else if (e.b0 = 32768, this.Rec()) return -1;
            d = this.IsPat();
            if (0 <= d) e.b1 = d, e.jump = null;
            else if (e.b1 = 32768, e.jump = this.Places[this.treepos], e.jumppos = this.treepos, this.Rec()) return -1;
            this.len--;
            return 0
        };
        h.prototype.CreateTree = function(e, d, k, c) {
            this.Places = e;
            this.treepos = 0;
            this.flens = k;
            this.fmax = d;
            for (e =
                0; 17 > e; e++) this.fpos[e] = 0;
            this.len = 0;
            return this.Rec() ? -1 : 0
        };
        h.prototype.DecodeValue = function(e) {
            for (var d, k, c = 0, a = e[c];;)
                if (d = this.readBit()) {
                    if (!(32768 & a.b1)) return a.b1;
                    a = a.jump;
                    d = e.length;
                    for (k = 0; k < d; k++)
                        if (e[k] === a) {
                            c = k;
                            break
                        }
                } else {
                    if (!(32768 & a.b0)) return a.b0;
                    c++;
                    a = e[c]
                }
        };
        h.prototype.DeflateLoop = function() {
            do {
                var e = this.readBit();
                var d = this.readBits(2);
                if (0 === d) {
                    this.byteAlign();
                    d = this.readByte();
                    d |= this.readByte() << 8;
                    var k = this.readByte();
                    k |= this.readByte() << 8;
                    for (65535 & (d ^ ~k) && document.write("BlockLen checksum mismatch\n"); d--;) k =
                        this.readByte(), this.addBuffer(k)
                } else if (1 === d)
                    for (;;)
                        if (d = h.bitReverse[this.readBits(7)] >> 1, 23 < d ? (d = d << 1 | this.readBit(), 199 < d ? (d -= 128, d = d << 1 | this.readBit()) : (d -= 48, 143 < d && (d += 136))) : d += 256, 256 > d) this.addBuffer(d);
                        else {
                            if (256 === d) break;
                            d -= 257;
                            var c = this.readBits(h.cplext[d]) + h.cplens[d];
                            d = h.bitReverse[this.readBits(5)] >> 3;
                            if (8 < h.cpdext[d]) {
                                var a = this.readBits(8);
                                a |= this.readBits(h.cpdext[d] - 8) << 8
                            } else a = this.readBits(h.cpdext[d]);
                            a += h.cpdist[d];
                            for (d = 0; d < c; d++) k = this.buf32k[this.bIdx - a & 32767], this.addBuffer(k)
                        }
                else if (2 ===
                    d) {
                    var b = Array(320);
                    k = 257 + this.readBits(5);
                    a = 1 + this.readBits(5);
                    var l = 4 + this.readBits(4);
                    for (d = 0; 19 > d; d++) b[d] = 0;
                    for (d = 0; d < l; d++) b[h.border[d]] = this.readBits(3);
                    c = this.distanceTree.length;
                    for (l = 0; l < c; l++) this.distanceTree[l] = new h.HufNode;
                    if (this.CreateTree(this.distanceTree, 19, b, 0)) return this.flushBuffer(), 1;
                    c = k + a;
                    l = 0;
                    for (var f = -1; l < c;)
                        if (f++, d = this.DecodeValue(this.distanceTree), 16 > d) b[l++] = d;
                        else if (16 === d) {
                        var n;
                        d = 3 + this.readBits(2);
                        if (l + d > c) return this.flushBuffer(), 1;
                        for (n = l ? b[l - 1] : 0; d--;) b[l++] =
                            n
                    } else {
                        d = 17 === d ? 3 + this.readBits(3) : 11 + this.readBits(7);
                        if (l + d > c) return this.flushBuffer(), 1;
                        for (; d--;) b[l++] = 0
                    }
                    c = this.literalTree.length;
                    for (l = 0; l < c; l++) this.literalTree[l] = new h.HufNode;
                    if (this.CreateTree(this.literalTree, k, b, 0)) return this.flushBuffer(), 1;
                    c = this.literalTree.length;
                    for (l = 0; l < c; l++) this.distanceTree[l] = new h.HufNode;
                    d = [];
                    for (l = k; l < b.length; l++) d[l - k] = b[l];
                    if (this.CreateTree(this.distanceTree, a, d, 0)) return this.flushBuffer(), 1;
                    for (;;)
                        if (d = this.DecodeValue(this.literalTree), 256 <= d) {
                            d -=
                                256;
                            if (0 === d) break;
                            d--;
                            c = this.readBits(h.cplext[d]) + h.cplens[d];
                            d = this.DecodeValue(this.distanceTree);
                            8 < h.cpdext[d] ? (a = this.readBits(8), a |= this.readBits(h.cpdext[d] - 8) << 8) : a = this.readBits(h.cpdext[d]);
                            for (a += h.cpdist[d]; c--;) k = this.buf32k[this.bIdx - a & 32767], this.addBuffer(k)
                        } else this.addBuffer(d)
                }
            } while (!e);
            this.flushBuffer();
            this.byteAlign();
            return 0
        };
        h.prototype.unzipFile = function(e) {
            var d;
            this.gunzip();
            for (d = 0; d < this.unzipped.length; d++)
                if (this.unzipped[d][1] === e) return this.unzipped[d][0]
        };
        h.prototype.nextFile =
            function() {
                this.outputArr = [];
                this.modeZIP = !1;
                var e = [];
                e[0] = this.readByte();
                e[1] = this.readByte();
                120 === e[0] && 218 === e[1] && (this.DeflateLoop(), this.unzipped[this.files] = [this.outputArr.join(""), "geonext.gxt"], this.files++);
                31 === e[0] && 139 === e[1] && (this.skipdir(), this.unzipped[this.files] = [this.outputArr.join(""), "file"], this.files++);
                if (80 === e[0] && 75 === e[1] && (this.modeZIP = !0, e[2] = this.readByte(), e[3] = this.readByte(), 3 === e[2] && 4 === e[3])) {
                    e[0] = this.readByte();
                    e[1] = this.readByte();
                    this.gpflags = this.readByte();
                    this.gpflags |= this.readByte() << 8;
                    var d = this.readByte();
                    d |= this.readByte() << 8;
                    this.readByte();
                    this.readByte();
                    this.readByte();
                    this.readByte();
                    this.readByte();
                    this.readByte();
                    this.readByte();
                    this.readByte();
                    this.readByte();
                    this.readByte();
                    this.readByte();
                    this.readByte();
                    var k = this.readByte();
                    k |= this.readByte() << 8;
                    var c = this.readByte();
                    c |= this.readByte() << 8;
                    a = 0;
                    for (this.nameBuf = []; k--;) e = this.readByte(), "/" === e | ":" === e ? a = 0 : a < h.NAMEMAX - 1 && (this.nameBuf[a++] = String.fromCharCode(e));
                    this.fileout || (this.fileout =
                        this.nameBuf);
                    for (var a = 0; a < c;) this.readByte(), a++;
                    8 === d && (this.DeflateLoop(), this.unzipped[this.files] = [this.outputArr.join(""), this.nameBuf.join("")], this.files++);
                    this.skipdir()
                }
            };
        h.prototype.skipdir = function() {
            var e = [],
                d;
            8 & this.gpflags && (e[0] = this.readByte(), e[1] = this.readByte(), e[2] = this.readByte(), e[3] = this.readByte(), this.readByte(), this.readByte(), this.readByte(), this.readByte(), this.readByte(), this.readByte(), this.readByte(), this.readByte());
            this.modeZIP && this.nextFile();
            e[0] = this.readByte();
            if (8 !== e[0]) return 0;
            this.gpflags = this.readByte();
            this.readByte();
            this.readByte();
            this.readByte();
            this.readByte();
            this.readByte();
            this.readByte();
            if (4 & this.gpflags)
                for (e[0] = this.readByte(), e[2] = this.readByte(), this.len = e[0] + 256 * e[1], e = 0; e < this.len; e++) this.readByte();
            if (8 & this.gpflags)
                for (e = 0, this.nameBuf = []; d = this.readByte();) "7" !== d && ":" !== d || (e = 0), e < h.NAMEMAX - 1 && (this.nameBuf[e++] = d);
            if (16 & this.gpflags)
                for (; this.readByte(););
            2 & this.gpflags && (this.readByte(), this.readByte());
            this.DeflateLoop();
            this.readByte();
            this.readByte();
            this.readByte();
            this.readByte();
            this.modeZIP && this.nextFile()
        };
        q.exports = h
    }, {}],
    26: [function(g, q, m) {
        (function() {
            function h(a) {
                throw a;
            }

            function e(a, b) {
                a = a.split(".");
                var c = A;
                a[0] in c || !c.execScript || c.execScript("var " + a[0]);
                for (var f; a.length && (f = a.shift());) a.length || void 0 === b ? c = c[f] ? c[f] : c[f] = {} : c[f] = b
            }

            function d(a) {
                if ("string" === typeof a) {
                    a = a.split("");
                    var b;
                    var c = 0;
                    for (b = a.length; c < b; c++) a[c] = (255 & a[c].charCodeAt(0)) >>> 0
                }
                c = 1;
                b = 0;
                for (var f = a.length, d, l = 0; 0 < f;) {
                    d =
                        1024 < f ? 1024 : f;
                    f -= d;
                    do c += a[l++], b += c; while (--d);
                    c %= 65521;
                    b %= 65521
                }
                return (b << 16 | c) >>> 0
            }

            function k(a, b) {
                this.index = "number" === typeof b ? b : 0;
                this.i = 0;
                this.buffer = a instanceof(B ? Uint8Array : Array) ? a : new(B ? Uint8Array : Array)(32768);
                2 * this.buffer.length <= this.index && h(Error("invalid index"));
                this.buffer.length <= this.index && this.f()
            }

            function c(a) {
                this.buffer = new(B ? Uint16Array : Array)(2 * a);
                this.length = 0
            }

            function a(a) {
                var b = a.length,
                    c = 0,
                    f = Number.POSITIVE_INFINITY,
                    d, l, n;
                for (l = 0; l < b; ++l) a[l] > c && (c = a[l]), a[l] <
                    f && (f = a[l]);
                var k = 1 << c;
                var p = new(B ? Uint32Array : Array)(k);
                var u = 1;
                var t = 0;
                for (d = 2; u <= c;) {
                    for (l = 0; l < b; ++l)
                        if (a[l] === u) {
                            var v = 0;
                            var e = t;
                            for (n = 0; n < u; ++n) v = v << 1 | 1 & e, e >>= 1;
                            for (n = v; n < k; n += d) p[n] = u << 16 | l;
                            ++t
                        }++u;
                    t <<= 1;
                    d <<= 1
                }
                return [p, c, f]
            }

            function b(a, b) {
                this.h = q;
                this.w = 0;
                this.input = a;
                this.b = 0;
                b && (b.lazy && (this.w = b.lazy), "number" === typeof b.compressionType && (this.h = b.compressionType), b.outputBuffer && (this.a = B && b.outputBuffer instanceof Array ? new Uint8Array(b.outputBuffer) : b.outputBuffer), "number" === typeof b.outputIndex &&
                    (this.b = b.outputIndex));
                this.a || (this.a = new(B ? Uint8Array : Array)(32768))
            }

            function l(a, b) {
                this.length = a;
                this.G = b
            }

            function f() {
                var a = R;
                switch (!0) {
                    case 3 === a:
                        return [257, a - 3, 0];
                    case 4 === a:
                        return [258, a - 4, 0];
                    case 5 === a:
                        return [259, a - 5, 0];
                    case 6 === a:
                        return [260, a - 6, 0];
                    case 7 === a:
                        return [261, a - 7, 0];
                    case 8 === a:
                        return [262, a - 8, 0];
                    case 9 === a:
                        return [263, a - 9, 0];
                    case 10 === a:
                        return [264, a - 10, 0];
                    case 12 >= a:
                        return [265, a - 11, 1];
                    case 14 >= a:
                        return [266, a - 13, 1];
                    case 16 >= a:
                        return [267, a - 15, 1];
                    case 18 >= a:
                        return [268, a - 17, 1];
                    case 22 >=
                    a:
                        return [269, a - 19, 2];
                    case 26 >= a:
                        return [270, a - 23, 2];
                    case 30 >= a:
                        return [271, a - 27, 2];
                    case 34 >= a:
                        return [272, a - 31, 2];
                    case 42 >= a:
                        return [273, a - 35, 3];
                    case 50 >= a:
                        return [274, a - 43, 3];
                    case 58 >= a:
                        return [275, a - 51, 3];
                    case 66 >= a:
                        return [276, a - 59, 3];
                    case 82 >= a:
                        return [277, a - 67, 4];
                    case 98 >= a:
                        return [278, a - 83, 4];
                    case 114 >= a:
                        return [279, a - 99, 4];
                    case 130 >= a:
                        return [280, a - 115, 4];
                    case 162 >= a:
                        return [281, a - 131, 5];
                    case 194 >= a:
                        return [282, a - 163, 5];
                    case 226 >= a:
                        return [283, a - 195, 5];
                    case 257 >= a:
                        return [284, a - 227, 5];
                    case 258 === a:
                        return [285,
                            a - 258, 0
                        ];
                    default:
                        h("invalid length: " + a)
                }
            }

            function n(a, b) {
                function c(a, b) {
                    var c = a.G,
                        f = [],
                        d = 0;
                    var l = M[a.length];
                    f[d++] = 65535 & l;
                    f[d++] = l >> 16 & 255;
                    f[d++] = l >> 24;
                    switch (!0) {
                        case 1 === c:
                            var n = [0, c - 1, 0];
                            break;
                        case 2 === c:
                            n = [1, c - 2, 0];
                            break;
                        case 3 === c:
                            n = [2, c - 3, 0];
                            break;
                        case 4 === c:
                            n = [3, c - 4, 0];
                            break;
                        case 6 >= c:
                            n = [4, c - 5, 1];
                            break;
                        case 8 >= c:
                            n = [5, c - 7, 1];
                            break;
                        case 12 >= c:
                            n = [6, c - 9, 2];
                            break;
                        case 16 >= c:
                            n = [7, c - 13, 2];
                            break;
                        case 24 >= c:
                            n = [8, c - 17, 3];
                            break;
                        case 32 >= c:
                            n = [9, c - 25, 3];
                            break;
                        case 48 >= c:
                            n = [10, c - 33, 4];
                            break;
                        case 64 >=
                        c:
                            n = [11, c - 49, 4];
                            break;
                        case 96 >= c:
                            n = [12, c - 65, 5];
                            break;
                        case 128 >= c:
                            n = [13, c - 97, 5];
                            break;
                        case 192 >= c:
                            n = [14, c - 129, 6];
                            break;
                        case 256 >= c:
                            n = [15, c - 193, 6];
                            break;
                        case 384 >= c:
                            n = [16, c - 257, 7];
                            break;
                        case 512 >= c:
                            n = [17, c - 385, 7];
                            break;
                        case 768 >= c:
                            n = [18, c - 513, 8];
                            break;
                        case 1024 >= c:
                            n = [19, c - 769, 8];
                            break;
                        case 1536 >= c:
                            n = [20, c - 1025, 9];
                            break;
                        case 2048 >= c:
                            n = [21, c - 1537, 9];
                            break;
                        case 3072 >= c:
                            n = [22, c - 2049, 10];
                            break;
                        case 4096 >= c:
                            n = [23, c - 3073, 10];
                            break;
                        case 6144 >= c:
                            n = [24, c - 4097, 11];
                            break;
                        case 8192 >= c:
                            n = [25, c - 6145, 11];
                            break;
                        case 12288 >=
                        c:
                            n = [26, c - 8193, 12];
                            break;
                        case 16384 >= c:
                            n = [27, c - 12289, 12];
                            break;
                        case 24576 >= c:
                            n = [28, c - 16385, 13];
                            break;
                        case 32768 >= c:
                            n = [29, c - 24577, 13];
                            break;
                        default:
                            h("invalid distance")
                    }
                    l = n;
                    f[d++] = l[0];
                    f[d++] = l[1];
                    f[d++] = l[2];
                    c = 0;
                    for (d = f.length; c < d; ++c) t[v++] = f[c];
                    x[f[0]]++;
                    g[f[3]]++;
                    e = a.length + b - 1;
                    u = null
                }
                var f, d, n, k, p = {},
                    u, t = B ? new Uint16Array(2 * b.length) : [],
                    v = 0,
                    e = 0,
                    x = new(B ? Uint32Array : Array)(286),
                    g = new(B ? Uint32Array : Array)(30),
                    z = a.w;
                if (!B) {
                    for (d = 0; 285 >= d;) x[d++] = 0;
                    for (d = 0; 29 >= d;) g[d++] = 0
                }
                x[256] = 1;
                var A = 0;
                for (f =
                    b.length; A < f; ++A) {
                    d = k = 0;
                    for (n = 3; d < n && A + d !== f; ++d) k = k << 8 | b[A + d];
                    void 0 === p[k] && (p[k] = []);
                    d = p[k];
                    if (!(0 < e--)) {
                        for (; 0 < d.length && 32768 < A - d[0];) d.shift();
                        if (A + 3 >= f) {
                            u && c(u, -1);
                            d = 0;
                            for (n = f - A; d < n; ++d) {
                                var w = b[A + d];
                                t[v++] = w;
                                ++x[w]
                            }
                            break
                        }
                        if (0 < d.length) {
                            k = n = void 0;
                            var E = 0,
                                y = void 0,
                                C = void 0,
                                m = y = void 0,
                                F = b.length;
                            C = 0;
                            m = d.length;
                            a: for (; C < m; C++) {
                                n = d[m - C - 1];
                                y = 3;
                                if (3 < E) {
                                    for (y = E; 3 < y; y--)
                                        if (b[n + y - 1] !== b[A + y - 1]) continue a;
                                    y = E
                                }
                                for (; 258 > y && A + y < F && b[n + y] === b[A + y];) ++y;
                                y > E && (k = n, E = y);
                                if (258 === y) break
                            }
                            n = new l(E, A - k);
                            u ? u.length <
                                n.length ? (w = b[A - 1], t[v++] = w, ++x[w], c(n, 0)) : c(u, -1) : n.length < z ? u = n : c(n, 0)
                        } else u ? c(u, -1) : (w = b[A], t[v++] = w, ++x[w])
                    }
                    d.push(A)
                }
                t[v++] = 256;
                x[256]++;
                a.L = x;
                a.K = g;
                return B ? t.subarray(0, v) : t
            }

            function u(a, b) {
                function f(a) {
                    var b = v[a][e[a]];
                    b === u ? (f(a + 1), f(a + 1)) : --t[b];
                    ++e[a]
                }
                var d = a.length,
                    l = new c(572),
                    n = new(B ? Uint8Array : Array)(d),
                    k, p;
                if (!B)
                    for (k = 0; k < d; k++) n[k] = 0;
                for (k = 0; k < d; ++k) 0 < a[k] && l.push(k, a[k]);
                a = Array(l.length / 2);
                d = new(B ? Uint32Array : Array)(l.length / 2);
                if (1 === a.length) return n[l.pop().index] = 1, n;
                k =
                    0;
                for (p = l.length / 2; k < p; ++k) a[k] = l.pop(), d[k] = a[k].value;
                var u = d.length;
                k = new(B ? Uint16Array : Array)(b);
                l = new(B ? Uint8Array : Array)(b);
                var t = new(B ? Uint8Array : Array)(u);
                p = Array(b);
                var v = Array(b),
                    e = Array(b),
                    x = (1 << b) - u,
                    h = 1 << b - 1,
                    g;
                k[b - 1] = u;
                for (g = 0; g < b; ++g) x < h ? l[g] = 0 : (l[g] = 1, x -= h), x <<= 1, k[b - 2 - g] = (k[b - 1 - g] / 2 | 0) + u;
                k[0] = l[0];
                p[0] = Array(k[0]);
                v[0] = Array(k[0]);
                for (g = 1; g < b; ++g) k[g] > 2 * k[g - 1] + l[g] && (k[g] = 2 * k[g - 1] + l[g]), p[g] = Array(k[g]), v[g] = Array(k[g]);
                for (x = 0; x < u; ++x) t[x] = b;
                for (h = 0; h < k[b - 1]; ++h) p[b - 1][h] = d[h],
                    v[b - 1][h] = h;
                for (x = 0; x < b; ++x) e[x] = 0;
                1 === l[b - 1] && (--t[0], ++e[b - 1]);
                for (g = b - 2; 0 <= g; --g) {
                    b = x = 0;
                    var z = e[g + 1];
                    for (h = 0; h < k[g]; h++) b = p[g + 1][z] + p[g + 1][z + 1], b > d[x] ? (p[g][h] = b, v[g][h] = u, z += 2) : (p[g][h] = d[x], v[g][h] = x, ++x);
                    e[g] = 0;
                    1 === l[g] && f(g)
                }
                b = t;
                k = 0;
                for (p = a.length; k < p; ++k) n[a[k].index] = b[k];
                return n
            }

            function v(a) {
                var b = new(B ? Uint16Array : Array)(a.length),
                    c = [],
                    f = [],
                    d = 0,
                    l, n;
                var k = 0;
                for (l = a.length; k < l; k++) c[a[k]] = 1 + (0 | c[a[k]]);
                k = 1;
                for (l = 16; k <= l; k++) f[k] = d, d += 0 | c[k], d > 1 << k && h("overcommitted"), d <<= 1;
                65536 > d && h("undercommitted");
                k = 0;
                for (l = a.length; k < l; k++)
                    for (d = f[a[k]], f[a[k]] += 1, c = b[k] = 0, n = a[k]; c < n; c++) b[k] = b[k] << 1 | 1 & d, d >>>= 1;
                return b
            }

            function p(a, c) {
                this.input = a;
                this.a = new(B ? Uint8Array : Array)(32768);
                this.h = S.j;
                a = {};
                var f;
                !c && (c = {}) || "number" !== typeof c.compressionType || (this.h = c.compressionType);
                for (f in c) a[f] = c[f];
                a.outputBuffer = this.a;
                this.z = new b(this.input, a)
            }

            function t(a, b) {
                this.k = [];
                this.l = 32768;
                this.e = this.g = this.c = this.q = 0;
                this.input = B ? new Uint8Array(a) : a;
                this.s = !1;
                this.m = Q;
                this.B = !1;
                !b && (b = {}) || (b.index && (this.c =
                    b.index), b.bufferSize && (this.l = b.bufferSize), b.bufferType && (this.m = b.bufferType), b.resize && (this.B = b.resize));
                switch (this.m) {
                    case O:
                        this.b = 32768;
                        this.a = new(B ? Uint8Array : Array)(32768 + this.l + 258);
                        break;
                    case Q:
                        this.b = 0;
                        this.a = new(B ? Uint8Array : Array)(this.l);
                        this.f = this.J;
                        this.t = this.H;
                        this.o = this.I;
                        break;
                    default:
                        h(Error("invalid inflate mode"))
                }
            }

            function x(a, b) {
                for (var c = a.g, f = a.e, d = a.input, l = a.c, n; f < b;) n = d[l++], void 0 === n && h(Error("input buffer is broken")), c |= n << f, f += 8;
                a.g = c >>> b;
                a.e = f - b;
                a.c = l;
                return c &
                    (1 << b) - 1
            }

            function g(a, b) {
                var c = a.g,
                    f = a.e,
                    d = a.input,
                    l = a.c,
                    n = b[0];
                b = b[1];
                for (var k; f < b;) k = d[l++], void 0 === k && h(Error("input buffer is broken")), c |= k << f, f += 8;
                d = n[c & (1 << b) - 1];
                n = d >>> 16;
                a.g = c >> n;
                a.e = f - n;
                a.c = l;
                return 65535 & d
            }

            function E(b) {
                function c(a, b, c) {
                    var f, d, l;
                    for (l = 0; l < a;) switch (f = g(this, b), f) {
                        case 16:
                            for (d = 3 + x(this, 2); d--;) c[l++] = n;
                            break;
                        case 17:
                            for (d = 3 + x(this, 3); d--;) c[l++] = 0;
                            var n = 0;
                            break;
                        case 18:
                            for (d = 11 + x(this, 7); d--;) c[l++] = 0;
                            n = 0;
                            break;
                        default:
                            n = c[l++] = f
                    }
                    return c
                }
                var f = x(b, 5) + 257,
                    d = x(b, 5) + 1,
                    l = x(b, 4) + 4,
                    n = new(B ? Uint8Array : Array)(V.length),
                    k;
                for (k = 0; k < l; ++k) n[V[k]] = x(b, 3);
                l = a(n);
                n = new(B ? Uint8Array : Array)(f);
                k = new(B ? Uint8Array : Array)(d);
                b.o(a(c.call(b, f, l, n)), a(c.call(b, d, l, k)))
            }

            function w(a, b) {
                this.input = a;
                this.c = 0;
                !b && (b = {}) || (b.index && (this.c = b.index), b.verify && (this.M = b.verify));
                var c = a[this.c++];
                var f = a[this.c++];
                switch (15 & c) {
                    case W:
                        this.method = W;
                        break;
                    default:
                        h(Error("unsupported compression method"))
                }
                0 !== ((c << 8) + f) % 31 && h(Error("invalid fcheck flag:" + ((c << 8) + f) % 31));
                32 & f && h(Error("fdict flag is not supported"));
                this.A = new t(a, {
                    index: this.c,
                    bufferSize: b.bufferSize,
                    bufferType: b.bufferType,
                    resize: b.resize
                })
            }
            var A = this,
                B = "undefined" !== typeof Uint8Array && "undefined" !== typeof Uint16Array && "undefined" !== typeof Uint32Array;
            k.prototype.f = function() {
                var a = this.buffer,
                    b, c = a.length,
                    f = new(B ? Uint8Array : Array)(c << 1);
                if (B) f.set(a);
                else
                    for (b = 0; b < c; ++b) f[b] = a[b];
                return this.buffer = f
            };
            k.prototype.d = function(a, b, c) {
                var f = this.buffer,
                    d = this.index,
                    l = this.i,
                    n = f[d];
                c && 1 < b && (a = 8 < b ? (I[255 & a] << 24 | I[a >>> 8 & 255] << 16 | I[a >>> 16 & 255] <<
                    8 | I[a >>> 24 & 255]) >> 32 - b : I[a] >> 8 - b);
                if (8 > b + l) n = n << b | a, l += b;
                else
                    for (c = 0; c < b; ++c) n = n << 1 | a >> b - c - 1 & 1, 8 === ++l && (l = 0, f[d++] = I[n], n = 0, d === f.length && (f = this.f()));
                f[d] = n;
                this.buffer = f;
                this.i = l;
                this.index = d
            };
            k.prototype.finish = function() {
                var a = this.buffer,
                    b = this.index,
                    c;
                0 < this.i && (a[b] <<= 8 - this.i, a[b] = I[a[b]], b++);
                B ? c = a.subarray(0, b) : (a.length = b, c = a);
                return c
            };
            var y = new(B ? Uint8Array : Array)(256),
                C;
            for (C = 0; 256 > C; ++C) {
                var F = C,
                    m = F,
                    D = 7;
                for (F >>>= 1; F; F >>>= 1) m <<= 1, m |= 1 & F, --D;
                y[C] = (m << D & 255) >>> 0
            }
            var I = y;
            y = [0, 1996959894,
                3993919788, 2567524794, 124634137, 1886057615, 3915621685, 2657392035, 249268274, 2044508324, 3772115230, 2547177864, 162941995, 2125561021, 3887607047, 2428444049, 498536548, 1789927666, 4089016648, 2227061214, 450548861, 1843258603, 4107580753, 2211677639, 325883990, 1684777152, 4251122042, 2321926636, 335633487, 1661365465, 4195302755, 2366115317, 997073096, 1281953886, 3579855332, 2724688242, 1006888145, 1258607687, 3524101629, 2768942443, 901097722, 1119000684, 3686517206, 2898065728, 853044451, 1172266101, 3705015759, 2882616665, 651767980,
                1373503546, 3369554304, 3218104598, 565507253, 1454621731, 3485111705, 3099436303, 671266974, 1594198024, 3322730930, 2970347812, 795835527, 1483230225, 3244367275, 3060149565, 1994146192, 31158534, 2563907772, 4023717930, 1907459465, 112637215, 2680153253, 3904427059, 2013776290, 251722036, 2517215374, 3775830040, 2137656763, 141376813, 2439277719, 3865271297, 1802195444, 476864866, 2238001368, 4066508878, 1812370925, 453092731, 2181625025, 4111451223, 1706088902, 314042704, 2344532202, 4240017532, 1658658271, 366619977, 2362670323, 4224994405,
                1303535960, 984961486, 2747007092, 3569037538, 1256170817, 1037604311, 2765210733, 3554079995, 1131014506, 879679996, 2909243462, 3663771856, 1141124467, 855842277, 2852801631, 3708648649, 1342533948, 654459306, 3188396048, 3373015174, 1466479909, 544179635, 3110523913, 3462522015, 1591671054, 702138776, 2966460450, 3352799412, 1504918807, 783551873, 3082640443, 3233442989, 3988292384, 2596254646, 62317068, 1957810842, 3939845945, 2647816111, 81470997, 1943803523, 3814918930, 2489596804, 225274430, 2053790376, 3826175755, 2466906013, 167816743,
                2097651377, 4027552580, 2265490386, 503444072, 1762050814, 4150417245, 2154129355, 426522225, 1852507879, 4275313526, 2312317920, 282753626, 1742555852, 4189708143, 2394877945, 397917763, 1622183637, 3604390888, 2714866558, 953729732, 1340076626, 3518719985, 2797360999, 1068828381, 1219638859, 3624741850, 2936675148, 906185462, 1090812512, 3747672003, 2825379669, 829329135, 1181335161, 3412177804, 3160834842, 628085408, 1382605366, 3423369109, 3138078467, 570562233, 1426400815, 3317316542, 2998733608, 733239954, 1555261956, 3268935591, 3050360625,
                752459403, 1541320221, 2607071920, 3965973030, 1969922972, 40735498, 2617837225, 3943577151, 1913087877, 83908371, 2512341634, 3803740692, 2075208622, 213261112, 2463272603, 3855990285, 2094854071, 198958881, 2262029012, 4057260610, 1759359992, 534414190, 2176718541, 4139329115, 1873836001, 414664567, 2282248934, 4279200368, 1711684554, 285281116, 2405801727, 4167216745, 1634467795, 376229701, 2685067896, 3608007406, 1308918612, 956543938, 2808555105, 3495958263, 1231636301, 1047427035, 2932959818, 3654703836, 1088359270, 936918E3, 2847714899,
                3736837829, 1202900863, 817233897, 3183342108, 3401237130, 1404277552, 615818150, 3134207493, 3453421203, 1423857449, 601450431, 3009837614, 3294710456, 1567103746, 711928724, 3020668471, 3272380065, 1510334235, 755167117
            ];
            B && new Uint32Array(y);
            c.prototype.getParent = function(a) {
                return 2 * ((a - 2) / 4 | 0)
            };
            c.prototype.push = function(a, b) {
                var c, f = this.buffer;
                var d = this.length;
                f[this.length++] = b;
                for (f[this.length++] = a; 0 < d && (c = this.getParent(d), f[d] > f[c]);) a = f[d], f[d] = f[c], f[c] = a, a = f[d + 1], f[d + 1] = f[c + 1], f[c + 1] = a, d = c;
                return this.length
            };
            c.prototype.pop = function() {
                var a = this.buffer,
                    b;
                var c = a[0];
                var f = a[1];
                this.length -= 2;
                a[0] = a[this.length];
                a[1] = a[this.length + 1];
                for (b = 0;;) {
                    var d = 2 * b + 2;
                    if (d >= this.length) break;
                    d + 2 < this.length && a[d + 2] > a[d] && (d += 2);
                    if (!(a[d] > a[b])) break;
                    var l = a[b];
                    a[b] = a[d];
                    a[d] = l;
                    l = a[b + 1];
                    a[b + 1] = a[d + 1];
                    a[d + 1] = l;
                    b = d
                }
                return {
                    index: f,
                    value: c,
                    length: this.length
                }
            };
            var q = 2;
            y = {
                NONE: 0,
                r: 1,
                j: q,
                N: 3
            };
            var L = [];
            for (C = 0; 288 > C; C++) switch (!0) {
                case 143 >= C:
                    L.push([C + 48, 8]);
                    break;
                case 255 >= C:
                    L.push([C - 144 + 400, 9]);
                    break;
                case 279 >= C:
                    L.push([C -
                        256 + 0, 7
                    ]);
                    break;
                case 287 >= C:
                    L.push([C - 280 + 192, 8]);
                    break;
                default:
                    h("invalid literal: " + C)
            }
            b.prototype.n = function() {
                var a, b = this.input;
                switch (this.h) {
                    case 0:
                        var c = 0;
                        for (a = b.length; c < a;) {
                            var f = B ? b.subarray(c, c + 65535) : b.slice(c, c + 65535);
                            c += f.length;
                            var d = c === a,
                                l = this.a,
                                p = this.b;
                            if (B) {
                                for (l = new Uint8Array(this.a.buffer); l.length <= p + f.length + 5;) l = new Uint8Array(l.length << 1);
                                l.set(this.a)
                            }
                            d = d ? 1 : 0;
                            l[p++] = 0 | d;
                            d = f.length;
                            var t = 65536 + ~d & 65535;
                            l[p++] = 255 & d;
                            l[p++] = d >>> 8 & 255;
                            l[p++] = 255 & t;
                            l[p++] = t >>> 8 & 255;
                            if (B) l.set(f,
                                p), p += f.length, l = l.subarray(0, p);
                            else {
                                d = 0;
                                for (t = f.length; d < t; ++d) l[p++] = f[d];
                                l.length = p
                            }
                            this.b = p;
                            this.a = l
                        }
                        break;
                    case 1:
                        c = new k(new Uint8Array(this.a.buffer), this.b);
                        c.d(1, 1, !0);
                        c.d(1, 2, !0);
                        b = n(this, b);
                        f = 0;
                        for (l = b.length; f < l; f++)
                            if (a = b[f], k.prototype.d.apply(c, L[a]), 256 < a) c.d(b[++f], b[++f], !0), c.d(b[++f], 5), c.d(b[++f], b[++f], !0);
                            else if (256 === a) break;
                        this.a = c.finish();
                        this.b = this.a.length;
                        break;
                    case q:
                        a = new k(new Uint8Array(this.a), this.b);
                        var e, x, g, z = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
                        t = Array(19);
                        var A;
                        p = q;
                        a.d(1, 1, !0);
                        a.d(p, 2, !0);
                        b = n(this, b);
                        var w = u(this.L, 15);
                        var E = v(w);
                        p = u(this.K, 7);
                        d = v(p);
                        for (e = 286; 257 < e && 0 === w[e - 1]; e--);
                        for (x = 30; 1 < x && 0 === p[x - 1]; x--);
                        var y = e,
                            C = x;
                        var m = new(B ? Uint32Array : Array)(y + C);
                        var F = new(B ? Uint32Array : Array)(316),
                            G;
                        var D = new(B ? Uint8Array : Array)(19);
                        for (A = g = 0; A < y; A++) m[g++] = w[A];
                        for (A = 0; A < C; A++) m[g++] = p[A];
                        if (!B)
                            for (A = 0, C = D.length; A < C; ++A) D[A] = 0;
                        A = G = 0;
                        for (C = m.length; A < C; A += g) {
                            for (g = 1; A + g < C && m[A + g] === m[A]; ++g);
                            y = g;
                            if (0 === m[A])
                                if (3 > y)
                                    for (; 0 < y--;) F[G++] = 0,
                                        D[0]++;
                                else
                                    for (; 0 < y;) {
                                        var I = 138 > y ? y : 138;
                                        I > y - 3 && I < y && (I = y - 3);
                                        10 >= I ? (F[G++] = 17, F[G++] = I - 3, D[17]++) : (F[G++] = 18, F[G++] = I - 11, D[18]++);
                                        y -= I
                                    } else if (F[G++] = m[A], D[m[A]]++, y--, 3 > y)
                                        for (; 0 < y--;) F[G++] = m[A], D[m[A]]++;
                                    else
                                        for (; 0 < y;) I = 6 > y ? y : 6, I > y - 3 && I < y && (I = y - 3), F[G++] = 16, F[G++] = I - 3, D[16]++, y -= I
                        }
                        m = B ? F.subarray(0, G) : F.slice(0, G);
                        D = u(D, 7);
                        for (A = 0; 19 > A; A++) t[A] = D[z[A]];
                        for (g = 19; 4 < g && 0 === t[g - 1]; g--);
                        z = v(D);
                        a.d(e - 257, 5, !0);
                        a.d(x - 1, 5, !0);
                        a.d(g - 4, 4, !0);
                        for (A = 0; A < g; A++) a.d(t[A], 3, !0);
                        A = 0;
                        for (t = m.length; A < t; A++)
                            if (f =
                                m[A], a.d(z[f], D[f], !0), 16 <= f) {
                                A++;
                                switch (f) {
                                    case 16:
                                        l = 2;
                                        break;
                                    case 17:
                                        l = 3;
                                        break;
                                    case 18:
                                        l = 7;
                                        break;
                                    default:
                                        h("invalid code: " + f)
                                }
                                a.d(m[A], l, !0)
                            }
                        l = [E, w];
                        d = [d, p];
                        f = l[0];
                        l = l[1];
                        p = d[0];
                        E = d[1];
                        d = 0;
                        for (t = b.length; d < t; ++d)
                            if (c = b[d], a.d(f[c], l[c], !0), 256 < c) a.d(b[++d], b[++d], !0), w = b[++d], a.d(p[w], E[w], !0), a.d(b[++d], b[++d], !0);
                            else if (256 === c) break;
                        this.a = a.finish();
                        this.b = this.a.length;
                        break;
                    default:
                        h("invalid compression type")
                }
                return this.a
            };
            C = [];
            var R;
            for (R = 3; 258 >= R; R++) F = f(), C[R] = F[2] << 24 | F[1] << 16 | F[0];
            var M = B ? new Uint32Array(C) : C,
                S = y;
            p.prototype.n = function() {
                var a = 0;
                var b = this.a;
                var c = W;
                switch (c) {
                    case W:
                        var f = Math.LOG2E * Math.log(32768) - 8;
                        break;
                    default:
                        h(Error("invalid compression method"))
                }
                f = f << 4 | c;
                b[a++] = f;
                switch (c) {
                    case W:
                        switch (this.h) {
                            case S.NONE:
                                var l = 0;
                                break;
                            case S.r:
                                l = 1;
                                break;
                            case S.j:
                                l = 2;
                                break;
                            default:
                                h(Error("unsupported compression type"))
                        }
                        break;
                    default:
                        h(Error("invalid compression method"))
                }
                c = l << 6 | 0;
                b[a++] = c | 31 - (256 * f + c) % 31;
                c = d(this.input);
                this.z.b = a;
                b = this.z.n();
                a = b.length;
                B && (b = new Uint8Array(b.buffer),
                    b.length <= a + 4 && (this.a = new Uint8Array(b.length + 4), this.a.set(b), b = this.a), b = b.subarray(0, a + 4));
                b[a++] = c >> 24 & 255;
                b[a++] = c >> 16 & 255;
                b[a++] = c >> 8 & 255;
                b[a++] = 255 & c;
                return b
            };
            e("Zlib.Deflate", p);
            e("Zlib.Deflate.compress", function(a, b) {
                return (new p(a, b)).n()
            });
            e("Zlib.Deflate.CompressionType", S);
            e("Zlib.Deflate.CompressionType.NONE", S.NONE);
            e("Zlib.Deflate.CompressionType.FIXED", S.r);
            e("Zlib.Deflate.CompressionType.DYNAMIC", S.j);
            var O = 0,
                Q = 1;
            y = {
                D: O,
                C: Q
            };
            t.prototype.p = function() {
                for (; !this.s;) {
                    var a = x(this,
                        3);
                    1 & a && (this.s = !0);
                    a >>>= 1;
                    switch (a) {
                        case 0:
                            a = this.input;
                            var b = this.c,
                                c = this.a,
                                f = this.b,
                                d = c.length;
                            this.e = this.g = 0;
                            var l = a[b++];
                            void 0 === l && h(Error("invalid uncompressed block header: LEN (first byte)"));
                            var n = l;
                            l = a[b++];
                            void 0 === l && h(Error("invalid uncompressed block header: LEN (second byte)"));
                            n |= l << 8;
                            l = a[b++];
                            void 0 === l && h(Error("invalid uncompressed block header: NLEN (first byte)"));
                            var k = l;
                            l = a[b++];
                            void 0 === l && h(Error("invalid uncompressed block header: NLEN (second byte)"));
                            k |= l << 8;
                            n === ~k &&
                                h(Error("invalid uncompressed block header: length verify"));
                            b + n > a.length && h(Error("input buffer is broken"));
                            switch (this.m) {
                                case O:
                                    for (; f + n > c.length;) {
                                        l = d - f;
                                        n -= l;
                                        if (B) c.set(a.subarray(b, b + l), f), f += l, b += l;
                                        else
                                            for (; l--;) c[f++] = a[b++];
                                        this.b = f;
                                        c = this.f();
                                        f = this.b
                                    }
                                    break;
                                case Q:
                                    for (; f + n > c.length;) c = this.f({
                                        v: 2
                                    });
                                    break;
                                default:
                                    h(Error("invalid inflate mode"))
                            }
                            if (B) c.set(a.subarray(b, b + n), f), f += n, b += n;
                            else
                                for (; n--;) c[f++] = a[b++];
                            this.c = b;
                            this.b = f;
                            this.a = c;
                            break;
                        case 1:
                            this.o(fa, Z);
                            break;
                        case 2:
                            E(this);
                            break;
                        default:
                            h(Error("unknown BTYPE: " + a))
                    }
                }
                return this.t()
            };
            C = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
            var V = B ? new Uint16Array(C) : C;
            C = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 258, 258];
            var ba = B ? new Uint16Array(C) : C;
            C = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0];
            var da = B ? new Uint8Array(C) : C;
            C = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577];
            var T = B ? new Uint16Array(C) :
                C;
            C = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13];
            var N = B ? new Uint8Array(C) : C;
            C = new(B ? Uint8Array : Array)(288);
            F = 0;
            for (m = C.length; F < m; ++F) C[F] = 143 >= F ? 8 : 255 >= F ? 9 : 279 >= F ? 7 : 8;
            var fa = a(C);
            C = new(B ? Uint8Array : Array)(30);
            F = 0;
            for (m = C.length; F < m; ++F) C[F] = 5;
            var Z = a(C);
            t.prototype.o = function(a, b) {
                var c = this.a,
                    f = this.b;
                this.u = a;
                for (var d = c.length - 258, l, n, k; 256 !== (l = g(this, a));)
                    if (256 > l) f >= d && (this.b = f, c = this.f(), f = this.b), c[f++] = l;
                    else
                        for (l -= 257, k = ba[l], 0 < da[l] && (k += x(this, da[l])), l =
                            g(this, b), n = T[l], 0 < N[l] && (n += x(this, N[l])), f >= d && (this.b = f, c = this.f(), f = this.b); k--;) c[f] = c[f++ - n];
                for (; 8 <= this.e;) this.e -= 8, this.c--;
                this.b = f
            };
            t.prototype.I = function(a, b) {
                var c = this.a,
                    f = this.b;
                this.u = a;
                for (var d = c.length, l, n, k; 256 !== (l = g(this, a));)
                    if (256 > l) f >= d && (c = this.f(), d = c.length), c[f++] = l;
                    else
                        for (l -= 257, k = ba[l], 0 < da[l] && (k += x(this, da[l])), l = g(this, b), n = T[l], 0 < N[l] && (n += x(this, N[l])), f + k > d && (c = this.f(), d = c.length); k--;) c[f] = c[f++ - n];
                for (; 8 <= this.e;) this.e -= 8, this.c--;
                this.b = f
            };
            t.prototype.f =
                function() {
                    var a = new(B ? Uint8Array : Array)(this.b - 32768),
                        b = this.b - 32768,
                        c, f = this.a;
                    if (B) a.set(f.subarray(32768, a.length));
                    else {
                        var d = 0;
                        for (c = a.length; d < c; ++d) a[d] = f[d + 32768]
                    }
                    this.k.push(a);
                    this.q += a.length;
                    if (B) f.set(f.subarray(b, b + 32768));
                    else
                        for (d = 0; 32768 > d; ++d) f[d] = f[b + d];
                    this.b = 32768;
                    return f
                };
            t.prototype.J = function(a) {
                var b, c = this.input.length / this.c + 1 | 0,
                    f, d, l, n = this.input,
                    k = this.a;
                a && ("number" === typeof a.v && (c = a.v), "number" === typeof a.F && (c += a.F));
                2 > c ? (f = (n.length - this.c) / this.u[2], l = f / 2 * 258 |
                    0, d = l < k.length ? k.length + l : k.length << 1) : d = k.length * c;
                B ? (b = new Uint8Array(d), b.set(k)) : b = k;
                return this.a = b
            };
            t.prototype.t = function() {
                var a = 0,
                    b = this.a,
                    c = this.k,
                    f = new(B ? Uint8Array : Array)(this.q + (this.b - 32768)),
                    d, l;
                if (0 === c.length) return B ? this.a.subarray(32768, this.b) : this.a.slice(32768, this.b);
                var n = 0;
                for (d = c.length; n < d; ++n) {
                    var k = c[n];
                    var p = 0;
                    for (l = k.length; p < l; ++p) f[a++] = k[p]
                }
                n = 32768;
                for (d = this.b; n < d; ++n) f[a++] = b[n];
                this.k = [];
                return this.buffer = f
            };
            t.prototype.H = function() {
                var a, b = this.b;
                B ? this.B ?
                    (a = new Uint8Array(b), a.set(this.a.subarray(0, b))) : a = this.a.subarray(0, b) : (this.a.length > b && (this.a.length = b), a = this.a);
                return this.buffer = a
            };
            w.prototype.p = function() {
                var a = this.input,
                    b;
                var c = this.A.p();
                this.c = this.A.c;
                this.M && (b = (a[this.c++] << 24 | a[this.c++] << 16 | a[this.c++] << 8 | a[this.c++]) >>> 0, b !== d(c) && h(Error("invalid adler-32 checksum")));
                return c
            };
            e("Zlib.Inflate", w);
            e("Zlib.Inflate.BufferType", y);
            y.ADAPTIVE = y.C;
            y.BLOCK = y.D;
            e("Zlib.Inflate.prototype.decompress", w.prototype.p);
            y = [16, 17, 18, 0, 8, 7,
                9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15
            ];
            B && new Uint16Array(y);
            y = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 258, 258];
            B && new Uint16Array(y);
            y = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0];
            B && new Uint8Array(y);
            y = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577];
            B && new Uint16Array(y);
            y = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13];
            B && new Uint8Array(y);
            y = new(B ?
                Uint8Array : Array)(288);
            C = 0;
            for (F = y.length; C < F; ++C) y[C] = 143 >= C ? 8 : 255 >= C ? 9 : 279 >= C ? 7 : 8;
            a(y);
            y = new(B ? Uint8Array : Array)(30);
            C = 0;
            for (F = y.length; C < F; ++C) y[C] = 5;
            a(y);
            var W = 8
        }).call(window);
        g = window.Zlib;
        g.Deflate = g.Deflate;
        g.Deflate.compress = g.Deflate.compress;
        g.Inflate = g.Inflate;
        g.Inflate.BufferType = g.Inflate.BufferType;
        g.Inflate.prototype.decompress = g.Inflate.prototype.decompress;
        q.exports = g
    }, {}],
    27: [function(g, q, m) {
        function h(a) {
            return a && a.__esModule ? a : {
                default: a
            }
        }

        function e(a, b, c, f) {
            c && Object.defineProperty(a,
                b, {
                    enumerable: c.enumerable,
                    configurable: c.configurable,
                    writable: c.writable,
                    value: c.initializer ? c.initializer.call(f) : void 0
                })
        }

        function d(a, b) {
            for (var f = 0; f < b.length; f++) {
                var d = b[f];
                d.enumerable = d.enumerable || !1;
                d.configurable = !0;
                "value" in d && (d.writable = !0);
                Object.defineProperty(a, c(d.key), d)
            }
        }

        function k(a, b, c) {
            b && d(a.prototype, b);
            c && d(a, c);
            Object.defineProperty(a, "prototype", {
                writable: !1
            });
            return a
        }

        function c(a) {
            a: if ("object" === typeof a && null !== a) {
                $jscomp.initSymbol();
                var b = a[Symbol.toPrimitive];
                if (void 0 !== b) {
                    a = b.call(a, "string");
                    if ("object" !== typeof a) break a;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                a = String(a)
            }return "symbol" === typeof a ? a : String(a)
        }

        function a(a) {
            if (void 0 === a) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return a
        }

        function b(a, b) {
            a.prototype = Object.create(b.prototype);
            a.prototype.constructor = a;
            l(a, b)
        }

        function l(a, b) {
            l = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(a, b) {
                a.__proto__ = b;
                return a
            };
            return l(a, b)
        }

        function f(a, b, c, f, d) {
            var l = {};
            Object.keys(f).forEach(function(a) {
                l[a] = f[a]
            });
            l.enumerable = !!l.enumerable;
            l.configurable = !!l.configurable;
            ("value" in l || l.initializer) && (l.writable = !0);
            l = c.slice().reverse().reduce(function(c, f) {
                return f(a, b, c) || c
            }, l);
            d && void 0 !== l.initializer && (l.value = l.initializer ? l.initializer.call(d) : void 0, l.initializer = void 0);
            void 0 === l.initializer && (Object.defineProperty(a, b, l), l = null);
            return l
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var n = h(g("../../renderer/enums")),
            u = h(g("../value-types/color")),
            v = g("../value-types"),
            p = h(g("../renderer/index")),
            t = h(g("../platform/CCEnum")),
            x = h(g("../components/CCComponent")),
            z = g("../platform/CCClassDecorator"),
            E, w, A, B, y, C, F, G, D, I, K, L, R, M, S, O, Q, V, ba, da, T, N, fa = null;
        !1;
        fa = g("../../renderer/scene/light");
        var Z = (0, t["default"])({
                DIRECTIONAL: 0,
                POINT: 1,
                SPOT: 2,
                AMBIENT: 3
            }),
            W = (0, t["default"])({
                NONE: 0,
                HARD: 2,
                SOFT_PCF3X3: 3,
                SOFT_PCF5X5: 4
            });
        g = (E = (0, z.ccclass)("cc.Light"), w = (0, z.menu)("i18n:MAIN_MENU.component.renderers/Light"), A = (0, z.inspector)("packages://inspector/inspectors/comps/light.js"),
            B = (0, z.help)("i18n:COMPONENT.help_url.light"), y = (0, z.property)({
                type: Z
            }), C = (0, z.property)({
                type: W
            }), E(F = w(F = (0, z.executeInEditMode)(F = A(F = B(F = (G = (N = function(c) {
                    function f() {
                        var b = c.call(this) || this;
                        e(b, "_type", D, a(b));
                        e(b, "_color", I, a(b));
                        e(b, "_intensity", K, a(b));
                        e(b, "_range", L, a(b));
                        e(b, "_spotAngle", R, a(b));
                        e(b, "_spotExp", M, a(b));
                        e(b, "_shadowType", S, a(b));
                        e(b, "_shadowResolution", O, a(b));
                        e(b, "_shadowDarkness", Q, a(b));
                        e(b, "_shadowMinDepth", V, a(b));
                        e(b, "_shadowMaxDepth", ba, a(b));
                        e(b, "_shadowFrustumSize",
                            da, a(b));
                        e(b, "_shadowBias", T, a(b));
                        b._light = new fa;
                        return b
                    }
                    b(f, c);
                    var d = f.prototype;
                    d.onLoad = function() {
                        this._light.setNode(this.node);
                        this.type = this._type;
                        this.color = this._color;
                        this.intensity = this._intensity;
                        this.range = this._range;
                        this.spotAngle = this._spotAngle;
                        this.spotExp = this._spotExp;
                        this.shadowType = this._shadowType;
                        this.shadowResolution = this._shadowResolution;
                        this.shadowDarkness = this._shadowDarkness;
                        this.shadowMaxDepth = this._shadowMaxDepth;
                        this.shadowFrustumSize = this._shadowFrustumSize;
                        this.shadowBias =
                            this._shadowBias
                    };
                    d.onEnable = function() {
                        p["default"].scene.addLight(this._light)
                    };
                    d.onDisable = function() {
                        p["default"].scene.removeLight(this._light)
                    };
                    k(f, [{
                        key: "type",
                        get: function() {
                            return this._type
                        },
                        set: function(a) {
                            this._type = a;
                            var b = n["default"].LIGHT_DIRECTIONAL;
                            a === Z.POINT ? b = n["default"].LIGHT_POINT : a === Z.SPOT ? b = n["default"].LIGHT_SPOT : a === Z.AMBIENT && (b = n["default"].LIGHT_AMBIENT);
                            this._light.setType(b)
                        }
                    }, {
                        key: "color",
                        get: function() {
                            return this._color
                        },
                        set: function(a) {
                            this._color.equals(a) ||
                                this._color.set(a);
                            this._light.setColor(a.r / 255, a.g / 255, a.b / 255)
                        }
                    }, {
                        key: "intensity",
                        get: function() {
                            return this._intensity
                        },
                        set: function(a) {
                            this._intensity = a;
                            this._light.setIntensity(a)
                        }
                    }, {
                        key: "range",
                        get: function() {
                            return this._range
                        },
                        set: function(a) {
                            this._range = a;
                            this._light.setRange(a)
                        }
                    }, {
                        key: "spotAngle",
                        get: function() {
                            return this._spotAngle
                        },
                        set: function(a) {
                            this._spotAngle = a;
                            this._light.setSpotAngle((0, v.toRadian)(a))
                        }
                    }, {
                        key: "spotExp",
                        get: function() {
                            return this._spotExp
                        },
                        set: function(a) {
                            this._spotExp =
                                a;
                            this._light.setSpotExp(a)
                        }
                    }, {
                        key: "shadowType",
                        get: function() {
                            return this._shadowType
                        },
                        set: function(a) {
                            this._shadowType = a;
                            this._light.setShadowType(a)
                        }
                    }, {
                        key: "shadowResolution",
                        get: function() {
                            return this._shadowResolution
                        },
                        set: function(a) {
                            this._shadowResolution = a;
                            this._light.setShadowResolution(a)
                        }
                    }, {
                        key: "shadowDarkness",
                        get: function() {
                            return this._shadowDarkness
                        },
                        set: function(a) {
                            this._shadowDarkness = a;
                            this._light.setShadowDarkness(a)
                        }
                    }, {
                        key: "shadowMinDepth",
                        get: function() {
                            return this._shadowMinDepth
                        },
                        set: function(a) {
                            this._shadowMinDepth = a;
                            this._light.setShadowMinDepth(a)
                        }
                    }, {
                        key: "shadowMaxDepth",
                        get: function() {
                            return this._shadowMaxDepth
                        },
                        set: function(a) {
                            this._shadowMaxDepth = a;
                            this._light.setShadowMaxDepth(a)
                        }
                    }, {
                        key: "shadowFrustumSize",
                        get: function() {
                            return this._shadowFrustumSize
                        },
                        set: function(a) {
                            this._shadowFrustumSize = a;
                            this._light.setShadowFrustumSize(a)
                        }
                    }]);
                    return f
                }(x["default"]), N.Type = Z, N.ShadowType = W, N), D = f(G.prototype, "_type", [z.property], {
                    configurable: !0,
                    enumerable: !0,
                    writable: !0,
                    initializer: function() {
                        return Z.DIRECTIONAL
                    }
                }),
                I = f(G.prototype, "_color", [z.property], {
                    configurable: !0,
                    enumerable: !0,
                    writable: !0,
                    initializer: function() {
                        return u["default"].WHITE
                    }
                }), K = f(G.prototype, "_intensity", [z.property], {
                    configurable: !0,
                    enumerable: !0,
                    writable: !0,
                    initializer: function() {
                        return 1
                    }
                }), L = f(G.prototype, "_range", [z.property], {
                    configurable: !0,
                    enumerable: !0,
                    writable: !0,
                    initializer: function() {
                        return 1E3
                    }
                }), R = f(G.prototype, "_spotAngle", [z.property], {
                    configurable: !0,
                    enumerable: !0,
                    writable: !0,
                    initializer: function() {
                        return 60
                    }
                }), M = f(G.prototype,
                    "_spotExp", [z.property], {
                        configurable: !0,
                        enumerable: !0,
                        writable: !0,
                        initializer: function() {
                            return 1
                        }
                    }), S = f(G.prototype, "_shadowType", [z.property], {
                    configurable: !0,
                    enumerable: !0,
                    writable: !0,
                    initializer: function() {
                        return W.NONE
                    }
                }), O = f(G.prototype, "_shadowResolution", [z.property], {
                    configurable: !0,
                    enumerable: !0,
                    writable: !0,
                    initializer: function() {
                        return 1024
                    }
                }), Q = f(G.prototype, "_shadowDarkness", [z.property], {
                    configurable: !0,
                    enumerable: !0,
                    writable: !0,
                    initializer: function() {
                        return .5
                    }
                }), V = f(G.prototype, "_shadowMinDepth", [z.property], {
                    configurable: !0,
                    enumerable: !0,
                    writable: !0,
                    initializer: function() {
                        return 1
                    }
                }), ba = f(G.prototype, "_shadowMaxDepth", [z.property], {
                    configurable: !0,
                    enumerable: !0,
                    writable: !0,
                    initializer: function() {
                        return 4096
                    }
                }), da = f(G.prototype, "_shadowFrustumSize", [z.property], {
                    configurable: !0,
                    enumerable: !0,
                    writable: !0,
                    initializer: function() {
                        return 1024
                    }
                }), T = f(G.prototype, "_shadowBias", [z.property], {
                    configurable: !0,
                    enumerable: !0,
                    writable: !0,
                    initializer: function() {
                        return 5E-4
                    }
                }), f(G.prototype, "type", [y],
                    Object.getOwnPropertyDescriptor(G.prototype, "type"), G.prototype), f(G.prototype, "color", [z.property], Object.getOwnPropertyDescriptor(G.prototype, "color"), G.prototype), f(G.prototype, "intensity", [z.property], Object.getOwnPropertyDescriptor(G.prototype, "intensity"), G.prototype), f(G.prototype, "range", [z.property], Object.getOwnPropertyDescriptor(G.prototype, "range"), G.prototype), f(G.prototype, "spotAngle", [z.property], Object.getOwnPropertyDescriptor(G.prototype, "spotAngle"), G.prototype), f(G.prototype, "spotExp", [z.property], Object.getOwnPropertyDescriptor(G.prototype, "spotExp"), G.prototype), f(G.prototype, "shadowType", [C], Object.getOwnPropertyDescriptor(G.prototype, "shadowType"), G.prototype), f(G.prototype, "shadowResolution", [z.property], Object.getOwnPropertyDescriptor(G.prototype, "shadowResolution"), G.prototype), f(G.prototype, "shadowDarkness", [z.property], Object.getOwnPropertyDescriptor(G.prototype, "shadowDarkness"), G.prototype), f(G.prototype, "shadowMinDepth", [z.property], Object.getOwnPropertyDescriptor(G.prototype,
                    "shadowMinDepth"), G.prototype), f(G.prototype, "shadowMaxDepth", [z.property], Object.getOwnPropertyDescriptor(G.prototype, "shadowMaxDepth"), G.prototype), f(G.prototype, "shadowFrustumSize", [z.property], Object.getOwnPropertyDescriptor(G.prototype, "shadowFrustumSize"), G.prototype), G)) || F) || F) || F) || F) || F);
        m["default"] = g;
        cc.Light = g;
        q.exports = m["default"]
    }, {
        "../../renderer/enums": 353,
        "../../renderer/scene/light": 379,
        "../components/CCComponent": 138,
        "../platform/CCClassDecorator": 228,
        "../platform/CCEnum": 229,
        "../renderer/index": 259,
        "../value-types": 325,
        "../value-types/color": 324
    }],
    28: [function(g, q, m) {
        g = cc.Class({
            name: "cc.Model",
            extends: cc.Asset,
            ctor: function() {
                this._rootNode = null;
                this.loaded = !1
            },
            properties: {
                _nodes: {
                    default: []
                },
                _precomputeJointMatrix: !1,
                nodes: {
                    get: function() {
                        return this._nodes
                    }
                },
                rootNode: {
                    get: function() {
                        return this._rootNode
                    }
                },
                precomputeJointMatrix: {
                    get: function() {
                        return this._precomputeJointMatrix
                    }
                }
            },
            onLoad: function() {
                var h = this._nodes;
                this._rootNode = h[0];
                for (var e = 0; e < h.length; e++) {
                    var d =
                        h[e];
                    d.position = cc.v3.apply(this, d.position);
                    d.scale = cc.v3.apply(this, d.scale);
                    d.quat = cc.quat.apply(this, d.quat);
                    d.uniqueBindPose && (d.uniqueBindPose = cc.mat4.apply(this, d.uniqueBindPose));
                    var k = d.bindpose;
                    if (k)
                        for (var c in k) k[c] = cc.mat4.apply(this, k[c]);
                    if (d = d.children)
                        for (k = 0; k < d.length; k++) d[k] = h[d[k]]
                }
            }
        });
        cc.Model = q.exports = g
    }, {}],
    29: [function(g, q, m) {
        function h(a) {
            return a && a.__esModule ? a : {
                default: a
            }
        }
        var e = h(g("../value-types/quat")),
            d = h(g("../value-types/vec3")),
            k = cc.quat(),
            c = cc.v3();
        cc.Rotate3DTo =
            cc.Class({
                name: "cc.Rotate3DTo",
                extends: cc.ActionInterval,
                ctor: function(a, b, c, f) {
                    this._startQuat = cc.quat();
                    this._dstQuat = cc.quat();
                    void 0 !== b && this.initWithDuration(a, b, c, f)
                },
                initWithDuration: function(a, b, c, f) {
                    return cc.ActionInterval.prototype.initWithDuration.call(this, a) ? (a = this._dstQuat, b instanceof cc.Quat ? a.set(b) : (b instanceof cc.Vec3 ? (c = b.y, f = b.z, b = b.x) : (c = c || 0, f = f || 0), e["default"].fromEuler(a, b, c, f)), !0) : !1
                },
                clone: function() {
                    var a = new cc.Rotate3DTo;
                    this._cloneDecoration(a);
                    a.initWithDuration(this._duration,
                        this._dstQuat);
                    return a
                },
                startWithTarget: function(a) {
                    cc.ActionInterval.prototype.startWithTarget.call(this, a);
                    this._startQuat.set(a.quat)
                },
                reverse: function() {
                    cc.logID(1016)
                },
                update: function(a) {
                    a = this._computeEaseTime(a);
                    this.target && (e["default"].slerp(k, this._startQuat, this._dstQuat, a), this.target.setRotation(k))
                }
            });
        cc.rotate3DTo = function(a, b, c, f) {
            return new cc.Rotate3DTo(a, b, c, f)
        };
        cc.Rotate3DBy = cc.Class({
            name: "cc.Rotate3DBy",
            extends: cc.ActionInterval,
            ctor: function(a, b, c, f) {
                this._startQuat = cc.quat();
                this._dstQuat = cc.quat();
                this._deltaAngle = cc.v3();
                void 0 !== b && this.initWithDuration(a, b, c, f)
            },
            initWithDuration: function(a, b, c, f) {
                return cc.ActionInterval.prototype.initWithDuration.call(this, a) ? (b instanceof cc.Vec3 ? (c = b.y, f = b.z, b = b.x) : (c = c || 0, f = f || 0), d["default"].set(this._deltaAngle, b, c, f), !0) : !1
            },
            clone: function() {
                var a = new cc.Rotate3DBy;
                this._cloneDecoration(a);
                a.initWithDuration(this._duration, this._angle);
                return a
            },
            startWithTarget: function(a) {
                cc.ActionInterval.prototype.startWithTarget.call(this,
                    a);
                var b = a.eulerAngles,
                    c = this._deltaAngle;
                e["default"].fromEuler(this._dstQuat, b.x + c.x, b.y + c.y, b.z + c.z);
                this._startQuat.set(a.quat)
            },
            update: function() {
                return function(a) {
                    a = this._computeEaseTime(a);
                    this.target && (e["default"].slerp(k, this._startQuat, this._dstQuat, a), this.target.setRotation(k))
                }
            }(),
            reverse: function() {
                var a = this._angle;
                c.x = -a.x;
                c.y = -a.y;
                c.z = -a.z;
                a = new cc.Rotate3DBy(this._duration, c);
                this._cloneDecoration(a);
                this._reverseEaseList(a);
                return a
            }
        });
        cc.rotate3DBy = function(a, b, c, f) {
            return new cc.Rotate3DBy(a,
                b, c, f)
        }
    }, {
        "../value-types/quat": 328,
        "../value-types/vec3": 335
    }],
    30: [function(g, q, m) {
        !0;
        !0;
        g("./primitive");
        g("./physics/exports/physics-builtin");
        g("./physics/exports/physics-cannon");
        g("./physics/exports/physics-framework");
        g("./CCModel");
        g("./skeleton/CCSkeleton");
        g("./skeleton/CCSkeletonAnimationClip");
        g("./actions");
        g("./physics/framework/assets/physics-material");
        !0;
        g("./skeleton/CCSkeletonAnimation");
        g("./skeleton/CCSkinnedMeshRenderer");
        g("./skeleton/skinned-mesh-renderer");
        g("./CCLightComponent");
        g("./particle/particle-system-3d");
        g("./particle/renderer/particle-system-3d-renderer")
    }, {
        "./CCLightComponent": 27,
        "./CCModel": 28,
        "./actions": 29,
        "./particle/particle-system-3d": 46,
        "./particle/renderer/particle-system-3d-renderer": 49,
        "./physics/exports/physics-builtin": void 0,
        "./physics/exports/physics-cannon": void 0,
        "./physics/exports/physics-framework": void 0,
        "./physics/framework/assets/physics-material": void 0,
        "./primitive": void 0,
        "./skeleton/CCSkeleton": 53,
        "./skeleton/CCSkeletonAnimation": 54,
        "./skeleton/CCSkeletonAnimationClip": 55,
        "./skeleton/CCSkinnedMeshRenderer": 56,
        "./skeleton/skinned-mesh-renderer": 57
    }],
    31: [function(g, q, m) {
        function h(a, b, c, f) {
            c && Object.defineProperty(a, b, {
                enumerable: c.enumerable,
                configurable: c.configurable,
                writable: c.writable,
                value: c.initializer ? c.initializer.call(f) : void 0
            })
        }

        function e(a, b, c, f, d) {
            var l = {};
            Object.keys(f).forEach(function(a) {
                l[a] = f[a]
            });
            l.enumerable = !!l.enumerable;
            l.configurable = !!l.configurable;
            ("value" in l || l.initializer) && (l.writable = !0);
            l = c.slice().reverse().reduce(function(c, f) {
                return f(a,
                    b, c) || c
            }, l);
            d && void 0 !== l.initializer && (l.value = l.initializer ? l.initializer.call(d) : void 0, l.initializer = void 0);
            void 0 === l.initializer && (Object.defineProperty(a, b, l), l = null);
            return l
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var d = g("../../../platform/CCClassDecorator"),
            k = g("../../../value-types"),
            c = function(a) {
                return a && a.__esModule ? a : {
                    default: a
                }
            }(g("./gradient-range")),
            a, b, l, f, n, u;
        g = (a = (0, d.ccclass)("cc.ColorOvertimeModule"), b = (0, d.property)({
            type: c["default"]
        }), a(l = (f = function() {
            function a() {
                h(this,
                    "enable", n, this);
                h(this, "color", u, this)
            }
            a.prototype.animate = function(a) {
                this.enable && (a.color.set(a.startColor), a.color.multiply(this.color.evaluate(1 - a.remainingLifetime / a.startLifetime, (0, k.pseudoRandom)(a.randomSeed + 91041))))
            };
            return a
        }(), n = e(f.prototype, "enable", [d.property], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function() {
                return !1
            }
        }), u = e(f.prototype, "color", [b], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function() {
                return new c["default"]
            }
        }), f)) || l);
        m["default"] = g;
        q.exports = m["default"]
    }, {
        "../../../platform/CCClassDecorator": 228,
        "../../../value-types": 325,
        "./gradient-range": 34
    }],
    32: [function(g, q, m) {
        function h(a, b, c, f) {
            c && Object.defineProperty(a, b, {
                enumerable: c.enumerable,
                configurable: c.configurable,
                writable: c.writable,
                value: c.initializer ? c.initializer.call(f) : void 0
            })
        }

        function e(a, b, c, f, d) {
            var l = {};
            Object.keys(f).forEach(function(a) {
                l[a] = f[a]
            });
            l.enumerable = !!l.enumerable;
            l.configurable = !!l.configurable;
            ("value" in l || l.initializer) && (l.writable = !0);
            l = c.slice().reverse().reduce(function(c,
                f) {
                return f(a, b, c) || c
            }, l);
            d && void 0 !== l.initializer && (l.value = l.initializer ? l.initializer.call(d) : void 0, l.initializer = void 0);
            void 0 === l.initializer && (Object.defineProperty(a, b, l), l = null);
            return l
        }
        m.__esModule = !0;
        m["default"] = m.Mode = void 0;
        q = g("../../../platform/CCClassDecorator");
        var d = function(a) {
                return a && a.__esModule ? a : {
                    default: a
                }
            }(g("../../../platform/CCEnum")),
            k = g("../../../value-types"),
            c = g("../curve"),
            a, b, l, f, n, u, v, p, t, x, z, E, w, A, B, y, C = (0, d["default"])({
                Constant: 0,
                Curve: 1,
                TwoCurves: 2,
                TwoConstants: 3
            });
        m.Mode = C;
        g = (a = (0, q.ccclass)("cc.CurveRange"), b = (0, q.property)({
            type: C
        }), l = (0, q.property)({
            type: c.AnimationCurve
        }), f = (0, q.property)({
            type: c.AnimationCurve
        }), n = (0, q.property)({
            type: c.AnimationCurve
        }), a(u = (v = (y = function() {
            function a() {
                h(this, "mode", p, this);
                h(this, "curve", t, this);
                h(this, "curveMin", x, this);
                h(this, "curveMax", z, this);
                h(this, "constant", E, this);
                h(this, "constantMin", w, this);
                h(this, "constantMax", A, this);
                h(this, "multiplier", B, this)
            }
            var b = a.prototype;
            b.evaluate = function(a, b) {
                switch (this.mode) {
                    case C.Constant:
                        return this.constant;
                    case C.Curve:
                        return this.curve.evaluate(a) * this.multiplier;
                    case C.TwoCurves:
                        return (0, k.lerp)(this.curveMin.evaluate(a), this.curveMax.evaluate(a), b) * this.multiplier;
                    case C.TwoConstants:
                        return (0, k.lerp)(this.constantMin, this.constantMax, b)
                }
            };
            b.getMax = function() {
                switch (this.mode) {
                    case C.Constant:
                        return this.constant;
                    case C.Curve:
                        return this.multiplier;
                    case C.TwoConstants:
                        return this.constantMax;
                    case C.TwoCurves:
                        return this.multiplier
                }
                return 0
            };
            return a
        }(), y.Mode = C, y), p = e(v.prototype, "mode", [b], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function() {
                return C.Constant
            }
        }), t = e(v.prototype, "curve", [l], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function() {
                return new c.AnimationCurve
            }
        }), x = e(v.prototype, "curveMin", [f], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function() {
                return new c.AnimationCurve
            }
        }), z = e(v.prototype, "curveMax", [n], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function() {
                return new c.AnimationCurve
            }
        }), E = e(v.prototype, "constant", [q.property], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function() {
                return 0
            }
        }), w = e(v.prototype, "constantMin", [q.property], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function() {
                return 0
            }
        }), A = e(v.prototype, "constantMax", [q.property], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function() {
                return 0
            }
        }), B = e(v.prototype, "multiplier", [q.property], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function() {
                return 1
            }
        }), v)) || u);
        m["default"] = g;
        !1;
        cc.CurveRange = g
    }, {
        "../../../platform/CCClassDecorator": 228,
        "../../../platform/CCEnum": 229,
        "../../../value-types": 325,
        "../curve": 42
    }],
    33: [function(g, q, m) {
        function h(a, b, c, f) {
            c && Object.defineProperty(a, b, {
                enumerable: c.enumerable,
                configurable: c.configurable,
                writable: c.writable,
                value: c.initializer ? c.initializer.call(f) : void 0
            })
        }

        function e(a, b, c, f, d) {
            var l = {};
            Object.keys(f).forEach(function(a) {
                l[a] = f[a]
            });
            l.enumerable = !!l.enumerable;
            l.configurable = !!l.configurable;
            ("value" in l || l.initializer) && (l.writable = !0);
            l = c.slice().reverse().reduce(function(c, f) {
                return f(a,
                    b, c) || c
            }, l);
            d && void 0 !== l.initializer && (l.value = l.initializer ? l.initializer.call(d) : void 0, l.initializer = void 0);
            void 0 === l.initializer && (Object.defineProperty(a, b, l), l = null);
            return l
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var d = g("../../../platform/CCClassDecorator"),
            k = g("../../../value-types"),
            c = g("../enum"),
            a = g("../particle-general-function"),
            b = function(a) {
                return a && a.__esModule ? a : {
                    default: a
                }
            }(g("./curve-range")),
            l, f, n, u, v, p, t, x, z, E, w, A, B = cc.v3();
        g = (l = (0, d.ccclass)("cc.ForceOvertimeModule"), f = (0,
            d.property)({
            type: c.Space
        }), n = (0, d.property)({
            type: b["default"],
            range: [-1, 1]
        }), u = (0, d.property)({
            type: b["default"],
            range: [-1, 1]
        }), v = (0, d.property)({
            type: b["default"],
            range: [-1, 1],
            displayOrder: 4
        }), l(p = (t = function() {
                function b() {
                    h(this, "enable", x, this);
                    h(this, "space", z, this);
                    h(this, "x", E, this);
                    h(this, "y", w, this);
                    h(this, "z", A, this);
                    this.randomized = !1;
                    this.rotation = null;
                    this.needTransform = !1;
                    this.rotation = new k.Quat;
                    this.needTransform = !1
                }
                var c = b.prototype;
                c.update = function(b, c) {
                    this.needTransform = (0,
                        a.calculateTransform)(b, this.space, c, this.rotation)
                };
                c.animate = function(a, b) {
                    var c = 1 - a.remainingLifetime / a.startLifetime;
                    c = k.Vec3.set(B, this.x.evaluate(c, (0, k.pseudoRandom)(a.randomSeed + 212165)), this.y.evaluate(c, (0, k.pseudoRandom)(a.randomSeed + 212165)), this.z.evaluate(c, (0, k.pseudoRandom)(a.randomSeed + 212165)));
                    this.needTransform && k.Vec3.transformQuat(c, c, this.rotation);
                    k.Vec3.scaleAndAdd(a.velocity, a.velocity, c, b)
                };
                return b
            }(), x = e(t.prototype, "enable", [d.property], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }), z = e(t.prototype, "space", [f], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return c.Space.Local
                }
            }), E = e(t.prototype, "x", [n], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new b["default"]
                }
            }), w = e(t.prototype, "y", [u], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new b["default"]
                }
            }), A = e(t.prototype, "z", [v], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new b["default"]
                }
            }),
            t)) || p);
        m["default"] = g;
        q.exports = m["default"]
    }, {
        "../../../platform/CCClassDecorator": 228,
        "../../../value-types": 325,
        "../enum": 44,
        "../particle-general-function": 45,
        "./curve-range": 32
    }],
    34: [function(g, q, m) {
        function h(a, b, c, f) {
            c && Object.defineProperty(a, b, {
                enumerable: c.enumerable,
                configurable: c.configurable,
                writable: c.writable,
                value: c.initializer ? c.initializer.call(f) : void 0
            })
        }

        function e(a, b) {
            for (var c = 0; c < b.length; c++) {
                var f = b[c];
                f.enumerable = f.enumerable || !1;
                f.configurable = !0;
                "value" in f && (f.writable = !0);
                Object.defineProperty(a, k(f.key), f)
            }
        }

        function d(a, b, c) {
            b && e(a.prototype, b);
            c && e(a, c);
            Object.defineProperty(a, "prototype", {
                writable: !1
            });
            return a
        }

        function k(a) {
            a: if ("object" === typeof a && null !== a) {
                $jscomp.initSymbol();
                var b = a[Symbol.toPrimitive];
                if (void 0 !== b) {
                    a = b.call(a, "string");
                    if ("object" !== typeof a) break a;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                a = String(a)
            }return "symbol" === typeof a ? a : String(a)
        }

        function c(a, b, c, f, d) {
            var l = {};
            Object.keys(f).forEach(function(a) {
                l[a] =
                    f[a]
            });
            l.enumerable = !!l.enumerable;
            l.configurable = !!l.configurable;
            ("value" in l || l.initializer) && (l.writable = !0);
            l = c.slice().reverse().reduce(function(c, f) {
                return f(a, b, c) || c
            }, l);
            d && void 0 !== l.initializer && (l.value = l.initializer ? l.initializer.call(d) : void 0, l.initializer = void 0);
            void 0 === l.initializer && (Object.defineProperty(a, b, l), l = null);
            return l
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var a = g("../../../platform/CCClassDecorator"),
            b = function(a) {
                return a && a.__esModule ? a : {
                    default: a
                }
            }(g("../../../platform/CCEnum")),
            l = g("./gradient"),
            f, n, u, v, p, t, x, z, E, w, A, B, y, C, F, G, D = (0, b["default"])({
                Color: 0,
                Gradient: 1,
                TwoColors: 2,
                TwoGradients: 3,
                RandomColor: 4
            });
        g = (f = (0, a.ccclass)("cc.GradientRange"), n = (0, a.property)({
            type: D
        }), u = (0, a.property)({
            type: l.Gradient
        }), v = (0, a.property)({
            type: l.Gradient
        }), p = (0, a.property)({
            type: l.Gradient
        }), f(t = (x = (G = function() {
                function a() {
                    h(this, "_mode", z, this);
                    h(this, "_color", E, this);
                    h(this, "color", w, this);
                    h(this, "colorMin", A, this);
                    h(this, "colorMax", B, this);
                    h(this, "gradient", y, this);
                    h(this, "gradientMin",
                        C, this);
                    h(this, "gradientMax", F, this)
                }
                a.prototype.evaluate = function(a, b) {
                    switch (this._mode) {
                        case D.Color:
                            return this.color;
                        case D.TwoColors:
                            return this.colorMin.lerp(this.colorMax, b, this._color), this._color;
                        case D.RandomColor:
                            return this.gradient.randomColor();
                        case D.Gradient:
                            return this.gradient.evaluate(a);
                        case D.TwoGradients:
                            return this.gradientMin.evaluate(a).lerp(this.gradientMax.evaluate(a), b, this._color), this._color;
                        default:
                            return this.color
                    }
                };
                d(a, [{
                    key: "mode",
                    get: function() {
                        return this._mode
                    },
                    set: function(a) {
                        !1;
                        this._mode = a
                    }
                }]);
                return a
            }(), G.Mode = D, G), z = c(x.prototype, "_mode", [a.property], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return D.Color
                }
            }), c(x.prototype, "mode", [n], Object.getOwnPropertyDescriptor(x.prototype, "mode"), x.prototype), E = c(x.prototype, "_color", [a.property], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return cc.Color.WHITE.clone()
                }
            }), w = c(x.prototype, "color", [a.property], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return cc.Color.WHITE.clone()
                }
            }),
            A = c(x.prototype, "colorMin", [a.property], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return cc.Color.WHITE.clone()
                }
            }), B = c(x.prototype, "colorMax", [a.property], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return cc.Color.WHITE.clone()
                }
            }), y = c(x.prototype, "gradient", [u], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new l.Gradient
                }
            }), C = c(x.prototype, "gradientMin", [v], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new l.Gradient
                }
            }),
            F = c(x.prototype, "gradientMax", [p], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new l.Gradient
                }
            }), x)) || t);
        m["default"] = g;
        !1;
        cc.GradientRange = g;
        q.exports = m["default"]
    }, {
        "../../../platform/CCClassDecorator": 228,
        "../../../platform/CCEnum": 229,
        "./gradient": 35
    }],
    35: [function(g, q, m) {
        function h(a, b, c, f) {
            c && Object.defineProperty(a, b, {
                enumerable: c.enumerable,
                configurable: c.configurable,
                writable: c.writable,
                value: c.initializer ? c.initializer.call(f) : void 0
            })
        }

        function e(a, b, c, f, d) {
            var l = {};
            Object.keys(f).forEach(function(a) {
                l[a] = f[a]
            });
            l.enumerable = !!l.enumerable;
            l.configurable = !!l.configurable;
            ("value" in l || l.initializer) && (l.writable = !0);
            l = c.slice().reverse().reduce(function(c, f) {
                return f(a, b, c) || c
            }, l);
            d && void 0 !== l.initializer && (l.value = l.initializer ? l.initializer.call(d) : void 0, l.initializer = void 0);
            void 0 === l.initializer && (Object.defineProperty(a, b, l), l = null);
            return l
        }
        m.__esModule = !0;
        m.Gradient = m.ColorKey = m.AlphaKey = void 0;
        q = g("../../../platform/CCClassDecorator");
        var d = function(a) {
                return a &&
                    a.__esModule ? a : {
                        default: a
                    }
            }(g("../../../platform/CCEnum")),
            k = g("../../../value-types"),
            c, a, b, l, f, n, u, v, p, t, x, z, E, w, A, B, y, C, F, G, D = (0, d["default"])({
                Blend: 0,
                Fixed: 1
            });
        g = (c = (0, q.ccclass)("cc.ColorKey"), c(a = (b = function() {
                h(this, "color", l, this);
                h(this, "time", f, this)
            }, l = e(b.prototype, "color", [q.property], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return cc.Color.WHITE.clone()
                }
            }), f = e(b.prototype, "time", [q.property], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }),
            b)) || a);
        m.ColorKey = g;
        c = (n = (0, q.ccclass)("cc.AlphaKey"), n(u = (v = function() {
            h(this, "alpha", p, this);
            h(this, "time", t, this)
        }, p = e(v.prototype, "alpha", [q.property], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function() {
                return 1
            }
        }), t = e(v.prototype, "time", [q.property], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function() {
                return 0
            }
        }), v)) || u);
        m.AlphaKey = c;
        n = (x = (0, q.ccclass)("cc.Gradient"), z = (0, q.property)({
            type: [g]
        }), E = (0, q.property)({
            type: [c]
        }), w = (0, q.property)({
            type: D
        }), x(A = (B = (G = function() {
            function a() {
                h(this,
                    "colorKeys", y, this);
                h(this, "alphaKeys", C, this);
                h(this, "mode", F, this);
                this._color = null;
                this._color = cc.Color.WHITE.clone()
            }
            var b = a.prototype;
            b.setKeys = function(a, b) {
                this.colorKeys = a;
                this.alphaKeys = b
            };
            b.sortKeys = function() {
                1 < this.colorKeys.length && this.colorKeys.sort(function(a, b) {
                    return a.time - b.time
                });
                1 < this.alphaKeys.length && this.alphaKeys.sort(function(a, b) {
                    return a.time - b.time
                })
            };
            b.evaluate = function(a) {
                this.getRGB(a);
                this._color._fastSetA(this.getAlpha(a));
                return this._color
            };
            b.randomColor = function() {
                var a =
                    this.alphaKeys[Math.trunc(Math.random() * this.alphaKeys.length)];
                this._color.set(this.colorKeys[Math.trunc(Math.random() * this.colorKeys.length)].color);
                this._color._fastSetA(a.alpha);
                return this._color
            };
            b.getRGB = function(a) {
                if (!(1 < this.colorKeys.length)) {
                    if (1 === this.colorKeys.length) return this._color.set(this.colorKeys[0].color), this._color;
                    this._color.set(cc.Color.WHITE);
                    return this._color
                }
                a = (0, k.repeat)(a, 1);
                for (var b = 1; b < this.colorKeys.length; ++b) {
                    var c = this.colorKeys[b - 1].time,
                        f = this.colorKeys[b].time;
                    if (a >= c && a < f) {
                        if (this.mode === D.Fixed) return this.colorKeys[b].color;
                        this.colorKeys[b - 1].color.lerp(this.colorKeys[b].color, (a - c) / (f - c), this._color);
                        return this._color
                    }
                }
                b = this.colorKeys.length - 1;
                a < this.colorKeys[0].time ? cc.Color.BLACK.lerp(this.colorKeys[0].color, a / this.colorKeys[0].time, this._color) : a > this.colorKeys[b].time && this.colorKeys[b].color.lerp(cc.Color.BLACK, (a - this.colorKeys[b].time) / (1 - this.colorKeys[b].time), this._color)
            };
            b.getAlpha = function(a) {
                if (!(1 < this.alphaKeys.length)) return 1 ===
                    this.alphaKeys.length ? this.alphaKeys[0].alpha : 255;
                a = (0, k.repeat)(a, 1);
                for (var b = 1; b < this.alphaKeys.length; ++b) {
                    var c = this.alphaKeys[b - 1].time,
                        f = this.alphaKeys[b].time;
                    if (a >= c && a < f) {
                        if (this.mode === D.Fixed) return this.alphaKeys[b].alpha;
                        a = (a - c) / (f - c);
                        return (0, k.lerp)(this.alphaKeys[b - 1].alpha, this.alphaKeys[b].alpha, a)
                    }
                }
                b = this.alphaKeys.length - 1;
                if (a < this.alphaKeys[0].time) return (0, k.lerp)(255, this.alphaKeys[0].alpha, a / this.alphaKeys[0].time);
                if (a > this.alphaKeys[b].time) return (0, k.lerp)(this.alphaKeys[b].alpha,
                    255, (a - this.alphaKeys[b].time) / (1 - this.alphaKeys[b].time))
            };
            return a
        }(), G.Mode = D, G), y = e(B.prototype, "colorKeys", [z], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function() {
                return []
            }
        }), C = e(B.prototype, "alphaKeys", [E], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function() {
                return []
            }
        }), F = e(B.prototype, "mode", [w], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function() {
                return D.Blend
            }
        }), B)) || A);
        m.Gradient = n;
        cc.ColorKey = g;
        cc.AlphaKey = c;
        cc.Gradient = n
    }, {
        "../../../platform/CCClassDecorator": 228,
        "../../../platform/CCEnum": 229,
        "../../../value-types": 325
    }],
    36: [function(g, q, m) {
        function h(a, b, c, f) {
            c && Object.defineProperty(a, b, {
                enumerable: c.enumerable,
                configurable: c.configurable,
                writable: c.writable,
                value: c.initializer ? c.initializer.call(f) : void 0
            })
        }

        function e(a, b, c, f, d) {
            var l = {};
            Object.keys(f).forEach(function(a) {
                l[a] = f[a]
            });
            l.enumerable = !!l.enumerable;
            l.configurable = !!l.configurable;
            ("value" in l || l.initializer) && (l.writable = !0);
            l = c.slice().reverse().reduce(function(c, f) {
                return f(a, b, c) || c
            }, l);
            d && void 0 !== l.initializer && (l.value = l.initializer ? l.initializer.call(d) : void 0, l.initializer = void 0);
            void 0 === l.initializer && (Object.defineProperty(a, b, l), l = null);
            return l
        }

        function d(a, b, f) {
            var d = Math.sign(a);
            a = Math.abs(a);
            a > b && (a = (0, c.lerp)(a, b, f));
            return a * d
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var k = g("../../../platform/CCClassDecorator"),
            c = g("../../../value-types"),
            a = g("../enum"),
            b = function(a) {
                return a && a.__esModule ? a : {
                    default: a
                }
            }(g("./curve-range")),
            l, f, n, u, v, p, t, x, z, E, w, A, B, y, C, F, G = cc.v3(),
            D =
            cc.v3();
        g = (l = (0, k.ccclass)("cc.LimitVelocityOvertimeModule"), f = (0, k.property)({
            type: a.Space
        }), n = (0, k.property)({
            type: b["default"],
            range: [-1, 1],
            visible: function() {
                return !this.separateAxes
            }
        }), u = (0, k.property)({
            type: b["default"],
            range: [-1, 1],
            visible: function() {
                return this.separateAxes
            }
        }), v = (0, k.property)({
            type: b["default"],
            range: [-1, 1],
            visible: function() {
                return this.separateAxes
            }
        }), p = (0, k.property)({
            type: b["default"],
            range: [-1, 1],
            visible: function() {
                return this.separateAxes
            }
        }), l(t = (x = function() {
                function a() {
                    h(this,
                        "enable", z, this);
                    h(this, "space", E, this);
                    h(this, "separateAxes", w, this);
                    h(this, "limit", A, this);
                    h(this, "limitX", B, this);
                    h(this, "limitY", y, this);
                    h(this, "limitZ", C, this);
                    h(this, "dampen", F, this);
                    this.drag = null;
                    this.multiplyDragByParticleVelocity = this.multiplyDragByParticleSize = !1;
                    this.rotation = null;
                    this.needTransform = !1;
                    this.rotation = new c.Quat;
                    this.needTransform = !1
                }
                var b = a.prototype;
                b.update = function(a, b) {
                    this.needTransform = calculateTransform(a, this.space, b, this.rotation)
                };
                b.animate = function(a) {
                    var b =
                        1 - a.remainingLifetime / a.startLifetime;
                    this.separateAxes ? (c.Vec3.set(D, this.limitX.evaluate(b, (0, c.pseudoRandom)(a.randomSeed + 23541)), this.limitY.evaluate(b, (0, c.pseudoRandom)(a.randomSeed + 23541)), this.limitZ.evaluate(b, (0, c.pseudoRandom)(a.randomSeed + 23541))), this.needTransform && c.Vec3.transformQuat(D, D, this.rotation), c.Vec3.set(G, d(a.ultimateVelocity.x, D.x, this.dampen), d(a.ultimateVelocity.y, D.y, this.dampen), d(a.ultimateVelocity.z, D.z, this.dampen))) : (c.Vec3.normalize(G, a.ultimateVelocity), c.Vec3.scale(G,
                        G, d(a.ultimateVelocity.len(), this.limit.evaluate(b, (0, c.pseudoRandom)(a.randomSeed + 23541)), this.dampen)));
                    c.Vec3.copy(a.ultimateVelocity, G)
                };
                return a
            }(), z = e(x.prototype, "enable", [k.property], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }), E = e(x.prototype, "space", [f], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return a.Space.Local
                }
            }), w = e(x.prototype, "separateAxes", [k.property], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }),
            A = e(x.prototype, "limit", [n], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new b["default"]
                }
            }), B = e(x.prototype, "limitX", [u], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new b["default"]
                }
            }), y = e(x.prototype, "limitY", [v], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new b["default"]
                }
            }), C = e(x.prototype, "limitZ", [p], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new b["default"]
                }
            }), F = e(x.prototype,
                "dampen", [k.property], {
                    configurable: !0,
                    enumerable: !0,
                    writable: !0,
                    initializer: function() {
                        return 3
                    }
                }), x)) || t);
        m["default"] = g;
        q.exports = m["default"]
    }, {
        "../../../platform/CCClassDecorator": 228,
        "../../../value-types": 325,
        "../enum": 44,
        "./curve-range": 32
    }],
    37: [function(g, q, m) {
        function h(a, b, c, f) {
            c && Object.defineProperty(a, b, {
                enumerable: c.enumerable,
                configurable: c.configurable,
                writable: c.writable,
                value: c.initializer ? c.initializer.call(f) : void 0
            })
        }

        function e(a, b) {
            for (var c = 0; c < b.length; c++) {
                var f = b[c];
                f.enumerable =
                    f.enumerable || !1;
                f.configurable = !0;
                "value" in f && (f.writable = !0);
                Object.defineProperty(a, k(f.key), f)
            }
        }

        function d(a, b, c) {
            b && e(a.prototype, b);
            c && e(a, c);
            Object.defineProperty(a, "prototype", {
                writable: !1
            });
            return a
        }

        function k(a) {
            a: if ("object" === typeof a && null !== a) {
                $jscomp.initSymbol();
                var b = a[Symbol.toPrimitive];
                if (void 0 !== b) {
                    a = b.call(a, "string");
                    if ("object" !== typeof a) break a;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                a = String(a)
            }return "symbol" === typeof a ? a : String(a)
        }

        function c(a,
            b, c, f, d) {
            var l = {};
            Object.keys(f).forEach(function(a) {
                l[a] = f[a]
            });
            l.enumerable = !!l.enumerable;
            l.configurable = !!l.configurable;
            ("value" in l || l.initializer) && (l.writable = !0);
            l = c.slice().reverse().reduce(function(c, f) {
                return f(a, b, c) || c
            }, l);
            d && void 0 !== l.initializer && (l.value = l.initializer ? l.initializer.call(d) : void 0, l.initializer = void 0);
            void 0 === l.initializer && (Object.defineProperty(a, b, l), l = null);
            return l
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var a = g("../../../platform/CCClassDecorator"),
            b = g("../../../value-types"),
            l = function(a) {
                return a && a.__esModule ? a : {
                    default: a
                }
            }(g("./curve-range")),
            f, n, u, v, p, t, x, z, E, w, A;
        g = (f = (0, a.ccclass)("cc.RotationOvertimeModule"), n = (0, a.property)({
            type: l["default"],
            range: [-1, 1],
            radian: !0,
            visible: function() {
                return this._separateAxes
            }
        }), u = (0, a.property)({
            type: l["default"],
            range: [-1, 1],
            radian: !0,
            visible: function() {
                return this._separateAxes
            }
        }), v = (0, a.property)({
            type: l["default"],
            range: [-1, 1],
            radian: !0
        }), f(p = (t = function() {
            function a() {
                h(this, "enable", x, this);
                h(this, "_separateAxes", z, this);
                h(this, "x", E, this);
                h(this, "y", w, this);
                h(this, "z", A, this)
            }
            a.prototype.animate = function(a, c) {
                var f = 1 - a.remainingLifetime / a.startLifetime;
                if (this._separateAxes) {
                    var d = (0, b.pseudoRandom)(a.randomSeed + 125292);
                    a.rotation.x += this.x.evaluate(f, d) * c;
                    a.rotation.y += this.y.evaluate(f, d) * c;
                    a.rotation.z += this.z.evaluate(f, d) * c
                } else a.rotation.x += this.z.evaluate(f, (0, b.pseudoRandom)(a.randomSeed + 125292)) * c
            };
            d(a, [{
                key: "separateAxes",
                get: function() {
                    return this._separateAxes
                },
                set: function(a) {
                    this._separateAxes = a
                }
            }]);
            return a
        }(), x = c(t.prototype, "enable", [a.property], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function() {
                return !1
            }
        }), z = c(t.prototype, "_separateAxes", [a.property], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function() {
                return !1
            }
        }), c(t.prototype, "separateAxes", [a.property], Object.getOwnPropertyDescriptor(t.prototype, "separateAxes"), t.prototype), E = c(t.prototype, "x", [n], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function() {
                return new l["default"]
            }
        }), w = c(t.prototype, "y", [u], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function() {
                return new l["default"]
            }
        }), A = c(t.prototype, "z", [v], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function() {
                return new l["default"]
            }
        }), t)) || p);
        m["default"] = g;
        q.exports = m["default"]
    }, {
        "../../../platform/CCClassDecorator": 228,
        "../../../value-types": 325,
        "./curve-range": 32
    }],
    38: [function(g, q, m) {
        function h(a, b, c, f) {
            c && Object.defineProperty(a, b, {
                enumerable: c.enumerable,
                configurable: c.configurable,
                writable: c.writable,
                value: c.initializer ?
                    c.initializer.call(f) : void 0
            })
        }

        function e(a, b, c, f, d) {
            var l = {};
            Object.keys(f).forEach(function(a) {
                l[a] = f[a]
            });
            l.enumerable = !!l.enumerable;
            l.configurable = !!l.configurable;
            ("value" in l || l.initializer) && (l.writable = !0);
            l = c.slice().reverse().reduce(function(c, f) {
                return f(a, b, c) || c
            }, l);
            d && void 0 !== l.initializer && (l.value = l.initializer ? l.initializer.call(d) : void 0, l.initializer = void 0);
            void 0 === l.initializer && (Object.defineProperty(a, b, l), l = null);
            return l
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var d = g("../../../platform/CCClassDecorator"),
            k = g("../../../value-types"),
            c = function(a) {
                return a && a.__esModule ? a : {
                    default: a
                }
            }(g("./curve-range")),
            a, b, l, f, n, u, v, p, t, x, z, E, w;
        g = (a = (0, d.ccclass)("cc.SizeOvertimeModule"), b = (0, d.property)({
                type: c["default"],
                visible: function() {
                    return !this.separateAxes
                }
            }), l = (0, d.property)({
                type: c["default"],
                visible: function() {
                    return this.separateAxes
                }
            }), f = (0, d.property)({
                type: c["default"],
                visible: function() {
                    return this.separateAxes
                }
            }), n = (0, d.property)({
                type: c["default"],
                visible: function() {
                    return this.separateAxes
                }
            }),
            a(u = (v = function() {
                    function a() {
                        h(this, "enable", p, this);
                        h(this, "separateAxes", t, this);
                        h(this, "size", x, this);
                        h(this, "x", z, this);
                        h(this, "y", E, this);
                        h(this, "z", w, this)
                    }
                    a.prototype.animate = function(a) {
                        if (this.separateAxes) {
                            var b = 1 - a.remainingLifetime / a.startLifetime,
                                c = (0, k.pseudoRandom)(a.randomSeed + 39825);
                            a.size.x = a.startSize.x * this.x.evaluate(b, c);
                            a.size.y = a.startSize.y * this.y.evaluate(b, c);
                            a.size.z = a.startSize.z * this.z.evaluate(b, c)
                        } else k.Vec3.scale(a.size, a.startSize, this.size.evaluate(1 - a.remainingLifetime /
                            a.startLifetime, (0, k.pseudoRandom)(a.randomSeed + 39825)))
                    };
                    return a
                }(), p = e(v.prototype, "enable", [d.property], {
                    configurable: !0,
                    enumerable: !0,
                    writable: !0,
                    initializer: function() {
                        return !1
                    }
                }), t = e(v.prototype, "separateAxes", [d.property], {
                    configurable: !0,
                    enumerable: !0,
                    writable: !0,
                    initializer: function() {
                        return !1
                    }
                }), x = e(v.prototype, "size", [b], {
                    configurable: !0,
                    enumerable: !0,
                    writable: !0,
                    initializer: function() {
                        return new c["default"]
                    }
                }), z = e(v.prototype, "x", [l], {
                    configurable: !0,
                    enumerable: !0,
                    writable: !0,
                    initializer: function() {
                        return new c["default"]
                    }
                }),
                E = e(v.prototype, "y", [f], {
                    configurable: !0,
                    enumerable: !0,
                    writable: !0,
                    initializer: function() {
                        return new c["default"]
                    }
                }), w = e(v.prototype, "z", [n], {
                    configurable: !0,
                    enumerable: !0,
                    writable: !0,
                    initializer: function() {
                        return new c["default"]
                    }
                }), v)) || u);
        m["default"] = g;
        q.exports = m["default"]
    }, {
        "../../../platform/CCClassDecorator": 228,
        "../../../value-types": 325,
        "./curve-range": 32
    }],
    39: [function(g, q, m) {
        function h(a) {
            return a && a.__esModule ? a : {
                default: a
            }
        }

        function e(a, b, c, f) {
            c && Object.defineProperty(a, b, {
                enumerable: c.enumerable,
                configurable: c.configurable,
                writable: c.writable,
                value: c.initializer ? c.initializer.call(f) : void 0
            })
        }

        function d(a, b) {
            for (var f = 0; f < b.length; f++) {
                var d = b[f];
                d.enumerable = d.enumerable || !1;
                d.configurable = !0;
                "value" in d && (d.writable = !0);
                Object.defineProperty(a, c(d.key), d)
            }
        }

        function k(a, b, c) {
            b && d(a.prototype, b);
            c && d(a, c);
            Object.defineProperty(a, "prototype", {
                writable: !1
            });
            return a
        }

        function c(a) {
            a: if ("object" === typeof a && null !== a) {
                $jscomp.initSymbol();
                var b = a[Symbol.toPrimitive];
                if (void 0 !== b) {
                    a = b.call(a,
                        "string");
                    if ("object" !== typeof a) break a;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                a = String(a)
            }return "symbol" === typeof a ? a : String(a)
        }

        function a(a, b, c, f, d) {
            var l = {};
            Object.keys(f).forEach(function(a) {
                l[a] = f[a]
            });
            l.enumerable = !!l.enumerable;
            l.configurable = !!l.configurable;
            ("value" in l || l.initializer) && (l.writable = !0);
            l = c.slice().reverse().reduce(function(c, f) {
                return f(a, b, c) || c
            }, l);
            d && void 0 !== l.initializer && (l.value = l.initializer ? l.initializer.call(d) : void 0, l.initializer =
                void 0);
            void 0 === l.initializer && (Object.defineProperty(a, b, l), l = null);
            return l
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var b = g("../../../platform/CCClassDecorator"),
            l = h(g("../../../platform/CCEnum")),
            f = g("../../../value-types"),
            n = h(g("./curve-range")),
            u, v, p, t, x, z, E, w, A, B, y, C, F, G, D, I, K, L = (0, l["default"])({
                Grid: 0
            }),
            R = (0, l["default"])({
                WholeSheet: 0,
                SingleRow: 1
            });
        g = (u = (0, b.ccclass)("cc.TextureAnimationModule"), v = (0, b.property)({
            type: L
        }), p = (0, b.property)({
            type: R
        }), t = (0, b.property)({
            type: n["default"]
        }), x = (0,
            b.property)({
            type: n["default"]
        }), u(z = (E = function() {
                function a() {
                    e(this, "_enable", w, this);
                    e(this, "_mode", A, this);
                    e(this, "_numTilesX", B, this);
                    e(this, "_numTilesY", y, this);
                    e(this, "animation", C, this);
                    e(this, "randomRow", F, this);
                    e(this, "rowIndex", G, this);
                    e(this, "frameOverTime", D, this);
                    e(this, "startFrame", I, this);
                    e(this, "cycleCount", K, this);
                    this._flipV = this._flipU = 0;
                    this._uvChannelMask = -1;
                    this.ps = null
                }
                var b = a.prototype;
                b.onInit = function(a) {
                    this.ps = a
                };
                b.init = function(a) {
                    a.startRow = Math.floor(Math.random() *
                        this.numTilesY)
                };
                b.animate = function(a) {
                    var b = 1 - a.remainingLifetime / a.startLifetime,
                        c = this.startFrame.evaluate(b, (0, f.pseudoRandom)(a.randomSeed + 90794)) / (this.numTilesX * this.numTilesY);
                    if (this.animation === R.WholeSheet) a.frameIndex = (0, f.repeat)(this.cycleCount * (this.frameOverTime.evaluate(b, (0, f.pseudoRandom)(a.randomSeed + 90794)) + c), 1);
                    else if (this.animation === R.SingleRow) {
                        var d = 1 / this.numTilesY;
                        if (this.randomRow) b = (0, f.repeat)(this.cycleCount * (this.frameOverTime.evaluate(b, (0, f.pseudoRandom)(a.randomSeed +
                            90794)) + c), 1), c = a.startRow * d, d = c + d, a.frameIndex = (0, f.lerp)(c, d, b);
                        else {
                            var l = this.rowIndex * d;
                            d = l + d;
                            a.frameIndex = (0, f.lerp)(l, d, (0, f.repeat)(this.cycleCount * (this.frameOverTime.evaluate(b, (0, f.pseudoRandom)(a.randomSeed + 90794)) + c), 1))
                        }
                    }
                };
                k(a, [{
                        key: "enable",
                        get: function() {
                            return this._enable
                        },
                        set: function(a) {
                            this._enable = a;
                            this.ps._assembler._updateMaterialParams()
                        }
                    }, {
                        key: "mode",
                        get: function() {
                            return this._mode
                        },
                        set: function(a) {
                            a !== L.Grid && console.error("particle texture animation's sprites is not supported!")
                        }
                    },
                    {
                        key: "numTilesX",
                        get: function() {
                            return this._numTilesX
                        },
                        set: function(a) {
                            this._numTilesX !== a && (this._numTilesX = a, this.ps && this.ps._assembler && this.ps._assembler._updateMaterialParams())
                        }
                    }, {
                        key: "numTilesY",
                        get: function() {
                            return this._numTilesY
                        },
                        set: function(a) {
                            this._numTilesY !== a && (this._numTilesY = a, this.ps && this.ps._assembler && this.ps._assembler._updateMaterialParams())
                        }
                    }, {
                        key: "flipU",
                        get: function() {
                            return this._flipU
                        },
                        set: function(a) {
                            console.error("particle texture animation's flipU is not supported!")
                        }
                    },
                    {
                        key: "flipV",
                        get: function() {
                            return this._flipV
                        },
                        set: function(a) {
                            console.error("particle texture animation's flipV is not supported!")
                        }
                    }, {
                        key: "uvChannelMask",
                        get: function() {
                            return this._uvChannelMask
                        },
                        set: function(a) {
                            console.error("particle texture animation's uvChannelMask is not supported!")
                        }
                    }
                ]);
                return a
            }(), w = a(E.prototype, "_enable", [b.property], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }), a(E.prototype, "enable", [b.property], Object.getOwnPropertyDescriptor(E.prototype,
                "enable"), E.prototype), A = a(E.prototype, "_mode", [b.property], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return L.Grid
                }
            }), a(E.prototype, "mode", [v], Object.getOwnPropertyDescriptor(E.prototype, "mode"), E.prototype), B = a(E.prototype, "_numTilesX", [b.property], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }), a(E.prototype, "numTilesX", [b.property], Object.getOwnPropertyDescriptor(E.prototype, "numTilesX"), E.prototype), y = a(E.prototype, "_numTilesY", [b.property], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }), a(E.prototype, "numTilesY", [b.property], Object.getOwnPropertyDescriptor(E.prototype, "numTilesY"), E.prototype), C = a(E.prototype, "animation", [p], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return R.WholeSheet
                }
            }), F = a(E.prototype, "randomRow", [b.property], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }), G = a(E.prototype, "rowIndex", [b.property], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }), D = a(E.prototype, "frameOverTime", [t], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new n["default"]
                }
            }), I = a(E.prototype, "startFrame", [x], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new n["default"]
                }
            }), K = a(E.prototype, "cycleCount", [b.property], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }), a(E.prototype, "flipU", [b.property], Object.getOwnPropertyDescriptor(E.prototype, "flipU"), E.prototype),
            a(E.prototype, "flipV", [b.property], Object.getOwnPropertyDescriptor(E.prototype, "flipV"), E.prototype), a(E.prototype, "uvChannelMask", [b.property], Object.getOwnPropertyDescriptor(E.prototype, "uvChannelMask"), E.prototype), E)) || z);
        m["default"] = g;
        q.exports = m["default"]
    }, {
        "../../../platform/CCClassDecorator": 228,
        "../../../platform/CCEnum": 229,
        "../../../value-types": 325,
        "./curve-range": 32
    }],
    40: [function(g, q, m) {
        function h(a, b, c, f) {
            c && Object.defineProperty(a, b, {
                enumerable: c.enumerable,
                configurable: c.configurable,
                writable: c.writable,
                value: c.initializer ? c.initializer.call(f) : void 0
            })
        }

        function e(a, b, c, f, d) {
            var l = {};
            Object.keys(f).forEach(function(a) {
                l[a] = f[a]
            });
            l.enumerable = !!l.enumerable;
            l.configurable = !!l.configurable;
            ("value" in l || l.initializer) && (l.writable = !0);
            l = c.slice().reverse().reduce(function(c, f) {
                return f(a, b, c) || c
            }, l);
            d && void 0 !== l.initializer && (l.value = l.initializer ? l.initializer.call(d) : void 0, l.initializer = void 0);
            void 0 === l.initializer && (Object.defineProperty(a, b, l), l = null);
            return l
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var d = g("../../../platform/CCClassDecorator"),
            k = g("../../../value-types"),
            c = g("../enum"),
            a = g("../particle-general-function"),
            b = function(a) {
                return a && a.__esModule ? a : {
                    default: a
                }
            }(g("./curve-range")),
            l, f, n, u, v, p, t, x, z, E, w, A, B, y, C = cc.v3();
        g = (l = (0, d.ccclass)("cc.VelocityOvertimeModule"), f = (0, d.property)({
            type: c.Space
        }), n = (0, d.property)({
            type: b["default"],
            range: [-1, 1]
        }), u = (0, d.property)({
            type: b["default"],
            range: [-1, 1]
        }), v = (0, d.property)({
            type: b["default"],
            range: [-1, 1]
        }), p = (0, d.property)({
            type: b["default"],
            range: [-1, 1]
        }), l(t = (x = function() {
                function b() {
                    h(this, "enable", z, this);
                    h(this, "space", E, this);
                    h(this, "x", w, this);
                    h(this, "y", A, this);
                    h(this, "z", B, this);
                    h(this, "speedModifier", y, this);
                    this.rotation = null;
                    this.needTransform = !1;
                    this.rotation = new k.Quat;
                    this.speedModifier.constant = 1;
                    this.needTransform = !1
                }
                var c = b.prototype;
                c.update = function(b, c) {
                    this.needTransform = (0, a.calculateTransform)(b, this.space, c, this.rotation)
                };
                c.animate = function(a) {
                    var b = 1 - a.remainingLifetime / a.startLifetime;
                    b = k.Vec3.set(C, this.x.evaluate(b,
                        (0, k.pseudoRandom)(a.randomSeed + 197866)), this.y.evaluate(b, (0, k.pseudoRandom)(a.randomSeed + 197866)), this.z.evaluate(b, (0, k.pseudoRandom)(a.randomSeed + 197866)));
                    this.needTransform && k.Vec3.transformQuat(b, b, this.rotation);
                    k.Vec3.add(a.animatedVelocity, a.animatedVelocity, b);
                    k.Vec3.add(a.ultimateVelocity, a.velocity, a.animatedVelocity);
                    k.Vec3.scale(a.ultimateVelocity, a.ultimateVelocity, this.speedModifier.evaluate(1 - a.remainingLifetime / a.startLifetime, (0, k.pseudoRandom)(a.randomSeed + 197866)))
                };
                return b
            }(),
            z = e(x.prototype, "enable", [d.property], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }), E = e(x.prototype, "space", [f], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return c.Space.Local
                }
            }), w = e(x.prototype, "x", [n], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new b["default"]
                }
            }), A = e(x.prototype, "y", [u], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new b["default"]
                }
            }), B = e(x.prototype, "z", [v], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new b["default"]
                }
            }), y = e(x.prototype, "speedModifier", [p], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new b["default"]
                }
            }), x)) || t);
        m["default"] = g;
        q.exports = m["default"]
    }, {
        "../../../platform/CCClassDecorator": 228,
        "../../../value-types": 325,
        "../enum": 44,
        "../particle-general-function": 45,
        "./curve-range": 32
    }],
    41: [function(g, q, m) {
        function h(a, b, c, f) {
            c && Object.defineProperty(a, b, {
                enumerable: c.enumerable,
                configurable: c.configurable,
                writable: c.writable,
                value: c.initializer ? c.initializer.call(f) : void 0
            })
        }

        function e(a, b) {
            for (var c = 0; c < b.length; c++) {
                var f = b[c];
                f.enumerable = f.enumerable || !1;
                f.configurable = !0;
                "value" in f && (f.writable = !0);
                Object.defineProperty(a, k(f.key), f)
            }
        }

        function d(a, b, c) {
            b && e(a.prototype, b);
            c && e(a, c);
            Object.defineProperty(a, "prototype", {
                writable: !1
            });
            return a
        }

        function k(a) {
            a: if ("object" === typeof a && null !== a) {
                $jscomp.initSymbol();
                var b = a[Symbol.toPrimitive];
                if (void 0 !== b) {
                    a = b.call(a, "string");
                    if ("object" !== typeof a) break a;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                a = String(a)
            }return "symbol" === typeof a ? a : String(a)
        }

        function c(a, b, c, f, d) {
            var l = {};
            Object.keys(f).forEach(function(a) {
                l[a] = f[a]
            });
            l.enumerable = !!l.enumerable;
            l.configurable = !!l.configurable;
            ("value" in l || l.initializer) && (l.writable = !0);
            l = c.slice().reverse().reduce(function(c, f) {
                return f(a, b, c) || c
            }, l);
            d && void 0 !== l.initializer && (l.value = l.initializer ? l.initializer.call(d) : void 0, l.initializer = void 0);
            void 0 === l.initializer && (Object.defineProperty(a,
                b, l), l = null);
            return l
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var a = g("../../platform/CCClassDecorator"),
            b = g("../../value-types"),
            l = function(a) {
                return a && a.__esModule ? a : {
                    default: a
                }
            }(g("./animator/curve-range")),
            f, n, u, v, p, t, x, z, E, w;
        g = (f = (0, a.ccclass)("cc.Burst"), n = (0, a.property)({
            type: l["default"]
        }), f(u = (v = function() {
            function a() {
                h(this, "_time", p, this);
                h(this, "minCount", t, this);
                h(this, "maxCount", x, this);
                h(this, "_repeatCount", z, this);
                h(this, "repeatInterval", E, this);
                h(this, "count", w, this);
                this._curTime =
                    this._remainingCount = this._curTime = this._remainingCount = 0
            }
            var c = a.prototype;
            c.update = function(a, c) {
                0 === this._remainingCount && (this._remainingCount = this._repeatCount, this._curTime = this._time);
                if (0 < this._remainingCount) {
                    var f = (0, b.repeat)(a._time - a.startDelay.evaluate(0, 1), a.duration) - c;
                    f = 0 < f ? f : 0;
                    var d = (0, b.repeat)(a.time - a.startDelay.evaluate(0, 1), a.duration);
                    this._curTime >= f && this._curTime < d && (a.emit(this.count.evaluate(this._curTime / a.duration, 1), c - (d - this._curTime)), this._curTime += this.repeatInterval,
                        --this._remainingCount)
                }
            };
            c.getMaxCount = function(a) {
                return this.count.getMax() * Math.min(Math.ceil(a.duration / this.repeatInterval), this.repeatCount)
            };
            d(a, [{
                key: "time",
                get: function() {
                    return this._time
                },
                set: function(a) {
                    this._curTime = this._time = a
                }
            }, {
                key: "repeatCount",
                get: function() {
                    return this._repeatCount
                },
                set: function(a) {
                    this._remainingCount = this._repeatCount = a
                }
            }]);
            return a
        }(), p = c(v.prototype, "_time", [a.property], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function() {
                return 0
            }
        }), c(v.prototype,
            "time", [a.property], Object.getOwnPropertyDescriptor(v.prototype, "time"), v.prototype), t = c(v.prototype, "minCount", [a.property], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function() {
                return 30
            }
        }), x = c(v.prototype, "maxCount", [a.property], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function() {
                return 30
            }
        }), z = c(v.prototype, "_repeatCount", [a.property], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function() {
                return 1
            }
        }), c(v.prototype, "repeatCount", [a.property], Object.getOwnPropertyDescriptor(v.prototype,
            "repeatCount"), v.prototype), E = c(v.prototype, "repeatInterval", [a.property], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function() {
                return 1
            }
        }), w = c(v.prototype, "count", [n], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function() {
                return new l["default"]
            }
        }), v)) || u);
        m["default"] = g;
        q.exports = m["default"]
    }, {
        "../../platform/CCClassDecorator": 228,
        "../../value-types": 325,
        "./animator/curve-range": 32
    }],
    42: [function(g, q, m) {
        function h(a, b, c, f) {
            c && Object.defineProperty(a, b, {
                enumerable: c.enumerable,
                configurable: c.configurable,
                writable: c.writable,
                value: c.initializer ? c.initializer.call(f) : void 0
            })
        }

        function e(a, b, c, f, d) {
            var l = {};
            Object.keys(f).forEach(function(a) {
                l[a] = f[a]
            });
            l.enumerable = !!l.enumerable;
            l.configurable = !!l.configurable;
            ("value" in l || l.initializer) && (l.writable = !0);
            l = c.slice().reverse().reduce(function(c, f) {
                return f(a, b, c) || c
            }, l);
            d && void 0 !== l.initializer && (l.value = l.initializer ? l.initializer.call(d) : void 0, l.initializer = void 0);
            void 0 === l.initializer && (Object.defineProperty(a, b,
                l), l = null);
            return l
        }

        function d(a, b) {
            return a * (a * (a * b[0] + b[1]) + b[2]) + b[3]
        }
        m.__esModule = !0;
        m.OptimizedKey = m.Keyframe = m.AnimationCurve = void 0;
        m.evalOptCurve = d;
        q = function(a) {
            return a && a.__esModule ? a : {
                default: a
            }
        }(g("../../platform/CCEnum"));
        var k = g("../../value-types");
        g = g("../../platform/CCClassDecorator");
        var c, a, b, l, f, n, u, v, p, t, x, z, E, w, A, B, y = (0, q["default"])({
            Default: 0,
            Once: 1,
            Loop: 2,
            PingPong: 3,
            ClampForever: 4
        });
        q = (c = (0, g.ccclass)("cc.Keyframe"), c(a = (b = function(a, b, c, d) {
            h(this, "time", l, this);
            h(this, "value",
                f, this);
            h(this, "inTangent", n, this);
            h(this, "outTangent", u, this);
            this.time = a || 0;
            this.value = b || 0;
            this.inTangent = c || 0;
            this.outTangent = d || 0
        }, l = e(b.prototype, "time", [g.property], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function() {
                return 0
            }
        }), f = e(b.prototype, "value", [g.property], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function() {
                return 0
            }
        }), n = e(b.prototype, "inTangent", [g.property], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function() {
                return 0
            }
        }), u = e(b.prototype, "outTangent", [g.property], {
            configurable: !0,
            enumerable: !0,
            writable: !0,
            initializer: function() {
                return 0
            }
        }), b)) || a);
        m.Keyframe = q;
        var C = function() {
            function a() {
                this.endTime = this.time = this.index = 0;
                this.coefficient = null;
                this.index = -1;
                this.endTime = this.time = 0;
                this.coefficient = new Float32Array(4)
            }
            a.prototype.evaluate = function(a) {
                return d(a - this.time, this.coefficient)
            };
            return a
        }();
        m.OptimizedKey = C;
        var F = new q(0, 1, 0, 0),
            G = new q(1, 1, 0, 0);
        c = (v = (0, g.ccclass)("cc.AnimationCurve"), p = (0, g.property)({
            type: [q]
        }), t = (0, g.property)({
            type: cc.Enum(y),
            visible: !1
        }), x = (0, g.property)({
            type: cc.Enum(y),
            visible: !1
        }), v(z = (E = function() {
                function a(a) {
                    void 0 === a && (a = null);
                    h(this, "keyFrames", w, this);
                    h(this, "preWrapMode", A, this);
                    h(this, "postWrapMode", B, this);
                    this.cachedKey = null;
                    a ? this.keyFrames = a : (this.keyFrames.push(F), this.keyFrames.push(G));
                    this.cachedKey = new C
                }
                var b = a.prototype;
                b.addKey = function(a) {
                    null == this.keyFrames && (this.keyFrames = []);
                    this.keyFrames.push(a)
                };
                b.evaluate_slow = function(a) {
                    var b = a,
                        c = this.keyFrames[0].time,
                        f = this.keyFrames[this.keyFrames.length -
                            1].time;
                    switch (0 > a ? this.preWrapMode : this.postWrapMode) {
                        case y.Loop:
                            b = (0, k.repeat)(a - c, f - c) + c;
                            break;
                        case y.PingPong:
                            b = (0, k.pingPong)(a - c, f - c) + c;
                            break;
                        case y.ClampForever:
                            b = (0, k.clamp)(a, c, f)
                    }
                    c = 0;
                    if (b > this.keyFrames[0].time)
                        if (b >= this.keyFrames[this.keyFrames.length - 1].time) c = this.keyFrames.length - 2;
                        else
                            for (a = 0; a < this.keyFrames.length - 1; a++)
                                if (b >= this.keyFrames[0].time && b <= this.keyFrames[a + 1].time) {
                                    c = a;
                                    break
                                }
                    a = this.keyFrames[c];
                    c = this.keyFrames[c + 1];
                    b = (0, k.inverseLerp)(a.time, c.time, b);
                    f = c.time - a.time;
                    var d = b * b,
                        l = d * b;
                    return (2 * l - 3 * d + 1) * a.value + (l - 2 * d + b) * a.outTangent * f + (l - d) * c.inTangent * f + (-2 * l + 3 * d) * c.value
                };
                b.evaluate = function(a) {
                    var b = a,
                        c = this.keyFrames[0].time,
                        f = this.keyFrames[this.keyFrames.length - 1].time;
                    switch (0 > a ? this.preWrapMode : this.postWrapMode) {
                        case y.Loop:
                            b = (0, k.repeat)(a - c, f - c) + c;
                            break;
                        case y.PingPong:
                            b = (0, k.pingPong)(a - c, f - c) + c;
                            break;
                        case y.ClampForever:
                            b = (0, k.clamp)(a, c, f)
                    }!0;
                    if (b >= this.cachedKey.time && b < this.cachedKey.endTime) return this.cachedKey.evaluate(b);
                    a = this.findIndex(this.cachedKey,
                        b);
                    this.calcOptimizedKey(this.cachedKey, a, Math.min(a + 1, this.keyFrames.length - 1));
                    return this.cachedKey.evaluate(b)
                };
                b.calcOptimizedKey = function(a, b, c) {
                    var f = this.keyFrames[b];
                    c = this.keyFrames[c];
                    a.index = b;
                    a.time = f.time;
                    a.endTime = c.time;
                    b = c.time - f.time;
                    var d = c.value - f.value,
                        l = 1 / (b * b),
                        n = f.outTangent * b;
                    c = c.inTangent * b;
                    a.coefficient[0] = (n + c - d - d) * l / b;
                    a.coefficient[1] = (d + d + d - n - n - c) * l;
                    a.coefficient[2] = f.outTangent;
                    a.coefficient[3] = f.value
                };
                b.findIndex = function(a, b) {
                    a = a.index;
                    if (-1 !== a)
                        if (b > this.keyFrames[a].time)
                            for (var c =
                                    0; 3 > c; c++) {
                                var f = a + c;
                                if (f + 1 < this.keyFrames.length && this.keyFrames[f + 1].time > b) return f
                            } else
                                for (c = 0; 3 > c; c++)
                                    if (f = a - c, 0 <= f - 1 && this.keyFrames[f - 1].time <= b) return f - 1;
                    a = 0;
                    for (c = this.keyFrames.length; 1 < c - a;) f = Math.floor((a + c) / 2), this.keyFrames[f].time >= b ? c = f : a = f;
                    return a
                };
                return a
            }(), w = e(E.prototype, "keyFrames", [p], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return []
                }
            }), A = e(E.prototype, "preWrapMode", [t], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return y.ClampForever
                }
            }),
            B = e(E.prototype, "postWrapMode", [x], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return y.ClampForever
                }
            }), E)) || z);
        m.AnimationCurve = c;
        cc.Keyframe = q;
        cc.AnimationCurve = c
    }, {
        "../../platform/CCClassDecorator": 228,
        "../../platform/CCEnum": 229,
        "../../value-types": 325
    }],
    43: [function(g, q, m) {
        function h(a, b, c, f) {
            c && Object.defineProperty(a, b, {
                enumerable: c.enumerable,
                configurable: c.configurable,
                writable: c.writable,
                value: c.initializer ? c.initializer.call(f) : void 0
            })
        }

        function e(a, b) {
            for (var c = 0; c <
                b.length; c++) {
                var f = b[c];
                f.enumerable = f.enumerable || !1;
                f.configurable = !0;
                "value" in f && (f.writable = !0);
                Object.defineProperty(a, k(f.key), f)
            }
        }

        function d(a, b, c) {
            b && e(a.prototype, b);
            c && e(a, c);
            Object.defineProperty(a, "prototype", {
                writable: !1
            });
            return a
        }

        function k(a) {
            a: if ("object" === typeof a && null !== a) {
                $jscomp.initSymbol();
                var b = a[Symbol.toPrimitive];
                if (void 0 !== b) {
                    a = b.call(a, "string");
                    if ("object" !== typeof a) break a;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                a = String(a)
            }return "symbol" ===
                typeof a ? a : String(a)
        }

        function c(a, b, c, f, d) {
            var l = {};
            Object.keys(f).forEach(function(a) {
                l[a] = f[a]
            });
            l.enumerable = !!l.enumerable;
            l.configurable = !!l.configurable;
            ("value" in l || l.initializer) && (l.writable = !0);
            l = c.slice().reverse().reduce(function(c, f) {
                return f(a, b, c) || c
            }, l);
            d && void 0 !== l.initializer && (l.value = l.initializer ? l.initializer.call(d) : void 0, l.initializer = void 0);
            void 0 === l.initializer && (Object.defineProperty(a, b, l), l = null);
            return l
        }

        function a(a, b) {
            0 < b.x && (a[0] += .5 * (0, l.randomRange)(-b.x, b.x),
                a[0] = (0, l.clamp)(a[0], -.5, .5));
            0 < b.y && (a[1] += .5 * (0, l.randomRange)(-b.y, b.y), a[1] = (0, l.clamp)(a[1], -.5, .5));
            0 < b.z && (a[2] += .5 * (0, l.randomRange)(-b.z, b.z), a[2] = (0, l.clamp)(a[2], -.5, .5))
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var b = g("../../../platform/CCClassDecorator"),
            l = g("../../../value-types"),
            f = function(a) {
                return a && a.__esModule ? a : {
                    default: a
                }
            }(g("../animator/curve-range")),
            n = g("../particle-general-function"),
            u = g("../enum"),
            v, p, t, x, z, E, w, A, B, y, C, F, G, D, I, K, L, R, M, S, O, Q, V, ba, da, T, N = new l.Vec3(0, 0, 0),
            fa = [],
            Z = new l.Vec3(.5, .5, .5);
        g = (v = (0, b.ccclass)("cc.ShapeModule"), p = (0, b.property)({
            type: u.ShapeType
        }), t = (0, b.property)({
            type: u.EmitLocation
        }), x = (0, b.property)({
            type: u.ArcMode
        }), z = (0, b.property)({
            type: f["default"]
        }), v(E = (w = function() {
                function b() {
                    h(this, "enable", A, this);
                    h(this, "_shapeType", B, this);
                    h(this, "emitFrom", y, this);
                    h(this, "radius", C, this);
                    h(this, "radiusThickness", F, this);
                    h(this, "_angle", G, this);
                    h(this, "_arc", D, this);
                    h(this, "arcMode", I, this);
                    h(this, "arcSpread", K, this);
                    h(this, "arcSpeed", L, this);
                    h(this, "length", R, this);
                    h(this, "boxThickness", M, this);
                    h(this, "_position", S, this);
                    h(this, "_rotation", O, this);
                    h(this, "_scale", Q, this);
                    h(this, "alignToDirection", V, this);
                    h(this, "randomDirectionAmount", ba, this);
                    h(this, "sphericalDirectionAmount", da, this);
                    h(this, "randomPositionAmount", T, this);
                    this.totalAngle = this.lastTime = this.particleSystem = this.Quat = this.mat = null;
                    this.mat = new l.Mat4;
                    this.quat = new l.Quat;
                    this.particleSystem = null;
                    this.totalAngle = this.lastTime = 0
                }
                var c = b.prototype;
                c.onInit = function(a) {
                    this.particleSystem =
                        a;
                    this.constructMat();
                    this.lastTime = this.particleSystem._time
                };
                c.constructMat = function() {
                    l.Quat.fromEuler(this.quat, this._rotation.x, this._rotation.y, this._rotation.z);
                    l.Mat4.fromRTS(this.mat, this.quat, this._position, this._scale)
                };
                c.emit = function(b) {
                    switch (this.shapeType) {
                        case u.ShapeType.Box:
                            var c = this.emitFrom,
                                f = this.boxThickness,
                                d = b.position,
                                k = b.velocity;
                            switch (c) {
                                case u.EmitLocation.Volume:
                                    (0, n.randomPointInCube)(d, Z);
                                    break;
                                case u.EmitLocation.Shell:
                                    fa.splice(0, fa.length);
                                    fa.push((0, l.randomRange)(-.5,
                                        .5));
                                    fa.push((0, l.randomRange)(-.5, .5));
                                    fa.push(.5 * (0, n.randomSign)());
                                    (0, n.randomSortArray)(fa);
                                    a(fa, f);
                                    l.Vec3.set(d, fa[0], fa[1], fa[2]);
                                    break;
                                case u.EmitLocation.Edge:
                                    fa.splice(0, fa.length);
                                    fa.push((0, l.randomRange)(-.5, .5));
                                    fa.push(.5 * (0, n.randomSign)());
                                    fa.push(.5 * (0, n.randomSign)());
                                    (0, n.randomSortArray)(fa);
                                    a(fa, f);
                                    l.Vec3.set(d, fa[0], fa[1], fa[2]);
                                    break;
                                default:
                                    console.warn(c + " is not supported for box emitter.")
                            }
                            l.Vec3.copy(k, n.particleEmitZAxis);
                            break;
                        case u.ShapeType.Circle:
                            c = this.radius;
                            f =
                                this.radiusThickness;
                            d = this.generateArcAngle();
                            k = b.position;
                            var p = b.velocity;
                            (0, n.randomPointBetweenCircleAtFixedAngle)(k, c * (1 - f), c, d);
                            l.Vec3.normalize(p, k);
                            break;
                        case u.ShapeType.Cone:
                            c = this.emitFrom;
                            f = this.radius;
                            d = this.radiusThickness;
                            k = this.generateArcAngle();
                            p = this._angle;
                            var t = this.length,
                                v = b.position,
                                e = b.velocity;
                            switch (c) {
                                case u.EmitLocation.Base:
                                    (0, n.randomPointBetweenCircleAtFixedAngle)(v, f * (1 - d), f, k);
                                    l.Vec2.scale(e, v, Math.sin(p));
                                    e.z = -Math.cos(p) * f;
                                    l.Vec3.normalize(e, e);
                                    v.z = 0;
                                    break;
                                case u.EmitLocation.Shell:
                                    (0,
                                        n.fixedAngleUnitVector2)(v, k);
                                    l.Vec2.scale(e, v, Math.sin(p));
                                    e.z = -Math.cos(p);
                                    l.Vec3.normalize(e, e);
                                    l.Vec2.scale(v, v, f);
                                    v.z = 0;
                                    break;
                                case u.EmitLocation.Volume:
                                    (0, n.randomPointBetweenCircleAtFixedAngle)(v, f * (1 - d), f, k);
                                    l.Vec2.scale(e, v, Math.sin(p));
                                    e.z = -Math.cos(p) * f;
                                    l.Vec3.normalize(e, e);
                                    v.z = 0;
                                    l.Vec3.add(v, v, l.Vec3.scale(N, e, t * (0, l.random)() / -e.z));
                                    break;
                                default:
                                    console.warn(c + " is not supported for cone emitter.")
                            }
                            break;
                        case u.ShapeType.Sphere:
                            c = this.emitFrom;
                            f = this.radius;
                            d = this.radiusThickness;
                            k =
                                b.position;
                            p = b.velocity;
                            switch (c) {
                                case u.EmitLocation.Volume:
                                    (0, n.randomPointBetweenSphere)(k, f * (1 - d), f);
                                    l.Vec3.copy(p, k);
                                    l.Vec3.normalize(p, p);
                                    break;
                                case u.EmitLocation.Shell:
                                    (0, n.randomUnitVector)(k);
                                    l.Vec3.scale(k, k, f);
                                    l.Vec3.copy(p, k);
                                    break;
                                default:
                                    console.warn(c + " is not supported for sphere emitter.")
                            }
                            break;
                        case u.ShapeType.Hemisphere:
                            c = this.emitFrom;
                            f = this.radius;
                            d = this.radiusThickness;
                            k = b.position;
                            p = b.velocity;
                            switch (c) {
                                case u.EmitLocation.Volume:
                                    (0, n.randomPointBetweenSphere)(k, f * (1 - d), f);
                                    0 < k.z && (k.z *= -1);
                                    l.Vec3.copy(p, k);
                                    l.Vec3.normalize(p, p);
                                    break;
                                case u.EmitLocation.Shell:
                                    (0, n.randomUnitVector)(k);
                                    l.Vec3.scale(k, k, f);
                                    0 > k.z && (k.z *= -1);
                                    l.Vec3.copy(p, k);
                                    break;
                                default:
                                    console.warn(c + " is not supported for hemisphere emitter.")
                            }
                            break;
                        default:
                            console.warn(this.shapeType + " shapeType is not supported by ShapeModule.")
                    }
                    0 < this.randomPositionAmount && (b.position.x += (0, l.randomRange)(-this.randomPositionAmount, this.randomPositionAmount), b.position.y += (0, l.randomRange)(-this.randomPositionAmount,
                        this.randomPositionAmount), b.position.z += (0, l.randomRange)(-this.randomPositionAmount, this.randomPositionAmount));
                    l.Vec3.transformQuat(b.velocity, b.velocity, this.quat);
                    l.Vec3.transformMat4(b.position, b.position, this.mat);
                    0 < this.sphericalDirectionAmount && (c = l.Vec3.normalize(N, b.position), l.Vec3.lerp(b.velocity, b.velocity, c, this.sphericalDirectionAmount));
                    this.lastTime = this.particleSystem._time
                };
                c.generateArcAngle = function() {
                    if (this.arcMode === u.ArcMode.Random) return (0, l.randomRange)(0, this._arc);
                    var a =
                        this.totalAngle + 2 * Math.PI * this.arcSpeed.evaluate(this.particleSystem._time, 1) * (this.particleSystem._time - this.lastTime);
                    this.totalAngle = a;
                    0 !== this.arcSpread && (a = Math.floor(a / (this._arc * this.arcSpread)) * this._arc * this.arcSpread);
                    switch (this.arcMode) {
                        case u.ArcMode.Loop:
                            return (0, l.repeat)(a, this._arc);
                        case u.ArcMode.PingPong:
                            return (0, l.pingPong)(a, this._arc)
                    }
                };
                d(b, [{
                    key: "shapeType",
                    get: function() {
                        return this._shapeType
                    },
                    set: function(a) {
                        this._shapeType = a;
                        switch (this._shapeType) {
                            case u.ShapeType.Box:
                                this.emitFrom ===
                                    u.EmitLocation.Base && (this.emitFrom = u.EmitLocation.Volume);
                                break;
                            case u.ShapeType.Cone:
                                this.emitFrom === u.EmitLocation.Edge && (this.emitFrom = u.EmitLocation.Base);
                                break;
                            case u.ShapeType.Sphere:
                            case u.ShapeType.Hemisphere:
                                this.emitFrom !== u.EmitLocation.Base && this.emitFrom !== u.EmitLocation.Edge || (this.emitFrom = u.EmitLocation.Volume)
                        }
                    }
                }, {
                    key: "angle",
                    get: function() {
                        return Math.round(100 * (0, l.toDegree)(this._angle)) / 100
                    },
                    set: function(a) {
                        this._angle = (0, l.toRadian)(a)
                    }
                }, {
                    key: "arc",
                    get: function() {
                        return (0, l.toDegree)(this._arc)
                    },
                    set: function(a) {
                        this._arc = (0, l.toRadian)(a)
                    }
                }, {
                    key: "position",
                    get: function() {
                        return this._position
                    },
                    set: function(a) {
                        this._position = a;
                        this.constructMat()
                    }
                }, {
                    key: "rotation",
                    get: function() {
                        return this._rotation
                    },
                    set: function(a) {
                        this._rotation = a;
                        this.constructMat()
                    }
                }, {
                    key: "scale",
                    get: function() {
                        return this._scale
                    },
                    set: function(a) {
                        this._scale = a;
                        this.constructMat()
                    }
                }]);
                return b
            }(), A = c(w.prototype, "enable", [b.property], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }), B = c(w.prototype,
                "_shapeType", [b.property], {
                    configurable: !0,
                    enumerable: !0,
                    writable: !0,
                    initializer: function() {
                        return u.ShapeType.Cone
                    }
                }), c(w.prototype, "shapeType", [p], Object.getOwnPropertyDescriptor(w.prototype, "shapeType"), w.prototype), y = c(w.prototype, "emitFrom", [t], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return u.EmitLocation.Volume
                }
            }), C = c(w.prototype, "radius", [b.property], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 1
                }
            }), F = c(w.prototype, "radiusThickness", [b.property], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 1
                }
            }), G = c(w.prototype, "_angle", [b.property], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return (0, l.toRadian)(25)
                }
            }), c(w.prototype, "angle", [b.property], Object.getOwnPropertyDescriptor(w.prototype, "angle"), w.prototype), D = c(w.prototype, "_arc", [b.property], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return (0, l.toRadian)(360)
                }
            }), c(w.prototype, "arc", [b.property], Object.getOwnPropertyDescriptor(w.prototype,
                "arc"), w.prototype), I = c(w.prototype, "arcMode", [x], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return u.ArcMode.Random
                }
            }), K = c(w.prototype, "arcSpread", [b.property], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }), L = c(w.prototype, "arcSpeed", [z], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new f["default"]
                }
            }), R = c(w.prototype, "length", [b.property], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 5
                }
            }),
            M = c(w.prototype, "boxThickness", [b.property], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new l.Vec3(0, 0, 0)
                }
            }), S = c(w.prototype, "_position", [b.property], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new l.Vec3(0, 0, 0)
                }
            }), c(w.prototype, "position", [b.property], Object.getOwnPropertyDescriptor(w.prototype, "position"), w.prototype), O = c(w.prototype, "_rotation", [b.property], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new l.Vec3(0,
                        0, 0)
                }
            }), c(w.prototype, "rotation", [b.property], Object.getOwnPropertyDescriptor(w.prototype, "rotation"), w.prototype), Q = c(w.prototype, "_scale", [b.property], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new l.Vec3(1, 1, 1)
                }
            }), c(w.prototype, "scale", [b.property], Object.getOwnPropertyDescriptor(w.prototype, "scale"), w.prototype), V = c(w.prototype, "alignToDirection", [b.property], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }), ba = c(w.prototype, "randomDirectionAmount", [b.property], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }), da = c(w.prototype, "sphericalDirectionAmount", [b.property], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }), T = c(w.prototype, "randomPositionAmount", [b.property], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return 0
                }
            }), w)) || E);
        m["default"] = g;
        q.exports = m["default"]
    }, {
        "../../../platform/CCClassDecorator": 228,
        "../../../value-types": 325,
        "../animator/curve-range": 32,
        "../enum": 44,
        "../particle-general-function": 45
    }],
    44: [function(g, q, m) {
        m.__esModule = !0;
        m.TrailMode = m.TextureMode = m.Space = m.ShapeType = m.RenderMode = m.EmitLocation = m.ArcMode = void 0;
        g = (g = g("../../platform/CCEnum")) && g.__esModule ? g : {
            default: g
        };
        q = (0, g["default"])({
            World: 0,
            Local: 1,
            Custom: 2
        });
        m.Space = q;
        q = (0, g["default"])({
            Billboard: 0,
            StrecthedBillboard: 1,
            HorizontalBillboard: 2,
            VerticalBillboard: 3,
            Mesh: 4
        });
        m.RenderMode = q;
        q = (0, g["default"])({
            Box: 0,
            Circle: 1,
            Cone: 2,
            Sphere: 3,
            Hemisphere: 4
        });
        m.ShapeType = q;
        q = (0, g["default"])({
            Base: 0,
            Edge: 1,
            Shell: 2,
            Volume: 3
        });
        m.EmitLocation = q;
        q = (0, g["default"])({
            Random: 0,
            Loop: 1,
            PingPong: 2
        });
        m.ArcMode = q;
        q = (0, g["default"])({
            Particles: 0,
            Ribbon: 1
        });
        m.TrailMode = q;
        g = (0, g["default"])({
            Stretch: 0,
            Repeat: 1
        });
        m.TextureMode = g
    }, {
        "../../platform/CCEnum": 229
    }],
    45: [function(g, q, m) {
        function h(a, c) {
            k.Vec2.set(a, Math.cos(c), Math.sin(c))
        }

        function e(a) {
            var b = (0, k.randomRange)(0, 2 * Math.PI);
            k.Vec2.set(a, Math.cos(b), Math.sin(b))
        }

        function d(a) {
            var b = (0, k.randomRange)(-1, 1),
                c = (0, k.randomRange)(0, 2 * Math.PI),
                d = Math.sqrt(1 -
                    b * b);
            k.Vec3.set(a, d * Math.cos(c), d * Math.sin(c), b)
        }
        m.__esModule = !0;
        m.calculateTransform = function(b, c, f, d) {
            if (c !== b) return b !== a.Space.World && k.Mat4.invert(f, f), k.Mat4.getRotation(d, f), !0;
            k.Quat.set(d, 0, 0, 0, 1);
            return !1
        };
        m.fixedAngleUnitVector2 = h;
        m.particleEmitZAxis = void 0;
        m.randomPointBetweenCircle = function(a, c, f) {
            e(a);
            a.z = 0;
            k.Vec3.scale(a, a, c + (f - c) * (0, k.random)())
        };
        m.randomPointBetweenCircleAtFixedAngle = function(a, c, f, d) {
            h(a, d);
            a.z = 0;
            k.Vec3.scale(a, a, c + (f - c) * (0, k.random)())
        };
        m.randomPointBetweenCube =
            function(a, c, f) {
                for (var b = ["x", "y", "z"], d = (0, k.randomRangeInt)(0, 3), l = 0; 3 > l; l++)
                    if (l === d) a[b[l]] = (0, k.randomRange)(-f[b[l]], f[b[l]]);
                    else {
                        var p = 2 * (0, k.random)() - 1;
                        a[b[l]] = 0 > p ? -c[b[l]] + p * (f[b[l]] - c[b[l]]) : c[b[l]] + p * (f[b[l]] - c[b[l]])
                    }
            };
        m.randomPointBetweenSphere = function(a, c, f) {
            d(a);
            k.Vec3.scale(a, a, c + (f - c) * (0, k.random)())
        };
        m.randomPointInCube = function(a, c) {
            k.Vec3.set(a, (0, k.randomRange)(-c.x, c.x), (0, k.randomRange)(-c.y, c.y), (0, k.randomRange)(-c.z, c.z))
        };
        m.randomPointInUnitCircle = function(a) {
            e(a);
            a.z =
                0;
            k.Vec3.scale(a, a, (0, k.random)())
        };
        m.randomPointInUnitSphere = function(a) {
            d(a);
            k.Vec3.scale(a, a, (0, k.random)())
        };
        m.randomSign = function() {
            var a = (0, k.randomRange)(-1, 1);
            0 === a ? a++ : a;
            return (0, c.sign)(a)
        };
        m.randomSortArray = function(a) {
            for (var b = 0; b < a.length; b++) {
                var c = b + (0, k.randomRangeInt)(0, a.length - b),
                    d = a[c];
                a[c] = a[b];
                a[b] = d
            }
        };
        m.randomUnitVector = d;
        m.randomUnitVector2 = e;
        var k = g("../../value-types"),
            c = g("../../value-types/utils"),
            a = g("./enum");
        g = new k.Vec3(0, 0, -1);
        m.particleEmitZAxis = g
    }, {
        "../../value-types": 325,
        "../../value-types/utils": 332,
        "./enum": 44
    }],
    46: [function(g, q, m) {
        function h(a) {
            if ("function" !== typeof WeakMap) return null;
            var b = new WeakMap,
                c = new WeakMap;
            return (h = function(a) {
                return a ? c : b
            })(a)
        }

        function e(a) {
            return a && a.__esModule ? a : {
                default: a
            }
        }

        function d(a, b) {
            $jscomp.initSymbol();
            $jscomp.initSymbol();
            $jscomp.initSymbolIterator();
            var c = "undefined" !== typeof Symbol && a[Symbol.iterator] || a["@@iterator"];
            if (c) return (c = c.call(a)).next.bind(c);
            if (Array.isArray(a) || (c = k(a)) || b && a && "number" === typeof a.length) {
                c &&
                    (a = c);
                var f = 0;
                return function() {
                    return f >= a.length ? {
                        done: !0
                    } : {
                        done: !1,
                        value: a[f++]
                    }
                }
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }

        function k(a, b) {
            if (a) {
                if ("string" === typeof a) return c(a, b);
                var f = Object.prototype.toString.call(a).slice(8, -1);
                "Object" === f && a.constructor && (f = a.constructor.name);
                if ("Map" === f || "Set" === f) return Array.from(a);
                if ("Arguments" === f || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(f)) return c(a,
                    b)
            }
        }

        function c(a, b) {
            (null == b || b > a.length) && (b = a.length);
            for (var c = 0, f = Array(b); c < b; c++) f[c] = a[c];
            return f
        }

        function a(a, b, c, f) {
            c && Object.defineProperty(a, b, {
                enumerable: c.enumerable,
                configurable: c.configurable,
                writable: c.writable,
                value: c.initializer ? c.initializer.call(f) : void 0
            })
        }

        function b(a, b) {
            for (var c = 0; c < b.length; c++) {
                var d = b[c];
                d.enumerable = d.enumerable || !1;
                d.configurable = !0;
                "value" in d && (d.writable = !0);
                Object.defineProperty(a, f(d.key), d)
            }
        }

        function l(a, c, f) {
            c && b(a.prototype, c);
            f && b(a, f);
            Object.defineProperty(a,
                "prototype", {
                    writable: !1
                });
            return a
        }

        function f(a) {
            a: if ("object" === typeof a && null !== a) {
                $jscomp.initSymbol();
                var b = a[Symbol.toPrimitive];
                if (void 0 !== b) {
                    a = b.call(a, "string");
                    if ("object" !== typeof a) break a;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                a = String(a)
            }return "symbol" === typeof a ? a : String(a)
        }

        function n(a) {
            if (void 0 === a) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return a
        }

        function u(a, b) {
            a.prototype = Object.create(b.prototype);
            a.prototype.constructor =
                a;
            v(a, b)
        }

        function v(a, b) {
            v = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(a, b) {
                a.__proto__ = b;
                return a
            };
            return v(a, b)
        }

        function p(a, b, c, f, d) {
            var l = {};
            Object.keys(f).forEach(function(a) {
                l[a] = f[a]
            });
            l.enumerable = !!l.enumerable;
            l.configurable = !!l.configurable;
            ("value" in l || l.initializer) && (l.writable = !0);
            l = c.slice().reverse().reduce(function(c, f) {
                return f(a, b, c) || c
            }, l);
            d && void 0 !== l.initializer && (l.value = l.initializer ? l.initializer.call(d) : void 0, l.initializer = void 0);
            void 0 === l.initializer &&
                (Object.defineProperty(a, b, l), l = null);
            return l
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var t = g("../../value-types"),
            x = g("../../value-types/utils"),
            z = e(g("../../assets/material/CCMaterial")),
            E = e(g("./animator/color-overtime")),
            w = function(a, b) {
                if (!b && a && a.__esModule) return a;
                if (null === a || "object" !== typeof a && "function" !== typeof a) return {
                    default: a
                };
                if ((b = h(b)) && b.has(a)) return b.get(a);
                var c = {},
                    f = Object.defineProperty && Object.getOwnPropertyDescriptor,
                    d;
                for (d in a)
                    if ("default" !== d && Object.prototype.hasOwnProperty.call(a,
                            d)) {
                        var l = f ? Object.getOwnPropertyDescriptor(a, d) : null;
                        l && (l.get || l.set) ? Object.defineProperty(c, d, l) : c[d] = a[d]
                    }
                c["default"] = a;
                b && b.set(a, c);
                return c
            }(g("./animator/curve-range")),
            A = e(g("./animator/force-overtime")),
            B = e(g("./animator/gradient-range")),
            y = e(g("./animator/limit-velocity-overtime")),
            C = e(g("./animator/rotation-overtime")),
            F = e(g("./animator/size-overtime")),
            G = e(g("./animator/texture-animation")),
            D = e(g("./animator/velocity-overtime")),
            I = e(g("./burst")),
            K = e(g("./emitter/shape-module")),
            L =
            g("./enum"),
            R = g("./particle-general-function"),
            M = e(g("./renderer/trail")),
            S = e(g("../../mesh/CCMesh")),
            O, Q, V, ba, da, T, N, fa, Z, W, X, la, ea, ja, oa, sa, ia, ca, ra, r, Ca, na, ka, xa, P, U, ua, pa, Ha, za, Ia, Ja, Fa, Sa, ta, Y, Ma, Na, Ta, wa, ma, ya, Ka, Pa, Aa, mb, nb, ob, pb, qb, rb, Ba, gb, hb, sb, tb, ub, vb, ib, Ua, jb, ab, kb, La, Va, bb, va, Qa = g("../../platform/CCClassDecorator"),
            Db = Qa.ccclass,
            Eb = Qa.menu,
            ha = Qa.property,
            wb = Qa.executeInEditMode,
            xb = Qa.executionOrder,
            yb = Qa.help,
            cb = g("../../components/CCRenderComponent"),
            Wa = new t.Mat4,
            Ga = (O = Db("cc.ParticleSystem3D"),
                Q = Eb("i18n:MAIN_MENU.component.renderers/ParticleSystem3D"), V = yb("i18n:COMPONENT.help_url.particle-system-3d"), ba = xb(99), da = ha({
                    animatable: !1
                }), T = ha({
                    animatable: !1
                }), N = ha({
                    type: L.Space,
                    animatable: !1
                }), fa = ha({
                    type: w["default"]
                }), Z = ha({
                    type: w["default"]
                }), W = ha({
                    type: B["default"]
                }), X = ha({
                    type: L.Space
                }), la = ha({
                    type: w["default"]
                }), ea = ha({
                    type: w["default"],
                    range: [-1, 1]
                }), ja = ha({
                    type: w["default"],
                    range: [-1, 1],
                    radian: !0
                }), oa = ha({
                    type: w["default"],
                    range: [-1, 1]
                }), sa = ha({
                    type: w["default"]
                }), ia = ha({
                    type: w["default"]
                }),
                ca = ha({
                    type: [I["default"]],
                    animatable: !1
                }), ra = ha({
                    type: [z["default"]],
                    displayName: "Materials",
                    visible: !1,
                    override: !0
                }), r = ha({
                    type: K["default"],
                    animatable: !1
                }), Ca = ha({
                    type: E["default"],
                    animatable: !1
                }), na = ha({
                    type: F["default"],
                    animatable: !1
                }), ka = ha({
                    type: D["default"],
                    animatable: !1
                }), xa = ha({
                    type: A["default"],
                    animatable: !1
                }), P = ha({
                    type: y["default"],
                    animatable: !1
                }), U = ha({
                    type: C["default"],
                    animatable: !1
                }), ua = ha({
                    type: G["default"],
                    animatable: !1
                }), pa = ha({
                    type: M["default"],
                    animatable: !1
                }), Ha = ha({
                    type: L.RenderMode,
                    animatable: !1
                }), za = ha({
                    animatable: !1
                }), Ia = ha({
                    animatable: !1
                }), Ja = ha({
                    type: S["default"],
                    animatable: !1
                }), Fa = ha({
                    type: z["default"],
                    animatable: !1
                }), Sa = ha({
                    type: z["default"],
                    animatable: !1
                }), O(ta = Q(ta = V(ta = ba(ta = wb(ta = (Y = function(b) {
                        function c() {
                            var c = b.call(this) || this;
                            a(c, "duration", Ma, n(c));
                            a(c, "_capacity", Na, n(c));
                            a(c, "loop", Ta, n(c));
                            a(c, "playOnAwake", wa, n(c));
                            a(c, "_prewarm", ma, n(c));
                            a(c, "_simulationSpace", ya, n(c));
                            a(c, "simulationSpeed", Ka, n(c));
                            a(c, "startDelay", Pa, n(c));
                            a(c, "startLifetime", Aa, n(c));
                            a(c, "startColor", mb, n(c));
                            a(c, "scaleSpace", nb, n(c));
                            a(c, "startSize", ob, n(c));
                            a(c, "startSpeed", pb, n(c));
                            a(c, "startRotation", qb, n(c));
                            a(c, "gravityModifier", rb, n(c));
                            a(c, "rateOverTime", Ba, n(c));
                            a(c, "rateOverDistance", gb, n(c));
                            a(c, "bursts", hb, n(c));
                            a(c, "_shapeModule", sb, n(c));
                            a(c, "_colorOverLifetimeModule", tb, n(c));
                            a(c, "_sizeOvertimeModule", ub, n(c));
                            a(c, "_velocityOvertimeModule", vb, n(c));
                            a(c, "_forceOvertimeModule", ib, n(c));
                            a(c, "_limitVelocityOvertimeModule", Ua, n(c));
                            a(c, "_rotationOvertimeModule", jb, n(c));
                            a(c, "_textureAnimationModule", ab, n(c));
                            a(c, "_trailModule", kb, n(c));
                            a(c, "_renderMode", La, n(c));
                            a(c, "_velocityScale", Va, n(c));
                            a(c, "_lengthScale", bb, n(c));
                            a(c, "_mesh", va, n(c));
                            c._isPlaying = void 0;
                            c._isPaused = void 0;
                            c._isStopped = void 0;
                            c._isEmitting = void 0;
                            c._time = void 0;
                            c._emitRateTimeCounter = void 0;
                            c._emitRateDistanceCounter = void 0;
                            c._oldWPos = void 0;
                            c._curWPos = void 0;
                            c._customData1 = void 0;
                            c._customData2 = void 0;
                            c._subEmitters = void 0;
                            c.rateOverTime.constant = 10;
                            c.startLifetime.constant = 5;
                            c.startSize.constant =
                                1;
                            c.startSpeed.constant = 5;
                            c._isPlaying = !1;
                            c._isPaused = !1;
                            c._isStopped = !0;
                            c._isEmitting = !1;
                            c._time = 0;
                            c._emitRateTimeCounter = 0;
                            c._emitRateDistanceCounter = 0;
                            c._oldWPos = new t.Vec3(0, 0, 0);
                            c._curWPos = new t.Vec3(0, 0, 0);
                            c._customData1 = new t.Vec2(0, 0);
                            c._customData2 = new t.Vec2(0, 0);
                            c._subEmitters = [];
                            return c
                        }
                        u(c, b);
                        var f = c.prototype;
                        f.onLoad = function() {
                            this._assembler.onInit(this);
                            this.shapeModule.onInit(this);
                            this.trailModule.onInit(this);
                            this.textureAnimationModule.onInit(this);
                            this._resetPosition()
                        };
                        f._onMaterialModified =
                            function(a, b) {
                                this._assembler && this._assembler._onMaterialModified(a, b)
                            };
                        f._onRebuildPSO = function(a, b) {
                            this._assembler && this._assembler._onRebuildPSO(a, b)
                        };
                        f.play = function() {
                            this._isPaused && (this._isPaused = !1);
                            this._isStopped && (this._isStopped = !1);
                            this._isEmitting = this._isPlaying = !0;
                            this._resetPosition();
                            this._prewarm && this._prewarmSystem()
                        };
                        f.pause = function() {
                            this._isStopped ? console.warn("pause(): particle system is already stopped.") : (this._isPlaying && (this._isPlaying = !1), this._isPaused = !0)
                        };
                        f.stop =
                            function() {
                                (this._isPlaying || this._isPaused) && this.clear();
                                this._isPlaying && (this._isPlaying = !1);
                                this._isPaused && (this._isPaused = !1);
                                this._emitRateDistanceCounter = this._emitRateTimeCounter = this._time = 0;
                                this._isStopped = !0
                            };
                        f.clear = function() {
                            this.enabledInHierarchy && (this._assembler && this._assembler.clear(), this.trailModule.clear())
                        };
                        f.getParticleCount = function() {
                            return this._assembler ? this._assembler.getParticleCount() : 0
                        };
                        f.setCustomData1 = function(a, b) {
                            t.Vec2.set(this._customData1, a, b)
                        };
                        f.setCustomData2 =
                            function(a, b) {
                                t.Vec2.set(this._customData2, a, b)
                            };
                        f.onDestroy = function() {
                            this._assembler.onDestroy();
                            this.trailModule.destroy()
                        };
                        f.onEnable = function() {
                            b.prototype.onEnable.call(this);
                            this.playOnAwake && this.play();
                            this._assembler.onEnable();
                            this.trailModule.onEnable()
                        };
                        f.onDisable = function() {
                            b.prototype.onDisable.call(this);
                            this._assembler.onDisable();
                            this.trailModule.onDisable()
                        };
                        f.update = function(a) {
                            a *= this.simulationSpeed;
                            this._isPlaying && (this._time += a, this._emit(a), 0 !== this._assembler._updateParticles(a) ||
                                this._isEmitting || this.stop(), this._assembler.updateParticleBuffer(), this.trailModule.enable && this.trailModule.updateTrailBuffer())
                        };
                        f.emit = function(a, b) {
                            if (this._assembler) {
                                this._simulationSpace === L.Space.World && this.node.getWorldMatrix(Wa);
                                for (var c = 0; c < a; ++c) {
                                    var f = this._assembler._getFreeParticle();
                                    if (null === f) break;
                                    var d = (0, t.pseudoRandom)((0, t.randomRangeInt)(0, x.INT_MAX));
                                    this.shapeModule.enable ? this.shapeModule.emit(f) : (t.Vec3.set(f.position, 0, 0, 0), t.Vec3.copy(f.velocity, R.particleEmitZAxis));
                                    this.textureAnimationModule.enable && this.textureAnimationModule.init(f);
                                    t.Vec3.scale(f.velocity, f.velocity, this.startSpeed.evaluate(this._time / this.duration, d));
                                    switch (this._simulationSpace) {
                                        case L.Space.World:
                                            t.Vec3.transformMat4(f.position, f.position, Wa);
                                            var l = new t.Quat;
                                            this.node.getWorldRotation(l);
                                            t.Vec3.transformQuat(f.velocity, f.velocity, l)
                                    }
                                    t.Vec3.copy(f.ultimateVelocity, f.velocity);
                                    t.Vec3.set(f.rotation, 0, 0, this.startRotation.evaluate(this._time / this.duration, d));
                                    t.Vec3.set(f.startSize, this.startSize.evaluate(this._time /
                                        this.duration, d), 1, 1);
                                    f.startSize.y = f.startSize.x;
                                    t.Vec3.copy(f.size, f.startSize);
                                    f.startColor.set(this.startColor.evaluate(this._time / this.duration, d));
                                    f.color.set(f.startColor);
                                    f.startLifetime = this.startLifetime.evaluate(this._time / this.duration, d) + b;
                                    f.remainingLifetime = f.startLifetime;
                                    f.randomSeed = (0, t.randomRangeInt)(0, 233280);
                                    this._assembler._setNewParticle(f)
                                }
                            }
                        };
                        f._prewarmSystem = function() {
                            this.startDelay.mode = w.Mode.Constant;
                            this.startDelay.constant = 0;
                            for (var a = this.duration / 1, b = 0; b < a; ++b) this._time +=
                                1, this._emit(1), this._assembler && this._assembler._updateParticles(1)
                        };
                        f._emit = function(a) {
                            var b = this.startDelay.evaluate(0, 1);
                            if (this._time > b)
                                if (this._time > this.duration + b && !this.loop) this._isEmitting = !1;
                                else {
                                    this._emitRateTimeCounter += this.rateOverTime.evaluate(this._time / this.duration, 1) * a;
                                    1 < this._emitRateTimeCounter && this._isEmitting && (b = Math.floor(this._emitRateTimeCounter), this._emitRateTimeCounter -= b, this.emit(b, a));
                                    this.node.getWorldPosition(this._curWPos);
                                    b = t.Vec3.distance(this._curWPos, this._oldWPos);
                                    t.Vec3.copy(this._oldWPos, this._curWPos);
                                    this._emitRateDistanceCounter += b * this.rateOverDistance.evaluate(this._time / this.duration, 1);
                                    1 < this._emitRateDistanceCounter && this._isEmitting && (b = Math.floor(this._emitRateDistanceCounter), this._emitRateDistanceCounter -= b, this.emit(b, a));
                                    b = d(this.bursts);
                                    for (var c; !(c = b()).done;) c.value.update(this, a)
                                }
                        };
                        f._activateMaterial = function() {};
                        f._resetPosition = function() {
                            this.node.getWorldPosition(this._oldWPos);
                            t.Vec3.copy(this._curWPos, this._oldWPos)
                        };
                        f.addSubEmitter =
                            function(a) {
                                this._subEmitters.push(a)
                            };
                        f.removeSubEmitter = function(a) {
                            this._subEmitters.splice(this._subEmitters.indexOf(a), 1)
                        };
                        f.addBurst = function(a) {
                            this.bursts.push(a)
                        };
                        f.removeBurst = function(a) {
                            this.bursts.splice(this.bursts.indexOf(a), 1)
                        };
                        f._checkBacth = function() {};
                        l(c, [{
                                key: "capacity",
                                get: function() {
                                    return this._capacity
                                },
                                set: function(a) {
                                    this._capacity = a;
                                    this._assembler && this._assembler.setCapacity(this._capacity)
                                }
                            }, {
                                key: "prewarm",
                                get: function() {
                                    return this._prewarm
                                },
                                set: function(a) {
                                    !0 === a &&
                                        !1 === this.loop;
                                    this._prewarm = a
                                }
                            }, {
                                key: "simulationSpace",
                                get: function() {
                                    return this._simulationSpace
                                },
                                set: function(a) {
                                    a !== this._simulationSpace && (this._simulationSpace = a, this._assembler && (this._assembler._updateMaterialParams(), this._assembler._updateTrailMaterial()))
                                }
                            }, {
                                key: "materials",
                                get: function() {
                                    return this._materials
                                },
                                set: function(a) {
                                    this._materials = a;
                                    this._activateMaterial()
                                }
                            }, {
                                key: "shapeModule",
                                get: function() {
                                    return this._shapeModule
                                },
                                set: function(a) {
                                    this._shapeModule = a;
                                    this._shapeModule.onInit(this)
                                }
                            },
                            {
                                key: "colorOverLifetimeModule",
                                get: function() {
                                    return this._colorOverLifetimeModule
                                },
                                set: function(a) {
                                    this._colorOverLifetimeModule = a
                                }
                            }, {
                                key: "sizeOvertimeModule",
                                get: function() {
                                    return this._sizeOvertimeModule
                                },
                                set: function(a) {
                                    this._sizeOvertimeModule = a
                                }
                            }, {
                                key: "velocityOvertimeModule",
                                get: function() {
                                    return this._velocityOvertimeModule
                                },
                                set: function(a) {
                                    this._velocityOvertimeModule = a
                                }
                            }, {
                                key: "forceOvertimeModule",
                                get: function() {
                                    return this._forceOvertimeModule
                                },
                                set: function(a) {
                                    this._forceOvertimeModule =
                                        a
                                }
                            }, {
                                key: "limitVelocityOvertimeModule",
                                get: function() {
                                    return this._limitVelocityOvertimeModule
                                },
                                set: function(a) {
                                    this._limitVelocityOvertimeModule = a
                                }
                            }, {
                                key: "rotationOvertimeModule",
                                get: function() {
                                    return this._rotationOvertimeModule
                                },
                                set: function(a) {
                                    this._rotationOvertimeModule = a
                                }
                            }, {
                                key: "textureAnimationModule",
                                get: function() {
                                    return this._textureAnimationModule
                                },
                                set: function(a) {
                                    this._textureAnimationModule = a;
                                    this._textureAnimationModule.onInit(this)
                                }
                            }, {
                                key: "trailModule",
                                get: function() {
                                    return this._trailModule
                                },
                                set: function(a) {
                                    this._trailModule = a;
                                    this._trailModule.onInit(this)
                                }
                            }, {
                                key: "renderMode",
                                get: function() {
                                    return this._renderMode
                                },
                                set: function(a) {
                                    this._renderMode !== a && (this._renderMode = a, this._assembler && (this._assembler._setVertexAttrib(), this._assembler._updateModel(), this._assembler._updateMaterialParams()))
                                }
                            }, {
                                key: "velocityScale",
                                get: function() {
                                    return this._velocityScale
                                },
                                set: function(a) {
                                    this._velocityScale = a;
                                    this._assembler && this._assembler._updateMaterialParams()
                                }
                            }, {
                                key: "lengthScale",
                                get: function() {
                                    return this._lengthScale
                                },
                                set: function(a) {
                                    this._lengthScale = a;
                                    this._assembler && this._assembler._updateMaterialParams()
                                }
                            }, {
                                key: "mesh",
                                get: function() {
                                    return this._mesh
                                },
                                set: function(a) {
                                    this._mesh = a;
                                    this._assembler && this._assembler._updateModel()
                                }
                            }, {
                                key: "particleMaterial",
                                get: function() {
                                    return this.getMaterial(0)
                                },
                                set: function(a) {
                                    this.setMaterial(0, a);
                                    this._onMaterialModified(0, a)
                                }
                            }, {
                                key: "trailMaterial",
                                get: function() {
                                    return this.getMaterial(1)
                                },
                                set: function(a) {
                                    this.setMaterial(1, a);
                                    this._onMaterialModified(1, a)
                                }
                            }, {
                                key: "isPlaying",
                                get: function() {
                                    return this._isPlaying
                                }
                            }, {
                                key: "isPaused",
                                get: function() {
                                    return this._isPaused
                                }
                            }, {
                                key: "isStopped",
                                get: function() {
                                    return this._isStopped
                                }
                            }, {
                                key: "isEmitting",
                                get: function() {
                                    return this._isEmitting
                                }
                            }, {
                                key: "time",
                                get: function() {
                                    return this._time
                                }
                            }
                        ]);
                        return c
                    }(cb), Ma = p(Y.prototype, "duration", [ha], {
                        configurable: !0,
                        enumerable: !0,
                        writable: !0,
                        initializer: function() {
                            return 5
                        }
                    }), Na = p(Y.prototype, "_capacity", [ha], {
                        configurable: !0,
                        enumerable: !0,
                        writable: !0,
                        initializer: function() {
                            return 100
                        }
                    }), p(Y.prototype,
                        "capacity", [ha], Object.getOwnPropertyDescriptor(Y.prototype, "capacity"), Y.prototype), Ta = p(Y.prototype, "loop", [ha], {
                        configurable: !0,
                        enumerable: !0,
                        writable: !0,
                        initializer: function() {
                            return !0
                        }
                    }), wa = p(Y.prototype, "playOnAwake", [da], {
                        configurable: !0,
                        enumerable: !0,
                        writable: !0,
                        initializer: function() {
                            return !0
                        }
                    }), ma = p(Y.prototype, "_prewarm", [ha], {
                        configurable: !0,
                        enumerable: !0,
                        writable: !0,
                        initializer: function() {
                            return !1
                        }
                    }), p(Y.prototype, "prewarm", [T], Object.getOwnPropertyDescriptor(Y.prototype, "prewarm"), Y.prototype),
                    ya = p(Y.prototype, "_simulationSpace", [ha], {
                        configurable: !0,
                        enumerable: !0,
                        writable: !0,
                        initializer: function() {
                            return L.Space.Local
                        }
                    }), p(Y.prototype, "simulationSpace", [N], Object.getOwnPropertyDescriptor(Y.prototype, "simulationSpace"), Y.prototype), Ka = p(Y.prototype, "simulationSpeed", [ha], {
                        configurable: !0,
                        enumerable: !0,
                        writable: !0,
                        initializer: function() {
                            return 1
                        }
                    }), Pa = p(Y.prototype, "startDelay", [fa], {
                        configurable: !0,
                        enumerable: !0,
                        writable: !0,
                        initializer: function() {
                            return new w["default"]
                        }
                    }), Aa = p(Y.prototype,
                        "startLifetime", [Z], {
                            configurable: !0,
                            enumerable: !0,
                            writable: !0,
                            initializer: function() {
                                return new w["default"]
                            }
                        }), mb = p(Y.prototype, "startColor", [W], {
                        configurable: !0,
                        enumerable: !0,
                        writable: !0,
                        initializer: function() {
                            return new B["default"]
                        }
                    }), nb = p(Y.prototype, "scaleSpace", [X], {
                        configurable: !0,
                        enumerable: !0,
                        writable: !0,
                        initializer: function() {
                            return L.Space.Local
                        }
                    }), ob = p(Y.prototype, "startSize", [la], {
                        configurable: !0,
                        enumerable: !0,
                        writable: !0,
                        initializer: function() {
                            return new w["default"]
                        }
                    }), pb = p(Y.prototype,
                        "startSpeed", [ea], {
                            configurable: !0,
                            enumerable: !0,
                            writable: !0,
                            initializer: function() {
                                return new w["default"]
                            }
                        }), qb = p(Y.prototype, "startRotation", [ja], {
                        configurable: !0,
                        enumerable: !0,
                        writable: !0,
                        initializer: function() {
                            return new w["default"]
                        }
                    }), rb = p(Y.prototype, "gravityModifier", [oa], {
                        configurable: !0,
                        enumerable: !0,
                        writable: !0,
                        initializer: function() {
                            return new w["default"]
                        }
                    }), Ba = p(Y.prototype, "rateOverTime", [sa], {
                        configurable: !0,
                        enumerable: !0,
                        writable: !0,
                        initializer: function() {
                            return new w["default"]
                        }
                    }),
                    gb = p(Y.prototype, "rateOverDistance", [ia], {
                        configurable: !0,
                        enumerable: !0,
                        writable: !0,
                        initializer: function() {
                            return new w["default"]
                        }
                    }), hb = p(Y.prototype, "bursts", [ca], {
                        configurable: !0,
                        enumerable: !0,
                        writable: !0,
                        initializer: function() {
                            return []
                        }
                    }), p(Y.prototype, "materials", [ra], Object.getOwnPropertyDescriptor(Y.prototype, "materials"), Y.prototype), sb = p(Y.prototype, "_shapeModule", [ha], {
                        configurable: !0,
                        enumerable: !0,
                        writable: !0,
                        initializer: function() {
                            return new K["default"]
                        }
                    }), p(Y.prototype, "shapeModule", [r], Object.getOwnPropertyDescriptor(Y.prototype, "shapeModule"), Y.prototype), tb = p(Y.prototype, "_colorOverLifetimeModule", [ha], {
                        configurable: !0,
                        enumerable: !0,
                        writable: !0,
                        initializer: function() {
                            return new E["default"]
                        }
                    }), p(Y.prototype, "colorOverLifetimeModule", [Ca], Object.getOwnPropertyDescriptor(Y.prototype, "colorOverLifetimeModule"), Y.prototype), ub = p(Y.prototype, "_sizeOvertimeModule", [ha], {
                        configurable: !0,
                        enumerable: !0,
                        writable: !0,
                        initializer: function() {
                            return new F["default"]
                        }
                    }), p(Y.prototype, "sizeOvertimeModule", [na], Object.getOwnPropertyDescriptor(Y.prototype, "sizeOvertimeModule"), Y.prototype), vb = p(Y.prototype, "_velocityOvertimeModule", [ha], {
                        configurable: !0,
                        enumerable: !0,
                        writable: !0,
                        initializer: function() {
                            return new D["default"]
                        }
                    }), p(Y.prototype, "velocityOvertimeModule", [ka], Object.getOwnPropertyDescriptor(Y.prototype, "velocityOvertimeModule"), Y.prototype), ib = p(Y.prototype, "_forceOvertimeModule", [ha], {
                        configurable: !0,
                        enumerable: !0,
                        writable: !0,
                        initializer: function() {
                            return new A["default"]
                        }
                    }), p(Y.prototype,
                        "forceOvertimeModule", [xa], Object.getOwnPropertyDescriptor(Y.prototype, "forceOvertimeModule"), Y.prototype), Ua = p(Y.prototype, "_limitVelocityOvertimeModule", [ha], {
                        configurable: !0,
                        enumerable: !0,
                        writable: !0,
                        initializer: function() {
                            return new y["default"]
                        }
                    }), p(Y.prototype, "limitVelocityOvertimeModule", [P], Object.getOwnPropertyDescriptor(Y.prototype, "limitVelocityOvertimeModule"), Y.prototype), jb = p(Y.prototype, "_rotationOvertimeModule", [ha], {
                        configurable: !0,
                        enumerable: !0,
                        writable: !0,
                        initializer: function() {
                            return new C["default"]
                        }
                    }),
                    p(Y.prototype, "rotationOvertimeModule", [U], Object.getOwnPropertyDescriptor(Y.prototype, "rotationOvertimeModule"), Y.prototype), ab = p(Y.prototype, "_textureAnimationModule", [ha], {
                        configurable: !0,
                        enumerable: !0,
                        writable: !0,
                        initializer: function() {
                            return new G["default"]
                        }
                    }), p(Y.prototype, "textureAnimationModule", [ua], Object.getOwnPropertyDescriptor(Y.prototype, "textureAnimationModule"), Y.prototype), kb = p(Y.prototype, "_trailModule", [ha], {
                        configurable: !0,
                        enumerable: !0,
                        writable: !0,
                        initializer: function() {
                            return new M["default"]
                        }
                    }),
                    p(Y.prototype, "trailModule", [pa], Object.getOwnPropertyDescriptor(Y.prototype, "trailModule"), Y.prototype), La = p(Y.prototype, "_renderMode", [ha], {
                        configurable: !0,
                        enumerable: !0,
                        writable: !0,
                        initializer: function() {
                            return L.RenderMode.Billboard
                        }
                    }), p(Y.prototype, "renderMode", [Ha], Object.getOwnPropertyDescriptor(Y.prototype, "renderMode"), Y.prototype), Va = p(Y.prototype, "_velocityScale", [ha], {
                        configurable: !0,
                        enumerable: !0,
                        writable: !0,
                        initializer: function() {
                            return 1
                        }
                    }), p(Y.prototype, "velocityScale", [za], Object.getOwnPropertyDescriptor(Y.prototype,
                        "velocityScale"), Y.prototype), bb = p(Y.prototype, "_lengthScale", [ha], {
                        configurable: !0,
                        enumerable: !0,
                        writable: !0,
                        initializer: function() {
                            return 1
                        }
                    }), p(Y.prototype, "lengthScale", [Ia], Object.getOwnPropertyDescriptor(Y.prototype, "lengthScale"), Y.prototype), va = p(Y.prototype, "_mesh", [ha], {
                        configurable: !0,
                        enumerable: !0,
                        writable: !0,
                        initializer: function() {
                            return null
                        }
                    }), p(Y.prototype, "mesh", [Ja], Object.getOwnPropertyDescriptor(Y.prototype, "mesh"), Y.prototype), p(Y.prototype, "particleMaterial", [Fa], Object.getOwnPropertyDescriptor(Y.prototype,
                        "particleMaterial"), Y.prototype), p(Y.prototype, "trailMaterial", [Sa], Object.getOwnPropertyDescriptor(Y.prototype, "trailMaterial"), Y.prototype), Y)) || ta) || ta) || ta) || ta) || ta);
        m["default"] = Ga;
        !1;
        cc.ParticleSystem3D = Ga;
        q.exports = m["default"]
    }, {
        "../../assets/material/CCMaterial": 113,
        "../../components/CCRenderComponent": 149,
        "../../mesh/CCMesh": 195,
        "../../platform/CCClassDecorator": 228,
        "../../value-types": 325,
        "../../value-types/utils": 332,
        "./animator/color-overtime": 31,
        "./animator/curve-range": 32,
        "./animator/force-overtime": 33,
        "./animator/gradient-range": 34,
        "./animator/limit-velocity-overtime": 36,
        "./animator/rotation-overtime": 37,
        "./animator/size-overtime": 38,
        "./animator/texture-animation": 39,
        "./animator/velocity-overtime": 40,
        "./burst": 41,
        "./emitter/shape-module": 43,
        "./enum": 44,
        "./particle-general-function": 45,
        "./renderer/trail": 50
    }],
    47: [function(g, q, m) {
        m.__esModule = !0;
        m["default"] = void 0;
        var h = g("../../value-types");
        m["default"] = function(e) {
            this.startColor = this.size = this.startSize = this.rotation = this.axisOfRotation = this.angularVelocity =
                this.ultimateVelocity = this.animatedVelocity = this.velocity = this.position = this.particleSystem = null;
            this.color = cc.Color.WHITE;
            this.frameIndex = this.emitAccumulator1 = this.emitAccumulator0 = this.startLifetime = this.remainingLifetime = this.randomSeed = null;
            this.particleSystem = e;
            this.position = new h.Vec3(0, 0, 0);
            this.velocity = new h.Vec3(0, 0, 0);
            this.animatedVelocity = new h.Vec3(0, 0, 0);
            this.ultimateVelocity = new h.Vec3(0, 0, 0);
            this.angularVelocity = new h.Vec3(0, 0, 0);
            this.axisOfRotation = new h.Vec3(0, 0, 0);
            this.rotation =
                new h.Vec3(0, 0, 0);
            this.startSize = new h.Vec3(0, 0, 0);
            this.size = new h.Vec3(0, 0, 0);
            this.startColor = cc.Color.WHITE.clone();
            this.color = cc.Color.WHITE.clone();
            this.frameIndex = this.emitAccumulator1 = this.emitAccumulator0 = this.startLifetime = this.remainingLifetime = this.randomSeed = 0
        };
        q.exports = m["default"]
    }, {
        "../../value-types": 325
    }],
    48: [function(g, q, m) {
        function h(a) {
            return a && a.__esModule ? a : {
                default: a
            }
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var e = h(g("../../../../renderer/gfx")),
            d = h(g("../../../../renderer/core/input-assembler")),
            k = g("../../../mesh/mesh-data"),
            c = g("../../../renderer");
        g = function() {
            function a() {
                this._capacity = 0;
                this._vertFormat = null;
                this._vertAttrsFloatCount = 0;
                this._mesh = null;
                this._indexCount = this._vertCount = 0;
                this._material = null;
                this._capacity = 0;
                this._vertFormat = null;
                this._vertAttrsFloatCount = 0;
                this._mesh = null;
                this._subDatas = [];
                this._subMeshes = []
            }
            var b = a.prototype;
            b.setCapacity = function(a) {
                var b = this._capacity !== a;
                this._capacity = a;
                this._inited && b && this._recreateBuffer()
            };
            b.setVertexAttributes = function(a, b) {
                if (this._mesh !==
                    a || this._vertFormat !== b) this._mesh = a, this._vertFormat = b, this._vertAttrsFloatCount = this._vertFormat._bytes / 4, this._createParticleData(), this._inited = !0
            };
            b._recreateBuffer = function() {
                this._createParticleData()
            };
            b._createParticleData = function() {
                this.destroyIAData();
                this._vertCount = 4;
                this._indexCount = 6;
                var a = this._vertFormat._bytes;
                if (this._mesh) {
                    var b = this._mesh._subDatas[0];
                    this._vertCount = b.vData.byteLength / b.vfm._bytes;
                    this._indexCount = b.iData.byteLength / 2;
                    var n = new Float32Array(a * this._capacity *
                        this._vertCount / 4);
                    b = new Uint16Array(this._capacity * this._indexCount);
                    var u = this._vertFormat.element(e["default"].ATTR_TEX_COORD3),
                        v = this._vertFormat.element(e["default"].ATTR_NORMAL),
                        p = this._vertFormat.element(e["default"].ATTR_TEX_COORD),
                        t = this._vertFormat.element(e["default"].ATTR_COLOR1);
                    this._mesh.copyAttribute(0, e["default"].ATTR_POSITION, n.buffer, a, u.offset);
                    this._mesh.copyAttribute(0, e["default"].ATTR_NORMAL, n.buffer, a, v.offset);
                    this._mesh.copyAttribute(0, e["default"].ATTR_UV0, n.buffer, a,
                        p.offset);
                    if (!this._mesh.copyAttribute(0, e["default"].ATTR_COLOR, n.buffer, a, t.offset))
                        for (v = new Uint32Array(n.buffer), u = 0; u < this._vertCount; ++u) v[u * this._vertAttrsFloatCount + t.offset / 4] = cc.Color.WHITE._val;
                    t = new Float32Array(n.buffer);
                    for (u = 1; u < this._capacity; u++) t.copyWithin(u * a * this._vertCount / 4, 0, a * this._vertCount / 4);
                    this._mesh.copyIndices(0, b);
                    for (u = 1; u < this._capacity; u++)
                        for (a = 0; a < this._indexCount; a++) b[u * this._indexCount + a] = b[a] + u * this._vertCount
                } else
                    for (n = new Float32Array(a * this._capacity *
                            this._vertCount / 4), b = new Uint16Array(this._capacity * this._indexCount), u = a = 0; u < this._capacity; ++u) t = 4 * u, b[a++] = t, b[a++] = t + 1, b[a++] = t + 2, b[a++] = t + 3, b[a++] = t + 2, b[a++] = t + 1;
                a = new k.MeshData;
                a.vData = n;
                a.iData = b;
                a.vfm = this._vertFormat;
                a.vDirty = !0;
                a.iDirty = !0;
                a.enable = !0;
                this._subDatas[0] = a;
                !1;
                n = new e["default"].VertexBuffer(c.device, this._vertFormat, e["default"].USAGE_DYNAMIC, n);
                b = new e["default"].IndexBuffer(c.device, e["default"].INDEX_FMT_UINT16, e["default"].USAGE_STATIC, b, b.length);
                this._subMeshes[0] =
                    new d["default"](n, b)
            };
            b.createTrailData = function(a, b) {
                if (!this._subDatas[1]) {
                    var f = new ArrayBuffer(a._bytes * (b + 1) * 2),
                        l = new Uint16Array(6 * b),
                        v = new k.MeshData;
                    v.vData = new Float32Array(f);
                    v.iData = l;
                    v.vfm = a;
                    v.vDirty = !0;
                    v.iDirty = !0;
                    v.enable = !0;
                    this._subDatas[1] = v;
                    !1;
                    a = new e["default"].VertexBuffer(c.device, a, e["default"].USAGE_DYNAMIC, f);
                    b = new e["default"].IndexBuffer(c.device, e["default"].INDEX_FMT_UINT16, e["default"].USAGE_DYNAMIC, l, 6 * b);
                    this._subMeshes[1] = new d["default"](a, b)
                }
            };
            b.setModelMaterial =
                function(a) {
                    this._material = a
                };
            b.addParticleVertexData = function(a, b) {
                var c = this._subDatas[0],
                    f = c.getVData();
                c = c.getVData(Uint32Array);
                if (this._mesh)
                    for (var d = 0; d < this._vertCount; d++) {
                        var l = (a * this._vertCount + d) * this._vertAttrsFloatCount;
                        f[l++] = b[0].x;
                        f[l++] = b[0].y;
                        f[l++] = b[0].z;
                        l += 2;
                        f[l++] = b[1].z;
                        f[l++] = b[2].x;
                        f[l++] = b[2].y;
                        f[l++] = b[2].z;
                        f[l++] = b[3].x;
                        f[l++] = b[3].y;
                        f[l++] = b[3].z;
                        c[l++] = b[4]
                    } else a *= this._vertAttrsFloatCount, f[a++] = b[0].x, f[a++] = b[0].y, f[a++] = b[0].z, f[a++] = b[1].x, f[a++] = b[1].y, f[a++] =
                        b[1].z, f[a++] = b[2].x, f[a++] = b[2].y, f[a++] = b[2].z, f[a++] = b[3].x, f[a++] = b[3].y, f[a++] = b[3].z, c[a++] = b[4], b[5] && (f[a++] = b[5].x, f[a++] = b[5].y, f[a++] = b[5].z)
            };
            b._uploadData = function() {
                for (var a = this._subDatas, b = this._subMeshes, c = 0, d = a.length; c < d; c++) {
                    var k = a[c],
                        p = b[c];
                    k.vDirty && (p._vertexBuffer.update(0, k.vData), k.vDirty = !1);
                    k.iDirty && (p._indexBuffer.update(0, k.iData), k.iDirty = !1)
                }
            };
            b.updateIA = function(a, b, c, d) {
                !1;
                this._subMeshes[a]._count = b;
                a = this._subDatas[a];
                a.vDirty = c;
                a.iDirty = d
            };
            b.clear = function() {
                var a =
                    this._subMeshes[0];
                a && (a.indexCount = 0)
            };
            b.destroy = function() {
                this._subDatas.length = 0;
                for (var a = this._subMeshes, b = 0, c = a.length; b < c; b++) {
                    var d = a[b]._vertexBuffer;
                    d && d.destroy();
                    (d = a[b]._indexBuffer) && d.destroy()
                }
                a.length = 0
            };
            b.destroyIAData = function() {
                this._subMeshes[0] && (this._subMeshes[0]._vertexBuffer.destroy(), this._subMeshes[0]._indexBuffer.destroy(), this._subMeshes[0] = null);
                this._subDatas[0] = null
            };
            return a
        }();
        m["default"] = g;
        q.exports = m["default"]
    }, {
        "../../../../renderer/core/input-assembler": 348,
        "../../../../renderer/gfx": 358,
        "../../../mesh/mesh-data": 198,
        "../../../renderer": 259
    }],
    49: [function(g, q, m) {
        function h(a) {
            return a && a.__esModule ? a : {
                default: a
            }
        }

        function e(a, b) {
            a.prototype = Object.create(b.prototype);
            a.prototype.constructor = a;
            d(a, b)
        }

        function d(a, b) {
            d = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(a, b) {
                a.__proto__ = b;
                return a
            };
            return d(a, b)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var k = g("../../../value-types"),
            c = h(g("../../../../renderer/gfx")),
            a = h(g("./particle-batch-model")),
            b = h(g("../../../assets/material/material-variant")),
            l = h(g("../../../../renderer/memop/recycle-pool")),
            f = g("../enum"),
            n = h(g("../particle")),
            u = h(g("../../../renderer/assembler")),
            v = h(g("../particle-system-3d")),
            p, t;
        g = g("../../../platform/CCClassDecorator").ccclass;
        var x = new k.Vec3;
        new k.Vec2;
        new k.Vec4;
        var z = new k.Mat4,
            E = [0, 0, 1, 0, 0, 1, 1, 1],
            w = new c["default"].VertexFormat([{
                name: c["default"].ATTR_POSITION,
                type: c["default"].ATTR_TYPE_FLOAT32,
                num: 3
            }, {
                name: c["default"].ATTR_TEX_COORD,
                type: c["default"].ATTR_TYPE_FLOAT32,
                num: 3
            }, {
                name: c["default"].ATTR_TEX_COORD1,
                type: c["default"].ATTR_TYPE_FLOAT32,
                num: 3
            }, {
                name: c["default"].ATTR_TEX_COORD2,
                type: c["default"].ATTR_TYPE_FLOAT32,
                num: 3
            }, {
                name: c["default"].ATTR_COLOR,
                type: c["default"].ATTR_TYPE_UINT8,
                num: 4,
                normalize: !0
            }]);
        w.name = "vfmtNormal";
        var A = new c["default"].VertexFormat([{
            name: c["default"].ATTR_POSITION,
            type: c["default"].ATTR_TYPE_FLOAT32,
            num: 3
        }, {
            name: c["default"].ATTR_TEX_COORD,
            type: c["default"].ATTR_TYPE_FLOAT32,
            num: 3
        }, {
            name: c["default"].ATTR_TEX_COORD1,
            type: c["default"].ATTR_TYPE_FLOAT32,
            num: 3
        }, {
            name: c["default"].ATTR_TEX_COORD2,
            type: c["default"].ATTR_TYPE_FLOAT32,
            num: 3
        }, {
            name: c["default"].ATTR_COLOR,
            type: c["default"].ATTR_TYPE_UINT8,
            num: 4,
            normalize: !0
        }, {
            name: c["default"].ATTR_COLOR1,
            type: c["default"].ATTR_TYPE_FLOAT32,
            num: 3
        }]);
        A.name = "vfmtStretch";
        var B = new c["default"].VertexFormat([{
            name: c["default"].ATTR_POSITION,
            type: c["default"].ATTR_TYPE_FLOAT32,
            num: 3
        }, {
            name: c["default"].ATTR_TEX_COORD,
            type: c["default"].ATTR_TYPE_FLOAT32,
            num: 3
        }, {
            name: c["default"].ATTR_TEX_COORD1,
            type: c["default"].ATTR_TYPE_FLOAT32,
            num: 3
        }, {
            name: c["default"].ATTR_TEX_COORD2,
            type: c["default"].ATTR_TYPE_FLOAT32,
            num: 3
        }, {
            name: c["default"].ATTR_COLOR,
            type: c["default"].ATTR_TYPE_UINT8,
            num: 4,
            normalize: !0
        }, {
            name: c["default"].ATTR_TEX_COORD3,
            type: c["default"].ATTR_TYPE_FLOAT32,
            num: 3
        }, {
            name: c["default"].ATTR_NORMAL,
            type: c["default"].ATTR_TYPE_FLOAT32,
            num: 3
        }, {
            name: c["default"].ATTR_COLOR1,
            type: c["default"].ATTR_TYPE_UINT8,
            num: 4,
            normalize: !0
        }]);
        B.name = "vfmtMesh";
        c = (p = g("cc.ParticleSystem3DAssembler"), p(t = function(c) {
            function d() {
                var a = c.call(this) ||
                    this;
                a._defines = null;
                a._trailDefines = null;
                a._model = null;
                a.frameTile_velLenScale = null;
                a.attrs = [];
                a._vertFormat = [];
                a._particleSystem = null;
                a._particles = null;
                a._defaultMat = null;
                a._isAssetReady = !1;
                a._defaultTrailMat = null;
                a._customProperties = null;
                a._node_scale = null;
                a._model = null;
                a.frameTile_velLenScale = cc.v4(1, 1, 0, 0);
                a._node_scale = cc.v4();
                a.attrs = Array(5);
                a._trailDefines = {
                    CC_USE_WORLD_SPACE: !0
                };
                return a
            }
            e(d, c);
            var p = d.prototype;
            p.onInit = function(a) {
                var b = this;
                this._particleSystem = a;
                this._particles = new l["default"](function() {
                        return new n["default"](b)
                    },
                    16);
                this._setVertexAttrib();
                this.onEnable();
                this._updateModel();
                this._updateMaterialParams();
                this._updateTrailMaterial()
            };
            p.onEnable = function() {
                this._particleSystem && (null == this._model && (this._model = new a["default"]), this._model.inited || this._model.setCapacity(this._particleSystem.capacity), this._model.enabled = this._particleSystem.enabledInHierarchy)
            };
            p.onDisable = function() {
                this._model && (this._model.enabled = this._particleSystem.enabledInHierarchy)
            };
            p.onDestroy = function() {
                this._model = null
            };
            p.clear =
                function() {
                    this._particles.reset();
                    this.updateParticleBuffer()
                };
            p._getFreeParticle = function() {
                return this._particles.length >= this._particleSystem.capacity ? null : this._particles.add()
            };
            p._setNewParticle = function(a) {};
            p._updateParticles = function(a) {
                this._particleSystem.node.getWorldMatrix(z);
                switch (this._particleSystem.scaleSpace) {
                    case f.Space.Local:
                        this._particleSystem.node.getScale(this._node_scale);
                        break;
                    case f.Space.World:
                        this._particleSystem.node.getWorldScale(this._node_scale)
                }(this._particleSystem.materials[0] ?
                    this._particleSystem.particleMaterial : this._defaultMat).setProperty("scale", this._node_scale);
                this._particleSystem.velocityOvertimeModule.enable && this._particleSystem.velocityOvertimeModule.update(this._particleSystem._simulationSpace, z);
                this._particleSystem.forceOvertimeModule.enable && this._particleSystem.forceOvertimeModule.update(this._particleSystem._simulationSpace, z);
                this._particleSystem.trailModule.enable && this._particleSystem.trailModule.update();
                for (var b = 0; b < this._particles.length; ++b) {
                    var c =
                        this._particles.data[b];
                    c.remainingLifetime -= a;
                    k.Vec3.set(c.animatedVelocity, 0, 0, 0);
                    0 > c.remainingLifetime ? (this._particleSystem.trailModule.enable && this._particleSystem.trailModule.removeParticle(c), this._particles.remove(b), --b) : (c.velocity.y -= 9.8 * this._particleSystem.gravityModifier.evaluate(1 - c.remainingLifetime / c.startLifetime, c.randomSeed) * a, this._particleSystem.sizeOvertimeModule.enable && this._particleSystem.sizeOvertimeModule.animate(c), this._particleSystem.colorOverLifetimeModule.enable &&
                        this._particleSystem.colorOverLifetimeModule.animate(c), this._particleSystem.forceOvertimeModule.enable && this._particleSystem.forceOvertimeModule.animate(c, a), this._particleSystem.velocityOvertimeModule.enable ? this._particleSystem.velocityOvertimeModule.animate(c) : k.Vec3.copy(c.ultimateVelocity, c.velocity), this._particleSystem.limitVelocityOvertimeModule.enable && this._particleSystem.limitVelocityOvertimeModule.animate(c), this._particleSystem.rotationOvertimeModule.enable && this._particleSystem.rotationOvertimeModule.animate(c,
                            a), this._particleSystem.textureAnimationModule.enable && this._particleSystem.textureAnimationModule.animate(c), k.Vec3.scaleAndAdd(c.position, c.position, c.ultimateVelocity, a), this._particleSystem.trailModule.enable && this._particleSystem.trailModule.animate(c, a))
                }
                return this._particles.length
            };
            p.updateParticleBuffer = function() {
                for (var a, b = this._particleSystem.renderMode === f.RenderMode.StrecthedBillboard, c = 0; c < this._particles.length; ++c) {
                    var d = this._particles.data[c],
                        l = 0;
                    this._particleSystem.textureAnimationModule.enable &&
                        (l = d.frameIndex);
                    a = 4 * c;
                    if (this._particleSystem.renderMode !== f.RenderMode.Mesh)
                        for (var n = 0; 4 > n; ++n) {
                            var k = 0;
                            this.attrs[k++] = d.position;
                            x.x = E[2 * n];
                            x.y = E[2 * n + 1];
                            x.z = l;
                            this.attrs[k++] = x;
                            this.attrs[k++] = d.size;
                            this.attrs[k++] = d.rotation;
                            this.attrs[k++] = d.color._val;
                            this.attrs[k++] = b ? d.ultimateVelocity : null;
                            this._model.addParticleVertexData(a++, this.attrs)
                        } else k = 0, this.attrs[k++] = d.position, x.z = l, this.attrs[k++] = x, this.attrs[k++] = d.size, this.attrs[k++] = d.rotation, this.attrs[k++] = d.color._val, this._model.addParticleVertexData(c,
                            this.attrs)
                }
                this.updateIA(0, this._particles.length * this._model._indexCount, !0)
            };
            p.updateShaderUniform = function() {};
            p.updateIA = function(a, b, c, f) {
                this._model && this._model.updateIA(a, b, c, f)
            };
            p.getParticleCount = function() {
                return this._particles.data.length
            };
            p._onMaterialModified = function(a, b) {
                0 === a ? (this._updateModel(), this._updateMaterialParams()) : this._updateTrailMaterial()
            };
            p._onRebuildPSO = function(a, b) {
                this._model && 0 === a && this._model.setModelMaterial(b);
                this._particleSystem.trailModule._trailModel &&
                    1 === a && this._particleSystem.trailModule._trailModel.setModelMaterial(b)
            };
            p._ensureLoadMesh = function() {
                this._particleSystem.mesh && !this._particleSystem.mesh.loaded && cc.assetManager.postLoadNative(this._particleSystem.mesh)
            };
            p.setCapacity = function(a) {
                this._model && this._model.setCapacity(a)
            };
            p._setVertexAttrib = function() {
                switch (this._particleSystem.renderMode) {
                    case f.RenderMode.StrecthedBillboard:
                        this._vertFormat = A;
                        break;
                    case f.RenderMode.Mesh:
                        this._vertFormat = B;
                        break;
                    default:
                        this._vertFormat = w
                }
            };
            p._updateMaterialParams =
                function() {
                    if (this._particleSystem) {
                        var a = this._particleSystem.materials[0];
                        a = (a = null == a && null == this._defaultMat ? this._defaultMat = b["default"].createWithBuiltin("3d-particle", this) : b["default"].create(a, this._particleSystem)) || this._defaultMat;
                        this._particleSystem._simulationSpace === f.Space.World ? a.define("CC_USE_WORLD_SPACE", !0) : a.define("CC_USE_WORLD_SPACE", !1);
                        this._particleSystem.renderMode === f.RenderMode.Billboard ? (a.define("CC_USE_BILLBOARD", !0), a.define("CC_USE_STRETCHED_BILLBOARD", !1), a.define("CC_USE_HORIZONTAL_BILLBOARD", !1), a.define("CC_USE_VERTICAL_BILLBOARD", !1), a.define("CC_USE_MESH", !1)) : this._particleSystem.renderMode === f.RenderMode.StrecthedBillboard ? (a.define("CC_USE_BILLBOARD", !1), a.define("CC_USE_STRETCHED_BILLBOARD", !0), a.define("CC_USE_HORIZONTAL_BILLBOARD", !1), a.define("CC_USE_VERTICAL_BILLBOARD", !1), a.define("CC_USE_MESH", !1), this.frameTile_velLenScale.z = this._particleSystem.velocityScale, this.frameTile_velLenScale.w = this._particleSystem.lengthScale) : this._particleSystem.renderMode === f.RenderMode.HorizontalBillboard ?
                            (a.define("CC_USE_BILLBOARD", !1), a.define("CC_USE_STRETCHED_BILLBOARD", !1), a.define("CC_USE_HORIZONTAL_BILLBOARD", !0), a.define("CC_USE_VERTICAL_BILLBOARD", !1), a.define("CC_USE_MESH", !1)) : this._particleSystem.renderMode === f.RenderMode.VerticalBillboard ? (a.define("CC_USE_BILLBOARD", !1), a.define("CC_USE_STRETCHED_BILLBOARD", !1), a.define("CC_USE_HORIZONTAL_BILLBOARD", !1), a.define("CC_USE_VERTICAL_BILLBOARD", !0), a.define("CC_USE_MESH", !1)) : this._particleSystem.renderMode === f.RenderMode.Mesh ? (a.define("CC_USE_BILLBOARD", !1), a.define("CC_USE_STRETCHED_BILLBOARD", !1), a.define("CC_USE_HORIZONTAL_BILLBOARD", !1), a.define("CC_USE_VERTICAL_BILLBOARD", !1), a.define("CC_USE_MESH", !0)) : console.warn("particle system renderMode " + this._particleSystem.renderMode + " not support.");
                        this._particleSystem.textureAnimationModule.enable && k.Vec2.set(this.frameTile_velLenScale, this._particleSystem.textureAnimationModule.numTilesX, this._particleSystem.textureAnimationModule.numTilesY);
                        a.setProperty("frameTile_velLenScale", this.frameTile_velLenScale);
                        this._particleSystem.setMaterial(0, a)
                    }
                };
            p._updateTrailMaterial = function() {
                var a = this._particleSystem.trailMaterial;
                this._particleSystem.trailModule.enable && (null === a && null === this._defaultTrailMat && (this._defaultTrailMat = b["default"].createWithBuiltin("3d-trail", this)), null === a && (a = this._defaultTrailMat, this._particleSystem.trailMaterial = a), this._particleSystem._simulationSpace === f.Space.World || this._particleSystem.trailModule.space === f.Space.World ? a.define("CC_USE_WORLD_SPACE", !0) : a.define("CC_USE_WORLD_SPACE", !1), this._particleSystem.trailModule._updateMaterial())
            };
            p._updateTrailEnable = function(a) {
                if (this._model) {
                    var b = this._model._subDatas[1];
                    b && (b.enable = a)
                }
            };
            p._updateModel = function() {
                this._model && this._model.setVertexAttributes(this._particleSystem.renderMode === f.RenderMode.Mesh ? this._particleSystem.mesh : null, this._vertFormat)
            };
            p.setVertexAttributes = function(a, b) {
                this._model && this._model.setVertexAttributes(a, b)
            };
            p.fillBuffers = function(a, b) {
                if (this._model) {
                    this._model._uploadData();
                    var c = this._model._subMeshes,
                        f = this._model._subDatas,
                        d = a.materials;
                    b._flush();
                    for (var l = 0, n = c.length; l < n; l++) {
                        var k = c[l],
                            p = d[l];
                        f[l].enable && (b.material = p, b.cullingMask = a.node._cullingMask, b.node = a.node, b._flushIA(k))
                    }
                }
            };
            return d
        }(u["default"])) || t);
        m["default"] = c;
        Object.assign(c, {
            uv: E
        });
        u["default"].register(v["default"], c);
        q.exports = m["default"]
    }, {
        "../../../../renderer/gfx": 358,
        "../../../../renderer/memop/recycle-pool": 373,
        "../../../assets/material/material-variant": 120,
        "../../../platform/CCClassDecorator": 228,
        "../../../renderer/assembler": 256,
        "../../../value-types": 325,
        "../enum": 44,
        "../particle": 47,
        "../particle-system-3d": 46,
        "./particle-batch-model": 48
    }],
    50: [function(g, q, m) {
        function h(a) {
            return a && a.__esModule ? a : {
                default: a
            }
        }

        function e(a, b) {
            $jscomp.initSymbol();
            $jscomp.initSymbol();
            $jscomp.initSymbolIterator();
            var c = "undefined" !== typeof Symbol && a[Symbol.iterator] || a["@@iterator"];
            if (c) return (c = c.call(a)).next.bind(c);
            if (Array.isArray(a) || (c = d(a)) || b && a && "number" === typeof a.length) {
                c && (a = c);
                var f = 0;
                return function() {
                    return f >= a.length ? {
                        done: !0
                    } : {
                        done: !1,
                        value: a[f++]
                    }
                }
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }

        function d(a, b) {
            if (a) {
                if ("string" === typeof a) return k(a, b);
                var c = Object.prototype.toString.call(a).slice(8, -1);
                "Object" === c && a.constructor && (c = a.constructor.name);
                if ("Map" === c || "Set" === c) return Array.from(a);
                if ("Arguments" === c || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(c)) return k(a, b)
            }
        }

        function k(a, b) {
            (null == b ||
                b > a.length) && (b = a.length);
            for (var c = 0, f = Array(b); c < b; c++) f[c] = a[c];
            return f
        }

        function c(a, b, c, f) {
            c && Object.defineProperty(a, b, {
                enumerable: c.enumerable,
                configurable: c.configurable,
                writable: c.writable,
                value: c.initializer ? c.initializer.call(f) : void 0
            })
        }

        function a(a, b) {
            for (var c = 0; c < b.length; c++) {
                var f = b[c];
                f.enumerable = f.enumerable || !1;
                f.configurable = !0;
                "value" in f && (f.writable = !0);
                Object.defineProperty(a, l(f.key), f)
            }
        }

        function b(b, c, f) {
            c && a(b.prototype, c);
            f && a(b, f);
            Object.defineProperty(b, "prototype", {
                writable: !1
            });
            return b
        }

        function l(a) {
            a: if ("object" === typeof a && null !== a) {
                $jscomp.initSymbol();
                var b = a[Symbol.toPrimitive];
                if (void 0 !== b) {
                    a = b.call(a, "string");
                    if ("object" !== typeof a) break a;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                a = String(a)
            }return "symbol" === typeof a ? a : String(a)
        }

        function f(a, b, c, f, d) {
            var l = {};
            Object.keys(f).forEach(function(a) {
                l[a] = f[a]
            });
            l.enumerable = !!l.enumerable;
            l.configurable = !!l.configurable;
            ("value" in l || l.initializer) && (l.writable = !0);
            l = c.slice().reverse().reduce(function(c,
                f) {
                return f(a, b, c) || c
            }, l);
            d && void 0 !== l.initializer && (l.value = l.initializer ? l.initializer.call(d) : void 0, l.initializer = void 0);
            void 0 === l.initializer && (Object.defineProperty(a, b, l), l = null);
            return l
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var n = g("../../../platform/CCClassDecorator"),
            u = g("../../../value-types"),
            v = h(g("../../../../renderer/gfx")),
            p = h(g("../../../../renderer/memop/pool")),
            t = h(g("../animator/curve-range")),
            x = h(g("../animator/gradient-range")),
            z = g("../enum"),
            E = h(g("../utils")),
            w, A, B, y, C, F,
            G, D, I, K, L, R, M, S, O, Q, V, ba, da, T, N, fa, Z = Math.cos((0, u.toRadian)(100)),
            W = {
                position: cc.v3(),
                velocity: cc.v3()
            },
            X = cc.quat(),
            la = cc.mat4(),
            ea = cc.v3(),
            ja = cc.v3(),
            oa = cc.color(),
            sa = function() {
                function a(a) {
                    this.end = this.start = void 0;
                    this.trailElements = [];
                    this.end = this.start = -1;
                    for (this.trailElements = []; a--;) this.trailElements.push({
                        position: cc.v3(),
                        lifetime: 0,
                        width: 0,
                        velocity: cc.v3(),
                        direction: 0,
                        color: cc.color()
                    })
                }
                var b = a.prototype;
                b.getElement = function(a) {
                    if (-1 === this.start) return null;
                    0 > a && (a = (a + this.trailElements.length) %
                        this.trailElements.length);
                    a >= this.trailElements.length && (a %= this.trailElements.length);
                    return this.trailElements[a]
                };
                b.addElement = function() {
                    if (0 === this.trailElements.length) return null;
                    if (-1 === this.start) return this.start = 0, this.end = 1, this.trailElements[0];
                    this.start === this.end && (this.trailElements.splice(this.end, 0, {
                        position: cc.v3(),
                        lifetime: 0,
                        width: 0,
                        velocity: cc.v3(),
                        direction: 0,
                        color: cc.color()
                    }), this.start++, this.start %= this.trailElements.length);
                    var a = this.end++;
                    this.end %= this.trailElements.length;
                    return this.trailElements[a]
                };
                b.iterateElement = function(a, b, c, f) {
                    for (var d = this.start >= this.end ? this.end + this.trailElements.length : this.end, l = this.start; l < d; l++) b(a, this.trailElements[l % this.trailElements.length], c, f) && (this.start++, this.start %= this.trailElements.length);
                    this.start === d && (this.end = this.start = -1)
                };
                b.count = function() {
                    return this.start < this.end ? this.end - this.start : this.trailElements.length + this.end - this.start
                };
                b.clear = function() {
                    this.end = this.start = -1
                };
                return a
            }();
        g = (w = (0, n.ccclass)("cc.TrailModule"),
            A = (0, n.property)({
                type: z.TrailMode
            }), B = (0, n.property)({
                type: t["default"]
            }), y = (0, n.property)({
                type: z.Space
            }), C = (0, n.property)({
                type: z.TextureMode
            }), F = (0, n.property)({
                type: t["default"]
            }), G = (0, n.property)({
                type: x["default"]
            }), D = (0, n.property)({
                type: x["default"]
            }), w(I = (K = function() {
                function a() {
                    c(this, "_enable", L, this);
                    c(this, "mode", R, this);
                    c(this, "lifeTime", M, this);
                    c(this, "_minParticleDistance", S, this);
                    c(this, "_space", O, this);
                    c(this, "existWithParticles", Q, this);
                    c(this, "textureMode", V, this);
                    c(this, "widthFromParticle",
                        ba, this);
                    c(this, "widthRatio", da, this);
                    c(this, "colorFromParticle", T, this);
                    c(this, "colorOverTrail", N, this);
                    c(this, "colorOvertime", fa, this);
                    this._particleSystem = null;
                    this.ibOffset = this.vbOffset = this._trailLifetime = this._trailNum = this._vertSize = this._minSquaredDistance = 0;
                    this._material = this._defaultMat = this._needTransform = this._iBuffer = this._vbUint32 = this._vbF32 = this._gfxVFmt = this._ia = this._particleTrail = this._trailSegments = null;
                    this._gfxVFmt = new v["default"].VertexFormat([{
                        name: v["default"].ATTR_POSITION,
                        type: v["default"].ATTR_TYPE_FLOAT32,
                        num: 3
                    }, {
                        name: v["default"].ATTR_TEX_COORD,
                        type: v["default"].ATTR_TYPE_FLOAT32,
                        num: 4
                    }, {
                        name: v["default"].ATTR_TEX_COORD1,
                        type: v["default"].ATTR_TYPE_FLOAT32,
                        num: 3
                    }, {
                        name: v["default"].ATTR_COLOR,
                        type: v["default"].ATTR_TYPE_UINT8,
                        num: 4,
                        normalize: !0
                    }]);
                    this._vertSize = this._gfxVFmt._bytes;
                    this._particleTrail = new E["default"]
                }
                var f = a.prototype;
                f.onInit = function(a) {
                    this._particleSystem = a;
                    this.minParticleDistance = this._minParticleDistance;
                    for (var b = 0, c = e(a.bursts), f; !(f =
                            c()).done;) b += f.value.getMaxCount(a);
                    this.lifeTime.constant = 1;
                    this._trailNum = Math.ceil(a.startLifetime.getMax() * this.lifeTime.getMax() * 60 * (a.rateOverTime.getMax() * a.duration + b));
                    this._trailSegments = new p["default"](function() {
                        return new sa(10)
                    }, Math.ceil(a.rateOverTime.getMax() * a.duration));
                    this._enable && (this.enable = this._enable, this._updateMaterial())
                };
                f.onEnable = function() {};
                f.onDisable = function() {};
                f.destroy = function() {
                    this._trailSegments && (this._trailSegments.clear(function(a) {
                        a.trailElements.length =
                            0
                    }), this._trailSegments = null)
                };
                f.clear = function() {
                    if (this.enable) {
                        for (var a = this._particleTrail.values(), b = a.next(); !b.done;) b.value.clear(), b = a.next();
                        this._particleTrail.clear();
                        this.updateTrailBuffer()
                    }
                };
                f._createTrailData = function() {
                    var a = this._particleSystem._assembler._model;
                    a && (a.createTrailData(this._gfxVFmt, this._trailNum), a = a._subDatas[1], this._vbF32 = a.getVData(), this._vbUint32 = a.getVData(Uint32Array), this._iBuffer = a.iData)
                };
                f._updateMaterial = function() {
                    this._particleSystem && (this._material =
                        this._particleSystem.trailMaterial || this._particleSystem._assembler._defaultTrailMat)
                };
                f.update = function() {
                    this._trailLifetime = this.lifeTime.evaluate(this._particleSystem._time, 1);
                    this.space === z.Space.World && this._particleSystem._simulationSpace === z.Space.Local ? (this._needTransform = !0, this._particleSystem.node.getWorldMatrix(la), this._particleSystem.node.getWorldRotation(X)) : this._needTransform = !1
                };
                f.animate = function(a, b) {
                    if (this._trailSegments) {
                        var c = this._particleTrail.get(a);
                        if (c) {
                            var f = c.getElement(c.end -
                                1);
                            this._needTransform ? u.Vec3.transformMat4(ea, a.position, la) : u.Vec3.copy(ea, a.position);
                            if (f && (c.iterateElement(this, this._updateTrailElement, a, b), u.Vec3.squaredDistance(f.position, ea) < this._minSquaredDistance)) return;
                            if (f = c.addElement()) u.Vec3.copy(f.position, ea), f.lifetime = 0, this.widthFromParticle ? f.width = a.size.x * this.widthRatio.evaluate(0, 1) : f.width = this.widthRatio.evaluate(0, 1), b = c.count(), 2 === b ? (c = c.getElement(c.end - 2), u.Vec3.subtract(c.velocity, f.position, c.position)) : 2 < b && (b = c.getElement(c.end -
                                2), c = c.getElement(c.end - 3), u.Vec3.subtract(ea, c.position, b.position), u.Vec3.subtract(ja, f.position, b.position), u.Vec3.subtract(b.velocity, ja, ea), u.Vec3.equals(cc.Vec3.ZERO, b.velocity) && u.Vec3.copy(b.velocity, ea)), this.colorFromParticle ? f.color.set(a.color) : f.color.set(this.colorOvertime.evaluate(0, 1))
                        } else c = this._trailSegments.alloc(), this._particleTrail.set(a, c)
                    }
                };
                f._updateTrailElement = function(a, b, c, f) {
                    b.lifetime += f;
                    a.colorFromParticle ? (b.color.set(c.color), b.color.multiply(a.colorOvertime.evaluate(1 -
                        c.remainingLifetime / c.startLifetime, 1))) : b.color.set(a.colorOvertime.evaluate(1 - c.remainingLifetime / c.startLifetime, 1));
                    a.widthFromParticle ? b.width = c.size.x * a.widthRatio.evaluate(b.lifetime / a._trailLifetime, 1) : b.width = a.widthRatio.evaluate(b.lifetime / a._trailLifetime, 1);
                    return b.lifetime > a._trailLifetime
                };
                f.removeParticle = function(a) {
                    var b = this._particleTrail.get(a);
                    b && this._trailSegments && (b.clear(), this._trailSegments.free(b), this._particleTrail["delete"](a))
                };
                f.updateTrailBuffer = function() {
                    this.ibOffset =
                        this.vbOffset = 0;
                    for (var a = e(this._particleTrail.keys()), b; !(b = a()).done;) {
                        b = b.value;
                        var c = this._particleTrail.get(b);
                        if (-1 !== c.start) {
                            var f = 4 * this.vbOffset / this._vertSize,
                                d = c.start >= c.end ? c.end + c.trailElements.length : c.end,
                                l = d - c.start,
                                n = 1 / l;
                            this._fillVertexBuffer(c.trailElements[c.start], this.colorOverTrail.evaluate(1, 1), f, 1, 0, 4);
                            for (var k = c.start + 1; k < d; k++) {
                                var p = k - c.start;
                                this._fillVertexBuffer(c.trailElements[k % c.trailElements.length], this.colorOverTrail.evaluate(1 - p / l, 1), f, 1 - p * n, p, 5)
                            }
                            this._needTransform ?
                                u.Vec3.transformMat4(W.position, b.position, la) : u.Vec3.copy(W.position, b.position);
                            1 === l || 2 === l ? (n = c.getElement(c.end - 1), u.Vec3.subtract(n.velocity, W.position, n.position), this._vbF32[this.vbOffset - this._vertSize / 4 - 4] = n.velocity.x, this._vbF32[this.vbOffset - this._vertSize / 4 - 3] = n.velocity.y, this._vbF32[this.vbOffset - this._vertSize / 4 - 2] = n.velocity.z, this._vbF32[this.vbOffset - 4] = n.velocity.x, this._vbF32[this.vbOffset - 3] = n.velocity.y, this._vbF32[this.vbOffset - 2] = n.velocity.z, u.Vec3.subtract(W.velocity, W.position,
                                n.position), this._checkDirectionReverse(W, n)) : 2 < l && (d = c.getElement(c.end - 1), c = c.getElement(c.end - 2), u.Vec3.subtract(ea, c.position, d.position), u.Vec3.subtract(ja, W.position, d.position), u.Vec3.normalize(ea, ea), u.Vec3.normalize(ja, ja), u.Vec3.subtract(d.velocity, ja, ea), u.Vec3.normalize(d.velocity, d.velocity), this._checkDirectionReverse(d, c), this.vbOffset -= this._vertSize / 4 * 2, this.ibOffset -= 6, this._fillVertexBuffer(d, this.colorOverTrail.evaluate(n, 1), f, n, l - 1, 5), u.Vec3.subtract(W.velocity, W.position, d.position),
                                u.Vec3.normalize(W.velocity, W.velocity), this._checkDirectionReverse(W, d));
                            this.widthFromParticle ? W.width = b.size.x * this.widthRatio.evaluate(0, 1) : W.width = this.widthRatio.evaluate(0, 1);
                            W.color = b.color;
                            u.Vec3.equals(W.velocity, cc.Vec3.ZERO) ? this.ibOffset -= 3 : this._fillVertexBuffer(W, this.colorOverTrail.evaluate(0, 1), f, 0, l, 1)
                        }
                    }
                    this._updateIA(this.ibOffset)
                };
                f._fillVertexBuffer = function(a, b, c, f, d, l) {
                    this._vbF32[this.vbOffset++] = a.position.x;
                    this._vbF32[this.vbOffset++] = a.position.y;
                    this._vbF32[this.vbOffset++] =
                        a.position.z;
                    this._vbF32[this.vbOffset++] = 0;
                    this._vbF32[this.vbOffset++] = a.width;
                    this._vbF32[this.vbOffset++] = f;
                    this._vbF32[this.vbOffset++] = 0;
                    this._vbF32[this.vbOffset++] = a.velocity.x;
                    this._vbF32[this.vbOffset++] = a.velocity.y;
                    this._vbF32[this.vbOffset++] = a.velocity.z;
                    oa.set(a.color);
                    oa.multiply(b);
                    this._vbUint32[this.vbOffset++] = oa._val;
                    this._vbF32[this.vbOffset++] = a.position.x;
                    this._vbF32[this.vbOffset++] = a.position.y;
                    this._vbF32[this.vbOffset++] = a.position.z;
                    this._vbF32[this.vbOffset++] = 1;
                    this._vbF32[this.vbOffset++] =
                        a.width;
                    this._vbF32[this.vbOffset++] = f;
                    this._vbF32[this.vbOffset++] = 1;
                    this._vbF32[this.vbOffset++] = a.velocity.x;
                    this._vbF32[this.vbOffset++] = a.velocity.y;
                    this._vbF32[this.vbOffset++] = a.velocity.z;
                    this._vbUint32[this.vbOffset++] = oa._val;
                    l & 1 && (this._iBuffer[this.ibOffset++] = c + 2 * d, this._iBuffer[this.ibOffset++] = c + 2 * d - 1, this._iBuffer[this.ibOffset++] = c + 2 * d + 1);
                    l & 4 && (this._iBuffer[this.ibOffset++] = c + 2 * d, this._iBuffer[this.ibOffset++] = c + 2 * d + 1, this._iBuffer[this.ibOffset++] = c + 2 * d + 2)
                };
                f._updateIA = function(a) {
                    this._particleSystem &&
                        this._particleSystem._assembler && this._particleSystem._assembler.updateIA(1, a, !0, !0)
                };
                f._checkDirectionReverse = function(a, b) {
                    u.Vec3.dot(a.velocity, b.velocity) < Z ? a.direction = 1 - b.direction : a.direction = b.direction
                };
                b(a, [{
                    key: "enable",
                    get: function() {
                        return this._enable
                    },
                    set: function(a) {
                        a && this._createTrailData();
                        a && !this._enable && (this._enable = a, this._particleSystem._assembler._updateTrailMaterial());
                        this._enable = a;
                        this._particleSystem._assembler._updateTrailEnable(this._enable)
                    }
                }, {
                    key: "minParticleDistance",
                    get: function() {
                        return this._minParticleDistance
                    },
                    set: function(a) {
                        this._minParticleDistance = a;
                        this._minSquaredDistance = a * a
                    }
                }, {
                    key: "space",
                    get: function() {
                        return this._space
                    },
                    set: function(a) {
                        this._space = a;
                        this._particleSystem && this._particleSystem._assembler._updateTrailMaterial()
                    }
                }]);
                return a
            }(), L = f(K.prototype, "_enable", [n.property], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }), f(K.prototype, "enable", [n.property], Object.getOwnPropertyDescriptor(K.prototype, "enable"),
                K.prototype), R = f(K.prototype, "mode", [A], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return z.TrailMode.Particles
                }
            }), M = f(K.prototype, "lifeTime", [B], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new t["default"]
                }
            }), S = f(K.prototype, "_minParticleDistance", [n.property], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return .1
                }
            }), f(K.prototype, "minParticleDistance", [n.property], Object.getOwnPropertyDescriptor(K.prototype, "minParticleDistance"),
                K.prototype), O = f(K.prototype, "_space", [n.property], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return z.Space.World
                }
            }), f(K.prototype, "space", [y], Object.getOwnPropertyDescriptor(K.prototype, "space"), K.prototype), Q = f(K.prototype, "existWithParticles", [n.property], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !0
                }
            }), V = f(K.prototype, "textureMode", [C], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return z.TextureMode.Stretch
                }
            }), ba = f(K.prototype,
                "widthFromParticle", [n.property], {
                    configurable: !0,
                    enumerable: !0,
                    writable: !0,
                    initializer: function() {
                        return !0
                    }
                }), da = f(K.prototype, "widthRatio", [F], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new t["default"]
                }
            }), T = f(K.prototype, "colorFromParticle", [n.property], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return !1
                }
            }), N = f(K.prototype, "colorOverTrail", [G], {
                configurable: !0,
                enumerable: !0,
                writable: !0,
                initializer: function() {
                    return new x["default"]
                }
            }), fa = f(K.prototype,
                "colorOvertime", [D], {
                    configurable: !0,
                    enumerable: !0,
                    writable: !0,
                    initializer: function() {
                        return new x["default"]
                    }
                }), K)) || I);
        m["default"] = g;
        q.exports = m["default"]
    }, {
        "../../../../renderer/gfx": 358,
        "../../../../renderer/memop/pool": 372,
        "../../../platform/CCClassDecorator": 228,
        "../../../value-types": 325,
        "../animator/curve-range": 32,
        "../animator/gradient-range": 34,
        "../enum": 44,
        "../utils": 51
    }],
    51: [function(g, q, m) {
            m.__esModule = !0;
            m["default"] = void 0;
            Object.is || (Object.is = function(h, e) {
                return h === e ? 0 !== h || 1 /
                    h === 1 / e : h !== h && e !== e
            });
            g = function() {
                function h(d) {
                    this.datas = [];
                    !d && (d = []);
                    this.datas = [];
                    var k = this;
                    d.forEach(function(c) {
                        k.has(c[0]) || k.datas.push({
                            key: c[0],
                            value: c[1]
                        })
                    })
                }
                var e = h.prototype;
                e.size = function() {
                    return this.datas.length
                };
                e.set = function(d, k) {
                    this["delete"](d);
                    this.datas.push({
                        key: d,
                        value: k
                    })
                };
                e.get = function(d) {
                    for (var k = void 0, c = this.datas, a = 0, b = c.length; a < b; a++)
                        if (Object.is(d, c[a].key)) {
                            k = c[a].value;
                            break
                        }
                    return k
                };
                e.has = function(d) {
                    for (var k = !1, c = this.datas, a = 0, b = c.length; a < b; a++)
                        if (Object.is(d,
                                c[a].key)) {
                            k = !0;
                            break
                        }
                    return k
                };
                e.clear = function() {
                    this.datas.length = 0
                };
                e["delete"] = function(d) {
                    for (var k = !1, c = this.datas, a = 0, b = c.length; a < b; a++)
                        if (Object.is(d, c[a].key)) {
                            c.splice(a, 1);
                            k = !0;
                            break
                        }
                    return k
                };
                e.keys = function() {
                    for (var d = this.datas, k = [], c = 0, a = d.length; c < a; c++) k.push(d[c].key);
                    return k
                };
                e.values = function() {
                    var d = 0,
                        k = this.datas;
                    return {
                        next: function() {
                            return 0 === k.length || void 0 === k[d] ? {
                                value: void 0,
                                done: !0
                            } : {
                                value: k[d++].value,
                                done: !1
                            }
                        }
                    }
                };
                return h
            }();
            m["default"] = g;
            q.exports = m["default"]
        },
        {}
    ],
    52: [function(g, q, m) {
        g = g("../../../animation/animation-curves");
        g = cc.Class({
            name: "cc.JointMatrixCurve",
            extends: g.DynamicAnimCurve,
            _findFrameIndex: g.quickFindIndex,
            sample: function(h, e) {
                h = this._findFrameIndex(this.ratios, e); - 1 > h && (h = ~h - 1);
                e = this.pairs;
                for (var d = 0; d < e.length; d++) {
                    var k = e[d];
                    k.target._jointMatrix = k.values[h]
                }
            }
        });
        q.exports = g
    }, {
        "../../../animation/animation-curves": 12
    }],
    53: [function(g, q, m) {
        g = cc.Class({
            name: "cc.Skeleton",
            extends: cc.Asset,
            ctor: function() {
                this.loaded = !1;
                this._bindposes = [];
                this._uniqueBindPoses = [];
                this._jointPaths = []
            },
            properties: {
                _model: cc.Model,
                _jointIndices: [],
                _skinIndex: -1,
                jointPaths: {
                    get: function() {
                        return this._jointPaths
                    }
                },
                bindposes: {
                    get: function() {
                        return this._bindposes
                    }
                },
                uniqueBindPoses: {
                    get: function() {
                        return this._uniqueBindPoses
                    }
                },
                model: {
                    get: function() {
                        return this._model
                    }
                }
            },
            onLoad: function() {
                for (var h = this._model.nodes, e = this._jointIndices, d = this._jointPaths, k = this._bindposes, c = this._uniqueBindPoses, a = 0; a < e.length; a++) {
                    var b = h[e[a]];
                    d[a] = b.path;
                    b.uniqueBindPose ?
                        k[a] = c[a] = b.uniqueBindPose : k[a] = b.bindpose[this._skinIndex]
                }
            }
        });
        cc.Skeleton = q.exports = g
    }, {}],
    54: [function(g, q, m) {
        var h = g("../../components/CCAnimation");
        m = g("../CCModel");
        g = g("./CCSkeletonAnimationClip");
        g = cc.Class({
            name: "cc.SkeletonAnimation",
            extends: h,
            editor: !1,
            properties: {
                _model: {
                    default: null,
                    type: m
                },
                _defaultClip: {
                    override: !0,
                    default: null,
                    type: g
                },
                _clips: {
                    override: !0,
                    default: [],
                    type: [g],
                    visible: !0
                },
                defaultClip: {
                    override: !0,
                    get: function() {
                        return this._defaultClip
                    },
                    set: function(e) {
                        this._defaultClip =
                            e
                    },
                    type: g
                },
                model: {
                    get: function() {
                        return this._model
                    },
                    set: function(e) {
                        this._model = e;
                        this._updateClipModel()
                    },
                    type: m
                }
            },
            __preload: function() {
                this._updateClipModel()
            },
            _updateClipModel: function() {
                this._defaultClip && (this._defaultClip._model = this._model);
                for (var e = this._clips, d = 0; d < e.length; d++) e[d]._model = this._model
            },
            addClip: function(e, d) {
                e._model = this._model;
                return h.prototype.addClip.call(this, e, d)
            },
            searchClips: !1
        });
        cc.SkeletonAnimation = q.exports = g
    }, {
        "../../components/CCAnimation": 133,
        "../CCModel": 28,
        "./CCSkeletonAnimationClip": 55,
        "fire-path": void 0
    }],
    55: [function(g, q, m) {
        function h(c) {
            var a = new Float32Array(16);
            a.set(c.m);
            return a
        }
        var e = function(c) {
                return c && c.__esModule ? c : {
                    default: c
                }
            }(g("../../value-types/mat4")),
            d = g("../../../animation/animation-clip"),
            k = g("./CCJointMatrixCurve");
        g = cc.Class({
            name: "cc.SkeletonAnimationClip",
            extends: d,
            properties: {
                _nativeAsset: {
                    override: !0,
                    get: function() {
                        return this._buffer
                    },
                    set: function(c) {
                        var a = ArrayBuffer.isView(c) ? c.buffer : c;
                        this._buffer = new Float32Array(a ||
                            c, 0, a.byteLength / 4)
                    }
                },
                description: {
                    default: null,
                    type: Object
                },
                curveData: {
                    visible: !1,
                    override: !0,
                    get: function() {
                        return this._curveData || {}
                    },
                    set: function() {}
                }
            },
            statics: {
                preventDeferredLoadDependents: !0
            },
            _init: function() {
                if (this._curveData) return this._curveData;
                this._curveData = {};
                this._generateCommonCurve();
                this._model.precomputeJointMatrix && this._generateJointMatrixCurve();
                return this._curveData
            },
            _generateCommonCurve: function() {
                function c() {
                    return a[d++]
                }
                var a = this._buffer,
                    b = this.description,
                    d = 0;
                this._curveData.paths ||
                    (this._curveData.paths = {});
                var f = this._curveData.paths,
                    n;
                for (n in b) {
                    var k = b[n],
                        v = {};
                    f[n] = {
                        props: v
                    };
                    for (var p in k) {
                        var t = [],
                            e = k[p].frameCount;
                        d = k[p].offset;
                        for (var h = 0; h < e; h++) {
                            var g = c(),
                                w = void 0;
                            "position" === p || "scale" === p ? w = cc.v3(c(), c(), c()) : "quat" === p && (w = cc.quat(c(), c(), c(), c()));
                            t.push({
                                frame: g,
                                value: w
                            })
                        }
                        v[p] = t
                    }
                }
            },
            _generateJointMatrixCurve: function() {
                function c(d, l, n) {
                    var k = b[d.path];
                    if (d !== a && k) {
                        k = k.props;
                        for (var p in k)
                            for (var t = k[p], u = 0; u < t.length; u++) {
                                var v = t[u];
                                if (1E-4 > Math.abs(v.frame -
                                        l)) {
                                    d[p].set(v.value);
                                    break
                                }
                                if (v.frame > l) {
                                    t = t[u - 1];
                                    t.value.lerp(v.value, (l - t.frame) / (v.frame - t.frame), d[p]);
                                    break
                                }
                            }
                        v = cc.mat4();
                        e["default"].fromRTS(v, d.quat, d.position, d.scale);
                        n && e["default"].mul(v, n, v);
                        k._jointMatrix || (k._jointMatrix = []);
                        if (d.uniqueBindPose) {
                            var x = cc.mat4();
                            e["default"].mul(x, v, d.uniqueBindPose)
                        }
                        f[d.path] || (f[d.path] = []);
                        x ? f[d.path].push(h(x)) : f[d.path].push(v)
                    }
                    d = d.children;
                    for (var g in d) c(d[g], l, v)
                }
                for (var a = this._model.rootNode, b = this._curveData.paths, d = {
                            ratios: [],
                            jointMatrixMap: {}
                        },
                        f = d.jointMatrixMap, n = 0, k = this.duration, v = 1 / this.sample; n < k;) d.ratios.push(n / k), c(a, n), n += v;
                this._curveData = d
            },
            _createJointMatrixCurve: function(c, a) {
                c = new k;
                c.ratios = this.curveData.ratios;
                c.pairs = [];
                var b = this.curveData.jointMatrixMap,
                    d;
                for (d in b) {
                    var f = cc.find(d, a);
                    f && c.pairs.push({
                        target: f,
                        values: b[d]
                    })
                }
                return [c]
            },
            createCurves: function(c, a) {
                if (!this._model) return cc.warn("Skeleton Animation Clip [" + this.name + "] Can not find model"), [];
                this._init();
                return this._model.precomputeJointMatrix ? this._createJointMatrixCurve(c,
                    a) : d.prototype.createCurves.call(this, c, a)
            }
        });
        cc.SkeletonAnimationClip = q.exports = g
    }, {
        "../../../animation/animation-clip": 11,
        "../../value-types/mat4": 327,
        "./CCJointMatrixCurve": 52
    }],
    56: [function(g, q, m) {
        var h = function(a) {
            return a && a.__esModule ? a : {
                default: a
            }
        }(g("../../value-types/mat4"));
        m = g("./CCSkeleton");
        var e = g("../../mesh/CCMeshRenderer"),
            d = g("../../renderer/render-flow");
        g("../../../renderer/enums");
        var k = cc.mat4(),
            c = cc.mat4();
        g = cc.Class({
            name: "cc.SkinnedMeshRenderer",
            extends: e,
            editor: !1,
            ctor: function() {
                this._jointsTexture =
                    this._jointsData = this._jointsFloat32Data = null;
                this._joints = [];
                this._dummyNode = new cc.Node;
                this._jointsTextureOptions = null;
                this._usingRGBA8Texture = !1
            },
            properties: {
                _skeleton: m,
                _rootBone: cc.Node,
                skeleton: {
                    get: function() {
                        return this._skeleton
                    },
                    set: function(a) {
                        this._skeleton = a;
                        this._init()
                    },
                    type: m
                },
                rootBone: {
                    get: function() {
                        return this._rootBone
                    },
                    set: function(a) {
                        this._rootBone = a;
                        this._init()
                    },
                    type: cc.Node
                },
                enableAutoBatch: {
                    get: function() {
                        return !1
                    },
                    visible: !1,
                    override: !0
                }
            },
            __preload: function() {
                this._super();
                this._init()
            },
            _init: function() {
                this._model = this._skeleton && this._skeleton.model;
                this._calFunc = null;
                this._initJoints();
                this._initJointsTexture();
                this._initCalcFunc();
                this._updateRenderNode()
            },
            _calcWorldMatrixToRoot: function(a) {
                var b = a._worldMatrixToRoot;
                b || (a._worldMatrixToRoot = b = cc.mat4(), a.getLocalMatrix(b), a = a.parent, a !== this.rootBone && (a._worldMatrixToRoot || this._calcWorldMatrixToRoot(a), h["default"].mul(b, a._worldMatrixToRoot, b)))
            },
            _validateRender: function() {
                this._jointsData ? this._super() : this.disableRender()
            },
            _initJoints: function() {
                var a = this._joints;
                a.length = 0;
                if (this.skeleton && this.rootBone) {
                    for (var b = this._useJointMatrix(), c = this.skeleton.jointPaths, f = this.rootBone, n = 0; n < c.length; n++) {
                        var u = cc.find(c[n], f);
                        u || cc.warn("Can not find joint in root bone [%s] with path [%s]", f.name, c[n]);
                        b && (u._renderFlag &= ~d.FLAG_CHILDREN, this._calcWorldMatrixToRoot(u));
                        a.push(u)
                    }
                    if (b)
                        for (b = this.skeleton.uniqueBindPoses, f = 0; f < c.length; f++) n = a[f], b[f] ? (h["default"].mul(k, n._worldMatrixToRoot, b[f]), n._jointMatrix = h["default"].toArray([],
                            k)) : n._jointMatrix = n._worldMatrixToRoot
                }
            },
            _initJointsTexture: function() {
                if (this._skeleton) {
                    var a = this._joints.length,
                        b = !1;
                    a <= cc.sys.getMaxJointMatrixSize() && (b = !0, this._jointsData = this._jointsFloat32Data = new Float32Array(16 * a));
                    if (!b) {
                        var c = !!cc.sys.glExtension("OES_texture_float");
                        b = 256 < a ? 64 : 64 < a ? 32 : 16 < a ? 16 : 8;
                        this._jointsData = this._jointsFloat32Data = new Float32Array(b * b * 4);
                        var f = cc.Texture2D.PixelFormat.RGBA32F,
                            d = b;
                        c || (this._jointsData = new Uint8Array(this._jointsFloat32Data.buffer), f = cc.Texture2D.PixelFormat.RGBA8888,
                            d *= 4, this._usingRGBA8Texture = !0, cc.warn("SkinnedMeshRenderer [" + this.node.name + "] has too many joints [" + a + "] and device do not support float32 texture, fallback to use RGBA8888 texture, which is much slower."));
                        a = this._jointsTexture || new cc.Texture2D;
                        c = cc.Texture2D.Filter.NEAREST;
                        a.setFilters(c, c);
                        a.initWithData(this._jointsData, f, d, b);
                        this._jointsTexture = a;
                        this._jointsTextureOptions = {
                            format: f,
                            width: a.width,
                            height: a.height,
                            images: []
                        }
                    }
                    this._updateMaterial()
                }
            },
            _updateMaterial: function() {
                e.prototype._updateMaterial.call(this);
                for (var a = this.getMaterials(), b = 0; b < a.length; b++) {
                    var c = a[b];
                    this._jointsTexture ? (c.setProperty("jointsTexture", this._jointsTexture), c.setProperty("jointsTextureSize", new Float32Array([this._jointsTexture.width, this._jointsTexture.height])), c.define("CC_JOINTS_TEXTURE_FLOAT32", !!cc.sys.glExtension("OES_texture_float")), c.define("CC_USE_JOINTS_TEXTRUE", !0)) : (this._jointsFloat32Data && c.setProperty("jointMatrices", this._jointsFloat32Data, void 0, !0), c.define("CC_USE_JOINTS_TEXTRUE", !1));
                    c.define("CC_USE_SKINNING", !0)
                }
            },
            _setJointsDataWithArray: function(a, b) {
                this._jointsFloat32Data.set(b, 16 * a)
            },
            _setJointsDataWithMatrix: function(a, b) {
                this._jointsFloat32Data.set(b.m, 16 * a)
            },
            _commitJointsData: function() {
                this._jointsTexture && (this._jointsTextureOptions.images[0] = this._jointsData, this._jointsTexture.update(this._jointsTextureOptions))
            },
            _useJointMatrix: function() {
                return this._model && this._model.precomputeJointMatrix
            },
            _updateRenderNode: function() {
                this._useJointMatrix() || this._usingRGBA8Texture ? this._assembler.setRenderNode(this.rootBone) :
                    this._assembler.setRenderNode(this._dummyNode)
            },
            _initCalcFunc: function() {
                this._useJointMatrix() ? this._calFunc = this._calJointMatrix : this._usingRGBA8Texture ? this._calFunc = this._calRGBA8WorldMatrix : this._calFunc = this._calWorldMatrix
            },
            _calJointMatrix: function() {
                for (var a = this._joints, b = this.skeleton.bindposes, c = this.skeleton.uniqueBindPoses, f = 0; f < a.length; ++f) {
                    var d = a[f]._jointMatrix;
                    c[f] ? this._setJointsDataWithArray(f, d) : (h["default"].multiply(k, d, b[f]), this._setJointsDataWithMatrix(f, k))
                }
            },
            _calRGBA8WorldMatrix: function() {
                var a =
                    this._joints,
                    b = this.skeleton.bindposes;
                this.rootBone._updateWorldMatrix();
                for (var d = h["default"].invert(c, this.rootBone._worldMatrix), f = 0; f < a.length; ++f) {
                    var n = a[f];
                    n._updateWorldMatrix();
                    h["default"].multiply(k, d, n._worldMatrix);
                    h["default"].multiply(k, k, b[f]);
                    this._setJointsDataWithMatrix(f, k)
                }
            },
            _calWorldMatrix: function() {
                for (var a = this._joints, b = this.skeleton.bindposes, c = 0; c < a.length; ++c) {
                    var f = a[c];
                    f._updateWorldMatrix();
                    h["default"].multiply(k, f._worldMatrix, b[c]);
                    this._setJointsDataWithMatrix(c,
                        k)
                }
            },
            calcJointMatrix: function() {
                this.skeleton && this.rootBone && (this._calFunc.call(this), this._commitJointsData())
            }
        });
        cc.SkinnedMeshRenderer = q.exports = g
    }, {
        "../../../renderer/enums": 353,
        "../../mesh/CCMeshRenderer": 196,
        "../../renderer/render-flow": 260,
        "../../value-types/mat4": 327,
        "./CCSkeleton": 53
    }],
    57: [function(g, q, m) {
        function h(c, a) {
            c.prototype = Object.create(a.prototype);
            c.prototype.constructor = c;
            e(c, a)
        }

        function e(c, a) {
            e = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(a, c) {
                a.__proto__ =
                    c;
                return a
            };
            return e(c, a)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var d = g("./CCSkinnedMeshRenderer"),
            k = g("../../mesh/mesh-renderer");
        g("../../renderer/render-flow");
        g = function(c) {
            function a() {
                return c.apply(this, arguments) || this
            }
            h(a, c);
            a.prototype.fillBuffers = function(a, d) {
                a.calcJointMatrix();
                c.prototype.fillBuffers.call(this, a, d)
            };
            return a
        }(k);
        m["default"] = g;
        cc.Assembler.register(d, g);
        q.exports = m["default"]
    }, {
        "../../mesh/mesh-renderer": 199,
        "../../renderer/render-flow": 260,
        "./CCSkinnedMeshRenderer": 56
    }],
    58: [function(g, q, m) {
        function h(a) {
            return function() {
                var a = d[arguments[0]] || "unknown id";
                if (1 === arguments.length) return a;
                if (2 === arguments.length) return cc.js.formatStr(a, arguments[1]);
                var b = cc.js.shiftArguments.apply(null, arguments);
                return cc.js.formatStr.apply(null, [a].concat(b))
            }
        }
        var e = g("./platform/utils"),
            d = g("../../DebugInfos") || {},
            k;
        cc.log = cc.warn = cc.error = cc.assert = console.log.bind ? console.log.bind(console) : console.log;
        cc._throw = function(a) {
            e.callInNextTick(function() {
                throw a;
            })
        };
        var c = h("Log");
        cc.logID = function() {
            cc.log(c.apply(null, arguments))
        };
        var a = h("Warning");
        cc.warnID = function() {
            cc.warn(a.apply(null, arguments))
        };
        var b = h("Error");
        cc.errorID = function() {
            cc.error(b.apply(null, arguments))
        };
        var l = h("Assert");
        cc.assertID = function(a) {
            a || cc.assert(!1, l.apply(null, cc.js.shiftArguments.apply(null, arguments)))
        };
        var f = cc.Enum({
            NONE: 0,
            INFO: 1,
            WARN: 2,
            ERROR: 3,
            INFO_FOR_WEB_PAGE: 4,
            WARN_FOR_WEB_PAGE: 5,
            ERROR_FOR_WEB_PAGE: 6
        });
        q.exports = cc.debug = {
            DebugMode: f,
            _resetDebugSetting: function(a) {
                cc.log = cc.warn =
                    cc.error = cc.assert = function() {};
                if (a !== f.NONE) {
                    if (a > f.ERROR) {
                        var b = function(a) {
                            if (cc.game.canvas) {
                                if (!k) {
                                    var b = document.createElement("Div");
                                    b.setAttribute("id", "logInfoDiv");
                                    b.setAttribute("width", "200");
                                    b.setAttribute("height", cc.game.canvas.height);
                                    var c = b.style;
                                    c.zIndex = "99999";
                                    c.position = "absolute";
                                    c.top = c.left = "0";
                                    k = document.createElement("textarea");
                                    k.setAttribute("rows", "20");
                                    k.setAttribute("cols", "30");
                                    k.setAttribute("disabled", "true");
                                    c = k.style;
                                    c.backgroundColor = "transparent";
                                    c.borderBottom =
                                        "1px solid #cccccc";
                                    c.borderTopWidth = c.borderLeftWidth = c.borderRightWidth = "0px";
                                    c.borderTopStyle = c.borderLeftStyle = c.borderRightStyle = "none";
                                    c.padding = "0px";
                                    c.margin = 0;
                                    b.appendChild(k);
                                    cc.game.canvas.parentNode.appendChild(b)
                                }
                                k.value = k.value + a + "\r\n";
                                k.scrollTop = k.scrollHeight
                            }
                        };
                        cc.error = function() {
                            b("ERROR :  " + cc.js.formatStr.apply(null, arguments))
                        };
                        cc.assert = function(a, c) {
                            !a && c && (c = cc.js.formatStr.apply(null, cc.js.shiftArguments.apply(null, arguments)), b("ASSERT: " + c))
                        };
                        a !== f.ERROR_FOR_WEB_PAGE &&
                            (cc.warn = function() {
                                b("WARN :  " + cc.js.formatStr.apply(null, arguments))
                            });
                        a === f.INFO_FOR_WEB_PAGE && (cc.log = function() {
                            b(cc.js.formatStr.apply(null, arguments))
                        })
                    } else console && console.log.apply && (console.error || (console.error = console.log), console.warn || (console.warn = console.log), !1, console.error.bind ? cc.error = console.error.bind(console) : cc.error = (!1, function() {
                        return console.error.apply(console, arguments)
                    }), cc.assert = function(a, b) {
                        if (!a) throw b && (b = cc.js.formatStr.apply(null, cc.js.shiftArguments.apply(null,
                            arguments))), !1, !1, Error(b);
                    });
                    a !== f.ERROR && (!1, console.warn.bind ? cc.warn = console.warn.bind(console) : cc.warn = (!1, function() {
                        return console.warn.apply(console, arguments)
                    }));
                    !1;
                    a === f.INFO && (!1, !1, console.log.bind ? cc.log = console.log.bind(console) : cc.log = function() {
                        return console.log.apply(console, arguments)
                    })
                }
            },
            getError: h("ERROR"),
            isDisplayStats: function() {
                return !!cc.profiler && cc.profiler.isShowingStats()
            },
            setDisplayStats: function(a) {
                cc.profiler && cc.game.renderType !== cc.game.RENDER_TYPE_CANVAS && (a ? cc.profiler.showStats() :
                    cc.profiler.hideStats(), cc.game.config.showFPS = !!a)
            }
        }
    }, {
        "../../DebugInfos": 1,
        "./platform/utils": 251
    }],
    59: [function(g, q, m) {
        var h = g("./event/event-target"),
            e = g("./component-scheduler"),
            d = g("./node-activator"),
            k = g("./platform/CCObject"),
            c = g("./CCGame"),
            a = g("./renderer"),
            b = g("./event-manager"),
            l = g("./CCScheduler");
        cc.Director = function() {
            h.call(this);
            this._purgeDirectorInNextLoop = this._paused = !1;
            this._scene = this._winSizeInPoints = null;
            this._loadingScene = "";
            this._maxParticleDeltaTime = this._startTime = this._deltaTime =
                this._lastUpdate = this._totalFrames = 0;
            this._actionManager = this._nodeActivator = this._compScheduler = this._scheduler = null;
            var a = this;
            c.on(c.EVENT_SHOW, function() {
                a._lastUpdate = performance.now()
            });
            c.once(c.EVENT_ENGINE_INITED, this.init, this)
        };
        cc.Director.prototype = {
            constructor: cc.Director,
            init: function() {
                this._totalFrames = 0;
                this._startTime = this._lastUpdate = performance.now();
                this._purgeDirectorInNextLoop = this._paused = !1;
                this._winSizeInPoints = cc.size(0, 0);
                this._scheduler = new l;
                cc.ActionManager ? (this._actionManager =
                    new cc.ActionManager, this._scheduler.scheduleUpdate(this._actionManager, l.PRIORITY_SYSTEM, !1)) : this._actionManager = null;
                this.sharedInit();
                return !0
            },
            sharedInit: function() {
                this._compScheduler = new e;
                this._nodeActivator = new d;
                b && b.setEnabled(!0);
                cc.AnimationManager ? (this._animationManager = new cc.AnimationManager, this._scheduler.scheduleUpdate(this._animationManager, l.PRIORITY_SYSTEM, !1)) : this._animationManager = null;
                cc.CollisionManager ? (this._collisionManager = new cc.CollisionManager, this._scheduler.scheduleUpdate(this._collisionManager,
                    l.PRIORITY_SYSTEM, !1)) : this._collisionManager = null;
                cc.PhysicsManager ? (this._physicsManager = new cc.PhysicsManager, this._scheduler.scheduleUpdate(this._physicsManager, l.PRIORITY_SYSTEM, !1)) : this._physicsManager = null;
                cc.Physics3DManager && (!1, !0) ? (this._physics3DManager = new cc.Physics3DManager, this._scheduler.scheduleUpdate(this._physics3DManager, l.PRIORITY_SYSTEM, !1)) : this._physics3DManager = null;
                cc._widgetManager && cc._widgetManager.init(this)
            },
            calculateDeltaTime: function(a) {
                a || (a = performance.now());
                this._deltaTime = a > this._lastUpdate ? (a - this._lastUpdate) / 1E3 : 0;
                (!0, 1 < this._deltaTime) && (this._deltaTime = 1 / 60);
                this._lastUpdate = a
            },
            convertToGL: function(a) {
                var b = c.container,
                    f = cc.view,
                    d = b.getBoundingClientRect(),
                    l = f._devicePixelRatio * (a.x - (d.left + window.pageXOffset - b.clientLeft));
                a = f._devicePixelRatio * (d.top + window.pageYOffset - b.clientTop + d.height - a.y);
                return f._isRotated ? cc.v2(f._viewportRect.width - a, l) : cc.v2(l, a)
            },
            convertToUI: function(a) {
                var b = c.container,
                    f = cc.view,
                    d = b.getBoundingClientRect(),
                    l = d.left +
                    window.pageXOffset - b.clientLeft;
                b = d.top + window.pageYOffset - b.clientTop;
                var k = cc.v2(0, 0);
                f._isRotated ? (k.x = l + a.y / f._devicePixelRatio, k.y = b + d.height - (f._viewportRect.width - a.x) / f._devicePixelRatio) : (k.x = l + a.x * f._devicePixelRatio, k.y = b + d.height - a.y * f._devicePixelRatio);
                return k
            },
            end: function() {
                this._purgeDirectorInNextLoop = !0
            },
            getWinSize: function() {
                return cc.size(cc.winSize)
            },
            getWinSizeInPixels: function() {
                return cc.size(cc.winSize)
            },
            pause: function() {
                this._paused || (this._paused = !0)
            },
            purgeCachedData: function() {
                cc.assetManager.releaseAll()
            },
            purgeDirector: function() {
                this._scheduler.unscheduleAll();
                this._compScheduler.unscheduleAll();
                this._nodeActivator.reset();
                b && b.setEnabled(!1);
                !0;
                cc.isValid(this._scene) && this._scene.destroy();
                this._scene = null;
                cc.renderer.clear();
                cc.assetManager.builtins.clear();
                cc.game.pause();
                cc.assetManager.releaseAll()
            },
            reset: function() {
                this.purgeDirector();
                b && b.setEnabled(!0);
                this._actionManager && this._scheduler.scheduleUpdate(this._actionManager, cc.Scheduler.PRIORITY_SYSTEM, !1);
                this._animationManager && this._scheduler.scheduleUpdate(this._animationManager,
                    cc.Scheduler.PRIORITY_SYSTEM, !1);
                this._collisionManager && this._scheduler.scheduleUpdate(this._collisionManager, cc.Scheduler.PRIORITY_SYSTEM, !1);
                this._physicsManager && this._scheduler.scheduleUpdate(this._physicsManager, cc.Scheduler.PRIORITY_SYSTEM, !1);
                cc.game.resume()
            },
            runSceneImmediate: function(a, b, d) {
                cc.assertID(a instanceof cc.Scene || a instanceof cc.SceneAsset, 1216);
                a instanceof cc.SceneAsset && (a = a.scene);
                !0;
                console.time("InitScene");
                a._load();
                !0;
                console.timeEnd("InitScene");
                !0;
                console.time("AttachPersist");
                for (var f = Object.keys(c._persistRootNodes).map(function(a) {
                        return c._persistRootNodes[a]
                    }), l = 0; l < f.length; l++) {
                    var n = f[l],
                        u = a.getChildByUuid(n.uuid);
                    if (u) {
                        var e = u.getSiblingIndex();
                        u._destroyImmediate();
                        a.insertChild(n, e)
                    } else n.parent = a
                }!0;
                console.timeEnd("AttachPersist");
                f = this._scene;
                !0;
                !0;
                console.time("AutoRelease");
                cc.assetManager._releaseManager._autoRelease(f, a, c._persistRootNodes);
                !0;
                console.timeEnd("AutoRelease");
                !0;
                console.time("Destroy");
                cc.isValid(f) && f.destroy();
                this._scene = null;
                k._deferredDestroy();
                !0;
                console.timeEnd("Destroy");
                b && b();
                this.emit(cc.Director.EVENT_BEFORE_SCENE_LAUNCH, a);
                this._scene = a;
                !0;
                console.time("Activate");
                a._activate();
                !0;
                console.timeEnd("Activate");
                cc.game.resume();
                d && d(null, a);
                this.emit(cc.Director.EVENT_AFTER_SCENE_LAUNCH, a)
            },
            runScene: function(a, b, c) {
                cc.assertID(a, 1205);
                cc.assertID(a instanceof cc.Scene || a instanceof cc.SceneAsset, 1216);
                a instanceof cc.SceneAsset && (a = a.scene);
                a._load();
                this.once(cc.Director.EVENT_AFTER_DRAW, function() {
                    this.runSceneImmediate(a, b, c)
                }, this)
            },
            loadScene: function(a, b, c) {
                if (this._loadingScene) return cc.warnID(1208, a, this._loadingScene), !1;
                var f = cc.assetManager.bundles.find(function(b) {
                    return b.getSceneInfo(a)
                });
                if (f) {
                    this.emit(cc.Director.EVENT_BEFORE_SCENE_LOADING, a);
                    this._loadingScene = a;
                    var d = this;
                    console.time("LoadScene " + a);
                    f.loadScene(a, function(f, l) {
                        console.timeEnd("LoadScene " + a);
                        d._loadingScene = "";
                        f ? (f = "Failed to load scene: " + f, cc.error(f), b && b(f)) : d.runSceneImmediate(l, c, b)
                    });
                    return !0
                }
                cc.errorID(1209, a);
                return !1
            },
            preloadScene: function(a,
                b, c) {
                var f = cc.assetManager.bundles.find(function(b) {
                    return b.getSceneInfo(a)
                });
                if (!f) return cc.errorID(1209, a), null;
                f.preloadScene(a, null, b, c)
            },
            resume: function() {
                this._paused && ((this._lastUpdate = performance.now()) || cc.logID(1200), this._paused = !1, this._deltaTime = 0)
            },
            setDepthTest: function(a) {
                cc.Camera.main && (cc.Camera.main.depth = !!a)
            },
            setClearColor: function(a) {
                cc.Camera.main && (cc.Camera.main.backgroundColor = a)
            },
            getRunningScene: function() {
                return this._scene
            },
            getScene: function() {
                return this._scene
            },
            getAnimationInterval: function() {
                return 1E3 /
                    c.getFrameRate()
            },
            setAnimationInterval: function(a) {
                c.setFrameRate(Math.round(1E3 / a))
            },
            getDeltaTime: function() {
                return this._deltaTime
            },
            getTotalTime: function() {
                return performance.now() - this._startTime
            },
            getTotalFrames: function() {
                return this._totalFrames
            },
            isPaused: function() {
                return this._paused
            },
            getScheduler: function() {
                return this._scheduler
            },
            setScheduler: function(a) {
                this._scheduler !== a && (this._scheduler = a)
            },
            getActionManager: function() {
                return this._actionManager
            },
            setActionManager: function(a) {
                this._actionManager !==
                    a && (this._actionManager && this._scheduler.unscheduleUpdate(this._actionManager), this._actionManager = a, this._scheduler.scheduleUpdate(this._actionManager, cc.Scheduler.PRIORITY_SYSTEM, !1))
            },
            getAnimationManager: function() {
                return this._animationManager
            },
            getCollisionManager: function() {
                return this._collisionManager
            },
            getPhysicsManager: function() {
                return this._physicsManager
            },
            getPhysics3DManager: function() {
                return this._physics3DManager
            },
            startAnimation: function() {
                cc.game.resume()
            },
            stopAnimation: function() {
                cc.game.pause()
            },
            _resetDeltaTime: function() {
                this._lastUpdate = performance.now();
                this._deltaTime = 0
            },
            mainLoop: function(c) {
                this._purgeDirectorInNextLoop ? (this._purgeDirectorInNextLoop = !1, this.purgeDirector()) : (this.calculateDeltaTime(c), c = this._deltaTime, this._paused || (this.emit(cc.Director.EVENT_BEFORE_UPDATE, c), this._compScheduler.startPhase(), this._compScheduler.updatePhase(c), this._scheduler.update(c), this._compScheduler.lateUpdatePhase(c), this.emit(cc.Director.EVENT_AFTER_UPDATE, c), k._deferredDestroy()), this.emit(cc.Director.EVENT_BEFORE_DRAW,
                    c), a.render(this._scene, c), this.emit(cc.Director.EVENT_AFTER_DRAW, c), b.frameUpdateListeners(), this._totalFrames++)
            },
            __fastOn: function(a, b, c) {
                this.on(a, b, c)
            },
            __fastOff: function(a, b, c) {
                this.off(a, b, c)
            }
        };
        cc.js.addon(cc.Director.prototype, h.prototype);
        cc.Director.EVENT_PROJECTION_CHANGED = "director_projection_changed";
        cc.Director.EVENT_BEFORE_SCENE_LOADING = "director_before_scene_loading";
        cc.Director.EVENT_BEFORE_SCENE_LAUNCH = "director_before_scene_launch";
        cc.Director.EVENT_AFTER_SCENE_LAUNCH = "director_after_scene_launch";
        cc.Director.EVENT_BEFORE_UPDATE = "director_before_update";
        cc.Director.EVENT_AFTER_UPDATE = "director_after_update";
        cc.Director.EVENT_BEFORE_VISIT = "director_before_draw";
        cc.Director.EVENT_AFTER_VISIT = "director_before_draw";
        cc.Director.EVENT_BEFORE_DRAW = "director_before_draw";
        cc.Director.EVENT_AFTER_DRAW = "director_after_draw";
        cc.Director.PROJECTION_2D = 0;
        cc.Director.PROJECTION_3D = 1;
        cc.Director.PROJECTION_CUSTOM = 3;
        cc.Director.PROJECTION_DEFAULT = cc.Director.PROJECTION_2D;
        cc.Director.EVENT_BEFORE_PHYSICS =
            "director_before_physics";
        cc.Director.EVENT_AFTER_PHYSICS = "director_after_physics";
        cc.director = new cc.Director;
        q.exports = cc.director
    }, {
        "./CCGame": 60,
        "./CCScheduler": 64,
        "./component-scheduler": 132,
        "./event-manager": 172,
        "./event/event-target": 174,
        "./node-activator": 200,
        "./platform/CCObject": 233,
        "./renderer": 259
    }],
    60: [function(g, q, m) {
        m = g("./event/event-target");
        g("../audio/CCAudioEngine");
        var h = g("./CCDebug"),
            e = g("./renderer/index.js"),
            d = g("../core/renderer/utils/dynamic-atlas/manager"),
            k = {
                EVENT_HIDE: "game_on_hide",
                EVENT_SHOW: "game_on_show",
                EVENT_RESTART: "game_on_restart",
                EVENT_GAME_INITED: "game_inited",
                EVENT_ENGINE_INITED: "engine_inited",
                EVENT_RENDERER_INITED: "engine_inited",
                RENDER_TYPE_CANVAS: 0,
                RENDER_TYPE_WEBGL: 1,
                RENDER_TYPE_OPENGL: 2,
                _persistRootNodes: {},
                _paused: !0,
                _configLoaded: !1,
                _isCloning: !1,
                _prepared: !1,
                _rendererInitialized: !1,
                _renderContext: null,
                _intervalId: null,
                _lastTime: null,
                _frameTime: null,
                frame: null,
                container: null,
                canvas: null,
                renderType: -1,
                config: null,
                onStart: null,
                setFrameRate: function(c) {
                    this.config.frameRate =
                        c;
                    this._intervalId && window.cancelAnimFrame(this._intervalId);
                    this._intervalId = 0;
                    this._paused = !0;
                    this._setAnimFrame();
                    this._runMainLoop()
                },
                getFrameRate: function() {
                    return this.config.frameRate
                },
                step: function() {
                    cc.director.mainLoop()
                },
                pause: function() {
                    this._paused || (this._paused = !0, cc.audioEngine && cc.audioEngine._break(), this._intervalId && window.cancelAnimFrame(this._intervalId), this._intervalId = 0)
                },
                resume: function() {
                    this._paused && (this._paused = !1, cc.audioEngine && cc.audioEngine._restore(), cc.director._resetDeltaTime(),
                        this._runMainLoop())
                },
                isPaused: function() {
                    return this._paused
                },
                restart: function() {
                    cc.director.once(cc.Director.EVENT_AFTER_DRAW, function() {
                        for (var c in k._persistRootNodes) k.removePersistRootNode(k._persistRootNodes[c]);
                        cc.director.getScene().destroy();
                        cc.Object._deferredDestroy();
                        cc.audioEngine && cc.audioEngine.uncacheAll();
                        cc.director.reset();
                        k.pause();
                        cc.assetManager.builtins.init(function() {
                            k.onStart();
                            k.emit(k.EVENT_RESTART)
                        })
                    })
                },
                end: function() {
                    close()
                },
                _initEngine: function() {
                    this._rendererInitialized ||
                        (this._initRenderer(), !0, this._initEvents(), this.emit(this.EVENT_ENGINE_INITED))
                },
                _loadPreviewScript: function(c) {
                    !1;
                    c()
                },
                _prepareFinished: function(c) {
                    var a = this;
                    this._initEngine();
                    this._setAnimFrame();
                    cc.assetManager.builtins.init(function() {
                        console.log("Cocos Creator v" + cc.ENGINE_VERSION);
                        a._prepared = !0;
                        a._runMainLoop();
                        a.emit(a.EVENT_GAME_INITED);
                        c && c()
                    })
                },
                eventTargetOn: m.prototype.on,
                eventTargetOnce: m.prototype.once,
                on: function(c, a, b, d) {
                    this._prepared && c === this.EVENT_ENGINE_INITED || !this._paused &&
                        c === this.EVENT_GAME_INITED ? a.call(b) : this.eventTargetOn(c, a, b, d)
                },
                once: function(c, a, b) {
                    this._prepared && c === this.EVENT_ENGINE_INITED || !this._paused && c === this.EVENT_GAME_INITED ? a.call(b) : this.eventTargetOnce(c, a, b)
                },
                prepare: function(c) {
                    var a = this;
                    this._prepared ? c && c() : this._loadPreviewScript(function() {
                        a._prepareFinished(c)
                    })
                },
                run: function(c, a) {
                    this._initConfig(c);
                    this.onStart = a;
                    this.prepare(k.onStart && k.onStart.bind(k))
                },
                addPersistRootNode: function(c) {
                    if (cc.Node.isNode(c) && c.uuid) {
                        var a = c.uuid;
                        if (!this._persistRootNodes[a]) {
                            var b =
                                cc.director._scene;
                            if (cc.isValid(b))
                                if (c.parent) {
                                    if (!(c.parent instanceof cc.Scene)) {
                                        cc.warnID(3801);
                                        return
                                    }
                                    if (c.parent !== b) {
                                        cc.warnID(3802);
                                        return
                                    }
                                } else c.parent = b;
                            this._persistRootNodes[a] = c;
                            c._persistNode = !0;
                            cc.assetManager._releaseManager._addPersistNodeRef(c)
                        }
                    } else cc.warnID(3800)
                },
                removePersistRootNode: function(c) {
                    var a = c.uuid || "";
                    c === this._persistRootNodes[a] && (delete this._persistRootNodes[a], c._persistNode = !1, cc.assetManager._releaseManager._removePersistNodeRef(c))
                },
                isPersistRootNode: function(c) {
                    return c._persistNode
                },
                _setAnimFrame: function() {
                    this._lastTime = performance.now();
                    var c = k.config.frameRate;
                    this._frameTime = 1E3 / c;
                    cc.director._maxParticleDeltaTime = this._frameTime / 1E3 * 2;
                    !1;
                    !1;
                    var a = window.requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame;
                    60 !== c && 30 !== c ? (window.requestAnimFrame = a ? this._stTimeWithRAF : this._stTime, window.cancelAnimFrame = this._ctTime) : (window.requestAnimFrame = a ||
                        this._stTime, window.cancelAnimFrame = window.cancelAnimationFrame || window.cancelRequestAnimationFrame || window.msCancelRequestAnimationFrame || window.mozCancelRequestAnimationFrame || window.oCancelRequestAnimationFrame || window.webkitCancelRequestAnimationFrame || window.msCancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.oCancelAnimationFrame || this._ctTime)
                },
                _stTimeWithRAF: function(c) {
                    var a = performance.now(),
                        b = Math.max(0, k._frameTime - (a - k._lastTime)),
                        d = window.setTimeout(function() {
                                window.requestAnimationFrame(c)
                            },
                            b);
                    k._lastTime = a + b;
                    return d
                },
                _stTime: function(c) {
                    var a = performance.now(),
                        b = Math.max(0, k._frameTime - (a - k._lastTime)),
                        d = window.setTimeout(function() {
                            c()
                        }, b);
                    k._lastTime = a + b;
                    return d
                },
                _ctTime: function(c) {
                    window.clearTimeout(c)
                },
                _runMainLoop: function() {
                    !1;
                    if (this._prepared) {
                        var c = this,
                            a = c.config,
                            b = cc.director,
                            d = !0,
                            f = a.frameRate;
                        h.setDisplayStats(a.showFPS);
                        var k = function(a) {
                            c._paused || (c._intervalId = window.requestAnimFrame(k), (!0, 30 === f) && (d = !d) || b.mainLoop(a))
                        };
                        c._intervalId = window.requestAnimFrame(k);
                        c._paused = !1
                    }
                },
                _initConfig: function(c) {
                    "number" !== typeof c.debugMode && (c.debugMode = 0);
                    c.exposeClassName = !!c.exposeClassName;
                    "number" !== typeof c.frameRate && (c.frameRate = 60);
                    var a = c.renderMode;
                    ("number" !== typeof a || 2 < a || 0 > a) && (c.renderMode = 0);
                    "boolean" !== typeof c.registerSystemEvent && (c.registerSystemEvent = !0);
                    c.showFPS = 1 !== a && !!c.showFPS;
                    this.collisionMatrix = c.collisionMatrix || [];
                    this.groupList = c.groupList || [];
                    h._resetDebugSetting(c.debugMode);
                    this.config = c;
                    this._configLoaded = !0
                },
                _determineRenderType: function() {
                    var c =
                        parseInt(this.config.renderMode) || 0;
                    this.renderType = this.RENDER_TYPE_CANVAS;
                    var a = !1;
                    0 === c ? cc.sys.capabilities.opengl ? (this.renderType = this.RENDER_TYPE_WEBGL, a = !0) : cc.sys.capabilities.canvas && (this.renderType = this.RENDER_TYPE_CANVAS, a = !0) : 1 === c && cc.sys.capabilities.canvas ? (this.renderType = this.RENDER_TYPE_CANVAS, a = !0) : 2 === c && cc.sys.capabilities.opengl && (this.renderType = this.RENDER_TYPE_WEBGL, a = !0);
                    if (!a) throw Error(h.getError(3820, c));
                },
                _initRenderer: function() {
                    if (!this._rendererInitialized) {
                        var c =
                            this.config.id,
                            a, b;
                        !1;
                        !1;
                        var l = c instanceof HTMLElement ? c : document.querySelector(c) || document.querySelector("#" + c);
                        if ("CANVAS" === l.tagName) {
                            c = l.width;
                            var f = l.height;
                            this.canvas = a = l;
                            this.container = b = document.createElement("DIV");
                            a.parentNode && a.parentNode.insertBefore(b, a)
                        } else "DIV" !== l.tagName && cc.warnID(3819), c = l.clientWidth, f = l.clientHeight, this.canvas = a = document.createElement("CANVAS"), this.container = b = document.createElement("DIV"), l.appendChild(b);
                        b.setAttribute("id", "Cocos2dGameContainer");
                        b.appendChild(a);
                        this.frame = b.parentNode === document.body ? document.documentElement : b.parentNode;
                        (function(a, b) {
                            -1 < (" " + a.className + " ").indexOf(" " + b + " ") || (a.className && (a.className += " "), a.className += b)
                        })(a, "gameCanvas");
                        a.setAttribute("width", c || 480);
                        a.setAttribute("height", f || 320);
                        a.setAttribute("tabindex", 99);
                        this._determineRenderType();
                        this.renderType === this.RENDER_TYPE_WEBGL && (e.initWebGL(a, {
                            stencil: !0,
                            antialias: cc.macro.ENABLE_WEBGL_ANTIALIAS,
                            alpha: cc.macro.ENABLE_TRANSPARENT_CANVAS
                        }), this._renderContext = e.device._gl, !cc.macro.CLEANUP_IMAGE_CACHE && d && (d.enabled = !0));
                        this._renderContext || (this.renderType = this.RENDER_TYPE_CANVAS, e.initCanvas(a), this._renderContext = e.device._ctx);
                        this.canvas.oncontextmenu = function() {
                            if (!cc._isContextMenuEnable) return !1
                        };
                        this._rendererInitialized = !0
                    }
                },
                _initEvents: function() {
                    function c() {
                        f || (f = !0, k.emit(k.EVENT_HIDE))
                    }

                    function a(a, b, c, d, l) {
                        f && (f = !1, k.emit(k.EVENT_SHOW, a, b, c, d, l))
                    }
                    var b = window,
                        d;
                    this.config.registerSystemEvent && cc.internal.inputManager.registerSystemEvent(this.canvas);
                    "undefined" !== typeof document.hidden ? d = "hidden" : "undefined" !== typeof document.mozHidden ? d = "mozHidden" : "undefined" !== typeof document.msHidden ? d = "msHidden" : "undefined" !== typeof document.webkitHidden && (d = "webkitHidden");
                    var f = !1;
                    if (d)
                        for (var n = ["visibilitychange", "mozvisibilitychange", "msvisibilitychange", "webkitvisibilitychange", "qbrowserVisibilityChange"], u = 0; u < n.length; u++) document.addEventListener(n[u], function(b) {
                            var f = document[d];
                            (f = f || b.hidden) ? c(): a()
                        });
                    else b.addEventListener("blur", c), b.addEventListener("focus",
                        a); - 1 < navigator.userAgent.indexOf("MicroMessenger") && (b.onfocus = a);
                    "onpageshow" in window && "onpagehide" in window && (b.addEventListener("pagehide", c), b.addEventListener("pageshow", a), document.addEventListener("pagehide", c), document.addEventListener("pageshow", a));
                    this.on(k.EVENT_HIDE, function() {
                        k.pause()
                    });
                    this.on(k.EVENT_SHOW, function() {
                        k.resume()
                    })
                }
            };
        m.call(k);
        cc.js.addon(k, m.prototype);
        cc.game = q.exports = k
    }, {
        "../audio/CCAudioEngine": 22,
        "../core/renderer/utils/dynamic-atlas/manager": void 0,
        "./CCDebug": 58,
        "./event/event-target": 174,
        "./renderer/index.js": 259
    }],
    61: [function(g, q, m) {
        function h(a, b) {
            if (b) {
                for (var c = 0, f = null; a && cc.Node.isNode(a); a = a._parent, ++c)
                    if (a.getComponent(b)) {
                        var d = {
                            index: c,
                            node: a
                        };
                        f ? f.push(d) : f = [d]
                    }
                return f
            }
            return null
        }

        function e(a, b) {
            if (!(a._objFlags & B)) {
                if (a._bubblingListeners)
                    for (var c = 0, f = b.length; c < f; ++c)
                        if (a._bubblingListeners.hasEventListener(b[c])) return !0;
                if (a._capturingListeners)
                    for (c = 0, f = b.length; c < f; ++c)
                        if (a._capturingListeners.hasEventListener(b[c])) return !0;
                return !1
            }
            return !0
        }

        function d(a) {
            var b = a.groupIndex;
            0 === b && a.parent && (b = d(a.parent));
            return b
        }

        function k(a) {
            var b = d(a);
            a._cullingMask = 1 << b;
            !1;
            for (b = 0; b < a._children.length; b++) k(a._children[b])
        }

        function c() {
            if (this._localMatDirty & ia.TRSS) {
                var a = this._matrix,
                    b = a.m;
                n.Trs.toMat4(a, this._trs);
                if (this._skewX || this._skewY) {
                    a = b[0];
                    var c = b[1],
                        f = b[4],
                        d = b[5],
                        l = Math.tan(this._skewX * y),
                        k = Math.tan(this._skewY * y);
                    Infinity === l && (l = 99999999);
                    Infinity === k && (k = 99999999);
                    b[0] = a + f * k;
                    b[1] = c + d * k;
                    b[4] = f + a * l;
                    b[5] = d + c * l
                }
                this._localMatDirty &=
                    ~ia.TRSS;
                this._worldMatDirty = !0
            }
        }

        function a() {
            var a = this._localMatDirty;
            if (a & ia.TRSS) {
                var b = this._matrix.m,
                    c = this._trs;
                if (a & (ia.RS | ia.SKEW)) {
                    var f = -this._eulerAngles.z;
                    a = this._skewX || this._skewY;
                    var d = c[7],
                        l = c[8];
                    if (f || a) {
                        var k = 1,
                            n = 0,
                            p = 0,
                            t = 1;
                        f && (f *= y, p = Math.sin(f), k = t = Math.cos(f), n = -p);
                        b[0] = k * d;
                        b[1] = n * d;
                        b[4] = p * l;
                        b[5] = t * l;
                        a && (a = b[0], d = b[1], l = b[4], p = b[5], f = Math.tan(this._skewX * y), k = Math.tan(this._skewY * y), Infinity === f && (f = 99999999), Infinity === k && (k = 99999999), b[0] = a + l * k, b[1] = d + p * k, b[4] = l + a * f, b[5] = p +
                            d * f)
                    } else b[0] = d, b[1] = 0, b[4] = 0, b[5] = l
                }
                b[12] = c[0];
                b[13] = c[1];
                this._localMatDirty &= ~ia.TRSS;
                this._worldMatDirty = !0
            }
        }

        function b() {
            this._localMatDirty & ia.TRSS && this._updateLocalMatrix();
            this._parent ? n.Mat4.mul(this._worldMatrix, this._parent._worldMatrix, this._matrix) : n.Mat4.copy(this._worldMatrix, this._matrix);
            this._worldMatDirty = !1
        }

        function l() {
            this._localMatDirty & ia.TRSS && this._updateLocalMatrix();
            var a = this._parent;
            a ? this._mulMat(this._worldMatrix, a._worldMatrix, this._matrix) : n.Mat4.copy(this._worldMatrix,
                this._matrix);
            this._worldMatDirty = !1
        }

        function f(a, b, c) {
            var f = b.m;
            c = c.m;
            a = a.m;
            b = f[0];
            var d = f[1],
                l = f[4],
                k = f[5],
                n = f[12];
            f = f[13];
            var p = c[0],
                t = c[1],
                u = c[4],
                v = c[5],
                e = c[12];
            c = c[13];
            0 !== d || 0 !== l ? (a[0] = p * b + t * l, a[1] = p * d + t * k, a[4] = u * b + v * l, a[5] = u * d + v * k, a[12] = b * e + l * c + n, a[13] = d * e + k * c + f) : (a[0] = p * b, a[1] = t * k, a[4] = u * b, a[5] = v * k, a[12] = b * e + n, a[13] = k * c + f)
        }
        var n = g("./value-types"),
            u = g("./value-types/utils");
        m = g("./utils/base-node");
        var v = g("./utils/prefab-helper"),
            p = g("./utils/trans-pool").NodeMemPool,
            t = g("./utils/affine-transform"),
            x = g("./event-manager"),
            z = g("./platform/CCMacro"),
            E = g("./platform/js");
        g("./event/event");
        var w = g("./event/event-target"),
            A = g("./renderer/render-flow"),
            B = cc.Object.Flags.Destroying,
            y = Math.PI / 180,
            C = !!cc.ActionManager;
        g = function() {};
        var F = new n.Vec3,
            G = new n.Quat,
            D = new n.Vec3,
            I = new n.Vec3,
            K = new n.Quat,
            L = new n.Quat,
            R = new n.Vec3,
            M = new n.Vec3,
            S = new n.Vec3,
            O = new n.Vec3,
            Q = new n.Vec3,
            V = new n.Quat,
            ba = new n.Quat,
            da = new n.Vec3,
            T = new n.Quat,
            N = new n.Vec3,
            fa = new n.Quat,
            Z = new n.Vec3,
            W = new n.Vec3,
            X = new n.Quat,
            la = new n.Quat;
        new n.Quat;
        var ea = cc.mat4(),
            ja = new n.Vec3,
            oa = new E.Pool;
        oa.get = function() {
            return this._get() || []
        };
        var sa = cc.Enum({
                DEBUG: 31
            }),
            ia = cc.Enum({
                POSITION: 1,
                SCALE: 2,
                ROTATION: 4,
                SKEW: 8,
                TRS: 7,
                RS: 6,
                TRSS: 15,
                PHYSICS_POSITION: 16,
                PHYSICS_SCALE: 32,
                PHYSICS_ROTATION: 64,
                PHYSICS_TRS: 112,
                PHYSICS_RS: 96,
                ALL_POSITION: 17,
                ALL_SCALE: 34,
                ALL_ROTATION: 68,
                ALL_TRS: 119,
                ALL: 65535
            }),
            ca = cc.Enum({
                TOUCH_START: "touchstart",
                TOUCH_MOVE: "touchmove",
                TOUCH_END: "touchend",
                TOUCH_CANCEL: "touchcancel",
                MOUSE_DOWN: "mousedown",
                MOUSE_MOVE: "mousemove",
                MOUSE_ENTER: "mouseenter",
                MOUSE_LEAVE: "mouseleave",
                MOUSE_UP: "mouseup",
                MOUSE_WHEEL: "mousewheel",
                POSITION_CHANGED: "position-changed",
                ROTATION_CHANGED: "rotation-changed",
                SCALE_CHANGED: "scale-changed",
                SIZE_CHANGED: "size-changed",
                ANCHOR_CHANGED: "anchor-changed",
                COLOR_CHANGED: "color-changed",
                CHILD_ADDED: "child-added",
                CHILD_REMOVED: "child-removed",
                CHILD_REORDER: "child-reorder",
                GROUP_CHANGED: "group-changed",
                SIBLING_ORDER_CHANGED: "sibling-order-changed"
            }),
            ra = [ca.TOUCH_START, ca.TOUCH_MOVE, ca.TOUCH_END, ca.TOUCH_CANCEL],
            r = [ca.MOUSE_DOWN, ca.MOUSE_ENTER, ca.MOUSE_MOVE, ca.MOUSE_LEAVE, ca.MOUSE_UP, ca.MOUSE_WHEEL],
            Ca = !0,
            na = function(a, b) {
                0 !== a && (!1, Ca && cc.warn("`cc.Node.skewX/Y` is deprecated since v2.2.1, please use 3D node instead.", ""), !0, Ca = !1)
            },
            ka = null,
            xa = function(a, b) {
                var c = a.getLocation(),
                    f = this.owner;
                return f._hitTest(c, this) ? (b.type = ca.TOUCH_START, b.touch = a, b.bubbles = !0, f.dispatchEvent(b), !0) : !1
            },
            P = function(a, b) {
                var c = this.owner;
                b.type = ca.TOUCH_MOVE;
                b.touch = a;
                b.bubbles = !0;
                c.dispatchEvent(b)
            },
            U = function(a, b) {
                var c =
                    a.getLocation(),
                    f = this.owner;
                f._hitTest(c, this) ? b.type = ca.TOUCH_END : b.type = ca.TOUCH_CANCEL;
                b.touch = a;
                b.bubbles = !0;
                f.dispatchEvent(b)
            },
            ua = function(a, b) {
                a.getLocation();
                var c = this.owner;
                b.type = ca.TOUCH_CANCEL;
                b.touch = a;
                b.bubbles = !0;
                c.dispatchEvent(b)
            },
            pa = function(a) {
                var b = a.getLocation(),
                    c = this.owner;
                c._hitTest(b, this) && (a.type = ca.MOUSE_DOWN, a.bubbles = !0, c.dispatchEvent(a))
            },
            Ha = function(a) {
                var b = a.getLocation(),
                    c = this.owner;
                if (c._hitTest(b, this)) this._previousIn || (ka && ka._mouseListener && (a.type = ca.MOUSE_LEAVE,
                    ka.dispatchEvent(a), ka._mouseListener._previousIn = !1), ka = this.owner, a.type = ca.MOUSE_ENTER, c.dispatchEvent(a), this._previousIn = !0), a.type = ca.MOUSE_MOVE, a.bubbles = !0, c.dispatchEvent(a);
                else {
                    if (!this._previousIn) return;
                    a.type = ca.MOUSE_LEAVE;
                    c.dispatchEvent(a);
                    this._previousIn = !1;
                    ka = null
                }
                a.stopPropagation()
            },
            za = function(a) {
                var b = a.getLocation(),
                    c = this.owner;
                c._hitTest(b, this) && (a.type = ca.MOUSE_UP, a.bubbles = !0, c.dispatchEvent(a), a.stopPropagation())
            },
            Ia = function(a) {
                var b = a.getLocation(),
                    c = this.owner;
                c._hitTest(b,
                    this) && (a.type = ca.MOUSE_WHEEL, a.bubbles = !0, c.dispatchEvent(a), a.stopPropagation())
            },
            Ja = n.Mat4.mul;
        m = {
            name: "cc.Node",
            extends: m,
            properties: {
                _opacity: 255,
                _color: cc.Color.WHITE,
                _contentSize: cc.Size,
                _anchorPoint: cc.v2(.5, .5),
                _position: void 0,
                _scale: void 0,
                _trs: null,
                _eulerAngles: cc.Vec3,
                _skewX: 0,
                _skewY: 0,
                _zIndex: {
                    default: void 0,
                    type: cc.Integer
                },
                _localZOrder: {
                    default: 0,
                    serializable: !1
                },
                _is3DNode: !1,
                _groupIndex: {
                    default: 0,
                    formerlySerializedAs: "groupIndex"
                },
                groupIndex: {
                    get: function() {
                        return this._groupIndex
                    },
                    set: function(a) {
                        this._groupIndex = a;
                        k(this);
                        this.emit(ca.GROUP_CHANGED, this)
                    }
                },
                group: {
                    get: function() {
                        return cc.game.groupList[this.groupIndex] || ""
                    },
                    set: function(a) {
                        this.groupIndex = cc.game.groupList.indexOf(a)
                    }
                },
                x: {
                    get: function() {
                        return this._trs[0]
                    },
                    set: function(a) {
                        var b = this._trs;
                        a !== b[0] && (!0, !1, b[0] = a, this.setLocalDirty(ia.ALL_POSITION), this._eventMask & 1 && (!1, this.emit(ca.POSITION_CHANGED)))
                    }
                },
                y: {
                    get: function() {
                        return this._trs[1]
                    },
                    set: function(a) {
                        var b = this._trs;
                        a !== b[1] && (!0, !1, b[1] = a, this.setLocalDirty(ia.ALL_POSITION),
                            this._eventMask & 1 && (!1, this.emit(ca.POSITION_CHANGED)))
                    }
                },
                z: {
                    get: function() {
                        return this._trs[2]
                    },
                    set: function(a) {
                        var b = this._trs;
                        a !== b[2] && (!0, !1, b[2] = a, this.setLocalDirty(ia.ALL_POSITION), !0, this._renderFlag |= A.FLAG_WORLD_TRANSFORM, this._eventMask & 1 && (!1, this.emit(ca.POSITION_CHANGED)))
                    }
                },
                rotation: {
                    get: function() {
                        !0;
                        cc.warn("`cc.Node.rotation` is deprecated since v2.1.0, please use `-angle` instead. (`this.node.rotation` -> `-this.node.angle`)");
                        return -this.angle
                    },
                    set: function(a) {
                        !0;
                        cc.warn("`cc.Node.rotation` is deprecated since v2.1.0, please set `-angle` instead. (`this.node.rotation = x` -> `this.node.angle = -x`)");
                        this.angle = -a
                    }
                },
                angle: {
                    get: function() {
                        return this._eulerAngles.z
                    },
                    set: function(a) {
                        n.Vec3.set(this._eulerAngles, 0, 0, a);
                        n.Trs.fromAngleZ(this._trs, a);
                        this.setLocalDirty(ia.ALL_ROTATION);
                        this._eventMask & 4 && this.emit(ca.ROTATION_CHANGED)
                    }
                },
                rotationX: {
                    get: function() {
                        !0;
                        cc.warn("`cc.Node.rotationX` is deprecated since v2.1.0, please use `eulerAngles.x` instead. (`this.node.rotationX` -> `this.node.eulerAngles.x`)");
                        return this._eulerAngles.x
                    },
                    set: function(a) {
                        !0;
                        cc.warn("`cc.Node.rotationX` is deprecated since v2.1.0, please set `eulerAngles` instead. (`this.node.rotationX = x` -> `this.node.is3DNode = true; this.node.eulerAngles = cc.v3(x, 0, 0)`");
                        this._eulerAngles.x !== a && (this._eulerAngles.x = a, this._eulerAngles.x === this._eulerAngles.y ? n.Trs.fromAngleZ(this._trs, -a) : n.Trs.fromEulerNumber(this._trs, a, this._eulerAngles.y, 0), this.setLocalDirty(ia.ALL_ROTATION), this._eventMask & 4 && this.emit(ca.ROTATION_CHANGED))
                    }
                },
                rotationY: {
                    get: function() {
                        !0;
                        cc.warn("`cc.Node.rotationY` is deprecated since v2.1.0, please use `eulerAngles.y` instead. (`this.node.rotationY` -> `this.node.eulerAngles.y`)");
                        return this._eulerAngles.y
                    },
                    set: function(a) {
                        !0;
                        cc.warn("`cc.Node.rotationY` is deprecated since v2.1.0, please set `eulerAngles` instead. (`this.node.rotationY = y` -> `this.node.is3DNode = true; this.node.eulerAngles = cc.v3(0, y, 0)`");
                        this._eulerAngles.y !== a && (this._eulerAngles.y = a, this._eulerAngles.x === this._eulerAngles.y ? n.Trs.fromAngleZ(this._trs, -a) : n.Trs.fromEulerNumber(this._trs, this._eulerAngles.x, a, 0), this.setLocalDirty(ia.ALL_ROTATION), this._eventMask & 4 && this.emit(ca.ROTATION_CHANGED))
                    }
                },
                eulerAngles: {
                    get: function() {
                        !1;
                        return n.Trs.toEuler(this._eulerAngles, this._trs)
                    },
                    set: function(a) {
                        !1;
                        n.Trs.fromEuler(this._trs, a);
                        this.setLocalDirty(ia.ALL_ROTATION);
                        !0;
                        this._renderFlag |= A.FLAG_TRANSFORM;
                        this._eventMask & 4 && this.emit(ca.ROTATION_CHANGED)
                    }
                },
                quat: {
                    get: function() {
                        var a = this._trs;
                        return new n.Quat(a[3], a[4], a[5], a[6])
                    },
                    set: function(a) {
                        this.setRotation(a)
                    }
                },
                scale: {
                    get: function() {
                        return this._trs[7]
                    },
                    set: function(a) {
                        this.setScale(a)
                    }
                },
                scaleX: {
                    get: function() {
                        return this._trs[7]
                    },
                    set: function(a) {
                        this._trs[7] !== a && (this._trs[7] = a, this.setLocalDirty(ia.ALL_SCALE), this._eventMask & 2 && this.emit(ca.SCALE_CHANGED))
                    }
                },
                scaleY: {
                    get: function() {
                        return this._trs[8]
                    },
                    set: function(a) {
                        this._trs[8] !== a && (this._trs[8] = a, this.setLocalDirty(ia.ALL_SCALE), this._eventMask &
                            2 && this.emit(ca.SCALE_CHANGED))
                    }
                },
                scaleZ: {
                    get: function() {
                        return this._trs[9]
                    },
                    set: function(a) {
                        this._trs[9] !== a && (this._trs[9] = a, this.setLocalDirty(ia.ALL_SCALE), !0, this._renderFlag |= A.FLAG_TRANSFORM, this._eventMask & 2 && this.emit(ca.SCALE_CHANGED))
                    }
                },
                skewX: {
                    get: function() {
                        return this._skewX
                    },
                    set: function(a) {
                        na(a, this);
                        this._skewX = a;
                        this.setLocalDirty(ia.SKEW);
                        !1
                    }
                },
                skewY: {
                    get: function() {
                        return this._skewY
                    },
                    set: function(a) {
                        na(a, this);
                        this._skewY = a;
                        this.setLocalDirty(ia.SKEW);
                        !1
                    }
                },
                opacity: {
                    get: function() {
                        return this._opacity
                    },
                    set: function(a) {
                        a = cc.misc.clampf(a, 0, 255);
                        this._opacity !== a && (this._opacity = a, !1, this._renderFlag |= A.FLAG_OPACITY_COLOR)
                    },
                    range: [0, 255]
                },
                color: {
                    get: function() {
                        return this._color.clone()
                    },
                    set: function(a) {
                        this._color.equals(a) || (this._color.set(a), !1, this._renderFlag |= A.FLAG_COLOR, this._eventMask & 32 && this.emit(ca.COLOR_CHANGED, a))
                    }
                },
                anchorX: {
                    get: function() {
                        return this._anchorPoint.x
                    },
                    set: function(a) {
                        var b = this._anchorPoint;
                        b.x !== a && (b.x = a, this._eventMask & 16 && this.emit(ca.ANCHOR_CHANGED))
                    }
                },
                anchorY: {
                    get: function() {
                        return this._anchorPoint.y
                    },
                    set: function(a) {
                        var b = this._anchorPoint;
                        b.y !== a && (b.y = a, this._eventMask & 16 && this.emit(ca.ANCHOR_CHANGED))
                    }
                },
                width: {
                    get: function() {
                        return this._contentSize.width
                    },
                    set: function(a) {
                        a !== this._contentSize.width && (!1, this._contentSize.width = a, this._eventMask & 8 && (!1, this.emit(ca.SIZE_CHANGED)))
                    }
                },
                height: {
                    get: function() {
                        return this._contentSize.height
                    },
                    set: function(a) {
                        a !== this._contentSize.height && (!1, this._contentSize.height = a, this._eventMask & 8 && (!1, this.emit(ca.SIZE_CHANGED)))
                    }
                },
                zIndex: {
                    get: function() {
                        return this._localZOrder >>
                            16
                    },
                    set: function(a) {
                        a > z.MAX_ZINDEX ? (cc.warnID(1636), a = z.MAX_ZINDEX) : a < z.MIN_ZINDEX && (cc.warnID(1637), a = z.MIN_ZINDEX);
                        this.zIndex !== a && (this._localZOrder = 65535 & this._localZOrder | a << 16, this.emit(ca.SIBLING_ORDER_CHANGED), this._onSiblingIndexChanged())
                    }
                },
                is3DNode: {
                    get: function() {
                        return this._is3DNode
                    },
                    set: function(a) {
                        this._is3DNode !== a && (this._is3DNode = a, this._update3DFunction())
                    }
                },
                up: {
                    get: function() {
                        return n.Vec3.transformQuat(N, n.Vec3.UP, this.getWorldRotation(fa)).clone()
                    }
                },
                right: {
                    get: function() {
                        return n.Vec3.transformQuat(N,
                            n.Vec3.RIGHT, this.getWorldRotation(fa)).clone()
                    }
                },
                forward: {
                    get: function() {
                        return n.Vec3.transformQuat(N, n.Vec3.FORWARD, this.getWorldRotation(fa)).clone()
                    }
                }
            },
            ctor: function() {
                this._reorderChildDirty = !1;
                this._mouseListener = this._touchListener = this._bubblingListeners = this._capturingListeners = this._renderComponent = this._widget = null;
                this._initDataFromPool();
                this._eventMask = 0;
                this._childArrivalOrder = this._cullingMask = 1;
                !1;
                this._renderFlag = A.FLAG_TRANSFORM | A.FLAG_OPACITY_COLOR
            },
            statics: {
                EventType: ca,
                _LocalDirtyFlag: ia,
                isNode: function(a) {
                    return a instanceof Fa && (a.constructor === Fa || !(a instanceof cc.Scene))
                },
                BuiltinGroupIndex: sa
            },
            _onSiblingIndexChanged: function() {
                this._parent && this._parent._delaySort()
            },
            _onPreDestroy: function() {
                var a = this._onPreDestroyBase();
                C && cc.director.getActionManager().removeAllActionsFromTarget(this);
                ka === this && (ka = null);
                this._bubblingListeners && this._bubblingListeners.clear();
                this._capturingListeners && this._capturingListeners.clear();
                if (this._touchListener || this._mouseListener) x.removeListeners(this),
                    this._touchListener && (this._touchListener.owner = null, this._touchListener = this._touchListener.mask = null), this._mouseListener && (this._mouseListener.owner = null, this._mouseListener = this._mouseListener.mask = null);
                !1;
                this._backDataIntoPool();
                this._reorderChildDirty && cc.director.__fastOff(cc.Director.EVENT_AFTER_UPDATE, this.sortAllChildren, this);
                a || !1
            },
            _onPostActivated: function(a) {
                var b = C ? cc.director.getActionManager() : null;
                a ? (this._renderFlag |= A.FLAG_WORLD_TRANSFORM, b && b.resumeTarget(this), x.resumeTarget(this),
                    this._checkListenerMask()) : (b && b.pauseTarget(this), x.pauseTarget(this))
            },
            _onHierarchyChanged: function(a) {
                this._updateOrderOfArrival();
                k(this);
                this._parent && this._parent._delaySort();
                this._renderFlag = this._renderFlag | A.FLAG_WORLD_TRANSFORM | A.FLAG_OPACITY_COLOR;
                this._onHierarchyChangedBase(a);
                cc._widgetManager && (cc._widgetManager._nodesOrderDirty = !0);
                a && this._activeInHierarchy && this._checkListenerMask();
                !1
            },
            _update3DFunction: function() {
                this._is3DNode ? (this._updateLocalMatrix = c, this._calculWorldMatrix =
                    b, this._mulMat = Ja) : (this._updateLocalMatrix = a, this._calculWorldMatrix = l, this._mulMat = f);
                this._renderComponent && this._renderComponent._on3DNodeChanged && this._renderComponent._on3DNodeChanged();
                this._renderFlag |= A.FLAG_TRANSFORM;
                this._localMatDirty = ia.ALL;
                !1
            },
            _initDataFromPool: function() {
                this._spaceInfo || (!1, !1, this._spaceInfo = p.pop());
                var a = this._spaceInfo;
                this._matrix = cc.mat4(a.localMat);
                n.Mat4.identity(this._matrix);
                this._worldMatrix = cc.mat4(a.worldMat);
                n.Mat4.identity(this._worldMatrix);
                this._localMatDirty =
                    ia.ALL;
                this._worldMatDirty = !0;
                a = this._trs = a.trs;
                a[0] = 0;
                a[1] = 0;
                a[2] = 0;
                a[3] = 0;
                a[4] = 0;
                a[5] = 0;
                a[6] = 1;
                a[7] = 1;
                a[8] = 1;
                a[9] = 1
            },
            _backDataIntoPool: function() {
                !1;
                p.push(this._spaceInfo);
                this._spaceInfo = this._trs = this._worldMatrix = this._matrix = null
            },
            _toEuler: function() {
                this.is3DNode ? n.Trs.toEuler(this._eulerAngles, this._trs) : n.Vec3.set(this._eulerAngles, 0, 0, Math.asin(this._trs[5]) / y * 2)
            },
            _fromEuler: function() {
                this.is3DNode ? n.Trs.fromEuler(this._trs, this._eulerAngles) : n.Trs.fromAngleZ(this._trs, this._eulerAngles.z)
            },
            _initProperties: function() {
                this._is3DNode && this._update3DFunction();
                var a = this._trs;
                if (a) {
                    var b = a;
                    a = this._trs = this._spaceInfo.trs;
                    11 === b.length ? a.set(b.subarray(1)) : a.set(b)
                } else this._trs = this._spaceInfo.trs;
                !1;
                this._fromEuler();
                !1
            },
            _onBatchCreated: function(a) {
                this._initProperties();
                this._cullingMask = 1 << d(this);
                !1;
                this._activeInHierarchy || (C && cc.director.getActionManager().pauseTarget(this), x.pauseTarget(this));
                for (var b = this._children, c = 0, f = b.length; c < f; c++) {
                    var l = b[c];
                    if (!a) {
                        var k = l._prefab;
                        k &&
                            k.sync && k.root === l && v.syncWithPrefab(l);
                        l._updateOrderOfArrival()
                    }
                    l._onBatchCreated(a)
                }
                0 < b.length && (this._renderFlag |= A.FLAG_CHILDREN);
                !1
            },
            _checkListenerMask: function() {
                if (this._touchListener) {
                    var a = this._touchListener.mask = h(this, cc.Mask);
                    this._mouseListener && (this._mouseListener.mask = a)
                } else this._mouseListener && (this._mouseListener.mask = h(this, cc.Mask))
            },
            _checknSetupSysEvent: function(a) {
                var b = !1,
                    c = !1; - 1 !== ra.indexOf(a) ? (this._touchListener || (this._touchListener = cc.EventListener.create({
                    event: cc.EventListener.TOUCH_ONE_BY_ONE,
                    swallowTouches: !0,
                    owner: this,
                    mask: h(this, cc.Mask),
                    onTouchBegan: xa,
                    onTouchMoved: P,
                    onTouchEnded: U,
                    onTouchCancelled: ua
                }), x.addListener(this._touchListener, this), b = !0), c = !0) : -1 !== r.indexOf(a) && (this._mouseListener || (this._mouseListener = cc.EventListener.create({
                    event: cc.EventListener.MOUSE,
                    _previousIn: !1,
                    owner: this,
                    mask: h(this, cc.Mask),
                    onMouseDown: pa,
                    onMouseMove: Ha,
                    onMouseUp: za,
                    onMouseScroll: Ia
                }), x.addListener(this._mouseListener, this), b = !0), c = !0);
                b && !this._activeInHierarchy && cc.director.getScheduler().schedule(function() {
                    this._activeInHierarchy ||
                        x.pauseTarget(this)
                }, this, 0, 0, 0, !1);
                return c
            },
            on: function(a, b, c, f) {
                if (this._checknSetupSysEvent(a)) return this._onDispatch(a, b, c, f);
                switch (a) {
                    case ca.POSITION_CHANGED:
                        this._eventMask |= 1;
                        break;
                    case ca.SCALE_CHANGED:
                        this._eventMask |= 2;
                        break;
                    case ca.ROTATION_CHANGED:
                        this._eventMask |= 4;
                        break;
                    case ca.SIZE_CHANGED:
                        this._eventMask |= 8;
                        break;
                    case ca.ANCHOR_CHANGED:
                        this._eventMask |= 16;
                        break;
                    case ca.COLOR_CHANGED:
                        this._eventMask |= 32
                }
                this._bubblingListeners || (this._bubblingListeners = new w);
                return this._bubblingListeners.on(a,
                    b, c)
            },
            once: function(a, b, c, f) {
                var d = this,
                    l = null;
                l = this._checknSetupSysEvent(a) && f ? this._capturingListeners = this._capturingListeners || new w : this._bubblingListeners = this._bubblingListeners || new w;
                l.once(a, b, c);
                l.once(a, function() {
                    d.off(a, b, c)
                }, void 0)
            },
            _onDispatch: function(a, b, c, f) {
                "boolean" === typeof c ? (f = c, c = void 0) : f = !!f;
                if (b) return f = f ? this._capturingListeners = this._capturingListeners || new w : this._bubblingListeners = this._bubblingListeners || new w, f.hasEventListener(a, b, c) || (f.on(a, b, c), c && c.__eventTargets &&
                    c.__eventTargets.push(this)), b;
                cc.errorID(6800)
            },
            off: function(a, b, c, f) {
                var d = -1 !== ra.indexOf(a),
                    l = !d && -1 !== r.indexOf(a);
                if (d || l) this._offDispatch(a, b, c, f), d ? this._touchListener && !e(this, ra) && (x.removeListener(this._touchListener), this._touchListener = null) : l && this._mouseListener && !e(this, r) && (x.removeListener(this._mouseListener), this._mouseListener = null);
                else if (this._bubblingListeners && (this._bubblingListeners.off(a, b, c), !this._bubblingListeners.hasEventListener(a))) switch (a) {
                    case ca.POSITION_CHANGED:
                        this._eventMask &=
                            -2;
                        break;
                    case ca.SCALE_CHANGED:
                        this._eventMask &= -3;
                        break;
                    case ca.ROTATION_CHANGED:
                        this._eventMask &= -5;
                        break;
                    case ca.SIZE_CHANGED:
                        this._eventMask &= -9;
                        break;
                    case ca.ANCHOR_CHANGED:
                        this._eventMask &= -17;
                        break;
                    case ca.COLOR_CHANGED:
                        this._eventMask &= -33
                }
            },
            _offDispatch: function(a, b, c, f) {
                "boolean" === typeof c ? (f = c, c = void 0) : f = !!f;
                if (b) {
                    if (f = f ? this._capturingListeners : this._bubblingListeners) f.off(a, b, c), c && c.__eventTargets && E.array.fastRemove(c.__eventTargets, this)
                } else this._capturingListeners && this._capturingListeners.removeAll(a),
                    this._bubblingListeners && this._bubblingListeners.removeAll(a)
            },
            targetOff: function(a) {
                var b = this._bubblingListeners;
                b && (b.targetOff(a), this._eventMask & 1 && !b.hasEventListener(ca.POSITION_CHANGED) && (this._eventMask &= -2), this._eventMask & 2 && !b.hasEventListener(ca.SCALE_CHANGED) && (this._eventMask &= -3), this._eventMask & 4 && !b.hasEventListener(ca.ROTATION_CHANGED) && (this._eventMask &= -5), this._eventMask & 8 && !b.hasEventListener(ca.SIZE_CHANGED) && (this._eventMask &= -9), this._eventMask & 16 && !b.hasEventListener(ca.ANCHOR_CHANGED) &&
                    (this._eventMask &= -17), this._eventMask & 32 && !b.hasEventListener(ca.COLOR_CHANGED) && (this._eventMask &= -33));
                this._capturingListeners && this._capturingListeners.targetOff(a);
                a && a.__eventTargets && E.array.fastRemove(a.__eventTargets, this);
                this._touchListener && !e(this, ra) && (x.removeListener(this._touchListener), this._touchListener = null);
                this._mouseListener && !e(this, r) && (x.removeListener(this._mouseListener), this._mouseListener = null)
            },
            hasEventListener: function(a) {
                var b = !1;
                this._bubblingListeners && (b = this._bubblingListeners.hasEventListener(a));
                !b && this._capturingListeners && (b = this._capturingListeners.hasEventListener(a));
                return b
            },
            emit: function(a, b, c, f, d, l) {
                this._bubblingListeners && this._bubblingListeners.emit(a, b, c, f, d, l)
            },
            dispatchEvent: function(a) {
                var b = oa.get();
                a: {
                    var c;a.target = this;b.length = 0;this._getCapturingTargets(a.type, b);a.eventPhase = 1;
                    for (c = b.length - 1; 0 <= c; --c) {
                        var f = b[c];
                        if (f._capturingListeners && (a.currentTarget = f, f._capturingListeners.emit(a.type, a, b), a._propagationStopped)) {
                            b.length = 0;
                            break a
                        }
                    }
                    b.length = 0;a.eventPhase = 2;
                    a.currentTarget = this;this._capturingListeners && this._capturingListeners.emit(a.type, a);!a._propagationImmediateStopped && this._bubblingListeners && this._bubblingListeners.emit(a.type, a);
                    if (!a._propagationStopped && a.bubbles)
                        for (this._getBubblingTargets(a.type, b), a.eventPhase = 3, c = 0; c < b.length; ++c)
                            if (f = b[c], f._bubblingListeners && (a.currentTarget = f, f._bubblingListeners.emit(a.type, a), a._propagationStopped)) {
                                b.length = 0;
                                break a
                            }
                    b.length = 0
                }
                oa.put(b)
            },
            pauseSystemEvents: function(a) {
                x.pauseTarget(this, a)
            },
            resumeSystemEvents: function(a) {
                x.resumeTarget(this,
                    a)
            },
            _hitTest: function(a, b) {
                var c = this._contentSize.width,
                    f = this._contentSize.height,
                    d = cc.Camera.findCamera(this);
                d ? d.getScreenToWorldPoint(a, Z) : Z.set(a);
                this._updateWorldMatrix();
                if (!n.Mat4.invert(ea, this._worldMatrix)) return !1;
                n.Vec2.transformMat4(W, Z, ea);
                W.x += this._anchorPoint.x * c;
                W.y += this._anchorPoint.y * f;
                a = !1;
                if (0 <= W.x && 0 <= W.y && W.x <= c && W.y <= f && (a = !0, b && b.mask)) {
                    b = b.mask;
                    c = this;
                    f = b ? b.length : 0;
                    for (var l = d = 0; c && l < f; ++d, c = c.parent) {
                        var k = b[l];
                        if (d === k.index) {
                            if (c !== k.node) {
                                b.length = l;
                                break
                            }
                            if ((k =
                                    c.getComponent(cc.Mask)) && k._enabled && !k._hitTest(Z)) {
                                a = !1;
                                break
                            }
                            l++
                        } else if (d > k.index) {
                            b.length = l;
                            break
                        }
                    }
                }
                return a
            },
            _getCapturingTargets: function(a, b) {
                for (var c = this.parent; c;) c._capturingListeners && c._capturingListeners.hasEventListener(a) && b.push(c), c = c.parent
            },
            _getBubblingTargets: function(a, b) {
                for (var c = this.parent; c;) c._bubblingListeners && c._bubblingListeners.hasEventListener(a) && b.push(c), c = c.parent
            },
            runAction: C ? function(a) {
                if (this.active) {
                    cc.assertID(a, 1618);
                    var b = cc.director.getActionManager();
                    b._suppressDeprecation || (b._suppressDeprecation = !0, cc.warnID(1639));
                    b.addAction(a, this, !1);
                    return a
                }
            } : g,
            pauseAllActions: C ? function() {
                cc.director.getActionManager().pauseTarget(this)
            } : g,
            resumeAllActions: C ? function() {
                cc.director.getActionManager().resumeTarget(this)
            } : g,
            stopAllActions: C ? function() {
                cc.director.getActionManager().removeAllActionsFromTarget(this)
            } : g,
            stopAction: C ? function(a) {
                cc.director.getActionManager().removeAction(a)
            } : g,
            stopActionByTag: C ? function(a) {
                a === cc.Action.TAG_INVALID ? cc.logID(1612) :
                    cc.director.getActionManager().removeActionByTag(a, this)
            } : g,
            getActionByTag: C ? function(a) {
                return a === cc.Action.TAG_INVALID ? (cc.logID(1613), null) : cc.director.getActionManager().getActionByTag(a, this)
            } : function() {
                return null
            },
            getNumberOfRunningActions: C ? function() {
                return cc.director.getActionManager().getNumberOfRunningActionsInTarget(this)
            } : function() {
                return 0
            },
            getPosition: function(a) {
                a = a || new n.Vec3;
                return n.Trs.toPosition(a, this._trs)
            },
            setPosition: function(a, b, c) {
                if (void 0 === b) {
                    var f = a.x;
                    b = a.y;
                    c =
                        a.z
                } else f = a;
                a = this._trs;
                void 0 === c && (c = a[2]);
                if (a[0] !== f || a[1] !== b || a[2] !== c) !1, a[0] = f, a[1] = b, a[2] = c, this.setLocalDirty(ia.ALL_POSITION), !0, this._renderFlag |= A.FLAG_WORLD_TRANSFORM, this._eventMask & 1 && (!1, this.emit(ca.POSITION_CHANGED))
            },
            getScale: function(a) {
                if (void 0 !== a) return n.Trs.toScale(a, this._trs);
                cc.errorID(1400, "cc.Node.getScale", "cc.Node.scale or cc.Node.getScale(cc.Vec3)");
                return this._trs[7]
            },
            setScale: function(a, b, c) {
                if (a && "number" !== typeof a) {
                    var f = a.x;
                    b = a.y;
                    c = a.z
                } else void 0 !== a && void 0 ===
                    b ? c = b = f = a : f = a;
                a = this._trs;
                void 0 === c && (c = a[9]);
                if (a[7] !== f || a[8] !== b || a[9] !== c) a[7] = f, a[8] = b, a[9] = c, this.setLocalDirty(ia.ALL_SCALE), !0, this._renderFlag |= A.FLAG_TRANSFORM, this._eventMask & 2 && this.emit(ca.SCALE_CHANGED)
            },
            getRotation: function(a) {
                if (a instanceof n.Quat) return n.Trs.toRotation(a, this._trs);
                !0;
                cc.warn("`cc.Node.getRotation()` is deprecated since v2.1.0, please use `-cc.Node.angle` instead. (`this.node.getRotation()` -> `-this.node.angle`)");
                return -this.angle
            },
            setRotation: function(a, b, c,
                f) {
                if ("number" === typeof a && void 0 === b) !0, cc.warn("`cc.Node.setRotation(degree)` is deprecated since v2.1.0, please set `-cc.Node.angle` instead. (`this.node.setRotation(x)` -> `this.node.angle = -x`)"), this.angle = -a;
                else {
                    var d = a;
                    void 0 === b && (d = a.x, b = a.y, c = a.z, f = a.w);
                    a = this._trs;
                    if (a[3] !== d || a[4] !== b || a[5] !== c || a[6] !== f) a[3] = d, a[4] = b, a[5] = c, a[6] = f, this.setLocalDirty(ia.ALL_ROTATION), this._eventMask & 4 && this.emit(ca.ROTATION_CHANGED), !1
                }
            },
            getContentSize: function() {
                return cc.size(this._contentSize.width,
                    this._contentSize.height)
            },
            setContentSize: function(a, b) {
                var c = this._contentSize;
                if (void 0 === b) {
                    if ((0, u.approx)(a.width, c.width) && (0, u.approx)(a.height, c.height)) return;
                    !1;
                    c.width = a.width;
                    c.height = a.height
                } else {
                    if ((0, u.approx)(a, c.width) && (0, u.approx)(b, c.height)) return;
                    !1;
                    c.width = a;
                    c.height = b
                }
                this._eventMask & 8 && (!1, this.emit(ca.SIZE_CHANGED))
            },
            getAnchorPoint: function() {
                return cc.v2(this._anchorPoint)
            },
            setAnchorPoint: function(a, b) {
                var c = this._anchorPoint;
                if (void 0 === b) {
                    if (a.x === c.x && a.y === c.y) return;
                    c.x = a.x;
                    c.y = a.y
                } else {
                    if (a === c.x && b === c.y) return;
                    c.x = a;
                    c.y = b
                }
                this.setLocalDirty(ia.ALL_POSITION);
                this._eventMask & 16 && this.emit(ca.ANCHOR_CHANGED)
            },
            _invTransformPoint: function(a, b) {
                this._parent ? this._parent._invTransformPoint(a, b) : n.Vec3.copy(a, b);
                b = this._trs;
                n.Trs.toPosition(D, b);
                n.Vec3.sub(a, a, D);
                n.Trs.toRotation(K, b);
                n.Quat.conjugate(L, K);
                n.Vec3.transformQuat(a, a, L);
                n.Trs.toScale(D, b);
                n.Vec3.inverseSafe(I, D);
                n.Vec3.mul(a, a, I);
                return a
            },
            getWorldPosition: function(a) {
                n.Trs.toPosition(a, this._trs);
                for (var b =
                        this._parent, c; b;) c = b._trs, n.Trs.toScale(F, c), n.Vec3.mul(a, a, F), n.Trs.toRotation(G, c), n.Vec3.transformQuat(a, a, G), n.Trs.toPosition(F, c), n.Vec3.add(a, a, F), b = b._parent;
                return a
            },
            setWorldPosition: function(a) {
                var b = this._trs;
                !1;
                this._parent ? this._parent._invTransformPoint(R, a) : n.Vec3.copy(R, a);
                n.Trs.fromPosition(b, R);
                this.setLocalDirty(ia.ALL_POSITION);
                this._eventMask & 1 && (!1, this.emit(ca.POSITION_CHANGED))
            },
            getWorldRotation: function(a) {
                n.Trs.toRotation(X, this._trs);
                n.Quat.copy(a, X);
                for (var b = this._parent; b;) n.Trs.toRotation(X,
                    b._trs), n.Quat.mul(a, X, a), b = b._parent;
                return a
            },
            setWorldRotation: function(a) {
                this._parent ? (this._parent.getWorldRotation(la), n.Quat.conjugate(la, la), n.Quat.mul(la, la, a)) : n.Quat.copy(la, a);
                n.Trs.fromRotation(this._trs, la);
                !1;
                this.setLocalDirty(ia.ALL_ROTATION)
            },
            getWorldScale: function(a) {
                n.Trs.toScale(M, this._trs);
                n.Vec3.copy(a, M);
                for (var b = this._parent; b;) n.Trs.toScale(M, b._trs), n.Vec3.mul(a, a, M), b = b._parent;
                return a
            },
            setWorldScale: function(a) {
                this._parent ? (this._parent.getWorldScale(S), n.Vec3.div(S,
                    a, S)) : n.Vec3.copy(S, a);
                n.Trs.fromScale(this._trs, S);
                this.setLocalDirty(ia.ALL_SCALE)
            },
            getWorldRT: function(a) {
                var b = this._trs;
                n.Trs.toPosition(O, b);
                n.Trs.toRotation(V, b);
                for (var c = this._parent; c;) b = c._trs, n.Trs.toScale(Q, b), n.Vec3.mul(O, O, Q), n.Trs.toRotation(ba, b), n.Vec3.transformQuat(O, O, ba), n.Trs.toPosition(Q, b), n.Vec3.add(O, O, Q), n.Quat.mul(V, ba, V), c = c._parent;
                n.Mat4.fromRT(a, V, O);
                return a
            },
            lookAt: function(a, b) {
                this.getWorldPosition(da);
                n.Vec3.sub(da, da, a);
                n.Vec3.normalize(da, da);
                n.Quat.fromViewUp(T,
                    da, b);
                this.setWorldRotation(T)
            },
            _updateLocalMatrix: a,
            _calculWorldMatrix: function() {
                this._localMatDirty & ia.TRSS && this._updateLocalMatrix();
                var a = this._parent;
                a ? this._mulMat(this._worldMatrix, a._worldMatrix, this._matrix) : n.Mat4.copy(this._worldMatrix, this._matrix);
                this._worldMatDirty = !1
            },
            _mulMat: f,
            _updateWorldMatrix: function() {
                this._parent && this._parent._updateWorldMatrix();
                if (this._worldMatDirty) {
                    this._calculWorldMatrix();
                    for (var a = this._children, b = 0, c = a.length; b < c; b++) a[b]._worldMatDirty = !0
                }
            },
            setLocalDirty: function(a) {
                this._localMatDirty |=
                    a;
                this._worldMatDirty = !0;
                a === ia.ALL_POSITION || a === ia.POSITION ? this._renderFlag |= A.FLAG_WORLD_TRANSFORM : this._renderFlag |= A.FLAG_TRANSFORM
            },
            setWorldDirty: function() {
                this._worldMatDirty = !0
            },
            getLocalMatrix: function(a) {
                this._updateLocalMatrix();
                return n.Mat4.copy(a, this._matrix)
            },
            getWorldMatrix: function(a) {
                this._updateWorldMatrix();
                return n.Mat4.copy(a, this._worldMatrix)
            },
            convertToNodeSpaceAR: function(a, b) {
                this._updateWorldMatrix();
                n.Mat4.invert(ea, this._worldMatrix);
                if (a instanceof cc.Vec2) return b =
                    b || new cc.Vec2, n.Vec2.transformMat4(b, a, ea);
                b = b || new cc.Vec3;
                return n.Vec3.transformMat4(b, a, ea)
            },
            convertToWorldSpaceAR: function(a, b) {
                this._updateWorldMatrix();
                if (a instanceof cc.Vec2) return b = b || new cc.Vec2, n.Vec2.transformMat4(b, a, this._worldMatrix);
                b = b || new cc.Vec3;
                return n.Vec3.transformMat4(b, a, this._worldMatrix)
            },
            convertToNodeSpace: function(a) {
                this._updateWorldMatrix();
                n.Mat4.invert(ea, this._worldMatrix);
                var b = new cc.Vec2;
                n.Vec2.transformMat4(b, a, ea);
                b.x += this._anchorPoint.x * this._contentSize.width;
                b.y += this._anchorPoint.y * this._contentSize.height;
                return b
            },
            convertToWorldSpace: function(a) {
                this._updateWorldMatrix();
                a = new cc.Vec2(a.x - this._anchorPoint.x * this._contentSize.width, a.y - this._anchorPoint.y * this._contentSize.height);
                return n.Vec2.transformMat4(a, a, this._worldMatrix)
            },
            getNodeToParentTransform: function(a) {
                a || (a = t.identity());
                this._updateLocalMatrix();
                var b = this._contentSize;
                ja.x = -this._anchorPoint.x * b.width;
                ja.y = -this._anchorPoint.y * b.height;
                n.Mat4.copy(ea, this._matrix);
                n.Mat4.transform(ea,
                    ea, ja);
                return t.fromMat4(a, ea)
            },
            getNodeToParentTransformAR: function(a) {
                a || (a = t.identity());
                this._updateLocalMatrix();
                return t.fromMat4(a, this._matrix)
            },
            getNodeToWorldTransform: function(a) {
                a || (a = t.identity());
                this._updateWorldMatrix();
                var b = this._contentSize;
                ja.x = -this._anchorPoint.x * b.width;
                ja.y = -this._anchorPoint.y * b.height;
                n.Mat4.copy(ea, this._worldMatrix);
                n.Mat4.transform(ea, ea, ja);
                return t.fromMat4(a, ea)
            },
            getNodeToWorldTransformAR: function(a) {
                a || (a = t.identity());
                this._updateWorldMatrix();
                return t.fromMat4(a,
                    this._worldMatrix)
            },
            getParentToNodeTransform: function(a) {
                a || (a = t.identity());
                this._updateLocalMatrix();
                n.Mat4.invert(ea, this._matrix);
                return t.fromMat4(a, ea)
            },
            getWorldToNodeTransform: function(a) {
                a || (a = t.identity());
                this._updateWorldMatrix();
                n.Mat4.invert(ea, this._worldMatrix);
                return t.fromMat4(a, ea)
            },
            convertTouchToNodeSpace: function(a) {
                return this.convertToNodeSpace(a.getLocation())
            },
            convertTouchToNodeSpaceAR: function(a) {
                return this.convertToNodeSpaceAR(a.getLocation())
            },
            getBoundingBox: function() {
                this._updateLocalMatrix();
                var a = this._contentSize.width,
                    b = this._contentSize.height;
                a = cc.rect(-this._anchorPoint.x * a, -this._anchorPoint.y * b, a, b);
                return a.transformMat4(a, this._matrix)
            },
            getBoundingBoxToWorld: function() {
                return this._parent ? (this._parent._updateWorldMatrix(), this._getBoundingBoxTo()) : this.getBoundingBox()
            },
            _getBoundingBoxTo: function() {
                var a = this._contentSize.width,
                    b = this._contentSize.height;
                a = cc.rect(-this._anchorPoint.x * a, -this._anchorPoint.y * b, a, b);
                this._calculWorldMatrix();
                a.transformMat4(a, this._worldMatrix);
                if (!this._children) return a;
                b = this._children;
                for (var c = 0; c < b.length; c++) {
                    var f = b[c];
                    f && f.active && (f = f._getBoundingBoxTo()) && a.union(a, f)
                }
                return a
            },
            _updateOrderOfArrival: function() {
                var a = this._parent ? ++this._parent._childArrivalOrder : 0;
                this._localZOrder = 4294901760 & this._localZOrder | a;
                this.emit(ca.SIBLING_ORDER_CHANGED)
            },
            setSelfGroupIndex: function(a) {
                this._groupIndex = a || 0;
                this._cullingMask = 1 << a;
                !1
            },
            addChild: function(a, b, c) {
                !1;
                cc.assertID(a, 1606);
                cc.assertID(null === a._parent, 1605);
                a.parent = this;
                void 0 !==
                    b && (a.zIndex = b);
                void 0 !== c && (a.name = c)
            },
            cleanup: function() {
                C && cc.director.getActionManager().removeAllActionsFromTarget(this);
                x.removeListeners(this);
                var a, b = this._children.length,
                    c;
                for (a = 0; a < b; ++a)(c = this._children[a]) && c.cleanup()
            },
            sortAllChildren: function() {
                if (this._reorderChildDirty) {
                    this._reorderChildDirty = !1;
                    var a = this._children;
                    this._childArrivalOrder = 1;
                    for (var b = 0, c = a.length; b < c; b++) {
                        var f = a[b];
                        f._updateOrderOfArrival()
                    }
                    x._setDirtyForNode(this);
                    if (1 < a.length) {
                        var d;
                        b = 1;
                        for (c = a.length; b < c; b++) {
                            f =
                                a[b];
                            for (var l = b; 0 < l && (d = a[l - 1])._localZOrder > f._localZOrder; l--) a[l] = d;
                            a[l] = f
                        }
                        this.emit(ca.CHILD_REORDER, this)
                    }
                    cc.director.__fastOff(cc.Director.EVENT_AFTER_UPDATE, this.sortAllChildren, this)
                }
            },
            _delaySort: function() {
                this._reorderChildDirty || (this._reorderChildDirty = !0, cc.director.__fastOn(cc.Director.EVENT_AFTER_UPDATE, this.sortAllChildren, this))
            },
            _restoreProperties: !1,
            onRestore: !1
        };
        !1;
        var Fa = cc.Class(m);
        m = Fa.prototype;
        E.getset(m, "position", m.getPosition, m.setPosition, !1, !0);
        !1;
        cc.Node = q.exports =
            Fa
    }, {
        "./event-manager": 172,
        "./event/event": 175,
        "./event/event-target": 174,
        "./platform/CCMacro": 232,
        "./platform/js": 248,
        "./renderer/render-flow": 260,
        "./utils/affine-transform": 301,
        "./utils/base-node": 302,
        "./utils/prefab-helper": 313,
        "./utils/trans-pool": 319,
        "./value-types": 325,
        "./value-types/utils": 332
    }],
    62: [function(g, q, m) {
        var h = g("./CCNode"),
            e = g("./renderer/render-flow"),
            d = h._LocalDirtyFlag;
        g = cc.Class({
            name: "cc.PrivateNode",
            extends: h,
            properties: {
                x: {
                    get: function() {
                        return this._originPos.x
                    },
                    set: function(d) {
                        var c =
                            this._originPos;
                        d !== c.x && (c.x = d, this._posDirty(!0))
                    },
                    override: !0
                },
                y: {
                    get: function() {
                        return this._originPos.y
                    },
                    set: function(d) {
                        var c = this._originPos;
                        d !== c.y && (c.y = d, this._posDirty(!0))
                    },
                    override: !0
                },
                zIndex: {
                    get: function() {
                        return cc.macro.MIN_ZINDEX
                    },
                    set: function() {},
                    override: !0
                },
                showInEditor: {
                    default: !1,
                    editorOnly: !0,
                    override: !0
                }
            },
            ctor: function(d) {
                this._localZOrder = cc.macro.MIN_ZINDEX << 16;
                this._originPos = cc.v2();
                !1
            },
            _posDirty: function(k) {
                this.setLocalDirty(d.POSITION);
                !0;
                this._renderFlag |= e.FLAG_TRANSFORM;
                !0 === k && this._eventMask & 1 && this.emit(h.EventType.POSITION_CHANGED)
            },
            _updateLocalMatrix: function() {
                if (this._localMatDirty) {
                    var d = this.parent;
                    d && (this._trs[0] = this._originPos.x - (d._anchorPoint.x - .5) * d._contentSize.width, this._trs[1] = this._originPos.y - (d._anchorPoint.y - .5) * d._contentSize.height);
                    this._super()
                }
            },
            getPosition: function() {
                return new cc.Vec2(this._originPos)
            },
            setPosition: function(d, c) {
                void 0 === c && (d = d.x, c = d.y);
                var a = this._originPos;
                if (a.x !== d || a.y !== c) a.x = d, a.y = c, this._posDirty(!0)
            },
            setParent: function(d) {
                var c =
                    this._parent;
                this._super(d);
                c !== d && (c && c.off(h.EventType.ANCHOR_CHANGED, this._posDirty, this), d && d.on(h.EventType.ANCHOR_CHANGED, this._posDirty, this))
            },
            _updateOrderOfArrival: function() {}
        });
        m = g.prototype;
        cc.js.getset(m, "parent", m.getParent, m.setParent);
        cc.js.getset(m, "position", m.getPosition, m.setPosition);
        !1;
        cc.PrivateNode = q.exports = g
    }, {
        "./CCNode": 61,
        "./renderer/render-flow": 260
    }],
    63: [function(g, q, m) {
        cc.Scene = cc.Class({
            name: "cc.Scene",
            extends: g("./CCNode"),
            properties: {
                _is3DNode: {
                    default: !0,
                    override: !0
                },
                autoReleaseAssets: !1
            },
            ctor: function() {
                this._anchorPoint.x = 0;
                this._anchorPoint.y = 0;
                this._activeInHierarchy = !1;
                this._inited = !cc.game._isCloning;
                !1;
                this.dependAssets = null
            },
            destroy: function() {
                if (cc.Object.prototype.destroy.call(this))
                    for (var h = this._children, e = 0; e < h.length; ++e) h[e].active = !1;
                this._activeInHierarchy = this._active = !1
            },
            _onHierarchyChanged: function() {},
            _instantiate: null,
            _load: function() {
                this._inited || (!1, this._onBatchCreated(!1), this._inited = !0)
            },
            _activate: function(h) {
                h = !1 !== h;
                !1;
                !1;
                cc.director._nodeActivator.activateNode(this,
                    h)
            }
        });
        q.exports = cc.Scene
    }, {
        "./CCNode": 61
    }],
    64: [function(g, q, m) {
            function h() {
                this._lock = !1;
                this._scheduler = null;
                this._elapsed = -1;
                this._useDelay = this._runForever = !1;
                this._interval = this._delay = this._repeat = this._timesExecuted = 0;
                this._callback = this._target = null
            }
            var e = g("./platform/js"),
                d = new(g("./platform/id-generater"))("Scheduler"),
                k = function(a, b, c, f) {
                    this.target = a;
                    this.priority = b;
                    this.paused = c;
                    this.markedForDeletion = f
                },
                c = [];
            k.get = function(a, b, f, d) {
                var l = c.pop();
                l ? (l.target = a, l.priority = b, l.paused =
                    f, l.markedForDeletion = d) : l = new k(a, b, f, d);
                return l
            };
            k.put = function(a) {
                20 > c.length && (a.target = null, c.push(a))
            };
            var a = function(a, b, c, f) {
                    this.list = a;
                    this.entry = b;
                    this.target = c;
                    this.callback = f
                },
                b = [];
            a.get = function(c, f, d, l) {
                var k = b.pop();
                k ? (k.list = c, k.entry = f, k.target = d, k.callback = l) : k = new a(c, f, d, l);
                return k
            };
            a.put = function(a) {
                20 > b.length && (a.list = a.entry = a.target = a.callback = null, b.push(a))
            };
            var l = function(a, b, c, f, d, l) {
                    this.timers = a;
                    this.target = b;
                    this.timerIndex = c;
                    this.currentTimer = f;
                    this.currentTimerSalvaged =
                        d;
                    this.paused = l
                },
                f = [];
            l.get = function(a, b, c, d, k, n) {
                var p = f.pop();
                p ? (p.timers = a, p.target = b, p.timerIndex = c, p.currentTimer = d, p.currentTimerSalvaged = k, p.paused = n) : p = new l(a, b, c, d, k, n);
                return p
            };
            l.put = function(a) {
                20 > f.length && (a.timers = a.target = a.currentTimer = null, f.push(a))
            };
            g = h.prototype;
            g.initWithCallback = function(a, b, c, f, d, l) {
                this._lock = !1;
                this._scheduler = a;
                this._target = c;
                this._callback = b;
                this._elapsed = -1;
                this._interval = f;
                this._delay = l;
                this._useDelay = 0 < this._delay;
                this._repeat = d;
                this._runForever = this._repeat ===
                    cc.macro.REPEAT_FOREVER;
                return !0
            };
            g.getInterval = function() {
                return this._interval
            };
            g.setInterval = function(a) {
                this._interval = a
            };
            g.update = function(a) {
                -1 === this._elapsed ? this._timesExecuted = this._elapsed = 0 : (this._elapsed += a, this._runForever && !this._useDelay ? this._elapsed >= this._interval && (this.trigger(), this._elapsed = 0) : (this._useDelay ? this._elapsed >= this._delay && (this.trigger(), this._elapsed -= this._delay, this._timesExecuted += 1, this._useDelay = !1) : this._elapsed >= this._interval && (this.trigger(), this._elapsed =
                    0, this._timesExecuted += 1), this._callback && !this._runForever && this._timesExecuted > this._repeat && this.cancel()))
            };
            g.getCallback = function() {
                return this._callback
            };
            g.trigger = function() {
                this._target && this._callback && (this._lock = !0, this._callback.call(this._target, this._elapsed), this._lock = !1)
            };
            g.cancel = function() {
                this._scheduler.unschedule(this._callback, this._target)
            };
            var n = [];
            h.get = function() {
                return n.pop() || new h
            };
            h.put = function(a) {
                20 > n.length && !a._lock && (a._scheduler = a._target = a._callback = null, n.push(a))
            };
            cc.Scheduler = function() {
                this._timeScale = 1;
                this._updatesNegList = [];
                this._updates0List = [];
                this._updatesPosList = [];
                this._hashForUpdates = e.createMap(!0);
                this._hashForTimers = e.createMap(!0);
                this._currentTarget = null;
                this._updateHashLocked = this._currentTargetSalvaged = !1;
                this._arrayForTimers = []
            };
            cc.Scheduler.prototype = {
                constructor: cc.Scheduler,
                _removeHashElement: function(a) {
                    delete this._hashForTimers[a.target._id];
                    for (var b = this._arrayForTimers, c = 0, f = b.length; c < f; c++)
                        if (b[c] === a) {
                            b.splice(c, 1);
                            break
                        }
                    l.put(a)
                },
                _removeUpdateFromHash: function(b) {
                    b = b.target._id;
                    var c = this._hashForUpdates[b];
                    if (c) {
                        for (var f = c.list, d = c.entry, l = 0, n = f.length; l < n; l++)
                            if (f[l] === d) {
                                f.splice(l, 1);
                                break
                            }
                        delete this._hashForUpdates[b];
                        k.put(d);
                        a.put(c)
                    }
                },
                _priorityIn: function(a, b, c) {
                    for (var f = 0; f < a.length; f++)
                        if (c < a[f].priority) {
                            a.splice(f, 0, b);
                            return
                        }
                    a.push(b)
                },
                _appendIn: function(a, b) {
                    a.push(b)
                },
                enableForTarget: function(a) {
                    a._id || (a.__instanceId ? cc.warnID(1513) : a._id = d.getNewId())
                },
                setTimeScale: function(a) {
                    this._timeScale = a
                },
                getTimeScale: function() {
                    return this._timeScale
                },
                update: function(a) {
                    this._updateHashLocked = !0;
                    1 !== this._timeScale && (a *= this._timeScale);
                    var b;
                    var c = 0;
                    var f = this._updatesNegList;
                    for (b = f.length; c < b; c++) {
                        var d = f[c];
                        d.paused || d.markedForDeletion || d.target.update(a)
                    }
                    c = 0;
                    f = this._updates0List;
                    for (b = f.length; c < b; c++) d = f[c], d.paused || d.markedForDeletion || d.target.update(a);
                    c = 0;
                    f = this._updatesPosList;
                    for (b = f.length; c < b; c++) d = f[c], d.paused || d.markedForDeletion || d.target.update(a);
                    b = this._arrayForTimers;
                    for (c = 0; c < b.length; c++) {
                        this._currentTarget = f = b[c];
                        this._currentTargetSalvaged = !1;
                        if (!f.paused)
                            for (f.timerIndex = 0; f.timerIndex < f.timers.length; ++f.timerIndex) f.currentTimer = f.timers[f.timerIndex], f.currentTimerSalvaged = !1, f.currentTimer.update(a), f.currentTimer = null;
                        this._currentTargetSalvaged && 0 === this._currentTarget.timers.length && (this._removeHashElement(this._currentTarget), --c)
                    }
                    c = 0;
                    for (f = this._updatesNegList; c < f.length;) d = f[c], d.markedForDeletion ? this._removeUpdateFromHash(d) : c++;
                    c = 0;
                    for (f = this._updates0List; c < f.length;) d = f[c], d.markedForDeletion ? this._removeUpdateFromHash(d) :
                        c++;
                    c = 0;
                    for (f = this._updatesPosList; c < f.length;) d = f[c], d.markedForDeletion ? this._removeUpdateFromHash(d) : c++;
                    this._updateHashLocked = !1;
                    this._currentTarget = null
                },
                schedule: function(a, b, c, f, d, k) {
                    if ("function" !== typeof a) {
                        var n = a;
                        a = b;
                        b = n
                    }
                    if (4 === arguments.length || 5 === arguments.length) k = !!f, f = cc.macro.REPEAT_FOREVER, d = 0;
                    cc.assertID(b, 1502);
                    var p = b._id;
                    p || (b.__instanceId ? (cc.warnID(1513), p = b._id = b.__instanceId) : cc.errorID(1510));
                    (n = this._hashForTimers[p]) ? n.paused !== k && cc.warnID(1511): (n = l.get(null, b, 0, null,
                        null, k), this._arrayForTimers.push(n), this._hashForTimers[p] = n);
                    var t;
                    if (null == n.timers) n.timers = [];
                    else
                        for (t = 0; t < n.timers.length; ++t)
                            if ((p = n.timers[t]) && a === p._callback) {
                                cc.logID(1507, p.getInterval(), c);
                                p._interval = c;
                                return
                            }
                    p = h.get();
                    p.initWithCallback(this, a, b, c, f, d);
                    n.timers.push(p);
                    this._currentTarget === n && this._currentTargetSalvaged && (this._currentTargetSalvaged = !1)
                },
                scheduleUpdate: function(b, c, f) {
                    var d = b._id;
                    d || (b.__instanceId ? (cc.warnID(1513), d = b._id = b.__instanceId) : cc.errorID(1510));
                    var l =
                        this._hashForUpdates[d];
                    if (l && l.entry) {
                        if (l.entry.priority === c) {
                            l.entry.markedForDeletion = !1;
                            l.entry.paused = f;
                            return
                        }
                        if (this._updateHashLocked) {
                            cc.logID(1506);
                            l.entry.markedForDeletion = !1;
                            l.entry.paused = f;
                            return
                        }
                        this.unscheduleUpdate(b)
                    }
                    f = k.get(b, c, f, !1);
                    0 === c ? (l = this._updates0List, this._appendIn(l, f)) : (l = 0 > c ? this._updatesNegList : this._updatesPosList, this._priorityIn(l, f, c));
                    this._hashForUpdates[d] = a.get(l, f, b, null)
                },
                unschedule: function(a, b) {
                    if (b && a) {
                        var c = b._id;
                        c || (b.__instanceId ? (cc.warnID(1513),
                            c = b._id = b.__instanceId) : cc.errorID(1510));
                        if (b = this._hashForTimers[c]) {
                            c = b.timers;
                            for (var f = 0, d = c.length; f < d; f++) {
                                var l = c[f];
                                if (a === l._callback) {
                                    l !== b.currentTimer || b.currentTimerSalvaged || (b.currentTimerSalvaged = !0);
                                    c.splice(f, 1);
                                    h.put(l);
                                    b.timerIndex >= f && b.timerIndex--;
                                    0 === c.length && (this._currentTarget === b ? this._currentTargetSalvaged = !0 : this._removeHashElement(b));
                                    break
                                }
                            }
                        }
                    }
                },
                unscheduleUpdate: function(a) {
                    if (a) {
                        var b = a._id;
                        b || (a.__instanceId ? (cc.warnID(1513), b = a._id = a.__instanceId) : cc.errorID(1510));
                        (a = this._hashForUpdates[b]) && (this._updateHashLocked ? a.entry.markedForDeletion = !0 : this._removeUpdateFromHash(a.entry))
                    }
                },
                unscheduleAllForTarget: function(a) {
                    if (a) {
                        var b = a._id;
                        b || (a.__instanceId ? (cc.warnID(1513), b = a._id = a.__instanceId) : cc.errorID(1510));
                        if (b = this._hashForTimers[b]) {
                            var c = b.timers; - 1 < c.indexOf(b.currentTimer) && !b.currentTimerSalvaged && (b.currentTimerSalvaged = !0);
                            for (var f = 0, d = c.length; f < d; f++) h.put(c[f]);
                            c.length = 0;
                            this._currentTarget === b ? this._currentTargetSalvaged = !0 : this._removeHashElement(b)
                        }
                        this.unscheduleUpdate(a)
                    }
                },
                unscheduleAll: function() {
                    this.unscheduleAllWithMinPriority(cc.Scheduler.PRIORITY_SYSTEM)
                },
                unscheduleAllWithMinPriority: function(a) {
                    var b, c = this._arrayForTimers;
                    for (b = c.length - 1; 0 <= b; b--) {
                        var f = c[b];
                        this.unscheduleAllForTarget(f.target)
                    }
                    if (0 > a)
                        for (b = 0; b < this._updatesNegList.length;) c = this._updatesNegList.length, (f = this._updatesNegList[b]) && f.priority >= a && this.unscheduleUpdate(f.target), c == this._updatesNegList.length && b++;
                    if (0 >= a)
                        for (b = 0; b < this._updates0List.length;) c = this._updates0List.length, (f = this._updates0List[b]) &&
                            this.unscheduleUpdate(f.target), c == this._updates0List.length && b++;
                    for (b = 0; b < this._updatesPosList.length;) c = this._updatesPosList.length, (f = this._updatesPosList[b]) && f.priority >= a && this.unscheduleUpdate(f.target), c == this._updatesPosList.length && b++
                },
                isScheduled: function(a, b) {
                    cc.assertID(a, 1508);
                    cc.assertID(b, 1509);
                    var c = b._id;
                    c || (b.__instanceId ? (cc.warnID(1513), c = b._id = b.__instanceId) : cc.errorID(1510));
                    b = this._hashForTimers[c];
                    if (!b || null == b.timers) return !1;
                    b = b.timers;
                    for (c = 0; c < b.length; ++c)
                        if (a ===
                            b[c]._callback) return !0;
                    return !1
                },
                pauseAllTargets: function() {
                    return this.pauseAllTargetsWithMinPriority(cc.Scheduler.PRIORITY_SYSTEM)
                },
                pauseAllTargetsWithMinPriority: function(a) {
                    var b = [],
                        c, f = this._arrayForTimers,
                        d;
                    var l = 0;
                    for (d = f.length; l < d; l++)
                        if (c = f[l]) c.paused = !0, b.push(c.target);
                    if (0 > a)
                        for (l = 0; l < this._updatesNegList.length; l++)(c = this._updatesNegList[l]) && c.priority >= a && (c.paused = !0, b.push(c.target));
                    if (0 >= a)
                        for (l = 0; l < this._updates0List.length; l++)
                            if (c = this._updates0List[l]) c.paused = !0, b.push(c.target);
                    for (l = 0; l < this._updatesPosList.length; l++)(c = this._updatesPosList[l]) && c.priority >= a && (c.paused = !0, b.push(c.target));
                    return b
                },
                resumeTargets: function(a) {
                    if (a)
                        for (var b = 0; b < a.length; b++) this.resumeTarget(a[b])
                },
                pauseTarget: function(a) {
                    cc.assertID(a, 1503);
                    var b = a._id;
                    b || (a.__instanceId ? (cc.warnID(1513), b = a._id = a.__instanceId) : cc.errorID(1510));
                    (a = this._hashForTimers[b]) && (a.paused = !0);
                    (b = this._hashForUpdates[b]) && (b.entry.paused = !0)
                },
                resumeTarget: function(a) {
                    cc.assertID(a, 1504);
                    var b = a._id;
                    b || (a.__instanceId ?
                        (cc.warnID(1513), b = a._id = a.__instanceId) : cc.errorID(1510));
                    (a = this._hashForTimers[b]) && (a.paused = !1);
                    (b = this._hashForUpdates[b]) && (b.entry.paused = !1)
                },
                isTargetPaused: function(a) {
                    cc.assertID(a, 1505);
                    var b = a._id;
                    b || (a.__instanceId ? (cc.warnID(1513), b = a._id = a.__instanceId) : cc.errorID(1510));
                    return (a = this._hashForTimers[b]) ? a.paused : (b = this._hashForUpdates[b]) ? b.entry.paused : !1
                }
            };
            cc.Scheduler.PRIORITY_SYSTEM = -2147483648;
            cc.Scheduler.PRIORITY_NON_SYSTEM = cc.Scheduler.PRIORITY_SYSTEM + 1;
            q.exports = cc.Scheduler
        },
        {
            "./platform/id-generater": 244,
            "./platform/js": 248
        }
    ],
    65: [function(g, q, m) {
        function h() {
            this._preprocessPipe = e;
            this._fetchPipe = d;
            this._loadPipe = b;
            this.pipeline = D.append(e).append(b);
            this.fetchPipeline = K.append(e).append(d);
            this.transformPipeline = I.append(w).append(A);
            this.bundles = R;
            this.assets = C;
            this._files = F;
            this._parsed = G;
            this.generalNativeBase = this.generalImportBase = "";
            this.dependUtil = a;
            this._releaseManager = c;
            this.cacheAsset = !0;
            this.force = !1;
            this.utils = k;
            this.downloader = u;
            this.parser = v;
            this.builtins =
                x;
            this.packManager = p;
            this.factory = z;
            this.cacheManager = null;
            this.presets = {
                default: {
                    priority: 0
                },
                preload: {
                    maxConcurrency: 2,
                    maxRequestsPerFrame: 2,
                    priority: -1
                },
                scene: {
                    maxConcurrency: 8,
                    maxRequestsPerFrame: 8,
                    priority: 1
                },
                bundle: {
                    maxConcurrency: 8,
                    maxRequestsPerFrame: 8,
                    priority: 2
                },
                remote: {
                    maxRetryCount: 4
                },
                script: {
                    maxConcurrency: 1024,
                    maxRequestsPerFrame: 1024,
                    priority: 2
                }
            }
        }
        var e = g("./preprocess"),
            d = g("./fetch");
        m = g("./cache");
        var k = g("./helper"),
            c = g("./releaseManager"),
            a = g("./depend-util"),
            b = g("./load"),
            l = g("./pipeline"),
            f = g("./task"),
            n = g("./request-item"),
            u = g("./downloader"),
            v = g("./parser"),
            p = g("./pack-manager"),
            t = g("./bundle"),
            x = g("./builtins"),
            z = g("./factory"),
            E = g("./urlTransformer"),
            w = E.parse,
            A = E.combine;
        E = g("./utilities");
        var B = E.parseParameters,
            y = E.asyncify;
        g = g("./shared");
        var C = g.assets,
            F = g.files,
            G = g.parsed,
            D = g.pipeline,
            I = g.transformPipeline,
            K = g.fetchPipeline,
            L = g.RequestType,
            R = g.bundles,
            M = g.BuiltinBundleName;
        h.Pipeline = l;
        h.Task = f;
        h.Cache = m;
        h.RequestItem = n;
        h.Bundle = t;
        h.BuiltinBundleName = M;
        h.prototype = {
            constructor: h,
            get main() {
                return R.get(M.MAIN)
            },
            get resources() {
                return R.get(M.RESOURCES)
            },
            get internal() {
                return R.get(M.INTERNAL)
            },
            init: function(a) {
                a = a || Object.create(null);
                this._files.clear();
                this._parsed.clear();
                this._releaseManager.init();
                this.assets.clear();
                this.bundles.clear();
                this.packManager.init();
                this.downloader.init(a.bundleVers, a.server);
                this.parser.init();
                this.dependUtil.init();
                this.generalImportBase = a.importBase;
                this.generalNativeBase = a.nativeBase
            },
            getBundle: function(a) {
                return R.get(a)
            },
            removeBundle: function(a) {
                a._destroy();
                R.remove(a.name)
            },
            loadAny: function(a, b, c, d) {
                d = B(b, c, d);
                b = d.options;
                c = d.onProgress;
                d = d.onComplete;
                b.preset = b.preset || "default";
                a = Array.isArray(a) ? a.concat() : a;
                a = new f({
                    input: a,
                    onProgress: c,
                    onComplete: y(d),
                    options: b
                });
                D.async(a)
            },
            preloadAny: function(a, b, c, d) {
                d = B(b, c, d);
                b = d.options;
                c = d.onProgress;
                d = d.onComplete;
                b.preset = b.preset || "preload";
                a = Array.isArray(a) ? a.concat() : a;
                a = new f({
                    input: a,
                    onProgress: c,
                    onComplete: y(d),
                    options: b
                });
                K.async(a)
            },
            postLoadNative: function(b, c, f) {
                if (!(b instanceof cc.Asset)) throw Error("input is not asset");
                var d = B(c, void 0, f);
                c = d.options;
                f = d.onComplete;
                if (!b._native || b._nativeAsset) return y(f)(null);
                if (d = a.getNativeDep(b._uuid)) {
                    if (!R.has(d.bundle)) {
                        var l = R.find(function(a) {
                            return a.getAssetInfo(b._uuid)
                        });
                        l && (d.bundle = l.name)
                    }
                    this.loadAny(d, c, function(a, c) {
                        a ? cc.error(a.message, a.stack) : b.isValid && !b._nativeAsset && (b._nativeAsset = c);
                        f && f(a)
                    })
                }
            },
            loadRemote: function(a, b, c) {
                var f = B(b, void 0, c);
                b = f.options;
                c = f.onComplete;
                if (this.assets.has(a)) return y(c)(null, this.assets.get(a));
                b.__isNative__ = !0;
                b.preset =
                    b.preset || "remote";
                this.loadAny({
                    url: a
                }, b, null, function(f, d) {
                    f ? (cc.error(f.message, f.stack), c && c(f, null)) : z.create(a, d, b.ext || cc.path.extname(a), b, function(a, b) {
                        c && c(a, b)
                    })
                })
            },
            loadScript: function(a, b, c) {
                c = B(b, void 0, c);
                b = c.options;
                c = c.onComplete;
                b.__requestType__ = L.URL;
                b.preset = b.preset || "script";
                this.loadAny(a, b, c)
            },
            loadBundle: function(a, b, c) {
                c = B(b, void 0, c);
                b = c.options;
                c = c.onComplete;
                var f = cc.path.basename(a);
                if (this.bundles.has(f)) return y(c)(null, this.getBundle(f));
                b.preset = b.preset || "bundle";
                b.ext = "bundle";
                this.loadRemote(a, b, c)
            },
            releaseAsset: function(a) {
                c.tryRelease(a, !0)
            },
            releaseUnusedAssets: function() {
                C.forEach(function(a) {
                    c.tryRelease(a)
                })
            },
            releaseAll: function() {
                C.forEach(function(a) {
                    c.tryRelease(a, !0)
                });
                !1
            },
            _transform: function(a, b) {
                a = f.create({
                    input: a,
                    options: b
                });
                b = [];
                try {
                    for (var c = I.sync(a), d = 0, l = c.length; d < l; d++) {
                        var k = c[d],
                            n = k.url;
                        k.recycle();
                        b.push(n)
                    }
                } catch (N) {
                    d = 0;
                    for (l = a.output.length; d < l; d++) a.output[d].recycle();
                    cc.error(N.message, N.stack)
                }
                a.recycle();
                return 1 < b.length ? b :
                    b[0]
            }
        };
        cc.AssetManager = h;
        cc.assetManager = new h;
        Object.defineProperty(cc, "resources", {
            get: function() {
                return R.get(M.RESOURCES)
            }
        });
        q.exports = cc.assetManager
    }, {
        "./builtins": 66,
        "./bundle": 67,
        "./cache": 68,
        "./depend-util": 70,
        "./downloader": 77,
        "./factory": 78,
        "./fetch": 79,
        "./helper": 81,
        "./load": 83,
        "./pack-manager": 84,
        "./parser": 85,
        "./pipeline": 86,
        "./preprocess": 87,
        "./releaseManager": 88,
        "./request-item": 89,
        "./shared": 90,
        "./task": 91,
        "./urlTransformer": 92,
        "./utilities": 93
    }],
    66: [function(g, q, m) {
        m = g("./cache");
        var h = g("./releaseManager"),
            e = g("./shared").BuiltinBundleName;
        g = {
            _assets: new m({
                material: new m,
                effect: new m
            }),
            _loadBuiltins: function(d, k) {
                var c = d + "s",
                    a = this._assets.get(d);
                return cc.assetManager.internal.loadDir(c, null, null, function(b, c) {
                    if (b) cc.error(b.message, b.stack);
                    else
                        for (b = 0; b < c.length; b++) {
                            var f = c[b];
                            a.add(f.name, f.addRef())
                        }
                    k()
                })
            },
            init: function(d) {
                var k = this;
                this.clear();
                if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS || !cc.assetManager.bundles.has(e.INTERNAL)) return d && d();
                this._loadBuiltins("effect",
                    function() {
                        k._loadBuiltins("material", d)
                    })
            },
            getBuiltin: function(d, k) {
                return 0 === arguments.length ? this._assets : 1 === arguments.length ? this._assets.get(d) : this._assets.get(d).get(k)
            },
            clear: function() {
                this._assets.forEach(function(d) {
                    d.forEach(function(d) {
                        h.tryRelease(d, !0)
                    });
                    d.clear()
                })
            }
        };
        q.exports = g
    }, {
        "./cache": 68,
        "./releaseManager": 88,
        "./shared": 90
    }],
    67: [function(g, q, m) {
        function h() {
            this._config = new e
        }
        var e = g("./config"),
            d = g("./releaseManager");
        m = g("./utilities");
        var k = m.parseParameters,
            c = m.parseLoadResArgs;
        g = g("./shared");
        var a = g.RequestType,
            b = g.assets,
            l = g.bundles;
        h.prototype = {
            constructor: h,
            get name() {
                return this._config.name
            },
            get deps() {
                return this._config.deps
            },
            get base() {
                return this._config.base
            },
            getInfoWithPath: function(a, b) {
                return this._config.getInfoWithPath(a, b)
            },
            getDirWithPath: function(a, b, c) {
                return this._config.getDirWithPath(a, b, c)
            },
            getAssetInfo: function(a) {
                return this._config.getAssetInfo(a)
            },
            getSceneInfo: function(a) {
                return this._config.getSceneInfo(a)
            },
            init: function(a) {
                this._config.init(a);
                l.add(a.name, this)
            },
            load: function(b, d, l, k) {
                k = c(d, l, k);
                d = k.type;
                l = k.onProgress;
                k = k.onComplete;
                cc.assetManager.loadAny(b, {
                    __requestType__: a.PATH,
                    type: d,
                    bundle: this.name,
                    __outputAsArray__: Array.isArray(b)
                }, l, k)
            },
            preload: function(b, d, l, k) {
                k = c(d, l, k);
                d = k.type;
                l = k.onProgress;
                k = k.onComplete;
                cc.assetManager.preloadAny(b, {
                    __requestType__: a.PATH,
                    type: d,
                    bundle: this.name
                }, l, k)
            },
            loadDir: function(b, d, l, k) {
                k = c(d, l, k);
                d = k.type;
                l = k.onProgress;
                k = k.onComplete;
                cc.assetManager.loadAny(b, {
                    __requestType__: a.DIR,
                    type: d,
                    bundle: this.name,
                    __outputAsArray__: !0
                }, l, k)
            },
            preloadDir: function(b, d, l, k) {
                k = c(d, l, k);
                d = k.type;
                l = k.onProgress;
                k = k.onComplete;
                cc.assetManager.preloadAny(b, {
                    __requestType__: a.DIR,
                    type: d,
                    bundle: this.name
                }, l, k)
            },
            loadScene: function(a, b, c, d) {
                var f = k(b, c, d);
                b = f.options;
                c = f.onProgress;
                d = f.onComplete;
                b.preset = b.preset || "scene";
                b.bundle = this.name;
                cc.assetManager.loadAny({
                    scene: a
                }, b, c, function(a, b) {
                    a ? (cc.error(a.message, a.stack), d && d(a)) : b instanceof cc.SceneAsset ? (a = b.scene, a._id = b._uuid, a._name = b._name, d &&
                        d(null, b)) : d && d(Error("The asset " + b._uuid + " is not a scene"))
                })
            },
            preloadScene: function(a, b, c, d) {
                var f = k(b, c, d);
                b = f.options;
                c = f.onProgress;
                d = f.onComplete;
                b.bundle = this.name;
                cc.assetManager.preloadAny({
                    scene: a
                }, b, c, function(b) {
                    b && cc.errorID(1210, a, b.message);
                    d && d(b)
                })
            },
            get: function(a, c) {
                a = this.getInfoWithPath(a, c);
                return b.get(a && a.uuid)
            },
            release: function(a, b) {
                d.tryRelease(this.get(a, b), !0)
            },
            releaseUnusedAssets: function() {
                var a = this;
                b.forEach(function(b) {
                    var c = a.getAssetInfo(b._uuid);
                    c && !c.redirect &&
                        d.tryRelease(b)
                })
            },
            releaseAll: function() {
                var a = this;
                b.forEach(function(b) {
                    var c = a.getAssetInfo(b._uuid);
                    c && !c.redirect && d.tryRelease(b, !0)
                })
            },
            _destroy: function() {
                this._config.destroy()
            }
        };
        q.exports = h
    }, {
        "./config": 69,
        "./releaseManager": 88,
        "./shared": 90,
        "./utilities": 93
    }],
    68: [function(g, q, m) {
        function h(d) {
            d ? (this._map = d, this._count = Object.keys(d).length) : (this._map = e.createMap(!0), this._count = 0)
        }
        var e = g("../platform/js");
        h.prototype = {
            constructor: h,
            add: function(d, k) {
                d in this._map || this._count++;
                return this._map[d] =
                    k
            },
            get: function(d) {
                return this._map[d]
            },
            has: function(d) {
                return d in this._map
            },
            remove: function(d) {
                var k = this._map[d];
                d in this._map && (delete this._map[d], this._count--);
                return k
            },
            clear: function() {
                0 !== this._count && (this._map = e.createMap(!0), this._count = 0)
            },
            forEach: function(d) {
                for (var k in this._map) d(this._map[k], k)
            },
            find: function(d) {
                for (var k in this._map)
                    if (d(this._map[k], k)) return this._map[k];
                return null
            },
            get count() {
                return this._count
            },
            destroy: function() {
                this._map = null
            }
        };
        q.exports = h
    }, {
        "../platform/js": 248
    }],
    69: [function(g, q, m) {
        function h() {
            this.nativeBase = this.importBase = this.base = this.name = "";
            this.deps = null;
            this.assetInfos = new d;
            this.scenes = new d;
            this.paths = new d
        }
        var e = g("../platform/js"),
            d = g("./cache"),
            k = g("./helper").normalize,
            c = g("./utilities").processOptions;
        h.prototype = {
            constructor: h,
            init: function(a) {
                c(a);
                this.importBase = a.importBase || "";
                this.nativeBase = a.nativeBase || "";
                this.base = a.base || "";
                this.name = a.name || "";
                this.deps = a.deps || [];
                this._initUuid(a.uuids);
                this._initPath(a.paths);
                this._initScene(a.scenes);
                this._initPackage(a.packs);
                this._initVersion(a.versions);
                this._initRedirect(a.redirect)
            },
            _initUuid: function(a) {
                if (a) {
                    this.assetInfos.clear();
                    for (var b = 0, c = a.length; b < c; b++) {
                        var f = a[b];
                        this.assetInfos.add(f, {
                            uuid: f
                        })
                    }
                }
            },
            _initPath: function(a) {
                if (a) {
                    var b = this.paths;
                    b.clear();
                    for (var c in a) {
                        var f = a[c],
                            d = f[0],
                            k = f[1];
                        f = 3 === f.length;
                        var v = this.assetInfos.get(c);
                        v.path = d;
                        v.ctor = e._getClassById(k);
                        b.has(d) ? f ? b.get(d).push(v) : b.get(d).unshift(v) : b.add(d, [v])
                    }
                }
            },
            _initScene: function(a) {
                if (a) {
                    var b = this.scenes;
                    b.clear();
                    var c = this.assetInfos,
                        f;
                    for (f in a) {
                        var d = c.get(a[f]);
                        d.url = f;
                        b.add(f, d)
                    }
                }
            },
            _initPackage: function(a) {
                if (a) {
                    var b = this.assetInfos,
                        c;
                    for (c in a) {
                        var f = a[c],
                            d = {
                                uuid: c,
                                packs: f,
                                ext: ".json"
                            };
                        b.add(c, d);
                        for (var k = 0, e = f.length; k < e; k++) {
                            var p = b.get(f[k]),
                                t = p.packs;
                            t ? 1 === e ? t.unshift(d) : t.push(d) : p.packs = [d]
                        }
                    }
                }
            },
            _initVersion: function(a) {
                if (a) {
                    var b = this.assetInfos,
                        c = a["import"];
                    if (c)
                        for (var f = 0, d = c.length; f < d; f += 2) {
                            var k = c[f];
                            k = b.get(k);
                            k.ver = c[f + 1]
                        }
                    if (c = a["native"])
                        for (f = 0, d = c.length; f < d; f += 2) k = c[f],
                            k = b.get(k), k.nativeVer = c[f + 1]
                }
            },
            _initRedirect: function(a) {
                if (a)
                    for (var b = this.assetInfos, c = 0, f = a.length; c < f; c += 2) b.get(a[c]).redirect = a[c + 1]
            },
            getInfoWithPath: function(a, b) {
                if (!a) return null;
                a = k(a);
                if (a = this.paths.get(a)) {
                    if (!b) return a[0];
                    for (var c = 0, f = a.length; c < f; c++) {
                        var d = a[c];
                        if (e.isChildClassOf(d.ctor, b)) return d
                    }
                }
                return null
            },
            getDirWithPath: function(a, b, c) {
                a = k(a);
                "/" === a[a.length - 1] && (a = a.slice(0, -1));
                var f = c || [];
                this.paths.forEach(function(c, d) {
                    var l;
                    if (l = d.startsWith(a)) l = d.length > a.length ?
                        47 === d.charCodeAt(a.length) : !0;
                    if (l || !a)
                        for (d = 0, l = c.length; d < l; d++) {
                            var k = c[d];
                            b && !e.isChildClassOf(k.ctor, b) || f.push(k)
                        }
                });
                return f
            },
            getAssetInfo: function(a) {
                return this.assetInfos.get(a)
            },
            getSceneInfo: function(a) {
                a.endsWith(".fire") || (a += ".fire");
                "/" === a[0] || a.startsWith("db://") || (a = "/" + a);
                return this.scenes.find(function(b, c) {
                    return c.endsWith(a)
                })
            },
            destroy: function() {
                this.paths.destroy();
                this.scenes.destroy();
                this.assetInfos.destroy()
            }
        };
        !1;
        q.exports = h
    }, {
        "../platform/js": 248,
        "./cache": 68,
        "./helper": 81,
        "./utilities": 93
    }],
    70: [function(g, q, m) {
        function h(a) {
            if ("function" !== typeof WeakMap) return null;
            var b = new WeakMap,
                c = new WeakMap;
            return (h = function(a) {
                return a ? c : b
            })(a)
        }
        var e = function(a, b) {
            if (!b && a && a.__esModule) return a;
            if (null === a || "object" !== typeof a && "function" !== typeof a) return {
                default: a
            };
            if ((b = h(b)) && b.has(a)) return b.get(a);
            var c = {},
                f = Object.defineProperty && Object.getOwnPropertyDescriptor,
                d;
            for (d in a)
                if ("default" !== d && Object.prototype.hasOwnProperty.call(a, d)) {
                    var k = f ? Object.getOwnPropertyDescriptor(a,
                        d) : null;
                    k && (k.get || k.set) ? Object.defineProperty(c, d, k) : c[d] = a[d]
                }
            c["default"] = a;
            b && b.set(a, c);
            return c
        }(g("../platform/deserialize-compiled"));
        m = g("./cache");
        var d = g("./deserialize");
        g = g("./shared");
        var k = g.files,
            c = g.parsed;
        g = {
            _depends: new m,
            init: function() {
                this._depends.clear()
            },
            getNativeDep: function(a) {
                return (a = this._depends.get(a)) ? a.nativeDep && Object.assign({}, a.nativeDep) : null
            },
            getDeps: function(a) {
                return this._depends.has(a) ? this._depends.get(a).deps : []
            },
            getDepsRecursively: function(a) {
                var b =
                    Object.create(null),
                    c = [];
                this._descend(a, b, c);
                return c
            },
            _descend: function(a, b, c) {
                a = this.getDeps(a);
                for (var d = 0; d < a.length; d++) {
                    var l = a[d];
                    b[l] || (b[l] = !0, c.push(l), this._descend(l, b, c))
                }
            },
            remove: function(a) {
                this._depends.remove(a)
            },
            parse: function(a, b) {
                var l = null;
                if (Array.isArray(b) || b.__type__) {
                    if (l = this._depends.get(a)) return l;
                    if (Array.isArray(b) && (!1, !(0, e.hasNativeDep)(b))) l = {
                        deps: this._parseDepsFromJson(b)
                    };
                    else try {
                        var f = d(b);
                        l = this._parseDepsFromAsset(f);
                        l.nativeDep && (l.nativeDep.uuid = a);
                        c.add(a +
                            "@import", f)
                    } catch (n) {
                        k.remove(a + "@import"), l = {
                            deps: []
                        }
                    }
                } else {
                    if ((!0, l = this._depends.get(a)) && l.parsedFromExistAsset) return l;
                    l = this._parseDepsFromAsset(b)
                }
                this._depends.add(a, l);
                return l
            },
            _parseDepsFromAsset: function(a) {
                for (var b = {
                        deps: [],
                        parsedFromExistAsset: !0,
                        preventPreloadNativeObject: a.constructor.preventPreloadNativeObject,
                        preventDeferredLoadDependents: a.constructor.preventDeferredLoadDependents
                    }, c = a.__depends__, d = 0, k = c.length; d < k; d++) b.deps.push(c[d].uuid);
                a.__nativeDepend__ && (b.nativeDep =
                    a._nativeDep);
                return b
            },
            _parseDepsFromJson: (!1, function(a) {
                var b = (0, e.getDependUuidList)(a);
                b.forEach(function(a, c) {
                    return b[c] = cc.assetManager.utils.decodeUuid(a)
                });
                return b
            })
        };
        q.exports = g
    }, {
        "../platform/deserialize-compiled": 242,
        "./cache": 68,
        "./deserialize": 72,
        "./shared": 90
    }],
    71: [function(g, q, m) {
        function h() {
            return !0
        }
        q = g("../platform/js");
        g("../CCDirector");
        m = g("./utilities");
        var e = g("./depend-util"),
            d = g("./releaseManager"),
            k = g("./downloader"),
            c = g("./factory"),
            a = g("./helper"),
            b = ".png .jpg .bmp .jpeg .gif .ico .tiff .webp .image .pvr .pkm".split(" "),
            l = [".mp3", ".ogg", ".wav", ".m4a"],
            f = {
                transformURL: function(b) {
                    var c = a.getUuidFromURL(b);
                    if (!c) return b;
                    var d = cc.assetManager.bundles.find(function(a) {
                        return !!a.getAssetInfo(c)
                    });
                    if (!d) return b;
                    var f = "",
                        l = d.getAssetInfo(c);
                    f = b.startsWith(d.base + d._config.nativeBase) ? l.nativeVer || "" : l.ver || "";
                    if (!f || -1 !== b.indexOf(f)) return b;
                    d = !1;
                    ".ttf" === cc.path.extname(b) && (d = !0);
                    d ? (d = cc.path.dirname(b), b = cc.path.basename(b), b = d + "." + f + "/" + b) : b = b.replace(/.*[/\\][0-9a-fA-F]{2}[/\\]([0-9a-fA-F-]{8,})/, function(a, b) {
                        return a +
                            "." + f
                    });
                    return b
                }
            },
            n = {
                onProgress: null,
                _autoReleaseSetting: Object.create(null),
                get _cache() {
                    return cc.assetManager.assets._map
                },
                load: function(a, d, f) {
                    void 0 === f && void 0 !== d && (f = d, d = null);
                    a = Array.isArray(a) ? a : [a];
                    for (var k = 0; k < a.length; k++) {
                        var n = a[k];
                        "string" === typeof n ? a[k] = {
                            url: n,
                            __isNative__: !0
                        } : (n.type && (n.ext = "." + n.type, n.type = void 0), n.url && (n.__isNative__ = !0))
                    }
                    var p = [],
                        t = [];
                    cc.assetManager.loadAny(a, null, function(a, c, f) {
                        f.content && (b.includes(f.ext) ? p.push(f.content) : l.includes(f.ext) && t.push(f.content));
                        d && d(a, c, f)
                    }, function(b, d) {
                        var l = null;
                        if (!b) {
                            d = Array.isArray(d) ? d : [d];
                            for (var k = 0; k < d.length; k++)
                                if (l = d[k], !(l instanceof cc.Asset)) {
                                    var n = l,
                                        e = a[k].url;
                                    p.includes(n) ? c.create(e, l, ".png", null, function(a, b) {
                                        n = d[k] = b
                                    }) : t.includes(n) && c.create(e, l, ".mp3", null, function(a, b) {
                                        n = d[k] = b
                                    });
                                    cc.assetManager.assets.add(e, n)
                                }
                            if (1 < d.length) {
                                var u = Object.create(null);
                                d.forEach(function(a) {
                                    u[a._uuid] = a
                                });
                                l = {
                                    isCompleted: h,
                                    _map: u
                                }
                            } else l = d[0]
                        }
                        f && f(b, l)
                    })
                },
                getXMLHttpRequest: function() {
                    return new XMLHttpRequest
                },
                _parseLoadResArgs: m.parseLoadResArgs,
                getItem: function(a) {
                    return cc.assetManager.assets.has(a) ? {
                        content: cc.assetManager.assets.get(a)
                    } : null
                },
                loadRes: function(a, b, c, d) {
                    d = this._parseLoadResArgs(b, c, d);
                    b = d.type;
                    c = d.onProgress;
                    d = d.onComplete;
                    var f = cc.path.extname(a);
                    f && (a = a.slice(0, -f.length));
                    cc.resources.load(a, b, c, d)
                },
                loadResArray: function(a, b, c, d) {
                    d = this._parseLoadResArgs(b, c, d);
                    b = d.type;
                    c = d.onProgress;
                    d = d.onComplete;
                    a.forEach(function(b, c) {
                        var d = cc.path.extname(b);
                        d && (a[c] = b.slice(0, -d.length))
                    });
                    cc.resources.load(a, b, c, d)
                },
                loadResDir: function(a,
                    b, c, d) {
                    c = this._parseLoadResArgs(b, c, d);
                    b = c.type;
                    var f = c.onComplete;
                    cc.resources.loadDir(a, b, c.onProgress, function(c, d) {
                        var l = [];
                        c || (l = cc.resources.getDirWithPath(a, b).map(function(a) {
                            return a.path
                        }));
                        f && f(c, d, l)
                    })
                },
                getRes: function(a, b) {
                    return cc.assetManager.assets.has(a) ? cc.assetManager.assets.get(a) : cc.resources.get(a, b)
                },
                getResCount: function() {
                    return cc.assetManager.assets.count
                },
                getDependsRecursively: function(a) {
                    return a ? e.getDepsRecursively("string" === typeof a ? a : a._uuid).concat([a._uuid]) : []
                },
                get assetLoader() {
                    !0;
                    cc.error("cc.loader.assetLoader was removed, assetLoader and md5Pipe were merged into cc.assetManager.transformPipeline")
                },
                get md5Pipe() {
                    return f
                },
                get downloader() {
                    return cc.assetManager.downloader
                },
                get loader() {
                    return cc.assetManager.parser
                },
                addDownloadHandlers: function(a) {
                    !0;
                    cc.warn("`cc.loader.addDownloadHandlers` is deprecated, please use `cc.assetManager.downloader.register` instead");
                    var b = Object.create(null),
                        c;
                    for (c in a) {
                        var d = a[c];
                        b["." + c] = function(a, b, c) {
                            d({
                                url: a
                            }, c)
                        }
                    }
                    cc.assetManager.downloader.register(b)
                },
                addLoadHandlers: function(a) {
                    !0;
                    cc.warn("`cc.loader.addLoadHandlers` is deprecated, please use `cc.assetManager.parser.register` instead");
                    var b = Object.create(null),
                        c;
                    for (c in a) {
                        var d = a[c];
                        b["." + c] = function(a, b, c) {
                            d({
                                content: a
                            }, c)
                        }
                    }
                    cc.assetManager.parser.register(b)
                },
                flowInDeps: function() {
                    !0;
                    cc.error("cc.loader.flowInDeps was removed")
                },
                release: function(a) {
                    if (Array.isArray(a))
                        for (var b = 0; b < a.length; b++) {
                            var c = a[b];
                            "string" === typeof c && (c = cc.assetManager.assets.get(c));
                            cc.assetManager.builtins._assets.find(function(a) {
                                return a.find(function(a) {
                                    return a ===
                                        c
                                })
                            }) || cc.assetManager.releaseAsset(c)
                        } else a && ("string" === typeof a && (a = cc.assetManager.assets.get(a)), cc.assetManager.builtins._assets.find(function(b) {
                            return b.find(function(b) {
                                return b === a
                            })
                        }) || cc.assetManager.releaseAsset(a))
                },
                releaseAsset: function(a) {
                    cc.assetManager.releaseAsset(a)
                },
                releaseRes: function(a, b) {
                    cc.resources.release(a, b)
                },
                releaseResDir: function() {
                    !0;
                    cc.error("cc.loader.releaseResDir was removed, please use cc.assetManager.releaseAsset instead")
                },
                releaseAll: function() {
                    cc.assetManager.releaseAll();
                    cc.assetManager.assets.clear()
                },
                removeItem: function(a) {
                    cc.assetManager.assets.remove(a)
                },
                setAutoRelease: function(a, b) {
                    "object" === typeof a && (a = a._uuid);
                    this._autoReleaseSetting[a] = !!b
                },
                setAutoReleaseRecursively: function(a, b) {
                    "object" === typeof a && (a = a._uuid);
                    b = !!b;
                    this._autoReleaseSetting[a] = b;
                    a = e.getDepsRecursively(a);
                    for (var c = 0; c < a.length; c++) this._autoReleaseSetting[a[c]] = b
                },
                isAutoRelease: function(a) {
                    "object" === typeof a && (a = a._uuid);
                    return !!this._autoReleaseSetting[a]
                }
            };
        k.loadSubpackage = function(a,
            b) {
            cc.assetManager.loadBundle(a, null, b)
        };
        var u = {
            init: function(a) {
                a.importBase = a.libraryPath;
                a.nativeBase = a.rawAssetsBase;
                cc.assetManager.init(a);
                a.rawAssets && (new cc.AssetManager.Bundle).init({
                    name: cc.AssetManager.BuiltinBundleName.RESOURCES,
                    importBase: a.importBase,
                    nativeBase: a.nativeBase,
                    paths: a.rawAssets.assets,
                    uuids: Object.keys(a.rawAssets.assets)
                })
            },
            loadAsset: function(a, b) {
                cc.assetManager.loadAny(a, b)
            },
            getLibUrlNoExt: function() {
                !0;
                cc.error("cc.AssetLibrary.getLibUrlNoExt was removed, if you want to transform url, please use cc.assetManager.utils.getUrlWithUuid instead")
            },
            queryAssetInfo: function() {
                !0;
                cc.error("cc.AssetLibrary.queryAssetInfo was removed, only available in the editor by using cc.assetManager.editorExtend.queryAssetInfo")
            }
        };
        cc.url = {
            normalize: function(a) {
                cc.warnID(1400, "cc.url.normalize", "cc.assetManager.utils.normalize");
                return cc.assetManager.utils.normalize(a)
            },
            raw: function(a) {
                cc.warnID(1400, "cc.url.raw", "cc.resources.load");
                return a.startsWith("resources/") ? cc.assetManager._transform({
                    path: cc.path.changeExtname(a.substr(10)),
                    bundle: cc.AssetManager.BuiltinBundleName.RESOURCES,
                    __isNative__: !0,
                    ext: cc.path.extname(a)
                }) : ""
            }
        };
        var v = !0,
            p = !0;
        Object.defineProperties(cc, {
            loader: {
                get: function() {
                    !0;
                    v && (v = !1, cc.log("cc.loader is deprecated, use cc.assetManager instead please. See https://docs.cocos.com/creator/2.4/manual/zh/release-notes/asset-manager-upgrade-guide.html"));
                    return n
                }
            },
            AssetLibrary: {
                get: function() {
                    !0;
                    p && (p = !1, cc.log("cc.AssetLibrary is deprecated, use cc.assetManager instead please. See https://docs.cocos.com/creator/manual/zh/release-notes/asset-manager-upgrade-guide.html"));
                    return u
                }
            },
            LoadingItems: {
                get: function() {
                    cc.warnID(1400, "cc.LoadingItems", "cc.AssetManager.Task");
                    return cc.AssetManager.Task
                }
            },
            Pipeline: {
                get: function() {
                    cc.warnID(1400, "cc.Pipeline", "cc.AssetManager.Pipeline");
                    return cc.AssetManager.Pipeline
                }
            }
        });
        q.obsolete(cc, "cc.RawAsset", "cc.Asset");
        q.obsolete(cc.Asset.prototype, "cc.Asset.url", "nativeUrl");
        Object.defineProperties(cc.macro, {
            DOWNLOAD_MAX_CONCURRENT: {
                get: function() {
                    return cc.assetManager.downloader.maxConcurrency
                },
                set: function(a) {
                    cc.assetManager.downloader.maxConcurrency =
                        a
                }
            }
        });
        Object.assign(cc.director, {
            _getSceneUuid: function(a) {
                cc.assetManager.main.getSceneInfo(a)
            }
        });
        Object.defineProperties(cc.game, {
            _sceneInfos: {
                get: function() {
                    var a = [];
                    cc.assetManager.main._config.scenes.forEach(function(b) {
                        a.push(b)
                    });
                    return a
                }
            }
        });
        var t = m.parseParameters;
        m.parseParameters = function(a, b, c) {
            a = t(a, b, c);
            a.onProgress = a.onProgress || n.onProgress;
            return a
        };
        var x = d._autoRelease;
        d._autoRelease = function() {
            x.apply(this, arguments);
            for (var a = n._autoReleaseSetting, b = Object.keys(a), c = 0; c < b.length; c++) {
                var f =
                    b[c];
                !0 === a[f] && (f = cc.assetManager.assets.get(f)) && d.tryRelease(f)
            }
        }
    }, {
        "../CCDirector": 59,
        "../platform/js": 248,
        "./depend-util": 70,
        "./downloader": 77,
        "./factory": 78,
        "./helper": 81,
        "./releaseManager": 88,
        "./utilities": 93
    }],
    72: [function(g, q, m) {
        var h = g("./helper");
        g("../platform/deserialize");
        q.exports = function(e, d) {
            !1;
            var k = cc._MissingScript.safeFindClass;
            !0;
            var c = cc.deserialize.Details.pool;
            var a = c.get();
            try {
                var b = cc.deserialize(e, a, {
                    classFinder: k,
                    customEnv: d
                })
            } catch (n) {
                throw c.put(a), n;
            }!1;
            e = a.uuidList;
            d = a.uuidObjList;
            k = a.uuidPropList;
            for (var l = [], f = 0; f < e.length; f++) l[f] = {
                uuid: h.decodeUuid(e[f]),
                owner: d[f],
                prop: k[f]
            };
            b.__depends__ = l;
            b._native && (b.__nativeDepend__ = !0);
            c.put(a);
            return b
        }
    }, {
        "../platform/deserialize": 243,
        "../platform/deserialize-compiled": 242,
        "../platform/deserialize-editor": void 0,
        "./helper": 81
    }],
    73: [function(g, q, m) {
            var h = cc.sys.__audioSupport,
                e = g("./utilities").parseParameters;
            q.exports = function(d, k, c) {
                var a = e(k, void 0, c);
                k = a.options;
                c = a.onComplete;
                var b = document.createElement("audio");
                b.src = d;
                var l = function() {
                        clearTimeout(f);
                        b.removeEventListener("canplaythrough", n, !1);
                        b.removeEventListener("error", u, !1);
                        h.USE_LOADER_EVENT && b.removeEventListener(h.USE_LOADER_EVENT, n, !1)
                    },
                    f = setTimeout(function() {
                        0 === b.readyState ? u() : n()
                    }, 8E3),
                    n = function() {
                        l();
                        c && c(null, b)
                    },
                    u = function() {
                        l();
                        var a = "load audio failure - " + d;
                        cc.log(a);
                        c && c(Error(a))
                    };
                b.addEventListener("canplaythrough", n, !1);
                b.addEventListener("error", u, !1);
                h.USE_LOADER_EVENT && b.addEventListener(h.USE_LOADER_EVENT, n, !1);
                return b
            }
        },
        {
            "./utilities": 93
        }
    ],
    74: [function(g, q, m) {
        var h = g("./utilities").parseParameters;
        q.exports = function(e, d, k) {
            function c() {
                l.removeEventListener("load", c);
                l.removeEventListener("error", a);
                k && k(null, l)
            }

            function a() {
                l.removeEventListener("load", c);
                l.removeEventListener("error", a);
                k && k(Error(cc.debug.getError(4930, e)))
            }
            var b = h(d, void 0, k);
            d = b.options;
            k = b.onComplete;
            var l = new Image;
            "file:" !== window.location.protocol && (l.crossOrigin = "anonymous");
            l.addEventListener("load", c);
            l.addEventListener("error", a);
            l.src =
                e;
            return l
        }
    }, {
        "./utilities": 93
    }],
    75: [function(g, q, m) {
        var h = g("./utilities").parseParameters;
        q.exports = function(e, d, k, c) {
            var a = h(d, k, c);
            d = a.options;
            k = a.onProgress;
            c = a.onComplete;
            var b = new XMLHttpRequest,
                l = "download failed: " + e + ", status: ";
            b.open("GET", e, !0);
            void 0 !== d.responseType && (b.responseType = d.responseType);
            void 0 !== d.withCredentials && (b.withCredentials = d.withCredentials);
            void 0 !== d.mimeType && b.overrideMimeType && b.overrideMimeType(d.mimeType);
            void 0 !== d.timeout && (b.timeout = d.timeout);
            if (d.header)
                for (var f in d.header) b.setRequestHeader(f,
                    d.header[f]);
            b.onload = function() {
                200 === b.status || 0 === b.status ? c && c(null, b.response) : c && c(Error(l + b.status + "(no response)"))
            };
            k && (b.onprogress = function(a) {
                a.lengthComputable && k(a.loaded, a.total)
            });
            b.onerror = function() {
                c && c(Error(l + b.status + "(error)"))
            };
            b.ontimeout = function() {
                c && c(Error(l + b.status + "(time out)"))
            };
            b.onabort = function() {
                c && c(Error(l + b.status + "(abort)"))
            };
            b.send(null);
            return b
        }
    }, {
        "./utilities": 93
    }],
    76: [function(g, q, m) {
        var h = g("./utilities").parseParameters,
            e = {};
        q.exports = function(d, k, c) {
            function a() {
                f.parentNode.removeChild(f);
                f.removeEventListener("load", a, !1);
                f.removeEventListener("error", b, !1);
                e[d] = !0;
                c && c(null)
            }

            function b() {
                f.parentNode.removeChild(f);
                f.removeEventListener("load", a, !1);
                f.removeEventListener("error", b, !1);
                c && c(Error(cc.debug.getError(4928, d)))
            }
            var l = h(k, void 0, c);
            k = l.options;
            c = l.onComplete;
            if (e[d]) return c && c(null);
            l = document;
            var f = document.createElement("script");
            "file:" !== window.location.protocol && (f.crossOrigin = "anonymous");
            f.async = k.async;
            f.src = d;
            f.addEventListener("load", a, !1);
            f.addEventListener("error",
                b, !1);
            l.body.appendChild(f)
        }
    }, {
        "./utilities": 93
    }],
    77: [function(g, q, m) {
        var h = g("../platform/js"),
            e = g("../CCDebug");
        m = g("./font-loader").loadFont;
        var d = g("../platform/utils").callInNextTick,
            k = g("./download-dom-image"),
            c = g("./download-dom-audio"),
            a = g("./download-file"),
            b = g("./download-script.js"),
            l = g("./cache"),
            f = g("./shared").files,
            n = g("../platform/CCSys"),
            u = n.__audioSupport,
            v = n.capabilities;
        g = g("./utilities");
        var p = g.urlAppendTimestamp,
            t = g.retry,
            x = /^(?:\w+:\/\/|\.+\/).+/;
        n = function(a, b, c) {
            c(Error(e.getError(4927)))
        };
        g = function(a, b, d) {
            b.audioLoadMode !== cc.AudioClip.LoadMode.DOM_AUDIO ? w(a, b, d) : c(a, b, d)
        };
        g = 0 === (u.format || []).length ? n : u.WEB_AUDIO ? g : c;
        u = function(a, b, c) {
            (v.imageBitmap && cc.macro.ALLOW_IMAGE_BITMAP ? z : k).apply(this, arguments)
        };
        var z = function(b, c, d) {
                c.responseType = "blob";
                a(b, c, c.onFileProgress, d)
            },
            E = function(b, c, d) {
                c.responseType = "json";
                a(b, c, c.onFileProgress, function(a, b) {
                    if (!a && "string" === typeof b) try {
                        b = JSON.parse(b)
                    } catch (da) {
                        a = da
                    }
                    d && d(a, b)
                })
            },
            w = function(b, c, d) {
                c.responseType = "arraybuffer";
                a(b, c, c.onFileProgress,
                    d)
            };
        n = function(b, c, d) {
            c.responseType = "text";
            a(b, c, c.onFileProgress, d)
        };
        var A = function(a, b, c) {
                c(null, a)
            },
            B = new l,
            y = [],
            C = !1,
            F = 0,
            G = 0,
            D = -1,
            I = !1,
            K = function() {
                var a = Date.now();
                a - D > 1E3 * (cc.director._deltaTime > R._maxInterval ? R._maxInterval : cc.director._deltaTime) && (G = 0, D = a)
            },
            L = function O(a, b) {
                I = !1;
                for (K(); 0 < y.length && F < a && G < b;) {
                    C && (y.sort(function(a, b) {
                        return a.priority - b.priority
                    }), C = !1);
                    var c = y.pop();
                    if (!c) break;
                    F++;
                    G++;
                    c.invoke()
                }
                0 < y.length && F < a && (d(O, a, b), I = !0)
            },
            R = {
                _remoteServerAddress: "",
                _maxInterval: 1 /
                    30,
                get remoteServerAddress() {
                    return this._remoteServerAddress
                },
                maxConcurrency: 6,
                maxRequestsPerFrame: 6,
                maxRetryCount: 3,
                appendTimeStamp: !1,
                limited: !0,
                retryInterval: 2E3,
                bundleVers: null,
                downloadDomImage: k,
                downloadDomAudio: c,
                downloadFile: a,
                downloadScript: b,
                init: function(a, b) {
                    B.clear();
                    y.length = 0;
                    this._remoteServerAddress = b || "";
                    this.bundleVers = a || Object.create(null)
                },
                register: function(a, b) {
                    "object" === typeof a ? h.mixin(M, a) : M[a] = b
                },
                download: function(a, b, c, l, k) {
                    var n = M[c] || M["default"],
                        e = this;
                    if (c = f.get(a)) k(null,
                        c);
                    else if (c = B.get(a)) {
                        c.push(k);
                        for (var u = 0, v = y.length; u < v; u++)
                            if (c = y[u], c.id === a) {
                                u = l.priority || 0;
                                c.priority < u && (c.priority = u, C = !0);
                                break
                            }
                    } else {
                        var h = "undefined" !== typeof l.maxConcurrency ? l.maxConcurrency : this.maxConcurrency,
                            x = "undefined" !== typeof l.maxRequestsPerFrame ? l.maxRequestsPerFrame : this.maxRequestsPerFrame;
                        t(function(c, f) {
                            function t() {
                                n(p(b), l, function() {
                                    F--;
                                    !I && 0 < y.length && (d(L, h, x), I = !0);
                                    f.apply(this, arguments)
                                })
                            }
                            0 === c && B.add(a, [k]);
                            if (!e.limited) return n(p(b), l, f);
                            K();
                            F < h && G < x ? (t(),
                                F++, G++) : (y.push({
                                id: a,
                                priority: l.priority || 0,
                                invoke: t
                            }), C = !0, !I && F < h && (d(L, h, x), I = !0))
                        }, "undefined" !== typeof l.maxRetryCount ? l.maxRetryCount : this.maxRetryCount, this.retryInterval, function(b, c) {
                            b || f.add(a, c);
                            for (var d = B.remove(a), l = 0, k = d.length; l < k; l++) d[l](b, c)
                        })
                    }
                }
            },
            M = {
                ".png": u,
                ".jpg": u,
                ".bmp": u,
                ".jpeg": u,
                ".gif": u,
                ".ico": u,
                ".tiff": u,
                ".webp": u,
                ".image": u,
                ".pvr": w,
                ".pkm": w,
                ".astc": w,
                ".mp3": g,
                ".ogg": g,
                ".wav": g,
                ".m4a": g,
                ".txt": n,
                ".xml": n,
                ".vsh": n,
                ".fsh": n,
                ".atlas": n,
                ".tmx": n,
                ".tsx": n,
                ".json": E,
                ".ExportJson": E,
                ".plist": n,
                ".fnt": n,
                ".font": m,
                ".eot": m,
                ".ttf": m,
                ".woff": m,
                ".svg": m,
                ".ttc": m,
                ".mp4": A,
                ".avi": A,
                ".mov": A,
                ".mpg": A,
                ".mpeg": A,
                ".rm": A,
                ".rmvb": A,
                ".binary": w,
                ".bin": w,
                ".dbbin": w,
                ".skel": w,
                ".js": b,
                bundle: function(a, c, d) {
                    var f = cc.path.basename(a),
                        l = a;
                    if (l.indexOf("Bundle") != -1) {
                        l = l.replace("fishgames.luckyhands.com", "fishgames.luckyhands.com/games/AladdinAdventurePGD");
                    }
                    x.test(l) || (l = "assets/" + f);
                    a = c.version || R.bundleVers[f];
                    var k = 0,
                        n = null,
                        p = null;
                    E(l + "/config." + (a ? a + "." : "") + "json", c, function(a, b) {
                        a && (p = a);
                        (n = b) && (n.base = l + "/");
                        k++;
                        2 === k && d(p, n)
                    });
                    b(l + "/index." + (a ? a + "." : "") + "js", c, function(a) {
                        a && (p = a);
                        k++;
                        2 === k && d(p, n)
                    })
                },
                default: n
            };
        R._downloaders = M;
        q.exports = R
    }, {
        "../CCDebug": 58,
        "../platform/CCSys": 236,
        "../platform/js": 248,
        "../platform/utils": 251,
        "./cache": 68,
        "./download-dom-audio": 73,
        "./download-dom-image": 74,
        "./download-file": 75,
        "./download-script.js": 76,
        "./font-loader": 80,
        "./shared": 90,
        "./utilities": 93
    }],
    78: [function(g, q, m) {
        function h(a, b, c, d) {
            var f = c = null;
            try {
                c = new cc.Texture2D, c._nativeUrl = a, c._nativeAsset = b
            } catch (w) {
                f = w
            }
            d && d(f, c)
        }

        function e(a, b, c, d) {
            c = new cc.AudioClip;
            c._nativeUrl = a;
            c._nativeAsset = b;
            c.duration = b.duration;
            d && d(null, c)
        }

        function d(a, b, c, d) {
            c = new cc.VideoClip;
            c._nativeUrl = a;
            c._nativeAsset = b;
            d && d(null, c)
        }

        function k(a, b, c, d) {
            a = new cc.JsonAsset;
            a.json = b;
            d && d(null, a)
        }

        function c(a, b, c, d) {
            a = new cc.TextAsset;
            a.text = b;
            d && d(null, a)
        }

        function a(a, b, c, d) {
            c = new cc.TTFFont;
            c._nativeUrl = a;
            c._nativeAsset = b;
            d && d(null, c)
        }

        function b(a, b, c, d) {
            c = new cc.BufferAsset;
            c._nativeUrl = a;
            c._nativeAsset = b;
            d && d(null, c)
        }
        var l = g("./bundle");
        m = g("./cache");
        g = g("./shared");
        var f = g.assets,
            n = g.bundles,
            u = new m,
            v = {
                ".png": h,
                ".jpg": h,
                ".bmp": h,
                ".jpeg": h,
                ".gif": h,
                ".ico": h,
                ".tiff": h,
                ".webp": h,
                ".image": h,
                ".pvr": h,
                ".pkm": h,
                ".astc": h,
                ".mp3": e,
                ".ogg": e,
                ".wav": e,
                ".m4a": e,
                ".mp4": d,
                ".avi": d,
                ".mov": d,
                ".mpg": d,
                ".mpeg": d,
                ".rm": d,
                ".rmvb": d,
                ".txt": c,
                ".xml": c,
                ".vsh": c,
                ".fsh": c,
                ".atlas": c,
                ".tmx": c,
                ".tsx": c,
                ".fnt": c,
                ".json": k,
                ".ExportJson": k,
                ".font": a,
                ".eot": a,
                ".ttf": a,
                ".woff": a,
                ".svg": a,
                ".ttc": a,
                ".binary": b,
                ".bin": b,
                ".dbbin": b,
                ".skel": b,
                bundle: function(a, b, c, d) {
                    c = n.get(b.name);
                    c || (c = new l, b.base = b.base || a + "/", c.init(b));
                    d && d(null, c)
                },
                default: function(a,
                    b, c, d) {
                    c = new cc.Asset;
                    c._nativeUrl = a;
                    c._nativeAsset = b;
                    d && d(null, c)
                }
            };
        q.exports = {
            register: function(a, b) {
                "object" === typeof a ? cc.js.mixin(v, a) : v[a] = b
            },
            create: function(a, b, c, d, l) {
                c = v[c] || v["default"];
                var k;
                (k = f.get(a)) ? l(null, k): (k = u.get(a)) ? k.push(l) : (u.add(a, [l]), c(a, b, d, function(b, c) {
                    !b && c instanceof cc.Asset && (c._uuid = a, f.add(a, c));
                    for (var d = u.remove(a), l = 0, k = d.length; l < k; l++) d[l](b, c)
                }))
            }
        }
    }, {
        "./bundle": 67,
        "./cache": 68,
        "./shared": 90
    }],
    79: [function(g, q, m) {
        function h(a) {
            a = a.output;
            for (var b = 0, c = a.length; b <
                c; b++) a[b].content && a[b].content.decRef(!1)
        }

        function e(a, b, d, f, l, k, e, h) {
            h = b.options.__exclude__;
            var n = b.progress;
            a.content = d;
            a.file = f;
            b.output.push(a);
            l && (h[a.uuid] = !0, c(a.uuid, f || d, h, k, !0, !1, a.config), n.total = e + k.length);
            n.canInvoke && b.dispatch("progress", ++n.finish, n.total, a)
        }
        var d = g("./pack-manager"),
            k = g("./task");
        m = g("./utilities");
        var c = m.getDepends,
            a = m.clear,
            b = m.forEach;
        g = g("./shared");
        var l = g.assets,
            f = g.fetchPipeline;
        q.exports = function(c, u) {
            var n = !1;
            c.progress || (c.progress = {
                finish: 0,
                total: c.input.length,
                canInvoke: !0
            }, n = !0);
            var p = c.options,
                t = [],
                g = c.progress,
                z = g.total;
            p.__exclude__ = p.__exclude__ || Object.create(null);
            c.output = [];
            b(c.input, function(a, b) {
                if (!a.isNative && l.has(a.uuid)) {
                    var f = l.get(a.uuid);
                    f.addRef();
                    e(a, c, f, null, f.__asyncLoadAssets__, t, z, u);
                    return b()
                }
                d.load(a, c.options, function(d, f) {
                    d ? c.isFinish || (!cc.assetManager.force || n ? (cc.error(d.message, d.stack), g.canInvoke = !1, u(d)) : e(a, c, null, null, !1, t, z, u)) : c.isFinish || e(a, c, null, f, !a.isNative, t, z, u);
                    b()
                })
            }, function() {
                if (c.isFinish) return a(c, !0), c.dispatch("error");
                if (0 < t.length) {
                    var b = k.create({
                        name: c.name + " dependencies",
                        input: t,
                        progress: g,
                        options: p,
                        onProgress: c.onProgress,
                        onError: k.prototype.recycle,
                        onComplete: function(a) {
                            a || (c.output.push.apply(c.output, this.output), b.recycle());
                            n && h(c);
                            u(a)
                        }
                    });
                    f.async(b)
                } else n && h(c), u()
            })
        }
    }, {
        "./pack-manager": 84,
        "./shared": 90,
        "./task": 91,
        "./utilities": 93
    }],
    80: [function(g, q, m) {
        function h() {
            for (var c = !0, f = Date.now(), l = b.length - 1; 0 <= l; l--) {
                var p = b[l],
                    t = p.fontFamilyName;
                if (3E3 < f - p.startTime) cc.warnID(4933,
                    t), p.onComplete(null, t), b.splice(l, 1);
                else {
                    var e = p.refWidth,
                        h = "40px " + t;
                    k.font = h;
                    h = d.safeMeasureText(k, "BES bswy:->@123\u4e01\u3041\u1101", h);
                    e !== h ? (b.splice(l, 1), p.onComplete(null, t)) : c = !1
                }
            }
            c && (clearInterval(a), a = -1)
        }

        function e(a, b, c) {
            var d = new Promise(function(c, d) {
                    (function A() {
                        3E3 <= Date.now() - a ? d() : document.fonts.load("40px " + b).then(function(a) {
                            1 <= a.length ? c() : setTimeout(A, 100)
                        }, function() {
                            d()
                        })
                    })()
                }),
                f = null,
                l = new Promise(function(a, b) {
                    f = setTimeout(b, 3E3)
                });
            Promise.race([l, d]).then(function() {
                f &&
                    (clearTimeout(f), f = null);
                c(null, b)
            }, function() {
                cc.warnID(4933, b);
                c(null, b)
            })
        }
        var d = g("../utils/text-utils"),
            k = null,
            c = Object.create(null),
            a = -1,
            b = [],
            l = function() {
                var a = void 0;
                return function() {
                    if (void 0 === a)
                        if (window.FontFace) {
                            var b = /Gecko.*Firefox\/(\d+)/.exec(window.navigator.userAgent),
                                c = /OS X.*Version\/10\..*Safari/.exec(window.navigator.userAgent) && /Apple/.exec(window.navigator.vendor);
                            a = b ? 42 < parseInt(b[1], 10) : !c
                        } else a = !1;
                    return a
                }
            }(),
            f = {
                loadFont: function(n, u, v) {
                    u = f._getFontFamily(n);
                    if (c[u]) return v(null,
                        u);
                    if (!k) {
                        var p = document.createElement("canvas");
                        p.width = 100;
                        p.height = 100;
                        k = p.getContext("2d")
                    }
                    p = "40px " + u;
                    k.font = p;
                    var t = d.safeMeasureText(k, "BES bswy:->@123\u4e01\u3041\u1101", p);
                    p = document.createElement("style");
                    p.type = "text/css";
                    var g = "";
                    isNaN(u - 0) ? g += "@font-face { font-family:" + u + "; src:" : g += "@font-face { font-family:'" + u + "'; src:";
                    p.textContent = g + ("url('" + n + "');") + "}";
                    document.body.appendChild(p);
                    n = document.createElement("div");
                    g = n.style;
                    g.fontFamily = u;
                    n.innerHTML = ".";
                    g.position = "absolute";
                    g.left = "-100px";
                    g.top = "-100px";
                    document.body.appendChild(n);
                    l() ? e(Date.now(), u, v) : (v = {
                        fontFamilyName: u,
                        refWidth: t,
                        onComplete: v,
                        startTime: Date.now()
                    }, b.push(v), -1 === a && (a = setInterval(h, 100)));
                    c[u] = p
                },
                _getFontFamily: function(a) {
                    var b = a.lastIndexOf(".ttf");
                    if (-1 === b) return a;
                    var c = a.lastIndexOf("/");
                    a = -1 === c ? a.substring(0, b) + "_LABEL" : a.substring(c + 1, b) + "_LABEL"; - 1 !== a.indexOf(" ") && (a = '"' + a + '"');
                    return a
                }
            };
        q.exports = f
    }, {
        "../utils/text-utils": 317
    }],
    81: [function(g, q, m) {
        var h = g("./shared").bundles;
        g = {
            decodeUuid: g("../utils/decode-uuid"),
            getUuidFromURL: function() {
                var e = /.*[/\\][0-9a-fA-F]{2}[/\\]([0-9a-fA-F-]{8,})/;
                return function(d) {
                    return (d = d.match(e)) ? d[1] : ""
                }
            }(),
            getUrlWithUuid: function(e, d) {
                d = d || Object.create(null);
                d.__isNative__ = d.isNative;
                d.ext = d.nativeExt;
                var k = h.find(function(c) {
                    return c.getAssetInfo(e)
                });
                k && (d.bundle = k.name);
                return cc.assetManager._transform(e, d)
            },
            isScene: function(e) {
                return e && (e.constructor === cc.SceneAsset || e instanceof cc.Scene)
            },
            normalize: function(e) {
                e && (46 === e.charCodeAt(0) && 47 === e.charCodeAt(1) ? e = e.slice(2) :
                    47 === e.charCodeAt(0) && (e = e.slice(1)));
                return e
            }
        };
        q.exports = g
    }, {
        "../utils/decode-uuid": 305,
        "./shared": 90
    }],
    82: [function(g, q, m) {
        g("./deprecated");
        g("./CCAssetManager")
    }, {
        "./CCAssetManager": 65,
        "./deprecated": 71
    }],
    83: [function(g, q, m) {
        function h(b, d, f, k) {
            var n = b.input,
                e = b.progress,
                u = n.uuid,
                v = n.id,
                h = n.options,
                g = n.config,
                A = h.__asyncLoadAssets__,
                w = h.cacheAsset;
            h = [];
            d.addRef && d.addRef();
            c(u, d, Object.create(null), h, !1, A, g);
            e.canInvoke && b.dispatch("progress", ++e.finish, e.total += h.length, n);
            var B = b.options.__exclude__[u] = {
                    content: d,
                    finish: !1,
                    callbacks: [{
                        done: f,
                        item: n
                    }]
                },
                E = z.create({
                    input: h,
                    options: b.options,
                    onProgress: b.onProgress,
                    onError: z.prototype.recycle,
                    progress: e,
                    onComplete: function(b) {
                        d.decRef && d.decRef(!1);
                        d.__asyncLoadAssets__ = A;
                        B.finish = !0;
                        B.err = b;
                        if (!b) {
                            var c = Array.isArray(E.output) ? E.output : [E.output];
                            for (var f = Object.create(null), n = 0, e = c.length; n < e; n++) {
                                var h = c[n];
                                h && (f[h instanceof cc.Asset ? h._uuid + "@import" : u + "@native"] = h)
                            }
                            if (k) {
                                c = l(u, d, f);
                                if (!c && !d.__onLoadInvoked__) try {
                                    d.onLoad && d.onLoad(), d.__onLoadInvoked__ = !0
                                } catch (N) {
                                    cc.error(N.message, N.stack)
                                }
                                p.remove(v);
                                t.remove(v);
                                a(u, d, void 0 !== w ? w : cc.assetManager.cacheAsset)
                            } else if (d.__nativeDepend__ && !d._nativeAsset && (c = l(u, d, f), !c && !d.__onLoadInvoked__)) try {
                                d.onLoad && d.onLoad(), d.__onLoadInvoked__ = !0
                            } catch (N) {
                                cc.error(N.message, N.stack)
                            }
                            E.recycle()
                        }
                        c = B.callbacks;
                        f = 0;
                        for (n = c.length; f < n; f++) e = c[f], d.addRef && d.addRef(), e.item.content = d, e.done(b);
                        c.length = 0
                    }
                });
            x.async(E)
        }
        var e = g("./pack-manager");
        m = g("./pipeline");
        var d = g("./parser"),
            k = g("./utilities"),
            c = k.getDepends,
            a = k.cache,
            b = k.gatherAsset,
            l = k.setProperties,
            f = k.forEach,
            n = k.clear,
            u = k.checkCircleReference;
        k = g("./shared");
        var v = k.assets,
            p = k.files,
            t = k.parsed,
            x = k.pipeline,
            z = g("./task"),
            E = new m("loadOneAsset", [function(a, b) {
                var c = a.output = a.input,
                    d = c.isNative,
                    f = c.uuid,
                    l = c.options.reload;
                if (c.file || !l && !d && v.has(f)) return b();
                e.load(c, a.options, function(a, d) {
                    c.file = d;
                    b(a)
                })
            }, function(a, b) {
                var c = a.output = a.input,
                    f = a.progress,
                    l = a.options.__exclude__,
                    k = c.id,
                    n = c.file,
                    e = c.options;
                if (c.isNative) d.parse(k, n, c.ext, e, function(d,
                    l) {
                    if (d) return b(d);
                    c.content = l;
                    f.canInvoke && a.dispatch("progress", ++f.finish, f.total, c);
                    p.remove(k);
                    t.remove(k);
                    b()
                });
                else {
                    var g = c.uuid;
                    if (g in l) {
                        var x = l[g];
                        e = x.finish;
                        n = x.content;
                        var A = x.err;
                        x = x.callbacks;
                        f.canInvoke && a.dispatch("progress", ++f.finish, f.total, c);
                        e || u(g, g, l) ? (n && n.addRef && n.addRef(), c.content = n, b(A)) : x.push({
                            done: b,
                            item: c
                        })
                    } else !e.reload && v.has(g) ? (l = v.get(g), e.__asyncLoadAssets__ || !l.__asyncLoadAssets__ ? (c.content = l.addRef(), f.canInvoke && a.dispatch("progress", ++f.finish, f.total,
                        c), b()) : h(a, l, b, !1)) : d.parse(k, n, "import", e, function(c, d) {
                        if (c) return b(c);
                        d._uuid = g;
                        h(a, d, b, !0)
                    })
                }
            }]);
        q.exports = function(a, c) {
            var d = !1;
            a.progress || (a.progress = {
                finish: 0,
                total: a.input.length,
                canInvoke: !0
            }, d = !0);
            var l = a.options,
                k = a.progress;
            l.__exclude__ = l.__exclude__ || Object.create(null);
            a.output = [];
            f(a.input, function(b, f) {
                var n = z.create({
                    input: b,
                    onProgress: a.onProgress,
                    options: l,
                    progress: k,
                    onComplete: function(b, l) {
                        b && !a.isFinish && (!cc.assetManager.force || d ? (!0, cc.error(b.message, b.stack), k.canInvoke = !1, c(b)) : k.canInvoke && a.dispatch("progress", ++k.finish, k.total, l));
                        a.output.push(l);
                        n.recycle();
                        f()
                    }
                });
                E.async(n)
            }, function() {
                l.__exclude__ = null;
                if (a.isFinish) return n(a, !0), a.dispatch("error");
                b(a);
                n(a, !0);
                c()
            })
        }
    }, {
        "./pack-manager": 84,
        "./parser": 85,
        "./pipeline": 86,
        "./shared": 90,
        "./task": 91,
        "./utilities": 93
    }],
    84: [function(g, q, m) {
        function h(b) {
            return a.has(b.uuid)
        }
        var e = g("../platform/deserialize-compiled"),
            d = g("./downloader");
        m = g("./cache");
        var k = g("../platform/js"),
            c = g("./shared").files,
            a = new m,
            b = {
                unpackJson: function(a, b, c, d) {
                    c = k.createMap(!0);
                    var f = null;
                    if (Array.isArray(b)) {
                        b = (0, e.unpackJSONs)(b);
                        b.length !== a.length && cc.errorID(4915);
                        for (var l = 0; l < a.length; l++) c[a[l] + "@import"] = b[l]
                    } else if (l = k._getClassId(cc.Texture2D), b.type === l) {
                        if (b.data) {
                            b = b.data.split("|");
                            b.length !== a.length && cc.errorID(4915);
                            for (var n = 0; n < a.length; n++) c[a[n] + "@import"] = (0, e.packCustomObjData)(l, b[n], !0)
                        }
                    } else f = Error("unmatched type pack!"), c = null;
                    d && d(f, c)
                },
                init: function() {
                    a.clear()
                },
                register: function(a, b) {
                    "object" ===
                    typeof a ? k.mixin(l, a) : l[a] = b
                },
                unpack: function(a, b, c, d, k) {
                    if (b)(0, l[c])(a, b, d, k);
                    else k && k(Error("package data is wrong!"))
                },
                load: function(f, l, k) {
                    if (f.isNative || !f.info || !f.info.packs) return d.download(f.id, f.url, f.ext, f.options, k);
                    if (c.has(f.id)) return k(null, c.get(f.id));
                    l = f.info.packs;
                    var n = l.find(h);
                    if (n) return a.get(n.uuid).push({
                        onComplete: k,
                        id: f.id
                    });
                    n = l[0];
                    a.add(n.uuid, [{
                        onComplete: k,
                        id: f.id
                    }]);
                    var p = cc.assetManager._transform(n.uuid, {
                        ext: n.ext,
                        bundle: f.config.name
                    });
                    d.download(n.uuid, p, n.ext,
                        f.options,
                        function(d, l) {
                            c.remove(n.uuid);
                            d && cc.error(d.message, d.stack);
                            b.unpack(n.packs, l, n.ext, f.options, function(b, d) {
                                if (b) b.message = "unpack " + p + " failed! details: " + b.message;
                                else
                                    for (var f in d) c.add(f, d[f]);
                                f = a.remove(n.uuid);
                                for (var l = 0, k = f.length; l < k; l++) {
                                    var e = f[l];
                                    if (b) e.onComplete(b);
                                    else {
                                        var t = d[e.id];
                                        t ? e.onComplete(null, t) : e.onComplete(Error("can not retrieve data from package"))
                                    }
                                }
                            })
                        })
                }
            },
            l = {
                ".json": b.unpackJson
            };
        q.exports = b
    }, {
        "../platform/deserialize-compiled": 242,
        "../platform/js": 248,
        "./cache": 68,
        "./downloader": 77,
        "./shared": 90
    }],
    85: [function(g, q, m) {
        var h = g("../platform/CCSAXParser").plistParser,
            e = g("../platform/js"),
            d = g("./deserialize");
        m = g("./cache");
        var k = g("./helper").isScene,
            c = g("./shared"),
            a = c.parsed,
            b = c.files;
        g = g("../platform/CCSys");
        var l = g.__audioSupport,
            f = g.capabilities,
            n = new m;
        g = {
            parseImage: function(a, b, c) {
                if (f.imageBitmap && a instanceof Blob) {
                    var d = {};
                    d.imageOrientation = b.__flipY__ ? "flipY" : "none";
                    d.premultiplyAlpha = b.__premultiplyAlpha__ ? "premultiply" : "none";
                    createImageBitmap(a,
                        d).then(function(a) {
                        a.flipY = !!b.__flipY__;
                        a.premultiplyAlpha = !!b.__premultiplyAlpha__;
                        c && c(null, a)
                    }, function(a) {
                        c && c(a, null)
                    })
                } else c && c(null, a)
            },
            parseAudio: function(a, b, c) {
                a instanceof ArrayBuffer ? l.context.decodeAudioData(a, function(a) {
                    c && c(null, a)
                }, function(a) {
                    c && c(a, null)
                }) : c && c(null, a)
            },
            parsePVRTex: function() {
                return function(a, b, c) {
                    var d = b = null;
                    try {
                        var f = a instanceof ArrayBuffer ? a : a.buffer,
                            l = new Int32Array(f, 0, 13);
                        if (55727696 != l[0]) throw Error("Invalid magic number in PVR header");
                        var k = l[7],
                            n = l[6];
                        d = {
                            _data: new Uint8Array(f, l[12] + 52),
                            _compressed: !0,
                            width: k,
                            height: n
                        }
                    } catch (B) {
                        b = B
                    }
                    c && c(b, d)
                }
            }(),
            parsePKMTex: function() {
                return function(a, b, c) {
                    var d = b = null;
                    try {
                        var f = a instanceof ArrayBuffer ? a : a.buffer,
                            l = new Uint8Array(f),
                            k = l[6] << 8 | l[7];
                        if (0 !== k && 1 !== k && 3 !== k) return Error("Invalid magic number in ETC header");
                        var n = l[12] << 8 | l[13],
                            p = l[14] << 8 | l[15];
                        d = {
                            _data: new Uint8Array(f, 16),
                            _compressed: !0,
                            width: n,
                            height: p
                        }
                    } catch (y) {
                        b = y
                    }
                    c && c(b, d)
                }
            }(),
            parseASTCTex: function() {
                return function(a, b, c) {
                    var d = b = null;
                    try {
                        var f = a instanceof ArrayBuffer ? a : a.buffer,
                            l = new Uint8Array(f);
                        if (1554098963 !== l[0] + (l[1] << 8) + (l[2] << 16) + (l[3] << 24)) return Error("Invalid magic number in ASTC header");
                        var k = l[4],
                            n = l[5],
                            p = l[6];
                        if ((3 > k || 6 < k || 3 > n || 6 < n || 3 > p || 6 < p) && (4 > k || 7 === k || 9 === k || 11 === k || 12 < k || 4 > n || 7 === n || 9 === n || 11 === n || 12 < n || 1 !== p)) return Error("Invalid block number in ASTC header");
                        var e = 4 === k ? cc.Texture2D.PixelFormat.RGBA_ASTC_4x4 : 5 === k ? 4 === n ? cc.Texture2D.PixelFormat.RGBA_ASTC_5x4 : cc.Texture2D.PixelFormat.RGBA_ASTC_5x5 : 6 ===
                            k ? 5 === n ? cc.Texture2D.PixelFormat.RGBA_ASTC_6x5 : cc.Texture2D.PixelFormat.RGBA_ASTC_6x6 : 8 === k ? 5 === n ? cc.Texture2D.PixelFormat.RGBA_ASTC_8x5 : 6 === n ? cc.Texture2D.PixelFormat.RGBA_ASTC_8x6 : cc.Texture2D.PixelFormat.RGBA_ASTC_8x8 : 10 === k ? 5 === n ? cc.Texture2D.PixelFormat.RGBA_ASTC_10x5 : 6 === n ? cc.Texture2D.PixelFormat.RGBA_ASTC_10x6 : 8 === n ? cc.Texture2D.PixelFormat.RGBA_ASTC_10x8 : cc.Texture2D.PixelFormat.RGBA_ASTC_10x10 : 10 === n ? cc.Texture2D.PixelFormat.RGBA_ASTC_12x10 : cc.Texture2D.PixelFormat.RGBA_ASTC_12x12,
                            t = l[7] +
                            (l[8] << 8) + (l[9] << 16),
                            u = l[10] + (l[11] << 8) + (l[12] << 16);
                        d = {
                            _data: new Uint8Array(f, 16),
                            _compressed: !0,
                            width: t,
                            height: u,
                            format: e
                        }
                    } catch (G) {
                        b = G
                    }
                    c(b, d)
                }
            }(),
            parsePlist: function(a, b, c) {
                b = null;
                (a = h.parse(a)) || (b = Error("parse failed"));
                c && c(b, a)
            },
            parseImport: function(a, b, c) {
                if (!a) return c && c(Error("Json is empty"));
                var f = null;
                try {
                    var l = d(a, b)
                } catch (E) {
                    f = E
                }
                c && c(f, l)
            },
            init: function() {
                n.clear()
            },
            register: function(a, b) {
                "object" === typeof a ? e.mixin(u, a) : u[a] = b
            },
            parse: function(c, d, f, l, e) {
                var p;
                (p = a.get(c)) ? e(null, p):
                    (p = n.get(c)) ? p.push(e) : (f = u[f]) ? (n.add(c, [e]), f(d, l, function(d, f) {
                        d ? b.remove(c) : k(f) || a.add(c, f);
                        for (var l = n.remove(c), p = 0, e = l.length; p < e; p++) l[p](d, f)
                    })) : e(null, d)
            }
        };
        var u = {
            ".png": g.parseImage,
            ".jpg": g.parseImage,
            ".bmp": g.parseImage,
            ".jpeg": g.parseImage,
            ".gif": g.parseImage,
            ".ico": g.parseImage,
            ".tiff": g.parseImage,
            ".webp": g.parseImage,
            ".image": g.parseImage,
            ".pvr": g.parsePVRTex,
            ".pkm": g.parsePKMTex,
            ".astc": g.parseASTCTex,
            ".mp3": g.parseAudio,
            ".ogg": g.parseAudio,
            ".wav": g.parseAudio,
            ".m4a": g.parseAudio,
            ".plist": g.parsePlist,
            import: g.parseImport
        };
        q.exports = g
    }, {
        "../platform/CCSAXParser": 234,
        "../platform/CCSys": 236,
        "../platform/js": 248,
        "./cache": 68,
        "./deserialize": 72,
        "./helper": 81,
        "./shared": 90
    }],
    86: [function(g, q, m) {
        function h(k, c) {
            if (Array.isArray(c)) {
                this.id = d++;
                this.name = k;
                this.pipes = [];
                k = 0;
                for (var a = c.length; k < a; k++) "function" === typeof c[k] && this.pipes.push(c[k])
            } else cc.warn("funcs must be an array")
        }
        var e = g("./task"),
            d = 0;
        h.prototype = {
            constructor: h,
            insert: function(d, c) {
                if ("function" !== typeof d ||
                    c > this.pipes.length) cc.warnID(4921);
                else return this.pipes.splice(c, 0, d), this
            },
            append: function(d) {
                if ("function" === typeof d) return this.pipes.push(d), this
            },
            remove: function(d) {
                if ("number" === typeof d) return this.pipes.splice(d, 1), this
            },
            sync: function(d) {
                var c = this.pipes;
                if (d instanceof e && 0 !== c.length) {
                    null != d.output && (d.input = d.output, d.output = null);
                    d._isFinish = !1;
                    for (var a = 0, b = c.length; a < b;) {
                        var l = (0, c[a])(d);
                        if (l) return d._isFinish = !0, l;
                        a++;
                        a !== b && (d.input = d.output, d.output = null)
                    }
                    d._isFinish = !0;
                    return d.output
                }
            },
            async: function(d) {
                var c = this.pipes;
                d instanceof e && 0 !== c.length && (null != d.output && (d.input = d.output, d.output = null), d._isFinish = !1, this._flow(0, d))
            },
            _flow: function(d, c) {
                var a = this;
                (0, this.pipes[d])(c, function(b) {
                    b ? (c._isFinish = !0, c.onComplete && c.onComplete(b)) : (d++, d < a.pipes.length ? (c.input = c.output, c.output = null, a._flow(d, c)) : (c._isFinish = !0, c.onComplete && c.onComplete(b, c.output)))
                })
            }
        };
        q.exports = h
    }, {
        "./task": 91
    }],
    87: [function(g, q, m) {
        var h = g("./task");
        g = g("./shared");
        var e = g.transformPipeline,
            d = g.RequestType;
        q.exports = function(k, c) {
            var a = k.options,
                b = Object.create(null),
                l = Object.create(null),
                f;
            for (f in a) switch (f) {
                case d.PATH:
                case d.UUID:
                case d.DIR:
                case d.SCENE:
                case d.URL:
                    break;
                case "__requestType__":
                case "__isNative__":
                case "ext":
                case "type":
                case "__nativeName__":
                case "audioLoadMode":
                case "bundle":
                    b[f] = a[f];
                    break;
                case "__exclude__":
                case "__outputAsArray__":
                    l[f] = a[f];
                    break;
                default:
                    b[f] = a[f], l[f] = a[f]
            }
            k.options = l;
            a = h.create({
                input: k.input,
                options: b
            });
            b = null;
            try {
                k.output = k.source = e.sync(a)
            } catch (n) {
                for (b =
                    n, k = 0, l = a.output.length; k < l; k++) a.output[k].recycle()
            }
            a.recycle();
            c(b)
        }
    }, {
        "./shared": 90,
        "./task": 91
    }],
    88: [function(g, q, m) {
        function h(a, b) {
            for (var c = 0; c < a._components.length; c++)
                for (var d = a._components[c], f = b, l = Object.getOwnPropertyNames(d), k = 0; k < l.length; k++) {
                    var n = l[k];
                    if ("node" !== n && "__eventTargets" !== n && (n = d[n], "object" === typeof n && n))
                        if (Array.isArray(n))
                            for (var p = 0; p < n.length; p++) {
                                var e = n[p];
                                e instanceof cc.Asset && e._uuid && f.push(e._uuid)
                            } else if (n.constructor && n.constructor !== Object) n instanceof
                    cc.Asset && n._uuid && f.push(n._uuid);
                    else
                        for (p = Object.getOwnPropertyNames(n), e = 0; e < p.length; e++) {
                            var u = n[p[e]];
                            u instanceof cc.Asset && u._uuid && f.push(u._uuid)
                        }
                }
            for (c = 0; c < a._children.length; c++) h(a._children[c], b)
        }

        function e(a, b, d, f) {
            d.push(a._uuid);
            a = k.getDeps(a._uuid);
            for (var l = 0, n = a.length; l < n; l++) {
                var p = c.get(a[l]);
                if (p) {
                    var t = p._uuid;
                    t in b ? b[t] += f : b[t] = p.refCount + f;
                    d.includes(t) || e(p, b, d, f)
                }
            }
        }

        function d() {
            n = !1;
            f.forEach(function(a) {
                u._free(a)
            });
            f.clear()
        }
        var k = g("./depend-util");
        m = g("./cache");
        g("../assets/CCAsset");
        var c = g("./shared").assets,
            a = g("../platform/utils").callInNextTick,
            b = [],
            l = new m,
            f = new m,
            n = !1,
            u = {
                init: function() {
                    l.clear();
                    f.clear()
                },
                _addPersistNodeRef: function(a) {
                    var b = [];
                    h(a, b);
                    for (var d = 0, f = b.length; d < f; d++) {
                        var k = c.get(b[d]);
                        k && k.addRef()
                    }
                    l.add(a.uuid, b)
                },
                _removePersistNodeRef: function(a) {
                    if (l.has(a.uuid)) {
                        for (var b = l.get(a.uuid), d = 0, f = b.length; d < f; d++) {
                            var k = c.get(b[d]);
                            k && k.decRef()
                        }
                        l.remove(a.uuid)
                    }
                },
                _autoRelease: function(a, b, d) {
                    if (a) {
                        for (var f = k.getDeps(a._id), n = 0,
                                p = f.length; n < p; n++) {
                            var e = c.get(f[n]);
                            e && e.decRef((!1, a.autoReleaseAssets))
                        }
                        if ((f = k._depends.get(a._id)) && f.persistDeps)
                            for (f = f.persistDeps, n = 0, p = f.length; n < p; n++)(e = c.get(f[n])) && e.decRef((!1, a.autoReleaseAssets));
                        a._id !== b._id && k.remove(a._id)
                    }(a = k._depends.get(b._id)) && (a.persistDeps = []);
                    for (var t in d) {
                        b = l.get(d[t].uuid);
                        f = 0;
                        for (n = b.length; f < n; f++)(p = c.get(b[f])) && p.addRef();
                        a && a.persistDeps.push.apply(a.persistDeps, b)
                    }
                },
                _free: function(a, d) {
                    f.remove(a._uuid);
                    if (cc.isValid(a, !0)) {
                        if (d = !d && 0 < a.refCount) {
                            d =
                                Object.create(null);
                            d[a._uuid] = a.refCount;
                            e(a, d, b, -1);
                            b.length = 0;
                            if (0 === d[a._uuid]) {
                                for (l in d) 0 !== d[l] && e(c.get(l), d, b, 1);
                                b.length = 0
                            }
                            var l = d[a._uuid];
                            d = 0 < l
                        }
                        if (!d) {
                            c.remove(a._uuid);
                            l = k.getDeps(a._uuid);
                            d = 0;
                            for (var n = l.length; d < n; d++) {
                                var p = c.get(l[d]);
                                p && (p.decRef(!1), u._free(p, !1))
                            }
                            a.destroy();
                            k.remove(a._uuid)
                        }
                    }
                },
                tryRelease: function(b, c) {
                    b instanceof cc.Asset && (c ? u._free(b, c) : (f.add(b._uuid, b), n || (n = !0, a(d))))
                }
            };
        q.exports = u
    }, {
        "../assets/CCAsset": 94,
        "../platform/utils": 251,
        "./cache": 68,
        "./depend-util": 70,
        "./shared": 90
    }],
    89: [function(g, q, m) {
        function h() {
            this.url = this.uuid = this._id = "";
            this.ext = ".json";
            this.config = this.info = this.file = this.content = null;
            this.isNative = !1;
            this.options = Object.create(null)
        }
        var e = [];
        h.prototype = {
            constructor: h,
            get id() {
                this._id || (this._id = this.uuid + "@" + (this.isNative ? "native" : "import"));
                return this._id
            },
            recycle: function() {
                500 !== e.length && (this.url = this.uuid = this._id = "", this.ext = ".json", this.config = this.info = this.file = this.content = null, this.isNative = !1, this.options = Object.create(null),
                    e.push(this))
            }
        };
        h.create = function() {
            return 0 !== e.length ? e.pop() : new h
        };
        q.exports = h
    }, {}],
    90: [function(g, q, m) {
            var h = g("./cache"),
                e = g("./pipeline");
            g = new h;
            m = new h;
            var d = new h;
            h = new h;
            var k = new e("normal load", []),
                c = new e("fetch", []);
            e = new e("transform url", []);
            q.exports = {
                assets: g,
                files: m,
                parsed: d,
                pipeline: k,
                fetchPipeline: c,
                transformPipeline: e,
                RequestType: {
                    UUID: "uuid",
                    PATH: "path",
                    DIR: "dir",
                    URL: "url",
                    SCENE: "scene"
                },
                bundles: h,
                BuiltinBundleName: {
                    RESOURCES: "resources",
                    INTERNAL: "internal",
                    MAIN: "main",
                    START_SCENE: "start-scene"
                }
            }
        },
        {
            "./cache": 68,
            "./pipeline": 86
        }
    ],
    91: [function(g, q, m) {
        function h(d) {
            this.id = e++;
            this._isFinish = !0;
            this.options = this.progress = this.input = this.output = this.source = this.onError = this.onProgress = this.onComplete = null;
            this.set(d)
        }
        var e = 0,
            d = [];
        h.prototype = {
            constructor: h,
            set: function(d) {
                d = d || Object.create(null);
                this.onComplete = d.onComplete;
                this.onProgress = d.onProgress;
                this.onError = d.onError;
                this.source = this.input = d.input;
                this.output = null;
                this.progress = d.progress;
                this.options = d.options || Object.create(null)
            },
            dispatch: function(d,
                c, a, b, l) {
                switch (d) {
                    case "complete":
                        this.onComplete && this.onComplete(c, a, b, l);
                        break;
                    case "progress":
                        this.onProgress && this.onProgress(c, a, b, l);
                        break;
                    case "error":
                        this.onError && this.onError(c, a, b, l);
                        break;
                    default:
                        d = "on" + d[0].toUpperCase() + d.substr(1), "function" === typeof this[d] && this[d](c, a, b, l)
                }
            },
            recycle: function() {
                500 !== d.length && (this.options = this.progress = this.source = this.output = this.input = this.onError = this.onProgress = this.onComplete = null, d.push(this))
            },
            get isFinish() {
                return this._isFinish
            }
        };
        h.create =
            function(k) {
                if (0 !== d.length) {
                    var c = d.pop();
                    c.set(k)
                } else c = new h(k);
                return c
            };
        q.exports = h
    }, {}],
    92: [function(g, q, m) {
        var h = g("./helper").decodeUuid,
            e = g("./request-item");
        g = g("./shared");
        var d = g.RequestType,
            k = g.bundles;
        q.exports = {
            parse: function(c) {
                var a, b = c.input,
                    l = c.options;
                b = Array.isArray(b) ? b : [b];
                c.output = [];
                for (var f = 0; f < b.length; f++) {
                    var n = b[f],
                        u = e.create();
                    "string" === typeof n && (n = Object.create(null), n[l.__requestType__ || d.UUID] = b[f]);
                    if ("object" === typeof n) {
                        cc.js.addon(n, l);
                        n.preset && cc.js.addon(n,
                            cc.assetManager.presets[n.preset]);
                        for (var v in n) {
                            switch (v) {
                                case d.UUID:
                                    var p = u.uuid = h(n.uuid);
                                    if (k.has(n.bundle)) {
                                        var t = k.get(n.bundle)._config;
                                        if ((a = t.getAssetInfo(p)) && a.redirect) {
                                            if (!k.has(a.redirect)) throw Error("Please load bundle " + a.redirect + " first");
                                            t = k.get(a.redirect)._config;
                                            a = t.getAssetInfo(p)
                                        }
                                        u.config = t;
                                        u.info = a
                                    }
                                    u.ext = n.ext || ".json";
                                    break;
                                case "__requestType__":
                                case "ext":
                                case "bundle":
                                case "preset":
                                case "type":
                                    break;
                                case d.DIR:
                                    if (k.has(n.bundle)) {
                                        t = [];
                                        k.get(n.bundle)._config.getDirWithPath(n.dir,
                                            n.type, t);
                                        p = 0;
                                        for (var g = t.length; p < g; p++) a = t[p], b.push({
                                            uuid: a.uuid,
                                            __isNative__: !1,
                                            ext: ".json",
                                            bundle: n.bundle
                                        })
                                    }
                                    u.recycle();
                                    u = null;
                                    break;
                                case d.PATH:
                                    if (k.has(n.bundle)) {
                                        t = k.get(n.bundle)._config;
                                        if ((a = t.getInfoWithPath(n.path, n.type)) && a.redirect) {
                                            if (!k.has(a.redirect)) throw Error("you need to load bundle " + a.redirect + " first");
                                            t = k.get(a.redirect)._config;
                                            a = t.getAssetInfo(a.uuid)
                                        }
                                        if (!a) throw u.recycle(), Error("Bundle " + n.bundle + " doesn't contain " + n.path);
                                        u.config = t;
                                        u.uuid = a.uuid;
                                        u.info = a
                                    }
                                    u.ext =
                                        n.ext || ".json";
                                    break;
                                case d.SCENE:
                                    if (k.has(n.bundle)) {
                                        t = k.get(n.bundle)._config;
                                        if ((a = t.getSceneInfo(n.scene)) && a.redirect) {
                                            if (!k.has(a.redirect)) throw Error("you need to load bundle " + a.redirect + " first");
                                            t = k.get(a.redirect)._config;
                                            a = t.getAssetInfo(a.uuid)
                                        }
                                        if (!a) throw u.recycle(), Error("Bundle " + t.name + " doesn't contain scene " + n.scene);
                                        u.config = t;
                                        u.uuid = a.uuid;
                                        u.info = a
                                    }
                                    break;
                                case "__isNative__":
                                    u.isNative = n.__isNative__;
                                    break;
                                case d.URL:
                                    u.url = n.url;
                                    u.uuid = n.uuid || n.url;
                                    u.ext = n.ext || cc.path.extname(n.url);
                                    u.isNative = void 0 === n.__isNative__ || n.__isNative__;
                                    break;
                                default:
                                    u.options[v] = n[v]
                            }
                            if (!u) break
                        }
                    }
                    if (u && (c.output.push(u), !u.uuid && !u.url)) throw Error("Can not parse this input:" + JSON.stringify(n));
                }
                return null
            },
            combine: function(c) {
                c = c.output = c.input;
                for (var a = 0; a < c.length; a++) {
                    var b = c[a];
                    if (!b.url) {
                        var d = b.config;
                        d = b.isNative ? d && d.nativeBase ? d.base + d.nativeBase : cc.assetManager.generalNativeBase : d && d.importBase ? d.base + d.importBase : cc.assetManager.generalImportBase;
                        var f = b.uuid,
                            k = "";
                        b.info && (k = b.isNative ?
                            b.info.nativeVer ? "." + b.info.nativeVer : "" : b.info.ver ? "." + b.info.ver : "");
                        d = ".ttf" === b.ext ? d + "/" + f.slice(0, 2) + "/" + f + k + "/" + b.options.__nativeName__ : d + "/" + f.slice(0, 2) + "/" + f + k + b.ext;
                        b.url = d
                    }
                }
                return null
            }
        }
    }, {
        "./helper": 81,
        "./request-item": 89,
        "./shared": 90
    }],
    93: [function(g, q, m) {
        var h = g("./depend-util");
        m = g("./helper");
        var e = m.isScene,
            d = m.decodeUuid,
            k = g("./shared").assets,
            c = g("../platform/utils").callInNextTick;
        g("../assets/CCAsset");
        var a = {
            processOptions: function(a) {
                !1;
                var b = a.uuids,
                    c = a.paths,
                    k = a.types,
                    e = a.deps,
                    v = a.paths = Object.create(null);
                if (!1 === a.debug) {
                    for (var p = 0, t = b.length; p < t; p++) b[p] = d(b[p]);
                    for (var h in c) p = c[h], p[1] = k[p[1]]
                } else {
                    k = Object.create(null);
                    h = 0;
                    for (p = b.length; h < p; h++) t = b[h], b[h] = k[t] = d(t);
                    b = k
                }
                for (var g in c) v[b[g]] = c[g];
                c = a.scenes;
                for (var E in c) c[E] = b[c[E]];
                E = a.packs;
                for (var w in E)
                    for (c = E[w], v = 0; v < c.length; ++v) c[v] = b[c[v]];
                if (w = a.versions)
                    for (var A in w)
                        for (E = w[A], c = 0; c < E.length; c += 2) v = E[c], E[c] = b[v] || v;
                if (a = a.redirect)
                    for (A = 0; A < a.length; A += 2) a[A] = b[a[A]], a[A + 1] = e[a[A + 1]]
            },
            clear: function(a, c) {
                for (var b = 0, d = a.input.length; b < d; b++) {
                    var l = a.input[b];
                    c && !l.isNative && l.content && l.content.decRef && l.content.decRef(!1);
                    l.recycle()
                }
                a.input = null
            },
            urlAppendTimestamp: function(a) {
                return cc.assetManager.downloader.appendTimeStamp && "string" === typeof a ? /\?/.test(a) ? a + "&_t=" + (new Date - 0) : a + "?_t=" + (new Date - 0) : a
            },
            retry: function(b, c, d, k, e) {
                e = e || 0;
                b(e, function(f, l) {
                    e++;
                    !f || e > c ? k && k(f, l) : setTimeout(function() {
                        a.retry(b, c, d, k, e)
                    }, d)
                })
            },
            getDepends: function(a, c, d, k, e, v, p) {
                try {
                    var b = h.parse(a,
                        c);
                    a = !0;
                    c instanceof cc.Asset && (!c.__nativeDepend__ || c._nativeAsset) && (a = !1);
                    if (e) {
                        v = 0;
                        for (var f = b.deps.length; v < f; v++) {
                            var l = b.deps[v];
                            l in d || (d[l] = !0, k.push({
                                uuid: l,
                                bundle: p && p.name
                            }))
                        }
                        a && b.nativeDep && (p && (b.nativeDep.bundle = p.name), k.push(Object.assign({}, b.nativeDep)))
                    } else {
                        v = (!0, !!c.asyncLoadAssets || v && !b.preventDeferredLoadDependents);
                        f = 0;
                        for (var n = b.deps.length; f < n; f++) {
                            var u = b.deps[f];
                            u in d || (d[u] = !0, k.push({
                                uuid: u,
                                __asyncLoadAssets__: v,
                                bundle: p && p.name
                            }))
                        }
                        a && !v && !b.preventPreloadNativeObject &&
                            b.nativeDep && (p && (b.nativeDep.bundle = p.name), k.push(Object.assign({}, b.nativeDep)))
                    }
                } catch (A) {
                    cc.error(A.message, A.stack)
                }
            },
            cache: function(a, c, d) {
                if (c) {
                    var b = e(c);
                    !b && d && k.add(a, c);
                    b && !1
                }
            },
            setProperties: function(a, c, d) {
                var b = !1,
                    f = c.__depends__;
                if (f) {
                    for (var l = 0, k = f.length; l < k; l++) {
                        var e = f[l],
                            h = d[e.uuid + "@import"];
                        h ? e.owner[e.prop] = h.addRef() : (!1, cc.error("The asset " + e.uuid + " is missing!"), b = !0)
                    }
                    c.__depends__ = void 0
                }
                c.__nativeDepend__ && (c._nativeAsset || (d[a + "@native"] ? c._nativeAsset = d[a + "@native"] :
                    (b = !0, !1)), c.__nativeDepend__ = void 0);
                return b
            },
            gatherAsset: function(a) {
                var b = a.source;
                if (a.options.__outputAsArray__ || 1 !== b.length) {
                    a = a.output = [];
                    for (var c = 0, d = b.length; c < d; c++) a.push(b[c].content)
                } else a.output = b[0].content
            },
            forEach: function(a, c, d) {
                var b = 0,
                    f = [];
                0 === a.length && d && d(f);
                for (var l = 0, k = a.length; l < k; l++) c(a[l], function(a) {
                    a && f.push(a);
                    b++;
                    b === k && d && d(f)
                })
            },
            parseParameters: function(a, c, d) {
                if (void 0 === d) {
                    var b = "function" === typeof a;
                    c ? (d = c, b || (c = null)) : void 0 === c && b && (d = a, c = a = null);
                    void 0 !==
                        c && b && (c = a, a = null)
                }
                a = a || Object.create(null);
                return {
                    options: a,
                    onProgress: c,
                    onComplete: d
                }
            },
            parseLoadResArgs: function(a, c, d) {
                if (void 0 === d) {
                    var b = cc.js.isChildClassOf(a, cc.Asset);
                    c ? (d = c, b && (c = null)) : void 0 !== c || b || (d = a, a = c = null);
                    void 0 === c || b || (c = a, a = null)
                }
                return {
                    type: a,
                    onProgress: c,
                    onComplete: d
                }
            },
            checkCircleReference: function(b, c, d, k) {
                k || (k = Object.create(null));
                if (!d[c] || k[c]) return !1;
                k[c] = !0;
                var f = !1;
                if (c = h.getDeps(c))
                    for (var l = 0, n = c.length; l < n; l++) {
                        var e = c[l];
                        if (e === b || a.checkCircleReference(b, e,
                                d, k)) {
                            f = !0;
                            break
                        }
                    }
                return f
            },
            asyncify: function(a) {
                return function(b, d) {
                    if (a) {
                        var f = [];
                        Array.isArray(d) ? d.forEach(function(a) {
                            return a instanceof cc.Asset && f.push(a.addRef())
                        }) : d instanceof cc.Asset && f.push(d.addRef());
                        c(function() {
                            f.forEach(function(a) {
                                return a.decRef(!1)
                            });
                            a(b, d)
                        })
                    }
                }
            }
        };
        q.exports = a
    }, {
        "../assets/CCAsset": 94,
        "../platform/utils": 251,
        "./depend-util": 70,
        "./helper": 81,
        "./shared": 90
    }],
    94: [function(g, q, m) {
        g = g("../platform/CCObject");
        cc.Asset = cc.Class({
            name: "cc.Asset",
            extends: g,
            ctor: function() {
                Object.defineProperty(this,
                    "_uuid", {
                        value: "",
                        writable: !0
                    });
                this.loaded = !0;
                this._nativeUrl = "";
                this._ref = 0
            },
            properties: {
                nativeUrl: {
                    get: function() {
                        if (!this._nativeUrl && this._native) {
                            var h = this._native;
                            if (47 === h.charCodeAt(0)) return h.slice(1);
                            46 === h.charCodeAt(0) ? this._nativeUrl = cc.assetManager.utils.getUrlWithUuid(this._uuid, {
                                nativeExt: h,
                                isNative: !0
                            }) : this._nativeUrl = cc.assetManager.utils.getUrlWithUuid(this._uuid, {
                                __nativeName__: h,
                                nativeExt: cc.path.extname(h),
                                isNative: !0
                            })
                        }
                        return this._nativeUrl
                    },
                    visible: !1
                },
                refCount: {
                    get: function() {
                        return this._ref
                    }
                },
                _native: "",
                _nativeAsset: {
                    get: function() {
                        return this._$nativeAsset
                    },
                    set: function(h) {
                        this._$nativeAsset = h
                    }
                },
                _nativeDep: {
                    get: function() {
                        if (this._native) return {
                            __isNative__: !0,
                            uuid: this._uuid,
                            ext: this._native
                        }
                    }
                }
            },
            statics: {
                deserialize: !1,
                preventDeferredLoadDependents: !1,
                preventPreloadNativeObject: !1
            },
            toString: function() {
                return this.nativeUrl
            },
            serialize: !1,
            createNode: null,
            _setRawAsset: function(h, e) {
                this._native = !1 !== e ? h || void 0 : "/" + h
            },
            addRef: function() {
                this._ref++;
                return this
            },
            decRef: function(h) {
                0 < this._ref &&
                    this._ref--;
                !1 !== h && cc.assetManager._releaseManager.tryRelease(this);
                return this
            },
            destroy: function() {
                this.loaded = !1;
                return this._super()
            }
        });
        q.exports = cc.Asset
    }, {
        "../platform/CCObject": 233
    }],
    95: [function(g, q, m) {
        m = g("./CCAsset");
        g = g("../event/event-target");
        var h = cc.Enum({
            WEB_AUDIO: 0,
            DOM_AUDIO: 1
        });
        m = cc.Class({
            name: "cc.AudioClip",
            extends: m,
            mixins: [g],
            ctor: function() {
                this.loaded = this._loading = !1;
                this._audio = null
            },
            properties: {
                duration: 0,
                loadMode: {
                    default: h.WEB_AUDIO,
                    type: h
                },
                _nativeAsset: {
                    get: function() {
                        return this._audio
                    },
                    set: function(e) {
                        e instanceof cc.AudioClip ? this._audio = e._nativeAsset : this._audio = e;
                        this._audio && (this.loaded = !0, this.emit("load"))
                    },
                    override: !0
                },
                _nativeDep: {
                    get: function() {
                        return {
                            uuid: this._uuid,
                            audioLoadMode: this.loadMode,
                            ext: cc.path.extname(this._native),
                            __isNative__: !0
                        }
                    },
                    override: !0
                }
            },
            statics: {
                LoadMode: h,
                _loadByUrl: function(e, d) {
                    var k = cc.assetManager.assets.get(e);
                    k ? d(null, k) : cc.assetManager.loadRemote(e, function(c, a) {
                        if (c) return d(c);
                        d(null, a)
                    })
                }
            },
            _ensureLoaded: function(e) {
                if (this.isValid) {
                    if (this.loaded) return e &&
                        e();
                    e && this.once("load", e);
                    if (!this._loading) {
                        this._loading = !0;
                        var d = this;
                        cc.assetManager.postLoadNative(this, function(k) {
                            d._loading = !1
                        })
                    }
                }
            },
            destroy: function() {
                cc.audioEngine.uncache(this);
                this._super()
            }
        });
        cc.AudioClip = m;
        q.exports = m
    }, {
        "../event/event-target": 174,
        "./CCAsset": 94
    }],
    96: [function(g, q, m) {
        var h = function() {
                this.textureID = this.offsetY = this.offsetX = this.h = this.w = this.v = this.u = 0;
                this.valid = !1;
                this.xAdvance = 0
            },
            e = function(d) {
                this._letterDefinitions = {};
                this._texture = d
            };
        e.prototype = {
            constructor: e,
            addLetterDefinitions: function(d, k) {
                this._letterDefinitions[d] = k
            },
            cloneLetterDefinition: function() {
                var d = {},
                    k;
                for (k in this._letterDefinitions) {
                    var c = new h;
                    cc.js.mixin(c, this._letterDefinitions[k]);
                    d[k] = c
                }
                return d
            },
            getTexture: function() {
                return this._texture
            },
            getLetter: function(d) {
                return this._letterDefinitions[d]
            },
            getLetterDefinitionForChar: function(d) {
                d = d.charCodeAt(0);
                return this._letterDefinitions.hasOwnProperty(d) ? this._letterDefinitions[d] : null
            },
            clear: function() {
                this._letterDefinitions = {}
            }
        };
        g =
            cc.Class({
                name: "cc.BitmapFont",
                extends: cc.Font,
                properties: {
                    fntDataStr: {
                        default: ""
                    },
                    spriteFrame: {
                        default: null,
                        type: cc.SpriteFrame
                    },
                    fontSize: {
                        default: -1
                    },
                    _fntConfig: null,
                    _fontDefDictionary: null
                },
                onLoad: function() {
                    var d = this.spriteFrame;
                    this._fontDefDictionary || (this._fontDefDictionary = new e, d && (this._fontDefDictionary._texture = d._texture));
                    if (d = this._fntConfig) {
                        d = d.fontDefDictionary;
                        for (var k in d) {
                            var c = new h,
                                a = d[k].rect;
                            c.offsetX = d[k].xOffset;
                            c.offsetY = d[k].yOffset;
                            c.w = a.width;
                            c.h = a.height;
                            c.u = a.x;
                            c.v = a.y;
                            c.textureID = 0;
                            c.valid = !0;
                            c.xAdvance = d[k].xAdvance;
                            this._fontDefDictionary.addLetterDefinitions(k, c)
                        }
                    }
                }
            });
        cc.BitmapFont = g;
        cc.BitmapFont.FontLetterDefinition = h;
        cc.BitmapFont.FontAtlas = e;
        q.exports = g
    }, {}],
    97: [function(g, q, m) {
            g = cc.Class({
                name: "cc.BufferAsset",
                extends: cc.Asset,
                ctor: function() {
                    this._buffer = null
                },
                properties: {
                    _nativeAsset: {
                        get: function() {
                            return this._buffer
                        },
                        set: function(h) {
                            this._buffer = h.buffer || h
                        },
                        override: !0
                    },
                    buffer: function() {
                        return this._buffer
                    }
                }
            });
            cc.BufferAsset = q.exports = g
        },
        {}
    ],
    98: [function(g, q, m) {
        g = cc.Class({
            name: "cc.Font",
            extends: cc.Asset
        });
        cc.Font = q.exports = g
    }, {}],
    99: [function(g, q, m) {
        g = cc.Class({
            name: "cc.JsonAsset",
            extends: cc.Asset,
            properties: {
                json: null
            }
        });
        q.exports = cc.JsonAsset = g
    }, {}],
    100: [function(g, q, m) {
        g = cc.Class({
            name: "cc.LabelAtlas",
            extends: cc.BitmapFont,
            onLoad: function() {
                this.spriteFrame ? this._fntConfig ? this._super() : cc.warnID(9101, this.name) : cc.warnID(9100, this.name)
            }
        });
        cc.LabelAtlas = g;
        q.exports = g
    }, {}],
    101: [function(g, q, m) {
        var h = cc.Enum({
                AUTO: 0,
                SINGLE_INSTANCE: 1,
                MULTI_INSTANCE: 2
            }),
            e = cc.Class({
                name: "cc.Prefab",
                extends: cc.Asset,
                ctor: function() {
                    this._createFunction = null;
                    this._instantiatedTimes = 0
                },
                properties: {
                    data: null,
                    optimizationPolicy: h.AUTO,
                    asyncLoadAssets: !1,
                    readonly: {
                        default: !1,
                        editorOnly: !0
                    }
                },
                statics: {
                    OptimizationPolicy: h,
                    OptimizationPolicyThreshold: 3
                },
                createNode: !1,
                compileCreateFunction: function() {
                    this._createFunction = g("../platform/instantiate-jit").compile(this.data)
                },
                _doInstantiate: function(d) {
                    this.data._prefab || cc.warnID(3700);
                    this._createFunction ||
                        this.compileCreateFunction();
                    return this._createFunction(d)
                },
                _instantiate: function() {
                    !0;
                    if (this.optimizationPolicy !== h.SINGLE_INSTANCE && (this.optimizationPolicy === h.MULTI_INSTANCE || this._instantiatedTimes + 1 >= e.OptimizationPolicyThreshold)) {
                        var d = this._doInstantiate();
                        this.data._instantiate(d)
                    } else d = this.data._instantiate();
                    ++this._instantiatedTimes;
                    !1;
                    !1;
                    return d
                },
                destroy: function() {
                    this.data && this.data.destroy();
                    this._super()
                }
            });
        cc.Prefab = q.exports = e;
        cc.js.obsolete(cc, "cc._Prefab", "Prefab")
    }, {
        "../platform/instantiate-jit": 246
    }],
    102: [function(g, q, m) {
        var h = function(d) {
                return d && d.__esModule ? d : {
                    default: d
                }
            }(g("../../renderer/gfx")),
            e = g("../renderer");
        g = g("./CCTexture2D");
        m = cc.Enum({
            RB_FMT_D24S8: h["default"].RB_FMT_D24S8,
            RB_FMT_S8: h["default"].RB_FMT_S8,
            RB_FMT_D16: h["default"].RB_FMT_D16
        });
        g = cc.Class({
            name: "cc.RenderTexture",
            extends: g,
            statics: {
                DepthStencilFormat: m
            },
            ctor: function() {
                this._framebuffer = null
            },
            initWithSize: function(d, k, c) {
                this.width = Math.floor(d || cc.visibleRect.width);
                this.height = Math.floor(k || cc.visibleRect.height);
                this._resetUnderlyingMipmaps();
                var a = {
                    colors: [this._texture]
                };
                this._depthStencilBuffer && this._depthStencilBuffer.destroy();
                if (c) {
                    var b = new h["default"].RenderBuffer(e.device, c, d, k);
                    c === h["default"].RB_FMT_D24S8 ? a.depthStencil = b : c === h["default"].RB_FMT_S8 ? a.stencil = b : c === h["default"].RB_FMT_D16 && (a.depth = b)
                }
                this._depthStencilBuffer = b;
                this._framebuffer && this._framebuffer.destroy();
                this._framebuffer = new h["default"].FrameBuffer(e.device, d, k, a);
                this._packable = !1;
                this.loaded = !0;
                this.emit("load")
            },
            updateSize: function(d,
                k) {
                this.width = Math.floor(d || cc.visibleRect.width);
                this.height = Math.floor(k || cc.visibleRect.height);
                this._resetUnderlyingMipmaps();
                var c = this._depthStencilBuffer;
                c && c.update(this.width, this.height);
                this._framebuffer._width = d;
                this._framebuffer._height = k
            },
            drawTextureAt: function(d, k, c) {
                d._image && 0 !== d._image.width && this._texture.updateSubImage({
                    x: k,
                    y: c,
                    image: d._image,
                    width: d.width,
                    height: d.height,
                    level: 0,
                    flipY: !1,
                    premultiplyAlpha: d._premultiplyAlpha
                })
            },
            readPixels: function(d, k, c, a, b) {
                if (!this._framebuffer ||
                    !this._texture) return d;
                k = k || 0;
                c = c || 0;
                a = a || this.width;
                b = b || this.height;
                d = d || new Uint8Array(a * b * 4);
                var l = cc.game._renderContext,
                    f = l.getParameter(l.FRAMEBUFFER_BINDING);
                l.bindFramebuffer(l.FRAMEBUFFER, this._framebuffer.getHandle());
                l.readPixels(k, c, a, b, l.RGBA, l.UNSIGNED_BYTE, d);
                l.bindFramebuffer(l.FRAMEBUFFER, f);
                return d
            },
            destroy: function() {
                this._super();
                this._framebuffer && (this._framebuffer.destroy(), this._framebuffer = null)
            }
        });
        cc.RenderTexture = q.exports = g
    }, {
        "../../renderer/gfx": 358,
        "../renderer": 259,
        "./CCTexture2D": 109
    }],
    103: [function(g, q, m) {
        g = cc.Class({
            name: "cc.SceneAsset",
            extends: cc.Asset,
            properties: {
                scene: null,
                asyncLoadAssets: void 0
            }
        });
        cc.SceneAsset = g;
        q.exports = g
    }, {}],
    104: [function(g, q, m) {
        g = cc.Class({
            name: "cc.Script",
            extends: cc.Asset
        });
        cc._Script = g;
        q = cc.Class({
            name: "cc.JavaScript",
            extends: g
        });
        cc._JavaScript = q;
        g = cc.Class({
            name: "cc.TypeScript",
            extends: g
        });
        cc._TypeScript = g
    }, {}],
    105: [function(g, q, m) {
        g = cc.Class({
            name: "cc.SpriteAtlas",
            extends: cc.Asset,
            properties: {
                _spriteFrames: {
                    default: {}
                }
            },
            getTexture: function() {
                var h =
                    Object.keys(this._spriteFrames);
                return 0 < h.length ? (h = this._spriteFrames[h[0]]) ? h.getTexture() : null : null
            },
            getSpriteFrame: function(h) {
                var e = this._spriteFrames[h];
                if (!e) return null;
                e.name || (e.name = h);
                return e
            },
            getSpriteFrames: function() {
                var h = [],
                    e = this._spriteFrames,
                    d;
                for (d in e) h.push(this.getSpriteFrame(d));
                return h
            }
        });
        cc.SpriteAtlas = g;
        q.exports = g
    }, {}],
    106: [function(g, q, m) {
        var h = g("../event/event-target"),
            e = [{
                u: 0,
                v: 0
            }, {
                u: 0,
                v: 0
            }, {
                u: 0,
                v: 0
            }, {
                u: 0,
                v: 0
            }],
            d = cc.Class({
                name: "cc.SpriteFrame",
                extends: g("../assets/CCAsset"),
                mixins: [h],
                properties: {
                    _textureSetter: {
                        set: function(d) {
                            d && (!1, this._texture !== d && this._refreshTexture(d))
                        }
                    },
                    insetTop: {
                        get: function() {
                            return this._capInsets[1]
                        },
                        set: function(d) {
                            this._capInsets[1] = d;
                            this._texture && this._calculateSlicedUV()
                        }
                    },
                    insetBottom: {
                        get: function() {
                            return this._capInsets[3]
                        },
                        set: function(d) {
                            this._capInsets[3] = d;
                            this._texture && this._calculateSlicedUV()
                        }
                    },
                    insetLeft: {
                        get: function() {
                            return this._capInsets[0]
                        },
                        set: function(d) {
                            this._capInsets[0] = d;
                            this._texture && this._calculateSlicedUV()
                        }
                    },
                    insetRight: {
                        get: function() {
                            return this._capInsets[2]
                        },
                        set: function(d) {
                            this._capInsets[2] = d;
                            this._texture && this._calculateSlicedUV()
                        }
                    }
                },
                ctor: function(d, c, a, b, l) {
                    h.call(this);
                    this._rect = null;
                    this.uv = [];
                    this._originalSize = this._offset = this._original = this._texture = null;
                    this._flipY = this._flipX = this._rotated = !1;
                    this.vertices = null;
                    this._capInsets = [0, 0, 0, 0];
                    this.uvSliced = [];
                    !1;
                    void 0 !== d && this.setTexture(d, c, a, b, l)
                },
                textureLoaded: function() {
                    return this._texture && this._texture.loaded
                },
                onTextureLoaded: function(d,
                    c) {
                    if (!this.textureLoaded()) return this.once("load", d, c), this.ensureLoadTexture(), !1;
                    d.call(c);
                    return !0
                },
                isRotated: function() {
                    return this._rotated
                },
                setRotated: function(d) {
                    this._rotated = d;
                    this._texture && this._calculateUV()
                },
                isFlipX: function() {
                    return this._flipX
                },
                isFlipY: function() {
                    return this._flipY
                },
                setFlipX: function(d) {
                    this._flipX = d;
                    this._texture && this._calculateUV()
                },
                setFlipY: function(d) {
                    this._flipY = d;
                    this._texture && this._calculateUV()
                },
                getRect: function() {
                    return cc.rect(this._rect)
                },
                setRect: function(d) {
                    this._rect =
                        d;
                    this._texture && this._calculateUV()
                },
                getOriginalSize: function() {
                    return cc.size(this._originalSize)
                },
                setOriginalSize: function(d) {
                    this._originalSize ? (this._originalSize.width = d.width, this._originalSize.height = d.height) : this._originalSize = cc.size(d)
                },
                getTexture: function() {
                    return this._texture
                },
                _textureLoadedCallback: function() {
                    var d = this._texture;
                    if (d) {
                        var c = d.width;
                        d = d.height;
                        this._rect ? this._checkRect(this._texture) : this._rect = cc.rect(0, 0, c, d);
                        this._originalSize || (this._originalSize = cc.size(c, d));
                        this._offset || (this._offset = cc.v2(0, 0));
                        this._calculateUV();
                        this.emit("load")
                    }
                },
                _refreshTexture: function(d) {
                    this._texture = d;
                    d.loaded ? this._textureLoadedCallback() : d.once("load", this._textureLoadedCallback, this)
                },
                getOffset: function() {
                    return cc.v2(this._offset)
                },
                setOffset: function(d) {
                    this._offset = cc.v2(d)
                },
                clone: function() {
                    return new d(this._texture, this.getRect(), this._rotated, this.getOffset(), this.getOriginalSize())
                },
                setTexture: function(d, c, a, b, l) {
                    if (1 !== arguments.length || d !== this._texture)
                        if (this._rect =
                            c || null, b ? this.setOffset(b) : this._offset = null, l ? this.setOriginalSize(l) : this._originalSize = null, this._rotated = a || !1, "string" === typeof d) cc.errorID(3401);
                        else return d instanceof cc.Texture2D && this._refreshTexture(d), !0
                },
                ensureLoadTexture: function() {
                    this._texture && !this._texture.loaded && (this._refreshTexture(this._texture), cc.assetManager.postLoadNative(this._texture))
                },
                _checkRect: function(d) {
                    var c = this._rect,
                        a = c.x,
                        b = c.y;
                    this._rotated ? (a += c.height, b += c.width) : (a += c.width, b += c.height);
                    a > d.width && cc.errorID(3300,
                        d.nativeUrl + "/" + this.name, a, d.width);
                    b > d.height && cc.errorID(3400, d.nativeUrl + "/" + this.name, b, d.height)
                },
                _flipXY: function(d) {
                    if (this._flipX) {
                        var c = d[0];
                        d[0] = d[1];
                        d[1] = c;
                        c = d[2];
                        d[2] = d[3];
                        d[3] = c
                    }
                    this._flipY && (c = d[0], d[0] = d[2], d[2] = c, c = d[1], d[1] = d[3], d[3] = c)
                },
                _calculateSlicedUV: function() {
                    var d = this._rect,
                        c = this._texture.width,
                        a = this._texture.height,
                        b = this._capInsets[0],
                        l = d.width - b - this._capInsets[2],
                        f = this._capInsets[1],
                        n = this._capInsets[3],
                        u = d.height - f - n,
                        v = this.uvSliced;
                    v.length = 0;
                    if (this._rotated)
                        for (e[0].u =
                            d.x / c, e[1].u = (d.x + n) / c, e[2].u = (d.x + n + u) / c, e[3].u = (d.x + d.height) / c, e[3].v = d.y / a, e[2].v = (d.y + b) / a, e[1].v = (d.y + b + l) / a, e[0].v = (d.y + d.width) / a, this._flipXY(e), d = 0; 4 > d; ++d)
                            for (c = e[d], a = 0; 4 > a; ++a) v.push({
                                u: c.u,
                                v: e[3 - a].v
                            });
                    else
                        for (e[0].u = d.x / c, e[1].u = (d.x + b) / c, e[2].u = (d.x + b + l) / c, e[3].u = (d.x + d.width) / c, e[3].v = d.y / a, e[2].v = (d.y + f) / a, e[1].v = (d.y + f + u) / a, e[0].v = (d.y + d.height) / a, this._flipXY(e), d = 0; 4 > d; ++d)
                            for (c = e[d], a = 0; 4 > a; ++a) v.push({
                                u: e[a].u,
                                v: c.v
                            })
                },
                _setDynamicAtlasFrame: function(d) {
                    d && (this._original = {
                        _texture: this._texture,
                        _x: this._rect.x,
                        _y: this._rect.y
                    }, this._texture = d.texture, this._rect.x = d.x, this._rect.y = d.y, this._calculateUV())
                },
                _resetDynamicAtlasFrame: function() {
                    this._original && (this._rect.x = this._original._x, this._rect.y = this._original._y, this._texture = this._original._texture, this._original = null, this._texture.loaded ? this._calculateUV() : this.ensureLoadTexture())
                },
                _calculateUV: function() {
                    var d = this._rect,
                        c = this._texture,
                        a = this.uv,
                        b = c.width;
                    c = c.height;
                    if (this._rotated) {
                        var l = 0 === b ? 0 : d.x / b,
                            f = 0 === b ? 0 : (d.x + d.height) /
                            b,
                            n = 0 === c ? 0 : (d.y + d.width) / c;
                        d = 0 === c ? 0 : d.y / c;
                        a[0] = l;
                        a[1] = d;
                        a[2] = l;
                        a[3] = n;
                        a[4] = f;
                        a[5] = d;
                        a[6] = f;
                        a[7] = n
                    } else l = 0 === b ? 0 : d.x / b, f = 0 === b ? 0 : (d.x + d.width) / b, n = 0 === c ? 0 : (d.y + d.height) / c, d = 0 === c ? 0 : d.y / c, a[0] = l, a[1] = n, a[2] = f, a[3] = n, a[4] = l, a[5] = d, a[6] = f, a[7] = d;
                    this._flipX && (d = a[0], a[0] = a[2], a[2] = d, d = a[1], a[1] = a[3], a[3] = d, d = a[4], a[4] = a[6], a[6] = d, d = a[5], a[5] = a[7], a[7] = d);
                    this._flipY && (d = a[0], a[0] = a[4], a[4] = d, d = a[1], a[1] = a[5], a[5] = d, d = a[2], a[2] = a[6], a[6] = d, d = a[3], a[3] = a[7], a[7] = d);
                    if (a = this.vertices)
                        for (a.nu.length =
                            0, d = a.nv.length = 0; d < a.u.length; d++) a.nu[d] = a.u[d] / b, a.nv[d] = a.v[d] / c;
                    this._calculateSlicedUV()
                },
                _serialize: (!1, !1),
                _deserialize: function(d, c) {
                    (c = d.rect) && (this._rect = new cc.Rect(c[0], c[1], c[2], c[3]));
                    d.offset && this.setOffset(new cc.Vec2(d.offset[0], d.offset[1]));
                    d.originalSize && this.setOriginalSize(new cc.Size(d.originalSize[0], d.originalSize[1]));
                    this._rotated = 1 === d.rotated;
                    this._name = d.name;
                    if (c = d.capInsets) this._capInsets[0] = c[0], this._capInsets[1] = c[1], this._capInsets[2] = c[2], this._capInsets[3] =
                        c[3];
                    !1;
                    if (this.vertices = d.vertices) this.vertices.nu = [], this.vertices.nv = [];
                    !1
                }
            });
        g = d.prototype;
        g.copyWithZone = g.clone;
        g.copy = g.clone;
        g.initWithTexture = g.setTexture;
        cc.SpriteFrame = d;
        q.exports = d
    }, {
        "../assets/CCAsset": 94,
        "../event/event-target": 174
    }],
    107: [function(g, q, m) {
        g = g("./CCFont");
        g = cc.Class({
            name: "cc.TTFFont",
            extends: g,
            properties: {
                _fontFamily: null,
                _nativeAsset: {
                    type: cc.String,
                    get: function() {
                        return this._fontFamily
                    },
                    set: function(h) {
                        this._fontFamily = h || "Arial"
                    },
                    override: !0
                },
                _nativeDep: {
                    get: function() {
                        return {
                            uuid: this._uuid,
                            __nativeName__: this._native,
                            ext: cc.path.extname(this._native),
                            __isNative__: !0
                        }
                    },
                    override: !0
                }
            }
        });
        cc.TTFFont = q.exports = g
    }, {
        "./CCFont": 98
    }],
    108: [function(g, q, m) {
        g = cc.Class({
            name: "cc.TextAsset",
            extends: cc.Asset,
            properties: {
                text: ""
            },
            toString: function() {
                return this.text
            }
        });
        q.exports = cc.TextAsset = g
    }, {}],
    109: [function(g, q, m) {
        function h() {
            for (var a in u) u[a] = void 0;
            n.length = 0;
            u.images = n;
            return u
        }
        m = function(a) {
            return a && a.__esModule ? a : {
                default: a
            }
        }(g("../../renderer/gfx"));
        var e = g("../event/event-target"),
            d =
            g("../renderer");
        g("../platform/CCClass");
        var k = new(g("../platform/id-generater"))("Tex"),
            c = 1024,
            a = cc.Enum({
                RGB565: m["default"].TEXTURE_FMT_R5_G6_B5,
                RGB5A1: m["default"].TEXTURE_FMT_R5_G5_B5_A1,
                RGBA4444: m["default"].TEXTURE_FMT_R4_G4_B4_A4,
                RGB888: m["default"].TEXTURE_FMT_RGB8,
                RGBA8888: m["default"].TEXTURE_FMT_RGBA8,
                RGBA32F: m["default"].TEXTURE_FMT_RGBA32F,
                A8: m["default"].TEXTURE_FMT_A8,
                I8: m["default"].TEXTURE_FMT_L8,
                AI8: m["default"].TEXTURE_FMT_L8_A8,
                RGB_PVRTC_2BPPV1: m["default"].TEXTURE_FMT_RGB_PVRTC_2BPPV1,
                RGBA_PVRTC_2BPPV1: m["default"].TEXTURE_FMT_RGBA_PVRTC_2BPPV1,
                RGB_A_PVRTC_2BPPV1: c++,
                RGB_PVRTC_4BPPV1: m["default"].TEXTURE_FMT_RGB_PVRTC_4BPPV1,
                RGBA_PVRTC_4BPPV1: m["default"].TEXTURE_FMT_RGBA_PVRTC_4BPPV1,
                RGB_A_PVRTC_4BPPV1: c++,
                RGB_ETC1: m["default"].TEXTURE_FMT_RGB_ETC1,
                RGBA_ETC1: c++,
                RGB_ETC2: m["default"].TEXTURE_FMT_RGB_ETC2,
                RGBA_ETC2: m["default"].TEXTURE_FMT_RGBA_ETC2,
                RGBA_ASTC_4x4: m["default"].TEXTURE_FMT_RGBA_ASTC_4X4,
                RGBA_ASTC_5x4: m["default"].TEXTURE_FMT_RGBA_ASTC_5X4,
                RGBA_ASTC_5x5: m["default"].TEXTURE_FMT_RGBA_ASTC_5X5,
                RGBA_ASTC_6x5: m["default"].TEXTURE_FMT_RGBA_ASTC_6X5,
                RGBA_ASTC_6x6: m["default"].TEXTURE_FMT_RGBA_ASTC_6X6,
                RGBA_ASTC_8x5: m["default"].TEXTURE_FMT_RGBA_ASTC_8X5,
                RGBA_ASTC_8x6: m["default"].TEXTURE_FMT_RGBA_ASTC_8X6,
                RGBA_ASTC_8x8: m["default"].TEXTURE_FMT_RGBA_ASTC_8X8,
                RGBA_ASTC_10x5: m["default"].TEXTURE_FMT_RGBA_ASTC_10X5,
                RGBA_ASTC_10x6: m["default"].TEXTURE_FMT_RGBA_ASTC_10X6,
                RGBA_ASTC_10x8: m["default"].TEXTURE_FMT_RGBA_ASTC_10X8,
                RGBA_ASTC_10x10: m["default"].TEXTURE_FMT_RGBA_ASTC_10X10,
                RGBA_ASTC_12x10: m["default"].TEXTURE_FMT_RGBA_ASTC_12X10,
                RGBA_ASTC_12x12: m["default"].TEXTURE_FMT_RGBA_ASTC_12X12
            }),
            b = cc.Enum({
                REPEAT: 10497,
                CLAMP_TO_EDGE: 33071,
                MIRRORED_REPEAT: 33648
            }),
            l = cc.Enum({
                LINEAR: 9729,
                NEAREST: 9728
            }),
            f = {
                9728: 0,
                9729: 1
            },
            n = [],
            u = {
                width: void 0,
                height: void 0,
                minFilter: void 0,
                magFilter: void 0,
                wrapS: void 0,
                wrapT: void 0,
                format: void 0,
                genMipmaps: void 0,
                images: void 0,
                image: void 0,
                flipY: void 0,
                premultiplyAlpha: void 0
            },
            v = cc.Class({
                name: "cc.Texture2D",
                extends: g("../assets/CCAsset"),
                mixins: [e],
                properties: {
                    _nativeAsset: {
                        get: function() {
                            return this._image
                        },
                        set: function(a) {
                            a._compressed && a._data ? this.initWithData(a._data, this._format, a.width, a.height) : this.initWithElement(a)
                        },
                        override: !0
                    },
                    _format: a.RGBA8888,
                    _premultiplyAlpha: !1,
                    _flipY: !1,
                    _minFilter: l.LINEAR,
                    _magFilter: l.LINEAR,
                    _mipFilter: l.LINEAR,
                    _wrapS: b.CLAMP_TO_EDGE,
                    _wrapT: b.CLAMP_TO_EDGE,
                    _isAlphaAtlas: !1,
                    _genMipmaps: !1,
                    genMipmaps: {
                        get: function() {
                            return this._genMipmaps
                        },
                        set: function(a) {
                            if (this._genMipmaps !== a) {
                                var b = h();
                                b.genMipmaps = a;
                                this.update(b)
                            }
                        }
                    },
                    _packable: !0,
                    packable: {
                        get: function() {
                            return this._packable
                        },
                        set: function(a) {
                            this._packable = a
                        }
                    },
                    _nativeDep: {
                        get: function() {
                            return {
                                __isNative__: !0,
                                uuid: this._uuid,
                                ext: this._native,
                                __flipY__: this._flipY,
                                __premultiplyAlpha__: this._premultiplyAlpha
                            }
                        },
                        override: !0
                    }
                },
                statics: {
                    PixelFormat: a,
                    WrapMode: b,
                    Filter: l,
                    _FilterIndex: f,
                    extnames: ".png .jpg .jpeg .bmp .webp .pvr .pkm .astc".split(" "),
                    _parseExt: function(b, c) {
                        var d = cc.renderer.device;
                        b = b.split("_");
                        for (var f = "", l = "", k = 999, n = c, e = cc.macro.SUPPORT_TEXTURE_FORMATS, p = 0; p < b.length; p++) {
                            var t = b[p].split("@"),
                                u = t[0];
                            u =
                                v.extnames[u.charCodeAt(0) - 48] || u;
                            var h = e.indexOf(u);
                            if (-1 !== h && h < k) {
                                if (t = t[1] ? parseInt(t[1]) : c, ".astc" !== u || d.ext("WEBGL_compressed_texture_astc"))
                                    if (".pvr" !== u || d.ext("WEBGL_compressed_texture_pvrtc"))
                                        if (t !== a.RGB_ETC1 && t !== a.RGBA_ETC1 || d.ext("WEBGL_compressed_texture_etc1"))
                                            if (t !== a.RGB_ETC2 && t !== a.RGBA_ETC2 || d.ext("WEBGL_compressed_texture_etc"))
                                                if (".webp" !== u || cc.sys.capabilities.webp) k = h, l = u, n = t
                            } else f || (f = u)
                        }
                        return {
                            bestExt: l,
                            bestFormat: n,
                            defaultExt: f
                        }
                    }
                },
                ctor: function() {
                    this._id = k.getNewId();
                    this.loaded = !1;
                    this.height = this.width = 0;
                    this._hashDirty = !0;
                    this._hash = 0;
                    this._texture = null;
                    !1
                },
                getImpl: function() {
                    this._texture || (this._texture = new d.Texture2D(d.device, {}));
                    return this._texture
                },
                getId: function() {
                    return this._id
                },
                toString: function() {
                    return this.nativeUrl || ""
                },
                update: function(a) {
                    if (a) {
                        var b = !1;
                        void 0 !== a.width && (this.width = a.width);
                        void 0 !== a.height && (this.height = a.height);
                        void 0 !== a.minFilter && (this._minFilter = a.minFilter, a.minFilter = f[a.minFilter]);
                        void 0 !== a.magFilter && (this._magFilter =
                            a.magFilter, a.magFilter = f[a.magFilter]);
                        void 0 !== a.mipFilter && (this._mipFilter = a.mipFilter, a.mipFilter = f[a.mipFilter]);
                        void 0 !== a.wrapS && (this._wrapS = a.wrapS);
                        void 0 !== a.wrapT && (this._wrapT = a.wrapT);
                        void 0 !== a.format && (this._format = a.format);
                        void 0 !== a.flipY && (this._flipY = a.flipY, b = !0);
                        void 0 !== a.premultiplyAlpha && (this._premultiplyAlpha = a.premultiplyAlpha, b = !0);
                        void 0 !== a.genMipmaps && (this._genMipmaps = a.genMipmaps);
                        cc.sys.capabilities.imageBitmap && this._image instanceof ImageBitmap ? this._checkImageBitmap(this._upload.bind(this,
                            a, b)) : this._upload(a, b)
                    }
                },
                _upload: function(a, b) {
                    b && this._image && (a.image = this._image);
                    a.images && 0 < a.images.length ? this._image = a.images[0] : void 0 !== a.image && (this._image = a.image, a.images || (n.length = 0, a.images = n), a.images.push(a.image));
                    this._texture && this._texture.update(a);
                    this._hashDirty = !0
                },
                initWithElement: function(a) {
                    if (a)
                        if (this._image = a, a.complete || a instanceof HTMLCanvasElement) this.handleLoadedTexture();
                        else if (cc.sys.capabilities.imageBitmap && a instanceof ImageBitmap) this._checkImageBitmap(this.handleLoadedTexture.bind(this));
                    else {
                        var b = this;
                        a.addEventListener("load", function() {
                            b.handleLoadedTexture()
                        });
                        a.addEventListener("error", function(a) {
                            cc.warnID(3119, a.message)
                        })
                    }
                },
                initWithData: function(a, b, c, l) {
                    var k = h();
                    k.image = a;
                    k.images = [k.image];
                    k.genMipmaps = this._genMipmaps;
                    k.premultiplyAlpha = this._premultiplyAlpha;
                    k.flipY = this._flipY;
                    k.minFilter = f[this._minFilter];
                    k.magFilter = f[this._magFilter];
                    k.wrapS = this._wrapS;
                    k.wrapT = this._wrapT;
                    k.format = this._getGFXPixelFormat(b);
                    k.width = c;
                    k.height = l;
                    this._texture ? this._texture.update(k) :
                        this._texture = new d.Texture2D(d.device, k);
                    this.width = c;
                    this.height = l;
                    this._updateFormat();
                    this._checkPackable();
                    this.loaded = !0;
                    this.emit("load");
                    return !0
                },
                getHtmlElementObj: function() {
                    return this._image
                },
                destroy: function() {
                    cc.sys.capabilities.imageBitmap && this._image instanceof ImageBitmap && this._image.close && this._image.close();
                    this._packable && cc.dynamicAtlasManager && cc.dynamicAtlasManager.deleteAtlasTexture(this);
                    this._image = null;
                    this._texture && this._texture.destroy();
                    this._super()
                },
                getPixelFormat: function() {
                    return this._format
                },
                hasPremultipliedAlpha: function() {
                    return this._premultiplyAlpha || !1
                },
                isAlphaAtlas: function() {
                    return this._isAlphaAtlas
                },
                handleLoadedTexture: function() {
                    if (this._image && this._image.width && this._image.height) {
                        this.width = this._image.width;
                        this.height = this._image.height;
                        var a = h();
                        a.image = this._image;
                        a.images = [a.image];
                        a.width = this.width;
                        a.height = this.height;
                        a.genMipmaps = this._genMipmaps;
                        a.format = this._getGFXPixelFormat(this._format);
                        a.premultiplyAlpha = this._premultiplyAlpha;
                        a.flipY = this._flipY;
                        a.minFilter =
                            f[this._minFilter];
                        a.magFilter = f[this._magFilter];
                        a.wrapS = this._wrapS;
                        a.wrapT = this._wrapT;
                        this._texture ? this._texture.update(a) : this._texture = new d.Texture2D(d.device, a);
                        this._updateFormat();
                        this._checkPackable();
                        this.loaded = !0;
                        this.emit("load");
                        cc.macro.CLEANUP_IMAGE_CACHE && this._cleanupImageCache()
                    }
                },
                _cleanupImageCache: function() {
                    this._image instanceof HTMLImageElement ? this._clearImage() : cc.sys.capabilities.imageBitmap && this._image instanceof ImageBitmap && this._image.close && this._image.close()
                },
                description: function() {
                    return "<cc.Texture2D | Name = " + this.nativeUrl + " | Dimensions = " + this.width + " x " + this.height + ">"
                },
                releaseTexture: function() {
                    this._image = null;
                    this._texture && this._texture.destroy()
                },
                setWrapMode: function(a, b) {
                    if (this._wrapS !== a || this._wrapT !== b) {
                        var c = h();
                        c.wrapS = a;
                        c.wrapT = b;
                        this.update(c)
                    }
                },
                setFilters: function(a, b) {
                    if (this._minFilter !== a || this._magFilter !== b) {
                        var c = h();
                        c.minFilter = a;
                        c.magFilter = b;
                        this.update(c)
                    }
                },
                setFlipY: function(a) {
                    if (this._flipY !== a) {
                        var b = h();
                        b.flipY = a;
                        b.premultiplyAlpha = this._premultiplyAlpha;
                        this.update(b)
                    }
                },
                setPremultiplyAlpha: function(a) {
                    if (this._premultiplyAlpha !== a) {
                        var b = h();
                        b.flipY = this._flipY;
                        b.premultiplyAlpha = a;
                        this.update(b)
                    }
                },
                _updateFormat: function() {
                    this._isAlphaAtlas = this._format === a.RGBA_ETC1 || this._format === a.RGB_A_PVRTC_4BPPV1 || this._format === a.RGB_A_PVRTC_2BPPV1;
                    !1
                },
                _checkPackable: function() {
                    var a = cc.dynamicAtlasManager;
                    if (a)
                        if (this._isCompressed()) this._packable = !1;
                        else {
                            var b = this.width,
                                c = this.height;
                            !this._image || b > a.maxFrameSize ||
                                c > a.maxFrameSize || this._getHash() !== a.Atlas.DEFAULT_HASH ? this._packable = !1 : this._image && this._image instanceof HTMLCanvasElement && (this._packable = !0)
                        }
                },
                _getOpts: function() {
                    var a = h();
                    a.width = this.width;
                    a.height = this.height;
                    a.genMipmaps = this._genMipmaps;
                    a.format = this._format;
                    a.premultiplyAlpha = this._premultiplyAlpha;
                    a.anisotropy = this._anisotropy;
                    a.flipY = this._flipY;
                    a.minFilter = f[this._minFilter];
                    a.magFilter = f[this._magFilter];
                    a.mipFilter = f[this._mipFilter];
                    a.wrapS = this._wrapS;
                    a.wrapT = this._wrapT;
                    return a
                },
                _getGFXPixelFormat: function(b) {
                    b === a.RGBA_ETC1 ? b = a.RGB_ETC1 : b === a.RGB_A_PVRTC_4BPPV1 ? b = a.RGB_PVRTC_4BPPV1 : b === a.RGB_A_PVRTC_2BPPV1 && (b = a.RGB_PVRTC_2BPPV1);
                    return b
                },
                _resetUnderlyingMipmaps: function(a) {
                    var b = this._getOpts();
                    b.images = a || [null];
                    this._texture ? this._texture.update(b) : this._texture = new d.Texture2D(d.device, b)
                },
                _serialize: (!1, !1),
                _deserialize: function(a) {
                    a = a.split(",");
                    var b = a[0];
                    if (b)
                        if (b = v._parseExt(b, this._format), b.bestExt) this._setRawAsset(b.bestExt), this._format = b.bestFormat;
                        else {
                            if (!b.defaultExt) throw Error(cc.debug.getError(3121));
                            this._setRawAsset(b.defaultExt);
                            cc.warnID(3120, b.defaultExt, b.defaultExt)
                        }
                    8 === a.length && (this._minFilter = parseInt(a[1]), this._magFilter = parseInt(a[2]), this._wrapS = parseInt(a[3]), this._wrapT = parseInt(a[4]), this._premultiplyAlpha = 49 === a[5].charCodeAt(0), this._genMipmaps = 49 === a[6].charCodeAt(0), this._packable = 49 === a[7].charCodeAt(0))
                },
                _getHash: function() {
                    if (!this._hashDirty) return this._hash;
                    var a = this._genMipmaps ? 1 : 0,
                        c = this._premultiplyAlpha ? 1 : 0,
                        d = this._flipY ? 1 : 0,
                        f = this._minFilter === l.LINEAR ? 1 : 2,
                        k =
                        this._magFilter === l.LINEAR ? 1 : 2,
                        n = this._wrapS === b.REPEAT ? 1 : this._wrapS === b.CLAMP_TO_EDGE ? 2 : 3,
                        e = this._wrapT === b.REPEAT ? 1 : this._wrapT === b.CLAMP_TO_EDGE ? 2 : 3,
                        u = this._format;
                    !1;
                    this._hash = Number("" + f + k + u + n + e + a + c + d);
                    this._hashDirty = !1;
                    return this._hash
                },
                _isCompressed: function() {
                    return this._format < a.A8 || this._format > a.RGBA32F
                },
                _clearImage: function() {
                    this._image.src = ""
                },
                _checkImageBitmap: function(a) {
                    var b = this,
                        c = this._image,
                        d = this._flipY,
                        f = this._premultiplyAlpha;
                    this._flipY !== c.flipY || this._premultiplyAlpha !==
                        c.premultiplyAlpha ? createImageBitmap(c, {
                            imageOrientation: d !== c.flipY ? "flipY" : "none",
                            premultiplyAlpha: f ? "premultiply" : "none"
                        }).then(function(l) {
                            c.close && c.close();
                            l.flipY = d;
                            l.premultiplyAlpha = f;
                            b._image = l;
                            a()
                        }, function(a) {
                            cc.error(a.message)
                        }) : a()
                }
            });
        cc.Texture2D = q.exports = v
    }, {
        "../../renderer/gfx": 358,
        "../assets/CCAsset": 94,
        "../event/event-target": 174,
        "../platform/CCClass": 227,
        "../platform/id-generater": 244,
        "../renderer": 259
    }],
    110: [function(g, q, m) {
        m = g("./CCAsset");
        g = g("../event/event-target");
        g = cc.Class({
            name: "cc.VideoClip",
            extends: m,
            mixins: [g]
        });
        cc.VideoClip = g;
        q.exports = g
    }, {
        "../event/event-target": 174,
        "./CCAsset": 94
    }],
    111: [function(g, q, m) {
        g("./CCAsset");
        g("./CCFont");
        g("./CCPrefab");
        g("./CCAudioClip");
        g("./CCVideoClip");
        g("./CCScripts");
        g("./CCSceneAsset");
        g("./CCSpriteFrame");
        g("./CCTexture2D");
        g("./CCRenderTexture");
        g("./CCTTFFont");
        g("./CCSpriteAtlas");
        g("./CCBitmapFont");
        g("./CCLabelAtlas");
        g("./CCTextAsset");
        g("./CCJsonAsset");
        g("./CCBufferAsset");
        g("./material")
    }, {
        "./CCAsset": 94,
        "./CCAudioClip": 95,
        "./CCBitmapFont": 96,
        "./CCBufferAsset": 97,
        "./CCFont": 98,
        "./CCJsonAsset": 99,
        "./CCLabelAtlas": 100,
        "./CCPrefab": 101,
        "./CCRenderTexture": 102,
        "./CCSceneAsset": 103,
        "./CCScripts": 104,
        "./CCSpriteAtlas": 105,
        "./CCSpriteFrame": 106,
        "./CCTTFFont": 107,
        "./CCTextAsset": 108,
        "./CCTexture2D": 109,
        "./CCVideoClip": 110,
        "./material": 118
    }],
    112: [function(g, q, m) {
        m = function(e) {
            return e && e.__esModule ? e : {
                default: e
            }
        }(g("../CCAsset"));
        var h = g("./effect-parser");
        g = cc.Class({
            name: "cc.EffectAsset",
            extends: m["default"],
            ctor: function() {
                this._effect = null
            },
            properties: {
                properties: Object,
                techniques: [],
                shaders: []
            },
            onLoad: function() {
                if (cc.game.renderType !== cc.game.RENDER_TYPE_CANVAS) {
                    for (var e = cc.renderer._forward._programLib, d = 0; d < this.shaders.length; d++) e.define(this.shaders[d]);
                    this._initEffect()
                }
            },
            _initEffect: function() {
                this._effect || (this._effect = (0, h.parseEffect)(this), Object.freeze(this._effect))
            },
            getInstantiatedEffect: function() {
                this._initEffect();
                return this._effect.clone()
            },
            getEffect: function() {
                this._initEffect();
                return this._effect
            }
        });
        q.exports =
            cc.EffectAsset = g
    }, {
        "../CCAsset": 94,
        "./effect-parser": 115
    }],
    113: [function(g, q, m) {
        m.__esModule = !0;
        m["default"] = void 0;
        var h = g("../CCAsset"),
            e = g("../CCTexture2D"),
            d = g("./CCEffectAsset");
        g("../../utils/texture-util");
        var k = cc.gfx;
        g = cc.Enum({
            SPRITE: "2d-sprite",
            GRAY_SPRITE: "2d-gray-sprite",
            UNLIT: "unlit"
        });
        var c = cc.Class({
            name: "cc.Material",
            extends: h,
            ctor: function() {
                this._manualHash = this.loaded = !1;
                this._dirty = !0;
                this._effect = null
            },
            properties: {
                _defines: {
                    default: void 0,
                    type: Object
                },
                _props: {
                    default: void 0,
                    type: Object
                },
                _effectAsset: {
                    type: d,
                    default: null
                },
                _techniqueIndex: 0,
                _techniqueData: Object,
                effectName: void 0,
                effectAsset: {
                    get: function() {
                        return this._effectAsset
                    },
                    set: function(a) {
                        cc.game.renderType !== cc.game.RENDER_TYPE_CANVAS && ((this._effectAsset = a) ? this._effect = this._effectAsset.getInstantiatedEffect() : cc.error("Can not set an empty effect asset."))
                    }
                },
                effect: {
                    get: function() {
                        return this._effect
                    }
                },
                techniqueIndex: {
                    get: function() {
                        return this._techniqueIndex
                    },
                    set: function(a) {
                        this._techniqueIndex = a;
                        this._effect.switchTechnique(a)
                    }
                }
            },
            statics: {
                getBuiltinMaterial: function(a) {
                    return cc.game.renderType === cc.game.RENDER_TYPE_CANVAS ? new cc.Material : cc.assetManager.builtins.getBuiltin("material", "builtin-" + a)
                },
                BUILTIN_NAME: g,
                createWithBuiltin: function(a, b) {
                    void 0 === b && (b = 0);
                    a = cc.assetManager.builtins.getBuiltin("effect", "builtin-" + a);
                    return c.create(a, b)
                },
                create: function(a, b) {
                    void 0 === b && (b = 0);
                    if (!a) return null;
                    var d = new c;
                    d.effectAsset = a;
                    d.techniqueIndex = b;
                    return d
                }
            },
            setProperty: function(a, b, c, d) {
                if (cc.game.renderType !== cc.game.RENDER_TYPE_CANVAS) {
                    "string" ===
                    typeof c && (c = parseInt(c));
                    if (b instanceof e) {
                        var f = b.isAlphaAtlas(),
                            l = "CC_USE_ALPHA_ATLAS_" + a,
                            k = this.getDefine(l, c);
                        (f || k) && this.define(l, f);
                        b.loaded || cc.assetManager.postLoadNative(b)
                    }
                    this._effect.setProperty(a, b, c, d)
                }
            },
            getProperty: function(a, b) {
                "string" === typeof b && (b = parseInt(b));
                return this._effect.getProperty(a, b)
            },
            define: function(a, b, c, d) {
                cc.game.renderType !== cc.game.RENDER_TYPE_CANVAS && ("string" === typeof c && (c = parseInt(c)), this._effect.define(a, b, c, d))
            },
            getDefine: function(a, b) {
                "string" === typeof b &&
                    (b = parseInt(b));
                return this._effect.getDefine(a, b)
            },
            setCullMode: function(a, b) {
                void 0 === a && (a = k.CULL_BACK);
                this._effect.setCullMode(a, b)
            },
            setDepth: function(a, b, c, d) {
                void 0 === a && (a = !1);
                void 0 === b && (b = !1);
                void 0 === c && (c = k.DS_FUNC_LESS);
                this._effect.setDepth(a, b, c, d)
            },
            setBlend: function(a, b, c, d, n, e, v, p, t) {
                void 0 === a && (a = !1);
                void 0 === b && (b = k.BLEND_FUNC_ADD);
                void 0 === c && (c = k.BLEND_SRC_ALPHA);
                void 0 === d && (d = k.BLEND_ONE_MINUS_SRC_ALPHA);
                void 0 === n && (n = k.BLEND_FUNC_ADD);
                void 0 === e && (e = k.BLEND_SRC_ALPHA);
                void 0 ===
                    v && (v = k.BLEND_ONE_MINUS_SRC_ALPHA);
                void 0 === p && (p = 4294967295);
                this._effect.setBlend(a, b, c, d, n, e, v, p, t)
            },
            setStencilEnabled: function(a, b) {
                void 0 === a && (a = k.STENCIL_INHERIT);
                this._effect.setStencilEnabled(a, b)
            },
            setStencil: function(a, b, c, d, n, e, v, p, t) {
                void 0 === a && (a = k.STENCIL_INHERIT);
                void 0 === b && (b = k.DS_FUNC_ALWAYS);
                void 0 === c && (c = 0);
                void 0 === d && (d = 255);
                void 0 === n && (n = k.STENCIL_OP_KEEP);
                void 0 === e && (e = k.STENCIL_OP_KEEP);
                void 0 === v && (v = k.STENCIL_OP_KEEP);
                void 0 === p && (p = 255);
                this._effect.setStencil(a, b,
                    c, d, n, e, v, p, t)
            },
            updateHash: function(a) {
                this._manualHash = a;
                this._effect && this._effect.updateHash(a)
            },
            getHash: function() {
                return this._manualHash || this._effect && this._effect.getHash()
            },
            onLoad: function() {
                this.effectAsset = this._effectAsset;
                if (this._effect) {
                    this._techniqueIndex && this._effect.switchTechnique(this._techniqueIndex);
                    var a = this._techniqueData = this._techniqueData || {};
                    for (b in a) {
                        var b = parseInt(b);
                        var c = a[b];
                        if (c) {
                            for (var d in c.defines) this.define(d, c.defines[d], b);
                            for (var k in c.props) this.setProperty(k,
                                c.props[k], b)
                        }
                    }
                }
            }
        });
        m["default"] = c;
        cc.Material = c;
        q.exports = m["default"]
    }, {
        "../../utils/texture-util": 318,
        "../CCAsset": 94,
        "../CCTexture2D": 109,
        "./CCEffectAsset": 112
    }],
    114: [function(g, q, m) {
        function h(a) {
            return a && a.__esModule ? a : {
                default: a
            }
        }

        function e(a, b) {
            for (var c = 0; c < b.length; c++) {
                var d = b[c];
                d.enumerable = d.enumerable || !1;
                d.configurable = !0;
                "value" in d && (d.writable = !0);
                Object.defineProperty(a, k(d.key), d)
            }
        }

        function d(a, b, c) {
            b && e(a.prototype, b);
            c && e(a, c);
            Object.defineProperty(a, "prototype", {
                writable: !1
            });
            return a
        }

        function k(a) {
            a: if ("object" === typeof a && null !== a) {
                $jscomp.initSymbol();
                var b = a[Symbol.toPrimitive];
                if (void 0 !== b) {
                    a = b.call(a, "string");
                    if ("object" !== typeof a) break a;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                a = String(a)
            }return "symbol" === typeof a ? a : String(a)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var c = h(g("../../../renderer/core/pass")),
            a = h(g("../../../renderer/enums")),
            b = cc.gfx;
        g = function() {
            function l() {
                this._dirty = !0;
                this._name = "";
                this._technique = null
            }
            var f = l.prototype;
            f._createPassProp = function(a, b) {
                var c = b._properties[a];
                if (c) {
                    var d = Object.create(null);
                    d.name = a;
                    d.type = c.type;
                    c.value instanceof Float32Array ? d.value = new Float32Array(c.value) : c.value instanceof Float64Array ? d.value = new Float64Array(c.value) : d.value = c.value;
                    return b._properties[a] = d
                }
            };
            f._setPassProperty = function(b, d, f, l) {
                var k = f._properties;
                k.hasOwnProperty(b) || this._createPassProp(b, f);
                k = k[b];
                var n = d;
                k.type === a["default"].PARAM_TEXTURE_2D && (n = d && d.getImpl());
                if (k.value === n) return !0;
                this._dirty = !0;
                return c["default"].prototype.setProperty.call(f, b, d, l)
            };
            f.setProperty = function(a, b, c, d) {
                var f = !1,
                    l = this.passes,
                    k = 0,
                    n = l.length;
                void 0 !== c && (k = c, n = c + 1);
                for (c = k; c < n; c++) this._setPassProperty(a, b, l[c], d) && (f = !0);
                f || cc.warnID(9103, this.name, a)
            };
            f.getProperty = function(a, b) {
                var c = this.passes;
                if (!(b >= c.length)) {
                    var d = 0,
                        f = c.length;
                    void 0 !== b && (d = b, f = b + 1);
                    for (b = d; b < f; b++)
                        if (d = c[b].getProperty(a), void 0 !== d) return d
                }
            };
            f.define = function(a, b, c, d) {
                var f = !1,
                    l = this.passes,
                    k = 0,
                    n = l.length;
                void 0 !== c && (k = c, n = c + 1);
                for (c = k; c < n; c++) l[c].define(a, b, d) && (f = !0);
                f || cc.warnID(9104, this.name, a)
            };
            f.getDefine = function(a, b) {
                var c = this.passes;
                if (!(b >= c.length)) {
                    var d = 0,
                        f = c.length;
                    void 0 !== b && (d = b, f = b + 1);
                    for (b = d; b < f; b++)
                        if (d = c[b].getDefine(a), void 0 !== d) return d
                }
            };
            f.setCullMode = function(a, c) {
                void 0 === a && (a = b.CULL_BACK);
                var d = this.passes,
                    f = 0,
                    l = d.length;
                void 0 !== c && (f = c, l = c + 1);
                for (c = f; c < l; c++) d[c].setCullMode(a);
                this._dirty = !0
            };
            f.setDepth = function(a, b, c, d) {
                var f = this.passes,
                    l = 0,
                    k = f.length;
                void 0 !== d && (l = d, k = d + 1);
                for (d = l; d <
                    k; d++) f[d].setDepth(a, b, c);
                this._dirty = !0
            };
            f.setBlend = function(a, b, c, d, f, l, k, e, h) {
                var n = this.passes,
                    p = 0,
                    t = n.length;
                void 0 !== h && (p = h, t = h + 1);
                for (h = p; h < t; h++) n[h].setBlend(a, b, c, d, f, l, k, e);
                this._dirty = !0
            };
            f.setStencilEnabled = function(a, c) {
                void 0 === a && (a = b.STENCIL_INHERIT);
                var d = this.passes,
                    f = 0,
                    l = d.length;
                void 0 !== c && (f = c, l = c + 1);
                for (c = f; c < l; c++) d[c].setStencilEnabled(a);
                this._dirty = !0
            };
            f.setStencil = function(a, b, c, d, f, l, k, e, h) {
                var n = this.passes,
                    p = 0,
                    t = n.length;
                void 0 !== h && (p = h, t = h + 1);
                for (h = p; h < t; h++) p =
                    n[h], p.setStencilFront(a, b, c, d, f, l, k, e), p.setStencilBack(a, b, c, d, f, l, k, e);
                this._dirty = !0
            };
            d(l, [{
                key: "name",
                get: function() {
                    return this._name
                }
            }, {
                key: "technique",
                get: function() {
                    return this._technique
                }
            }, {
                key: "passes",
                get: function() {
                    return []
                }
            }]);
            return l
        }();
        m["default"] = g;
        cc.EffectBase = g;
        q.exports = m["default"]
    }, {
        "../../../renderer/core/pass": 349,
        "../../../renderer/enums": 353
    }],
    115: [function(g, q, m) {
        function h(a) {
            return a && a.__esModule ? a : {
                default: a
            }
        }

        function e(b, d) {
            var f = d.properties || {},
                l = cc.renderer._forward._programLib.getTemplate(d.program);
            d = function(a) {
                if (!l.uniforms.find(function(b) {
                        return b.name === a
                    })) return cc.warnID(9107, b.name, a), "continue"
            };
            for (var k in f) d(k);
            var n = {};
            l.uniforms.forEach(function(b) {
                var d = b.name,
                    l = n[d] = Object.assign({}, b);
                b = (d = f[d]) ? d.type === a["default"].PARAM_TEXTURE_2D ? null : d.type === a["default"].PARAM_INT || d.type === a["default"].PARAM_FLOAT ? Array.isArray(d.value) ? d.value[0] : d.value : new Float32Array(d.value) : c.enums2default[b.type];
                void 0 === b && (b = null);
                l.value = b
            });
            return n
        }

        function d(a) {
            var b = {};
            cc.renderer._forward._programLib.getTemplate(a.program).defines.forEach(function(a) {
                b[a.name] =
                    c.enums2default[a.type]
            });
            return b
        }
        m.__esModule = !0;
        m.parseEffect = function(a) {
            for (var c = a.techniques.length, f = Array(c), h = 0; h < c; ++h) {
                for (var p = a.techniques[h], t = p.name || h, g = p.passes.length, z = Array(g), E = 0; E < g; ++E) {
                    var w = p.passes[E],
                        A = w.name || E,
                        B = a.name + "-" + t + "-" + A,
                        y = w.stage || "opaque",
                        C = e(a, w),
                        m = d(w);
                    A = z[E] = new k["default"](A, B, w.program, y, C, m);
                    w.rasterizerState && A.setCullMode(w.rasterizerState.cullMode);
                    (B = w.blendState && w.blendState.targets[0]) && A.setBlend(B.blend, B.blendEq, B.blendSrc, B.blendDst, B.blendAlphaEq,
                        B.blendSrcAlpha, B.blendDstAlpha, B.blendColor);
                    if (w = w.depthStencilState) A.setDepth(w.depthTest, w.depthWrite, w.depthFunc), A.setStencilFront(w.stencilTest, w.stencilFuncFront, w.stencilRefFront, w.stencilMaskFront, w.stencilFailOpFront, w.stencilZFailOpFront, w.stencilZPassOpFront, w.stencilWriteMaskFront), A.setStencilBack(w.stencilTest, w.stencilFuncBack, w.stencilRefBack, w.stencilMaskBack, w.stencilFailOpBack, w.stencilZFailOpBack, w.stencilZPassOpBack, w.stencilWriteMaskBack)
                }
                f[h] = new l["default"](t, z)
            }
            return new b["default"](a.name,
                f, 0, a)
        };
        var k = h(g("../../../renderer/core/pass")),
            c = g("../../../renderer/types"),
            a = h(g("../../../renderer/enums")),
            b = h(g("./effect")),
            l = h(g("../../../renderer/core/technique"));
        !1
    }, {
        "../../../renderer/core/pass": 349,
        "../../../renderer/core/technique": 351,
        "../../../renderer/enums": 353,
        "../../../renderer/types": 382,
        "./effect": 117
    }],
    116: [function(g, q, m) {
        function h(a) {
            return a && a.__esModule ? a : {
                default: a
            }
        }

        function e(a, b) {
            for (var c = 0; c < b.length; c++) {
                var d = b[c];
                d.enumerable = d.enumerable || !1;
                d.configurable = !0;
                "value" in d && (d.writable = !0);
                Object.defineProperty(a, k(d.key), d)
            }
        }

        function d(a, b, c) {
            b && e(a.prototype, b);
            c && e(a, c);
            Object.defineProperty(a, "prototype", {
                writable: !1
            });
            return a
        }

        function k(a) {
            a: if ("object" === typeof a && null !== a) {
                $jscomp.initSymbol();
                var b = a[Symbol.toPrimitive];
                if (void 0 !== b) {
                    a = b.call(a, "string");
                    if ("object" !== typeof a) break a;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                a = String(a)
            }return "symbol" === typeof a ? a : String(a)
        }

        function c(b, c) {
            b.prototype = Object.create(c.prototype);
            b.prototype.constructor = b;
            a(b, c)
        }

        function a(b, c) {
            a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(a, b) {
                a.__proto__ = b;
                return a
            };
            return a(b, c)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var b = h(g("../../../renderer/murmurhash2_gc")),
            l = h(g("./utils"));
        g = function(a) {
            function f(b) {
                var c = a.call(this) || this;
                c._effect = void 0;
                c._passes = [];
                c._stagePasses = {};
                c._hash = 0;
                c.init(b);
                return c
            }
            c(f, a);
            var k = f.prototype;
            k._onEffectChanged = function() {};
            k.init = function(a) {
                a instanceof f && (a = a.effect);
                this._effect =
                    a;
                this._dirty = !0;
                if (a) {
                    a = a.passes;
                    var b = this._passes;
                    b.length = 0;
                    for (var c = this._stagePasses = {}, d = 0; d < a.length; d++) {
                        var l = b[d] = Object.setPrototypeOf({}, a[d]);
                        l._properties = Object.setPrototypeOf({}, a[d]._properties);
                        l._defines = Object.setPrototypeOf({}, a[d]._defines);
                        c[l._stage] || (c[l._stage] = []);
                        c[l._stage].push(l)
                    }
                }
            };
            k.updateHash = function(a) {};
            k.getHash = function() {
                if (!this._dirty) return this._hash;
                this._dirty = !1;
                var a = "" + l["default"].serializePasses(this._passes);
                var c = this._effect;
                c && (a += l["default"].serializePasses(c.passes));
                this._hash = (0, b["default"])(a, 666);
                this.updateHash(this._hash);
                return this._hash
            };
            d(f, [{
                key: "effect",
                get: function() {
                    return this._effect
                }
            }, {
                key: "name",
                get: function() {
                    return this._effect && this._effect.name + " (variant)"
                }
            }, {
                key: "passes",
                get: function() {
                    return this._passes
                }
            }, {
                key: "stagePasses",
                get: function() {
                    return this._stagePasses
                }
            }]);
            return f
        }(h(g("./effect-base"))["default"]);
        m["default"] = g;
        cc.EffectVariant = g;
        q.exports = m["default"]
    }, {
        "../../../renderer/murmurhash2_gc": 376,
        "./effect-base": 114,
        "./utils": 121
    }],
    117: [function(g, q, m) {
        function h(a, b) {
            for (var c = 0; c < b.length; c++) {
                var f = b[c];
                f.enumerable = f.enumerable || !1;
                f.configurable = !0;
                "value" in f && (f.writable = !0);
                Object.defineProperty(a, d(f.key), f)
            }
        }

        function e(a, b, c) {
            b && h(a.prototype, b);
            c && h(a, c);
            Object.defineProperty(a, "prototype", {
                writable: !1
            });
            return a
        }

        function d(a) {
            a: if ("object" === typeof a && null !== a) {
                $jscomp.initSymbol();
                var b = a[Symbol.toPrimitive];
                if (void 0 !== b) {
                    a = b.call(a, "string");
                    if ("object" !== typeof a) break a;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                a = String(a)
            }return "symbol" === typeof a ? a : String(a)
        }

        function k(a, b) {
            a.prototype = Object.create(b.prototype);
            a.prototype.constructor = a;
            c(a, b)
        }

        function c(a, b) {
            c = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(a, b) {
                a.__proto__ = b;
                return a
            };
            return c(a, b)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        g = function(a) {
            function b(b, c, d, l) {
                var f = a.call(this) || this;
                f._techniques = [];
                f._asset = null;
                f.init(b, c, d, l, !0);
                return f
            }
            k(b, a);
            var c = b.prototype;
            c.init = function(a, b, c, d, l) {
                this._name = a;
                this._techniques = b;
                this._technique =
                    b[c];
                this._asset = d
            };
            c.switchTechnique = function(a) {
                a >= this._techniques.length ? cc.warn("Can not switch to technique with index [" + a + "]") : this._technique = this._techniques[a]
            };
            c.clear = function() {
                this._techniques = []
            };
            c.clone = function() {
                for (var a = [], c = 0; c < this._techniques.length; c++) a.push(this._techniques[c].clone());
                c = this._techniques.indexOf(this._technique);
                return new b(this._name, a, c, this._asset)
            };
            e(b, [{
                key: "technique",
                get: function() {
                    return this._technique
                }
            }, {
                key: "passes",
                get: function() {
                    return this._technique.passes
                }
            }]);
            return b
        }(function(a) {
            return a && a.__esModule ? a : {
                default: a
            }
        }(g("./effect-base"))["default"]);
        m["default"] = g;
        cc.Effect = g;
        q.exports = m["default"]
    }, {
        "./effect-base": 114
    }],
    118: [function(g, q, m) {
        g("./CCEffectAsset");
        g("./CCMaterial");
        g("./material-variant")
    }, {
        "./CCEffectAsset": 112,
        "./CCMaterial": 113,
        "./material-variant": 120
    }],
    119: [function(g, q, m) {
        function h(a) {
            return a && a.__esModule ? a : {
                default: a
            }
        }

        function e(a, b) {
            a.prototype = Object.create(b.prototype);
            a.prototype.constructor = a;
            d(a, b)
        }

        function d(a, b) {
            d = Object.setPrototypeOf ?
                Object.setPrototypeOf.bind() : function(a, b) {
                    a.__proto__ = b;
                    return a
                };
            return d(a, b)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var k = h(g("./utils"));
        g = h(g("../../utils/pool"));
        var c = new(function(a) {
            function b() {
                var b = arguments.length;
                for (var c = Array(b), d = 0; d < b; d++) c[d] = arguments[d];
                b = a.call.apply(a, [this].concat(c)) || this;
                b.enabled = !1;
                b._pool = {};
                return b
            }
            e(b, a);
            var c = b.prototype;
            c.get = function(a, b) {
                var c = this._pool;
                if (a instanceof cc.MaterialVariant) {
                    if (!a._owner) return a._owner = b, a;
                    if (a._owner === b) return a;
                    a = a.material
                }
                if (this.enabled) {
                    var d = a.effectAsset._uuid;
                    if (c[d]) {
                        var f = k["default"].serializeDefines(a._effect._defines) + k["default"].serializeTechniques(a._effect._techniques);
                        f = c[d][f] && c[d][f].pop()
                    }
                }
                f ? this.count-- : (f = new cc.MaterialVariant(a), f._name = a._name + " (Instance)", f._uuid = a._uuid);
                f._owner = b;
                return f
            };
            c.put = function(a) {
                if (this.enabled && a._owner) {
                    var b = this._pool,
                        c = a.effectAsset._uuid;
                    b[c] || (b[c] = {});
                    var d = k["default"].serializeDefines(a._effect._defines) + k["default"].serializeTechniques(a._effect._techniques);
                    b[c][d] || (b[c][d] = []);
                    this.count > this.maxSize || (this._clean(a), b[c][d].push(a), this.count++)
                }
            };
            c.clear = function() {
                this._pool = {};
                this.count = 0
            };
            c._clean = function(a) {
                a._owner = null
            };
            return b
        }(g["default"]));
        g["default"].register("material", c);
        m["default"] = c;
        q.exports = m["default"]
    }, {
        "../../utils/pool": 312,
        "./utils": 121
    }],
    120: [function(g, q, m) {
        function h(a) {
            return a && a.__esModule ? a : {
                default: a
            }
        }

        function e(a, b) {
            for (var c = 0; c < b.length; c++) {
                var d = b[c];
                d.enumerable = d.enumerable || !1;
                d.configurable = !0;
                "value" in
                d && (d.writable = !0);
                Object.defineProperty(a, k(d.key), d)
            }
        }

        function d(a, b, c) {
            b && e(a.prototype, b);
            c && e(a, c);
            Object.defineProperty(a, "prototype", {
                writable: !1
            });
            return a
        }

        function k(a) {
            a: if ("object" === typeof a && null !== a) {
                $jscomp.initSymbol();
                var b = a[Symbol.toPrimitive];
                if (void 0 !== b) {
                    a = b.call(a, "string");
                    if ("object" !== typeof a) break a;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                a = String(a)
            }return "symbol" === typeof a ? a : String(a)
        }

        function c(b, c) {
            b.prototype = Object.create(c.prototype);
            b.prototype.constructor = b;
            a(b, c)
        }

        function a(b, c) {
            a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(a, b) {
                a.__proto__ = b;
                return a
            };
            return a(b, c)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var b = h(g("./CCMaterial")),
            l = h(g("./effect-variant")),
            f = h(g("./material-pool")),
            n, u;
        g = cc._decorator.ccclass;
        g = (n = g("cc.MaterialVariant"), n(u = function(a) {
            function k(b) {
                var c = a.call(this) || this;
                c._owner = null;
                c._material = null;
                c.init(b);
                return c
            }
            c(k, a);
            k.createWithBuiltin = function(a, c) {
                return k.create(b["default"].getBuiltinMaterial(a),
                    c)
            };
            k.create = function(a, b) {
                return a ? f["default"].get(a, b) : null
            };
            k.prototype.init = function(a) {
                this._effect = new l["default"](a.effect);
                this._effectAsset = a._effectAsset;
                this._material = a
            };
            d(k, [{
                key: "uuid",
                get: function() {
                    return this._material._uuid
                }
            }, {
                key: "owner",
                get: function() {
                    return this._owner
                }
            }, {
                key: "material",
                get: function() {
                    return this._material
                }
            }]);
            return k
        }(b["default"])) || u);
        m["default"] = g;
        cc.MaterialVariant = g;
        q.exports = m["default"]
    }, {
        "./CCMaterial": 113,
        "./effect-variant": 116,
        "./material-pool": 119
    }],
    121: [function(g, q, m) {
        function h(c, a) {
            for (var b = a.length, d = 0; d < b; d++) {
                var f = a[d];
                k[d] = f + c[f]
            }
            k.length = b;
            return k.join("")
        }

        function e(c, a) {
            for (var b = 0, l = 0, f = a.length; l < f; l++) {
                var n = c[a[l]],
                    e = n.value;
                e && (n.type === d["default"].PARAM_TEXTURE_2D || n.type === d["default"].PARAM_TEXTURE_CUBE ? k[b] = e._id : k[b] = e.toString(), b++)
            }
            k.length = b;
            return k.join(";")
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var d = function(c) {
                return c && c.__esModule ? c : {
                    default: c
                }
            }(g("../../../renderer/enums")),
            k = [];
        m["default"] = {
            serializeDefines: h,
            serializePasses: function(c) {
                for (var a = "", b = 0; b < c.length; b++) {
                    var d = c[b],
                        f = d._programName + d._cullMode;
                    d._blend && (f += d._blendEq + d._blendAlphaEq + d._blendSrc + d._blendDst + d._blendSrcAlpha + d._blendDstAlpha + d._blendColor);
                    d._depthTest && (f += d._depthWrite + d._depthFunc);
                    d._stencilTest && (f += d._stencilFuncFront + d._stencilRefFront + d._stencilMaskFront + d._stencilFailOpFront + d._stencilZFailOpFront + d._stencilZPassOpFront + d._stencilWriteMaskFront + d._stencilFuncBack + d._stencilRefBack + d._stencilMaskBack + d._stencilFailOpBack +
                        d._stencilZFailOpBack + d._stencilZPassOpBack + d._stencilWriteMaskBack);
                    f += e(d._properties, d._propertyNames);
                    f += h(d._defines, d._defineNames);
                    a += f
                }
                return a
            },
            serializeUniforms: e
        };
        q.exports = m["default"]
    }, {
        "../../../renderer/enums": 353
    }],
    122: [function(g, q, m) {
        function h(c, d) {
            var f = d._target;
            if (f) {
                var l = f;
                var k = a;
                var n = b;
                a: {
                    for (var e = l, u = k, h = n, g = c._parent.scaleX, B = c._parent.scaleY, y = 0, C = 0, m = c._parent;;) {
                        y += m.x;
                        C += m.y;
                        m = m._parent;
                        if (!m) {
                            u.x = u.y = 0;
                            h.x = h.y = 1;
                            break a
                        }
                        if (m === e) break;
                        var G = m.scaleX,
                            D = m.scaleY;
                        y *=
                            G;
                        C *= D;
                        g *= G;
                        B *= D
                    }
                    h.x = 0 !== g ? 1 / g : 1;h.y = 0 !== B ? 1 / B : 1;u.x = -y;u.y = -C
                }
            } else l = c._parent;
            e = l instanceof cc.Scene ? cc.visibleRect : l._contentSize;
            u = l._anchorPoint;
            h = (!0, l instanceof cc.Scene);
            g = c.x;
            B = c.y;
            l = c._anchorPoint;
            d._alignFlags & 56 && (G = e.width, h ? (C = cc.visibleRect.left.x, m = cc.visibleRect.right.x) : (C = -u.x * G, m = C + G), C += d._isAbsLeft ? d._left : d._left * G, m -= d._isAbsRight ? d._right : d._right * G, f && (C += k.x, C *= n.x, m += k.x, m *= n.x), y = l.x, D = c.scaleX, 0 > D && (y = 1 - y, D = -D), d.isStretchWidth ? (g = m - C, 0 !== D && (c.width = g / D), g = C + y * g) :
                (g = c.width * D, d.isAlignHorizontalCenter ? (C = d._isAbsHorizontalCenter ? d._horizontalCenter : d._horizontalCenter * G, m = (.5 - u.x) * e.width, f && (C *= n.x, m += k.x, m *= n.x), g = m + (y - .5) * g + C) : g = d.isAlignLeft ? C + y * g : m + (y - 1) * g));
            d._alignFlags & 7 && (B = e.height, h ? (C = cc.visibleRect.bottom.y, y = cc.visibleRect.top.y) : (C = -u.y * B, y = C + B), C += d._isAbsBottom ? d._bottom : d._bottom * B, y -= d._isAbsTop ? d._top : d._top * B, f && (C += k.y, C *= n.y, y += k.y, y *= n.y), h = l.y, m = c.scaleY, 0 > m && (h = 1 - h, m = -m), d.isStretchHeight ? (l = y - C, 0 !== m && (c.height = l / m), B = C + h * l) : (l =
                c.height * m, d.isAlignVerticalCenter ? (d = d._isAbsVerticalCenter ? d._verticalCenter : d._verticalCenter * B, e = (.5 - u.y) * e.height, f && (d *= n.y, e += k.y, e *= n.y), B = e + (h - .5) * l + d) : B = d.isAlignBottom ? C + h * l : y + (h - 1) * l));
            c.setPosition(g, B)
        }

        function e(a) {
            var b = a._widget;
            b && (!1, h(a, b), !0, b.alignMode !== c.ALWAYS ? f.remove(b) : l.push(b));
            a = a._children;
            for (b = 0; b < a.length; b++) {
                var d = a[b];
                d._active && e(d)
            }
        }

        function d() {
            !1;
            var a = cc.director.getScene();
            if (a) {
                f.isAligning = !0;
                if (f._nodesOrderDirty) l.length = 0, e(a), f._nodesOrderDirty = !1;
                else {
                    var b = f._activeWidgetsIterator;
                    !1;
                    for (b.i = 0; b.i < l.length; ++b.i) a = l[b.i], h(a.node, a)
                }
                f.isAligning = !1
            }!1
        }

        function k(a) {
            var b = a._parent;
            cc.Node.isNode(b) && k(b);
            var c = a._widget || a.getComponent(cc.Widget);
            c && b && h(a, c)
        }!0;
        g("../CCNode");
        var c = cc.Enum({
                ONCE: 0,
                ON_WINDOW_RESIZE: 1,
                ALWAYS: 2
            }),
            a = cc.Vec2.ZERO,
            b = cc.Vec2.ONE;
        !1;
        var l = [],
            f = cc._widgetManager = q.exports = {
                _AlignFlags: {
                    TOP: 1,
                    MID: 2,
                    BOT: 4,
                    LEFT: 8,
                    CENTER: 16,
                    RIGHT: 32
                },
                isAligning: !1,
                _nodesOrderDirty: !1,
                _activeWidgetsIterator: new cc.js.array.MutableForwardIterator(l),
                init: function(a) {
                    a.on(cc.Director.EVENT_AFTER_UPDATE, d);
                    !1;
                    a = this.onResized.bind(this);
                    cc.view.on("canvas-resize", a);
                    window.addEventListener("orientationchange", a)
                },
                add: function(a) {
                    a.node._widget = a;
                    this._nodesOrderDirty = !0;
                    !1
                },
                remove: function(a) {
                    a.node._widget = null;
                    this._activeWidgetsIterator.remove(a);
                    !1
                },
                onResized: function() {
                    var a = cc.director.getScene();
                    a && this.refreshWidgetOnResized(a)
                },
                refreshWidgetOnResized: function(a) {
                    var b = cc.Node.isNode(a) && a.getComponent(cc.Widget);
                    b && b.enabled && b.alignMode ===
                        c.ON_WINDOW_RESIZE && this.add(b);
                    a = a._children;
                    for (b = 0; b < a.length; b++) this.refreshWidgetOnResized(a[b])
                },
                updateAlignment: k,
                AlignMode: c
            };
        !1
    }, {
        "../CCNode": 61
    }],
    123: [function(g, q, m) {
        function h() {
            for (var a = 0, b = Number.MAX_VALUE; a < x.length; a++) {
                var c = x[a];
                c._depth < b && (w.main = c, b = c._depth)
            }
        }

        function e() {
            if (z) {
                var a = z.getNode(),
                    b = cc.game.canvas;
                a.z = b.height / 1.1566;
                a.x = b.width / 2;
                a.y = b.height / 2
            }
        }
        var d = g("../value-types"),
            k = g("../geom-utils"),
            c = g("../utils/affine-transform"),
            a = g("../renderer/index"),
            b = g("../renderer/render-flow"),
            l = g("../CCGame"),
            f = null;
        !1;
        f = g("../../renderer/scene/camera");
        var n = cc.mat4(),
            u = cc.mat4(),
            v = cc.v3(),
            p = cc.v3(),
            t = cc.v3(),
            x = [],
            z = null;
        g = cc.Enum({
            COLOR: 1,
            DEPTH: 2,
            STENCIL: 4
        });
        var E = cc.Enum({
                OPAQUE: 1,
                TRANSPARENT: 2
            }),
            w = cc.Class({
                name: "cc.Camera",
                extends: cc.Component,
                ctor: function() {
                    if (l.renderType !== l.RENDER_TYPE_CANVAS) {
                        var a = new f;
                        a.setStages(["opaque"]);
                        a.dirty = !0;
                        this._inited = !1;
                        this._camera = a
                    } else this._inited = !0
                },
                editor: !1,
                properties: {
                    _cullingMask: 4294967295,
                    _clearFlags: g.DEPTH | g.STENCIL,
                    _backgroundColor: cc.color(0,
                        0, 0, 255),
                    _depth: 0,
                    _zoomRatio: 1,
                    _targetTexture: null,
                    _fov: 60,
                    _orthoSize: 10,
                    _nearClip: 1,
                    _farClip: 4096,
                    _ortho: !0,
                    _rect: cc.rect(0, 0, 1, 1),
                    _renderStages: 1,
                    _alignWithScreen: !0,
                    zoomRatio: {
                        get: function() {
                            return this._zoomRatio
                        },
                        set: function(a) {
                            this._zoomRatio = a
                        },
                        tooltip: !1
                    },
                    fov: {
                        get: function() {
                            return this._fov
                        },
                        set: function(a) {
                            this._fov = a
                        },
                        tooltip: !1
                    },
                    orthoSize: {
                        get: function() {
                            return this._orthoSize
                        },
                        set: function(a) {
                            this._orthoSize = a
                        },
                        tooltip: !1
                    },
                    nearClip: {
                        get: function() {
                            return this._nearClip
                        },
                        set: function(a) {
                            this._nearClip =
                                a;
                            this._updateClippingpPlanes()
                        },
                        tooltip: !1
                    },
                    farClip: {
                        get: function() {
                            return this._farClip
                        },
                        set: function(a) {
                            this._farClip = a;
                            this._updateClippingpPlanes()
                        },
                        tooltip: !1
                    },
                    ortho: {
                        get: function() {
                            return this._ortho
                        },
                        set: function(a) {
                            this._ortho = a;
                            this._updateProjection()
                        },
                        tooltip: !1
                    },
                    rect: {
                        get: function() {
                            return this._rect
                        },
                        set: function(a) {
                            this._rect = a;
                            this._updateRect()
                        },
                        tooltip: !1
                    },
                    cullingMask: {
                        get: function() {
                            return this._cullingMask
                        },
                        set: function(a) {
                            this._cullingMask = a;
                            this._updateCameraMask()
                        },
                        tooltip: !1
                    },
                    clearFlags: {
                        get: function() {
                            return this._clearFlags
                        },
                        set: function(a) {
                            this._clearFlags = a;
                            this._camera && this._camera.setClearFlags(a)
                        },
                        tooltip: !1
                    },
                    backgroundColor: {
                        get: function() {
                            return this._backgroundColor
                        },
                        set: function(a) {
                            this._backgroundColor.equals(a) || (this._backgroundColor.set(a), this._updateBackgroundColor())
                        },
                        tooltip: !1
                    },
                    depth: {
                        get: function() {
                            return this._depth
                        },
                        set: function(a) {
                            w.main === this ? this._depth < a && h() : w.main && a < w.main._depth && x.includes(this) && (w.main = this);
                            this._depth = a;
                            this._camera &&
                                this._camera.setPriority(a)
                        },
                        tooltip: !1
                    },
                    targetTexture: {
                        get: function() {
                            return this._targetTexture
                        },
                        set: function(a) {
                            this._targetTexture = a;
                            this._updateTargetTexture()
                        },
                        tooltip: !1
                    },
                    renderStages: {
                        get: function() {
                            return this._renderStages
                        },
                        set: function(a) {
                            this._renderStages = a;
                            this._updateStages()
                        },
                        tooltip: !1
                    },
                    alignWithScreen: {
                        get: function() {
                            return this._alignWithScreen
                        },
                        set: function(a) {
                            this._alignWithScreen = a
                        }
                    },
                    _is3D: {
                        get: function() {
                            return this.node && this.node._is3DNode
                        }
                    }
                },
                statics: {
                    main: null,
                    cameras: x,
                    ClearFlags: g,
                    findCamera: function(a) {
                        for (var b = 0, c = x.length; b < c; b++) {
                            var d = x[b];
                            if (d.containsNode(a)) return d
                        }
                        return null
                    },
                    _findRendererCamera: function(b) {
                        for (var c = a.scene._cameras, d = 0; d < c._count; d++)
                            if (c._data[d]._cullingMask & b._cullingMask) return c._data[d];
                        return null
                    },
                    _setupDebugCamera: function() {
                        if (!z && l.renderType !== l.RENDER_TYPE_CANVAS) {
                            var b = new f;
                            z = b;
                            b.setStages(["opaque"]);
                            b.setFov(60 * Math.PI / 180);
                            b.setNear(.1);
                            b.setFar(4096);
                            b.dirty = !0;
                            b.cullingMask = 1 << cc.Node.BuiltinGroupIndex.DEBUG;
                            b.setPriority(cc.macro.MAX_ZINDEX);
                            b.setClearFlags(0);
                            b.setColor(0, 0, 0, 0);
                            var c = new cc.Node;
                            b.setNode(c);
                            e();
                            cc.view.on("design-resolution-changed", e);
                            a.scene.addCamera(b)
                        }
                    }
                },
                _updateCameraMask: function() {
                    this._camera && (this._camera.cullingMask = this._cullingMask & ~(1 << cc.Node.BuiltinGroupIndex.DEBUG))
                },
                _updateBackgroundColor: function() {
                    if (this._camera) {
                        var a = this._backgroundColor;
                        this._camera.setColor(a.r / 255, a.g / 255, a.b / 255, a.a / 255)
                    }
                },
                _updateTargetTexture: function() {
                    if (this._camera) {
                        var a = this._targetTexture;
                        this._camera.setFrameBuffer(a ?
                            a._framebuffer : null)
                    }
                },
                _updateClippingpPlanes: function() {
                    this._camera && (this._camera.setNear(this._nearClip), this._camera.setFar(this._farClip))
                },
                _updateProjection: function() {
                    this._camera && this._camera.setType(this._ortho ? 1 : 0)
                },
                _updateRect: function() {
                    if (this._camera) {
                        var a = this._rect;
                        this._camera.setRect(a.x, a.y, a.width, a.height)
                    }
                },
                _updateStages: function() {
                    var a = this._renderStages,
                        b = [];
                    a & E.OPAQUE && b.push("opaque");
                    a & E.TRANSPARENT && b.push("transparent");
                    this._camera.setStages(b)
                },
                _init: function() {
                    if (!this._inited) {
                        this._inited = !0;
                        var a = this._camera;
                        a && (a.setNode(this.node), a.setClearFlags(this._clearFlags), a.setPriority(this._depth), this._updateBackgroundColor(), this._updateCameraMask(), this._updateTargetTexture(), this._updateClippingpPlanes(), this._updateProjection(), this._updateStages(), this._updateRect(), !0, this.beforeDraw())
                    }
                },
                __preload: function() {
                    this._init()
                },
                onEnable: function() {
                    if (!0, l.renderType !== l.RENDER_TYPE_CANVAS) cc.director.on(cc.Director.EVENT_BEFORE_DRAW, this.beforeDraw, this), a.scene.addCamera(this._camera);
                    x.push(this);
                    (!w.main || this._depth < w.main._depth) && (w.main = this)
                },
                onDisable: function() {
                    if (!0, l.renderType !== l.RENDER_TYPE_CANVAS) cc.director.off(cc.Director.EVENT_BEFORE_DRAW, this.beforeDraw, this), a.scene.removeCamera(this._camera);
                    cc.js.array.fastRemove(x, this);
                    w.main === this && (w.main = null, h())
                },
                getScreenToWorldMatrix2D: function(a) {
                    this.getWorldToScreenMatrix2D(a);
                    d.Mat4.invert(a, a);
                    return a
                },
                getWorldToScreenMatrix2D: function(a) {
                    this.node.getWorldRT(n);
                    var b = this.zoomRatio,
                        c = n.m;
                    c[0] *= b;
                    c[1] *= b;
                    c[4] *=
                        b;
                    c[5] *= b;
                    b = c[12];
                    var f = c[13],
                        l = cc.visibleRect.center;
                    c[12] = l.x - (c[0] * b + c[4] * f);
                    c[13] = l.y - (c[1] * b + c[5] * f);
                    a !== n && d.Mat4.copy(a, n);
                    return a
                },
                getScreenToWorldPoint: function(a, b) {
                    this.node.is3DNode ? (b = b || new cc.Vec3, this._camera.screenToWorld(b, a, cc.visibleRect.width, cc.visibleRect.height)) : (b = b || new cc.Vec2, this.getScreenToWorldMatrix2D(n), d.Vec2.transformMat4(b, a, n));
                    return b
                },
                getWorldToScreenPoint: function(a, b) {
                    this.node.is3DNode ? (b = b || new cc.Vec3, this._camera.worldToScreen(b, a, cc.visibleRect.width,
                        cc.visibleRect.height)) : (b = b || new cc.Vec2, this.getWorldToScreenMatrix2D(n), d.Vec2.transformMat4(b, a, n));
                    return b
                },
                getRay: function(a) {
                    if (!cc.geomUtils) return a;
                    d.Vec3.set(t, a.x, a.y, 1);
                    this._camera.screenToWorld(p, t, cc.visibleRect.width, cc.visibleRect.height);
                    this.ortho ? (d.Vec3.set(t, a.x, a.y, -1), this._camera.screenToWorld(v, t, cc.visibleRect.width, cc.visibleRect.height)) : this.node.getWorldPosition(v);
                    return k.Ray.fromPoints(new k.Ray, v, p)
                },
                containsNode: function(a) {
                    return 0 < (a._cullingMask & this.cullingMask)
                },
                render: function(a) {
                    a = a || cc.director.getScene();
                    if (!a) return null;
                    this.node.getWorldMatrix(n);
                    this.beforeDraw();
                    b.renderCamera(this._camera, a)
                },
                _onAlignWithScreen: function() {
                    var a = cc.game.canvas.height / cc.view._scaleY;
                    this._targetTexture && (!1, a = cc.visibleRect.height);
                    var b = this._fov * cc.macro.RAD;
                    this.node.z = a / (2 * Math.tan(b / 2));
                    b = 2 * Math.atan(Math.tan(b / 2) / this.zoomRatio);
                    this._camera.setFov(b);
                    this._camera.setOrthoHeight(a / 2 / this.zoomRatio);
                    this.node.setRotation(0, 0, 0, 1)
                },
                beforeDraw: function() {
                    if (this._camera) {
                        if (this._alignWithScreen) this._onAlignWithScreen();
                        else {
                            var a = this._fov * cc.macro.RAD;
                            a = 2 * Math.atan(Math.tan(a / 2) / this.zoomRatio);
                            this._camera.setFov(a);
                            this._camera.setOrthoHeight(this._orthoSize / this.zoomRatio)
                        }
                        this._camera.dirty = !0
                    }
                }
            });
        cc.js.mixin(w.prototype, {
            getNodeToCameraTransform: function(a) {
                var b = c.identity();
                a.getWorldMatrix(u);
                this.containsNode(a) && (this.getWorldToCameraMatrix(n), d.Mat4.mul(u, u, n));
                c.fromMat4(b, u);
                return b
            },
            getCameraToWorldPoint: function(a, b) {
                return this.getScreenToWorldPoint(a, b)
            },
            getWorldToCameraPoint: function(a, b) {
                return this.getWorldToScreenPoint(a,
                    b)
            },
            getCameraToWorldMatrix: function(a) {
                return this.getScreenToWorldMatrix2D(a)
            },
            getWorldToCameraMatrix: function(a) {
                return this.getWorldToScreenMatrix2D(a)
            }
        });
        q.exports = cc.Camera = w
    }, {
        "../../renderer/scene/camera": 378,
        "../CCGame": 60,
        "../geom-utils": 182,
        "../renderer/index": 259,
        "../renderer/render-flow": 260,
        "../utils/affine-transform": 301,
        "../value-types": 325
    }],
    124: [function(g, q, m) {
        cc.Collider.Box = cc.Class({
            properties: {
                _offset: cc.v2(0, 0),
                _size: cc.size(100, 100),
                offset: {
                    tooltip: !1,
                    get: function() {
                        return this._offset
                    },
                    set: function(h) {
                        this._offset = h
                    },
                    type: cc.Vec2
                },
                size: {
                    tooltip: !1,
                    get: function() {
                        return this._size
                    },
                    set: function(h) {
                        this._size.width = 0 > h.width ? 0 : h.width;
                        this._size.height = 0 > h.height ? 0 : h.height
                    },
                    type: cc.Size
                }
            },
            resetInEditor: !1
        });
        g = cc.Class({
            name: "cc.BoxCollider",
            extends: cc.Collider,
            mixins: [cc.Collider.Box],
            editor: !1
        });
        cc.BoxCollider = q.exports = g
    }, {}],
    125: [function(g, q, m) {
        cc.Collider.Circle = cc.Class({
            properties: {
                _offset: cc.v2(0, 0),
                _radius: 50,
                offset: {
                    tooltip: !1,
                    get: function() {
                        return this._offset
                    },
                    set: function(h) {
                        this._offset =
                            h
                    },
                    type: cc.Vec2
                },
                radius: {
                    tooltip: !1,
                    get: function() {
                        return this._radius
                    },
                    set: function(h) {
                        this._radius = 0 > h ? 0 : h
                    }
                }
            },
            resetInEditor: !1
        });
        g = cc.Class({
            name: "cc.CircleCollider",
            extends: cc.Collider,
            mixins: [cc.Collider.Circle],
            editor: !1
        });
        cc.CircleCollider = q.exports = g
    }, {}],
    126: [function(g, q, m) {
        g = cc.Class({
            name: "cc.Collider",
            extends: cc.Component,
            properties: {
                editing: {
                    default: !1,
                    serializable: !1,
                    tooltip: !1
                },
                tag: {
                    tooltip: !1,
                    default: 0,
                    range: [0, 1E7],
                    type: cc.Integer
                }
            },
            onDisable: function() {
                cc.director.getCollisionManager().removeCollider(this)
            },
            onEnable: function() {
                cc.director.getCollisionManager().addCollider(this)
            }
        });
        cc.Collider = q.exports = g
    }, {}],
    127: [function(g, q, m) {
        var h = function(a) {
                return a && a.__esModule ? a : {
                    default: a
                }
            }(g("../value-types/vec2")),
            e = g("./CCContact"),
            d = e.CollisionType,
            k = g("../CCNode").EventType,
            c = new h["default"];
        g = cc.Class({
            mixins: [cc.EventTarget],
            properties: {
                enabled: !1,
                enabledDrawBoundingBox: !1
            },
            ctor: function() {
                this._contacts = [];
                this._colliders = [];
                this._debugDrawer = null;
                this._enabledDebugDraw = !1;
                cc.director._scheduler &&
                    cc.director._scheduler.enableForTarget(this)
            },
            update: function(a) {
                if (this.enabled) {
                    var b, c = this._colliders;
                    a = 0;
                    for (b = c.length; a < b; a++) this.updateCollider(c[a]);
                    var f = this._contacts;
                    c = [];
                    a = 0;
                    for (b = f.length; a < b; a++) {
                        var k = f[a].updateState();
                        k !== d.None && c.push([k, f[a]])
                    }
                    a = 0;
                    for (b = c.length; a < b; a++) f = c[a], this._doCollide(f[0], f[1]);
                    this.drawColliders()
                }
            },
            _doCollide: function(a, b) {
                switch (a) {
                    case d.CollisionEnter:
                        var c = "onCollisionEnter";
                        break;
                    case d.CollisionStay:
                        c = "onCollisionStay";
                        break;
                    case d.CollisionExit:
                        c =
                            "onCollisionExit"
                }
                a = b.collider1;
                b = b.collider2;
                var f = a.node._components,
                    k = b.node._components,
                    e;
                var h = 0;
                for (e = f.length; h < e; h++) {
                    var p = f[h];
                    p[c] && p[c](b, a)
                }
                h = 0;
                for (e = k.length; h < e; h++) p = k[h], p[c] && p[c](a, b)
            },
            shouldCollide: function(a, b) {
                a = a.node;
                b = b.node;
                var c = cc.game.collisionMatrix;
                return a !== b && c[a.groupIndex][b.groupIndex]
            },
            initCollider: function(a) {
                if (!a.world) {
                    var b = a.world = {};
                    b.aabb = cc.rect();
                    b.preAabb = cc.rect();
                    b.matrix = cc.mat4();
                    b.radius = 0;
                    a instanceof cc.BoxCollider ? (b.position = null, b.points = [cc.v2(), cc.v2(), cc.v2(), cc.v2()]) : a instanceof cc.PolygonCollider ? (b.position = null, b.points = a.points.map(function(a) {
                        return cc.v2(a.x, a.y)
                    })) : a instanceof cc.CircleCollider && (b.position = cc.v2(), b.points = null)
                }
            },
            updateCollider: function(a) {
                var b = a.offset,
                    d = a.world,
                    f = d.aabb,
                    k = d.matrix;
                a.node.getWorldMatrix(k);
                var e = d.preAabb;
                e.x = f.x;
                e.y = f.y;
                e.width = f.width;
                e.height = f.height;
                if (a instanceof cc.BoxCollider) {
                    a = a.size;
                    f.x = b.x - a.width / 2;
                    f.y = b.y - a.height / 2;
                    f.width = a.width;
                    f.height = a.height;
                    e = d.points;
                    b = e[0];
                    a = e[1];
                    d = e[2];
                    e = e[3];
                    var g = f.x,
                        p = f.y,
                        t = f.width,
                        x = f.height,
                        z = k.m,
                        E = z[0],
                        w = z[1],
                        A = z[4],
                        B = z[5];
                    k = E * g + A * p + z[12];
                    g = w * g + B * p + z[13];
                    p = E * t;
                    t *= w;
                    A *= x;
                    x *= B;
                    a.x = k;
                    a.y = g;
                    d.x = p + k;
                    d.y = t + g;
                    b.x = A + k;
                    b.y = x + g;
                    e.x = p + A + k;
                    e.y = t + x + g;
                    k = Math.min(b.x, a.x, d.x, e.x);
                    x = Math.min(b.y, a.y, d.y, e.y);
                    B = Math.max(b.x, a.x, d.x, e.x);
                    b = Math.max(b.y, a.y, d.y, e.y);
                    f.x = k;
                    f.y = x;
                    f.width = B - k;
                    f.height = b - x
                } else if (a instanceof cc.CircleCollider) h["default"].transformMat4(c, a.offset, k), d.position.x = c.x, d.position.y = c.y, b = k.m, e = b[12], x = b[13], b[12] = b[13] =
                    0, c.x = a.radius, c.y = 0, h["default"].transformMat4(c, c, k), k = Math.sqrt(c.x * c.x + c.y * c.y), d.radius = k, f.x = d.position.x - k, f.y = d.position.y - k, f.width = 2 * k, f.height = 2 * k, b[12] = e, b[13] = x;
                else if (a instanceof cc.PolygonCollider) {
                    a = a.points;
                    d = d.points;
                    d.length = a.length;
                    x = e = 1E6;
                    t = B = -1E6;
                    A = 0;
                    for (w = a.length; A < w; A++) d[A] || (d[A] = cc.v2()), c.x = a[A].x + b.x, c.y = a[A].y + b.y, h["default"].transformMat4(c, c, k), g = c.x, p = c.y, d[A].x = g, d[A].y = p, g > B && (B = g), g < e && (e = g), p > t && (t = p), p < x && (x = p);
                    f.x = e;
                    f.y = x;
                    f.width = B - e;
                    f.height = t - x
                }
            },
            addCollider: function(a) {
                var b =
                    this._colliders;
                if (-1 === b.indexOf(a)) {
                    for (var c = 0, d = b.length; c < d; c++) {
                        var n = b[c];
                        this.shouldCollide(a, n) && (n = new e(a, n), this._contacts.push(n))
                    }
                    b.push(a);
                    this.initCollider(a)
                }
                a.node.on(k.GROUP_CHANGED, this.onNodeGroupChanged, this)
            },
            removeCollider: function(a) {
                var b = this._colliders,
                    c = b.indexOf(a);
                if (0 <= c) {
                    b.splice(c, 1);
                    b = this._contacts;
                    for (c = b.length - 1; 0 <= c; c--) {
                        var f = b[c];
                        if (f.collider1 === a || f.collider2 === a) f.touching && this._doCollide(d.CollisionExit, f), b.splice(c, 1)
                    }
                    a.node.off(k.GROUP_CHANGED, this.onNodeGroupChanged,
                        this)
                } else cc.errorID(6600)
            },
            onNodeGroupChanged: function(a) {
                a = a.getComponents(cc.Collider);
                for (var b = 0, c = a.length; b < c; b++) {
                    var d = a[b];
                    cc.PhysicsCollider && d instanceof cc.PhysicsCollider || (this.removeCollider(d), this.addCollider(d))
                }
            },
            drawColliders: function() {
                if (this._enabledDebugDraw) {
                    this._checkDebugDrawValid();
                    var a = this._debugDrawer;
                    a.clear();
                    for (var b = this._colliders, c = 0, d = b.length; c < d; c++) {
                        var k = b[c];
                        a.strokeColor = cc.Color.WHITE;
                        if (k instanceof cc.BoxCollider || k instanceof cc.PolygonCollider) {
                            var e =
                                k.world.points;
                            if (0 < e.length) {
                                a.moveTo(e[0].x, e[0].y);
                                for (var h = 1; h < e.length; h++) a.lineTo(e[h].x, e[h].y);
                                a.close();
                                a.stroke()
                            }
                        } else k instanceof cc.CircleCollider && (a.circle(k.world.position.x, k.world.position.y, k.world.radius), a.stroke());
                        this.enabledDrawBoundingBox && (k = k.world.aabb, a.strokeColor = cc.Color.BLUE, a.moveTo(k.xMin, k.yMin), a.lineTo(k.xMin, k.yMax), a.lineTo(k.xMax, k.yMax), a.lineTo(k.xMax, k.yMin), a.close(), a.stroke())
                    }
                }
            },
            _checkDebugDrawValid: function() {
                if (!this._debugDrawer || !this._debugDrawer.isValid) {
                    var a =
                        new cc.Node("COLLISION_MANAGER_DEBUG_DRAW");
                    a.zIndex = cc.macro.MAX_ZINDEX;
                    cc.game.addPersistRootNode(a);
                    this._debugDrawer = a.addComponent(cc.Graphics)
                }
            }
        });
        cc.js.getset(g.prototype, "enabledDebugDraw", function() {
            return this._enabledDebugDraw
        }, function(a) {
            a && !this._enabledDebugDraw ? (this._checkDebugDrawValid(), this._debugDrawer.node.active = !0) : !a && this._enabledDebugDraw && (this._debugDrawer.clear(!0), this._debugDrawer.node.active = !1);
            this._enabledDebugDraw = a
        });
        cc.CollisionManager = q.exports = g
    }, {
        "../CCNode": 61,
        "../value-types/vec2": 334,
        "./CCContact": 128
    }],
    128: [function(g, q, m) {
        function h(d, c) {
            this.collider1 = d;
            this.collider2 = c;
            this.touching = !1;
            var a = d instanceof cc.BoxCollider || d instanceof cc.PolygonCollider,
                b = c instanceof cc.BoxCollider || c instanceof cc.PolygonCollider,
                l = d instanceof cc.CircleCollider,
                f = c instanceof cc.CircleCollider;
            a && b ? this.testFunc = e.polygonPolygon : l && f ? this.testFunc = e.circleCircle : a && f ? this.testFunc = e.polygonCircle : l && b ? (this.testFunc = e.polygonCircle, this.collider1 = c, this.collider2 =
                d) : cc.errorID(6601, cc.js.getClassName(d), cc.js.getClassName(c))
        }
        var e = g("./CCIntersection"),
            d = cc.Enum({
                None: 0,
                CollisionEnter: 1,
                CollisionStay: 2,
                CollisionExit: 3
            });
        h.prototype.test = function() {
            var d = this.collider1.world,
                c = this.collider2.world;
            return d.aabb.intersects(c.aabb) ? this.testFunc === e.polygonPolygon ? this.testFunc(d.points, c.points) : this.testFunc === e.circleCircle ? this.testFunc(d, c) : this.testFunc === e.polygonCircle ? this.testFunc(d.points, c) : !1 : !1
        };
        h.prototype.updateState = function() {
            var k = this.test(),
                c = d.None;
            k && !this.touching ? (this.touching = !0, c = d.CollisionEnter) : k && this.touching ? c = d.CollisionStay : !k && this.touching && (this.touching = !1, c = d.CollisionExit);
            return c
        };
        h.CollisionType = d;
        q.exports = h
    }, {
        "./CCIntersection": 129
    }],
    129: [function(g, q, m) {
        function h(c, a, b, d) {
            var f = (d.x - b.x) * (c.y - b.y) - (d.y - b.y) * (c.x - b.x),
                l = (a.x - c.x) * (c.y - b.y) - (a.y - c.y) * (c.x - b.x);
            c = (d.y - b.y) * (a.x - c.x) - (d.x - b.x) * (a.y - c.y);
            return 0 !== c && (f /= c, l /= c, 0 <= f && 1 >= f && 0 <= l && 1 >= l) ? !0 : !1
        }

        function e(c, a, b) {
            for (var d = b.length, f = 0; f < d; ++f)
                if (h(c,
                        a, b[f], b[(f + 1) % d])) return !0;
            return !1
        }

        function d(c, a) {
            var b = !1,
                d = c.x;
            c = c.y;
            for (var f = a.length, k = 0, e = f - 1; k < f; e = k++) {
                var h = a[k].x,
                    p = a[k].y,
                    t = a[e].x;
                e = a[e].y;
                p > c !== e > c && d < (t - h) * (c - p) / (e - p) + h && (b = !b)
            }
            return b
        }

        function k(c, a, b, d) {
            var f = b.x - a.x,
                l = b.y - a.y,
                k = f * f + l * l,
                e = ((c.x - a.x) * f + (c.y - a.y) * l) / k;
            a = d ? k ? 0 > e ? a : 1 < e ? b : cc.v2(a.x + e * f, a.y + e * l) : a : cc.v2(a.x + e * f, a.y + e * l);
            f = c.x - a.x;
            l = c.y - a.y;
            return Math.sqrt(f * f + l * l)
        }
        g = {};
        g.lineLine = h;
        g.lineRect = function(c, a, b) {
            var d = new cc.Vec2(b.x, b.y),
                f = new cc.Vec2(b.x, b.yMax),
                k = new cc.Vec2(b.xMax,
                    b.yMax);
            b = new cc.Vec2(b.xMax, b.y);
            return h(c, a, d, f) || h(c, a, f, k) || h(c, a, k, b) || h(c, a, b, d) ? !0 : !1
        };
        g.linePolygon = e;
        g.rectRect = function(c, a) {
            var b = c.y,
                d = c.x + c.width,
                f = c.y + c.height,
                k = a.x,
                e = a.y,
                h = a.y + a.height;
            return c.x <= a.x + a.width && d >= k && b <= h && f >= e
        };
        g.rectPolygon = function(c, a) {
            var b, l = new cc.Vec2(c.x, c.y),
                f = new cc.Vec2(c.x, c.yMax),
                k = new cc.Vec2(c.xMax, c.yMax),
                h = new cc.Vec2(c.xMax, c.y);
            if (e(l, f, a) || e(f, k, a) || e(k, h, a) || e(h, l, a)) return !0;
            var g = 0;
            for (b = a.length; g < b; ++g)
                if (d(a[g], c)) return !0;
            return d(l, a) ||
                d(f, a) || d(k, a) || d(h, a) ? !0 : !1
        };
        g.polygonPolygon = function(c, a) {
            var b;
            var l = 0;
            for (b = c.length; l < b; ++l)
                if (e(c[l], c[(l + 1) % b], a)) return !0;
            l = 0;
            for (b = a.length; l < b; ++l)
                if (d(a[l], c)) return !0;
            l = 0;
            for (b = c.length; l < b; ++l)
                if (d(c[l], a)) return !0;
            return !1
        };
        g.circleCircle = function(c, a) {
            return c.position.sub(a.position).mag() < c.radius + a.radius
        };
        g.polygonCircle = function(c, a) {
            var b = a.position;
            if (d(b, c)) return !0;
            for (var l = 0, f = c.length; l < f; l++)
                if (k(b, 0 === l ? c[c.length - 1] : c[l - 1], c[l], !0) < a.radius) return !0;
            return !1
        };
        g.pointInPolygon =
            d;
        g.pointLineDistance = k;
        cc.Intersection = q.exports = g
    }, {}],
    130: [function(g, q, m) {
        cc.Collider.Polygon = cc.Class({
            properties: {
                threshold: {
                    default: 1,
                    serializable: !1,
                    visible: !1
                },
                _offset: cc.v2(0, 0),
                offset: {
                    get: function() {
                        return this._offset
                    },
                    set: function(h) {
                        this._offset = h
                    },
                    type: cc.Vec2
                },
                points: {
                    tooltip: !1,
                    default: function() {
                        return [cc.v2(-50, -50), cc.v2(50, -50), cc.v2(50, 50), cc.v2(-50, 50)]
                    },
                    type: [cc.Vec2]
                }
            },
            resetPointsByContour: !1
        });
        g = cc.Class({
            name: "cc.PolygonCollider",
            extends: cc.Collider,
            mixins: [cc.Collider.Polygon],
            editor: !1
        });
        cc.PolygonCollider = q.exports = g
    }, {}],
    131: [function(g, q, m) {
        g("./CCCollisionManager");
        g("./CCCollider");
        g("./CCBoxCollider");
        g("./CCCircleCollider");
        g("./CCPolygonCollider")
    }, {
        "./CCBoxCollider": 124,
        "./CCCircleCollider": 125,
        "./CCCollider": 126,
        "./CCCollisionManager": 127,
        "./CCPolygonCollider": 130
    }],
    132: [function(g, q, m) {
        function h(a, b) {
            var c = b.constructor._executionOrder;
            b = b._id;
            for (var d = 0, f = a.length - 1, l = f >>> 1; d <= f; l = d + f >>> 1) {
                var k = a[l],
                    n = k.constructor._executionOrder;
                if (n > c) f = l - 1;
                else if (n <
                    c) d = l + 1;
                else if (k = k._id, k > b) f = l - 1;
                else {
                    if (!(k < b)) return l;
                    d = l + 1
                }
            }
            return ~d
        }

        function e(a, b) {
            for (var c = a.array, d = a.i + 1; d < c.length;) {
                var f = c[d];
                f._enabled && f.node && f.node._activeInHierarchy ? ++d : (a.removeAt(d), b && (f._objFlags &= ~b))
            }
        }

        function d(a, b) {
            return a.constructor._executionOrder - b.constructor._executionOrder
        }

        function k(a, b, c, d) {
            !0;
            var f = "var a=it.array;for(it.i=0;it.i<a.length;++it.i){var c=a[it.i];" + a + "}";
            d = b ? Function("it", "dt", f) : Function("it", f);
            a = Function("c", "dt", a);
            return function(b, f) {
                try {
                    d(b,
                        f)
                } catch (C) {
                    cc._throw(C);
                    var l = b.array;
                    c && (l[b.i]._objFlags |= c);
                    for (++b.i; b.i < l.length; ++b.i) try {
                        a(l[b.i], f)
                    } catch (F) {
                        cc._throw(F), c && (l[b.i]._objFlags |= c)
                    }
                }
            }
        }

        function c() {
            this.startInvoker = new f(u);
            this.updateInvoker = new n(v);
            this.lateUpdateInvoker = new n(p);
            this._deferredComps = [];
            this._updating = !1
        }
        g("./platform/CCClass");
        m = g("./platform/CCObject").Flags;
        var a = g("./platform/js").array,
            b = m.IsStartCalled,
            l = m.IsOnEnableCalled;
        g = cc.Class({
            __ctor__: function(b) {
                var c = a.MutableForwardIterator;
                this._zero =
                    new c([]);
                this._neg = new c([]);
                this._pos = new c([]);
                !1;
                this._invoke = b
            },
            statics: {
                stableRemoveInactive: e
            },
            add: null,
            remove: null,
            invoke: null
        });
        var f = cc.Class({
                extends: g,
                add: function(a) {
                    var b = a.constructor._executionOrder;
                    (0 === b ? this._zero : 0 > b ? this._neg : this._pos).array.push(a)
                },
                remove: function(a) {
                    var b = a.constructor._executionOrder;
                    (0 === b ? this._zero : 0 > b ? this._neg : this._pos).fastRemove(a)
                },
                cancelInactive: function(a) {
                    e(this._zero, a);
                    e(this._neg, a);
                    e(this._pos, a)
                },
                invoke: function() {
                    var a = this._neg;
                    0 < a.array.length &&
                        (a.array.sort(d), this._invoke(a), a.array.length = 0);
                    this._invoke(this._zero);
                    this._zero.array.length = 0;
                    a = this._pos;
                    0 < a.array.length && (a.array.sort(d), this._invoke(a), a.array.length = 0)
                }
            }),
            n = cc.Class({
                extends: g,
                add: function(a) {
                    var b = a.constructor._executionOrder;
                    if (0 === b) this._zero.array.push(a);
                    else {
                        b = 0 > b ? this._neg.array : this._pos.array;
                        var c = h(b, a);
                        0 > c && b.splice(~c, 0, a)
                    }
                },
                remove: function(a) {
                    var b = a.constructor._executionOrder;
                    0 === b ? this._zero.fastRemove(a) : (b = 0 > b ? this._neg : this._pos, a = h(b.array, a),
                        0 <= a && b.removeAt(a))
                },
                invoke: function(a) {
                    0 < this._neg.array.length && this._invoke(this._neg, a);
                    this._invoke(this._zero, a);
                    0 < this._pos.array.length && this._invoke(this._pos, a)
                }
            }),
            u = k("c.start();c._objFlags|=" + b, !1, b),
            v = k("c.update(dt)", !0),
            p = k("c.lateUpdate(dt)", !0);
        g = cc.Class({
            ctor: c,
            unscheduleAll: c,
            statics: {
                LifeCycleInvoker: g,
                OneOffInvoker: f,
                createInvokeImpl: k,
                invokeOnEnable: function(a) {
                    var b = cc.director._compScheduler,
                        c = a.array;
                    for (a.i = 0; a.i < c.length; ++a.i) {
                        var d = c[a.i];
                        d._enabled && (d.onEnable(), !d.node._activeInHierarchy ||
                            b._onEnabled(d))
                    }
                }
            },
            _onEnabled: function(a) {
                cc.director.getScheduler().resumeTarget(a);
                a._objFlags |= l;
                this._updating ? this._deferredComps.push(a) : this._scheduleImmediate(a)
            },
            _onDisabled: function(c) {
                cc.director.getScheduler().pauseTarget(c);
                c._objFlags &= ~l;
                var d = this._deferredComps.indexOf(c);
                0 <= d ? a.fastRemoveAt(this._deferredComps, d) : (!c.start || c._objFlags & b || this.startInvoker.remove(c), c.update && this.updateInvoker.remove(c), c.lateUpdate && this.lateUpdateInvoker.remove(c))
            },
            enableComp: function(a, b) {
                if (!(a._objFlags &
                        l)) {
                    if (a.onEnable) {
                        if (b) {
                            b.add(a);
                            return
                        }
                        a.onEnable();
                        if (!a.node._activeInHierarchy) return
                    }
                    this._onEnabled(a)
                }
            },
            disableComp: function(a) {
                a._objFlags & l && (a.onDisable && a.onDisable(), this._onDisabled(a))
            },
            _scheduleImmediate: function(a) {
                "function" !== typeof a.start || a._objFlags & b || this.startInvoker.add(a);
                "function" === typeof a.update && this.updateInvoker.add(a);
                "function" === typeof a.lateUpdate && this.lateUpdateInvoker.add(a)
            },
            _deferredSchedule: function() {
                for (var a = this._deferredComps, b = 0, c = a.length; b < c; b++) this._scheduleImmediate(a[b]);
                a.length = 0
            },
            _startForNewComps: function() {
                0 < this._deferredComps.length && (this._deferredSchedule(), this.startInvoker.invoke())
            },
            startPhase: function() {
                this._updating = !0;
                this.startInvoker.invoke();
                this._startForNewComps()
            },
            updatePhase: function(a) {
                this.updateInvoker.invoke(a)
            },
            lateUpdatePhase: function(a) {
                this.lateUpdateInvoker.invoke(a);
                this._updating = !1;
                this._startForNewComps()
            }
        });
        q.exports = g
    }, {
        "./platform/CCClass": 227,
        "./platform/CCObject": 233,
        "./platform/js": 248,
        "./utils/misc": 310
    }],
    133: [function(g,
        q, m) {
        var h = g("../../animation/animation-animator"),
            e = g("../../animation/animation-clip");
        m = g("../event/event-target");
        var d = g("../platform/js"),
            k = cc.Enum({
                PLAY: "play",
                STOP: "stop",
                PAUSE: "pause",
                RESUME: "resume",
                LASTFRAME: "lastframe",
                FINISHED: "finished"
            });
        g = cc.Class({
            name: "cc.Animation",
            extends: g("./CCComponent"),
            mixins: [m],
            editor: !1,
            statics: {
                EventType: k
            },
            ctor: function() {
                cc.EventTarget.call(this);
                this._animator = null;
                this._nameToState = d.createMap(!0);
                this._didInit = !1;
                this._currentClip = null
            },
            properties: {
                _defaultClip: {
                    default: null,
                    type: e
                },
                defaultClip: {
                    type: e,
                    get: function() {
                        return this._defaultClip
                    },
                    set: function(c) {
                        !0
                    },
                    tooltip: !1
                },
                currentClip: {
                    get: function() {
                        return this._currentClip
                    },
                    set: function(c) {
                        this._currentClip = c
                    },
                    type: e,
                    visible: !1
                },
                _writableClips: {
                    get: function() {
                        return this._clips
                    },
                    set: function(c) {
                        this._didInit = !1;
                        this._clips = c;
                        this._init()
                    },
                    type: [e]
                },
                _clips: {
                    default: [],
                    type: [e],
                    tooltip: !1,
                    visible: !0
                },
                playOnLoad: {
                    default: !1,
                    tooltip: !1
                }
            },
            start: function() {
                if ((!0, this.playOnLoad) && this._defaultClip && (!this._animator || !this._animator.isPlaying)) {
                    var c =
                        this.getAnimationState(this._defaultClip.name);
                    this._animator.playState(c)
                }
            },
            onEnable: function() {
                this._animator && this._animator.resume()
            },
            onDisable: function() {
                this._animator && this._animator.pause()
            },
            onDestroy: function() {
                this.stop()
            },
            getClips: function() {
                return this._clips
            },
            play: function(c, a) {
                c = this.playAdditive(c, a);
                this._animator.stopStatesExcept(c);
                return c
            },
            playAdditive: function(c, a) {
                this._init();
                if (c = this.getAnimationState(c || this._defaultClip && this._defaultClip.name)) {
                    this.enabled = !0;
                    var b = this._animator;
                    b.isPlaying && c.isPlaying ? c.isPaused ? b.resumeState(c) : (b.stopState(c), b.playState(c, a)) : b.playState(c, a);
                    this.enabledInHierarchy || b.pause();
                    this.currentClip = c.clip
                }
                return c
            },
            stop: function(c) {
                this._didInit && (c ? (c = this._nameToState[c]) && this._animator.stopState(c) : this._animator.stop())
            },
            pause: function(c) {
                this._didInit && (c ? (c = this._nameToState[c]) && this._animator.pauseState(c) : this.enabled = !1)
            },
            resume: function(c) {
                this._didInit && (c ? (c = this.getAnimationState(c)) && this._animator.resumeState(c) : this.enabled = !0)
            },
            setCurrentTime: function(c, a) {
                this._init();
                a ? (a = this.getAnimationState(a)) && this._animator.setStateTime(a, c) : this._animator.setStateTime(c)
            },
            getAnimationState: function(c) {
                this._init();
                c = this._nameToState[c];
                !1;
                c && !c.curveLoaded && this._animator._reloadClip(c);
                return c || null
            },
            hasAnimationState: function(c) {
                this._init();
                return !!this._nameToState[c]
            },
            addClip: function(c, a) {
                if (c) {
                    this._init();
                    cc.js.array.contains(this._clips, c) || this._clips.push(c);
                    a = a || c.name;
                    var b = this._nameToState[a];
                    if (b) {
                        if (b.clip ===
                            c) return b;
                        b = this._clips.indexOf(b.clip); - 1 !== b && this._clips.splice(b, 1)
                    }
                    c = new cc.AnimationState(c, a);
                    return this._nameToState[a] = c
                }
                cc.warnID(3900)
            },
            removeClip: function(c, a) {
                if (c) {
                    this._init();
                    var b;
                    for (b in this._nameToState) {
                        var d = this._nameToState[b];
                        if (d.clip === c) break
                    }
                    if (c === this._defaultClip) {
                        if (!a) {
                            !0;
                            cc.warnID(3902);
                            return
                        }
                        this._defaultClip = null
                    }
                    if (d && d.isPlaying) {
                        if (!a) {
                            !0;
                            cc.warnID(3903);
                            return
                        }
                        this.stop(d.name)
                    }
                    this._clips = this._clips.filter(function(a) {
                        return a !== c
                    });
                    d && delete this._nameToState[d.name]
                } else cc.warnID(3901)
            },
            sample: function(c) {
                this._init();
                c ? (c = this.getAnimationState(c)) && c.sample() : this._animator.sample()
            },
            on: function(c, a, b, d) {
                this._init();
                a = this._EventTargetOn(c, a, b, d);
                if ("lastframe" === c) {
                    c = this._nameToState;
                    for (var f in c) c[f]._lastframeEventOn = !0
                }
                return a
            },
            off: function(c, a, b, d) {
                this._init();
                if ("lastframe" === c) {
                    var f = this._nameToState,
                        l;
                    for (l in f) f[l]._lastframeEventOn = !1
                }
                this._EventTargetOff(c, a, b, d)
            },
            _init: function() {
                this._didInit || (this._didInit = !0, this._animator = new h(this.node, this), this._createStates())
            },
            _createStates: function() {
                this._nameToState = d.createMap(!0);
                for (var c, a = !1, b = 0; b < this._clips.length; ++b) {
                    var l = this._clips[b];
                    l && (c = new cc.AnimationState(l), !1, this._nameToState[c.name] = c, this._defaultClip === l && (a = c))
                }
                this._defaultClip && !a && (c = new cc.AnimationState(this._defaultClip), !1, this._nameToState[c.name] = c)
            }
        });
        g.prototype._EventTargetOn = m.prototype.on;
        g.prototype._EventTargetOff = m.prototype.off;
        cc.Animation = q.exports = g
    }, {
        "../../animation/animation-animator": 10,
        "../../animation/animation-clip": 11,
        "../event/event-target": 174,
        "../platform/js": 248,
        "./CCComponent": 138
    }],
    134: [function(g, q, m) {
        var h = g("../utils/misc");
        m = g("./CCComponent");
        var e = g("../assets/CCAudioClip");
        g = cc.Class({
            name: "cc.AudioSource",
            extends: m,
            editor: !1,
            ctor: function() {
                this.audio = new cc._Audio
            },
            properties: {
                _clip: {
                    default: null,
                    type: e
                },
                _volume: 1,
                _mute: !1,
                _loop: !1,
                _pausedFlag: {
                    default: !1,
                    serializable: !1
                },
                _firstlyEnabled: !0,
                isPlaying: {
                    get: function() {
                        return this.audio.getState() === cc._Audio.State.PLAYING
                    },
                    visible: !1
                },
                clip: {
                    get: function() {
                        return this._clip
                    },
                    set: function(d) {
                        if (d !== this._clip) {
                            if (!(d instanceof e)) return cc.error("Wrong type of AudioClip.");
                            this._clip = d;
                            this.audio.stop();
                            this.audio.src = this._clip;
                            this.preload && this._clip._ensureLoaded()
                        }
                    },
                    type: e,
                    tooltip: !1,
                    animatable: !1
                },
                volume: {
                    get: function() {
                        return this._volume
                    },
                    set: function(d) {
                        this._volume = d = h.clamp01(d);
                        this._mute || this.audio.setVolume(d);
                        return d
                    },
                    tooltip: !1
                },
                mute: {
                    get: function() {
                        return this._mute
                    },
                    set: function(d) {
                        this._mute = d;
                        this.audio.setVolume(d ? 0 : this._volume);
                        return d
                    },
                    animatable: !1,
                    tooltip: !1
                },
                loop: {
                    get: function() {
                        return this._loop
                    },
                    set: function(d) {
                        this._loop = d;
                        this.audio.setLoop(d);
                        return d
                    },
                    animatable: !1,
                    tooltip: !1
                },
                playOnLoad: {
                    default: !1,
                    tooltip: !1,
                    animatable: !1
                },
                preload: {
                    default: !1,
                    animatable: !1
                }
            },
            _pausedCallback: function() {
                this.audio.getState() === cc._Audio.State.PLAYING && (this.audio.pause(), this._pausedFlag = !0)
            },
            _restoreCallback: function() {
                this._pausedFlag && this.audio.resume();
                this._pausedFlag = !1
            },
            onLoad: function() {
                this.audio.src || (this.audio.src = this._clip);
                this.preload &&
                    this._clip._ensureLoaded()
            },
            onEnable: function() {
                this.playOnLoad && this._firstlyEnabled && (this._firstlyEnabled = !1, this.play());
                cc.game.on(cc.game.EVENT_HIDE, this._pausedCallback, this);
                cc.game.on(cc.game.EVENT_SHOW, this._restoreCallback, this)
            },
            onDisable: function() {
                this.stop();
                cc.game.off(cc.game.EVENT_HIDE, this._pausedCallback, this);
                cc.game.off(cc.game.EVENT_SHOW, this._restoreCallback, this)
            },
            onDestroy: function() {
                this.audio.destroy()
            },
            play: function() {
                if (!1, this._clip) {
                    var d = this.audio;
                    d.setVolume(this._mute ?
                        0 : this._volume);
                    d.setLoop(this._loop);
                    d.setCurrentTime(0);
                    d.play()
                }
            },
            stop: function() {
                this.audio.stop()
            },
            pause: function() {
                this.audio.pause()
            },
            resume: function() {
                this.audio.resume()
            },
            rewind: function() {
                this.audio.setCurrentTime(0)
            },
            getCurrentTime: function() {
                return this.audio.getCurrentTime()
            },
            setCurrentTime: function(d) {
                this.audio.setCurrentTime(d);
                return d
            },
            getDuration: function() {
                return this.audio.getDuration()
            }
        });
        cc.AudioSource = q.exports = g
    }, {
        "../assets/CCAudioClip": 95,
        "../utils/misc": 310,
        "./CCComponent": 138
    }],
    135: [function(g, q, m) {
        function h(d) {
            d.stopPropagation()
        }
        var e = "touchstart touchmove touchend mousedown mousemove mouseup mouseenter mouseleave mousewheel".split(" ");
        g = cc.Class({
            name: "cc.BlockInputEvents",
            extends: g("./CCComponent"),
            editor: {
                menu: "i18n:MAIN_MENU.component.ui/Block Input Events",
                inspector: "packages://inspector/inspectors/comps/block-input-events.js",
                help: "i18n:COMPONENT.help_url.block_input_events"
            },
            onEnable: function() {
                for (var d = 0; d < e.length; d++) this.node.on(e[d], h, this)
            },
            onDisable: function() {
                for (var d =
                        0; d < e.length; d++) this.node.off(e[d], h, this)
            }
        });
        cc.BlockInputEvents = q.exports = g
    }, {
        "./CCComponent": 138
    }],
    136: [function(g, q, m) {
        m = g("./CCComponent");
        g = g("../utils/gray-sprite-state");
        var h = cc.Enum({
                NONE: 0,
                COLOR: 1,
                SPRITE: 2,
                SCALE: 3
            }),
            e = cc.Enum({
                NORMAL: 0,
                HOVER: 1,
                PRESSED: 2,
                DISABLED: 3
            });
        g = cc.Class({
            name: "cc.Button",
            extends: m,
            mixins: [g],
            ctor: function() {
                this._hovered = this._pressed = !1;
                this._toColor = this._fromColor = null;
                this._time = 0;
                this._transitionFinished = !0;
                this._toScale = this._fromScale = cc.Vec2.ZERO;
                this._sprite =
                    this._spriteMaterial = this._graySpriteMaterial = this._originalScale = null
            },
            editor: !1,
            properties: {
                interactable: {
                    default: !0,
                    tooltip: !1,
                    notify: function() {
                        this._updateState();
                        this.interactable || this._resetState()
                    },
                    animatable: !1
                },
                _resizeToTarget: {
                    animatable: !1,
                    set: function(d) {
                        d && this._resizeNodeToTargetNode()
                    }
                },
                enableAutoGrayEffect: {
                    default: !1,
                    tooltip: !1,
                    notify: function() {
                        this._updateDisabledState(!0)
                    }
                },
                transition: {
                    default: h.NONE,
                    tooltip: !1,
                    type: h,
                    animatable: !1,
                    notify: function(d) {
                        this._updateTransition(d)
                    },
                    formerlySerializedAs: "transition"
                },
                normalColor: {
                    default: cc.Color.WHITE,
                    displayName: "Normal",
                    tooltip: !1,
                    notify: function() {
                        this.transition === h.Color && this._getButtonState() === e.NORMAL && (this._getTarget().opacity = this.normalColor.a);
                        this._updateState()
                    }
                },
                pressedColor: {
                    default: cc.color(211, 211, 211),
                    displayName: "Pressed",
                    tooltip: !1,
                    notify: function() {
                        this.transition === h.Color && this._getButtonState() === e.PRESSED && (this._getTarget().opacity = this.pressedColor.a);
                        this._updateState()
                    },
                    formerlySerializedAs: "pressedColor"
                },
                hoverColor: {
                    default: cc.Color.WHITE,
                    displayName: "Hover",
                    tooltip: !1,
                    notify: function() {
                        this.transition === h.Color && this._getButtonState() === e.HOVER && (this._getTarget().opacity = this.hoverColor.a);
                        this._updateState()
                    },
                    formerlySerializedAs: "hoverColor"
                },
                disabledColor: {
                    default: cc.color(124, 124, 124),
                    displayName: "Disabled",
                    tooltip: !1,
                    notify: function() {
                        this.transition === h.Color && this._getButtonState() === e.DISABLED && (this._getTarget().opacity = this.disabledColor.a);
                        this._updateState()
                    }
                },
                duration: {
                    default: .1,
                    range: [0,
                        10
                    ],
                    tooltip: !1
                },
                zoomScale: {
                    default: 1.2,
                    tooltip: !1
                },
                normalSprite: {
                    default: null,
                    type: cc.SpriteFrame,
                    displayName: "Normal",
                    tooltip: !1,
                    notify: function() {
                        this._updateState()
                    }
                },
                pressedSprite: {
                    default: null,
                    type: cc.SpriteFrame,
                    displayName: "Pressed",
                    tooltip: !1,
                    formerlySerializedAs: "pressedSprite",
                    notify: function() {
                        this._updateState()
                    }
                },
                hoverSprite: {
                    default: null,
                    type: cc.SpriteFrame,
                    displayName: "Hover",
                    tooltip: !1,
                    formerlySerializedAs: "hoverSprite",
                    notify: function() {
                        this._updateState()
                    }
                },
                disabledSprite: {
                    default: null,
                    type: cc.SpriteFrame,
                    displayName: "Disabled",
                    tooltip: !1,
                    notify: function() {
                        this._updateState()
                    }
                },
                target: {
                    default: null,
                    type: cc.Node,
                    tooltip: !1,
                    notify: function(d) {
                        this._applyTarget();
                        d && this.target !== d && this._unregisterTargetEvent(d)
                    }
                },
                clickEvents: {
                    default: [],
                    type: cc.Component.EventHandler,
                    tooltip: !1
                }
            },
            statics: {
                Transition: h
            },
            __preload: function() {
                this._applyTarget();
                this._resetState()
            },
            _resetState: function() {
                this._hovered = this._pressed = !1;
                var d = this._getTarget(),
                    k = this.transition,
                    c = this._originalScale;
                k === h.COLOR && this.interactable ? this._setTargetColor(this.normalColor) : k === h.SCALE && c && d.setScale(c.x, c.y);
                this._transitionFinished = !0
            },
            onEnable: function() {
                this.normalSprite && this.normalSprite.ensureLoadTexture();
                this.hoverSprite && this.hoverSprite.ensureLoadTexture();
                this.pressedSprite && this.pressedSprite.ensureLoadTexture();
                this.disabledSprite && this.disabledSprite.ensureLoadTexture();
                !0;
                this._registerNodeEvent();
                this._updateState()
            },
            onDisable: function() {
                this._resetState();
                !0;
                this._unregisterNodeEvent()
            },
            _getTarget: function() {
                return this.target ? this.target : this.node
            },
            _onTargetSpriteFrameChanged: function(d) {
                this.transition === h.SPRITE && this._setCurrentStateSprite(d.spriteFrame)
            },
            _onTargetColorChanged: function(d) {
                this.transition === h.COLOR && this._setCurrentStateColor(d)
            },
            _onTargetScaleChanged: function() {
                var d = this._getTarget();
                this._originalScale && (this.transition !== h.SCALE || this._transitionFinished) && (this._originalScale.x = d.scaleX, this._originalScale.y = d.scaleY)
            },
            _setTargetColor: function(d) {
                var k = this._getTarget();
                d = d.clone();
                k.opacity = d.a;
                d.a = 255;
                k.color = d
            },
            _getStateColor: function(d) {
                switch (d) {
                    case e.NORMAL:
                        return this.normalColor;
                    case e.HOVER:
                        return this.hoverColor;
                    case e.PRESSED:
                        return this.pressedColor;
                    case e.DISABLED:
                        return this.disabledColor
                }
            },
            _getStateSprite: function(d) {
                switch (d) {
                    case e.NORMAL:
                        return this.normalSprite;
                    case e.HOVER:
                        return this.hoverSprite;
                    case e.PRESSED:
                        return this.pressedSprite;
                    case e.DISABLED:
                        return this.disabledSprite
                }
            },
            _setCurrentStateColor: function(d) {
                switch (this._getButtonState()) {
                    case e.NORMAL:
                        this.normalColor =
                            d;
                        break;
                    case e.HOVER:
                        this.hoverColor = d;
                        break;
                    case e.PRESSED:
                        this.pressedColor = d;
                        break;
                    case e.DISABLED:
                        this.disabledColor = d
                }
            },
            _setCurrentStateSprite: function(d) {
                switch (this._getButtonState()) {
                    case e.NORMAL:
                        this.normalSprite = d;
                        break;
                    case e.HOVER:
                        this.hoverSprite = d;
                        break;
                    case e.PRESSED:
                        this.pressedSprite = d;
                        break;
                    case e.DISABLED:
                        this.disabledSprite = d
                }
            },
            update: function(d) {
                var k = this._getTarget();
                this._transitionFinished || this.transition !== h.COLOR && this.transition !== h.SCALE || (this.time += d, d = 1, 0 < this.duration &&
                    (d = this.time / this.duration), 1 <= d && (d = 1), this.transition === h.COLOR ? (k = this._fromColor.lerp(this._toColor, d), this._setTargetColor(k)) : this.transition === h.SCALE && this._originalScale && (k.scale = this._fromScale.lerp(this._toScale, d)), 1 === d && (this._transitionFinished = !0))
            },
            _registerNodeEvent: function() {
                this.node.on(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this);
                this.node.on(cc.Node.EventType.TOUCH_MOVE, this._onTouchMove, this);
                this.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
                this.node.on(cc.Node.EventType.TOUCH_CANCEL,
                    this._onTouchCancel, this);
                this.node.on(cc.Node.EventType.MOUSE_ENTER, this._onMouseMoveIn, this);
                this.node.on(cc.Node.EventType.MOUSE_LEAVE, this._onMouseMoveOut, this)
            },
            _unregisterNodeEvent: function() {
                this.node.off(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this);
                this.node.off(cc.Node.EventType.TOUCH_MOVE, this._onTouchMove, this);
                this.node.off(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
                this.node.off(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancel, this);
                this.node.off(cc.Node.EventType.MOUSE_ENTER,
                    this._onMouseMoveIn, this);
                this.node.off(cc.Node.EventType.MOUSE_LEAVE, this._onMouseMoveOut, this)
            },
            _registerTargetEvent: function(d) {
                !1;
                d.on(cc.Node.EventType.SCALE_CHANGED, this._onTargetScaleChanged, this)
            },
            _unregisterTargetEvent: function(d) {
                !1;
                d.off(cc.Node.EventType.SCALE_CHANGED, this._onTargetScaleChanged, this)
            },
            _getTargetSprite: function(d) {
                var k = null;
                d && (k = d.getComponent(cc.Sprite));
                return k
            },
            _applyTarget: function() {
                var d = this._getTarget();
                this._sprite = this._getTargetSprite(d);
                this._originalScale ||
                    (this._originalScale = cc.Vec2.ZERO);
                this._originalScale.x = d.scaleX;
                this._originalScale.y = d.scaleY;
                this._registerTargetEvent(d)
            },
            _onTouchBegan: function(d) {
                this.interactable && this.enabledInHierarchy && (this._pressed = !0, this._updateState(), d.stopPropagation())
            },
            _onTouchMove: function(d) {
                if (this.interactable && this.enabledInHierarchy && this._pressed) {
                    var k = this.node._hitTest(d.touch.getLocation()),
                        c = this._getTarget(),
                        a = this._originalScale;
                    this.transition === h.SCALE && a ? k ? (this._fromScale.x = a.x, this._fromScale.y =
                        a.y, this._toScale.x = a.x * this.zoomScale, this._toScale.y = a.y * this.zoomScale, this._transitionFinished = !1) : (this.time = 0, this._transitionFinished = !0, c.setScale(a.x, a.y)) : this._applyTransition(k ? e.PRESSED : e.NORMAL);
                    d.stopPropagation()
                }
            },
            _onTouchEnded: function(d) {
                this.interactable && this.enabledInHierarchy && (this._pressed && (cc.Component.EventHandler.emitEvents(this.clickEvents, d), this.node.emit("click", this)), this._pressed = !1, this._updateState(), d.stopPropagation())
            },
            _onTouchCancel: function() {
                this.interactable &&
                    this.enabledInHierarchy && (this._pressed = !1, this._updateState())
            },
            _onMouseMoveIn: function() {
                this._pressed || !this.interactable || !this.enabledInHierarchy || this.transition === h.SPRITE && !this.hoverSprite || this._hovered || (this._hovered = !0, this._updateState())
            },
            _onMouseMoveOut: function() {
                this._hovered && (this._hovered = !1, this._updateState())
            },
            _updateState: function() {
                var d = this._getButtonState();
                this._applyTransition(d);
                this._updateDisabledState()
            },
            _getButtonState: function() {
                return this.interactable ? this._pressed ?
                    e.PRESSED : this._hovered ? e.HOVER : e.NORMAL : e.DISABLED
            },
            _updateColorTransitionImmediately: function(d) {
                d = this._getStateColor(d);
                this._setTargetColor(d);
                this._fromColor = d.clone();
                this._toColor = d
            },
            _updateColorTransition: function(d) {
                if (!1, d === e.DISABLED) this._updateColorTransitionImmediately(d);
                else {
                    var k = this._getTarget();
                    d = this._getStateColor(d);
                    this._fromColor = k.color.clone();
                    this._toColor = d;
                    this.time = 0;
                    this._transitionFinished = !1
                }
            },
            _updateSpriteTransition: function(d) {
                d = this._getStateSprite(d);
                this._sprite &&
                    d && (this._sprite.spriteFrame = d)
            },
            _updateScaleTransition: function(d) {
                d === e.PRESSED ? this._zoomUp() : this._zoomBack()
            },
            _zoomUp: function() {
                this._originalScale && (this._fromScale.x = this._originalScale.x, this._fromScale.y = this._originalScale.y, this._toScale.x = this._originalScale.x * this.zoomScale, this._toScale.y = this._originalScale.y * this.zoomScale, this.time = 0, this._transitionFinished = !1)
            },
            _zoomBack: function() {
                if (this._originalScale) {
                    var d = this._getTarget();
                    this._fromScale.x = d.scaleX;
                    this._fromScale.y = d.scaleY;
                    this._toScale.x = this._originalScale.x;
                    this._toScale.y = this._originalScale.y;
                    this.time = 0;
                    this._transitionFinished = !1
                }
            },
            _updateTransition: function(d) {
                d === h.COLOR ? this._updateColorTransitionImmediately(e.NORMAL) : d === h.SPRITE && this._updateSpriteTransition(e.NORMAL);
                this._updateState()
            },
            _applyTransition: function(d) {
                var k = this.transition;
                k === h.COLOR ? this._updateColorTransition(d) : k === h.SPRITE ? this._updateSpriteTransition(d) : k === h.SCALE && this._updateScaleTransition(d)
            },
            _resizeNodeToTargetNode: !1,
            _updateDisabledState: function(d) {
                this._sprite &&
                    (this.enableAutoGrayEffect || d) && (d = !1, this.transition === h.SPRITE && this.disabledSprite || (d = this.enableAutoGrayEffect && !this.interactable), this._switchGrayMaterial(d, this._sprite))
            }
        });
        cc.Button = q.exports = g
    }, {
        "../utils/gray-sprite-state": 307,
        "./CCComponent": 138
    }],
    137: [function(g, q, m) {
        var h = g("../camera/CCCamera");
        g = g("./CCComponent");
        var e = cc.Class({
            name: "cc.Canvas",
            extends: g,
            editor: !1,
            resetInEditor: !1,
            statics: {
                instance: null
            },
            properties: {
                _designResolution: cc.size(960, 640),
                designResolution: {
                    get: function() {
                        return cc.size(this._designResolution)
                    },
                    set: function(d) {
                        this._designResolution.width = d.width;
                        this._designResolution.height = d.height;
                        this.applySettings()
                    },
                    tooltip: !1
                },
                _fitWidth: !1,
                _fitHeight: !0,
                fitHeight: {
                    get: function() {
                        return this._fitHeight
                    },
                    set: function(d) {
                        this._fitHeight !== d && (this._fitHeight = d, this.applySettings())
                    },
                    tooltip: !1
                },
                fitWidth: {
                    get: function() {
                        return this._fitWidth
                    },
                    set: function(d) {
                        this._fitWidth !== d && (this._fitWidth = d, this.applySettings())
                    },
                    tooltip: !1
                }
            },
            _fitDesignResolution: !1,
            __preload: function() {
                !1;
                if (e.instance) return cc.warnID(6700,
                    this.node.name, e.instance.node.name);
                e.instance = this;
                this.applySettings();
                var d = this.getComponent(cc.Widget);
                d && d.updateAlignment();
                !1
            },
            start: function() {
                if (!h.main && cc.game.renderType !== cc.game.RENDER_TYPE_CANVAS) {
                    var d = new cc.Node("Main Camera");
                    d.parent = this.node;
                    d.setSiblingIndex(0);
                    d = d.addComponent(h);
                    var k = h.ClearFlags;
                    d.clearFlags = k.COLOR | k.DEPTH | k.STENCIL;
                    d.depth = -1
                }
            },
            onDestroy: function() {
                !1;
                e.instance === this && (e.instance = null)
            },
            applySettings: function() {
                var d = cc.ResolutionPolicy;
                d = this.fitHeight &&
                    this.fitWidth ? d.SHOW_ALL : this.fitHeight || this.fitWidth ? this.fitWidth ? d.FIXED_WIDTH : d.FIXED_HEIGHT : d.NO_BORDER;
                var k = this._designResolution;
                !1;
                cc.view.setDesignResolutionSize(k.width, k.height, d)
            }
        });
        cc.Canvas = q.exports = e
    }, {
        "../camera/CCCamera": 123,
        "./CCComponent": 138
    }],
    138: [function(g, q, m) {
        var h = g("../platform/CCObject");
        m = g("../platform/js");
        var e = new(g("../platform/id-generater"))("Comp"),
            d = h.Flags.IsOnLoadCalled,
            k = !!cc.ActionManager;
        g = cc.Class({
            name: "cc.Component",
            extends: h,
            ctor: function() {
                this._id =
                    e.getNewId();
                this.__eventTargets = []
            },
            properties: {
                node: {
                    default: null,
                    visible: !1
                },
                name: {
                    get: function() {
                        if (this._name) return this._name;
                        var c = cc.js.getClassName(this),
                            a = c.lastIndexOf(".");
                        0 <= a && (c = c.slice(a + 1));
                        return this.node.name + "<" + c + ">"
                    },
                    set: function(c) {
                        this._name = c
                    },
                    visible: !1
                },
                uuid: {
                    get: function() {
                        return this._id
                    },
                    visible: !1
                },
                __scriptAsset: !1,
                _enabled: !0,
                enabled: {
                    get: function() {
                        return this._enabled
                    },
                    set: function(c) {
                        if (this._enabled !== c && (this._enabled = c, this.node._activeInHierarchy)) {
                            var a = cc.director._compScheduler;
                            c ? a.enableComp(this) : a.disableComp(this)
                        }
                    },
                    visible: !1,
                    animatable: !0
                },
                enabledInHierarchy: {
                    get: function() {
                        !1;
                        return this._enabled && this.node && this.node._activeInHierarchy
                    },
                    visible: !1
                },
                _isOnLoadCalled: {
                    get: function() {
                        return this._objFlags & d
                    }
                }
            },
            update: null,
            lateUpdate: null,
            __preload: null,
            onLoad: null,
            start: null,
            onEnable: null,
            onDisable: null,
            onDestroy: null,
            onFocusInEditor: null,
            onLostFocusInEditor: null,
            resetInEditor: null,
            addComponent: function(c) {
                return this.node.addComponent(c)
            },
            getComponent: function(c) {
                return this.node.getComponent(c)
            },
            getComponents: function(c) {
                return this.node.getComponents(c)
            },
            getComponentInChildren: function(c) {
                return this.node.getComponentInChildren(c)
            },
            getComponentsInChildren: function(c) {
                return this.node.getComponentsInChildren(c)
            },
            _getLocalBounds: null,
            onRestore: null,
            destroy: function() {
                !1;
                this._super() && this._enabled && this.node._activeInHierarchy && cc.director._compScheduler.disableComp(this)
            },
            _onPreDestroy: function() {
                k && cc.director.getActionManager().removeAllActionsFromTarget(this);
                this.unscheduleAllCallbacks();
                for (var c = this.__eventTargets, a = c.length - 1; 0 <= a; --a) {
                    var b = c[a];
                    b && b.targetOff(this)
                }
                c.length = 0;
                !1;
                cc.director._nodeActivator.destroyComp(this);
                this.node._removeComponent(this)
            },
            _instantiate: function(c) {
                c || (c = cc.instantiate._clone(this, this));
                c.node = null;
                return c
            },
            schedule: function(c, a, b, d) {
                cc.assertID(c, 1619);
                a = a || 0;
                cc.assertID(0 <= a, 1620);
                b = isNaN(b) ? cc.macro.REPEAT_FOREVER : b;
                d = d || 0;
                var f = cc.director.getScheduler(),
                    l = f.isTargetPaused(this);
                f.schedule(c, this, a, b, d, l)
            },
            scheduleOnce: function(c, a) {
                this.schedule(c,
                    0, 0, a)
            },
            unschedule: function(c) {
                c && cc.director.getScheduler().unschedule(c, this)
            },
            unscheduleAllCallbacks: function() {
                cc.director.getScheduler().unscheduleAllForTarget(this)
            }
        });
        g._requireComponent = null;
        g._executionOrder = 0;
        !1;
        !1;
        !1;
        m.value(g, "_registerEditorProps", function(c, a) {
            var b = a.requireComponent;
            b && (c._requireComponent = b);
            (a = a.executionOrder) && "number" === typeof a && (c._executionOrder = a);
            !1;
            !1;
            !1
        });
        g.prototype.__scriptUuid = "";
        cc.Component = q.exports = g
    }, {
        "../platform/CCObject": 233,
        "../platform/id-generater": 244,
        "../platform/js": 248
    }],
    139: [function(g, q, m) {
        cc.Component.EventHandler = cc.Class({
            name: "cc.ClickEvent",
            properties: {
                target: {
                    default: null,
                    type: cc.Node
                },
                component: "",
                _componentId: "",
                _componentName: {
                    get: function() {
                        this._genCompIdIfNeeded();
                        return this._compId2Name(this._componentId)
                    },
                    set: function(h) {
                        this._componentId = this._compName2Id(h)
                    }
                },
                handler: {
                    default: ""
                },
                customEventData: {
                    default: ""
                }
            },
            statics: {
                emitEvents: function(h) {
                    if (0 < arguments.length) {
                        var e = Array(arguments.length - 1);
                        for (var d = 0, k = e.length; d < k; d++) e[d] =
                            arguments[d + 1]
                    }
                    d = 0;
                    for (k = h.length; d < k; d++) {
                        var c = h[d];
                        c instanceof cc.Component.EventHandler && c.emit(e)
                    }
                }
            },
            emit: function(h) {
                var e = this.target;
                if (cc.isValid(e)) {
                    this._genCompIdIfNeeded();
                    var d = cc.js._getClassById(this._componentId);
                    e = e.getComponent(d);
                    cc.isValid(e) && (d = e[this.handler], "function" === typeof d && (null != this.customEventData && "" !== this.customEventData && (h = h.slice(), h.push(this.customEventData)), d.apply(e, h)))
                }
            },
            _compName2Id: function(h) {
                h = cc.js.getClassByName(h);
                return cc.js._getClassId(h)
            },
            _compId2Name: function(h) {
                h = cc.js._getClassById(h);
                return cc.js.getClassName(h)
            },
            _genCompIdIfNeeded: function() {
                this._componentId || (this._componentName = this.component, this.component = "")
            }
        })
    }, {}],
    140: [function(g, q, m) {
        m = g("../platform/CCMacro");
        var h = g("./CCRenderComponent");
        g("../assets/material/CCMaterial");
        var e = g("../renderer/utils/label/label-frame"),
            d = g("../utils/blend-func"),
            k = g("../renderer/utils/utils").deleteFromDynamicAtlas;
        g = m.TextAlignment;
        m = m.VerticalTextAlignment;
        var c = cc.Enum({
                NONE: 0,
                CLAMP: 1,
                SHRINK: 2,
                RESIZE_HEIGHT: 3
            }),
            a = cc.Enum({
                NONE: 0,
                BITMAP: 1,
                CHAR: 2
            }),
            b = cc.Class({
                name: "cc.Label",
                extends: h,
                mixins: [d],
                ctor: function() {
                    !1;
                    this._actualFontSize = 0;
                    this._letterTexture = this._ttfTexture = this._frame = this._assemblerData = null;
                    cc.game.renderType === cc.game.RENDER_TYPE_CANVAS ? this._updateMaterial = this._updateMaterialCanvas : this._updateMaterial = this._updateMaterialWebgl
                },
                editor: !1,
                properties: {
                    _string: {
                        default: "",
                        formerlySerializedAs: "_N$string"
                    },
                    string: {
                        get: function() {
                            return this._string
                        },
                        set: function(a) {
                            var b =
                                this._string;
                            this._string = "" + a;
                            this.string !== b && this.setVertsDirty();
                            this._checkStringEmpty()
                        },
                        multiline: !0,
                        tooltip: !1
                    },
                    horizontalAlign: {
                        default: g.LEFT,
                        type: g,
                        tooltip: !1,
                        notify: function(a) {
                            this.horizontalAlign !== a && this.setVertsDirty()
                        },
                        animatable: !1
                    },
                    verticalAlign: {
                        default: m.TOP,
                        type: m,
                        tooltip: !1,
                        notify: function(a) {
                            this.verticalAlign !== a && this.setVertsDirty()
                        },
                        animatable: !1
                    },
                    actualFontSize: {
                        displayName: "Actual Font Size",
                        animatable: !1,
                        readonly: !0,
                        get: function() {
                            return this._actualFontSize
                        },
                        tooltip: !1
                    },
                    _fontSize: 40,
                    fontSize: {
                        get: function() {
                            return this._fontSize
                        },
                        set: function(a) {
                            this._fontSize !== a && (this._fontSize = a, this.setVertsDirty())
                        },
                        range: [0, 512],
                        tooltip: !1
                    },
                    fontFamily: {
                        default: "Arial",
                        tooltip: !1,
                        notify: function(a) {
                            this.fontFamily !== a && this.setVertsDirty()
                        },
                        animatable: !1
                    },
                    _lineHeight: 40,
                    lineHeight: {
                        get: function() {
                            return this._lineHeight
                        },
                        set: function(a) {
                            this._lineHeight !== a && (this._lineHeight = a, this.setVertsDirty())
                        },
                        tooltip: !1
                    },
                    overflow: {
                        default: c.NONE,
                        type: c,
                        tooltip: !1,
                        notify: function(a) {
                            this.overflow !==
                                a && this.setVertsDirty()
                        },
                        animatable: !1
                    },
                    _enableWrapText: !0,
                    enableWrapText: {
                        get: function() {
                            return this._enableWrapText
                        },
                        set: function(a) {
                            this._enableWrapText !== a && (this._enableWrapText = a, this.setVertsDirty())
                        },
                        animatable: !1,
                        tooltip: !1
                    },
                    _N$file: null,
                    font: {
                        get: function() {
                            return this._N$file
                        },
                        set: function(a) {
                            this.font !== a && (a || (this._isSystemFontUsed = !0), !1, (this._N$file = a) && this._isSystemFontUsed && (this._isSystemFontUsed = !1), this.enabledInHierarchy && this._forceUpdateRenderData())
                        },
                        type: cc.Font,
                        tooltip: !1,
                        animatable: !1
                    },
                    _isSystemFontUsed: !0,
                    useSystemFont: {
                        get: function() {
                            return this._isSystemFontUsed
                        },
                        set: function(a) {
                            if (this._isSystemFontUsed !== a) {
                                this._isSystemFontUsed = !!a;
                                !1;
                                if (a) {
                                    this.font = null;
                                    if (!this.enabledInHierarchy) return;
                                    this._forceUpdateRenderData()
                                }
                                this.markForValidate()
                            }
                        },
                        animatable: !1,
                        tooltip: !1
                    },
                    _bmFontOriginalSize: {
                        displayName: "BMFont Original Size",
                        get: function() {
                            return this._N$file instanceof cc.BitmapFont ? this._N$file.fontSize : -1
                        },
                        visible: !0,
                        animatable: !1
                    },
                    _spacingX: 0,
                    spacingX: {
                        get: function() {
                            return this._spacingX
                        },
                        set: function(a) {
                            this._spacingX = a;
                            this.setVertsDirty()
                        },
                        tooltip: !1
                    },
                    _batchAsBitmap: !1,
                    cacheMode: {
                        default: a.NONE,
                        type: a,
                        tooltip: !1,
                        notify: function(b) {
                            this.cacheMode !== b && (b !== a.BITMAP || this.font instanceof cc.BitmapFont || this._frame && this._frame._resetDynamicAtlasFrame(), b === a.CHAR && (this._ttfTexture = null), this.enabledInHierarchy && this._forceUpdateRenderData())
                        },
                        animatable: !1
                    },
                    _styleFlags: 0,
                    enableBold: {
                        get: function() {
                            return !!(this._styleFlags & 1)
                        },
                        set: function(a) {
                            a ? this._styleFlags |= 1 : this._styleFlags &=
                                -2;
                            this.setVertsDirty()
                        },
                        animatable: !1,
                        tooltip: !1
                    },
                    enableItalic: {
                        get: function() {
                            return !!(this._styleFlags & 2)
                        },
                        set: function(a) {
                            a ? this._styleFlags |= 2 : this._styleFlags &= -3;
                            this.setVertsDirty()
                        },
                        animatable: !1,
                        tooltip: !1
                    },
                    enableUnderline: {
                        get: function() {
                            return !!(this._styleFlags & 4)
                        },
                        set: function(a) {
                            a ? this._styleFlags |= 4 : this._styleFlags &= -5;
                            this.setVertsDirty()
                        },
                        animatable: !1,
                        tooltip: !1
                    },
                    _underlineHeight: 0,
                    underlineHeight: {
                        get: function() {
                            return this._underlineHeight
                        },
                        set: function(a) {
                            this._underlineHeight !==
                                a && (this._underlineHeight = a, this.setVertsDirty())
                        },
                        tooltip: !1
                    }
                },
                statics: {
                    HorizontalAlign: g,
                    VerticalAlign: m,
                    Overflow: c,
                    CacheMode: a,
                    _shareAtlas: null,
                    clearCharCache: function() {
                        b._shareAtlas && b._shareAtlas.clearAllCache()
                    }
                },
                onLoad: function() {
                    this._batchAsBitmap && this.cacheMode === a.NONE && (this.cacheMode = a.BITMAP, this._batchAsBitmap = !1);
                    cc.game.renderType === cc.game.RENDER_TYPE_CANVAS && (this.cacheMode = a.NONE)
                },
                onEnable: function() {
                    this._super();
                    this.node.on(cc.Node.EventType.SIZE_CHANGED, this._nodeSizeChanged,
                        this);
                    this.node.on(cc.Node.EventType.ANCHOR_CHANGED, this.setVertsDirty, this);
                    this.node.on(cc.Node.EventType.COLOR_CHANGED, this._nodeColorChanged, this);
                    this._forceUpdateRenderData()
                },
                onDisable: function() {
                    this._super();
                    this.node.off(cc.Node.EventType.SIZE_CHANGED, this._nodeSizeChanged, this);
                    this.node.off(cc.Node.EventType.ANCHOR_CHANGED, this.setVertsDirty, this);
                    this.node.off(cc.Node.EventType.COLOR_CHANGED, this._nodeColorChanged, this)
                },
                onDestroy: function() {
                    this._assembler && this._assembler._resetAssemblerData &&
                        this._assembler._resetAssemblerData(this._assemblerData);
                    this._letterTexture = this._assemblerData = null;
                    this._ttfTexture && (this._ttfTexture.destroy(), this._ttfTexture = null);
                    this._super()
                },
                onRestore: !1,
                _nodeSizeChanged: function() {
                    (!1, this.overflow !== c.NONE) && this.setVertsDirty()
                },
                _nodeColorChanged: function() {
                    this.font instanceof cc.BitmapFont || this.setVertsDirty()
                },
                setVertsDirty: function() {
                    !1;
                    this._super()
                },
                _updateColor: function() {
                    this.font instanceof cc.BitmapFont || this._srcBlendFactor === cc.macro.BlendFactor.SRC_ALPHA &&
                        this.node._renderFlag & cc.RenderFlow.FLAG_OPACITY || this.setVertsDirty();
                    h.prototype._updateColor.call(this)
                },
                _validateRender: function() {
                    if (this.string && this._materials[0]) {
                        var a = this.font;
                        if (!(a instanceof cc.BitmapFont)) return;
                        var b = a.spriteFrame;
                        if (b && b.textureLoaded() && a._fntConfig) return
                    }
                    this.disableRender()
                },
                _resetAssembler: function() {
                    this._resetFrame();
                    h.prototype._resetAssembler.call(this)
                },
                _resetFrame: function() {
                    !this._frame || this.font instanceof cc.BitmapFont || (k(this, this._frame), this._frame =
                        null)
                },
                _checkStringEmpty: function() {
                    this.markForRender(!!this.string)
                },
                _on3DNodeChanged: function() {
                    this._resetAssembler();
                    this._applyFontTexture()
                },
                _onBMFontTextureLoaded: function() {
                    this._frame._texture = this.font.spriteFrame._texture;
                    this.markForRender(!0);
                    this._updateMaterial();
                    this._assembler && this._assembler.updateRenderData(this)
                },
                _onBlendChanged: function() {
                    this.useSystemFont && this.enabledInHierarchy && this._forceUpdateRenderData()
                },
                _applyFontTexture: function() {
                    var b = this.font;
                    b instanceof cc.BitmapFont ?
                        (this._frame = b = b.spriteFrame) && b.onTextureLoaded(this._onBMFontTextureLoaded, this) : (this._nativeTTF() || (this._frame || (this._frame = new e), this.cacheMode === a.CHAR ? (this._letterTexture = this._assembler._getAssemblerData(), this._frame._refreshTexture(this._letterTexture)) : this._ttfTexture || (this._ttfTexture = new cc.Texture2D, this._assemblerData = this._assembler._getAssemblerData(), this._ttfTexture.initWithElement(this._assemblerData.canvas)), this.cacheMode !== a.CHAR && (this._frame._resetDynamicAtlasFrame(),
                            this._frame._refreshTexture(this._ttfTexture), this._srcBlendFactor === cc.macro.BlendFactor.ONE && this._ttfTexture.setPremultiplyAlpha(!0)), this._updateMaterial()), this._assembler && this._assembler.updateRenderData(this));
                    this.markForValidate()
                },
                _updateMaterialCanvas: function() {
                    this._frame && (this._frame._texture._nativeUrl = this.uuid + "_texture")
                },
                _updateMaterialWebgl: function() {
                    var a = this.getMaterial(0);
                    this._nativeTTF() ? a && this._assembler._updateTTFMaterial(this) : this._frame && (a && a.setProperty("texture",
                        this._frame._texture), d.prototype._updateMaterial.call(this))
                },
                _forceUseCanvas: !1,
                _useNativeTTF: function() {
                    return cc.macro.ENABLE_NATIVE_TTF_RENDERER && !this._forceUseCanvas
                },
                _nativeTTF: function() {
                    return this._useNativeTTF() && !!this._assembler && !!this._assembler._updateTTFMaterial
                },
                _forceUpdateRenderData: function() {
                    this.setVertsDirty();
                    this._resetAssembler();
                    this._applyFontTexture()
                },
                _enableBold: function(a) {
                    !0;
                    cc.warn("`label._enableBold` is deprecated, use `label.enableBold = true` instead please");
                    this.enableBold = !!a
                },
                _enableItalics: function(a) {
                    !0;
                    cc.warn("`label._enableItalics` is deprecated, use `label.enableItalics = true` instead please");
                    this.enableItalic = !!a
                },
                _enableUnderline: function(a) {
                    !0;
                    cc.warn("`label._enableUnderline` is deprecated, use `label.enableUnderline = true` instead please");
                    this.enableUnderline = !!a
                }
            });
        cc.Label = q.exports = b
    }, {
        "../assets/material/CCMaterial": 113,
        "../platform/CCMacro": 232,
        "../renderer/utils/label/label-frame": 262,
        "../renderer/utils/utils": 265,
        "../utils/blend-func": 304,
        "./CCRenderComponent": 149
    }],
    141: [function(g, q, m) {
        g = cc.Class({
            name: "cc.LabelOutline",
            extends: g("./CCComponent"),
            editor: !1,
            properties: {
                _color: cc.Color.WHITE,
                _width: 1,
                color: {
                    tooltip: !1,
                    get: function() {
                        return this._color.clone()
                    },
                    set: function(h) {
                        this._color.equals(h) || this._color.set(h);
                        this._updateRenderData()
                    }
                },
                width: {
                    tooltip: !1,
                    get: function() {
                        return this._width
                    },
                    set: function(h) {
                        this._width !== h && (this._width = h, this._updateRenderData())
                    },
                    range: [0, 512]
                }
            },
            onEnable: function() {
                this._updateRenderData()
            },
            onDisable: function() {
                this._updateRenderData()
            },
            _updateRenderData: function() {
                var h = this.node.getComponent(cc.Label);
                h && h.setVertsDirty()
            }
        });
        cc.LabelOutline = q.exports = g
    }, {
        "./CCComponent": 138
    }],
    142: [function(g, q, m) {
        g = cc.Class({
            name: "cc.LabelShadow",
            extends: g("./CCComponent"),
            editor: !1,
            properties: {
                _color: cc.Color.WHITE,
                _offset: cc.v2(2, 2),
                _blur: 2,
                color: {
                    tooltip: !1,
                    get: function() {
                        return this._color.clone()
                    },
                    set: function(h) {
                        this._color.equals(h) || this._color.set(h);
                        this._updateRenderData()
                    }
                },
                offset: {
                    tooltip: !1,
                    get: function() {
                        return this._offset
                    },
                    set: function(h) {
                        this._offset =
                            h;
                        this._updateRenderData()
                    }
                },
                blur: {
                    tooltip: !1,
                    get: function() {
                        return this._blur
                    },
                    set: function(h) {
                        this._blur = h;
                        this._updateRenderData()
                    },
                    range: [0, 1024]
                }
            },
            onEnable: function() {
                this._updateRenderData()
            },
            onDisable: function() {
                this._updateRenderData()
            },
            _updateRenderData: function() {
                var h = this.node.getComponent(cc.Label);
                h && h.setVertsDirty()
            }
        });
        cc.LabelShadow = q.exports = g
    }, {
        "./CCComponent": 138
    }],
    143: [function(g, q, m) {
        var h = g("../CCNode").EventType,
            e = cc.Enum({
                NONE: 0,
                HORIZONTAL: 1,
                VERTICAL: 2,
                GRID: 3
            }),
            d = cc.Enum({
                NONE: 0,
                CONTAINER: 1,
                CHILDREN: 2
            }),
            k = cc.Enum({
                HORIZONTAL: 0,
                VERTICAL: 1
            }),
            c = cc.Enum({
                BOTTOM_TO_TOP: 0,
                TOP_TO_BOTTOM: 1
            }),
            a = cc.Enum({
                LEFT_TO_RIGHT: 0,
                RIGHT_TO_LEFT: 1
            });
        g = cc.Class({
            name: "cc.Layout",
            extends: g("./CCComponent"),
            editor: !1,
            properties: {
                _layoutSize: cc.size(300, 200),
                _layoutDirty: {
                    default: !0,
                    serializable: !1
                },
                _resize: d.NONE,
                _N$layoutType: e.NONE,
                type: {
                    type: e,
                    get: function() {
                        return this._N$layoutType
                    },
                    set: function(a) {
                        this._N$layoutType = a;
                        !1;
                        this._doLayoutDirty()
                    },
                    tooltip: !1,
                    animatable: !1
                },
                resizeMode: {
                    type: d,
                    tooltip: !1,
                    animatable: !1,
                    get: function() {
                        return this._resize
                    },
                    set: function(a) {
                        if (this.type !== e.NONE || a !== d.CHILDREN) this._resize = a, !1, this._doLayoutDirty()
                    }
                },
                cellSize: {
                    default: cc.size(40, 40),
                    tooltip: !1,
                    type: cc.Size,
                    notify: function() {
                        this._doLayoutDirty()
                    }
                },
                startAxis: {
                    default: k.HORIZONTAL,
                    tooltip: !1,
                    type: k,
                    notify: function() {
                        !1;
                        this._doLayoutDirty()
                    },
                    animatable: !1
                },
                paddingLeft: {
                    default: 0,
                    tooltip: !1,
                    notify: function() {
                        this._doLayoutDirty()
                    }
                },
                paddingRight: {
                    default: 0,
                    tooltip: !1,
                    notify: function() {
                        this._doLayoutDirty()
                    }
                },
                paddingTop: {
                    default: 0,
                    tooltip: !1,
                    notify: function() {
                        this._doLayoutDirty()
                    }
                },
                paddingBottom: {
                    default: 0,
                    tooltip: !1,
                    notify: function() {
                        this._doLayoutDirty()
                    }
                },
                spacingX: {
                    default: 0,
                    notify: function() {
                        this._doLayoutDirty()
                    },
                    tooltip: !1
                },
                spacingY: {
                    default: 0,
                    notify: function() {
                        this._doLayoutDirty()
                    },
                    tooltip: !1
                },
                verticalDirection: {
                    default: c.TOP_TO_BOTTOM,
                    type: c,
                    notify: function() {
                        this._doLayoutDirty()
                    },
                    tooltip: !1,
                    animatable: !1
                },
                horizontalDirection: {
                    default: a.LEFT_TO_RIGHT,
                    type: a,
                    notify: function() {
                        this._doLayoutDirty()
                    },
                    tooltip: !1,
                    animatable: !1
                },
                affectedByScale: {
                    default: !1,
                    notify: function() {
                        this._doLayoutDirty()
                    },
                    animatable: !1,
                    tooltip: !1
                }
            },
            statics: {
                Type: e,
                VerticalDirection: c,
                HorizontalDirection: a,
                ResizeMode: d,
                AxisDirection: k
            },
            onEnable: function() {
                this._addEventListeners();
                this.node.getContentSize().equals(cc.size(0, 0)) && this.node.setContentSize(this._layoutSize);
                this._doLayoutDirty()
            },
            onDisable: function() {
                this._removeEventListeners()
            },
            _doLayoutDirty: function() {
                this._layoutDirty = !0
            },
            _doScaleDirty: function() {
                this._layoutDirty =
                    this._layoutDirty || this.affectedByScale
            },
            _addEventListeners: function() {
                cc.director.on(cc.Director.EVENT_AFTER_UPDATE, this.updateLayout, this);
                this.node.on(h.SIZE_CHANGED, this._resized, this);
                this.node.on(h.ANCHOR_CHANGED, this._doLayoutDirty, this);
                this.node.on(h.CHILD_ADDED, this._childAdded, this);
                this.node.on(h.CHILD_REMOVED, this._childRemoved, this);
                this.node.on(h.CHILD_REORDER, this._doLayoutDirty, this);
                this._addChildrenEventListeners()
            },
            _removeEventListeners: function() {
                cc.director.off(cc.Director.EVENT_AFTER_UPDATE,
                    this.updateLayout, this);
                this.node.off(h.SIZE_CHANGED, this._resized, this);
                this.node.off(h.ANCHOR_CHANGED, this._doLayoutDirty, this);
                this.node.off(h.CHILD_ADDED, this._childAdded, this);
                this.node.off(h.CHILD_REMOVED, this._childRemoved, this);
                this.node.off(h.CHILD_REORDER, this._doLayoutDirty, this);
                this._removeChildrenEventListeners()
            },
            _addChildrenEventListeners: function() {
                for (var a = this.node.children, c = 0; c < a.length; ++c) {
                    var d = a[c];
                    d.on(h.SCALE_CHANGED, this._doScaleDirty, this);
                    d.on(h.SIZE_CHANGED, this._doLayoutDirty,
                        this);
                    d.on(h.POSITION_CHANGED, this._doLayoutDirty, this);
                    d.on(h.ANCHOR_CHANGED, this._doLayoutDirty, this);
                    d.on("active-in-hierarchy-changed", this._doLayoutDirty, this)
                }
            },
            _removeChildrenEventListeners: function() {
                for (var a = this.node.children, c = 0; c < a.length; ++c) {
                    var d = a[c];
                    d.off(h.SCALE_CHANGED, this._doScaleDirty, this);
                    d.off(h.SIZE_CHANGED, this._doLayoutDirty, this);
                    d.off(h.POSITION_CHANGED, this._doLayoutDirty, this);
                    d.off(h.ANCHOR_CHANGED, this._doLayoutDirty, this);
                    d.off("active-in-hierarchy-changed", this._doLayoutDirty,
                        this)
                }
            },
            _childAdded: function(a) {
                a.on(h.SCALE_CHANGED, this._doScaleDirty, this);
                a.on(h.SIZE_CHANGED, this._doLayoutDirty, this);
                a.on(h.POSITION_CHANGED, this._doLayoutDirty, this);
                a.on(h.ANCHOR_CHANGED, this._doLayoutDirty, this);
                a.on("active-in-hierarchy-changed", this._doLayoutDirty, this);
                this._doLayoutDirty()
            },
            _childRemoved: function(a) {
                a.off(h.SCALE_CHANGED, this._doScaleDirty, this);
                a.off(h.SIZE_CHANGED, this._doLayoutDirty, this);
                a.off(h.POSITION_CHANGED, this._doLayoutDirty, this);
                a.off(h.ANCHOR_CHANGED, this._doLayoutDirty,
                    this);
                a.off("active-in-hierarchy-changed", this._doLayoutDirty, this);
                this._doLayoutDirty()
            },
            _resized: function() {
                this._layoutSize = this.node.getContentSize();
                this._doLayoutDirty()
            },
            _doLayoutHorizontally: function(b, l, f, k) {
                var n = this.node.getAnchorPoint(),
                    h = this.node.children,
                    p = 1,
                    t = this.paddingLeft,
                    g = -n.x * b;
                this.horizontalDirection === a.RIGHT_TO_LEFT && (p = -1, g = (1 - n.x) * b, t = this.paddingRight);
                for (var z = g + p * t - p * this.spacingX, E = 0, w = 0, A = 0, B = 0, y = 0, C = 0, m = 0, G = 0; G < h.length; ++G) {
                    var D = h[G];
                    D.activeInHierarchy && m++
                }
                var q =
                    this.cellSize.width;
                this.type !== e.GRID && this.resizeMode === d.CHILDREN && (q = (b - (this.paddingLeft + this.paddingRight) - (m - 1) * this.spacingX) / m);
                for (G = 0; G < h.length; ++G) {
                    D = h[G];
                    var K = this._getUsedScaleValue(D.scaleX);
                    m = this._getUsedScaleValue(D.scaleY);
                    if (D.activeInHierarchy) {
                        this._resize === d.CHILDREN && (D.width = q / K, this.type === e.GRID && (D.height = this.cellSize.height / m));
                        var L = D.anchorX;
                        K *= D.width;
                        var R = D.height * m;
                        A > w && (w = A);
                        R >= w && (A = w, w = R, C = D.getAnchorPoint().y);
                        this.horizontalDirection === a.RIGHT_TO_LEFT &&
                            (L = 1 - D.anchorX);
                        z = z + p * L * K + p * this.spacingX;
                        m = p * (1 - L) * K;
                        if (l) {
                            var M = z + m + p * (0 < p ? this.paddingRight : this.paddingLeft),
                                S = this.horizontalDirection === a.RIGHT_TO_LEFT && M < -n.x * b;
                            if (this.horizontalDirection === a.LEFT_TO_RIGHT && M > (1 - n.x) * b || S) R >= w ? (0 === A && (A = w), E += A, A = w) : (E += w, A = R, w = 0), z = g + p * (t + L * K), B++
                        }
                        L = f(D, E, B);
                        b >= K + this.paddingLeft + this.paddingRight && k && D.setPosition(cc.v2(z, L));
                        D = 1;
                        K = 0 === w ? R : w;
                        this.verticalDirection === c.TOP_TO_BOTTOM ? (y = y || this.node._contentSize.height, D = -1, D = L + D * (K * C + this.paddingBottom),
                            D < y && (y = D)) : (y = y || -this.node._contentSize.height, D = L + D * (K * C + this.paddingTop), D > y && (y = D));
                        z += m
                    }
                }
                return y
            },
            _getVerticalBaseHeight: function(a) {
                var b = 0,
                    c = 0;
                if (this.resizeMode === d.CONTAINER) {
                    for (var k = 0; k < a.length; ++k) {
                        var e = a[k];
                        e.activeInHierarchy && (c++, b += e.height * this._getUsedScaleValue(e.scaleY))
                    }
                    b += (c - 1) * this.spacingY + this.paddingBottom + this.paddingTop
                } else b = this.node.getContentSize().height;
                return b
            },
            _doLayoutVertically: function(b, l, f, k) {
                var n = this.node.getAnchorPoint(),
                    h = this.node.children,
                    p =
                    1,
                    t = this.paddingBottom,
                    g = -n.y * b;
                this.verticalDirection === c.TOP_TO_BOTTOM && (p = -1, g = (1 - n.y) * b, t = this.paddingTop);
                for (var z = g + p * t - p * this.spacingY, E = 0, w = 0, A = 0, B = 0, y = 0, C = 0, m = 0, G = 0; G < h.length; ++G) {
                    var D = h[G];
                    D.activeInHierarchy && m++
                }
                var q = this.cellSize.height;
                this.type !== e.GRID && this.resizeMode === d.CHILDREN && (q = (b - (this.paddingTop + this.paddingBottom) - (m - 1) * this.spacingY) / m);
                for (G = 0; G < h.length; ++G) {
                    D = h[G];
                    var K = this._getUsedScaleValue(D.scaleX);
                    m = this._getUsedScaleValue(D.scaleY);
                    if (D.activeInHierarchy) {
                        this.resizeMode ===
                            d.CHILDREN && (D.height = q / m, this.type === e.GRID && (D.width = this.cellSize.width / K));
                        var L = D.anchorY;
                        K *= D.width;
                        var R = D.height * m;
                        A > w && (w = A);
                        K >= w && (A = w, w = K, C = D.getAnchorPoint().x);
                        this.verticalDirection === c.TOP_TO_BOTTOM && (L = 1 - D.anchorY);
                        z = z + p * L * R + p * this.spacingY;
                        m = p * (1 - L) * R;
                        if (l) {
                            var M = z + m + p * (0 < p ? this.paddingTop : this.paddingBottom),
                                S = this.verticalDirection === c.TOP_TO_BOTTOM && M < -n.y * b;
                            if (this.verticalDirection === c.BOTTOM_TO_TOP && M > (1 - n.y) * b || S) K >= w ? (0 === A && (A = w), E += A, A = w) : (E += w, A = K, w = 0), z = g + p * (t + L * R), B++
                        }
                        L =
                            f(D, E, B);
                        b >= R + (this.paddingTop + this.paddingBottom) && k && D.setPosition(cc.v2(L, z));
                        D = 1;
                        K = 0 === w ? K : w;
                        this.horizontalDirection === a.RIGHT_TO_LEFT ? (D = -1, y = y || this.node._contentSize.width, D = L + D * (K * C + this.paddingLeft), D < y && (y = D)) : (y = y || -this.node._contentSize.width, D = L + D * (K * C + this.paddingRight), D > y && (y = D));
                        z += m
                    }
                }
                return y
            },
            _doLayoutBasic: function() {
                for (var a = this.node.children, c = null, d = 0; d < a.length; ++d) {
                    var k = a[d];
                    k.activeInHierarchy && (c ? c.union(c, k.getBoundingBoxToWorld()) : c = k.getBoundingBoxToWorld())
                }
                c &&
                    (a = this.node.convertToNodeSpaceAR(cc.v2(c.x, c.y)), a = cc.v2(a.x - this.paddingLeft, a.y - this.paddingBottom), c = this.node.convertToNodeSpaceAR(cc.v2(c.xMax, c.yMax)), c = cc.v2(c.x + this.paddingRight, c.y + this.paddingTop), c = c.sub(a), c = cc.size(parseFloat(c.x.toFixed(2)), parseFloat(c.y.toFixed(2))), 0 !== c.width && (this.node.anchorX = parseFloat((-a.x / c.width).toFixed(2))), 0 !== c.height && (this.node.anchorY = parseFloat((-a.y / c.height).toFixed(2))), this.node.setContentSize(c))
            },
            _doLayoutGridAxisHorizontal: function(a, l) {
                var b =
                    l.width,
                    k = 1,
                    e = -a.y * l.height,
                    h = this.paddingBottom;
                this.verticalDirection === c.TOP_TO_BOTTOM && (k = -1, e = (1 - a.y) * l.height, h = this.paddingTop);
                l = function(a, b, c) {
                    return e + k * (b + a.anchorY * a.height * this._getUsedScaleValue(a.scaleY) + h + c * this.spacingY)
                }.bind(this);
                var p = 0;
                this.resizeMode === d.CONTAINER && (p = this._doLayoutHorizontally(b, !0, l, !1), p = e - p, 0 > p && (p *= -1), e = -a.y * p, this.verticalDirection === c.TOP_TO_BOTTOM && (k = -1, e = (1 - a.y) * p));
                this._doLayoutHorizontally(b, !0, l, !0);
                this.resizeMode === d.CONTAINER && this.node.setContentSize(b,
                    p)
            },
            _doLayoutGridAxisVertical: function(b, c) {
                var f = c.height,
                    l = 1,
                    k = -b.x * c.width,
                    e = this.paddingLeft;
                this.horizontalDirection === a.RIGHT_TO_LEFT && (l = -1, k = (1 - b.x) * c.width, e = this.paddingRight);
                c = function(a, b, c) {
                    return k + l * (b + a.anchorX * a.width * this._getUsedScaleValue(a.scaleX) + e + c * this.spacingX)
                }.bind(this);
                var p = 0;
                this.resizeMode === d.CONTAINER && (p = this._doLayoutVertically(f, !0, c, !1), p = k - p, 0 > p && (p *= -1), k = -b.x * p, this.horizontalDirection === a.RIGHT_TO_LEFT && (l = -1, k = (1 - b.x) * p));
                this._doLayoutVertically(f, !0,
                    c, !0);
                this.resizeMode === d.CONTAINER && this.node.setContentSize(p, f)
            },
            _doLayoutGrid: function() {
                var a = this.node.getAnchorPoint(),
                    c = this.node.getContentSize();
                this.startAxis === k.HORIZONTAL ? this._doLayoutGridAxisHorizontal(a, c) : this.startAxis === k.VERTICAL && this._doLayoutGridAxisVertical(a, c)
            },
            _getHorizontalBaseWidth: function(a) {
                var b = 0,
                    c = 0;
                if (this.resizeMode === d.CONTAINER) {
                    for (var k = 0; k < a.length; ++k) {
                        var e = a[k];
                        e.activeInHierarchy && (c++, b += e.width * this._getUsedScaleValue(e.scaleX))
                    }
                    b += (c - 1) * this.spacingX +
                        this.paddingLeft + this.paddingRight
                } else b = this.node.getContentSize().width;
                return b
            },
            _doLayout: function() {
                if (this.type === e.HORIZONTAL) {
                    var a = this._getHorizontalBaseWidth(this.node.children);
                    this._doLayoutHorizontally(a, !1, function(a) {
                        return a.y
                    }, !0);
                    this.node.width = a
                } else this.type === e.VERTICAL ? (a = this._getVerticalBaseHeight(this.node.children), this._doLayoutVertically(a, !1, function(a) {
                        return a.x
                    }, !0), this.node.height = a) : this.type === e.NONE ? this.resizeMode === d.CONTAINER && this._doLayoutBasic() : this.type ===
                    e.GRID && this._doLayoutGrid()
            },
            _getUsedScaleValue: function(a) {
                return this.affectedByScale ? Math.abs(a) : 1
            },
            updateLayout: function() {
                this._layoutDirty && 0 < this.node.children.length && this.node.children.find(function(a) {
                    return a.activeInHierarchy
                }) && (this._doLayout(), this._layoutDirty = !1)
            }
        });
        cc.Layout = q.exports = g
    }, {
        "../CCNode": 61,
        "./CCComponent": 138
    }],
    144: [function(g, q, m) {
        function h(a) {
            return a && a.__esModule ? a : {
                default: a
            }
        }
        var e = h(g("../../renderer/gfx")),
            d = h(g("../value-types/mat4")),
            k = h(g("../value-types/vec2")),
            c = h(g("../assets/material/material-variant")),
            a = g("../utils/misc");
        m = g("./CCRenderComponent");
        var b = g("../renderer/render-flow"),
            l = g("../graphics/graphics"),
            f = new k["default"],
            n = new d["default"],
            u = [],
            v = cc.Enum({
                RECT: 0,
                ELLIPSE: 1,
                IMAGE_STENCIL: 2
            });
        g = cc.Class({
            name: "cc.Mask",
            extends: m,
            editor: !1,
            ctor: function() {
                this._clearMaterial = this._exitMaterial = this._enableMaterial = this._graphics = null
            },
            properties: {
                _spriteFrame: {
                    default: null,
                    type: cc.SpriteFrame
                },
                _type: v.RECT,
                type: {
                    get: function() {
                        return this._type
                    },
                    set: function(a) {
                        this._type !== a && this._resetAssembler();
                        this._type = a;
                        this._type !== v.IMAGE_STENCIL && (this.spriteFrame = null, this.alphaThreshold = 0, this._updateGraphics());
                        this._activateMaterial()
                    },
                    type: v,
                    tooltip: !1
                },
                spriteFrame: {
                    type: cc.SpriteFrame,
                    tooltip: !1,
                    get: function() {
                        return this._spriteFrame
                    },
                    set: function(a) {
                        var b = this._spriteFrame;
                        !1;
                        b !== a && (b && b.off("load", this.setVertsDirty, this), this._spriteFrame = a, this.setVertsDirty(), this._updateMaterial())
                    }
                },
                alphaThreshold: {
                    default: .1,
                    type: cc.Float,
                    range: [0,
                        1, .1
                    ],
                    slide: !0,
                    tooltip: !1,
                    notify: function() {
                        cc.game.renderType === cc.game.RENDER_TYPE_CANVAS ? cc.warnID(4201) : this._updateMaterial()
                    }
                },
                inverted: {
                    default: !1,
                    type: cc.Boolean,
                    tooltip: !1,
                    notify: function() {
                        cc.game.renderType === cc.game.RENDER_TYPE_CANVAS && cc.warnID(4202)
                    }
                },
                _segments: 64,
                segements: {
                    get: function() {
                        return this._segments
                    },
                    set: function(b) {
                        this._segments = a.clampf(b, 3, 1E4);
                        this._updateGraphics()
                    },
                    type: cc.Integer,
                    tooltip: !1
                },
                _resizeToTarget: {
                    animatable: !1,
                    set: function(a) {
                        a && this._resizeNodeToTargetNode()
                    }
                }
            },
            statics: {
                Type: v
            },
            onRestore: function() {
                this._activateMaterial()
            },
            onEnable: function() {
                this._super();
                this._type !== v.IMAGE_STENCIL ? this._updateGraphics() : this._spriteFrame && this._spriteFrame.once("load", this.setVertsDirty, this);
                this.node.on(cc.Node.EventType.POSITION_CHANGED, this._updateGraphics, this);
                this.node.on(cc.Node.EventType.ROTATION_CHANGED, this._updateGraphics, this);
                this.node.on(cc.Node.EventType.SCALE_CHANGED, this._updateGraphics, this);
                this.node.on(cc.Node.EventType.SIZE_CHANGED, this._updateGraphics,
                    this);
                this.node.on(cc.Node.EventType.ANCHOR_CHANGED, this._updateGraphics, this)
            },
            onDisable: function() {
                this._super();
                this.node.off(cc.Node.EventType.POSITION_CHANGED, this._updateGraphics, this);
                this.node.off(cc.Node.EventType.ROTATION_CHANGED, this._updateGraphics, this);
                this.node.off(cc.Node.EventType.SCALE_CHANGED, this._updateGraphics, this);
                this.node.off(cc.Node.EventType.SIZE_CHANGED, this._updateGraphics, this);
                this.node.off(cc.Node.EventType.ANCHOR_CHANGED, this._updateGraphics, this);
                this.node._renderFlag &=
                    ~b.FLAG_POST_RENDER
            },
            onDestroy: function() {
                this._super();
                this._removeGraphics();
                this._spriteFrame && this._spriteFrame.off("load", this.setVertsDirty, this)
            },
            _resizeNodeToTargetNode: !1,
            _validateRender: function() {
                if (this._type === v.IMAGE_STENCIL) {
                    var a = this._spriteFrame;
                    a && a.textureLoaded() || this.disableRender()
                }
            },
            _activateMaterial: function() {
                this._createGraphics();
                var a = this._materials[0];
                a = a ? c["default"].create(a, this) : c["default"].createWithBuiltin("2d-sprite", this);
                a.define("USE_ALPHA_TEST", !0);
                this._type ===
                    v.IMAGE_STENCIL ? (a.define("CC_USE_MODEL", !1), a.define("USE_TEXTURE", !0)) : (a.define("CC_USE_MODEL", !0), a.define("USE_TEXTURE", !1));
                this._enableMaterial || (this._enableMaterial = c["default"].createWithBuiltin("2d-sprite", this));
                this._exitMaterial || (this._exitMaterial = c["default"].createWithBuiltin("2d-sprite", this), this._exitMaterial.setStencilEnabled(e["default"].STENCIL_DISABLE));
                this._clearMaterial || (this._clearMaterial = c["default"].createWithBuiltin("clear-stencil", this));
                this.setMaterial(0, a);
                this._graphics._materials[0] =
                    a;
                this._updateMaterial()
            },
            _updateMaterial: function() {
                var a = this._materials[0];
                if (a) {
                    if (this._type === v.IMAGE_STENCIL && this.spriteFrame) {
                        var b = this.spriteFrame.getTexture();
                        a.setProperty("texture", b)
                    }
                    a.setProperty("alphaThreshold", this.alphaThreshold)
                }
            },
            _createGraphics: function() {
                this._graphics || (this._graphics = new l, cc.Assembler.init(this._graphics), this._graphics.node = this.node, this._graphics.lineWidth = 0, this._graphics.strokeColor = cc.color(0, 0, 0, 0))
            },
            _updateGraphics: function() {
                if (this.enabledInHierarchy) {
                    var a =
                        this.node,
                        b = this._graphics;
                    b.clear(!1);
                    var c = a._contentSize.width,
                        d = a._contentSize.height,
                        f = -c * a._anchorPoint.x;
                    a = -d * a._anchorPoint.y;
                    if (this._type === v.RECT) b.rect(f, a, c, d);
                    else if (this._type === v.ELLIPSE) {
                        f = cc.v2(f + c / 2, a + d / 2);
                        c /= 2;
                        d /= 2;
                        a = this._segments;
                        u.length = 0;
                        for (var l = 2 * Math.PI / a, k = 0; k < a; ++k) u.push(cc.v2(c * Math.cos(l * k) + f.x, d * Math.sin(l * k) + f.y));
                        for (f = 0; f < u.length; ++f) d = u[f], 0 === f ? b.moveTo(d.x, d.y) : b.lineTo(d.x, d.y);
                        b.close()
                    }
                    cc.game.renderType === cc.game.RENDER_TYPE_CANVAS ? b.stroke() : b.fill();
                    this.setVertsDirty()
                }
            },
            _removeGraphics: function() {
                this._graphics && (this._graphics.destroy(), this._graphics._destroyImmediate(), this._graphics = null)
            },
            _hitTest: function(a) {
                var b = this.node,
                    c = b.getContentSize(),
                    l = c.width;
                c = c.height;
                b._updateWorldMatrix();
                if (!d["default"].invert(n, b._worldMatrix)) return !1;
                k["default"].transformMat4(f, a, n);
                f.x += b._anchorPoint.x * l;
                f.y += b._anchorPoint.y * c;
                a = !1;
                this.type === v.RECT || this.type === v.IMAGE_STENCIL ? a = 0 <= f.x && 0 <= f.y && f.x <= l && f.y <= c : this.type === v.ELLIPSE && (a = l / 2, b =
                    c / 2, l = f.x - .5 * l, c = f.y - .5 * c, a = 1 > l * l / (a * a) + c * c / (b * b));
                this.inverted && (a = !a);
                return a
            },
            markForRender: function(a) {
                var c = b.FLAG_RENDER | b.FLAG_UPDATE_RENDER_DATA | b.FLAG_POST_RENDER;
                a ? (this.node._renderFlag |= c, this.markForValidate()) : a || (this.node._renderFlag &= ~c)
            },
            disableRender: function() {
                this.node._renderFlag &= ~(b.FLAG_RENDER | b.FLAG_UPDATE_RENDER_DATA | b.FLAG_POST_RENDER)
            }
        });
        cc.Mask = q.exports = g
    }, {
        "../../renderer/gfx": 358,
        "../assets/material/material-variant": 120,
        "../graphics/graphics": 190,
        "../renderer/render-flow": 260,
        "../utils/misc": 310,
        "../value-types/mat4": 327,
        "../value-types/vec2": 334,
        "./CCRenderComponent": 149
    }],
    145: [function(g, q, m) {
        m = g("../components/CCRenderComponent");
        var h = g("../../core/utils/blend-func");
        g = cc.Class({
            name: "cc.MotionStreak",
            extends: m,
            mixins: [h],
            editor: !1,
            ctor: function() {
                this._points = [];
                this._lastWPos = new cc.Vec2;
                this._lastWPosUpdated = !1
            },
            properties: {
                preview: {
                    default: !1,
                    editorOnly: !0,
                    notify: !1,
                    animatable: !1
                },
                _fadeTime: 1,
                fadeTime: {
                    get: function() {
                        return this._fadeTime
                    },
                    set: function(e) {
                        this._fadeTime =
                            e;
                        this.reset()
                    },
                    animatable: !1,
                    tooltip: !1
                },
                _minSeg: 1,
                minSeg: {
                    get: function() {
                        return this._minSeg
                    },
                    set: function(e) {
                        this._minSeg = e
                    },
                    animatable: !1,
                    tooltip: !1
                },
                _stroke: 64,
                stroke: {
                    get: function() {
                        return this._stroke
                    },
                    set: function(e) {
                        this._stroke = e
                    },
                    animatable: !1,
                    tooltip: !1
                },
                _texture: {
                    default: null,
                    type: cc.Texture2D
                },
                texture: {
                    get: function() {
                        return this._texture
                    },
                    set: function(e) {
                        this._texture !== e && (this._texture = e, this._updateMaterial())
                    },
                    type: cc.Texture2D,
                    animatable: !1,
                    tooltip: !1
                },
                _color: cc.Color.WHITE,
                color: {
                    get: function() {
                        return this._color.clone()
                    },
                    set: function(e) {
                        this._color.equals(e) || this._color.set(e)
                    },
                    type: cc.Color,
                    tooltip: !1
                },
                _fastMode: !1,
                fastMode: {
                    get: function() {
                        return this._fastMode
                    },
                    set: function(e) {
                        this._fastMode = e
                    },
                    animatable: !1,
                    tooltip: !1
                }
            },
            onEnable: function() {
                this._super();
                this.reset()
            },
            _updateMaterial: function() {
                var e = this.getMaterial(0);
                e && e.setProperty("texture", this._texture);
                h.prototype._updateMaterial.call(this)
            },
            onFocusInEditor: !1,
            onLostFocusInEditor: !1,
            reset: function() {
                this._points.length = 0;
                this._assembler && this._assembler._renderData.clear();
                this._lastWPosUpdated = !1;
                !1
            },
            lateUpdate: function(e) {
                this._assembler && this._assembler.update(this, e)
            }
        });
        cc.MotionStreak = q.exports = g
    }, {
        "../../core/utils/blend-func": 304,
        "../components/CCRenderComponent": 149
    }],
    146: [function(g, q, m) {
        var h = cc.Enum({
                Unified: 0,
                Free: 1
            }),
            e = cc.Enum({
                Horizontal: 0,
                Vertical: 1
            }),
            d = cc.Enum({
                PAGE_TURNING: 0
            });
        g = cc.Class({
            name: "cc.PageView",
            extends: cc.ScrollView,
            editor: !1,
            ctor: function() {
                this._lastPageIdx = this._curPageIdx = 0;
                this._pages = [];
                this._initContentPos = cc.v2();
                this._scrollCenterOffsetX = [];
                this._scrollCenterOffsetY = []
            },
            properties: {
                sizeMode: {
                    default: h.Unified,
                    type: h,
                    tooltip: !1,
                    notify: function() {
                        this._syncSizeMode()
                    }
                },
                direction: {
                    default: e.Horizontal,
                    type: e,
                    tooltip: !1,
                    notify: function() {
                        this._syncScrollDirection()
                    }
                },
                scrollThreshold: {
                    default: .5,
                    type: cc.Float,
                    slide: !0,
                    range: [0, 1, .01],
                    tooltip: !1
                },
                autoPageTurningThreshold: {
                    default: 100,
                    type: cc.Float,
                    tooltip: !1
                },
                pageTurningEventTiming: {
                    default: .1,
                    type: cc.Float,
                    range: [0, 1, .01],
                    tooltip: !1
                },
                indicator: {
                    default: null,
                    type: cc.PageViewIndicator,
                    tooltip: !1,
                    notify: function() {
                        this.indicator && this.indicator.setPageView(this)
                    }
                },
                pageTurningSpeed: {
                    default: .3,
                    type: cc.Float,
                    tooltip: !1
                },
                pageEvents: {
                    default: [],
                    type: cc.Component.EventHandler,
                    tooltip: !1
                }
            },
            statics: {
                SizeMode: h,
                Direction: e,
                EventType: d
            },
            onEnable: function() {
                this._super();
                this.node.on(cc.Node.EventType.SIZE_CHANGED, this._updateAllPagesSize, this);
                !0;
                this.node.on("scroll-ended-with-threshold", this._dispatchPageTurningEvent, this)
            },
            onDisable: function() {
                this._super();
                this.node.off(cc.Node.EventType.SIZE_CHANGED,
                    this._updateAllPagesSize, this);
                !0;
                this.node.off("scroll-ended-with-threshold", this._dispatchPageTurningEvent, this)
            },
            onLoad: function() {
                this._initPages();
                this.indicator && this.indicator.setPageView(this)
            },
            getCurrentPageIndex: function() {
                return this._curPageIdx
            },
            setCurrentPageIndex: function(d) {
                this.scrollToPage(d, !0)
            },
            getPages: function() {
                return this._pages
            },
            addPage: function(d) {
                d && -1 === this._pages.indexOf(d) && this.content && (this.content.addChild(d), this._pages.push(d), this._updatePageView())
            },
            insertPage: function(d,
                c) {
                0 > c || !d || -1 !== this._pages.indexOf(d) || !this.content || (c >= this._pages.length ? this.addPage(d) : (this._pages.splice(c, 0, d), this.content.addChild(d), this._updatePageView()))
            },
            removePage: function(d) {
                if (d && this.content) {
                    var c = this._pages.indexOf(d); - 1 === c ? cc.warnID(4300, d.name) : this.removePageAtIndex(c)
                }
            },
            removePageAtIndex: function(d) {
                var c = this._pages;
                if (!(0 > d || d >= c.length)) {
                    var a = c[d];
                    a && (this.content.removeChild(a), c.splice(d, 1), this._updatePageView())
                }
            },
            removeAllPages: function() {
                if (this.content) {
                    for (var d =
                            this._pages, c = 0, a = d.length; c < a; c++) this.content.removeChild(d[c]);
                    this._pages.length = 0;
                    this._updatePageView()
                }
            },
            scrollToPage: function(d, c) {
                0 > d || d >= this._pages.length || (c = void 0 !== c ? c : .3, this._curPageIdx = d, this.scrollToOffset(this._moveOffsetValue(d), c, !0), this.indicator && this.indicator._changedState())
            },
            getScrollEndedEventTiming: function() {
                return this.pageTurningEventTiming
            },
            _syncScrollDirection: function() {
                this.horizontal = this.direction === e.Horizontal;
                this.vertical = this.direction === e.Vertical
            },
            _syncSizeMode: function() {
                if (this.content) {
                    var d =
                        this.content.getComponent(cc.Layout);
                    if (d) {
                        if (this.sizeMode === h.Free && 0 < this._pages.length) {
                            var c = this._pages[this._pages.length - 1];
                            this.direction === e.Horizontal ? (d.paddingLeft = (this._view.width - this._pages[0].width) / 2, d.paddingRight = (this._view.width - c.width) / 2) : this.direction === e.Vertical && (d.paddingTop = (this._view.height - this._pages[0].height) / 2, d.paddingBottom = (this._view.height - c.height) / 2)
                        }
                        d.updateLayout()
                    }
                }
            },
            _updatePageView: function() {
                var d = this.content.getComponent(cc.Layout);
                d && d.enabled &&
                    d.updateLayout();
                d = this._pages.length;
                this._curPageIdx >= d && (this._lastPageIdx = this._curPageIdx = 0 === d ? 0 : d - 1);
                for (var c = this._initContentPos, a = 0; a < d; ++a) {
                    var b = this._pages[a];
                    b.setSiblingIndex(a);
                    this.direction === e.Horizontal ? this._scrollCenterOffsetX[a] = Math.abs(c.x + b.x) : this._scrollCenterOffsetY[a] = Math.abs(c.y + b.y)
                }
                this.indicator && this.indicator._refresh()
            },
            _updateAllPagesSize: function() {
                if (this.sizeMode === h.Unified && this._view)
                    for (var d = this._pages, c = this._view.getContentSize(), a = 0, b = d.length; a <
                        b; a++) d[a].setContentSize(c)
            },
            _initPages: function() {
                if (this.content) {
                    this._initContentPos = this.content.position;
                    for (var d = this.content.children, c = 0; c < d.length; ++c) {
                        var a = d[c];
                        0 <= this._pages.indexOf(a) || this._pages.push(a)
                    }
                    this._syncScrollDirection();
                    this._syncSizeMode();
                    this._updatePageView()
                }
            },
            _dispatchPageTurningEvent: function() {
                this._lastPageIdx !== this._curPageIdx && (this._lastPageIdx = this._curPageIdx, cc.Component.EventHandler.emitEvents(this.pageEvents, this, d.PAGE_TURNING), this.node.emit("page-turning",
                    this))
            },
            _isScrollable: function(d, c, a) {
                if (this.sizeMode === h.Free) {
                    if (this.direction === e.Horizontal) return c = this._scrollCenterOffsetX[c], a = this._scrollCenterOffsetX[a], Math.abs(d.x) >= Math.abs(c - a) * this.scrollThreshold;
                    if (this.direction === e.Vertical) return c = this._scrollCenterOffsetY[c], a = this._scrollCenterOffsetY[a], Math.abs(d.y) >= Math.abs(c - a) * this.scrollThreshold
                } else {
                    if (this.direction === e.Horizontal) return Math.abs(d.x) >= this._view.width * this.scrollThreshold;
                    if (this.direction === e.Vertical) return Math.abs(d.y) >=
                        this._view.height * this.scrollThreshold
                }
            },
            _isQuicklyScrollable: function(d) {
                if (this.direction === e.Horizontal) {
                    if (Math.abs(d.x) > this.autoPageTurningThreshold) return !0
                } else if (this.direction === e.Vertical && Math.abs(d.y) > this.autoPageTurningThreshold) return !0;
                return !1
            },
            _moveOffsetValue: function(d) {
                var c = cc.v2(0, 0);
                this.sizeMode === h.Free ? this.direction === e.Horizontal ? c.x = this._scrollCenterOffsetX[d] : this.direction === e.Vertical && (c.y = this._scrollCenterOffsetY[d]) : this.direction === e.Horizontal ? c.x = d * this._view.width :
                    this.direction === e.Vertical && (c.y = d * this._view.height);
                return c
            },
            _getDragDirection: function(d) {
                if (this.direction === e.Horizontal) return 0 === d.x ? 0 : 0 < d.x ? 1 : -1;
                if (this.direction === e.Vertical) return 0 === d.y ? 0 : 0 > d.y ? 1 : -1
            },
            _handleReleaseLogic: function(d) {
                this._autoScrollToPage();
                this._scrolling && (this._scrolling = !1, this._autoScrolling || this._dispatchEvent("scroll-ended"))
            },
            _autoScrollToPage: function() {
                if (this._startBounceBackIfNeeded()) {
                    var d = this._getHowMuchOutOfBoundary();
                    d = this._clampDelta(d);
                    (0 < d.x ||
                        0 > d.y) && (this._curPageIdx = 0 === this._pages.length ? 0 : this._pages.length - 1);
                    (0 > d.x || 0 < d.y) && (this._curPageIdx = 0);
                    this.indicator && this.indicator._changedState()
                } else {
                    var c = this._touchBeganPosition.sub(this._touchEndPosition);
                    d = this._curPageIdx;
                    var a = d + this._getDragDirection(c),
                        b = this.pageTurningSpeed * Math.abs(d - a);
                    if (a < this._pages.length) {
                        if (this._isScrollable(c, d, a)) {
                            this.scrollToPage(a, b);
                            return
                        }
                        c = this._calculateTouchMoveVelocity();
                        if (this._isQuicklyScrollable(c)) {
                            this.scrollToPage(a, b);
                            return
                        }
                    }
                    this.scrollToPage(d,
                        b)
                }
            },
            _onTouchBegan: function(d, c) {
                this._touchBeganPosition = d.touch.getLocation();
                this._super(d, c)
            },
            _onTouchMoved: function(d, c) {
                this._super(d, c)
            },
            _onTouchEnded: function(d, c) {
                this._touchEndPosition = d.touch.getLocation();
                this._super(d, c)
            },
            _onTouchCancelled: function(d, c) {
                this._touchEndPosition = d.touch.getLocation();
                this._super(d, c)
            },
            _onMouseWheel: function() {}
        });
        cc.PageView = q.exports = g
    }, {}],
    147: [function(g, q, m) {
        var h = cc.Enum({
            HORIZONTAL: 0,
            VERTICAL: 1
        });
        g = cc.Class({
            name: "cc.PageViewIndicator",
            extends: g("./CCComponent"),
            editor: !1,
            properties: {
                _layout: null,
                _pageView: null,
                _indicators: [],
                spriteFrame: {
                    default: null,
                    type: cc.SpriteFrame,
                    tooltip: !1
                },
                direction: {
                    default: h.HORIZONTAL,
                    type: h,
                    tooltip: !1
                },
                cellSize: {
                    default: cc.size(20, 20),
                    tooltip: !1
                },
                spacing: {
                    default: 0,
                    tooltip: !1
                }
            },
            statics: {
                Direction: h
            },
            onLoad: function() {
                this._updateLayout()
            },
            setPageView: function(e) {
                this._pageView = e;
                this._refresh()
            },
            _updateLayout: function() {
                (this._layout = this.getComponent(cc.Layout)) || (this._layout = this.addComponent(cc.Layout));
                this.direction ===
                    h.HORIZONTAL ? (this._layout.type = cc.Layout.Type.HORIZONTAL, this._layout.spacingX = this.spacing) : this.direction === h.VERTICAL && (this._layout.type = cc.Layout.Type.VERTICAL, this._layout.spacingY = this.spacing);
                this._layout.resizeMode = cc.Layout.ResizeMode.CONTAINER
            },
            _createIndicator: function() {
                var e = new cc.Node,
                    d = e.addComponent(cc.Sprite);
                d.spriteFrame = this.spriteFrame;
                d.sizeMode = cc.Sprite.SizeMode.CUSTOM;
                e.parent = this.node;
                e.width = this.cellSize.width;
                e.height = this.cellSize.height;
                return e
            },
            _changedState: function() {
                var e =
                    this._indicators;
                if (0 !== e.length) {
                    var d = this._pageView._curPageIdx;
                    if (!(d >= e.length)) {
                        for (var k = 0; k < e.length; ++k) e[k].opacity = 127.5;
                        e[d].opacity = 255
                    }
                }
            },
            _refresh: function() {
                if (this._pageView) {
                    var e = this._indicators,
                        d = this._pageView.getPages();
                    if (d.length !== e.length) {
                        var k;
                        if (d.length > e.length)
                            for (k = 0; k < d.length; ++k) e[k] || (e[k] = this._createIndicator());
                        else
                            for (k = e.length - d.length; 0 < k; --k) this.node.removeChild(e[k - 1]), e.splice(k - 1, 1);
                        this._layout && this._layout.enabledInHierarchy && this._layout.updateLayout();
                        this._changedState()
                    }
                }
            }
        });
        cc.PageViewIndicator = q.exports = g
    }, {
        "./CCComponent": 138
    }],
    148: [function(g, q, m) {
        var h = g("../utils/misc");
        g = g("./CCComponent");
        var e = cc.Enum({
            HORIZONTAL: 0,
            VERTICAL: 1,
            FILLED: 2
        });
        g = cc.Class({
            name: "cc.ProgressBar",
            extends: g,
            editor: !1,
            _initBarSprite: function() {
                if (this.barSprite) {
                    var d = this.barSprite.node;
                    if (d) {
                        var k = this.node.getContentSize(),
                            c = this.node.getAnchorPoint(),
                            a = d.getContentSize();
                        d.parent === this.node && this.node.setContentSize(a);
                        this.barSprite.fillType === cc.Sprite.FillType.RADIAL &&
                            (this.mode = e.FILLED);
                        a = d.getContentSize();
                        this.mode === e.HORIZONTAL ? this.totalLength = a.width : this.mode === e.VERTICAL ? this.totalLength = a.height : this.totalLength = this.barSprite.fillRange;
                        d.parent === this.node && d.setPosition(cc.v2(-k.width * c.x, 0))
                    }
                }
            },
            _updateBarStatus: function() {
                if (this.barSprite) {
                    var d = this.barSprite.node;
                    if (d) {
                        var k = d.getAnchorPoint(),
                            c = d.getContentSize(),
                            a = d.getPosition(),
                            b = cc.v2(0, .5),
                            l = h.clamp01(this.progress);
                        l *= this.totalLength;
                        switch (this.mode) {
                            case e.HORIZONTAL:
                                this.reverse && (b =
                                    cc.v2(1, .5));
                                var f = cc.size(l, c.height);
                                var n = this.totalLength;
                                var u = c.height;
                                break;
                            case e.VERTICAL:
                                b = this.reverse ? cc.v2(.5, 1) : cc.v2(.5, 0), f = cc.size(c.width, l), n = c.width, u = this.totalLength
                        }
                        this.mode === e.FILLED ? this.barSprite.type !== cc.Sprite.Type.FILLED ? cc.warn("ProgressBar FILLED mode only works when barSprite's Type is FILLED!") : (this.reverse && (l *= -1), this.barSprite.fillRange = l) : this.barSprite.type !== cc.Sprite.Type.FILLED ? (k = cc.v2(n * (b.x - k.x), u * (b.y - k.y)), d.setPosition(a.x + k.x, a.y + k.y), d.setAnchorPoint(b),
                            d.setContentSize(f)) : cc.warn("ProgressBar non-FILLED mode only works when barSprite's Type is non-FILLED!")
                    }
                }
            },
            properties: {
                barSprite: {
                    default: null,
                    type: cc.Sprite,
                    tooltip: !1,
                    notify: function() {
                        this._initBarSprite()
                    },
                    animatable: !1
                },
                mode: {
                    default: e.HORIZONTAL,
                    type: e,
                    tooltip: !1,
                    notify: function() {
                        if (this.barSprite) {
                            var d = this.barSprite.node;
                            d && (d = d.getContentSize(), this.mode === e.HORIZONTAL ? this.totalLength = d.width : this.mode === e.VERTICAL ? this.totalLength = d.height : this.mode === e.FILLED && (this.totalLength =
                                this.barSprite.fillRange))
                        }
                    },
                    animatable: !1
                },
                _N$totalLength: 1,
                totalLength: {
                    range: [0, Number.MAX_VALUE],
                    tooltip: !1,
                    get: function() {
                        return this._N$totalLength
                    },
                    set: function(d) {
                        this.mode === e.FILLED && (d = h.clamp01(d));
                        this._N$totalLength = d;
                        this._updateBarStatus()
                    }
                },
                progress: {
                    default: 1,
                    type: cc.Float,
                    range: [0, 1, .1],
                    slide: !0,
                    tooltip: !1,
                    notify: function() {
                        this._updateBarStatus()
                    }
                },
                reverse: {
                    default: !1,
                    tooltip: !1,
                    notify: function() {
                        this.barSprite && (this.barSprite.fillStart = 1 - this.barSprite.fillStart);
                        this._updateBarStatus()
                    },
                    animatable: !1
                }
            },
            statics: {
                Mode: e
            }
        });
        cc.ProgressBar = q.exports = g
    }, {
        "../utils/misc": 310,
        "./CCComponent": 138
    }],
    149: [function(g, q, m) {
        function h(a) {
            return a && a.__esModule ? a : {
                default: a
            }
        }
        var e = h(g("../renderer/assembler")),
            d = h(g("../assets/material/material-variant")),
            k = g("../value-types");
        m = g("./CCComponent");
        var c = g("../renderer/render-flow"),
            a = g("../assets/material/CCMaterial"),
            b = new k.Color;
        g = cc.Class({
            name: "RenderComponent",
            extends: m,
            editor: !1,
            properties: {
                _materials: {
                    default: [],
                    type: a
                },
                materials: {
                    get: function() {
                        return this._materials
                    },
                    set: function(a) {
                        this._materials = a;
                        this._activateMaterial()
                    },
                    type: [a],
                    displayName: "Materials",
                    animatable: !1
                }
            },
            ctor: function() {
                this._vertsDirty = !0;
                this._assembler = null
            },
            _resetAssembler: function() {
                e["default"].init(this);
                this._updateColor();
                this.setVertsDirty()
            },
            __preload: function() {
                this._resetAssembler();
                this._activateMaterial()
            },
            onEnable: function() {
                this.node._renderComponent && (this.node._renderComponent.enabled = !1);
                this.node._renderComponent = this;
                this.node._renderFlag |= c.FLAG_OPACITY_COLOR;
                this.setVertsDirty()
            },
            onDisable: function() {
                this.node._renderComponent = null;
                this.disableRender()
            },
            onDestroy: function() {
                for (var a = this._materials, b = 0; b < a.length; b++) cc.pool.material.put(a[b]);
                a.length = 0;
                cc.pool.assembler.put(this._assembler);
                this.disableRender()
            },
            setVertsDirty: function() {
                this._vertsDirty = !0;
                this.markForRender(!0)
            },
            _on3DNodeChanged: function() {
                this._resetAssembler()
            },
            _validateRender: function() {},
            markForValidate: function() {
                cc.RenderFlow.registerValidate(this)
            },
            markForRender: function(a) {
                var b = c.FLAG_RENDER |
                    c.FLAG_UPDATE_RENDER_DATA;
                a ? (this.node._renderFlag |= b, this.markForValidate()) : this.node._renderFlag &= ~b
            },
            disableRender: function() {
                this.node._renderFlag &= ~(c.FLAG_RENDER | c.FLAG_UPDATE_RENDER_DATA)
            },
            getMaterial: function(a) {
                if (0 > a || a >= this._materials.length) return null;
                var b = this._materials[a];
                if (!b) return null;
                var c = d["default"].create(b, this);
                c !== b && this.setMaterial(a, c);
                return c
            },
            getMaterials: function() {
                for (var a = this._materials, b = 0; b < a.length; b++) a[b] = d["default"].create(a[b], this);
                return a
            },
            setMaterial: function(a,
                b) {
                b !== this._materials[a] && (b = d["default"].create(b, this), this._materials[a] = b);
                this._updateMaterial();
                this.markForRender(!0);
                return b
            },
            _getDefaultMaterial: function() {
                return a.getBuiltinMaterial("2d-sprite")
            },
            _activateMaterial: function() {
                var a = this._materials;
                if (!a[0]) {
                    var b = this._getDefaultMaterial();
                    a[0] = b
                }
                for (b = 0; b < a.length; b++) a[b] = d["default"].create(a[b], this);
                this._updateMaterial()
            },
            _updateMaterial: function() {},
            _updateColor: function() {
                if (this._assembler.updateColor) {
                    var a = this.srcBlendFactor ===
                        cc.macro.BlendFactor.ONE;
                    a && k.Color.premultiplyAlpha(b, this.node._color);
                    this._assembler.updateColor(this, a ? b._val : null)
                }
            },
            _checkBacth: function(a, b) {
                var c = this._materials[0];
                if (c && c.getHash() !== a.material.getHash() || a.cullingMask !== b) a._flush(), a.node = c.getDefine("CC_USE_MODEL") ? this.node : a._dummyNode, a.material = c, a.cullingMask = b
            }
        });
        cc.RenderComponent = q.exports = g
    }, {
        "../assets/material/CCMaterial": 113,
        "../assets/material/material-variant": 120,
        "../renderer/assembler": 256,
        "../renderer/render-flow": 260,
        "../value-types": 325,
        "./CCComponent": 138
    }],
    150: [function(g, q, m) {
        m = g("../platform/js");
        var h = g("../platform/CCMacro"),
            e = g("../utils/text-utils"),
            d = new(g("../utils/html-text-parser")),
            k = h.TextAlignment,
            c = h.VerticalTextAlignment;
        g = cc.Label.CacheMode;
        var a = new m.Pool(function(a) {
            !1;
            !1;
            if (!cc.isValid(a)) return !1;
            (a = a.getComponent(cc.LabelOutline)) && (a.width = 0);
            return !0
        }, 20);
        a.get = function(a, d) {
            a = this._get();
            a || (a = new cc.PrivateNode("RICHTEXT_CHILD"), a._objFlags |= cc.Object.Flags.DontSave);
            a.setPosition(0,
                0);
            a.setAnchorPoint(.5, .5);
            a.skewX = 0;
            (d = a.getComponent(cc.Label)) || (d = a.addComponent(cc.Label));
            d.string = "";
            d.horizontalAlign = k.LEFT;
            d.verticalAlign = c.CENTER;
            d._forceUseCanvas = !0;
            return a
        };
        g = cc.Class({
            name: "cc.RichText",
            extends: cc.Component,
            ctor: function() {
                this._textArray = null;
                this._labelSegments = [];
                this._labelSegmentsCache = [];
                this._linesWidth = [];
                !1;
                this._updateRichTextStatus = this._updateRichText
            },
            editor: !1,
            properties: {
                string: {
                    default: "<color=#00ff00>Rich</c><color=#0fffff>Text</color>",
                    multiline: !0,
                    tooltip: !1,
                    notify: function() {
                        this._updateRichTextStatus()
                    }
                },
                horizontalAlign: {
                    default: k.LEFT,
                    type: k,
                    tooltip: !1,
                    animatable: !1,
                    notify: function(a) {
                        this.horizontalAlign !== a && (this._layoutDirty = !0, this._updateRichTextStatus())
                    }
                },
                fontSize: {
                    default: 40,
                    tooltip: !1,
                    notify: function(a) {
                        this.fontSize !== a && (this._layoutDirty = !0, this._updateRichTextStatus())
                    }
                },
                _fontFamily: "Arial",
                fontFamily: {
                    tooltip: !1,
                    get: function() {
                        return this._fontFamily
                    },
                    set: function(a) {
                        this._fontFamily !== a && (this._fontFamily = a, this._layoutDirty = !0, this._updateRichTextStatus())
                    },
                    animatable: !1
                },
                font: {
                    default: null,
                    type: cc.TTFFont,
                    tooltip: !1,
                    notify: function(a) {
                        this.font !== a && (this._layoutDirty = !0, this.font ? (!1, this.useSystemFont = !1, this._onTTFLoaded()) : this.useSystemFont = !0, this._updateRichTextStatus())
                    }
                },
                _isSystemFontUsed: !0,
                useSystemFont: {
                    get: function() {
                        return this._isSystemFontUsed
                    },
                    set: function(a) {
                        this._isSystemFontUsed !== a && (this._isSystemFontUsed = a, !1, this._layoutDirty = !0, this._updateRichTextStatus())
                    },
                    animatable: !1,
                    tooltip: !1
                },
                cacheMode: {
                    default: g.NONE,
                    type: g,
                    tooltip: !1,
                    notify: function(a) {
                        this.cacheMode !== a && this._updateRichTextStatus()
                    },
                    animatable: !1
                },
                maxWidth: {
                    default: 0,
                    tooltip: !1,
                    notify: function(a) {
                        this.maxWidth !== a && (this._layoutDirty = !0, this._updateRichTextStatus())
                    }
                },
                lineHeight: {
                    default: 40,
                    tooltip: !1,
                    notify: function(a) {
                        this.lineHeight !== a && (this._layoutDirty = !0, this._updateRichTextStatus())
                    }
                },
                imageAtlas: {
                    default: null,
                    type: cc.SpriteAtlas,
                    tooltip: !1,
                    notify: function(a) {
                        this.imageAtlas !== a && (this._layoutDirty = !0, this._updateRichTextStatus())
                    }
                },
                handleTouchEvent: {
                    default: !0,
                    tooltip: !1,
                    notify: function(a) {
                        this.handleTouchEvent !== a && this.enabledInHierarchy && (this.handleTouchEvent ? this._addEventListeners() : this._removeEventListeners())
                    }
                }
            },
            statics: {
                HorizontalAlign: k,
                VerticalAlign: c
            },
            onEnable: function() {
                this.handleTouchEvent && this._addEventListeners();
                this._onTTFLoaded();
                this._activateChildren(!0)
            },
            onDisable: function() {
                this.handleTouchEvent && this._removeEventListeners();
                this._activateChildren(!1)
            },
            _onColorChanged: function(a) {
                this.node.children.forEach(function(b) {
                    b.color =
                        a
                })
            },
            _addEventListeners: function() {
                this.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
                this.node.on(cc.Node.EventType.COLOR_CHANGED, this._onColorChanged, this)
            },
            _removeEventListeners: function() {
                this.node.off(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
                this.node.off(cc.Node.EventType.COLOR_CHANGED, this._onColorChanged, this)
            },
            _updateLabelSegmentTextAttributes: function() {
                this._labelSegments.forEach(function(a) {
                    this._applyTextAttribute(a, null, !0)
                }.bind(this))
            },
            _createFontLabel: function(b) {
                return a.get(b,
                    this)
            },
            _onTTFLoaded: function() {
                if (this.font instanceof cc.TTFFont)
                    if (this.font._nativeAsset) this._layoutDirty = !0, this._updateRichTextStatus();
                    else {
                        var a = this;
                        cc.assetManager.postLoadNative(this.font, function(b) {
                            a._layoutDirty = !0;
                            a._updateRichTextStatus()
                        })
                    }
                else this._layoutDirty = !0, this._updateRichTextStatus()
            },
            _measureText: function(a, c) {
                var b = this,
                    d = function(c) {
                        if (0 === b._labelSegmentsCache.length) {
                            var d = b._createFontLabel(c);
                            b._labelSegmentsCache.push(d)
                        } else d = b._labelSegmentsCache[0];
                        d._styleIndex =
                            a;
                        b._applyTextAttribute(d, c, !0);
                        return d.getContentSize().width
                    };
                return c ? d(c) : d
            },
            _onTouchEnded: function(a) {
                for (var b = this, c = this.node.getComponents(cc.Component), d = function() {
                        var d = b._labelSegments[k],
                            f = d._clickHandler,
                            l = d._clickParam;
                        f && b._containsTouchLocation(d, a.touch.getLocation()) && (c.forEach(function(b) {
                            b.enabledInHierarchy && b[f] && b[f](a, l)
                        }), a.stopPropagation())
                    }, k = 0; k < this._labelSegments.length; ++k) d()
            },
            _containsTouchLocation: function(a, c) {
                return a.getBoundingBoxToWorld().contains(c)
            },
            _resetState: function() {
                for (var b =
                        this.node.children, c = b.length - 1; 0 <= c; c--) {
                    var d = b[c];
                    if ("RICHTEXT_CHILD" === d.name || "RICHTEXT_Image_CHILD" === d.name) d.parent === this.node ? d.parent = null : b.splice(c, 1), "RICHTEXT_CHILD" === d.name && a.put(d)
                }
                this._labelSegments.length = 0;
                this._labelSegmentsCache.length = 0;
                this._lineOffsetX = this._linesWidth.length = 0;
                this._lineCount = 1;
                this._labelHeight = this._labelWidth = 0;
                this._layoutDirty = !0
            },
            onRestore: !1,
            _activateChildren: function(a) {
                for (var b = this.node.children.length - 1; 0 <= b; b--) {
                    var c = this.node.children[b];
                    "RICHTEXT_CHILD" !== c.name && "RICHTEXT_Image_CHILD" !== c.name || (c.active = a)
                }
            },
            _addLabelSegment: function(a, c) {
                var b = 0 === this._labelSegmentsCache.length ? this._createFontLabel(a) : this._labelSegmentsCache.pop();
                b._styleIndex = c;
                b._lineCount = this._lineCount;
                b.active = this.node.active;
                b.setAnchorPoint(0, 0);
                this._applyTextAttribute(b, a, !1);
                this.node.addChild(b);
                this._labelSegments.push(b);
                return b
            },
            _updateRichTextWithMaxWidth: function(a, c, d) {
                var b = c;
                if (0 < this._lineOffsetX && b + this._lineOffsetX > this.maxWidth)
                    for (c =
                        0; this._lineOffsetX <= this.maxWidth;) {
                        var f = this._getFirstWordLen(a, c, a.length),
                            l = a.substr(c, f);
                        l = this._measureText(d, l);
                        if (!(this._lineOffsetX + l <= this.maxWidth)) {
                            0 < c && (b = a.substr(0, c), this._addLabelSegment(b, d), a = a.substr(c, a.length), b = this._measureText(d, a));
                            this._updateLineInfo();
                            break
                        }
                        this._lineOffsetX += l;
                        c += f
                    }
                if (b > this.maxWidth)
                    for (a = e.fragmentText(a, b, this.maxWidth, this._measureText(d)), c = 0; c < a.length; ++c) b = this._addLabelSegment(a[c], d), b = b.getContentSize(), this._lineOffsetX += b.width, 1 < a.length &&
                        c < a.length - 1 && this._updateLineInfo();
                else this._lineOffsetX += b, this._addLabelSegment(a, d)
            },
            _isLastComponentCR: function(a) {
                return a.length - 1 === a.lastIndexOf("\n")
            },
            _updateLineInfo: function() {
                this._linesWidth.push(this._lineOffsetX);
                this._lineOffsetX = 0;
                this._lineCount++
            },
            _needsUpdateTextLayout: function(a) {
                if (this._layoutDirty || !this._textArray || !a || this._textArray.length !== a.length) return !0;
                for (var b = 0; b < this._textArray.length; ++b) {
                    var c = this._textArray[b],
                        d = a[b];
                    if (c.text !== d.text) return !0;
                    c = c.style;
                    d = d.style;
                    if (c)
                        if (d) {
                            if (!c.outline !== !d.outline || c.size !== d.size || !c.italic !== !d.italic || c.isImage !== d.isImage || c.src !== d.src || c.imageAlign !== d.imageAlign || c.imageHeight !== d.imageHeight || c.imageWidth !== d.imageWidth || c.imageOffset !== d.imageOffset) return !0
                        } else {
                            if (c.size || c.italic || c.isImage || c.outline) return !0
                        }
                    else if (d && (d.size || d.italic || d.isImage || d.outline)) return !0
                }
                return !1
            },
            _addRichTextImageElement: function(a) {
                var b = this.imageAtlas.getSpriteFrame(a.style.src);
                if (b) {
                    var c = new cc.PrivateNode("RICHTEXT_Image_CHILD");
                    c._objFlags |= cc.Object.Flags.DontSave;
                    var d = c.addComponent(cc.Sprite);
                    switch (a.style.imageAlign) {
                        case "top":
                            c.setAnchorPoint(0, 1);
                            break;
                        case "center":
                            c.setAnchorPoint(0, .5);
                            break;
                        default:
                            c.setAnchorPoint(0, 0)
                    }
                    a.style.imageOffset && (c._imageOffset = a.style.imageOffset);
                    d.type = cc.Sprite.Type.SLICED;
                    d.sizeMode = cc.Sprite.SizeMode.CUSTOM;
                    this.node.addChild(c);
                    this._labelSegments.push(c);
                    var k = b.getRect(),
                        e = k.width;
                    k = k.height;
                    var p = a.style.imageWidth;
                    var h = a.style.imageHeight;
                    h = 0 < h ? h / k : this.lineHeight / k;
                    e *= h;
                    k *= h;
                    0 < p && (e = p);
                    0 < this.maxWidth ? (this._lineOffsetX + e > this.maxWidth && this._updateLineInfo(), this._lineOffsetX += e) : (this._lineOffsetX += e, this._lineOffsetX > this._labelWidth && (this._labelWidth = this._lineOffsetX));
                    d.spriteFrame = b;
                    c.setContentSize(e, k);
                    c._lineCount = this._lineCount;
                    a.style.event ? (a.style.event.click && (c._clickHandler = a.style.event.click), a.style.event.param ? c._clickParam = a.style.event.param : c._clickParam = "") : c._clickHandler = null
                } else cc.warnID(4400)
            },
            _updateRichText: function() {
                if (this.enabledInHierarchy) {
                    var a =
                        d.parse(this.string);
                    if (this._needsUpdateTextLayout(a)) {
                        this._textArray = a;
                        this._resetState();
                        a = !1;
                        for (var c, f = 0; f < this._textArray.length; ++f) {
                            var k = this._textArray[f],
                                h = k.text;
                            if ("" === h) {
                                if (k.style && k.style.newline) {
                                    this._updateLineInfo();
                                    continue
                                }
                                if (k.style && k.style.isImage && this.imageAtlas) {
                                    this._addRichTextImageElement(k);
                                    continue
                                }
                            }
                            k = h.split("\n");
                            for (var g = 0; g < k.length; ++g)
                                if (c = k[g], "" === c) this._isLastComponentCR(h) && g === k.length - 1 || (this._updateLineInfo(), a = !0);
                                else {
                                    a = !1;
                                    if (0 < this.maxWidth) {
                                        var p =
                                            this._measureText(f, c);
                                        this._updateRichTextWithMaxWidth(c, p, f)
                                    } else c = this._addLabelSegment(c, f), c = c.getContentSize(), this._lineOffsetX += c.width, this._lineOffsetX > this._labelWidth && (this._labelWidth = this._lineOffsetX);
                                    1 < k.length && g < k.length - 1 && this._updateLineInfo()
                                }
                        }
                        a || this._linesWidth.push(this._lineOffsetX);
                        0 < this.maxWidth && (this._labelWidth = this.maxWidth);
                        this._labelHeight = (this._lineCount + e.BASELINE_RATIO) * this.lineHeight;
                        this.node.setContentSize(this._labelWidth, this._labelHeight);
                        this._updateRichTextPosition();
                        this._layoutDirty = !1
                    } else this._textArray = a, this._updateLabelSegmentTextAttributes()
                }
            },
            _getFirstWordLen: function(a, c, d) {
                var b = a.charAt(c);
                if (e.isUnicodeCJK(b) || e.isUnicodeSpace(b)) return 1;
                var f = 1;
                for (c += 1; c < d; ++c) {
                    b = a.charAt(c);
                    if (e.isUnicodeSpace(b) || e.isUnicodeCJK(b)) break;
                    f++
                }
                return f
            },
            _updateRichTextPosition: function() {
                for (var a = 0, c = 1, d = this._lineCount, n = 0; n < this._labelSegments.length; ++n) {
                    var h = this._labelSegments[n],
                        g = h._lineCount;
                    g > c && (a = 0, c = g);
                    var p = 0;
                    switch (this.horizontalAlign) {
                        case k.LEFT:
                            p = -this._labelWidth / 2;
                            break;
                        case k.CENTER:
                            p = -this._linesWidth[g - 1] / 2;
                            break;
                        case k.RIGHT:
                            p = this._labelWidth / 2 - this._linesWidth[g - 1]
                    }
                    h.x = a + p;
                    p = h.getContentSize();
                    h.y = this.lineHeight * (d - g) - this._labelHeight / 2;
                    g === c && (a += p.width);
                    if (h.getComponent(cc.Sprite)) {
                        g = this.lineHeight;
                        p = this.lineHeight * (1 + e.BASELINE_RATIO);
                        switch (h.anchorY) {
                            case 1:
                                h.y += g + (p - g) / 2;
                                break;
                            case .5:
                                h.y += p / 2;
                                break;
                            default:
                                h.y += (p - g) / 2
                        }
                        h._imageOffset && (p = h._imageOffset.split(","), 1 === p.length && p[0] ? (g = parseFloat(p[0]), Number.isInteger(g) &&
                            (h.y += g)) : 2 === p.length && (g = parseFloat(p[0]), p = parseFloat(p[1]), Number.isInteger(g) && (h.x += g), Number.isInteger(p) && (h.y += p)))
                    }(g = h.getComponent(cc.LabelOutline)) && g.width && (h.y -= g.width)
                }
            },
            _convertLiteralColorValue: function(a) {
                var b = a.toUpperCase();
                return cc.Color[b] ? cc.Color[b] : cc.color().fromHEX(a)
            },
            _applyTextAttribute: function(a, c, d) {
                var b = a.getComponent(cc.Label);
                if (b) {
                    var f = a._styleIndex,
                        l = null;
                    this._textArray[f] && (l = this._textArray[f].style);
                    l && l.color ? a.color = this._convertLiteralColorValue(l.color) :
                        a.color = this.node.color;
                    b.cacheMode = this.cacheMode;
                    this.font instanceof cc.Font && !this._isSystemFontUsed ? b.font = this.font : b.fontFamily = this.fontFamily;
                    b.useSystemFont = this._isSystemFontUsed;
                    b.lineHeight = this.lineHeight;
                    b.enableBold = l && l.bold;
                    b.enableItalics = l && l.italic;
                    l && l.italic && (a.skewX = 12);
                    b.enableUnderline = l && l.underline;
                    l && l.outline && ((f = a.getComponent(cc.LabelOutline)) || (f = a.addComponent(cc.LabelOutline)), f.color = this._convertLiteralColorValue(l.outline.color), f.width = l.outline.width);
                    l &&
                        l.size ? b.fontSize = l.size : b.fontSize = this.fontSize;
                    null !== c && ("string" !== typeof c && (c = "" + c), b.string = c);
                    d && b._forceUpdateRenderData();
                    l && l.event ? (l.event.click && (a._clickHandler = l.event.click), l.event.param ? a._clickParam = l.event.param : a._clickParam = "") : a._clickHandler = null
                }
            },
            onDestroy: function() {
                for (var b = 0; b < this._labelSegments.length; ++b) this._labelSegments[b].removeFromParent(), a.put(this._labelSegments[b])
            }
        });
        cc.RichText = q.exports = g
    }, {
        "../platform/CCMacro": 232,
        "../platform/js": 248,
        "../utils/html-text-parser": 308,
        "../utils/text-utils": 317
    }],
    151: [function(g, q, m) {
        var h = g("./CCWidget"),
            e = g("../base-ui/CCWidgetManager");
        g = cc.Class({
            name: "cc.SafeArea",
            extends: g("./CCComponent"),
            editor: !1,
            onEnable: function() {
                this.updateArea();
                cc.view.on("canvas-resize", this.updateArea, this)
            },
            onDisable: function() {
                cc.view.off("canvas-resize", this.updateArea, this)
            },
            updateArea: function() {
                var d = this.node.getComponent(h);
                if (d) {
                    !1;
                    d.updateAlignment();
                    var k = this.node.position,
                        c = this.node.getAnchorPoint();
                    d.isAlignTop = d.isAlignBottom = d.isAlignLeft =
                        d.isAlignRight = !0;
                    var a = cc.winSize.width,
                        b = cc.winSize.height,
                        l = cc.sys.getSafeAreaRect();
                    d.top = b - l.y - l.height;
                    d.bottom = l.y;
                    d.left = l.x;
                    d.right = a - l.x - l.width;
                    d.updateAlignment();
                    a = this.node.position;
                    this.node.setAnchorPoint(c.x - (a.x - k.x) / this.node.width, c.y - (a.y - k.y) / this.node.height);
                    e.add(d)
                }
            }
        });
        cc.SafeArea = q.exports = g
    }, {
        "../base-ui/CCWidgetManager": 122,
        "./CCComponent": 138,
        "./CCWidget": 160
    }],
    152: [function(g, q, m) {
        var h = g("../utils/misc");
        g("./CCComponent");
        var e = cc.Enum({
            HORIZONTAL: 0,
            VERTICAL: 1
        });
        g =
            cc.Class({
                name: "cc.Scrollbar",
                extends: g("./CCComponent"),
                editor: !1,
                properties: {
                    _scrollView: null,
                    _touching: !1,
                    _autoHideRemainingTime: {
                        default: 0,
                        serializable: !1
                    },
                    _opacity: 255,
                    handle: {
                        default: null,
                        type: cc.Sprite,
                        tooltip: !1,
                        notify: function() {
                            this._onScroll(cc.v2(0, 0))
                        },
                        animatable: !1
                    },
                    direction: {
                        default: e.HORIZONTAL,
                        type: e,
                        tooltip: !1,
                        notify: function() {
                            this._onScroll(cc.v2(0, 0))
                        },
                        animatable: !1
                    },
                    enableAutoHide: {
                        default: !0,
                        animatable: !1,
                        tooltip: !1
                    },
                    autoHideTime: {
                        default: 1,
                        animatable: !1,
                        tooltip: !1
                    }
                },
                statics: {
                    Direction: e
                },
                setTargetScrollView: function(d) {
                    this._scrollView = d
                },
                _convertToScrollViewSpace: function(d) {
                    var k = this._scrollView.node;
                    d = d.convertToWorldSpaceAR(cc.v2(-d.anchorX * d.width, -d.anchorY * d.height));
                    d = k.convertToNodeSpaceAR(d);
                    d.x += k.anchorX * k.width;
                    d.y += k.anchorY * k.height;
                    return d
                },
                _setOpacity: function(d) {
                    this.handle && (this.node.opacity = d, this.handle.node.opacity = d)
                },
                _onScroll: function(d) {
                    if (this._scrollView) {
                        var k = this._scrollView.content;
                        if (k) {
                            var c = k.getContentSize(),
                                a = this._scrollView.node.getContentSize(),
                                b = this.node.getContentSize();
                            if (!this._conditionalDisableScrollBar(c, a)) {
                                this.enableAutoHide && (this._autoHideRemainingTime = this.autoHideTime, this._setOpacity(this._opacity));
                                var l = 0,
                                    f = 0,
                                    n = 0,
                                    h = 0,
                                    g = 0;
                                this.direction === e.HORIZONTAL ? (l = c.width, f = a.width, g = b.width, n = d.x, h = -this._convertToScrollViewSpace(k).x) : this.direction === e.VERTICAL && (l = c.height, f = a.height, g = b.height, n = d.y, h = -this._convertToScrollViewSpace(k).y);
                                d = this._calculateLength(l, f, g, n);
                                l = this._calculatePosition(l, f, g, h, n, d);
                                this._updateLength(d);
                                this._updateHanlderPosition(l)
                            }
                        }
                    }
                },
                _updateHanlderPosition: function(d) {
                    if (this.handle) {
                        var k = this._fixupHandlerPosition();
                        this.handle.node.setPosition(d.x + k.x, d.y + k.y)
                    }
                },
                _fixupHandlerPosition: function() {
                    var d = this.node.getContentSize(),
                        k = this.node.getAnchorPoint(),
                        c = this.handle.node.getContentSize(),
                        a = this.handle.node.parent;
                    k = this.node.convertToWorldSpaceAR(cc.v2(-d.width * k.x, -d.height * k.y));
                    a = a.convertToNodeSpaceAR(k);
                    this.direction === e.HORIZONTAL ? a = cc.v2(a.x, a.y + (d.height - c.height) / 2) : this.direction ===
                        e.VERTICAL && (a = cc.v2(a.x + (d.width - c.width) / 2, a.y));
                    this.handle.node.setPosition(a);
                    return a
                },
                _onTouchBegan: function() {
                    this.enableAutoHide && (this._touching = !0)
                },
                _conditionalDisableScrollBar: function(d, k) {
                    return d.width <= k.width && this.direction === e.HORIZONTAL || d.height <= k.height && this.direction === e.VERTICAL ? !0 : !1
                },
                _onTouchEnded: function() {
                    if (this.enableAutoHide && (this._touching = !1, !(0 >= this.autoHideTime))) {
                        if (this._scrollView) {
                            var d = this._scrollView.content;
                            if (d) {
                                d = d.getContentSize();
                                var k = this._scrollView.node.getContentSize();
                                if (this._conditionalDisableScrollBar(d, k)) return
                            }
                        }
                        this._autoHideRemainingTime = this.autoHideTime
                    }
                },
                _calculateLength: function(d, k, c, a) {
                    a && (d += 20 * (0 < a ? a : -a));
                    return k / d * c
                },
                _calculatePosition: function(d, k, c, a, b, l) {
                    d -= k;
                    b && (d += Math.abs(b));
                    b = 0;
                    d && (b = h.clamp01(a / d));
                    c = (c - l) * b;
                    return this.direction === e.VERTICAL ? cc.v2(0, c) : cc.v2(c, 0)
                },
                _updateLength: function(d) {
                    if (this.handle) {
                        var k = this.handle.node,
                            c = k.getContentSize();
                        k.setAnchorPoint(cc.v2(0, 0));
                        this.direction === e.HORIZONTAL ? k.setContentSize(d, c.height) :
                            k.setContentSize(c.width, d)
                    }
                },
                _processAutoHide: function(d) {
                    !this.enableAutoHide || 0 >= this._autoHideRemainingTime || this._touching || (this._autoHideRemainingTime -= d, this._autoHideRemainingTime <= this.autoHideTime && (this._autoHideRemainingTime = Math.max(0, this._autoHideRemainingTime), this._setOpacity(this._autoHideRemainingTime / this.autoHideTime * this._opacity)))
                },
                start: function() {
                    this.enableAutoHide && this._setOpacity(0)
                },
                hide: function() {
                    this._autoHideRemainingTime = 0;
                    this._setOpacity(0)
                },
                show: function() {
                    this._autoHideRemainingTime =
                        this.autoHideTime;
                    this._setOpacity(this._opacity)
                },
                update: function(d) {
                    this._processAutoHide(d)
                }
            });
        cc.Scrollbar = q.exports = g
    }, {
        "../utils/misc": 310,
        "./CCComponent": 138
    }],
    153: [function(g, q, m) {
        var h = g("../CCNode").EventType,
            e = cc.v2(),
            d = cc.v2();
        m = cc.Enum({
            SCROLL_TO_TOP: 0,
            SCROLL_TO_BOTTOM: 1,
            SCROLL_TO_LEFT: 2,
            SCROLL_TO_RIGHT: 3,
            SCROLLING: 4,
            BOUNCE_TOP: 5,
            BOUNCE_BOTTOM: 6,
            BOUNCE_LEFT: 7,
            BOUNCE_RIGHT: 8,
            SCROLL_ENDED: 9,
            TOUCH_UP: 10,
            AUTOSCROLL_ENDED_WITH_THRESHOLD: 11,
            SCROLL_BEGAN: 12
        });
        var k = {
            "scroll-to-top": m.SCROLL_TO_TOP,
            "scroll-to-bottom": m.SCROLL_TO_BOTTOM,
            "scroll-to-left": m.SCROLL_TO_LEFT,
            "scroll-to-right": m.SCROLL_TO_RIGHT,
            scrolling: m.SCROLLING,
            "bounce-bottom": m.BOUNCE_BOTTOM,
            "bounce-left": m.BOUNCE_LEFT,
            "bounce-right": m.BOUNCE_RIGHT,
            "bounce-top": m.BOUNCE_TOP,
            "scroll-ended": m.SCROLL_ENDED,
            "touch-up": m.TOUCH_UP,
            "scroll-ended-with-threshold": m.AUTOSCROLL_ENDED_WITH_THRESHOLD,
            "scroll-began": m.SCROLL_BEGAN
        };
        g = cc.Class({
            name: "cc.ScrollView",
            extends: g("./CCViewGroup"),
            editor: !1,
            ctor: function() {
                this._rightBoundary = this._leftBoundary =
                    this._bottomBoundary = this._topBoundary = 0;
                this._touchMoveDisplacements = [];
                this._touchMoveTimeDeltas = [];
                this._touchMovePreviousTimestamp = 0;
                this._autoScrollAttenuate = this._autoScrolling = this._touchMoved = !1;
                this._autoScrollStartPosition = cc.v2(0, 0);
                this._autoScrollTargetDelta = cc.v2(0, 0);
                this._autoScrollAccumulatedTime = this._autoScrollTotalTime = 0;
                this._autoScrollBraking = this._autoScrollCurrentlyOutOfBoundary = !1;
                this._autoScrollBrakingStartPosition = cc.v2(0, 0);
                this._outOfBoundaryAmount = cc.v2(0, 0);
                this._outOfBoundaryAmountDirty = !0;
                this._stopMouseWheel = !1;
                this._mouseWheelEventElapsedTime = 0;
                this._isScrollEndedWithThresholdEventFired = !1;
                this._scrollEventEmitMask = 0;
                this._scrolling = this._isBouncing = !1
            },
            properties: {
                content: {
                    default: void 0,
                    type: cc.Node,
                    tooltip: !1,
                    formerlySerializedAs: "content",
                    notify: function(c) {
                        this._calculateBoundary()
                    }
                },
                horizontal: {
                    default: !0,
                    animatable: !1,
                    tooltip: !1
                },
                vertical: {
                    default: !0,
                    animatable: !1,
                    tooltip: !1
                },
                inertia: {
                    default: !0,
                    tooltip: !1
                },
                brake: {
                    default: .5,
                    type: cc.Float,
                    range: [0, 1, .1],
                    tooltip: !1
                },
                elastic: {
                    default: !0,
                    animatable: !1,
                    tooltip: !1
                },
                bounceDuration: {
                    default: 1,
                    range: [0, 10],
                    tooltip: !1
                },
                horizontalScrollBar: {
                    default: void 0,
                    type: cc.Scrollbar,
                    tooltip: !1,
                    notify: function() {
                        this.horizontalScrollBar && (this.horizontalScrollBar.setTargetScrollView(this), this._updateScrollBar(0))
                    },
                    animatable: !1
                },
                verticalScrollBar: {
                    default: void 0,
                    type: cc.Scrollbar,
                    tooltip: !1,
                    notify: function() {
                        this.verticalScrollBar && (this.verticalScrollBar.setTargetScrollView(this), this._updateScrollBar(0))
                    },
                    animatable: !1
                },
                scrollEvents: {
                    default: [],
                    type: cc.Component.EventHandler,
                    tooltip: !1
                },
                cancelInnerEvents: {
                    default: !0,
                    animatable: !1,
                    tooltip: !1
                },
                _view: {
                    get: function() {
                        if (this.content) return this.content.parent
                    }
                }
            },
            statics: {
                EventType: m
            },
            scrollToBottom: function(c, a) {
                var b = this._calculateMovePercentDelta({
                    anchor: cc.v2(0, 0),
                    applyToHorizontal: !1,
                    applyToVertical: !0
                });
                c ? this._startAutoScroll(b, c, !1 !== a) : this._moveContent(b, !0)
            },
            scrollToTop: function(c, a) {
                var b = this._calculateMovePercentDelta({
                    anchor: cc.v2(0, 1),
                    applyToHorizontal: !1,
                    applyToVertical: !0
                });
                c ? this._startAutoScroll(b, c, !1 !== a) : this._moveContent(b)
            },
            scrollToLeft: function(c, a) {
                var b = this._calculateMovePercentDelta({
                    anchor: cc.v2(0, 0),
                    applyToHorizontal: !0,
                    applyToVertical: !1
                });
                c ? this._startAutoScroll(b, c, !1 !== a) : this._moveContent(b)
            },
            scrollToRight: function(c, a) {
                var b = this._calculateMovePercentDelta({
                    anchor: cc.v2(1, 0),
                    applyToHorizontal: !0,
                    applyToVertical: !1
                });
                c ? this._startAutoScroll(b, c, !1 !== a) : this._moveContent(b)
            },
            scrollToTopLeft: function(c, a) {
                var b = this._calculateMovePercentDelta({
                    anchor: cc.v2(0,
                        1),
                    applyToHorizontal: !0,
                    applyToVertical: !0
                });
                c ? this._startAutoScroll(b, c, !1 !== a) : this._moveContent(b)
            },
            scrollToTopRight: function(c, a) {
                var b = this._calculateMovePercentDelta({
                    anchor: cc.v2(1, 1),
                    applyToHorizontal: !0,
                    applyToVertical: !0
                });
                c ? this._startAutoScroll(b, c, !1 !== a) : this._moveContent(b)
            },
            scrollToBottomLeft: function(c, a) {
                var b = this._calculateMovePercentDelta({
                    anchor: cc.v2(0, 0),
                    applyToHorizontal: !0,
                    applyToVertical: !0
                });
                c ? this._startAutoScroll(b, c, !1 !== a) : this._moveContent(b)
            },
            scrollToBottomRight: function(c,
                a) {
                var b = this._calculateMovePercentDelta({
                    anchor: cc.v2(1, 0),
                    applyToHorizontal: !0,
                    applyToVertical: !0
                });
                c ? this._startAutoScroll(b, c, !1 !== a) : this._moveContent(b)
            },
            scrollToOffset: function(c, a, b) {
                var d = this.getMaxScrollOffset(),
                    f = cc.v2(0, 0);
                0 === d.x ? f.x = 0 : f.x = c.x / d.x;
                0 === d.y ? f.y = 1 : f.y = (d.y - c.y) / d.y;
                this.scrollTo(f, a, b)
            },
            getScrollOffset: function() {
                var c = this._getContentTopBoundary() - this._topBoundary,
                    a = this._getContentLeftBoundary() - this._leftBoundary;
                return cc.v2(a, c)
            },
            getMaxScrollOffset: function() {
                var c =
                    this._view.getContentSize(),
                    a = this.content.getContentSize(),
                    b = a.width - c.width;
                c = a.height - c.height;
                return cc.v2(0 <= b ? b : 0, 0 <= c ? c : 0)
            },
            scrollToPercentHorizontal: function(c, a, b) {
                c = this._calculateMovePercentDelta({
                    anchor: cc.v2(c, 0),
                    applyToHorizontal: !0,
                    applyToVertical: !1
                });
                a ? this._startAutoScroll(c, a, !1 !== b) : this._moveContent(c)
            },
            scrollTo: function(c, a, b) {
                c = this._calculateMovePercentDelta({
                    anchor: cc.v2(c),
                    applyToHorizontal: !0,
                    applyToVertical: !0
                });
                a ? this._startAutoScroll(c, a, !1 !== b) : this._moveContent(c)
            },
            scrollToPercentVertical: function(c, a, b) {
                c = this._calculateMovePercentDelta({
                    anchor: cc.v2(0, c),
                    applyToHorizontal: !1,
                    applyToVertical: !0
                });
                a ? this._startAutoScroll(c, a, !1 !== b) : this._moveContent(c)
            },
            stopAutoScroll: function() {
                this._autoScrolling = !1;
                this._autoScrollAccumulatedTime = this._autoScrollTotalTime
            },
            setContentPosition: function(c) {
                c.fuzzyEquals(this.getContentPosition(), 1E-4) || (this.content.setPosition(c), this._outOfBoundaryAmountDirty = !0)
            },
            getContentPosition: function() {
                return this.content.getPosition()
            },
            isScrolling: function() {
                return this._scrolling
            },
            isAutoScrolling: function() {
                return this._autoScrolling
            },
            _registerEvent: function() {
                this.node.on(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this, !0);
                this.node.on(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this, !0);
                this.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this, !0);
                this.node.on(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancelled, this, !0);
                this.node.on(cc.Node.EventType.MOUSE_WHEEL, this._onMouseWheel, this, !0)
            },
            _unregisterEvent: function() {
                this.node.off(cc.Node.EventType.TOUCH_START,
                    this._onTouchBegan, this, !0);
                this.node.off(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this, !0);
                this.node.off(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this, !0);
                this.node.off(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancelled, this, !0);
                this.node.off(cc.Node.EventType.MOUSE_WHEEL, this._onMouseWheel, this, !0)
            },
            _onMouseWheel: function(c, a) {
                if (this.enabledInHierarchy && !this.hasNestedViewGroup(c, a)) {
                    a = cc.v2(0, 0);
                    var b = -.1;
                    cc.sys.os === cc.sys.OS_WINDOWS && cc.sys.browserType === cc.sys.BROWSER_TYPE_FIREFOX &&
                        (b = -.1 / 3);
                    !1;
                    !1;
                    this.vertical ? a = cc.v2(0, c.getScrollY() * b) : this.horizontal && (a = cc.v2(c.getScrollY() * b, 0));
                    this._mouseWheelEventElapsedTime = 0;
                    this._processDeltaMove(a);
                    this._stopMouseWheel || (this._handlePressLogic(), this.schedule(this._checkMouseWheel, 1 / 60), this._stopMouseWheel = !0);
                    this._stopPropagationIfTargetIsMe(c)
                }
            },
            _checkMouseWheel: function(c) {
                this._getHowMuchOutOfBoundary().fuzzyEquals(cc.v2(0, 0), 1E-4) ? (this._mouseWheelEventElapsedTime += c, .1 < this._mouseWheelEventElapsedTime && (this._onScrollBarTouchEnded(),
                    this.unschedule(this._checkMouseWheel), this._dispatchEvent("scroll-ended"), this._stopMouseWheel = !1)) : (this._processInertiaScroll(), this.unschedule(this._checkMouseWheel), this._dispatchEvent("scroll-ended"), this._stopMouseWheel = !1)
            },
            _calculateMovePercentDelta: function(c) {
                var a = c.anchor,
                    b = c.applyToHorizontal;
                c = c.applyToVertical;
                this._calculateBoundary();
                a = a.clampf(cc.v2(0, 0), cc.v2(1, 1));
                var d = this._view.getContentSize(),
                    f = this.content.getContentSize(),
                    k = this._getContentBottomBoundary() - this._bottomBoundary;
                k = -k;
                var e = this._getContentLeftBoundary() - this._leftBoundary;
                e = -e;
                var h = cc.v2(0, 0);
                b && (b = f.width - d.width, h.x = e - b * a.x);
                c && (b = f.height - d.height, h.y = k - b * a.y);
                return h
            },
            _moveContentToTopLeft: function(c) {
                var a = this.content.getContentSize(),
                    b = this._getContentBottomBoundary() - this._bottomBoundary;
                b = -b;
                var d = cc.v2(0, 0),
                    f = this._getContentLeftBoundary() - this._leftBoundary;
                f = -f;
                if (a.height < c.height) {
                    var k = a.height - c.height;
                    d.y = b - k
                }
                a.width < c.width && (d.x = f);
                this._updateScrollBarState();
                this._moveContent(d);
                this._adjustContentOutOfBoundary()
            },
            _calculateBoundary: function() {
                if (this.content) {
                    var c = this.content.getComponent(cc.Layout);
                    c && c.enabledInHierarchy && c.updateLayout();
                    c = this._view.getContentSize();
                    var a = c.height * this._view.anchorY;
                    this._leftBoundary = -(c.width * this._view.anchorX);
                    this._bottomBoundary = -a;
                    this._rightBoundary = this._leftBoundary + c.width;
                    this._topBoundary = this._bottomBoundary + c.height;
                    this._moveContentToTopLeft(c)
                }
            },
            hasNestedViewGroup: function(c, a) {
                if (c.eventPhase === cc.Event.CAPTURING_PHASE) {
                    if (a)
                        for (var b = 0; b < a.length; ++b) {
                            var d =
                                a[b];
                            if (this.node === d) {
                                if (c.target.getComponent(cc.ViewGroup)) return !0;
                                break
                            }
                            if (d.getComponent(cc.ViewGroup)) return !0
                        }
                    return !1
                }
            },
            _stopPropagationIfTargetIsMe: function(c) {
                c.eventPhase === cc.Event.AT_TARGET && c.target === this.node && c.stopPropagation()
            },
            _onTouchBegan: function(c, a) {
                this.enabledInHierarchy && !this.hasNestedViewGroup(c, a) && (a = c.touch, this.content && this._handlePressLogic(a), this._touchMoved = !1, this._stopPropagationIfTargetIsMe(c))
            },
            _onTouchMoved: function(c, a) {
                this.enabledInHierarchy && !this.hasNestedViewGroup(c,
                    a) && (a = c.touch, this.content && this._handleMoveLogic(a), this.cancelInnerEvents && (7 < a.getLocation().sub(a.getStartLocation()).mag() && !this._touchMoved && c.target !== this.node && (a = new cc.Event.EventTouch(c.getTouches(), c.bubbles), a.type = cc.Node.EventType.TOUCH_CANCEL, a.touch = c.touch, a.simulate = !0, c.target.dispatchEvent(a), this._touchMoved = !0), this._stopPropagationIfTargetIsMe(c)))
            },
            _onTouchEnded: function(c, a) {
                this.enabledInHierarchy && !this.hasNestedViewGroup(c, a) && (this._dispatchEvent("touch-up"), a = c.touch,
                    this.content && this._handleReleaseLogic(a), this._touchMoved ? c.stopPropagation() : this._stopPropagationIfTargetIsMe(c))
            },
            _onTouchCancelled: function(c, a) {
                this.enabledInHierarchy && !this.hasNestedViewGroup(c, a) && (c.simulate || (a = c.touch, this.content && this._handleReleaseLogic(a)), this._stopPropagationIfTargetIsMe(c))
            },
            _processDeltaMove: function(c) {
                this._scrollChildren(c);
                this._gatherTouchMove(c)
            },
            _getLocalAxisAlignDelta: function(c) {
                this.node.convertToNodeSpaceAR(c.getLocation(), e);
                this.node.convertToNodeSpaceAR(c.getPreviousLocation(),
                    d);
                return e.sub(d)
            },
            _handleMoveLogic: function(c) {
                c = this._getLocalAxisAlignDelta(c);
                this._processDeltaMove(c)
            },
            _scrollChildren: function(c) {
                c = this._clampDelta(c);
                if (this.elastic) {
                    var a = this._getHowMuchOutOfBoundary();
                    c.x *= 0 === a.x ? 1 : .5;
                    c.y *= 0 === a.y ? 1 : .5
                }
                this.elastic || (a = this._getHowMuchOutOfBoundary(c), c = c.add(a));
                var b = a = "";
                this.vertical && (0 < c.y ? this.content.y - this.content.anchorY * this.content.height + c.y >= this._bottomBoundary && (a = "scroll-to-bottom") : 0 > c.y && this.content.y - this.content.anchorY * this.content.height +
                    this.content.height + c.y <= this._topBoundary && (a = "scroll-to-top"));
                this.horizontal && (0 > c.x ? this.content.x - this.content.anchorX * this.content.width + this.content.width + c.x <= this._rightBoundary && (b = "scroll-to-right") : 0 < c.x && this.content.x - this.content.anchorX * this.content.width + c.x >= this._leftBoundary && (b = "scroll-to-left"));
                this._moveContent(c, !1);
                if (this.horizontal && 0 !== c.x || this.vertical && 0 !== c.y) this._scrolling || (this._scrolling = !0, this._dispatchEvent("scroll-began")), this._dispatchEvent("scrolling");
                "" !== a && this._dispatchEvent(a);
                "" !== b && this._dispatchEvent(b)
            },
            _handlePressLogic: function() {
                this._autoScrolling && this._dispatchEvent("scroll-ended");
                this._isBouncing = this._autoScrolling = !1;
                this._touchMovePreviousTimestamp = (new Date).getMilliseconds();
                this._touchMoveDisplacements.length = 0;
                this._touchMoveTimeDeltas.length = 0;
                this._onScrollBarTouchBegan()
            },
            _clampDelta: function(c) {
                var a = this.content.getContentSize(),
                    b = this._view.getContentSize();
                a.width < b.width && (c.x = 0);
                a.height < b.height && (c.y = 0);
                return c
            },
            _gatherTouchMove: function(c) {
                for (c = this._clampDelta(c); 5 <= this._touchMoveDisplacements.length;) this._touchMoveDisplacements.shift(), this._touchMoveTimeDeltas.shift();
                this._touchMoveDisplacements.push(c);
                c = (new Date).getMilliseconds();
                this._touchMoveTimeDeltas.push((c - this._touchMovePreviousTimestamp) / 1E3);
                this._touchMovePreviousTimestamp = c
            },
            _startBounceBackIfNeeded: function() {
                if (!this.elastic) return !1;
                var c = this._getHowMuchOutOfBoundary();
                c = this._clampDelta(c);
                if (c.fuzzyEquals(cc.v2(0, 0), 1E-4)) return !1;
                this._startAutoScroll(c, Math.max(this.bounceDuration, 0), !0);
                this._isBouncing || (0 < c.y && this._dispatchEvent("bounce-top"), 0 > c.y && this._dispatchEvent("bounce-bottom"), 0 < c.x && this._dispatchEvent("bounce-right"), 0 > c.x && this._dispatchEvent("bounce-left"), this._isBouncing = !0);
                return !0
            },
            _processInertiaScroll: function() {
                if (!this._startBounceBackIfNeeded() && this.inertia) {
                    var c = this._calculateTouchMoveVelocity();
                    !c.fuzzyEquals(cc.v2(0, 0), 1E-4) && 1 > this.brake && this._startInertiaScroll(c)
                }
                this._onScrollBarTouchEnded()
            },
            _handleReleaseLogic: function(c) {
                c = this._getLocalAxisAlignDelta(c);
                this._gatherTouchMove(c);
                this._processInertiaScroll();
                this._scrolling && (this._scrolling = !1, this._autoScrolling || this._dispatchEvent("scroll-ended"))
            },
            _isOutOfBoundary: function() {
                return !this._getHowMuchOutOfBoundary().fuzzyEquals(cc.v2(0, 0), 1E-4)
            },
            _isNecessaryAutoScrollBrake: function() {
                if (this._autoScrollBraking) return !0;
                if (this._isOutOfBoundary()) {
                    if (!this._autoScrollCurrentlyOutOfBoundary) return this._autoScrollBraking = this._autoScrollCurrentlyOutOfBoundary = !0, this._autoScrollBrakingStartPosition = this.getContentPosition(), !0
                } else this._autoScrollCurrentlyOutOfBoundary = !1;
                return !1
            },
            getScrollEndedEventTiming: function() {
                return 1E-4
            },
            _processAutoScrolling: function(c) {
                var a = this._isNecessaryAutoScrollBrake(),
                    b = a ? .05 : 1;
                this._autoScrollAccumulatedTime += 1 / b * c;
                var d = Math.min(1, this._autoScrollAccumulatedTime / this._autoScrollTotalTime);
                this._autoScrollAttenuate && (c = d - 1, d = c * c * c * c * c + 1);
                var f = this._autoScrollStartPosition.add(this._autoScrollTargetDelta.mul(d));
                c = 1E-4 >= Math.abs(d - 1);
                Math.abs(d - 1) <= this.getScrollEndedEventTiming() && !this._isScrollEndedWithThresholdEventFired && (this._dispatchEvent("scroll-ended-with-threshold"), this._isScrollEndedWithThresholdEventFired = !0);
                this.elastic ? (f = f.sub(this._autoScrollBrakingStartPosition), a && (f = f.mul(b)), f = this._autoScrollBrakingStartPosition.add(f)) : (a = f.sub(this.getContentPosition()), a = this._getHowMuchOutOfBoundary(a), a.fuzzyEquals(cc.v2(0, 0), 1E-4) || (f = f.add(a), c = !0));
                c && (this._autoScrolling = !1);
                a = f.sub(this.getContentPosition());
                this._moveContent(this._clampDelta(a), c);
                this._dispatchEvent("scrolling");
                this._autoScrolling || (this._scrolling = this._isBouncing = !1, this._dispatchEvent("scroll-ended"))
            },
            _startInertiaScroll: function(c) {
                var a = c.mul(.7);
                this._startAttenuatingAutoScroll(a, c)
            },
            _calculateAttenuatedFactor: function(c) {
                return 0 >= this.brake ? 1 - this.brake : 1 / (1 + 1.4E-5 * c + c * c * 8E-9) * (1 - this.brake)
            },
            _startAttenuatingAutoScroll: function(c, a) {
                a = this._calculateAutoScrollTimeByInitalSpeed(a.mag());
                var b = c.normalize(),
                    d = this.content.getContentSize(),
                    f = this._view.getContentSize(),
                    k = d.width - f.width;
                d = d.height - f.height;
                f = this._calculateAttenuatedFactor(k);
                var e = this._calculateAttenuatedFactor(d);
                b = cc.v2(b.x * k * (1 - this.brake) * f, b.y * d * e * (1 - this.brake));
                k = c.mag();
                k = b.mag() / k;
                b = b.add(c);
                0 < this.brake && 7 < k && (k = Math.sqrt(k), b = c.mul(k).add(c));
                0 < this.brake && 3 < k && (k = 3, a *= k);
                0 === this.brake && 1 < k && (a *= k);
                this._startAutoScroll(b, a, !0)
            },
            _calculateAutoScrollTimeByInitalSpeed: function(c) {
                return Math.sqrt(Math.sqrt(c / 5))
            },
            _startAutoScroll: function(c, a, b) {
                c = this._flattenVectorByDirection(c);
                this._autoScrolling = !0;
                this._autoScrollTargetDelta = c;
                this._autoScrollAttenuate = b;
                this._autoScrollStartPosition = this.getContentPosition();
                this._autoScrollTotalTime = a;
                this._autoScrollAccumulatedTime = 0;
                this._isScrollEndedWithThresholdEventFired = this._autoScrollBraking = !1;
                this._autoScrollBrakingStartPosition = cc.v2(0, 0);
                this._getHowMuchOutOfBoundary().fuzzyEquals(cc.v2(0, 0), 1E-4) || (this._autoScrollCurrentlyOutOfBoundary = !0)
            },
            _calculateTouchMoveVelocity: function() {
                var c = this._touchMoveTimeDeltas.reduce(function(a,
                    c) {
                    return a + c
                }, 0);
                if (0 >= c || .5 <= c) return cc.v2(0, 0);
                var a = cc.v2(0, 0);
                a = this._touchMoveDisplacements.reduce(function(a, c) {
                    return a.add(c)
                }, a);
                return cc.v2(a.x * (1 - this.brake) / c, a.y * (1 - this.brake) / c)
            },
            _flattenVectorByDirection: function(c) {
                c.x = this.horizontal ? c.x : 0;
                c.y = this.vertical ? c.y : 0;
                return c
            },
            _moveContent: function(c, a) {
                c = this._flattenVectorByDirection(c);
                c = this.getContentPosition().add(c);
                this.setContentPosition(c);
                c = this._getHowMuchOutOfBoundary();
                this._updateScrollBar(c);
                this.elastic && a && this._startBounceBackIfNeeded()
            },
            _getContentLeftBoundary: function() {
                return this.getContentPosition().x - this.content.getAnchorPoint().x * this.content.getContentSize().width
            },
            _getContentRightBoundary: function() {
                var c = this.content.getContentSize();
                return this._getContentLeftBoundary() + c.width
            },
            _getContentTopBoundary: function() {
                var c = this.content.getContentSize();
                return this._getContentBottomBoundary() + c.height
            },
            _getContentBottomBoundary: function() {
                return this.getContentPosition().y - this.content.getAnchorPoint().y * this.content.getContentSize().height
            },
            _getHowMuchOutOfBoundary: function(c) {
                c = c || cc.v2(0, 0);
                if (c.fuzzyEquals(cc.v2(0, 0), 1E-4) && !this._outOfBoundaryAmountDirty) return this._outOfBoundaryAmount;
                var a = cc.v2(0, 0);
                this._getContentLeftBoundary() + c.x > this._leftBoundary ? a.x = this._leftBoundary - (this._getContentLeftBoundary() + c.x) : this._getContentRightBoundary() + c.x < this._rightBoundary && (a.x = this._rightBoundary - (this._getContentRightBoundary() + c.x));
                this._getContentTopBoundary() + c.y < this._topBoundary ? a.y = this._topBoundary - (this._getContentTopBoundary() +
                    c.y) : this._getContentBottomBoundary() + c.y > this._bottomBoundary && (a.y = this._bottomBoundary - (this._getContentBottomBoundary() + c.y));
                c.fuzzyEquals(cc.v2(0, 0), 1E-4) && (this._outOfBoundaryAmount = a, this._outOfBoundaryAmountDirty = !1);
                return a = this._clampDelta(a)
            },
            _updateScrollBarState: function() {
                if (this.content) {
                    var c = this.content.getContentSize(),
                        a = this._view.getContentSize();
                    this.verticalScrollBar && (c.height < a.height ? this.verticalScrollBar.hide() : this.verticalScrollBar.show());
                    this.horizontalScrollBar &&
                        (c.width < a.width ? this.horizontalScrollBar.hide() : this.horizontalScrollBar.show())
                }
            },
            _updateScrollBar: function(c) {
                this.horizontalScrollBar && this.horizontalScrollBar._onScroll(c);
                this.verticalScrollBar && this.verticalScrollBar._onScroll(c)
            },
            _onScrollBarTouchBegan: function() {
                this.horizontalScrollBar && this.horizontalScrollBar._onTouchBegan();
                this.verticalScrollBar && this.verticalScrollBar._onTouchBegan()
            },
            _onScrollBarTouchEnded: function() {
                this.horizontalScrollBar && this.horizontalScrollBar._onTouchEnded();
                this.verticalScrollBar && this.verticalScrollBar._onTouchEnded()
            },
            _dispatchEvent: function(c) {
                if ("scroll-ended" === c) this._scrollEventEmitMask = 0;
                else if ("scroll-to-top" === c || "scroll-to-bottom" === c || "scroll-to-left" === c || "scroll-to-right" === c) {
                    var a = 1 << k[c];
                    if (this._scrollEventEmitMask & a) return;
                    this._scrollEventEmitMask |= a
                }
                cc.Component.EventHandler.emitEvents(this.scrollEvents, this, k[c]);
                this.node.emit(c, this)
            },
            _adjustContentOutOfBoundary: function() {
                this._outOfBoundaryAmountDirty = !0;
                if (this._isOutOfBoundary()) {
                    var c =
                        this._getHowMuchOutOfBoundary(cc.v2(0, 0));
                    c = this.getContentPosition().add(c);
                    this.content && (this.content.setPosition(c), this._updateScrollBar(0))
                }
            },
            start: function() {
                this._calculateBoundary();
                this.content && cc.director.once(cc.Director.EVENT_BEFORE_DRAW, this._adjustContentOutOfBoundary, this)
            },
            _hideScrollbar: function() {
                this.horizontalScrollBar && this.horizontalScrollBar.hide();
                this.verticalScrollBar && this.verticalScrollBar.hide()
            },
            onDisable: function() {
                !0;
                this._unregisterEvent();
                this.content && (this.content.off(h.SIZE_CHANGED,
                    this._calculateBoundary, this), this.content.off(h.SCALE_CHANGED, this._calculateBoundary, this), this._view && (this._view.off(h.POSITION_CHANGED, this._calculateBoundary, this), this._view.off(h.SCALE_CHANGED, this._calculateBoundary, this), this._view.off(h.SIZE_CHANGED, this._calculateBoundary, this)));
                this._hideScrollbar();
                this.stopAutoScroll()
            },
            onEnable: function() {
                !0;
                this._registerEvent();
                this.content && (this.content.on(h.SIZE_CHANGED, this._calculateBoundary, this), this.content.on(h.SCALE_CHANGED, this._calculateBoundary,
                    this), this._view && (this._view.on(h.POSITION_CHANGED, this._calculateBoundary, this), this._view.on(h.SCALE_CHANGED, this._calculateBoundary, this), this._view.on(h.SIZE_CHANGED, this._calculateBoundary, this)));
                this._updateScrollBarState()
            },
            update: function(c) {
                this._autoScrolling && this._processAutoScrolling(c)
            }
        });
        cc.ScrollView = q.exports = g
    }, {
        "../CCNode": 61,
        "./CCViewGroup": 159
    }],
    154: [function(g, q, m) {
        var h = g("../utils/misc");
        g = g("./CCComponent");
        var e = cc.Enum({
            Horizontal: 0,
            Vertical: 1
        });
        g = cc.Class({
            name: "cc.Slider",
            extends: g,
            editor: !1,
            ctor: function() {
                this._offset = cc.v2();
                this._dragging = this._touchHandle = !1
            },
            properties: {
                handle: {
                    default: null,
                    type: cc.Button,
                    tooltip: !1,
                    notify: function() {
                        !1
                    }
                },
                direction: {
                    default: e.Horizontal,
                    type: e,
                    tooltip: !1
                },
                progress: {
                    default: .5,
                    type: cc.Float,
                    range: [0, 1, .1],
                    slide: !0,
                    tooltip: !1,
                    notify: function() {
                        this._updateHandlePosition()
                    }
                },
                slideEvents: {
                    default: [],
                    type: cc.Component.EventHandler,
                    tooltip: !1
                }
            },
            statics: {
                Direction: e
            },
            __preload: function() {
                this._updateHandlePosition()
            },
            onEnable: function() {
                this.node.on(cc.Node.EventType.TOUCH_START,
                    this._onTouchBegan, this);
                this.node.on(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this);
                this.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
                this.node.on(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancelled, this);
                this.handle && this.handle.isValid && (this.handle.node.on(cc.Node.EventType.TOUCH_START, this._onHandleDragStart, this), this.handle.node.on(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this), this.handle.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this))
            },
            onDisable: function() {
                this.node.off(cc.Node.EventType.TOUCH_START,
                    this._onTouchBegan, this);
                this.node.off(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this);
                this.node.off(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
                this.node.off(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancelled, this);
                this.handle && this.handle.isValid && (this.handle.node.off(cc.Node.EventType.TOUCH_START, this._onHandleDragStart, this), this.handle.node.off(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this), this.handle.node.off(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this))
            },
            _onHandleDragStart: function(d) {
                this._touchHandle = this._dragging = !0;
                this._offset = this.handle.node.convertToNodeSpaceAR(d.touch.getLocation());
                d.stopPropagation()
            },
            _onTouchBegan: function(d) {
                this.handle && (this._dragging = !0, this._touchHandle || this._handleSliderLogic(d.touch), d.stopPropagation())
            },
            _onTouchMoved: function(d) {
                this._dragging && (this._handleSliderLogic(d.touch), d.stopPropagation())
            },
            _onTouchEnded: function(d) {
                this._touchHandle = this._dragging = !1;
                this._offset = cc.v2();
                d.stopPropagation()
            },
            _onTouchCancelled: function(d) {
                this._dragging = !1;
                d.stopPropagation()
            },
            _handleSliderLogic: function(d) {
                this._updateProgress(d);
                this._emitSlideEvent()
            },
            _emitSlideEvent: function() {
                cc.Component.EventHandler.emitEvents(this.slideEvents, this);
                this.node.emit("slide", this)
            },
            _updateProgress: function(d) {
                if (this.handle) {
                    var k = this.node;
                    d = k.convertToNodeSpaceAR(d.getLocation());
                    this.direction === e.Horizontal ? this.progress = h.clamp01((d.x - this._offset.x + k.anchorX * k.width) / k.width) : this.progress = h.clamp01((d.y - this._offset.y + k.anchorY * k.height) / k.height)
                }
            },
            _updateHandlePosition: function() {
                if (this.handle) {
                    var d =
                        this.direction === e.Horizontal ? cc.v2(-this.node.width * this.node.anchorX + this.progress * this.node.width, 0) : cc.v2(0, -this.node.height * this.node.anchorY + this.progress * this.node.height);
                    d = this.node.convertToWorldSpaceAR(d);
                    this.handle.node.position = this.handle.node.parent.convertToNodeSpaceAR(d)
                }
            }
        });
        cc.Slider = q.exports = g
    }, {
        "../utils/misc": 310,
        "./CCComponent": 138
    }],
    155: [function(g, q, m) {
        var h = g("../utils/misc");
        g("../CCNode");
        m = g("./CCRenderComponent");
        var e = g("../utils/blend-func"),
            d = cc.Enum({
                SIMPLE: 0,
                SLICED: 1,
                TILED: 2,
                FILLED: 3,
                MESH: 4
            });
        g = cc.Enum({
            HORIZONTAL: 0,
            VERTICAL: 1,
            RADIAL: 2
        });
        var k = cc.Enum({
                CUSTOM: 0,
                TRIMMED: 1,
                RAW: 2
            }),
            c = cc.Enum({
                NORMAL: 0,
                GRAY: 1
            });
        m = cc.Class({
            name: "cc.Sprite",
            extends: m,
            mixins: [e],
            editor: !1,
            properties: {
                _spriteFrame: {
                    default: null,
                    type: cc.SpriteFrame
                },
                _type: d.SIMPLE,
                _sizeMode: k.TRIMMED,
                _fillType: 0,
                _fillCenter: cc.v2(0, 0),
                _fillStart: 0,
                _fillRange: 0,
                _isTrimmedMode: !0,
                _atlas: {
                    default: null,
                    type: cc.SpriteAtlas,
                    tooltip: !1,
                    editorOnly: !0,
                    visible: !0,
                    animatable: !1
                },
                spriteFrame: {
                    get: function() {
                        return this._spriteFrame
                    },
                    set: function(a, b) {
                        b = this._spriteFrame;
                        !1;
                        b !== a && (this._spriteFrame = a, this._applySpriteFrame(b), !1)
                    },
                    type: cc.SpriteFrame
                },
                type: {
                    get: function() {
                        return this._type
                    },
                    set: function(a) {
                        this._type !== a && (this._type = a, this.setVertsDirty(), this._resetAssembler())
                    },
                    type: d,
                    animatable: !1,
                    tooltip: !1
                },
                fillType: {
                    get: function() {
                        return this._fillType
                    },
                    set: function(a) {
                        a !== this._fillType && (this._fillType = a, this.setVertsDirty(), this._resetAssembler())
                    },
                    type: g,
                    tooltip: !1
                },
                fillCenter: {
                    get: function() {
                        return this._fillCenter
                    },
                    set: function(a) {
                        this._fillCenter.x = a.x;
                        this._fillCenter.y = a.y;
                        this._type === d.FILLED && this.setVertsDirty()
                    },
                    tooltip: !1
                },
                fillStart: {
                    get: function() {
                        return this._fillStart
                    },
                    set: function(a) {
                        this._fillStart = h.clampf(a, -1, 1);
                        this._type === d.FILLED && this.setVertsDirty()
                    },
                    tooltip: !1
                },
                fillRange: {
                    get: function() {
                        return this._fillRange
                    },
                    set: function(a) {
                        this._fillRange = h.clampf(a, -1, 1);
                        this._type === d.FILLED && this.setVertsDirty()
                    },
                    tooltip: !1
                },
                trim: {
                    get: function() {
                        return this._isTrimmedMode
                    },
                    set: function(a) {
                        this._isTrimmedMode !==
                            a && (this._isTrimmedMode = a, this._type !== d.SIMPLE && this._type !== d.MESH || this.setVertsDirty(), !1)
                    },
                    animatable: !1,
                    tooltip: !1
                },
                sizeMode: {
                    get: function() {
                        return this._sizeMode
                    },
                    set: function(a) {
                        this._sizeMode = a;
                        a !== k.CUSTOM && this._applySpriteSize()
                    },
                    animatable: !1,
                    type: k,
                    tooltip: !1
                }
            },
            statics: {
                FillType: g,
                Type: d,
                SizeMode: k,
                State: c
            },
            setVisible: function(a) {
                this.enabled = a
            },
            setState: function() {},
            getState: function() {},
            __preload: function() {
                this._super();
                !1;
                this._applySpriteFrame()
            },
            onEnable: function() {
                this._super();
                this._validateRender();
                this._spriteFrame && this._spriteFrame.isValid && this._spriteFrame.ensureLoadTexture();
                this.node.on(cc.Node.EventType.SIZE_CHANGED, this.setVertsDirty, this);
                this.node.on(cc.Node.EventType.ANCHOR_CHANGED, this.setVertsDirty, this)
            },
            onDisable: function() {
                this._super();
                this.node.off(cc.Node.EventType.SIZE_CHANGED, this.setVertsDirty, this);
                this.node.off(cc.Node.EventType.ANCHOR_CHANGED, this.setVertsDirty, this)
            },
            onRestore: !1,
            _updateMaterial: function() {
                var a = null;
                this._spriteFrame && (a = this._spriteFrame.getTexture());
                var b = this.getMaterial(0);
                if (b) {
                    var c = b.getDefine("USE_TEXTURE");
                    void 0 === c || c || b.define("USE_TEXTURE", !0);
                    c = a && a.getImpl();
                    b.getProperty("texture") !== c && b.setProperty("texture", a)
                }
                e.prototype._updateMaterial.call(this)
            },
            _applyAtlas: !1,
            _validateRender: function() {
                var a = this._spriteFrame;
                this._materials[0] && a && a.textureLoaded() || this.disableRender()
            },
            _applySpriteSize: function() {
                if (this.isValid && this._spriteFrame && this._spriteFrame.isValid) {
                    if (k.RAW === this._sizeMode) this.node.setContentSize(this._spriteFrame._originalSize);
                    else if (k.TRIMMED === this._sizeMode) {
                        var a = this._spriteFrame._rect;
                        this.node.setContentSize(a.width, a.height)
                    }
                    this.setVertsDirty()
                }
            },
            _applySpriteFrame: function(a) {
                if (this.isValid) {
                    var b = a && a.isValid && a.getTexture();
                    b && !b.loaded && a.off("load", this._applySpriteSize, this);
                    var c = (a = this._spriteFrame) && a.isValid,
                        d = c && a.getTexture();
                    b !== d && this._updateMaterial();
                    d && d.loaded ? this._applySpriteSize() : (this.disableRender(), c && a.once("load", this._applySpriteSize, this));
                    !1
                }
            }
        });
        !1;
        cc.Sprite = q.exports = m
    }, {
        "../CCNode": 61,
        "../utils/blend-func": 304,
        "../utils/misc": 310,
        "./CCRenderComponent": 149
    }],
    156: [function(g, q, m) {
        m = g("../utils/gray-sprite-state");
        m = cc.Class({
            name: "cc.Toggle",
            extends: g("./CCButton"),
            mixins: [m],
            editor: !1,
            properties: {
                _N$isChecked: !0,
                isChecked: {
                    get: function() {
                        return this._N$isChecked
                    },
                    set: function(h) {
                        if (h !== this._N$isChecked) {
                            var e = this.toggleGroup || this._toggleContainer;
                            e && e.enabled && this._N$isChecked && !e.allowSwitchOff || (this._N$isChecked = h, this._updateCheckMark(), e && e.enabled && e.updateToggles(this),
                                cc.Toggle._triggerEventInScript_isChecked && this._emitToggleEvents())
                        }
                    },
                    tooltip: !1
                },
                toggleGroup: {
                    default: null,
                    tooltip: !1,
                    type: g("./CCToggleGroup")
                },
                checkMark: {
                    default: null,
                    type: cc.Sprite,
                    tooltip: !1
                },
                checkEvents: {
                    default: [],
                    type: cc.Component.EventHandler
                },
                _resizeToTarget: {
                    animatable: !1,
                    set: function(h) {
                        h && this._resizeNodeToTargetNode()
                    }
                }
            },
            statics: {
                _triggerEventInScript_check: !1,
                _triggerEventInScript_isChecked: !1
            },
            onEnable: function() {
                this._super();
                !0;
                this._registerToggleEvent();
                this.toggleGroup && this.toggleGroup.enabledInHierarchy &&
                    this.toggleGroup.addToggle(this)
            },
            onDisable: function() {
                this._super();
                !0;
                this._unregisterToggleEvent();
                this.toggleGroup && this.toggleGroup.enabledInHierarchy && this.toggleGroup.removeToggle(this)
            },
            _hideCheckMark: function() {
                this._N$isChecked = !1;
                this._updateCheckMark()
            },
            toggle: function(h) {
                this.isChecked = !this.isChecked;
                cc.Toggle._triggerEventInScript_isChecked || !cc.Toggle._triggerEventInScript_check && !h || this._emitToggleEvents()
            },
            check: function() {
                this.isChecked = !0;
                !cc.Toggle._triggerEventInScript_isChecked &&
                    cc.Toggle._triggerEventInScript_check && this._emitToggleEvents()
            },
            uncheck: function() {
                this.isChecked = !1;
                !cc.Toggle._triggerEventInScript_isChecked && cc.Toggle._triggerEventInScript_check && this._emitToggleEvents()
            },
            _updateCheckMark: function() {
                this.checkMark && (this.checkMark.node.active = !!this.isChecked)
            },
            _updateDisabledState: function() {
                this._super();
                this.enableAutoGrayEffect && this.checkMark && this._switchGrayMaterial(!this.interactable, this.checkMark)
            },
            _registerToggleEvent: function() {
                this.node.on("click",
                    this.toggle, this)
            },
            _unregisterToggleEvent: function() {
                this.node.off("click", this.toggle, this)
            },
            _emitToggleEvents: function() {
                this.node.emit("toggle", this);
                this.checkEvents && cc.Component.EventHandler.emitEvents(this.checkEvents, this)
            }
        });
        cc.Toggle = q.exports = m;
        g("../platform/js").get(m.prototype, "_toggleContainer", function() {
            var h = this.node.parent;
            return cc.Node.isNode(h) ? h.getComponent(cc.ToggleContainer) : null
        })
    }, {
        "../platform/js": 248,
        "../utils/gray-sprite-state": 307,
        "./CCButton": 136,
        "./CCToggleGroup": 158
    }],
    157: [function(g, q, m) {
        m = cc.Class({
            name: "cc.ToggleContainer",
            extends: cc.Component,
            editor: !1,
            properties: {
                allowSwitchOff: {
                    tooltip: !1,
                    default: !1
                },
                checkEvents: {
                    default: [],
                    type: cc.Component.EventHandler
                }
            },
            updateToggles: function(h) {
                this.enabledInHierarchy && h.isChecked && (this.toggleItems.forEach(function(e) {
                    e !== h && e.isChecked && e.enabled && e._hideCheckMark()
                }), this.checkEvents && cc.Component.EventHandler.emitEvents(this.checkEvents, h))
            },
            _allowOnlyOneToggleChecked: function() {
                var h = !1;
                this.toggleItems.forEach(function(e) {
                    h ?
                        e._hideCheckMark() : e.isChecked && (h = !0)
                });
                return h
            },
            _makeAtLeastOneToggleChecked: function() {
                if (!this._allowOnlyOneToggleChecked() && !this.allowSwitchOff) {
                    var h = this.toggleItems;
                    0 < h.length && h[0].check()
                }
            },
            onEnable: function() {
                this._makeAtLeastOneToggleChecked();
                this.node.on("child-added", this._allowOnlyOneToggleChecked, this);
                this.node.on("child-removed", this._makeAtLeastOneToggleChecked, this)
            },
            onDisable: function() {
                this.node.off("child-added", this._allowOnlyOneToggleChecked, this);
                this.node.off("child-removed",
                    this._makeAtLeastOneToggleChecked, this)
            }
        });
        g("../platform/js").get(m.prototype, "toggleItems", function() {
            return this.node._children.map(function(h) {
                return h.getComponent(cc.Toggle)
            }).filter(Boolean)
        });
        cc.ToggleContainer = q.exports = m
    }, {
        "../platform/js": 248
    }],
    158: [function(g, q, m) {
        var h = cc.Class({
                name: "cc.ToggleGroup",
                extends: cc.Component,
                ctor: function() {
                    this._toggleItems = []
                },
                editor: !1,
                properties: {
                    allowSwitchOff: {
                        tooltip: !1,
                        default: !1
                    },
                    toggleItems: {
                        get: function() {
                            return this._toggleItems
                        }
                    }
                },
                updateToggles: function(d) {
                    this.enabledInHierarchy &&
                        this._toggleItems.forEach(function(k) {
                            d.isChecked && k !== d && k.isChecked && k.enabled && k._hideCheckMark()
                        })
                },
                addToggle: function(d) {
                    -1 === this._toggleItems.indexOf(d) && this._toggleItems.push(d);
                    this._allowOnlyOneToggleChecked()
                },
                removeToggle: function(d) {
                    d = this._toggleItems.indexOf(d); - 1 < d && this._toggleItems.splice(d, 1);
                    this._makeAtLeastOneToggleChecked()
                },
                _allowOnlyOneToggleChecked: function() {
                    var d = !1;
                    this._toggleItems.forEach(function(k) {
                        d && k.enabled && k._hideCheckMark();
                        k.isChecked && k.enabled && (d = !0)
                    });
                    return d
                },
                _makeAtLeastOneToggleChecked: function() {
                    this._allowOnlyOneToggleChecked() || this.allowSwitchOff || 0 < this._toggleItems.length && (this._toggleItems[0].isChecked = !0)
                },
                start: function() {
                    this._makeAtLeastOneToggleChecked()
                }
            }),
            e = !1;
        g("../platform/js").get(cc, "ToggleGroup", function() {
            e || (cc.errorID(1405, "cc.ToggleGroup", "cc.ToggleContainer"), e = !0);
            return h
        });
        q.exports = h
    }, {
        "../platform/js": 248
    }],
    159: [function(g, q, m) {
        g = cc.Class({
            name: "cc.ViewGroup",
            extends: g("./CCComponent")
        });
        cc.ViewGroup = q.exports =
            g
    }, {
        "./CCComponent": 138
    }],
    160: [function(g, q, m) {
        var h = g("../base-ui/CCWidgetManager"),
            e = h.AlignMode;
        m = h._AlignFlags;
        var d = m.TOP,
            k = m.MID,
            c = m.BOT,
            a = m.LEFT,
            b = m.CENTER,
            l = m.RIGHT,
            f = d | c,
            n = a | l;
        g = cc.Class({
            name: "cc.Widget",
            extends: g("./CCComponent"),
            editor: !1,
            properties: {
                target: {
                    get: function() {
                        return this._target
                    },
                    set: function(a) {
                        this._target = a;
                        !1
                    },
                    type: cc.Node,
                    tooltip: !1
                },
                isAlignTop: {
                    get: function() {
                        return 0 < (this._alignFlags & d)
                    },
                    set: function(a) {
                        this._setAlign(d, a)
                    },
                    animatable: !1,
                    tooltip: !1
                },
                isAlignVerticalCenter: {
                    get: function() {
                        return 0 <
                            (this._alignFlags & k)
                    },
                    set: function(a) {
                        a ? (this.isAlignBottom = this.isAlignTop = !1, this._alignFlags |= k) : this._alignFlags &= ~k
                    },
                    animatable: !1,
                    tooltip: !1
                },
                isAlignBottom: {
                    get: function() {
                        return 0 < (this._alignFlags & c)
                    },
                    set: function(a) {
                        this._setAlign(c, a)
                    },
                    animatable: !1,
                    tooltip: !1
                },
                isAlignLeft: {
                    get: function() {
                        return 0 < (this._alignFlags & a)
                    },
                    set: function(b) {
                        this._setAlign(a, b)
                    },
                    animatable: !1,
                    tooltip: !1
                },
                isAlignHorizontalCenter: {
                    get: function() {
                        return 0 < (this._alignFlags & b)
                    },
                    set: function(a) {
                        a ? (this.isAlignRight =
                            this.isAlignLeft = !1, this._alignFlags |= b) : this._alignFlags &= ~b
                    },
                    animatable: !1,
                    tooltip: !1
                },
                isAlignRight: {
                    get: function() {
                        return 0 < (this._alignFlags & l)
                    },
                    set: function(a) {
                        this._setAlign(l, a)
                    },
                    animatable: !1,
                    tooltip: !1
                },
                isStretchWidth: {
                    get: function() {
                        return (this._alignFlags & n) === n
                    },
                    visible: !1
                },
                isStretchHeight: {
                    get: function() {
                        return (this._alignFlags & f) === f
                    },
                    visible: !1
                },
                top: {
                    get: function() {
                        return this._top
                    },
                    set: function(a) {
                        this._top = a
                    },
                    tooltip: !1
                },
                bottom: {
                    get: function() {
                        return this._bottom
                    },
                    set: function(a) {
                        this._bottom =
                            a
                    },
                    tooltip: !1
                },
                left: {
                    get: function() {
                        return this._left
                    },
                    set: function(a) {
                        this._left = a
                    },
                    tooltip: !1
                },
                right: {
                    get: function() {
                        return this._right
                    },
                    set: function(a) {
                        this._right = a
                    },
                    tooltip: !1
                },
                horizontalCenter: {
                    get: function() {
                        return this._horizontalCenter
                    },
                    set: function(a) {
                        this._horizontalCenter = a
                    },
                    tooltip: !1
                },
                verticalCenter: {
                    get: function() {
                        return this._verticalCenter
                    },
                    set: function(a) {
                        this._verticalCenter = a
                    },
                    tooltip: !1
                },
                isAbsoluteHorizontalCenter: {
                    get: function() {
                        return this._isAbsHorizontalCenter
                    },
                    set: function(a) {
                        this._isAbsHorizontalCenter =
                            a
                    },
                    animatable: !1
                },
                isAbsoluteVerticalCenter: {
                    get: function() {
                        return this._isAbsVerticalCenter
                    },
                    set: function(a) {
                        this._isAbsVerticalCenter = a
                    },
                    animatable: !1
                },
                isAbsoluteTop: {
                    get: function() {
                        return this._isAbsTop
                    },
                    set: function(a) {
                        this._isAbsTop = a
                    },
                    animatable: !1
                },
                isAbsoluteBottom: {
                    get: function() {
                        return this._isAbsBottom
                    },
                    set: function(a) {
                        this._isAbsBottom = a
                    },
                    animatable: !1
                },
                isAbsoluteLeft: {
                    get: function() {
                        return this._isAbsLeft
                    },
                    set: function(a) {
                        this._isAbsLeft = a
                    },
                    animatable: !1
                },
                isAbsoluteRight: {
                    get: function() {
                        return this._isAbsRight
                    },
                    set: function(a) {
                        this._isAbsRight = a
                    },
                    animatable: !1
                },
                alignMode: {
                    default: e.ON_WINDOW_RESIZE,
                    type: e,
                    tooltip: !1
                },
                _wasAlignOnce: {
                    default: void 0,
                    formerlySerializedAs: "isAlignOnce"
                },
                _target: null,
                _alignFlags: 0,
                _left: 0,
                _right: 0,
                _top: 0,
                _bottom: 0,
                _verticalCenter: 0,
                _horizontalCenter: 0,
                _isAbsLeft: !0,
                _isAbsRight: !0,
                _isAbsTop: !0,
                _isAbsBottom: !0,
                _isAbsHorizontalCenter: !0,
                _isAbsVerticalCenter: !0,
                _originalWidth: 0,
                _originalHeight: 0
            },
            statics: {
                AlignMode: e
            },
            onLoad: function() {
                void 0 !== this._wasAlignOnce && (this.alignMode =
                    this._wasAlignOnce ? e.ONCE : e.ALWAYS, this._wasAlignOnce = void 0)
            },
            onEnable: function() {
                h.add(this)
            },
            onDisable: function() {
                h.remove(this)
            },
            _validateTargetInDEV: !1,
            _setAlign: function(a, b) {
                if (b !== 0 < (this._alignFlags & a)) {
                    var c = 0 < (a & n);
                    b ? (this._alignFlags |= a, c ? (this.isAlignHorizontalCenter = !1, this.isStretchWidth && (this._originalWidth = this.node.width, !1)) : (this.isAlignVerticalCenter = !1, this.isStretchHeight && (this._originalHeight = this.node.height, !1)), !1) : (c ? this.isStretchWidth && (this.node.width = this._originalWidth) :
                        this.isStretchHeight && (this.node.height = this._originalHeight), this._alignFlags &= ~a)
                }
            },
            updateAlignment: function() {
                h.updateAlignment(this.node)
            }
        });
        Object.defineProperty(g.prototype, "isAlignOnce", {
            get: function() {
                !0;
                cc.warn("`widget.isAlignOnce` is deprecated, use `widget.alignMode === cc.Widget.AlignMode.ONCE` instead please.");
                return this.alignMode === e.ONCE
            },
            set: function(a) {
                !0;
                cc.warn("`widget.isAlignOnce` is deprecated, use `widget.alignMode = cc.Widget.AlignMode.*` instead please.");
                this.alignMode =
                    a ? e.ONCE : e.ALWAYS
            }
        });
        cc.Widget = q.exports = g
    }, {
        "../base-ui/CCWidgetManager": 122,
        "./CCComponent": 138
    }],
    161: [function(g, q, m) {
        function h(a) {
            return a.replace(/(?:^|\s)\S/g, function(a) {
                return a.toUpperCase()
            })
        }
        var e = g("../../platform/CCMacro");
        m = g("../editbox/EditBoxImplBase");
        var d = g("../CCLabel"),
            k = g("./types"),
            c = k.InputMode,
            a = k.InputFlag;
        k = k.KeyboardReturnType;
        var b = cc.Class({
            name: "cc.EditBox",
            extends: cc.Component,
            editor: !1,
            properties: {
                _string: "",
                string: {
                    tooltip: !1,
                    get: function() {
                        return this._string
                    },
                    set: function(a) {
                        a = "" + a;
                        0 <= this.maxLength && a.length >= this.maxLength && (a = a.slice(0, this.maxLength));
                        this._string = a;
                        this._updateString(a)
                    }
                },
                textLabel: {
                    tooltip: !1,
                    default: null,
                    type: d,
                    notify: function(a) {
                        this.textLabel && this.textLabel !== a && (this._updateTextLabel(), this._updateLabels())
                    }
                },
                placeholderLabel: {
                    tooltip: !1,
                    default: null,
                    type: d,
                    notify: function(a) {
                        this.placeholderLabel && this.placeholderLabel !== a && (this._updatePlaceholderLabel(), this._updateLabels())
                    }
                },
                background: {
                    tooltip: !1,
                    default: null,
                    type: cc.Sprite,
                    notify: function(a) {
                        this.background && this.background !== a && this._updateBackgroundSprite()
                    }
                },
                _N$backgroundImage: {
                    default: void 0,
                    type: cc.SpriteFrame
                },
                backgroundImage: {
                    get: function() {
                        return this.background ? this.background.spriteFrame : null
                    },
                    set: function(a) {
                        this.background && (this.background.spriteFrame = a)
                    }
                },
                returnType: {
                    default: k.DEFAULT,
                    tooltip: !1,
                    displayName: "KeyboardReturnType",
                    type: k
                },
                _N$returnType: {
                    default: void 0,
                    type: cc.Float
                },
                inputFlag: {
                    tooltip: !1,
                    default: a.DEFAULT,
                    type: a,
                    notify: function() {
                        this._updateString(this._string)
                    }
                },
                inputMode: {
                    tooltip: !1,
                    default: c.ANY,
                    type: c,
                    notify: function(a) {
                        this.inputMode !== a && (this._updateTextLabel(), this._updatePlaceholderLabel())
                    }
                },
                fontSize: {
                    get: function() {
                        return this.textLabel ? this.textLabel.fontSize : 0
                    },
                    set: function(a) {
                        this.textLabel && (this.textLabel.fontSize = a)
                    }
                },
                _N$fontSize: {
                    default: void 0,
                    type: cc.Float
                },
                lineHeight: {
                    get: function() {
                        return this.textLabel ? this.textLabel.lineHeight : 0
                    },
                    set: function(a) {
                        this.textLabel && (this.textLabel.lineHeight = a)
                    }
                },
                _N$lineHeight: {
                    default: void 0,
                    type: cc.Float
                },
                fontColor: {
                    get: function() {
                        return this.textLabel ? this.textLabel.node.color : cc.Color.BLACK
                    },
                    set: function(a) {
                        this.textLabel && (this.textLabel.node.color = a, this.textLabel.node.opacity = a.a)
                    }
                },
                _N$fontColor: void 0,
                placeholder: {
                    tooltip: !1,
                    get: function() {
                        return this.placeholderLabel ? this.placeholderLabel.string : ""
                    },
                    set: function(a) {
                        this.placeholderLabel && (this.placeholderLabel.string = a)
                    }
                },
                _N$placeholder: {
                    default: void 0,
                    type: cc.String
                },
                placeholderFontSize: {
                    get: function() {
                        return this.placeholderLabel ? this.placeholderLabel.fontSize :
                            0
                    },
                    set: function(a) {
                        this.placeholderLabel && (this.placeholderLabel.fontSize = a)
                    }
                },
                _N$placeholderFontSize: {
                    default: void 0,
                    type: cc.Float
                },
                placeholderFontColor: {
                    get: function() {
                        return this.placeholderLabel ? this.placeholderLabel.node.color : cc.Color.BLACK
                    },
                    set: function(a) {
                        this.placeholderLabel && (this.placeholderLabel.node.color = a, this.placeholderLabel.node.opacity = a.a)
                    }
                },
                _N$placeholderFontColor: void 0,
                maxLength: {
                    tooltip: !1,
                    default: 20
                },
                _N$maxLength: {
                    default: void 0,
                    type: cc.Float
                },
                stayOnTop: {
                    default: !1,
                    notify: function() {
                        cc.warn("editBox.stayOnTop is removed since v2.1.")
                    }
                },
                _tabIndex: 0,
                tabIndex: {
                    tooltip: !1,
                    get: function() {
                        return this._tabIndex
                    },
                    set: function(a) {
                        this._tabIndex !== a && (this._tabIndex = a, this._impl && this._impl.setTabIndex(a))
                    }
                },
                editingDidBegan: {
                    default: [],
                    type: cc.Component.EventHandler
                },
                textChanged: {
                    default: [],
                    type: cc.Component.EventHandler
                },
                editingDidEnded: {
                    default: [],
                    type: cc.Component.EventHandler
                },
                editingReturn: {
                    default: [],
                    type: cc.Component.EventHandler
                }
            },
            statics: {
                _ImplClass: m,
                KeyboardReturnType: k,
                InputFlag: a,
                InputMode: c
            },
            _init: function() {
                this._upgradeComp();
                this._isLabelVisible = !0;
                this.node.on(cc.Node.EventType.SIZE_CHANGED, this._syncSize, this);
                (this._impl = new b._ImplClass).init(this);
                this._updateString(this._string);
                this._syncSize()
            },
            _updateBackgroundSprite: function() {
                var a = this.background;
                if (!a) {
                    var b = this.node.getChildByName("BACKGROUND_SPRITE");
                    b || (b = new cc.Node("BACKGROUND_SPRITE"));
                    (a = b.getComponent(cc.Sprite)) || (a = b.addComponent(cc.Sprite));
                    b.parent = this.node;
                    this.background = a
                }
                a.type = cc.Sprite.Type.SLICED;
                void 0 !== this._N$backgroundImage && (a.spriteFrame =
                    this._N$backgroundImage, this._N$backgroundImage = void 0)
            },
            _updateTextLabel: function() {
                var a = this.textLabel;
                if (!a) {
                    var b = this.node.getChildByName("TEXT_LABEL");
                    b || (b = new cc.Node("TEXT_LABEL"));
                    (a = b.getComponent(d)) || (a = b.addComponent(d));
                    b.parent = this.node;
                    this.textLabel = a
                }
                a.node.setAnchorPoint(0, 1);
                a.overflow = d.Overflow.CLAMP;
                this.inputMode === c.ANY ? (a.verticalAlign = e.VerticalTextAlignment.TOP, a.enableWrapText = !0) : (a.verticalAlign = e.VerticalTextAlignment.CENTER, a.enableWrapText = !1);
                a.string = this._updateLabelStringStyle(this._string);
                void 0 !== this._N$fontColor && (a.node.color = this._N$fontColor, a.node.opacity = this._N$fontColor.a, this._N$fontColor = void 0);
                void 0 !== this._N$fontSize && (a.fontSize = this._N$fontSize, this._N$fontSize = void 0);
                void 0 !== this._N$lineHeight && (a.lineHeight = this._N$lineHeight, this._N$lineHeight = void 0)
            },
            _updatePlaceholderLabel: function() {
                var a = this.placeholderLabel;
                if (!a) {
                    var b = this.node.getChildByName("PLACEHOLDER_LABEL");
                    b || (b = new cc.Node("PLACEHOLDER_LABEL"));
                    (a = b.getComponent(d)) || (a = b.addComponent(d));
                    b.parent =
                        this.node;
                    this.placeholderLabel = a
                }
                a.node.setAnchorPoint(0, 1);
                a.overflow = d.Overflow.CLAMP;
                this.inputMode === c.ANY ? (a.verticalAlign = e.VerticalTextAlignment.TOP, a.enableWrapText = !0) : (a.verticalAlign = e.VerticalTextAlignment.CENTER, a.enableWrapText = !1);
                a.string = this.placeholder;
                void 0 !== this._N$placeholderFontColor && (a.node.color = this._N$placeholderFontColor, a.node.opacity = this._N$placeholderFontColor.a, this._N$placeholderFontColor = void 0);
                void 0 !== this._N$placeholderFontSize && (a.fontSize = this._N$placeholderFontSize,
                    this._N$placeholderFontSize = void 0)
            },
            _upgradeComp: function() {
                void 0 !== this._N$returnType && (this.returnType = this._N$returnType, this._N$returnType = void 0);
                void 0 !== this._N$maxLength && (this.maxLength = this._N$maxLength, this._N$maxLength = void 0);
                void 0 !== this._N$backgroundImage && this._updateBackgroundSprite();
                void 0 === this._N$fontColor && void 0 === this._N$fontSize && void 0 === this._N$lineHeight || this._updateTextLabel();
                void 0 === this._N$placeholderFontColor && void 0 === this._N$placeholderFontSize || this._updatePlaceholderLabel();
                void 0 !== this._N$placeholder && (this.placeholder = this._N$placeholder, this._N$placeholder = void 0)
            },
            _syncSize: function() {
                if (this._impl) {
                    var a = this.node.getContentSize();
                    this._impl.setSize(a.width, a.height)
                }
            },
            _showLabels: function() {
                this._isLabelVisible = !0;
                this._updateLabels()
            },
            _hideLabels: function() {
                this._isLabelVisible = !1;
                this.textLabel && (this.textLabel.node.active = !1);
                this.placeholderLabel && (this.placeholderLabel.node.active = !1)
            },
            _updateLabels: function() {
                if (this._isLabelVisible) {
                    var a = this._string;
                    this.textLabel && (this.textLabel.node.active = "" !== a);
                    this.placeholderLabel && (this.placeholderLabel.node.active = "" === a)
                }
            },
            _updateString: function(a) {
                var b = this.textLabel;
                b && (a && (a = this._updateLabelStringStyle(a)), b.string = a, this._updateLabels())
            },
            _updateLabelStringStyle: function(b, c) {
                var d = this.inputFlag;
                if (c || d !== a.PASSWORD) d === a.INITIAL_CAPS_ALL_CHARACTERS ? b = b.toUpperCase() : d === a.INITIAL_CAPS_WORD ? b = h(b) : d === a.INITIAL_CAPS_SENTENCE && (b = b.charAt(0).toUpperCase() + b.slice(1));
                else {
                    c = "";
                    b = b.length;
                    for (d =
                        0; d < b; ++d) c += "\u25cf";
                    b = c
                }
                return b
            },
            editBoxEditingDidBegan: function() {
                cc.Component.EventHandler.emitEvents(this.editingDidBegan, this);
                this.node.emit("editing-did-began", this)
            },
            editBoxEditingDidEnded: function() {
                cc.Component.EventHandler.emitEvents(this.editingDidEnded, this);
                this.node.emit("editing-did-ended", this)
            },
            editBoxTextChanged: function(a) {
                this.string = a = this._updateLabelStringStyle(a, !0);
                cc.Component.EventHandler.emitEvents(this.textChanged, a, this);
                this.node.emit("text-changed", this)
            },
            editBoxEditingReturn: function() {
                cc.Component.EventHandler.emitEvents(this.editingReturn,
                    this);
                this.node.emit("editing-return", this)
            },
            onEnable: function() {
                !0;
                this._registerEvent();
                this._impl && this._impl.enable()
            },
            onDisable: function() {
                !0;
                this._unregisterEvent();
                this._impl && this._impl.disable()
            },
            onDestroy: function() {
                this._impl && this._impl.clear()
            },
            __preload: function() {
                this._init()
            },
            _registerEvent: function() {
                this.node.on(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this);
                this.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this)
            },
            _unregisterEvent: function() {
                this.node.off(cc.Node.EventType.TOUCH_START,
                    this._onTouchBegan, this);
                this.node.off(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this)
            },
            _onTouchBegan: function(a) {
                a.stopPropagation()
            },
            _onTouchCancel: function(a) {
                a.stopPropagation()
            },
            _onTouchEnded: function(a) {
                this._impl && this._impl.beginEditing();
                a.stopPropagation()
            },
            setFocus: function() {
                cc.errorID(1400, "setFocus()", "focus()");
                this._impl && this._impl.setFocus(!0)
            },
            focus: function() {
                this._impl && this._impl.setFocus(!0)
            },
            blur: function() {
                this._impl && this._impl.setFocus(!1)
            },
            isFocused: function() {
                return !!this._impl &&
                    this._impl.isFocused()
            },
            update: function() {
                this._impl && this._impl.update()
            }
        });
        cc.EditBox = q.exports = b;
        cc.sys.isBrowser && g("./WebEditBoxImpl")
    }, {
        "../../platform/CCMacro": 232,
        "../CCLabel": 140,
        "../editbox/EditBoxImplBase": 162,
        "./WebEditBoxImpl": 163,
        "./types": 165
    }],
    162: [function(g, q, m) {
        g = cc.Class({
            ctor: function() {
                this._delegate = null;
                this._editing = !1
            },
            init: function(h) {},
            enable: function() {},
            disable: function() {
                this._editing && this.endEditing()
            },
            clear: function() {},
            update: function() {},
            setTabIndex: function(h) {},
            setSize: function(h, e) {},
            setFocus: function(h) {
                h ? this.beginEditing() : this.endEditing()
            },
            isFocused: function() {
                return this._editing
            },
            beginEditing: function() {},
            endEditing: function() {}
        });
        q.exports = g
    }, {}],
    163: [function(g, q, m) {
        function h() {
            z.call(this);
            this._domId = "EditBoxId_" + ++u;
            this._elem = this._placeholderStyleSheet = null;
            this._isTextArea = !1;
            this._worldMat = new e["default"];
            this._cameraMat = new e["default"];
            this._h = this._w = this._m13 = this._m12 = this._m05 = this._m04 = this._m01 = this._m00 = 0;
            this._cacheViewportRect =
                cc.rect(0, 0, 0, 0);
            this._returnType = this._inputFlag = this._inputMode = null;
            this._eventListeners = {};
            this._placeholderLineHeight = this._placeholderLabelAlign = this._placeholderLabelFontColor = this._placeholderLabelFontSize = this._placeholderLabelFont = this._textLabelAlign = this._textLabelFontColor = this._textLabelFontSize = this._textLabelFont = null
        }
        var e = function(a) {
                return a && a.__esModule ? a : {
                    default: a
                }
            }(g("../../value-types/mat4")),
            d = g("../../platform/utils"),
            k = g("../../platform/CCMacro");
        q = g("./types");
        var c = g("../CCLabel"),
            a = g("./tabIndexUtil");
        g = cc.EditBox;
        m = cc.js;
        var b = q.InputMode,
            l = q.InputFlag,
            f = q.KeyboardReturnType,
            n = !1;
        cc.sys.OS_ANDROID !== cc.sys.os || cc.sys.browserType !== cc.sys.BROWSER_TYPE_SOUGOU && cc.sys.browserType !== cc.sys.BROWSER_TYPE_360 || (n = !0);
        var u = 0,
            v = cc.v3(),
            p = null,
            t = !1,
            x = !1,
            z = g._ImplClass;
        m.extend(h, z);
        g._ImplClass = h;
        Object.assign(h.prototype, {
            init: function(c) {
                c && (this._delegate = c, c.inputMode === b.ANY ? this._createTextArea() : this._createInput(), a.add(this), this.setTabIndex(c.tabIndex), this._initStyleSheet(),
                    this._registerEventListeners(), this._addDomToGameContainer(), t = cc.view.isAutoFullScreenEnabled(), x = cc.view._resizeWithBrowserSize)
            },
            clear: function() {
                this._removeEventListeners();
                this._removeDomFromGameContainer();
                a.remove(this);
                p === this && (p = null)
            },
            update: function() {
                this._updateMatrix()
            },
            setTabIndex: function(b) {
                this._elem.tabIndex = b;
                a.resort()
            },
            setSize: function(a, b) {
                var c = this._elem;
                c.style.width = a + "px";
                c.style.height = b + "px"
            },
            beginEditing: function() {
                p && p !== this && p.setFocus(!1);
                this._editing = !0;
                p = this;
                this._delegate.editBoxEditingDidBegan();
                this._showDom();
                this._elem.focus()
            },
            endEditing: function() {
                this._elem && this._elem.blur()
            },
            _createInput: function() {
                this._isTextArea = !1;
                this._elem = document.createElement("input")
            },
            _createTextArea: function() {
                this._isTextArea = !0;
                this._elem = document.createElement("textarea")
            },
            _addDomToGameContainer: function() {
                cc.game.container.appendChild(this._elem);
                document.head.appendChild(this._placeholderStyleSheet)
            },
            _removeDomFromGameContainer: function() {
                d.contains(cc.game.container,
                    this._elem) && cc.game.container.removeChild(this._elem);
                d.contains(document.head, this._placeholderStyleSheet) && document.head.removeChild(this._placeholderStyleSheet);
                delete this._elem;
                delete this._placeholderStyleSheet
            },
            _showDom: function() {
                this._updateMaxLength();
                this._updateInputType();
                this._updateStyleSheet();
                this._elem.style.display = "";
                this._delegate._hideLabels();
                cc.sys.isMobile && this._showDomOnMobile()
            },
            _hideDom: function() {
                this._elem.style.display = "none";
                this._delegate._showLabels();
                cc.sys.isMobile &&
                    this._hideDomOnMobile()
            },
            _showDomOnMobile: function() {
                cc.sys.os === cc.sys.OS_ANDROID && (t && (cc.view.enableAutoFullScreen(!1), cc.screen.exitFullScreen()), x && cc.view.resizeWithBrowserSize(!1), this._adjustWindowScroll())
            },
            _hideDomOnMobile: function() {
                cc.sys.os === cc.sys.OS_ANDROID && (x && cc.view.resizeWithBrowserSize(!0), setTimeout(function() {
                    p || t && cc.view.enableAutoFullScreen(!0)
                }, 800))
            },
            _adjustWindowScroll: function() {
                var a = this;
                setTimeout(function() {
                    100 > window.scrollY && a._elem.scrollIntoView({
                        block: "start",
                        inline: "nearest",
                        behavior: "smooth"
                    })
                }, 800)
            },
            _scrollBackWindow: function() {
                setTimeout(function() {
                    var a = cc.sys;
                    a.browserType === a.BROWSER_TYPE_WECHAT && a.os === a.OS_IOS ? window.top && window.top.scrollTo(0, 0) : window.scrollTo(0, 0)
                }, 800)
            },
            _updateCameraMatrix: function() {
                var a = this._delegate.node;
                a.getWorldMatrix(this._worldMat);
                var b = this._worldMat,
                    c = a._contentSize,
                    d = a._anchorPoint;
                v.x = -d.x * c.width;
                v.y = -d.y * c.height;
                e["default"].transform(b, b, v);
                !1;
                a = cc.Camera.findCamera(a);
                if (!a) return !1;
                a.getWorldToScreenMatrix2D(this._cameraMat);
                e["default"].mul(this._cameraMat, this._cameraMat, b);
                return !0
            },
            _updateMatrix: function() {
                if (!1, this._updateCameraMatrix()) {
                    var a = this._cameraMat.m,
                        b = this._delegate.node,
                        c = cc.view;
                    if (this._m00 !== a[0] || this._m01 !== a[1] || this._m04 !== a[4] || this._m05 !== a[5] || this._m12 !== a[12] || this._m13 !== a[13] || this._w !== b._contentSize.width || this._h !== b._contentSize.height || !this._cacheViewportRect.equals(c._viewportRect)) {
                        this._m00 = a[0];
                        this._m01 = a[1];
                        this._m04 = a[4];
                        this._m05 = a[5];
                        this._m12 = a[12];
                        this._m13 = a[13];
                        this._w =
                            b._contentSize.width;
                        this._h = b._contentSize.height;
                        this._cacheViewportRect.set(c._viewportRect);
                        var d = c._scaleX,
                            f = c._scaleY,
                            l = c._viewportRect,
                            k = c._devicePixelRatio;
                        d /= k;
                        f /= k;
                        var e = cc.game.container;
                        c = a[0] * d;
                        var h = a[1],
                            p = a[4],
                            t = a[5] * f,
                            g = e && e.style.paddingLeft && parseInt(e.style.paddingLeft);
                        g += l.x / k;
                        e = e && e.style.paddingBottom && parseInt(e.style.paddingBottom);
                        e += l.y / k;
                        d = a[12] * d + g;
                        a = a[13] * f + e;
                        n && (this.setSize(b.width * c, b.height * t), t = c = 1);
                        b = this._elem;
                        c = "matrix(" + c + "," + -h + "," + -p + "," + t + "," + d + "," + -a + ")";
                        b.style.transform = c;
                        b.style["-webkit-transform"] = c;
                        b.style["transform-origin"] = "0px 100% 0px";
                        b.style["-webkit-transform-origin"] = "0px 100% 0px"
                    }
                }
            },
            _updateInputType: function() {
                var a = this._delegate,
                    c = a.inputMode,
                    d = a.inputFlag,
                    k = a.returnType;
                a = this._elem;
                if (this._inputMode !== c || this._inputFlag !== d || this._returnType !== k)
                    if (this._inputMode = c, this._inputFlag = d, this._returnType = k, this._isTextArea) c = "none", d === l.INITIAL_CAPS_ALL_CHARACTERS ? c = "uppercase" : d === l.INITIAL_CAPS_WORD && (c = "capitalize"), a.style.textTransform =
                        c;
                    else if (d === l.PASSWORD) a.type = "password", a.style.textTransform = "none";
                else {
                    var e = a.type;
                    c === b.EMAIL_ADDR ? e = "email" : c === b.NUMERIC || c === b.DECIMAL ? e = "number" : c === b.PHONE_NUMBER ? (e = "number", a.pattern = "[0-9]*", a.onmousewheel = function() {
                        return !1
                    }) : c === b.URL ? e = "url" : (e = "text", k === f.SEARCH && (e = "search"));
                    a.type = e;
                    c = "none";
                    d === l.INITIAL_CAPS_ALL_CHARACTERS ? c = "uppercase" : d === l.INITIAL_CAPS_WORD && (c = "capitalize");
                    a.style.textTransform = c
                }
            },
            _updateMaxLength: function() {
                var a = this._delegate.maxLength;
                0 > a && (a =
                    65535);
                this._elem.maxLength = a
            },
            _initStyleSheet: function() {
                var a = this._elem;
                a.style.display = "none";
                a.style.border = 0;
                a.style.background = "transparent";
                a.style.width = "100%";
                a.style.height = "100%";
                a.style.active = 0;
                a.style.outline = "medium";
                a.style.padding = "0";
                a.style.textTransform = "none";
                a.style.position = "absolute";
                a.style.bottom = "0px";
                a.style.left = "2px";
                a.className = "cocosEditBox";
                a.id = this._domId;
                this._isTextArea ? (a.style.resize = "none", a.style.overflow_y = "scroll") : (a.type = "text", a.style["-moz-appearance"] =
                    "textfield");
                this._placeholderStyleSheet = document.createElement("style")
            },
            _updateStyleSheet: function() {
                var a = this._delegate,
                    b = this._elem;
                b.value = a.string;
                b.placeholder = a.placeholder;
                this._updateTextLabel(a.textLabel);
                this._updatePlaceholderLabel(a.placeholderLabel)
            },
            _updateTextLabel: function(a) {
                if (a) {
                    var b = a.font;
                    b = !b || b instanceof cc.BitmapFont ? a.fontFamily : b._fontFamily;
                    var d = a.fontSize * a.node.scaleY;
                    if (this._textLabelFont !== b || this._textLabelFontSize !== d || this._textLabelFontColor !== a.fontColor ||
                        this._textLabelAlign !== a.horizontalAlign) {
                        this._textLabelFont = b;
                        this._textLabelFontSize = d;
                        this._textLabelFontColor = a.fontColor;
                        this._textLabelAlign = a.horizontalAlign;
                        var f = this._elem;
                        f.style.fontSize = d + "px";
                        f.style.color = a.node.color.toCSS();
                        f.style.fontFamily = b;
                        switch (a.horizontalAlign) {
                            case c.HorizontalAlign.LEFT:
                                f.style.textAlign = "left";
                                break;
                            case c.HorizontalAlign.CENTER:
                                f.style.textAlign = "center";
                                break;
                            case c.HorizontalAlign.RIGHT:
                                f.style.textAlign = "right"
                        }
                    }
                }
            },
            _updatePlaceholderLabel: function(a) {
                if (a) {
                    var b =
                        a.font;
                    b = !b || b instanceof cc.BitmapFont ? a.fontFamily : a.font._fontFamily;
                    var d = a.fontSize * a.node.scaleY;
                    if (this._placeholderLabelFont !== b || this._placeholderLabelFontSize !== d || this._placeholderLabelFontColor !== a.fontColor || this._placeholderLabelAlign !== a.horizontalAlign || this._placeholderLineHeight !== a.fontSize) {
                        this._placeholderLabelFont = b;
                        this._placeholderLabelFontSize = d;
                        this._placeholderLabelFontColor = a.fontColor;
                        this._placeholderLabelAlign = a.horizontalAlign;
                        this._placeholderLineHeight = a.fontSize;
                        var f = this._placeholderStyleSheet,
                            l = a.node.color.toCSS(),
                            k = a.fontSize;
                        switch (a.horizontalAlign) {
                            case c.HorizontalAlign.LEFT:
                                var e = "left";
                                break;
                            case c.HorizontalAlign.CENTER:
                                e = "center";
                                break;
                            case c.HorizontalAlign.RIGHT:
                                e = "right"
                        }
                        f.innerHTML = "#" + this._domId + "::-webkit-input-placeholder,#" + this._domId + "::-moz-placeholder,#" + this._domId + ":-ms-input-placeholder{text-transform: initial; font-family: " + b + "; font-size: " + d + "px; color: " + l + "; line-height: " + k + "px; text-align: " + e + ";}";
                        cc.sys.browserType ===
                            cc.sys.BROWSER_TYPE_EDGE && (f.innerHTML += "#" + this._domId + "::-ms-clear{display: none;}")
                    }
                }
            },
            _registerEventListeners: function() {
                var b = this,
                    c = this._elem,
                    d = !1,
                    f = this._eventListeners;
                f.compositionStart = function() {
                    d = !0
                };
                f.compositionEnd = function() {
                    d = !1;
                    b._delegate.editBoxTextChanged(c.value)
                };
                f.onInput = function() {
                    if (!d) {
                        var a = b._delegate.maxLength;
                        0 <= a && (c.value = c.value.slice(0, a));
                        b._delegate.editBoxTextChanged(c.value)
                    }
                };
                f.onClick = function(a) {
                    b._editing && cc.sys.isMobile && b._adjustWindowScroll()
                };
                f.onKeydown =
                    function(d) {
                        d.keyCode === k.KEY.enter ? (d.stopPropagation(), b._delegate.editBoxEditingReturn(), b._isTextArea || c.blur()) : d.keyCode === k.KEY.tab && (d.stopPropagation(), d.preventDefault(), a.next(b))
                    };
                f.onBlur = function() {
                    cc.sys.isMobile && d && f.compositionEnd();
                    b._editing = !1;
                    p = null;
                    b._hideDom();
                    b._delegate.editBoxEditingDidEnded()
                };
                c.addEventListener("compositionstart", f.compositionStart);
                c.addEventListener("compositionend", f.compositionEnd);
                c.addEventListener("input", f.onInput);
                c.addEventListener("keydown",
                    f.onKeydown);
                c.addEventListener("blur", f.onBlur);
                c.addEventListener("touchstart", f.onClick)
            },
            _removeEventListeners: function() {
                var a = this._elem,
                    b = this._eventListeners;
                a.removeEventListener("compositionstart", b.compositionStart);
                a.removeEventListener("compositionend", b.compositionEnd);
                a.removeEventListener("input", b.onInput);
                a.removeEventListener("keydown", b.onKeydown);
                a.removeEventListener("blur", b.onBlur);
                a.removeEventListener("touchstart", b.onClick);
                b.compositionStart = null;
                b.compositionEnd = null;
                b.onInput = null;
                b.onKeydown = null;
                b.onBlur = null;
                b.onClick = null
            }
        })
    }, {
        "../../platform/CCMacro": 232,
        "../../platform/utils": 251,
        "../../value-types/mat4": 327,
        "../CCLabel": 140,
        "./tabIndexUtil": 164,
        "./types": 165
    }],
    164: [function(g, q, m) {
        q.exports = {
            _tabIndexList: [],
            add: function(h) {
                var e = this._tabIndexList; - 1 === e.indexOf(h) && e.push(h)
            },
            remove: function(h) {
                var e = this._tabIndexList;
                h = e.indexOf(h); - 1 !== h && e.splice(h, 1)
            },
            resort: function() {
                this._tabIndexList.sort(function(h, e) {
                    return h._delegate._tabIndex - e._delegate._tabIndex
                })
            },
            next: function(h) {
                var e = this._tabIndexList,
                    d = e.indexOf(h);
                h.setFocus(!1); - 1 !== d && (h = e[d + 1]) && 0 <= h._delegate._tabIndex && h.setFocus(!0)
            }
        }
    }, {}],
    165: [function(g, q, m) {
        g = cc.Enum({
            DEFAULT: 0,
            DONE: 1,
            SEND: 2,
            SEARCH: 3,
            GO: 4,
            NEXT: 5
        });
        m = cc.Enum({
            ANY: 0,
            EMAIL_ADDR: 1,
            NUMERIC: 2,
            PHONE_NUMBER: 3,
            URL: 4,
            DECIMAL: 5,
            SINGLE_LINE: 6
        });
        var h = cc.Enum({
            PASSWORD: 0,
            SENSITIVE: 1,
            INITIAL_CAPS_WORD: 2,
            INITIAL_CAPS_SENTENCE: 3,
            INITIAL_CAPS_ALL_CHARACTERS: 4,
            DEFAULT: 5
        });
        q.exports = {
            KeyboardReturnType: g,
            InputMode: m,
            InputFlag: h
        }
    }, {}],
    166: [function(g,
        q, m) {
        g("./CCComponent");
        g("./CCComponentEventHandler");
        g("./missing-script");
        m = g("./SubContextView");
        m || (m = cc.Class({
            name: "cc.SubContextView",
            extends: cc.Component
        }), cc.SubContextView = cc.WXSubContextView = cc.SwanSubContextView = m);
        g = [g("./CCSprite"), g("./CCWidget"), g("./CCCanvas"), g("./CCAudioSource"), g("./CCAnimation"), g("./CCButton"), g("./CCLabel"), g("./CCProgressBar"), g("./CCMask"), g("./CCScrollBar"), g("./CCScrollView"), g("./CCPageViewIndicator"), g("./CCPageView"), g("./CCSlider"), g("./CCLayout"),
            g("./editbox/CCEditBox"), g("./CCLabelOutline"), g("./CCLabelShadow"), g("./CCRichText"), g("./CCToggleContainer"), g("./CCToggleGroup"), g("./CCToggle"), g("./CCBlockInputEvents"), g("./CCMotionStreak"), g("./CCSafeArea"), m
        ];
        q.exports = g
    }, {
        "./CCAnimation": 133,
        "./CCAudioSource": 134,
        "./CCBlockInputEvents": 135,
        "./CCButton": 136,
        "./CCCanvas": 137,
        "./CCComponent": 138,
        "./CCComponentEventHandler": 139,
        "./CCLabel": 140,
        "./CCLabelOutline": 141,
        "./CCLabelShadow": 142,
        "./CCLayout": 143,
        "./CCMask": 144,
        "./CCMotionStreak": 145,
        "./CCPageView": 146,
        "./CCPageViewIndicator": 147,
        "./CCProgressBar": 148,
        "./CCRichText": 150,
        "./CCSafeArea": 151,
        "./CCScrollBar": 152,
        "./CCScrollView": 153,
        "./CCSlider": 154,
        "./CCSprite": 155,
        "./CCToggle": 156,
        "./CCToggleContainer": 157,
        "./CCToggleGroup": 158,
        "./CCWidget": 160,
        "./SubContextView": void 0,
        "./editbox/CCEditBox": 161,
        "./missing-script": 167
    }],
    167: [function(g, q, m) {
        var h = cc.js,
            e = cc.Class({
                name: "cc.MissingScript",
                extends: cc.Component,
                editor: {
                    inspector: "packages://inspector/inspectors/comps/missing-script.js"
                },
                properties: {
                    compiled: {
                        default: !1,
                        serializable: !1
                    },
                    _$erialized: {
                        default: null,
                        visible: !1,
                        editorOnly: !0
                    }
                },
                ctor: !1,
                statics: {
                    safeFindClass: function(d) {
                        var k = h._getClassById(d);
                        if (k) return k;
                        cc.deserialize.reportMissingClass(d);
                        return e
                    }
                },
                onLoad: function() {
                    cc.warnID(4600, this.node.name)
                }
            });
        cc._MissingScript = q.exports = e
    }, {}],
    168: [function(g, q, m) {
        m = cc.js;
        g("../event/event");
        g = function(d, c) {
            cc.Event.call(this, cc.Event.MOUSE, c);
            this._eventType = d;
            this._scrollY = this._scrollX = this._prevY = this._prevX = this._y = this._x =
                this._button = 0
        };
        m.extend(g, cc.Event);
        var h = g.prototype;
        h.setScrollData = function(d, c) {
            this._scrollX = d;
            this._scrollY = c
        };
        h.getScrollX = function() {
            return this._scrollX
        };
        h.getScrollY = function() {
            return this._scrollY
        };
        h.setLocation = function(d, c) {
            this._x = d;
            this._y = c
        };
        h.getLocation = function() {
            return cc.v2(this._x, this._y)
        };
        h.getLocationInView = function() {
            return cc.v2(this._x, cc.view._designResolutionSize.height - this._y)
        };
        h._setPrevCursor = function(d, c) {
            this._prevX = d;
            this._prevY = c
        };
        h.getPreviousLocation = function() {
            return cc.v2(this._prevX,
                this._prevY)
        };
        h.getDelta = function() {
            return cc.v2(this._x - this._prevX, this._y - this._prevY)
        };
        h.getDeltaX = function() {
            return this._x - this._prevX
        };
        h.getDeltaY = function() {
            return this._y - this._prevY
        };
        h.setButton = function(d) {
            this._button = d
        };
        h.getButton = function() {
            return this._button
        };
        h.getLocationX = function() {
            return this._x
        };
        h.getLocationY = function() {
            return this._y
        };
        g.NONE = 0;
        g.DOWN = 1;
        g.UP = 2;
        g.MOVE = 3;
        g.SCROLL = 4;
        g.BUTTON_LEFT = 0;
        g.BUTTON_RIGHT = 2;
        g.BUTTON_MIDDLE = 1;
        g.BUTTON_4 = 3;
        g.BUTTON_5 = 4;
        g.BUTTON_6 = 5;
        g.BUTTON_7 =
            6;
        g.BUTTON_8 = 7;
        var e = function(d, c) {
            cc.Event.call(this, cc.Event.TOUCH, c);
            this._eventCode = 0;
            this._touches = d || [];
            this.currentTouch = this.touch = null
        };
        m.extend(e, cc.Event);
        h = e.prototype;
        h.getEventCode = function() {
            return this._eventCode
        };
        h.getTouches = function() {
            return this._touches
        };
        h._setEventCode = function(d) {
            this._eventCode = d
        };
        h._setTouches = function(d) {
            this._touches = d
        };
        h.setLocation = function(d, c) {
            this.touch && this.touch.setTouchInfo(this.touch.getID(), d, c)
        };
        h.getLocation = function() {
            return this.touch ? this.touch.getLocation() :
                cc.v2()
        };
        h.getLocationInView = function() {
            return this.touch ? this.touch.getLocationInView() : cc.v2()
        };
        h.getPreviousLocation = function() {
            return this.touch ? this.touch.getPreviousLocation() : cc.v2()
        };
        h.getStartLocation = function() {
            return this.touch ? this.touch.getStartLocation() : cc.v2()
        };
        h.getID = function() {
            return this.touch ? this.touch.getID() : null
        };
        h.getDelta = function() {
            return this.touch ? this.touch.getDelta() : cc.v2()
        };
        h.getDeltaX = function() {
            return this.touch ? this.touch.getDelta().x : 0
        };
        h.getDeltaY = function() {
            return this.touch ?
                this.touch.getDelta().y : 0
        };
        h.getLocationX = function() {
            return this.touch ? this.touch.getLocationX() : 0
        };
        h.getLocationY = function() {
            return this.touch ? this.touch.getLocationY() : 0
        };
        e.MAX_TOUCHES = 5;
        e.BEGAN = 0;
        e.MOVED = 1;
        e.ENDED = 2;
        e.CANCELED = 3;
        h = function(d, c) {
            cc.Event.call(this, cc.Event.ACCELERATION, c);
            this.acc = d
        };
        m.extend(h, cc.Event);
        var d = function(d, c, a) {
            cc.Event.call(this, cc.Event.KEYBOARD, a);
            this.keyCode = d;
            this.isPressed = c
        };
        m.extend(d, cc.Event);
        cc.Event.EventMouse = g;
        cc.Event.EventTouch = e;
        cc.Event.EventAcceleration =
            h;
        cc.Event.EventKeyboard = d;
        q.exports = cc.Event
    }, {
        "../event/event": 175
    }],
    169: [function(g, q, m) {
        g = g("../platform/js");
        cc.EventListener = function(a, b, c) {
            this._onEvent = c;
            this._type = a || 0;
            this._listenerID = b || "";
            this._registered = !1;
            this._fixedPriority = 0;
            this._target = this._node = null;
            this._isEnabled = this._paused = !0
        };
        cc.EventListener.prototype = {
            constructor: cc.EventListener,
            _setPaused: function(a) {
                this._paused = a
            },
            _isPaused: function() {
                return this._paused
            },
            _setRegistered: function(a) {
                this._registered = a
            },
            _isRegistered: function() {
                return this._registered
            },
            _getType: function() {
                return this._type
            },
            _getListenerID: function() {
                return this._listenerID
            },
            _setFixedPriority: function(a) {
                this._fixedPriority = a
            },
            _getFixedPriority: function() {
                return this._fixedPriority
            },
            _setSceneGraphPriority: function(a) {
                this._node = this._target = a
            },
            _getSceneGraphPriority: function() {
                return this._node
            },
            checkAvailable: function() {
                return null !== this._onEvent
            },
            clone: function() {
                return null
            },
            setEnabled: function(a) {
                this._isEnabled = a
            },
            isEnabled: function() {
                return this._isEnabled
            },
            retain: function() {},
            release: function() {}
        };
        cc.EventListener.UNKNOWN = 0;
        cc.EventListener.TOUCH_ONE_BY_ONE = 1;
        cc.EventListener.TOUCH_ALL_AT_ONCE = 2;
        cc.EventListener.KEYBOARD = 3;
        cc.EventListener.MOUSE = 4;
        cc.EventListener.ACCELERATION = 6;
        cc.EventListener.CUSTOM = 8;
        var h = cc.EventListener.ListenerID = {
                MOUSE: "__cc_mouse",
                TOUCH_ONE_BY_ONE: "__cc_touch_one_by_one",
                TOUCH_ALL_AT_ONCE: "__cc_touch_all_at_once",
                KEYBOARD: "__cc_keyboard",
                ACCELERATION: "__cc_acceleration"
            },
            e = function(a, b) {
                this._onCustomEvent = b;
                cc.EventListener.call(this, cc.EventListener.CUSTOM,
                    a, this._callback)
            };
        g.extend(e, cc.EventListener);
        g.mixin(e.prototype, {
            _onCustomEvent: null,
            _callback: function(a) {
                null !== this._onCustomEvent && this._onCustomEvent(a)
            },
            checkAvailable: function() {
                return cc.EventListener.prototype.checkAvailable.call(this) && null !== this._onCustomEvent
            },
            clone: function() {
                return new e(this._listenerID, this._onCustomEvent)
            }
        });
        var d = function() {
            cc.EventListener.call(this, cc.EventListener.MOUSE, h.MOUSE, this._callback)
        };
        g.extend(d, cc.EventListener);
        g.mixin(d.prototype, {
            onMouseDown: null,
            onMouseUp: null,
            onMouseMove: null,
            onMouseScroll: null,
            _callback: function(a) {
                var b = cc.Event.EventMouse;
                switch (a._eventType) {
                    case b.DOWN:
                        this.onMouseDown && this.onMouseDown(a);
                        break;
                    case b.UP:
                        this.onMouseUp && this.onMouseUp(a);
                        break;
                    case b.MOVE:
                        this.onMouseMove && this.onMouseMove(a);
                        break;
                    case b.SCROLL:
                        this.onMouseScroll && this.onMouseScroll(a)
                }
            },
            clone: function() {
                var a = new d;
                a.onMouseDown = this.onMouseDown;
                a.onMouseUp = this.onMouseUp;
                a.onMouseMove = this.onMouseMove;
                a.onMouseScroll = this.onMouseScroll;
                return a
            },
            checkAvailable: function() {
                return !0
            }
        });
        var k = function() {
            cc.EventListener.call(this, cc.EventListener.TOUCH_ONE_BY_ONE, h.TOUCH_ONE_BY_ONE, null);
            this._claimedTouches = []
        };
        g.extend(k, cc.EventListener);
        g.mixin(k.prototype, {
            constructor: k,
            _claimedTouches: null,
            swallowTouches: !1,
            onTouchBegan: null,
            onTouchMoved: null,
            onTouchEnded: null,
            onTouchCancelled: null,
            setSwallowTouches: function(a) {
                this.swallowTouches = a
            },
            isSwallowTouches: function() {
                return this.swallowTouches
            },
            clone: function() {
                var a = new k;
                a.onTouchBegan = this.onTouchBegan;
                a.onTouchMoved = this.onTouchMoved;
                a.onTouchEnded = this.onTouchEnded;
                a.onTouchCancelled = this.onTouchCancelled;
                a.swallowTouches = this.swallowTouches;
                return a
            },
            checkAvailable: function() {
                return this.onTouchBegan ? !0 : (cc.logID(1801), !1)
            }
        });
        var c = function() {
            cc.EventListener.call(this, cc.EventListener.TOUCH_ALL_AT_ONCE, h.TOUCH_ALL_AT_ONCE, null)
        };
        g.extend(c, cc.EventListener);
        g.mixin(c.prototype, {
            constructor: c,
            onTouchesBegan: null,
            onTouchesMoved: null,
            onTouchesEnded: null,
            onTouchesCancelled: null,
            clone: function() {
                var a =
                    new c;
                a.onTouchesBegan = this.onTouchesBegan;
                a.onTouchesMoved = this.onTouchesMoved;
                a.onTouchesEnded = this.onTouchesEnded;
                a.onTouchesCancelled = this.onTouchesCancelled;
                return a
            },
            checkAvailable: function() {
                return null === this.onTouchesBegan && null === this.onTouchesMoved && null === this.onTouchesEnded && null === this.onTouchesCancelled ? (cc.logID(1802), !1) : !0
            }
        });
        var a = function(a) {
            this._onAccelerationEvent = a;
            cc.EventListener.call(this, cc.EventListener.ACCELERATION, h.ACCELERATION, this._callback)
        };
        g.extend(a, cc.EventListener);
        g.mixin(a.prototype, {
            constructor: a,
            _onAccelerationEvent: null,
            _callback: function(a) {
                this._onAccelerationEvent(a.acc, a)
            },
            checkAvailable: function() {
                cc.assertID(this._onAccelerationEvent, 1803);
                return !0
            },
            clone: function() {
                return new a(this._onAccelerationEvent)
            }
        });
        var b = function() {
            cc.EventListener.call(this, cc.EventListener.KEYBOARD, h.KEYBOARD, this._callback)
        };
        g.extend(b, cc.EventListener);
        g.mixin(b.prototype, {
            constructor: b,
            onKeyPressed: null,
            onKeyReleased: null,
            _callback: function(a) {
                a.isPressed ? this.onKeyPressed &&
                    this.onKeyPressed(a.keyCode, a) : this.onKeyReleased && this.onKeyReleased(a.keyCode, a)
            },
            clone: function() {
                var a = new b;
                a.onKeyPressed = this.onKeyPressed;
                a.onKeyReleased = this.onKeyReleased;
                return a
            },
            checkAvailable: function() {
                return null === this.onKeyPressed && null === this.onKeyReleased ? (cc.logID(1800), !1) : !0
            }
        });
        cc.EventListener.create = function(l) {
            cc.assertID(l && l.event, 1900);
            var f = l.event;
            delete l.event;
            var n = null;
            f === cc.EventListener.TOUCH_ONE_BY_ONE ? n = new k : f === cc.EventListener.TOUCH_ALL_AT_ONCE ? n = new c : f ===
                cc.EventListener.MOUSE ? n = new d : f === cc.EventListener.CUSTOM ? (n = new e(l.eventName, l.callback), delete l.eventName, delete l.callback) : f === cc.EventListener.KEYBOARD ? n = new b : f === cc.EventListener.ACCELERATION && (n = new a(l.callback), delete l.callback);
            for (var h in l) n[h] = l[h];
            return n
        };
        q.exports = cc.EventListener
    }, {
        "../platform/js": 248
    }],
    170: [function(g, q, m) {
        m = g("../platform/js");
        g("./CCEventListener");
        var h = cc.EventListener.ListenerID,
            e = function() {
                this._fixedListeners = [];
                this._sceneGraphListeners = [];
                this.gt0Index =
                    0
            };
        e.prototype = {
            constructor: e,
            size: function() {
                return this._fixedListeners.length + this._sceneGraphListeners.length
            },
            empty: function() {
                return 0 === this._fixedListeners.length && 0 === this._sceneGraphListeners.length
            },
            push: function(c) {
                0 === c._getFixedPriority() ? this._sceneGraphListeners.push(c) : this._fixedListeners.push(c)
            },
            clearSceneGraphListeners: function() {
                this._sceneGraphListeners.length = 0
            },
            clearFixedListeners: function() {
                this._fixedListeners.length = 0
            },
            clear: function() {
                this._sceneGraphListeners.length =
                    0;
                this._fixedListeners.length = 0
            },
            getFixedPriorityListeners: function() {
                return this._fixedListeners
            },
            getSceneGraphPriorityListeners: function() {
                return this._sceneGraphListeners
            }
        };
        var d = function(c) {
                var a = cc.Event;
                c = c.type;
                if (c === a.ACCELERATION) return h.ACCELERATION;
                if (c === a.KEYBOARD) return h.KEYBOARD;
                if (c.startsWith(a.MOUSE)) return h.MOUSE;
                c.startsWith(a.TOUCH) && cc.logID(2E3);
                return ""
            },
            k = {
                DIRTY_NONE: 0,
                DIRTY_FIXED_PRIORITY: 1,
                DIRTY_SCENE_GRAPH_PRIORITY: 2,
                DIRTY_ALL: 3,
                _listenersMap: {},
                _priorityDirtyFlagMap: {},
                _nodeListenersMap: {},
                _toAddedListeners: [],
                _toRemovedListeners: [],
                _dirtyListeners: {},
                _inDispatch: 0,
                _isEnabled: !1,
                _currentTouch: null,
                _currentTouchListener: null,
                _internalCustomListenerIDs: [],
                _setDirtyForNode: function(c) {
                    var a = this._nodeListenersMap[c._id];
                    if (a)
                        for (var b = 0, d = a.length; b < d; b++) {
                            var f = a[b]._getListenerID();
                            null == this._dirtyListeners[f] && (this._dirtyListeners[f] = !0)
                        }
                    if (0 < c.childrenCount)
                        for (c = c._children, a = 0, b = c.length; a < b; a++) this._setDirtyForNode(c[a])
                },
                pauseTarget: function(c, a) {
                    if (c instanceof cc._BaseNode) {
                        var b = this._nodeListenersMap[c._id],
                            d;
                        if (b) {
                            var f = 0;
                            for (d = b.length; f < d; f++) {
                                var k = b[f];
                                k._setPaused(!0);
                                k._claimedTouches && k._claimedTouches.includes(this._currentTouch) && this._clearCurTouch()
                            }
                        }
                        if (!0 === a)
                            for (c = c._children, f = 0, d = c ? c.length : 0; f < d; f++) this.pauseTarget(c[f], !0)
                    } else cc.warnID(3506)
                },
                resumeTarget: function(c, a) {
                    if (c instanceof cc._BaseNode) {
                        var b = this._nodeListenersMap[c._id],
                            d;
                        if (b) {
                            var f = 0;
                            for (d = b.length; f < d; f++) b[f]._setPaused(!1)
                        }
                        this._setDirtyForNode(c);
                        if (!0 === a)
                            for (c =
                                c._children, f = 0, d = c ? c.length : 0; f < d; f++) this.resumeTarget(c[f], !0)
                    } else cc.warnID(3506)
                },
                _addListener: function(c) {
                    0 === this._inDispatch ? this._forceAddEventListener(c) : this._toAddedListeners.push(c)
                },
                _forceAddEventListener: function(c) {
                    var a = c._getListenerID(),
                        b = this._listenersMap[a];
                    b || (b = new e, this._listenersMap[a] = b);
                    b.push(c);
                    0 === c._getFixedPriority() ? (this._setDirty(a, this.DIRTY_SCENE_GRAPH_PRIORITY), a = c._getSceneGraphPriority(), null === a && cc.logID(3507), this._associateNodeAndEventListener(a, c), a.activeInHierarchy &&
                        this.resumeTarget(a)) : this._setDirty(a, this.DIRTY_FIXED_PRIORITY)
                },
                _getListeners: function(c) {
                    return this._listenersMap[c]
                },
                _updateDirtyFlagForSceneGraph: function() {
                    var c = this._dirtyListeners,
                        a;
                    for (a in c) this._setDirty(a, this.DIRTY_SCENE_GRAPH_PRIORITY);
                    this._dirtyListeners = {}
                },
                _removeAllListenersInVector: function(c) {
                    if (c)
                        for (var a, b = c.length - 1; 0 <= b; b--) a = c[b], a._setRegistered(!1), null != a._getSceneGraphPriority() && (this._dissociateNodeAndEventListener(a._getSceneGraphPriority(), a), a._setSceneGraphPriority(null)),
                            0 === this._inDispatch && cc.js.array.removeAt(c, b)
                },
                _removeListenersForListenerID: function(c) {
                    var a = this._listenersMap[c];
                    if (a) {
                        var b = a.getFixedPriorityListeners(),
                            d = a.getSceneGraphPriorityListeners();
                        this._removeAllListenersInVector(d);
                        this._removeAllListenersInVector(b);
                        delete this._priorityDirtyFlagMap[c];
                        this._inDispatch || (a.clear(), delete this._listenersMap[c])
                    }
                    b = this._toAddedListeners;
                    for (a = b.length - 1; 0 <= a; a--)(d = b[a]) && d._getListenerID() === c && cc.js.array.removeAt(b, a)
                },
                _sortEventListeners: function(c) {
                    var a =
                        this.DIRTY_NONE,
                        b = this._priorityDirtyFlagMap;
                    b[c] && (a = b[c]);
                    a !== this.DIRTY_NONE && (b[c] = this.DIRTY_NONE, a & this.DIRTY_FIXED_PRIORITY && this._sortListenersOfFixedPriority(c), a & this.DIRTY_SCENE_GRAPH_PRIORITY && cc.director.getScene() && this._sortListenersOfSceneGraphPriority(c))
                },
                _sortListenersOfSceneGraphPriority: function(c) {
                    if (c = this._getListeners(c)) {
                        var a = c.getSceneGraphPriorityListeners();
                        a && 0 !== a.length && c.getSceneGraphPriorityListeners().sort(this._sortEventListenersOfSceneGraphPriorityDes)
                    }
                },
                _sortEventListenersOfSceneGraphPriorityDes: function(c,
                    a) {
                    var b = c._getSceneGraphPriority(),
                        d = a._getSceneGraphPriority();
                    if (!(a && d && d._activeInHierarchy && null !== d._parent)) return -1;
                    if (!c || !b || !b._activeInHierarchy || null === b._parent) return 1;
                    c = b;
                    a = d;
                    for (var f = !1; c._parent._id !== a._parent._id;) c = null === c._parent._parent ? (f = !0, d) : c._parent, a = null === a._parent._parent ? (f = !0, b) : a._parent;
                    if (c._id === a._id) {
                        if (c._id === d._id) return -1;
                        if (c._id === b._id) return 1
                    }
                    return f ? c._localZOrder - a._localZOrder : a._localZOrder - c._localZOrder
                },
                _sortListenersOfFixedPriority: function(c) {
                    if (c =
                        this._listenersMap[c]) {
                        var a = c.getFixedPriorityListeners();
                        if (a && 0 !== a.length) {
                            a.sort(this._sortListenersOfFixedPriorityAsc);
                            for (var b = 0, d = a.length; b < d && !(0 <= a[b]._getFixedPriority());) ++b;
                            c.gt0Index = b
                        }
                    }
                },
                _sortListenersOfFixedPriorityAsc: function(c, a) {
                    return c._getFixedPriority() - a._getFixedPriority()
                },
                _onUpdateListeners: function(c) {
                    var a = c.getFixedPriorityListeners(),
                        b = c.getSceneGraphPriorityListeners(),
                        d, f = this._toRemovedListeners;
                    if (b)
                        for (d = b.length - 1; 0 <= d; d--) {
                            var k = b[d];
                            k._isRegistered() || (cc.js.array.removeAt(b,
                                d), k = f.indexOf(k), -1 !== k && f.splice(k, 1))
                        }
                    if (a)
                        for (d = a.length - 1; 0 <= d; d--) k = a[d], k._isRegistered() || (cc.js.array.removeAt(a, d), k = f.indexOf(k), -1 !== k && f.splice(k, 1));
                    b && 0 === b.length && c.clearSceneGraphListeners();
                    a && 0 === a.length && c.clearFixedListeners()
                },
                frameUpdateListeners: function() {
                    var c = this._listenersMap,
                        a = this._priorityDirtyFlagMap,
                        b;
                    for (b in c) c[b].empty() && (delete a[b], delete c[b]);
                    c = this._toAddedListeners;
                    if (0 !== c.length) {
                        a = 0;
                        for (b = c.length; a < b; a++) this._forceAddEventListener(c[a]);
                        c.length =
                            0
                    }
                    0 !== this._toRemovedListeners.length && this._cleanToRemovedListeners()
                },
                _updateTouchListeners: function(c) {
                    c = this._inDispatch;
                    cc.assertID(0 < c, 3508);
                    if (!(1 < c)) {
                        var a;
                        (a = this._listenersMap[h.TOUCH_ONE_BY_ONE]) && this._onUpdateListeners(a);
                        (a = this._listenersMap[h.TOUCH_ALL_AT_ONCE]) && this._onUpdateListeners(a);
                        cc.assertID(1 === c, 3509);
                        c = this._toAddedListeners;
                        if (0 !== c.length) {
                            a = 0;
                            for (var b = c.length; a < b; a++) this._forceAddEventListener(c[a]);
                            this._toAddedListeners.length = 0
                        }
                        0 !== this._toRemovedListeners.length &&
                            this._cleanToRemovedListeners()
                    }
                },
                _cleanToRemovedListeners: function() {
                    for (var c = this._toRemovedListeners, a = 0; a < c.length; a++) {
                        var b = c[a],
                            d = this._listenersMap[b._getListenerID()];
                        if (d) {
                            var f = d.getFixedPriorityListeners(),
                                k = d.getSceneGraphPriorityListeners();
                            k && (d = k.indexOf(b), -1 !== d && k.splice(d, 1));
                            f && (d = f.indexOf(b), -1 !== d && f.splice(d, 1))
                        }
                    }
                    c.length = 0
                },
                _onTouchEventCallback: function(c, a) {
                    if (!c._isRegistered()) return !1;
                    var b = a.event,
                        d = b.currentTouch;
                    b.currentTarget = c._node;
                    var f = !1,
                        e, h = b.getEventCode(),
                        g = cc.Event.EventTouch;
                    if (h === g.BEGAN) {
                        if (!cc.macro.ENABLE_MULTI_TOUCH && k._currentTouch && (e = k._currentTouchListener._node) && e.activeInHierarchy) return !1;
                        c.onTouchBegan && (f = c.onTouchBegan(d, b)) && c._registered && (c._claimedTouches.push(d), k._currentTouchListener = c, k._currentTouch = d)
                    } else if (0 < c._claimedTouches.length && -1 !== (e = c._claimedTouches.indexOf(d))) {
                        f = !0;
                        if (!cc.macro.ENABLE_MULTI_TOUCH && k._currentTouch && k._currentTouch !== d) return !1;
                        if (h === g.MOVED && c.onTouchMoved) c.onTouchMoved(d, b);
                        else h === g.ENDED ?
                            (c.onTouchEnded && c.onTouchEnded(d, b), c._registered && c._claimedTouches.splice(e, 1), k._clearCurTouch()) : h === g.CANCELED && (c.onTouchCancelled && c.onTouchCancelled(d, b), c._registered && c._claimedTouches.splice(e, 1), k._clearCurTouch())
                    }
                    return b.isStopped() ? (k._updateTouchListeners(b), !0) : f && c.swallowTouches ? (a.needsMutableSet && a.touches.splice(d, 1), !0) : !1
                },
                _dispatchTouchEvent: function(c) {
                    this._sortEventListeners(h.TOUCH_ONE_BY_ONE);
                    this._sortEventListeners(h.TOUCH_ALL_AT_ONCE);
                    var a = this._getListeners(h.TOUCH_ONE_BY_ONE),
                        b = this._getListeners(h.TOUCH_ALL_AT_ONCE);
                    if (null !== a || null !== b) {
                        var d = c.getTouches(),
                            f = cc.js.array.copy(d),
                            k = {
                                event: c,
                                needsMutableSet: a && b,
                                touches: f,
                                selTouch: null
                            };
                        if (a)
                            for (var e = 0; e < d.length; e++) c.currentTouch = d[e], c._propagationStopped = c._propagationImmediateStopped = !1, this._dispatchEventToListeners(a, this._onTouchEventCallback, k);
                        if (b && 0 < f.length && (this._dispatchEventToListeners(b, this._onTouchesEventCallback, {
                                event: c,
                                touches: f
                            }), c.isStopped())) return;
                        this._updateTouchListeners(c)
                    }
                },
                _onTouchesEventCallback: function(c,
                    a) {
                    if (!c._registered) return !1;
                    var b = cc.Event.EventTouch,
                        d = a.event;
                    a = a.touches;
                    var f = d.getEventCode();
                    d.currentTarget = c._node;
                    f === b.BEGAN && c.onTouchesBegan ? c.onTouchesBegan(a, d) : f === b.MOVED && c.onTouchesMoved ? c.onTouchesMoved(a, d) : f === b.ENDED && c.onTouchesEnded ? c.onTouchesEnded(a, d) : f === b.CANCELED && c.onTouchesCancelled && c.onTouchesCancelled(a, d);
                    return d.isStopped() ? (k._updateTouchListeners(d), !0) : !1
                },
                _associateNodeAndEventListener: function(c, a) {
                    var b = this._nodeListenersMap[c._id];
                    b || (b = [], this._nodeListenersMap[c._id] =
                        b);
                    b.push(a)
                },
                _dissociateNodeAndEventListener: function(c, a) {
                    var b = this._nodeListenersMap[c._id];
                    b && (cc.js.array.remove(b, a), 0 === b.length && delete this._nodeListenersMap[c._id])
                },
                _dispatchEventToListeners: function(c, a, b) {
                    var d = !1,
                        f = c.getFixedPriorityListeners(),
                        k = c.getSceneGraphPriorityListeners(),
                        e = 0;
                    if (f && 0 !== f.length)
                        for (; e < c.gt0Index; ++e) {
                            var h = f[e];
                            if (h.isEnabled() && !h._isPaused() && h._isRegistered() && a(h, b)) {
                                d = !0;
                                break
                            }
                        }
                    if (k && !d)
                        for (c = 0; c < k.length; c++)
                            if (h = k[c], h.isEnabled() && !h._isPaused() && h._isRegistered() &&
                                a(h, b)) {
                                d = !0;
                                break
                            }
                    if (f && !d)
                        for (; e < f.length && (h = f[e], !h.isEnabled() || h._isPaused() || !h._isRegistered() || !a(h, b)); ++e);
                },
                _setDirty: function(c, a) {
                    var b = this._priorityDirtyFlagMap;
                    null == b[c] ? b[c] = a : b[c] |= a
                },
                _sortNumberAsc: function(c, a) {
                    return c - a
                },
                hasEventListener: function(c) {
                    return !!this._getListeners(c)
                },
                addListener: function(c, a) {
                    cc.assertID(c && a, 3503);
                    if (cc.js.isNumber(a) || a instanceof cc._BaseNode) {
                        if (c instanceof cc.EventListener) {
                            if (c._isRegistered()) {
                                cc.logID(3505);
                                return
                            }
                        } else cc.assertID(!cc.js.isNumber(a),
                            3504), c = cc.EventListener.create(c);
                        if (c.checkAvailable()) {
                            if (cc.js.isNumber(a)) {
                                if (0 === a) {
                                    cc.logID(3500);
                                    return
                                }
                                c._setSceneGraphPriority(null);
                                c._setFixedPriority(a);
                                c._setRegistered(!0);
                                c._setPaused(!1)
                            } else c._setSceneGraphPriority(a), c._setFixedPriority(0), c._setRegistered(!0);
                            this._addListener(c);
                            return c
                        }
                    } else cc.warnID(3506)
                },
                addCustomListener: function(c, a) {
                    c = new cc.EventListener.create({
                        event: cc.EventListener.CUSTOM,
                        eventName: c,
                        callback: a
                    });
                    this.addListener(c, 1);
                    return c
                },
                removeListener: function(c) {
                    if (null !=
                        c) {
                        var a = this._listenersMap,
                            b;
                        for (b in a) {
                            var d = a[b],
                                f = d.getFixedPriorityListeners();
                            var k = d.getSceneGraphPriorityListeners();
                            (k = this._removeListenerInVector(k, c)) ? this._setDirty(c._getListenerID(), this.DIRTY_SCENE_GRAPH_PRIORITY): (k = this._removeListenerInVector(f, c)) && this._setDirty(c._getListenerID(), this.DIRTY_FIXED_PRIORITY);
                            d.empty() && (delete this._priorityDirtyFlagMap[c._getListenerID()], delete a[b]);
                            if (k) break
                        }
                        if (!k)
                            for (a = this._toAddedListeners, b = a.length - 1; 0 <= b; b--)
                                if (d = a[b], d === c) {
                                    cc.js.array.removeAt(a,
                                        b);
                                    d._setRegistered(!1);
                                    break
                                }
                        this._currentTouchListener === c && this._clearCurTouch()
                    }
                },
                _clearCurTouch: function() {
                    this._currentTouch = this._currentTouchListener = null
                },
                _removeListenerInCallback: function(c, a) {
                    if (null == c) return !1;
                    for (var b = c.length - 1; 0 <= b; b--) {
                        var d = c[b];
                        if (d._onCustomEvent === a || d._onEvent === a) return d._setRegistered(!1), null != d._getSceneGraphPriority() && (this._dissociateNodeAndEventListener(d._getSceneGraphPriority(), d), d._setSceneGraphPriority(null)), 0 === this._inDispatch ? cc.js.array.removeAt(c,
                            b) : this._toRemovedListeners.push(d), !0
                    }
                    return !1
                },
                _removeListenerInVector: function(c, a) {
                    if (null == c) return !1;
                    for (var b = c.length - 1; 0 <= b; b--) {
                        var d = c[b];
                        if (d === a) return d._setRegistered(!1), null != d._getSceneGraphPriority() && (this._dissociateNodeAndEventListener(d._getSceneGraphPriority(), d), d._setSceneGraphPriority(null)), 0 === this._inDispatch ? cc.js.array.removeAt(c, b) : this._toRemovedListeners.push(d), !0
                    }
                    return !1
                },
                removeListeners: function(c, a) {
                    var b;
                    if (cc.js.isNumber(c) || c instanceof cc._BaseNode)
                        if (void 0 !==
                            c._id) {
                            if (b = this._nodeListenersMap[c._id]) {
                                var d = cc.js.array.copy(b);
                                for (b = 0; b < d.length; b++) this.removeListener(d[b]);
                                delete this._nodeListenersMap[c._id]
                            }
                            d = this._toAddedListeners;
                            for (b = 0; b < d.length;) {
                                var f = d[b];
                                f._getSceneGraphPriority() === c ? (f._setSceneGraphPriority(null), f._setRegistered(!1), d.splice(b, 1)) : ++b
                            }
                            if (!0 === a)
                                for (c = c.children, b = 0, a = c.length; b < a; b++) this.removeListeners(c[b], !0)
                        } else c === cc.EventListener.TOUCH_ONE_BY_ONE ? this._removeListenersForListenerID(h.TOUCH_ONE_BY_ONE) : c === cc.EventListener.TOUCH_ALL_AT_ONCE ?
                            this._removeListenersForListenerID(h.TOUCH_ALL_AT_ONCE) : c === cc.EventListener.MOUSE ? this._removeListenersForListenerID(h.MOUSE) : c === cc.EventListener.ACCELERATION ? this._removeListenersForListenerID(h.ACCELERATION) : c === cc.EventListener.KEYBOARD ? this._removeListenersForListenerID(h.KEYBOARD) : cc.logID(3501);
                    else cc.warnID(3506)
                },
                removeCustomListeners: function(c) {
                    this._removeListenersForListenerID(c)
                },
                removeAllListeners: function() {
                    var c = this._listenersMap,
                        a = this._internalCustomListenerIDs,
                        b;
                    for (b in c) - 1 ===
                        a.indexOf(b) && this._removeListenersForListenerID(b)
                },
                setPriority: function(c, a) {
                    if (null != c) {
                        var b = this._listenersMap,
                            d;
                        for (d in b) {
                            var f = b[d].getFixedPriorityListeners();
                            if (f && -1 !== f.indexOf(c)) {
                                null != c._getSceneGraphPriority() && cc.logID(3502);
                                c._getFixedPriority() !== a && (c._setFixedPriority(a), this._setDirty(c._getListenerID(), this.DIRTY_FIXED_PRIORITY));
                                break
                            }
                        }
                    }
                },
                setEnabled: function(c) {
                    this._isEnabled = c
                },
                isEnabled: function() {
                    return this._isEnabled
                },
                dispatchEvent: function(c) {
                    if (this._isEnabled)
                        if (this._updateDirtyFlagForSceneGraph(),
                            this._inDispatch++, c && c.getType) {
                            if (c.getType().startsWith(cc.Event.TOUCH)) this._dispatchTouchEvent(c);
                            else {
                                var a = d(c);
                                this._sortEventListeners(a);
                                a = this._listenersMap[a];
                                null != a && (this._dispatchEventToListeners(a, this._onListenerCallback, c), this._onUpdateListeners(a))
                            }
                            this._inDispatch--
                        } else cc.errorID(3511)
                },
                _onListenerCallback: function(c, a) {
                    a.currentTarget = c._target;
                    c._onEvent(a);
                    return a.isStopped()
                },
                dispatchCustomEvent: function(c, a) {
                    c = new cc.Event.EventCustom(c);
                    c.setUserData(a);
                    this.dispatchEvent(c)
                }
            };
        m.get(cc, "eventManager", function() {
            cc.errorID(1405, "cc.eventManager", "cc.EventTarget or cc.systemEvent");
            return k
        });
        q.exports = cc.internal.eventManager = k
    }, {
        "../platform/js": 248,
        "./CCEventListener": 169
    }],
    171: [function(g, q, m) {
        cc.Touch = function(h, e, d) {
            this._lastModified = 0;
            this.setTouchInfo(d, h, e)
        };
        cc.Touch.prototype = {
            constructor: cc.Touch,
            getLocation: function() {
                return cc.v2(this._point.x, this._point.y)
            },
            getLocationX: function() {
                return this._point.x
            },
            getLocationY: function() {
                return this._point.y
            },
            getPreviousLocation: function() {
                return cc.v2(this._prevPoint.x,
                    this._prevPoint.y)
            },
            getStartLocation: function() {
                return cc.v2(this._startPoint.x, this._startPoint.y)
            },
            getDelta: function() {
                return this._point.sub(this._prevPoint)
            },
            getLocationInView: function() {
                return cc.v2(this._point.x, cc.view._designResolutionSize.height - this._point.y)
            },
            getPreviousLocationInView: function() {
                return cc.v2(this._prevPoint.x, cc.view._designResolutionSize.height - this._prevPoint.y)
            },
            getStartLocationInView: function() {
                return cc.v2(this._startPoint.x, cc.view._designResolutionSize.height - this._startPoint.y)
            },
            getID: function() {
                return this._id
            },
            setTouchInfo: function(h, e, d) {
                this._prevPoint = this._point;
                this._point = cc.v2(e || 0, d || 0);
                this._id = h;
                this._startPointCaptured || (this._startPoint = cc.v2(this._point), cc.view._convertPointWithScale(this._startPoint), this._startPointCaptured = !0)
            },
            _setPoint: function(h, e) {
                void 0 === e ? (this._point.x = h.x, this._point.y = h.y) : (this._point.x = h, this._point.y = e)
            },
            _setPrevPoint: function(h, e) {
                this._prevPoint = void 0 === e ? cc.v2(h.x, h.y) : cc.v2(h || 0, e || 0)
            }
        }
    }, {}],
    172: [function(g, q, m) {
        g("./CCEvent");
        g("./CCTouch");
        g("./CCEventListener");
        g = g("./CCEventManager");
        q.exports = g;
        !1
    }, {
        "./CCEvent": 168,
        "./CCEventListener": 169,
        "./CCEventManager": 170,
        "./CCTouch": 171
    }],
    173: [function(g, q, m) {
        function h() {
            e.call(this)
        }
        m = cc.js;
        var e = g("../platform/callbacks-invoker");
        m.extend(h, e);
        h.prototype.emit = function(d, k) {
            var c = this._callbackTable[d.type];
            if (c) {
                var a = !c.isInvoking;
                c.isInvoking = !0;
                for (var b = c.callbackInfos, l = 0, f = b.length; l < f; ++l) {
                    var e = b[l];
                    if (e && e.callback && (e.callback.call(e.target, d, k), d._propagationImmediateStopped)) break
                }
                a &&
                    (c.isInvoking = !1, c.containCanceled && c.purgeCanceled())
            }
        };
        q.exports = h;
        !1
    }, {
        "../platform/callbacks-invoker": 240
    }],
    174: [function(g, q, m) {
        function h() {
            e.call(this)
        }
        m = g("../platform/js");
        var e = g("../platform/callbacks-invoker"),
            d = m.array.fastRemove;
        m.extend(h, e);
        g = h.prototype;
        g.__on = g.on;
        g.on = function(d, c, a, b) {
            if (c) return this.hasEventListener(d, c, a) || (this.__on(d, c, a, b), a && a.__eventTargets && a.__eventTargets.push(this)), c;
            cc.errorID(6800)
        };
        g.__off = g.off;
        g.off = function(k, c, a) {
            if (c) this.__off(k, c, a), a && a.__eventTargets &&
                d(a.__eventTargets, this);
            else if (c = this._callbackTable[k]) {
                c = c.callbackInfos;
                for (a = 0; a < c.length; ++a) {
                    var b = c[a] && c[a].target;
                    b && b.__eventTargets && d(b.__eventTargets, this)
                }
                this.removeAll(k)
            }
        };
        g.targetOff = function(k) {
            this.removeAll(k);
            k && k.__eventTargets && d(k.__eventTargets, this)
        };
        g.once = function(d, c, a) {
            this.on(d, c, a, !0)
        };
        g.dispatchEvent = function(d) {
            this.emit(d.type, d)
        };
        g.clear = function() {
            for (var d in this._callbackTable)
                for (var c = this._callbackTable[d].callbackInfos, a = c.length - 1; 0 <= a; a--) {
                    var b = c[a];
                    b && this.off(d, b.callback, b.target)
                }
        };
        cc.EventTarget = q.exports = h
    }, {
        "../platform/callbacks-invoker": 240,
        "../platform/js": 248
    }],
    175: [function(g, q, m) {
        g = g("../platform/js");
        cc.Event = function(d, k) {
            this.type = d;
            this.bubbles = !!k;
            this.currentTarget = this.target = null;
            this.eventPhase = 0;
            this._propagationImmediateStopped = this._propagationStopped = !1
        };
        cc.Event.prototype = {
            constructor: cc.Event,
            unuse: function() {
                this.type = cc.Event.NO_TYPE;
                this.currentTarget = this.target = null;
                this.eventPhase = cc.Event.NONE;
                this._propagationImmediateStopped =
                    this._propagationStopped = !1
            },
            reuse: function(d, k) {
                this.type = d;
                this.bubbles = k || !1
            },
            stopPropagation: function() {
                this._propagationStopped = !0
            },
            stopPropagationImmediate: function() {
                this._propagationImmediateStopped = !0
            },
            isStopped: function() {
                return this._propagationStopped || this._propagationImmediateStopped
            },
            getCurrentTarget: function() {
                return this.currentTarget
            },
            getType: function() {
                return this.type
            }
        };
        cc.Event.NO_TYPE = "no_type";
        cc.Event.TOUCH = "touch";
        cc.Event.MOUSE = "mouse";
        cc.Event.KEYBOARD = "keyboard";
        cc.Event.ACCELERATION =
            "acceleration";
        cc.Event.NONE = 0;
        cc.Event.CAPTURING_PHASE = 1;
        cc.Event.AT_TARGET = 2;
        cc.Event.BUBBLING_PHASE = 3;
        var h = function(d, k) {
            cc.Event.call(this, d, k);
            this.detail = null
        };
        g.extend(h, cc.Event);
        h.prototype.reset = h;
        h.prototype.setUserData = function(d) {
            this.detail = d
        };
        h.prototype.getUserData = function() {
            return this.detail
        };
        h.prototype.getEventName = cc.Event.prototype.getType;
        var e = new g.Pool(10);
        h.put = function(d) {
            e.put(d)
        };
        h.get = function(d, k) {
            var c = e._get();
            c ? c.reset(d, k) : c = new h(d, k);
            return c
        };
        cc.Event.EventCustom =
            h;
        q.exports = cc.Event
    }, {
        "../platform/js": 248
    }],
    176: [function(g, q, m) {
        g("./event");
        g("./event-listeners");
        g("./event-target");
        g("./system-event")
    }, {
        "./event": 175,
        "./event-listeners": 173,
        "./event-target": 174,
        "./system-event": 177
    }],
    177: [function(g, q, m) {
        m = g("../event/event-target");
        var h = g("../event-manager"),
            e = g("../platform/CCInputManager"),
            d = cc.Enum({
                KEY_DOWN: "keydown",
                KEY_UP: "keyup",
                DEVICEMOTION: "devicemotion"
            }),
            k = null,
            c = null;
        g = cc.Class({
            name: "SystemEvent",
            extends: m,
            statics: {
                EventType: d
            },
            setAccelerometerEnabled: function(a) {
                !1;
                a && window.DeviceMotionEvent && "function" === typeof DeviceMotionEvent.requestPermission ? DeviceMotionEvent.requestPermission().then(function(a) {
                    console.log("Device Motion Event request permission: " + a);
                    e.setAccelerometerEnabled("granted" === a)
                }) : e.setAccelerometerEnabled(a)
            },
            setAccelerometerInterval: function(a) {
                !1;
                e.setAccelerometerInterval(a)
            },
            on: function(a, b, l, f) {
                !1;
                this._super(a, b, l, f);
                if (a === d.KEY_DOWN || a === d.KEY_UP) k || (k = cc.EventListener.create({
                    event: cc.EventListener.KEYBOARD,
                    onKeyPressed: function(a,
                        b) {
                        b.type = d.KEY_DOWN;
                        cc.systemEvent.dispatchEvent(b)
                    },
                    onKeyReleased: function(a, b) {
                        b.type = d.KEY_UP;
                        cc.systemEvent.dispatchEvent(b)
                    }
                })), h.hasEventListener(cc.EventListener.ListenerID.KEYBOARD) || h.addListener(k, 1);
                a === d.DEVICEMOTION && (c || (c = cc.EventListener.create({
                    event: cc.EventListener.ACCELERATION,
                    callback: function(a, b) {
                        b.type = d.DEVICEMOTION;
                        cc.systemEvent.dispatchEvent(b)
                    }
                })), h.hasEventListener(cc.EventListener.ListenerID.ACCELERATION) || h.addListener(c, 1))
            },
            off: function(a, b, l) {
                !1;
                this._super(a, b,
                    l);
                !k || a !== d.KEY_DOWN && a !== d.KEY_UP || (b = this.hasEventListener(d.KEY_DOWN), l = this.hasEventListener(d.KEY_UP), b || l || h.removeListener(k));
                c && a === d.DEVICEMOTION && h.removeListener(c)
            }
        });
        cc.SystemEvent = q.exports = g;
        cc.systemEvent = new cc.SystemEvent
    }, {
        "../event-manager": 172,
        "../event/event-target": 174,
        "../platform/CCInputManager": 231
    }],
    178: [function(g, q, m) {
        function h(a) {
            return a && a.__esModule ? a : {
                default: a
            }
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var e = h(g("../value-types/vec3")),
            d = h(g("../value-types/mat3")),
            k = h(g("./enums")),
            c = new e["default"],
            a = new e["default"],
            b = new d["default"];
        g = function() {
            function d(a, b, c, d, f, l) {
                this._type = this.halfExtents = this.center = void 0;
                this._type = k["default"].SHAPE_AABB;
                this.center = new e["default"](a, b, c);
                this.halfExtents = new e["default"](d, f, l)
            }
            d.create = function(a, b, c, f, l, k) {
                return new d(a, b, c, f, l, k)
            };
            d.clone = function(a) {
                return new d(a.center.x, a.center.y, a.center.z, a.halfExtents.x, a.halfExtents.y, a.halfExtents.z)
            };
            d.copy = function(a, b) {
                e["default"].copy(a.center, b.center);
                e["default"].copy(a.halfExtents, b.halfExtents);
                return a
            };
            d.fromPoints = function(b, d, f) {
                e["default"].scale(b.center, e["default"].add(c, d, f), .5);
                e["default"].scale(b.halfExtents, e["default"].sub(a, f, d), .5);
                return b
            };
            d.set = function(a, b, c, d, f, l, k) {
                e["default"].set(a.center, b, c, d);
                e["default"].set(a.halfExtents, f, l, k);
                return a
            };
            var f = d.prototype;
            f.getBoundary = function(a, b) {
                e["default"].sub(a, this.center, this.halfExtents);
                e["default"].add(b, this.center, this.halfExtents)
            };
            f.transform = function(a, c, d, f, l) {
                l ||
                    (l = this);
                e["default"].transformMat4(l.center, this.center, a);
                c = l.halfExtents;
                d = this.halfExtents;
                f = b.m;
                a = a.m;
                f[0] = Math.abs(a[0]);
                f[1] = Math.abs(a[1]);
                f[2] = Math.abs(a[2]);
                f[3] = Math.abs(a[4]);
                f[4] = Math.abs(a[5]);
                f[5] = Math.abs(a[6]);
                f[6] = Math.abs(a[8]);
                f[7] = Math.abs(a[9]);
                f[8] = Math.abs(a[10]);
                e["default"].transformMat3(c, d, b)
            };
            return d
        }();
        m["default"] = g;
        q.exports = m["default"]
    }, {
        "../value-types/mat3": 326,
        "../value-types/vec3": 335,
        "./enums": 180
    }],
    179: [function(g, q, m) {
        function h(a, b) {
            return e.Vec3.dot(b.n,
                a) - b.d
        }
        m.__esModule = !0;
        m.point_plane = h;
        m.pt_point_aabb = function(a, c, d) {
            e.Vec3.copy(a, c);
            e.Vec3.subtract(b, d.center, d.halfExtents);
            e.Vec3.add(l, d.center, d.halfExtents);
            a.x = a.x < b.x ? b.x : a.x;
            a.y = a.y < b.x ? b.y : a.y;
            a.z = a.z < b.x ? b.z : a.z;
            a.x = a.x > l.x ? l.x : a.x;
            a.y = a.y > l.x ? l.y : a.y;
            a.z = a.z > l.x ? l.z : a.z;
            return a
        };
        m.pt_point_obb = function(b, l, h) {
            var p = h.orientation.m;
            e.Vec3.set(d, p[0], p[1], p[2]);
            e.Vec3.set(k, p[3], p[4], p[5]);
            e.Vec3.set(c, p[6], p[7], p[8]);
            f[0] = d;
            f[1] = k;
            f[2] = c;
            n[0] = h.halfExtents.x;
            n[1] = h.halfExtents.y;
            n[2] =
                h.halfExtents.z;
            e.Vec3.subtract(a, l, h.center);
            e.Vec3.set(b, h.center.x, h.center.y, h.center.z);
            for (l = 0; 3 > l; l++) h = e.Vec3.dot(a, f[l]), h > n[l] && (h = n[l]), h < -n[l] && (h = -n[l]), b.x += h * f[l].x, b.y += h * f[l].y, b.z += h * f[l].z;
            return b
        };
        m.pt_point_plane = function(a, b, c) {
            var d = h(b, c);
            return e.Vec3.subtract(a, b, e.Vec3.multiplyScalar(a, c.n, d))
        };
        var e = g("../value-types"),
            d = new e.Vec3,
            k = new e.Vec3,
            c = new e.Vec3,
            a = new e.Vec3,
            b = new e.Vec3,
            l = new e.Vec3,
            f = Array(3),
            n = Array(3)
    }, {
        "../value-types": 325
    }],
    180: [function(g, q, m) {
        m.__esModule = !0;
        m["default"] = void 0;
        m["default"] = {
            SHAPE_RAY: 1,
            SHAPE_LINE: 2,
            SHAPE_SPHERE: 4,
            SHAPE_AABB: 8,
            SHAPE_OBB: 16,
            SHAPE_PLANE: 32,
            SHAPE_TRIANGLE: 64,
            SHAPE_FRUSTUM: 128,
            SHAPE_FRUSTUM_ACCURATE: 256
        };
        q.exports = m["default"]
    }, {}],
    181: [function(g, q, m) {
        function h(a) {
            return a && a.__esModule ? a : {
                default: a
            }
        }

        function e(a, b) {
            for (var c = 0; c < b.length; c++) {
                var d = b[c];
                d.enumerable = d.enumerable || !1;
                d.configurable = !0;
                "value" in d && (d.writable = !0);
                Object.defineProperty(a, k(d.key), d)
            }
        }

        function d(a, b, c) {
            b && e(a.prototype, b);
            c && e(a, c);
            Object.defineProperty(a,
                "prototype", {
                    writable: !1
                });
            return a
        }

        function k(a) {
            a: if ("object" === typeof a && null !== a) {
                $jscomp.initSymbol();
                var b = a[Symbol.toPrimitive];
                if (void 0 !== b) {
                    a = b.call(a, "string");
                    if ("object" !== typeof a) break a;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                a = String(a)
            }return "symbol" === typeof a ? a : String(a)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var c = g("../value-types"),
            a = h(g("./enums")),
            b = h(g("./plane")),
            l = Array(8);
        l[0] = new c.Vec3(1, 1, 1);
        l[1] = new c.Vec3(-1, 1, 1);
        l[2] = new c.Vec3(-1, -1, 1);
        l[3] = new c.Vec3(1, -1, 1);
        l[4] = new c.Vec3(1, 1, -1);
        l[5] = new c.Vec3(-1, 1, -1);
        l[6] = new c.Vec3(-1, -1, -1);
        l[7] = new c.Vec3(1, -1, -1);
        g = function() {
            function f() {
                this._type = this.vertices = this.planes = void 0;
                this._type = a["default"].SHAPE_FRUSTUM;
                this.planes = Array(6);
                for (var d = 0; 6 > d; ++d) this.planes[d] = b["default"].create(0, 0, 0, 0);
                this.vertices = Array(8);
                for (d = 0; 8 > d; ++d) this.vertices[d] = new c.Vec3
            }
            f.create = function() {
                return new f
            };
            f.clone = function(a) {
                return f.copy(new f, a)
            };
            f.copy = function(a, d) {
                a._type = d._type;
                for (var f =
                        0; 6 > f; ++f) b["default"].copy(a.planes[f], d.planes[f]);
                for (f = 0; 8 > f; ++f) c.Vec3.copy(a.vertices[f], d.vertices[f]);
                return a
            };
            var k = f.prototype;
            k.update = function(b, d) {
                b = b.m;
                c.Vec3.set(this.planes[0].n, b[3] + b[0], b[7] + b[4], b[11] + b[8]);
                this.planes[0].d = -(b[15] + b[12]);
                c.Vec3.set(this.planes[1].n, b[3] - b[0], b[7] - b[4], b[11] - b[8]);
                this.planes[1].d = -(b[15] - b[12]);
                c.Vec3.set(this.planes[2].n, b[3] + b[1], b[7] + b[5], b[11] + b[9]);
                this.planes[2].d = -(b[15] + b[13]);
                c.Vec3.set(this.planes[3].n, b[3] - b[1], b[7] - b[5], b[11] - b[9]);
                this.planes[3].d = -(b[15] - b[13]);
                c.Vec3.set(this.planes[4].n, b[3] + b[2], b[7] + b[6], b[11] + b[10]);
                this.planes[4].d = -(b[15] + b[14]);
                c.Vec3.set(this.planes[5].n, b[3] - b[2], b[7] - b[6], b[11] - b[10]);
                this.planes[5].d = -(b[15] - b[14]);
                if (this._type === a["default"].SHAPE_FRUSTUM_ACCURATE) {
                    for (b = 0; 6 > b; b++) {
                        var f = this.planes[b],
                            k = 1 / f.n.length();
                        c.Vec3.multiplyScalar(f.n, f.n, k);
                        f.d *= k
                    }
                    for (b = 0; 8 > b; b++) c.Vec3.transformMat4(this.vertices[b], l[b], d)
                }
            };
            k.transform = function(d) {
                if (this._type === a["default"].SHAPE_FRUSTUM_ACCURATE) {
                    for (var f =
                            0; 8 > f; f++) c.Vec3.transformMat4(this.vertices[f], this.vertices[f], d);
                    b["default"].fromPoints(this.planes[0], this.vertices[1], this.vertices[5], this.vertices[6]);
                    b["default"].fromPoints(this.planes[1], this.vertices[3], this.vertices[7], this.vertices[4]);
                    b["default"].fromPoints(this.planes[2], this.vertices[6], this.vertices[7], this.vertices[3]);
                    b["default"].fromPoints(this.planes[3], this.vertices[0], this.vertices[4], this.vertices[5]);
                    b["default"].fromPoints(this.planes[4], this.vertices[2], this.vertices[3],
                        this.vertices[0]);
                    b["default"].fromPoints(this.planes[0], this.vertices[7], this.vertices[6], this.vertices[5])
                }
            };
            d(f, [{
                key: "accurate",
                set: function(b) {
                    this._type = b ? a["default"].SHAPE_FRUSTUM_ACCURATE : a["default"].SHAPE_FRUSTUM
                }
            }]);
            return f
        }();
        m["default"] = g;
        g.createOrtho = function() {
            var a = new c.Vec3;
            return function(d, f, l, k, e, h) {
                f /= 2;
                l /= 2;
                c.Vec3.set(a, f, l, k);
                c.Vec3.transformMat4(d.vertices[0], a, h);
                c.Vec3.set(a, -f, l, k);
                c.Vec3.transformMat4(d.vertices[1], a, h);
                c.Vec3.set(a, -f, -l, k);
                c.Vec3.transformMat4(d.vertices[2],
                    a, h);
                c.Vec3.set(a, f, -l, k);
                c.Vec3.transformMat4(d.vertices[3], a, h);
                c.Vec3.set(a, f, l, e);
                c.Vec3.transformMat4(d.vertices[4], a, h);
                c.Vec3.set(a, -f, l, e);
                c.Vec3.transformMat4(d.vertices[5], a, h);
                c.Vec3.set(a, -f, -l, e);
                c.Vec3.transformMat4(d.vertices[6], a, h);
                c.Vec3.set(a, f, -l, e);
                c.Vec3.transformMat4(d.vertices[7], a, h);
                b["default"].fromPoints(d.planes[0], d.vertices[1], d.vertices[6], d.vertices[5]);
                b["default"].fromPoints(d.planes[1], d.vertices[3], d.vertices[4], d.vertices[7]);
                b["default"].fromPoints(d.planes[2],
                    d.vertices[6], d.vertices[3], d.vertices[7]);
                b["default"].fromPoints(d.planes[3], d.vertices[0], d.vertices[5], d.vertices[4]);
                b["default"].fromPoints(d.planes[4], d.vertices[2], d.vertices[0], d.vertices[3]);
                b["default"].fromPoints(d.planes[0], d.vertices[7], d.vertices[5], d.vertices[6])
            }
        }();
        q.exports = m["default"]
    }, {
        "../value-types": 325,
        "./enums": 180,
        "./plane": 186
    }],
    182: [function(g, q, m) {
        function h(c) {
            return c && c.__esModule ? c : {
                default: c
            }
        }
        m.__esModule = !0;
        var e = {
            enums: !0,
            Triangle: !0,
            Aabb: !0,
            Ray: !0,
            intersect: !0,
            Sphere: !0,
            Obb: !0,
            Frustum: !0,
            Line: !0,
            Plane: !0
        };
        m.intersect = m.enums = m.Triangle = m.Sphere = m.Ray = m.Plane = m.Obb = m.Line = m.Frustum = m.Aabb = void 0;
        var d = h(g("./enums"));
        m.enums = d["default"];
        d = h(g("./triangle"));
        m.Triangle = d["default"];
        d = h(g("./aabb"));
        m.Aabb = d["default"];
        d = h(g("./ray"));
        m.Ray = d["default"];
        d = h(g("./intersect"));
        m.intersect = d["default"];
        d = h(g("./sphere"));
        m.Sphere = d["default"];
        d = h(g("./obb"));
        m.Obb = d["default"];
        d = h(g("./frustum"));
        m.Frustum = d["default"];
        d = h(g("./line"));
        m.Line = d["default"];
        d =
            h(g("./plane"));
        m.Plane = d["default"];
        var k = g("./distance");
        Object.keys(k).forEach(function(c) {
            "default" !== c && "__esModule" !== c && (Object.prototype.hasOwnProperty.call(e, c) || c in m && m[c] === k[c] || (m[c] = k[c]))
        });
        cc.geomUtils = q.exports
    }, {
        "./aabb": 178,
        "./distance": 179,
        "./enums": 180,
        "./frustum": 181,
        "./intersect": 183,
        "./line": 184,
        "./obb": 185,
        "./plane": 186,
        "./ray": 187,
        "./sphere": 188,
        "./triangle": 189
    }],
    183: [function(g, q, m) {
        function h(a) {
            if ("function" !== typeof WeakMap) return null;
            var b = new WeakMap,
                c = new WeakMap;
            return (h = function(a) {
                return a ? c : b
            })(a)
        }

        function e(a) {
            return a && a.__esModule ? a : {
                default: a
            }
        }

        function d(a, c, d, f, l, k) {
            b.Vec3.set(k[0], a.x + d.x * c.x + f.x * c.y + l.x * c.z, a.y + d.y * c.x + f.y * c.y + l.y * c.z, a.z + d.z * c.x + f.z * c.y + l.z * c.z);
            b.Vec3.set(k[1], a.x - d.x * c.x + f.x * c.y + l.x * c.z, a.y - d.y * c.x + f.y * c.y + l.y * c.z, a.z - d.z * c.x + f.z * c.y + l.z * c.z);
            b.Vec3.set(k[2], a.x + d.x * c.x - f.x * c.y + l.x * c.z, a.y + d.y * c.x - f.y * c.y + l.y * c.z, a.z + d.z * c.x - f.z * c.y + l.z * c.z);
            b.Vec3.set(k[3], a.x + d.x * c.x + f.x * c.y - l.x * c.z, a.y + d.y * c.x + f.y * c.y - l.y * c.z, a.z + d.z * c.x +
                f.z * c.y - l.z * c.z);
            b.Vec3.set(k[4], a.x - d.x * c.x - f.x * c.y - l.x * c.z, a.y - d.y * c.x - f.y * c.y - l.y * c.z, a.z - d.z * c.x - f.z * c.y - l.z * c.z);
            b.Vec3.set(k[5], a.x + d.x * c.x - f.x * c.y - l.x * c.z, a.y + d.y * c.x - f.y * c.y - l.y * c.z, a.z + d.z * c.x - f.z * c.y - l.z * c.z);
            b.Vec3.set(k[6], a.x - d.x * c.x + f.x * c.y - l.x * c.z, a.y - d.y * c.x + f.y * c.y - l.y * c.z, a.z - d.z * c.x + f.z * c.y - l.z * c.z);
            b.Vec3.set(k[7], a.x - d.x * c.x - f.x * c.y + l.x * c.z, a.y - d.y * c.x - f.y * c.y + l.y * c.z, a.z - d.z * c.x - f.z * c.y + l.z * c.z)
        }

        function k(a, c) {
            for (var d = b.Vec3.dot(c, a[0]), f = d, l = 1; 8 > l; ++l) {
                var k = b.Vec3.dot(c,
                    a[l]);
                d = k < d ? k : d;
                f = k > f ? k : f
            }
            return [d, f]
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var c = e(g("../../renderer/gfx")),
            a = e(g("../../renderer/memop/recycle-pool")),
            b = g("../value-types"),
            l = e(g("./aabb")),
            f = function(a, b) {
                if (!b && a && a.__esModule) return a;
                if (null === a || "object" !== typeof a && "function" !== typeof a) return {
                    default: a
                };
                if ((b = h(b)) && b.has(a)) return b.get(a);
                var c = {},
                    d = Object.defineProperty && Object.getOwnPropertyDescriptor,
                    f;
                for (f in a)
                    if ("default" !== f && Object.prototype.hasOwnProperty.call(a, f)) {
                        var l = d ? Object.getOwnPropertyDescriptor(a,
                            f) : null;
                        l && (l.get || l.set) ? Object.defineProperty(c, f, l) : c[f] = a[f]
                    }
                c["default"] = a;
                b && b.set(a, c);
                return c
            }(g("./distance")),
            n = e(g("./enums")),
            u = e(g("./ray")),
            v = e(g("./triangle")),
            p = function() {
                function a(a, c, d, f) {
                    b.Vec3.set(a, c[d * f], c[d * f + 1], c[d * f + 2])
                }
                var d = v["default"].create(),
                    f = Infinity;
                return function(b, l) {
                    f = Infinity;
                    for (var k = l._subMeshes, e = 0; e < k.length; e++)
                        if (k[e]._primitiveType === c["default"].PT_TRIANGLES) {
                            var n = l._subDatas[e] || l._subDatas[0],
                                h = l._getAttrMeshData(e, c["default"].ATTR_POSITION),
                                p = n.getIData(Uint16Array);
                            n = n.vfm.element(c["default"].ATTR_POSITION).num;
                            for (var g = 0; g < p.length; g += 3) {
                                a(d.a, h, p[g], n);
                                a(d.b, h, p[g + 1], n);
                                a(d.c, h, p[g + 2], n);
                                var t = z(b, d);
                                0 < t && t < f && (f = t)
                            }
                        }
                    return f
                }
            }(),
            t = function() {
                function c(a, b) {
                    for (var d = a.children, f = d.length - 1; 0 <= f; f--) c(d[f], b);
                    b(a)
                }

                function d(a, b) {
                    return a.distance - b.distance
                }

                function f(a, b, c) {
                    c = c.m;
                    var d = b.x,
                        f = b.y;
                    b = b.z;
                    var l = c[3] * d + c[7] * f + c[11] * b;
                    l = l ? 1 / l : 1;
                    a.x = (c[0] * d + c[4] * f + c[8] * b) * l;
                    a.y = (c[1] * d + c[5] * f + c[9] * b) * l;
                    a.z = (c[2] * d + c[6] * f + c[10] * b) * l;
                    return a
                }
                var k = new a["default"](function() {
                        return {
                            distance: 0,
                            node: null
                        }
                    }, 1),
                    e = [],
                    n = l["default"].create(),
                    h = new b.Vec3,
                    p = new b.Vec3,
                    g = new u["default"],
                    t = cc.mat4(),
                    v = cc.mat4(),
                    x = new b.Vec3;
                return function(a, u, z, A) {
                    k.reset();
                    e.length = 0;
                    a = a || cc.director.getScene();
                    c(a, function(a) {
                        if (!A || A(a)) {
                            b.Mat4.invert(v, a.getWorldMatrix(t));
                            b.Vec3.transformMat4(g.o, u.o, v);
                            b.Vec3.normalize(g.d, f(g.d, u.d, v));
                            var c = Infinity,
                                d = a._renderComponent;
                            d instanceof cc.MeshRenderer ? c = y(g, d._boundingBox) : a.width && a.height && (b.Vec3.set(h, -a.width * a.anchorX, -a.height * a.anchorY, a.z), b.Vec3.set(p, a.width * (1 - a.anchorX), a.height * (1 - a.anchorY), a.z), l["default"].fromPoints(n, h, p), c = y(g, n));
                            0 < c && Infinity > c && (z && (c = z(g, a, c)), 0 < c && Infinity > c && (b.Vec3.scale(x, g.d, c), f(x, x, t), c = k.add(), c.node = a, c.distance = b.Vec3.mag(x), e.push(c)))
                        }
                    });
                    e.sort(d);
                    return e
                }
            }();
        g = function() {
            var a = new b.Vec3(0, 0, 0);
            return function(c, d) {
                var f = b.Vec3.dot(c.d, d.n);
                if (Math.abs(f) < Number.EPSILON) return 0;
                b.Vec3.multiplyScalar(a, d.n, d.d);
                c = b.Vec3.dot(b.Vec3.subtract(a, a,
                    c.o), d.n) / f;
                return 0 > c ? 0 : c
            }
        }();
        var x = function() {
                var a = new b.Vec3(0, 0, 0);
                return function(c, d) {
                    b.Vec3.subtract(a, c.e, c.s);
                    c = (d.d - b.Vec3.dot(c.s, d.n)) / b.Vec3.dot(a, d.n);
                    return 0 > c || 1 < c ? 0 : c
                }
            }(),
            z = function() {
                var a = new b.Vec3(0, 0, 0),
                    c = new b.Vec3(0, 0, 0),
                    d = new b.Vec3(0, 0, 0),
                    f = new b.Vec3(0, 0, 0),
                    l = new b.Vec3(0, 0, 0);
                return function(k, e, n) {
                    b.Vec3.subtract(a, e.b, e.a);
                    b.Vec3.subtract(c, e.c, e.a);
                    b.Vec3.cross(d, k.d, c);
                    var h = b.Vec3.dot(a, d);
                    if (h < Number.EPSILON && (!n || h > -Number.EPSILON)) return 0;
                    n = 1 / h;
                    b.Vec3.subtract(f,
                        k.o, e.a);
                    e = b.Vec3.dot(f, d) * n;
                    if (0 > e || 1 < e) return 0;
                    b.Vec3.cross(l, f, a);
                    k = b.Vec3.dot(k.d, l) * n;
                    if (0 > k || 1 < e + k) return 0;
                    k = b.Vec3.dot(c, l) * n;
                    return 0 > k ? 0 : k
                }
            }(),
            E = z,
            w = function() {
                var a = new b.Vec3(0, 0, 0),
                    c = new b.Vec3(0, 0, 0),
                    d = new b.Vec3(0, 0, 0),
                    f = new b.Vec3(0, 0, 0),
                    l = new b.Vec3(0, 0, 0),
                    k = new b.Vec3(0, 0, 0);
                return function(e, n, h) {
                    b.Vec3.subtract(a, n.b, n.a);
                    b.Vec3.subtract(c, n.c, n.a);
                    b.Vec3.subtract(d, e.s, e.e);
                    b.Vec3.cross(l, a, c);
                    var p = b.Vec3.dot(d, l);
                    if (0 >= p) return 0;
                    b.Vec3.subtract(f, e.s, n.a);
                    e = b.Vec3.dot(f, l);
                    if (0 > e || e > p) return 0;
                    b.Vec3.cross(k, d, f);
                    e = b.Vec3.dot(c, k);
                    if (0 > e || e > p) return 0;
                    var g = -b.Vec3.dot(a, k);
                    if (0 > g || e + g > p) return 0;
                    h && (p = 1 / p, e *= p, g *= p, p = 1 - e - g, b.Vec3.set(h, n.a.x * p + n.b.x * e + n.c.x * g, n.a.y * p + n.b.y * e + n.c.y * g, n.a.z * p + n.b.z * e + n.c.z * g));
                    return 1
                }
            }(),
            A = function() {
                var a = new b.Vec3(0, 0, 0),
                    c = new b.Vec3(0, 0, 0),
                    d = new b.Vec3(0, 0, 0),
                    f = new b.Vec3(0, 0, 0),
                    l = new b.Vec3(0, 0, 0),
                    k = new b.Vec3(0, 0, 0),
                    e = new b.Vec3(0, 0, 0);
                return function(n, h, p, g, t, u, v) {
                    b.Vec3.subtract(a, h, n);
                    b.Vec3.subtract(c, p, n);
                    b.Vec3.subtract(d,
                        g, n);
                    b.Vec3.subtract(f, t, n);
                    b.Vec3.cross(k, f, a);
                    h = b.Vec3.dot(c, k);
                    if (0 <= h) {
                        u = -b.Vec3.dot(d, k);
                        if (0 > u) return 0;
                        n = b.Vec3.dot(b.Vec3.cross(e, a, d), c);
                        if (0 > n) return 0;
                        if (v) {
                            var x = 1 / (u + h + n);
                            u *= x;
                            h *= x;
                            n *= x;
                            b.Vec3.set(v, p.x * u + g.x * h + t.x * n, p.y * u + g.y * h + t.y * n, p.z * u + g.z * h + t.z * n)
                        }
                    } else {
                        b.Vec3.subtract(l, u, n);
                        g = b.Vec3.dot(l, k);
                        if (0 > g) return 0;
                        n = b.Vec3.dot(b.Vec3.cross(e, a, c), l);
                        if (0 > n) return 0;
                        v && (h = -h, x = 1 / (g + h + n), g *= x, h *= x, n *= x, b.Vec3.set(v, p.x * g + u.x * h + t.x * n, p.y * g + u.y * h + t.y * n, p.z * g + u.z * h + t.z * n))
                    }
                    return 1
                }
            }(),
            B =
            function() {
                var a = new b.Vec3(0, 0, 0);
                return function(c, d) {
                    var f = d.radius,
                        l = c.d;
                    f *= f;
                    b.Vec3.subtract(a, d.center, c.o);
                    c = a.lengthSqr();
                    l = b.Vec3.dot(a, l);
                    d = f - (c - l * l);
                    if (0 > d) return 0;
                    d = Math.sqrt(d);
                    f = c < f ? l + d : l - d;
                    return 0 > f ? 0 : f
                }
            }(),
            y = function() {
                var a = new b.Vec3,
                    c = new b.Vec3;
                return function(d, f) {
                    var l = d.o;
                    d = d.d;
                    var k = 1 / d.x,
                        e = 1 / d.y;
                    d = 1 / d.z;
                    b.Vec3.subtract(a, f.center, f.halfExtents);
                    b.Vec3.add(c, f.center, f.halfExtents);
                    f = (a.x - l.x) * k;
                    k *= c.x - l.x;
                    var n = (a.y - l.y) * e;
                    e *= c.y - l.y;
                    var h = (a.z - l.z) * d;
                    d *= c.z - l.z;
                    l = Math.max(Math.max(Math.min(f,
                        k), Math.min(n, e)), Math.min(h, d));
                    f = Math.min(Math.min(Math.max(f, k), Math.max(n, e)), Math.max(h, d));
                    return 0 > f || l > f ? 0 : l
                }
            }(),
            C = y,
            F = function() {
                var a = new b.Vec3,
                    c = new b.Vec3,
                    d = new b.Vec3,
                    f = new b.Vec3,
                    l = new b.Vec3,
                    k = new b.Vec3,
                    e = new b.Vec3,
                    n = Array(3),
                    h = Array(3),
                    p = Array(3),
                    g = Array(6);
                return function(t, u) {
                    n[0] = u.halfExtents.x;
                    n[1] = u.halfExtents.y;
                    n[2] = u.halfExtents.z;
                    a = u.center;
                    c = t.o;
                    d = t.d;
                    t = u.orientation.m;
                    b.Vec3.set(f, t[0], t[1], t[2]);
                    b.Vec3.set(l, t[3], t[4], t[5]);
                    b.Vec3.set(k, t[6], t[7], t[8]);
                    b.Vec3.subtract(e,
                        a, c);
                    h[0] = b.Vec3.dot(f, d);
                    h[1] = b.Vec3.dot(l, d);
                    h[2] = b.Vec3.dot(k, d);
                    p[0] = b.Vec3.dot(f, e);
                    p[1] = b.Vec3.dot(l, e);
                    p[2] = b.Vec3.dot(k, e);
                    for (t = 0; 3 > t; ++t) {
                        if (0 === h[t]) {
                            if (0 < -p[t] - n[t] || 0 > -p[t] + n[t]) return 0;
                            h[t] = 1E-7
                        }
                        g[2 * t + 0] = (p[t] + n[t]) / h[t];
                        g[2 * t + 1] = (p[t] - n[t]) / h[t]
                    }
                    t = Math.max(Math.max(Math.min(g[0], g[1]), Math.min(g[2], g[3])), Math.min(g[4], g[5]));
                    u = Math.min(Math.min(Math.max(g[0], g[1]), Math.max(g[2], g[3])), Math.max(g[4], g[5]));
                    return 0 > u || t > u || 0 > t ? 0 : t
                }
            }(),
            G = function() {
                var a = new b.Vec3,
                    c = new b.Vec3,
                    d = new b.Vec3,
                    f = new b.Vec3;
                return function(l, k) {
                    b.Vec3.subtract(a, l.center, l.halfExtents);
                    b.Vec3.add(c, l.center, l.halfExtents);
                    b.Vec3.subtract(d, k.center, k.halfExtents);
                    b.Vec3.add(f, k.center, k.halfExtents);
                    return a.x <= f.x && c.x >= d.x && a.y <= f.y && c.y >= d.y && a.z <= f.z && c.z >= d.z
                }
            }(),
            D = function() {
                for (var a = Array(15), c = 0; 15 > c; c++) a[c] = new b.Vec3(0, 0, 0);
                var f = Array(8),
                    l = Array(8);
                for (c = 0; 8 > c; c++) f[c] = new b.Vec3(0, 0, 0), l[c] = new b.Vec3(0, 0, 0);
                var e = new b.Vec3,
                    n = new b.Vec3;
                return function(c, h) {
                    var p = h.orientation.m;
                    b.Vec3.set(a[0],
                        1, 0, 0);
                    b.Vec3.set(a[1], 0, 1, 0);
                    b.Vec3.set(a[2], 0, 0, 1);
                    b.Vec3.set(a[3], p[0], p[1], p[2]);
                    b.Vec3.set(a[4], p[3], p[4], p[5]);
                    b.Vec3.set(a[5], p[6], p[7], p[8]);
                    for (p = 0; 3 > p; ++p) b.Vec3.cross(a[3 * p + 6], a[p], a[0]), b.Vec3.cross(a[3 * p + 7], a[p], a[1]), b.Vec3.cross(a[3 * p + 7], a[p], a[2]);
                    b.Vec3.subtract(e, c.center, c.halfExtents);
                    b.Vec3.add(n, c.center, c.halfExtents);
                    b.Vec3.set(f[0], e.x, n.y, n.z);
                    b.Vec3.set(f[1], e.x, n.y, e.z);
                    b.Vec3.set(f[2], e.x, e.y, n.z);
                    b.Vec3.set(f[3], e.x, e.y, e.z);
                    b.Vec3.set(f[4], n.x, n.y, n.z);
                    b.Vec3.set(f[5],
                        n.x, n.y, e.z);
                    b.Vec3.set(f[6], n.x, e.y, n.z);
                    b.Vec3.set(f[7], n.x, e.y, e.z);
                    d(h.center, h.halfExtents, a[3], a[4], a[5], l);
                    for (c = 0; 15 > c; ++c)
                        if (h = k(f, a[c]), p = k(l, a[c]), p[0] > h[1] || h[0] > p[1]) return 0;
                    return 1
                }
            }(),
            I = function(a, c) {
                var d = a.halfExtents.x * Math.abs(c.n.x) + a.halfExtents.y * Math.abs(c.n.y) + a.halfExtents.z * Math.abs(c.n.z);
                a = b.Vec3.dot(c.n, a.center);
                return a + d < c.d ? -1 : a - d > c.d ? 0 : 1
            },
            K = function(a, b) {
                for (var c = 0; c < b.planes.length; c++)
                    if (-1 === I(a, b.planes[c])) return 0;
                return 1
            },
            L = function() {
                for (var a = Array(8),
                        c = 0, d = 0, f = 0; f < a.length; f++) a[f] = new b.Vec3(0, 0, 0);
                return function(f, l) {
                    for (var k, e = !1, n = 0; n < l.planes.length; n++) {
                        k = I(f, l.planes[n]);
                        if (-1 === k) return 0;
                        1 === k && (e = !0)
                    }
                    if (!e) return 1;
                    for (k = 0; k < l.vertices.length; k++) b.Vec3.subtract(a[k], l.vertices[k], f.center);
                    for (k = d = c = 0; k < l.vertices.length; k++) a[k].x > f.halfExtents.x ? c++ : a[k].x < -f.halfExtents.x && d++;
                    if (c === l.vertices.length || d === l.vertices.length) return 0;
                    for (k = d = c = 0; k < l.vertices.length; k++) a[k].y > f.halfExtents.y ? c++ : a[k].y < -f.halfExtents.y && d++;
                    if (c ===
                        l.vertices.length || d === l.vertices.length) return 0;
                    for (k = d = c = 0; k < l.vertices.length; k++) a[k].z > f.halfExtents.z ? c++ : a[k].z < -f.halfExtents.z && d++;
                    return c === l.vertices.length || d === l.vertices.length ? 0 : 1
                }
            }(),
            R = function() {
                var a = new b.Vec3(0, 0, 0),
                    c = new b.Mat3;
                return function(d, f) {
                    b.Vec3.subtract(a, f, d.center);
                    b.Vec3.transformMat3(a, a, b.Mat3.transpose(c, d.orientation));
                    d = d.halfExtents;
                    return Math.abs(a.x) < d.x && Math.abs(a.y) < d.y && Math.abs(a.z) < d.z
                }
            }(),
            M = function() {
                var a = function(a, b, c, d) {
                    return Math.abs(a.x *
                        b + a.y * c + a.z * d)
                };
                return function(c, d) {
                    var f = c.orientation.m;
                    f = c.halfExtents.x * a(d.n, f[0], f[1], f[2]) + c.halfExtents.y * a(d.n, f[3], f[4], f[5]) + c.halfExtents.z * a(d.n, f[6], f[7], f[8]);
                    c = b.Vec3.dot(d.n, c.center);
                    return c + f < d.d ? -1 : c - f > d.d ? 0 : 1
                }
            }(),
            S = function(a, b) {
                for (var c = 0; c < b.planes.length; c++)
                    if (-1 === M(a, b.planes[c])) return 0;
                return 1
            },
            O = function() {
                for (var a = Array(8), c = 0, d = 0, f = 0, l = 0; l < a.length; l++) a[l] = new b.Vec3(0, 0, 0);
                var k = function(a, b, c, d) {
                    return a.x * b + a.y * c + a.z * d
                };
                return function(l, e) {
                    for (var n, h = !1,
                            p = 0; p < e.planes.length; p++) {
                        n = M(l, e.planes[p]);
                        if (-1 === n) return 0;
                        1 === n && (h = !0)
                    }
                    if (!h) return 1;
                    for (n = 0; n < e.vertices.length; n++) b.Vec3.subtract(a[n], e.vertices[n], l.center);
                    f = d = 0;
                    n = l.orientation.m;
                    for (h = 0; h < e.vertices.length; h++) c = k(a[h], n[0], n[1], n[2]), c > l.halfExtents.x ? d++ : c < -l.halfExtents.x && f++;
                    if (d === e.vertices.length || f === e.vertices.length) return 0;
                    for (h = f = d = 0; h < e.vertices.length; h++) c = k(a[h], n[3], n[4], n[5]), c > l.halfExtents.y ? d++ : c < -l.halfExtents.y && f++;
                    if (d === e.vertices.length || f === e.vertices.length) return 0;
                    for (h = f = d = 0; h < e.vertices.length; h++) c = k(a[h], n[6], n[7], n[8]), c > l.halfExtents.z ? d++ : c < -l.halfExtents.z && f++;
                    return d === e.vertices.length || f === e.vertices.length ? 0 : 1
                }
            }(),
            Q = function() {
                for (var a = Array(15), c = 0; 15 > c; c++) a[c] = new b.Vec3(0, 0, 0);
                var f = Array(8),
                    l = Array(8);
                for (c = 0; 8 > c; c++) f[c] = new b.Vec3(0, 0, 0), l[c] = new b.Vec3(0, 0, 0);
                return function(c, e) {
                    var n = c.orientation.m,
                        h = e.orientation.m;
                    b.Vec3.set(a[0], n[0], n[1], n[2]);
                    b.Vec3.set(a[1], n[3], n[4], n[5]);
                    b.Vec3.set(a[2], n[6], n[7], n[8]);
                    b.Vec3.set(a[3], h[0],
                        h[1], h[2]);
                    b.Vec3.set(a[4], h[3], h[4], h[5]);
                    b.Vec3.set(a[5], h[6], h[7], h[8]);
                    for (n = 0; 3 > n; ++n) b.Vec3.cross(a[3 * n + 6], a[n], a[0]), b.Vec3.cross(a[3 * n + 7], a[n], a[1]), b.Vec3.cross(a[3 * n + 7], a[n], a[2]);
                    d(c.center, c.halfExtents, a[0], a[1], a[2], f);
                    d(e.center, e.halfExtents, a[3], a[4], a[5], l);
                    for (c = 0; 15 > c; ++c)
                        if (e = k(f, a[c]), n = k(l, a[c]), n[0] > e[1] || e[0] > n[1]) return 0;
                    return 1
                }
            }(),
            V = function(a, c) {
                var d = b.Vec3.dot(c.n, a.center);
                a = a.radius * c.n.length();
                return d + a < c.d ? -1 : d - a > c.d ? 0 : 1
            },
            ba = function(a, b) {
                for (var c = 0; c < b.planes.length; c++)
                    if (-1 ===
                        V(a, b.planes[c])) return 0;
                return 1
            },
            da = function() {
                var a = new b.Vec3(0, 0, 0),
                    c = [1, -1, 1, -1, 1, -1];
                return function(d, f) {
                    for (var l = 0; 6 > l; l++) {
                        var k = f.planes[l],
                            e = d.radius,
                            n = d.center,
                            h = k.n;
                        k = k.d;
                        var p = b.Vec3.dot(h, n);
                        if (p + e < k) return 0;
                        if (!(p - e > k))
                            for (b.Vec3.add(a, n, b.Vec3.multiplyScalar(a, h, e)), e = 0; 6 > e; e++)
                                if (e !== l && e !== l + c[l] && (n = f.planes[e], b.Vec3.dot(n.n, a) < n.d)) return 0
                    }
                    return 1
                }
            }(),
            T = function(a, c) {
                var d = a.radius + c.radius;
                return b.Vec3.squaredDistance(a.center, c.center) < d * d
            },
            N = function() {
                var a = new b.Vec3;
                return function(c, d) {
                    f.pt_point_aabb(a, c.center, d);
                    return b.Vec3.squaredDistance(c.center, a) < c.radius * c.radius
                }
            }(),
            fa = function() {
                var a = new b.Vec3;
                return function(c, d) {
                    f.pt_point_obb(a, c.center, d);
                    return b.Vec3.squaredDistance(c.center, a) < c.radius * c.radius
                }
            }();
        p = {
            rayAabb: C,
            rayMesh: p,
            raycast: t,
            rayTriangle: E,
            ray_sphere: B,
            ray_aabb: y,
            ray_obb: F,
            ray_plane: g,
            ray_triangle: z,
            line_plane: x,
            line_triangle: w,
            line_quad: A,
            sphere_sphere: T,
            sphere_aabb: N,
            sphere_obb: fa,
            sphere_plane: V,
            sphere_frustum: ba,
            sphere_frustum_accurate: da,
            aabb_aabb: G,
            aabb_obb: D,
            aabb_plane: I,
            aabb_frustum: K,
            aabb_frustum_accurate: L,
            obb_obb: Q,
            obb_plane: M,
            obb_frustum: S,
            obb_frustum_accurate: O,
            obb_point: R,
            resolve: function(a, b, c) {
                void 0 === c && (c = null);
                var d = a._type,
                    f = b._type,
                    l = this[d | f];
                return d < f ? l(a, b, c) : l(b, a, c)
            }
        };
        p[n["default"].SHAPE_RAY | n["default"].SHAPE_SPHERE] = B;
        p[n["default"].SHAPE_RAY | n["default"].SHAPE_AABB] = y;
        p[n["default"].SHAPE_RAY | n["default"].SHAPE_OBB] = F;
        p[n["default"].SHAPE_RAY | n["default"].SHAPE_PLANE] = g;
        p[n["default"].SHAPE_RAY | n["default"].SHAPE_TRIANGLE] =
            z;
        p[n["default"].SHAPE_LINE | n["default"].SHAPE_PLANE] = x;
        p[n["default"].SHAPE_LINE | n["default"].SHAPE_TRIANGLE] = w;
        p[n["default"].SHAPE_SPHERE] = T;
        p[n["default"].SHAPE_SPHERE | n["default"].SHAPE_AABB] = N;
        p[n["default"].SHAPE_SPHERE | n["default"].SHAPE_OBB] = fa;
        p[n["default"].SHAPE_SPHERE | n["default"].SHAPE_PLANE] = V;
        p[n["default"].SHAPE_SPHERE | n["default"].SHAPE_FRUSTUM] = ba;
        p[n["default"].SHAPE_SPHERE | n["default"].SHAPE_FRUSTUM_ACCURATE] = da;
        p[n["default"].SHAPE_AABB] = G;
        p[n["default"].SHAPE_AABB | n["default"].SHAPE_OBB] =
            D;
        p[n["default"].SHAPE_AABB | n["default"].SHAPE_PLANE] = I;
        p[n["default"].SHAPE_AABB | n["default"].SHAPE_FRUSTUM] = K;
        p[n["default"].SHAPE_AABB | n["default"].SHAPE_FRUSTUM_ACCURATE] = L;
        p[n["default"].SHAPE_OBB] = Q;
        p[n["default"].SHAPE_OBB | n["default"].SHAPE_PLANE] = M;
        p[n["default"].SHAPE_OBB | n["default"].SHAPE_FRUSTUM] = S;
        p[n["default"].SHAPE_OBB | n["default"].SHAPE_FRUSTUM_ACCURATE] = O;
        m["default"] = p;
        q.exports = m["default"]
    }, {
        "../../renderer/gfx": 358,
        "../../renderer/memop/recycle-pool": 373,
        "../value-types": 325,
        "./aabb": 178,
        "./distance": 179,
        "./enums": 180,
        "./ray": 187,
        "./triangle": 189
    }],
    184: [function(g, q, m) {
        m.__esModule = !0;
        m["default"] = void 0;
        var h = g("../value-types"),
            e = function(d) {
                return d && d.__esModule ? d : {
                    default: d
                }
            }(g("./enums"));
        g = function() {
            function d(d, c, a, b, l, f) {
                void 0 === d && (d = 0);
                void 0 === c && (c = 0);
                void 0 === a && (a = 0);
                void 0 === b && (b = 0);
                void 0 === l && (l = 0);
                void 0 === f && (f = -1);
                this._type = this.e = this.s = void 0;
                this._type = e["default"].SHAPE_LINE;
                this.s = new h.Vec3(d, c, a);
                this.e = new h.Vec3(b, l, f)
            }
            d.create = function(k,
                c, a, b, l, f) {
                return new d(k, c, a, b, l, f)
            };
            d.clone = function(k) {
                return new d(k.s.x, k.s.y, k.s.z, k.e.x, k.e.y, k.e.z)
            };
            d.copy = function(d, c) {
                h.Vec3.copy(d.s, c.s);
                h.Vec3.copy(d.e, c.e);
                return d
            };
            d.fromPoints = function(d, c, a) {
                h.Vec3.copy(d.s, c);
                h.Vec3.copy(d.e, a);
                return d
            };
            d.set = function(d, c, a, b, l, f, e) {
                d.s.x = c;
                d.s.y = a;
                d.s.z = b;
                d.e.x = l;
                d.e.y = f;
                d.e.z = e;
                return d
            };
            d.len = function(d) {
                return h.Vec3.distance(d.s, d.e)
            };
            d.prototype.length = function() {
                return h.Vec3.distance(this.s, this.e)
            };
            return d
        }();
        m["default"] = g;
        q.exports =
            m["default"]
    }, {
        "../value-types": 325,
        "./enums": 180
    }],
    185: [function(g, q, m) {
        function h(a, b) {
            for (var c = 0; c < b.length; c++) {
                var f = b[c];
                f.enumerable = f.enumerable || !1;
                f.configurable = !0;
                "value" in f && (f.writable = !0);
                Object.defineProperty(a, d(f.key), f)
            }
        }

        function e(a, b, c) {
            b && h(a.prototype, b);
            c && h(a, c);
            Object.defineProperty(a, "prototype", {
                writable: !1
            });
            return a
        }

        function d(a) {
            a: if ("object" === typeof a && null !== a) {
                $jscomp.initSymbol();
                var b = a[Symbol.toPrimitive];
                if (void 0 !== b) {
                    a = b.call(a, "string");
                    if ("object" !== typeof a) break a;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                a = String(a)
            }return "symbol" === typeof a ? a : String(a)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var k = g("../value-types"),
            c = function(a) {
                return a && a.__esModule ? a : {
                    default: a
                }
            }(g("./enums")),
            a = new k.Vec3,
            b = new k.Vec3,
            l = new k.Mat3;
        g = function() {
            function d(a, b, d, f, l, e, n, h, g, B, y, C, m, G, D) {
                void 0 === a && (a = 0);
                void 0 === b && (b = 0);
                void 0 === d && (d = 0);
                void 0 === f && (f = 1);
                void 0 === l && (l = 1);
                void 0 === e && (e = 1);
                void 0 === n && (n = 1);
                void 0 === h && (h = 0);
                void 0 === g && (g = 0);
                void 0 === B && (B = 0);
                void 0 === y && (y = 1);
                void 0 === C && (C = 0);
                void 0 === m && (m = 0);
                void 0 === G && (G = 0);
                void 0 === D && (D = 1);
                this._type = this.orientation = this.halfExtents = this.center = void 0;
                this._type = c["default"].SHAPE_OBB;
                this.center = new k.Vec3(a, b, d);
                this.halfExtents = new k.Vec3(f, l, e);
                this.orientation = new k.Mat3(n, h, g, B, y, C, m, G, D)
            }
            d.create = function(a, b, c, f, l, k, e, n, h, g, y, C, m, G, D) {
                return new d(a, b, c, f, l, k, e, n, h, g, y, C, m, G, D)
            };
            d.clone = function(a) {
                var b = a.orientation.m;
                return new d(a.center.x, a.center.y, a.center.z, a.halfExtents.x,
                    a.halfExtents.y, a.halfExtents.z, b[0], b[1], b[2], b[3], b[4], b[5], b[6], b[7], b[8])
            };
            d.copy = function(a, b) {
                k.Vec3.copy(a.center, b.center);
                k.Vec3.copy(a.halfExtents, b.halfExtents);
                k.Mat3.copy(a.orientation, b.orientation);
                return a
            };
            d.fromPoints = function(c, d, f) {
                k.Vec3.multiplyScalar(c.center, k.Vec3.add(a, d, f), .5);
                k.Vec3.multiplyScalar(c.halfExtents, k.Vec3.subtract(b, f, d), .5);
                k.Mat3.identity(c.orientation);
                return c
            };
            d.set = function(a, b, c, d, f, l, e, n, h, g, y, C, m, G, D, q) {
                k.Vec3.set(a.center, b, c, d);
                k.Vec3.set(a.halfExtents,
                    f, l, e);
                k.Mat3.set(a.orientation, n, h, g, y, C, m, G, D, q);
                return a
            };
            var n = d.prototype;
            n.getBoundary = function(b, c) {
                var d = this.halfExtents,
                    f = l.m,
                    e = this.orientation.m;
                f[0] = Math.abs(e[0]);
                f[1] = Math.abs(e[1]);
                f[2] = Math.abs(e[2]);
                f[3] = Math.abs(e[3]);
                f[4] = Math.abs(e[4]);
                f[5] = Math.abs(e[5]);
                f[6] = Math.abs(e[6]);
                f[7] = Math.abs(e[7]);
                f[8] = Math.abs(e[8]);
                k.Vec3.transformMat3(a, d, l);
                k.Vec3.subtract(b, this.center, a);
                k.Vec3.add(c, this.center, a)
            };
            n.transform = function(a, b, c, d, f) {
                k.Vec3.transformMat4(f.center, this.center,
                    a);
                k.Mat3.fromQuat(f.orientation, c);
                k.Vec3.multiply(f.halfExtents, this.halfExtents, d)
            };
            n.translateAndRotate = function(a, b, c) {
                k.Vec3.transformMat4(c.center, this.center, a);
                k.Mat3.fromQuat(c.orientation, b)
            };
            n.setScale = function(a, b) {
                k.Vec3.multiply(b.halfExtents, this.halfExtents, a)
            };
            e(d, [{
                key: "type",
                get: function() {
                    return this._type
                }
            }]);
            return d
        }();
        m["default"] = g;
        q.exports = m["default"]
    }, {
        "../value-types": 325,
        "./enums": 180
    }],
    186: [function(g, q, m) {
        m.__esModule = !0;
        m["default"] = void 0;
        var h = g("../value-types"),
            e = function(a) {
                return a && a.__esModule ? a : {
                    default: a
                }
            }(g("./enums")),
            d = new h.Vec3(0, 0, 0),
            k = new h.Vec3(0, 0, 0),
            c = cc.mat4(),
            a = cc.v4();
        g = function() {
            function b(a, b, c, d) {
                void 0 === a && (a = 0);
                void 0 === b && (b = 1);
                void 0 === c && (c = 0);
                void 0 === d && (d = 0);
                this._type = this.d = this.n = void 0;
                this._type = e["default"].SHAPE_PLANE;
                this.n = new h.Vec3(a, b, c);
                this.d = d
            }
            b.create = function(a, c, d, k) {
                return new b(a, c, d, k)
            };
            b.clone = function(a) {
                return new b(a.n.x, a.n.y, a.n.z, a.d)
            };
            b.copy = function(a, b) {
                h.Vec3.copy(a.n, b.n);
                a.d = b.d;
                return a
            };
            b.fromPoints = function(a, b, c, e) {
                h.Vec3.subtract(d, c, b);
                h.Vec3.subtract(k, e, b);
                h.Vec3.normalize(a.n, h.Vec3.cross(a.n, d, k));
                a.d = h.Vec3.dot(a.n, b);
                return a
            };
            b.set = function(a, b, c, d, k) {
                a.n.x = b;
                a.n.y = c;
                a.n.z = d;
                a.d = k;
                return a
            };
            b.fromNormalAndPoint = function(a, b, c) {
                h.Vec3.copy(a.n, b);
                a.d = h.Vec3.dot(b, c);
                return a
            };
            b.normalize = function(a, b) {
                var c = b.n.len();
                h.Vec3.normalize(a.n, b.n);
                0 < c && (a.d = b.d / c);
                return a
            };
            b.prototype.transform = function(b) {
                h.Mat4.invert(c, b);
                h.Mat4.transpose(c, c);
                h.Vec4.set(a, this.n.x, this.n.y,
                    this.n.z, this.d);
                h.Vec4.transformMat4(a, a, c);
                h.Vec3.set(this.n, a.x, a.y, a.z);
                this.d = a.w
            };
            return b
        }();
        m["default"] = g;
        q.exports = m["default"]
    }, {
        "../value-types": 325,
        "./enums": 180
    }],
    187: [function(g, q, m) {
        m.__esModule = !0;
        m["default"] = void 0;
        var h = g("../value-types"),
            e = function(d) {
                return d && d.__esModule ? d : {
                    default: d
                }
            }(g("./enums"));
        g = function() {
            function d(d, c, a, b, l, f) {
                void 0 === d && (d = 0);
                void 0 === c && (c = 0);
                void 0 === a && (a = 0);
                void 0 === b && (b = 0);
                void 0 === l && (l = 0);
                void 0 === f && (f = -1);
                this._type = this.d = this.o = void 0;
                this._type = e["default"].SHAPE_RAY;
                this.o = new h.Vec3(d, c, a);
                this.d = new h.Vec3(b, l, f)
            }
            d.create = function(k, c, a, b, l, f) {
                void 0 === k && (k = 0);
                void 0 === c && (c = 0);
                void 0 === a && (a = 0);
                void 0 === b && (b = 0);
                void 0 === l && (l = 0);
                void 0 === f && (f = 1);
                return new d(k, c, a, b, l, f)
            };
            d.clone = function(k) {
                return new d(k.o.x, k.o.y, k.o.z, k.d.x, k.d.y, k.d.z)
            };
            d.copy = function(d, c) {
                h.Vec3.copy(d.o, c.o);
                h.Vec3.copy(d.d, c.d);
                return d
            };
            d.fromPoints = function(d, c, a) {
                h.Vec3.copy(d.o, c);
                h.Vec3.normalize(d.d, h.Vec3.subtract(d.d, a, c));
                return d
            };
            d.set =
                function(d, c, a, b, l, f, e) {
                    d.o.x = c;
                    d.o.y = a;
                    d.o.z = b;
                    d.d.x = l;
                    d.d.y = f;
                    d.d.z = e;
                    return d
                };
            d.prototype.computeHit = function(d, c) {
                h.Vec3.normalize(d, this.d);
                h.Vec3.scaleAndAdd(d, this.o, d, c)
            };
            return d
        }();
        m["default"] = g;
        q.exports = m["default"]
    }, {
        "../value-types": 325,
        "./enums": 180
    }],
    188: [function(g, q, m) {
        m.__esModule = !0;
        m["default"] = void 0;
        var h = g("../value-types"),
            e = function(d) {
                return d && d.__esModule ? d : {
                    default: d
                }
            }(g("./enums")),
            d = new h.Vec3;
        g = function() {
            function k(a, b, c, d) {
                void 0 === a && (a = 0);
                void 0 === b && (b = 0);
                void 0 ===
                    c && (c = 0);
                void 0 === d && (d = 1);
                this._type = this.radius = this.center = void 0;
                this._type = e["default"].SHAPE_SPHERE;
                this.center = new h.Vec3(a, b, c);
                this.radius = d
            }
            k.create = function(a, b, c, d) {
                return new k(a, b, c, d)
            };
            k.clone = function(a) {
                return new k(a.center.x, a.center.y, a.center.z, a.radius)
            };
            k.copy = function(a, b) {
                h.Vec3.copy(a.center, b.center);
                a.radius = b.radius;
                return a
            };
            k.fromPoints = function(a, b, c) {
                h.Vec3.multiplyScalar(a.center, h.Vec3.add(d, b, c), .5);
                a.radius = .5 * h.Vec3.subtract(d, c, b).len();
                return a
            };
            k.set = function(a,
                b, c, d, k) {
                a.center.x = b;
                a.center.y = c;
                a.center.z = d;
                a.radius = k;
                return a
            };
            var c = k.prototype;
            c.clone = function() {
                return k.clone(this)
            };
            c.copy = function(a) {
                return k.copy(this, a)
            };
            c.getBoundary = function(a, b) {
                h.Vec3.set(a, this.center.x - this.radius, this.center.y - this.radius, this.center.z - this.radius);
                h.Vec3.set(b, this.center.x + this.radius, this.center.y + this.radius, this.center.z + this.radius)
            };
            c.transform = function(a, b, c, d, k) {
                h.Vec3.transformMat4(k.center, this.center, a);
                k.radius = this.radius * d.maxAxis()
            };
            c.translateAndRotate =
                function(a, b, c) {
                    h.Vec3.transformMat4(c.center, this.center, a)
                };
            c.setScale = function(a, b) {
                b.radius = this.radius * a.maxAxis()
            };
            return k
        }();
        m["default"] = g;
        q.exports = m["default"]
    }, {
        "../value-types": 325,
        "./enums": 180
    }],
    189: [function(g, q, m) {
        function h(d) {
            return d && d.__esModule ? d : {
                default: d
            }
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var e = h(g("../value-types/vec3")),
            d = h(g("./enums"));
        g = function() {
            function k(c, a, b, l, f, k, h, g, p) {
                this._type = this.c = this.b = this.a = void 0;
                this.a = new e["default"](c, a, b);
                this.b = new e["default"](l,
                    f, k);
                this.c = new e["default"](h, g, p);
                this._type = d["default"].SHAPE_TRIANGLE
            }
            k.create = function(c, a, b, d, f, e, h, g, p) {
                return new k(c, a, b, d, f, e, h, g, p)
            };
            k.clone = function(c) {
                return new k(c.a.x, c.a.y, c.a.z, c.b.x, c.b.y, c.b.z, c.c.x, c.c.y, c.c.z)
            };
            k.copy = function(c, a) {
                e["default"].copy(c.a, a.a);
                e["default"].copy(c.b, a.b);
                e["default"].copy(c.c, a.c);
                return c
            };
            k.fromPoints = function(c, a, b, d) {
                e["default"].copy(c.a, a);
                e["default"].copy(c.b, b);
                e["default"].copy(c.c, d);
                return c
            };
            k.set = function(c, a, b, d, f, k, e, h, p, g) {
                c.a.x =
                    a;
                c.a.y = b;
                c.a.z = d;
                c.b.x = f;
                c.b.y = k;
                c.b.z = e;
                c.c.x = h;
                c.c.y = p;
                c.c.z = g;
                return c
            };
            return k
        }();
        m["default"] = g;
        q.exports = m["default"]
    }, {
        "../value-types/vec3": 335,
        "./enums": 180
    }],
    190: [function(g, q, m) {
        m = g("../components/CCRenderComponent");
        var h = g("../assets/material/CCMaterial"),
            e = g("./types"),
            d = e.LineCap,
            k = e.LineJoin,
            c = cc.Class({
                name: "cc.Graphics",
                extends: m,
                editor: !1,
                ctor: function() {
                    this._impl = new c._Impl(this)
                },
                properties: {
                    _lineWidth: 2,
                    _strokeColor: cc.Color.BLACK,
                    _lineJoin: k.MITER,
                    _lineCap: d.BUTT,
                    _fillColor: cc.Color.WHITE,
                    _miterLimit: 10,
                    lineWidth: {
                        get: function() {
                            return this._lineWidth
                        },
                        set: function(a) {
                            this._lineWidth = a;
                            this._impl.lineWidth = a
                        }
                    },
                    lineJoin: {
                        get: function() {
                            return this._lineJoin
                        },
                        set: function(a) {
                            this._lineJoin = a;
                            this._impl.lineJoin = a
                        },
                        type: k
                    },
                    lineCap: {
                        get: function() {
                            return this._lineCap
                        },
                        set: function(a) {
                            this._lineCap = a;
                            this._impl.lineCap = a
                        },
                        type: d
                    },
                    strokeColor: {
                        get: function() {
                            return this._strokeColor
                        },
                        set: function(a) {
                            this._impl.strokeColor = this._strokeColor = cc.color(a)
                        }
                    },
                    fillColor: {
                        get: function() {
                            return this._fillColor
                        },
                        set: function(a) {
                            this._impl.fillColor = this._fillColor = cc.color(a)
                        }
                    },
                    miterLimit: {
                        get: function() {
                            return this._miterLimit
                        },
                        set: function(a) {
                            this._miterLimit = a;
                            this._impl.miterLimit = a
                        }
                    }
                },
                statics: {
                    LineJoin: k,
                    LineCap: d
                },
                onRestore: function() {
                    this._impl || (this._impl = new c._Impl(this))
                },
                onDestroy: function() {
                    this.clear(!0);
                    this._super();
                    this._impl = null
                },
                _getDefaultMaterial: function() {
                    return h.getBuiltinMaterial("2d-graphics")
                },
                _updateMaterial: function() {
                    var a = this._materials[0];
                    a && (void 0 !== a.getDefine("CC_USE_MODEL") &&
                        a.define("CC_USE_MODEL", !0), void 0 !== a.getDefine("CC_SUPPORT_standard_derivatives") && cc.sys.glExtension("OES_standard_derivatives") && a.define("CC_SUPPORT_standard_derivatives", !0))
                },
                moveTo: function(a, b) {
                    (!0, a instanceof cc.Vec2) ? cc.warn("[moveTo] : Can not pass Vec2 as [x, y] value, please check it."): this._impl.moveTo(a, b)
                },
                lineTo: function(a, b) {
                    (!0, a instanceof cc.Vec2) ? cc.warn("[moveTo] : Can not pass Vec2 as [x, y] value, please check it."): this._impl.lineTo(a, b)
                },
                bezierCurveTo: function(a, b, c,
                    d, k, e) {
                    this._impl.bezierCurveTo(a, b, c, d, k, e)
                },
                quadraticCurveTo: function(a, b, c, d) {
                    this._impl.quadraticCurveTo(a, b, c, d)
                },
                arc: function(a, b, c, d, k, e) {
                    this._impl.arc(a, b, c, d, k, e)
                },
                ellipse: function(a, b, c, d) {
                    this._impl.ellipse(a, b, c, d)
                },
                circle: function(a, b, c) {
                    this._impl.circle(a, b, c)
                },
                rect: function(a, b, c, d) {
                    this._impl.rect(a, b, c, d)
                },
                roundRect: function(a, b, c, d, k) {
                    this._impl.roundRect(a, b, c, d, k)
                },
                fillRect: function(a, b, c, d) {
                    this.rect(a, b, c, d);
                    this.fill()
                },
                clear: function(a) {
                    this._impl.clear(a);
                    this._assembler &&
                        this._assembler.clear(a)
                },
                close: function() {
                    this._impl.close()
                },
                stroke: function() {
                    this._assembler || this._resetAssembler();
                    this._assembler.stroke(this)
                },
                fill: function() {
                    this._assembler || this._resetAssembler();
                    this._assembler.fill(this)
                }
            });
        cc.Graphics = q.exports = c;
        cc.Graphics.Types = e;
        cc.Graphics.Helper = g("./helper")
    }, {
        "../assets/material/CCMaterial": 113,
        "../components/CCRenderComponent": 149,
        "./helper": 191,
        "./types": 193
    }],
    191: [function(g, q, m) {
        function h(a, b, c, d, f, k, g, E, w, A, B) {
            if (!(10 < A)) {
                var n = .5 * (b + d);
                var p = .5 * (c + f);
                var t = .5 * (d + k);
                var u = .5 * (f + g);
                var v = .5 * (k + E);
                var x = .5 * (g + w);
                var z = .5 * (n + t);
                var m = .5 * (p + u);
                var q = E - b;
                var M = w - c;
                d = l((d - E) * M - (f - w) * q);
                k = l((k - E) * M - (g - w) * q);
                (d + k) * (d + k) < a._tessTol * (q * q + M * M) ? a._addPoint(E, w, 0 === B ? B | e.PT_BEVEL : B) : (t = .5 * (t + v), u = .5 * (u + x), q = .5 * (z + t), M = .5 * (m + u), h(a, b, c, n, p, z, m, q, M, A + 1, 0), h(a, q, M, t, u, v, x, E, w, A + 1, B))
            }
        }
        var e = g("./types").PointFlags,
            d = Math.PI,
            k = Math.min,
            c = Math.max,
            a = Math.cos,
            b = Math.sin,
            l = Math.abs,
            f = Math.sign;
        q.exports = {
            arc: function(f, e, h, p, g, x, z) {
                z = z || !1;
                var n = 0,
                    t = 0,
                    u = 0,
                    v = 0;
                x -= g;
                if (z)
                    if (l(x) >= 2 * d) x = 2 * d;
                    else
                        for (; 0 > x;) x += 2 * d;
                else if (l(x) >= 2 * d) x = 2 * -d;
                else
                    for (; 0 < x;) x -= 2 * d;
                var y = 0 | c(1, k(l(x) / (.5 * d) + .5, 5));
                var C = x / y / 2;
                C = l(4 / 3 * (1 - a(C)) / b(C));
                z || (C = -C);
                for (z = 0; z <= y; z++) {
                    var m = g + z / y * x;
                    var G = a(m);
                    var D = b(m);
                    m = e + G * p;
                    var q = h + D * p;
                    D = -D * p * C;
                    G = G * p * C;
                    0 === z ? f.moveTo(m, q) : f.bezierCurveTo(n + u, t + v, m - D, q - G, m, q);
                    n = m;
                    t = q;
                    u = D;
                    v = G
                }
            },
            ellipse: function(a, b, c, d, f) {
                a.moveTo(b - d, c);
                a.bezierCurveTo(b - d, c + .5522847493 * f, b - .5522847493 * d, c + f, b, c + f);
                a.bezierCurveTo(b + .5522847493 * d, c + f, b + d,
                    c + .5522847493 * f, b + d, c);
                a.bezierCurveTo(b + d, c - .5522847493 * f, b + .5522847493 * d, c - f, b, c - f);
                a.bezierCurveTo(b - .5522847493 * d, c - f, b - d, c - .5522847493 * f, b - d, c);
                a.close()
            },
            roundRect: function(a, b, c, d, e, h) {
                if (.1 > h) a.rect(b, c, d, e);
                else {
                    var n = k(h, .5 * l(d)) * f(d);
                    h = k(h, .5 * l(e)) * f(e);
                    a.moveTo(b, c + h);
                    a.lineTo(b, c + e - h);
                    a.bezierCurveTo(b, c + e - h * (1 - .5522847493), b + n * (1 - .5522847493), c + e, b + n, c + e);
                    a.lineTo(b + d - n, c + e);
                    a.bezierCurveTo(b + d - n * (1 - .5522847493), c + e, b + d, c + e - h * (1 - .5522847493), b + d, c + e - h);
                    a.lineTo(b + d, c + h);
                    a.bezierCurveTo(b +
                        d, c + h * (1 - .5522847493), b + d - n * (1 - .5522847493), c, b + d - n, c);
                    a.lineTo(b + n, c);
                    a.bezierCurveTo(b + n * (1 - .5522847493), c, b, c + h * (1 - .5522847493), b, c + h);
                    a.close()
                }
            },
            tesselateBezier: h
        }
    }, {
        "./types": 193
    }],
    192: [function(g, q, m) {
        g("./graphics")
    }, {
        "./graphics": 190
    }],
    193: [function(g, q, m) {
        g = cc.Enum({
            BUTT: 0,
            ROUND: 1,
            SQUARE: 2
        });
        m = cc.Enum({
            BEVEL: 0,
            ROUND: 1,
            MITER: 2
        });
        var h = cc.Enum({
            PT_CORNER: 1,
            PT_LEFT: 2,
            PT_BEVEL: 4,
            PT_INNERBEVEL: 8
        });
        q.exports = {
            LineCap: g,
            LineJoin: m,
            PointFlags: h
        }
    }, {}],
    194: [function(g, q, m) {
        g("./platform");
        g("./assets");
        !0;
        g("./CCNode");
        g("./CCPrivateNode");
        g("./CCScene");
        g("./components");
        g("./graphics");
        g("./collider");
        g("./collider/CCIntersection");
        g("./physics");
        g("./camera/CCCamera");
        g("./geom-utils");
        g("./mesh");
        g("./3d");
        g("./base-ui/CCWidgetManager")
    }, {
        "./3d": 30,
        "./CCNode": 61,
        "./CCPrivateNode": 62,
        "./CCScene": 63,
        "./assets": 111,
        "./base-ui/CCWidgetManager": 122,
        "./camera/CCCamera": 123,
        "./collider": 131,
        "./collider/CCIntersection": 129,
        "./components": 166,
        "./geom-utils": 182,
        "./graphics": 192,
        "./mesh": 197,
        "./physics": 212,
        "./platform": 245
    }],
    195: [function(g, q, m) {
        function h(a) {
            return a && a.__esModule ? a : {
                default: a
            }
        }

        function e(a, b, c) {
            a[b] = c._val
        }

        function d(a, b, c) {
            a[b] = c.x;
            a[b + 1] = c.y
        }

        function k(a, b, c) {
            a[b] = c.x;
            a[b + 1] = c.y;
            a[b + 2] = c.z
        }
        var c = h(g("../../renderer/core/input-assembler")),
            a = h(g("../../renderer/gfx")),
            b = g("./mesh-data"),
            l = g("../renderer");
        g = g("../event/event-target");
        var f = {
                5120: "getInt8",
                5121: "getUint8",
                5122: "getInt16",
                5123: "getUint16",
                5124: "getInt32",
                5125: "getUint32",
                5126: "getFloat32"
            },
            n = {
                5120: "setInt8",
                5121: "setUint8",
                5122: "setInt16",
                5123: "setUint16",
                5124: "setInt32",
                5125: "setUint32",
                5126: "setFloat32"
            },
            u = function() {
                var a = new ArrayBuffer(2);
                (new DataView(a)).setInt16(0, 256, !0);
                return 256 === (new Int16Array(a))[0]
            }();
        g = cc.Class({
            name: "cc.Mesh",
            extends: cc.Asset,
            mixins: [g],
            properties: {
                _nativeAsset: {
                    override: !0,
                    get: function() {
                        return this._buffer
                    },
                    set: function(a) {
                        this._buffer = ArrayBuffer.isView(a) ? a.buffer : a;
                        this.initWithBuffer()
                    }
                },
                _vertexBundles: {
                    default: null,
                    type: b.VertexBundle
                },
                _primitives: {
                    default: null,
                    Primitive: b.Primitive
                },
                _minPos: cc.v3(),
                _maxPos: cc.v3(),
                subMeshes: {
                    get: function() {
                        return this._subMeshes
                    },
                    set: function(a) {
                        this._subMeshes = a
                    }
                },
                subDatas: {
                    get: function() {
                        return this._subDatas
                    }
                }
            },
            ctor: function() {
                this._subMeshes = [];
                this._subDatas = [];
                this.loaded = !1
            },
            initWithBuffer: function() {
                this._subMeshes.length = 0;
                for (var d = this._primitives, f = 0; f < d.length; f++) {
                    var k = d[f],
                        e = k.data;
                    e = new Uint8Array(this._buffer, e.offset, e.length);
                    var n = this._vertexBundles[k.vertexBundleIndices[0]],
                        h = n.data;
                    n = new a["default"].VertexFormat(n.formats);
                    var g = new Uint8Array(this._buffer, h.offset, h.length),
                        u = this._canVertexFormatBatch(n),
                        B = new b.MeshData;
                    B.vData = g;
                    B.iData = e;
                    B.vfm = n;
                    B.offset = h.offset;
                    B.canBatch = u;
                    this._subDatas.push(B);
                    !1;
                    h = new a["default"].VertexBuffer(l.device, n, a["default"].USAGE_STATIC, g);
                    k = new a["default"].IndexBuffer(l.device, k.indexUnit, a["default"].USAGE_STATIC, e);
                    this._subMeshes.push(new c["default"](h, k))
                }
                this.loaded = !0;
                this.emit("load")
            },
            _canVertexFormatBatch: function(b) {
                var c = b._attr2el[a["default"].ATTR_POSITION];
                return !c ||
                    c.type === a["default"].ATTR_TYPE_FLOAT32 && 0 === b._bytes % 4
            },
            init: function(d, f, k, e) {
                void 0 === k && (k = !1);
                void 0 === e && (e = 0);
                var n = new Uint8Array(d._bytes * f);
                f = new b.MeshData;
                f.vData = n;
                f.vfm = d;
                f.vDirty = !0;
                f.canBatch = this._canVertexFormatBatch(d);
                !0;
                d = new a["default"].VertexBuffer(l.device, d, k ? a["default"].USAGE_DYNAMIC : a["default"].USAGE_STATIC, n);
                f.vb = d;
                this._subMeshes[e] = new c["default"](f.vb);
                if (d = this._subDatas[e]) d.vb && d.vb.destroy(), d.ib && d.ib.destroy();
                this._subDatas[e] = f;
                this.loaded = !0;
                this.emit("load");
                this.emit("init-format")
            },
            setVertices: function(b, c, f) {
                f = this._subDatas[f || 0];
                var l = f.vfm.element(b);
                if (!l) return cc.warn("Cannot find " + b + " attribute in vertex defines.");
                var n = "number" === typeof c[0],
                    h = l.num,
                    g = n ? c.length / h | 0 : c.length;
                f.vData.byteLength < g * l.stride && f.setVData(new Uint8Array(g * f.vfm._bytes));
                var p = 4;
                b === a["default"].ATTR_COLOR ? n ? (g = f.getVData(), p = 1) : g = f.getVData(Uint32Array) : g = f.getVData(Float32Array);
                var t = l.stride / p;
                l = l.offset / p;
                if (n)
                    for (b = 0, n = c.length / h; b < n; b++) {
                        p = b * h;
                        for (var u =
                                b * t + l, v = 0; v < h; v++) g[u + v] = c[p + v]
                    } else
                        for (h = b === a["default"].ATTR_COLOR ? e : 2 === h ? d : k, b = 0, n = c.length; b < n; b++) h(g, b * t + l, c[b]);
                f.vDirty = !0
            },
            setIndices: function(b, c, d) {
                c = c || 0;
                var f = b;
                b instanceof Uint16Array ? f = new Uint8Array(b.buffer, b.byteOffset, b.byteLength) : Array.isArray(b) && (f = new Uint16Array(b), f = new Uint8Array(f.buffer, f.byteOffset, f.byteLength));
                d = d ? a["default"].USAGE_DYNAMIC : a["default"].USAGE_STATIC;
                b = this._subDatas[c];
                b.ib ? (b.iData = f, b.iDirty = !0) : (b.iData = f, !0, f = new a["default"].IndexBuffer(l.device,
                    a["default"].INDEX_FMT_UINT16, d, f, f.byteLength / a["default"].IndexBuffer.BYTES_PER_INDEX[a["default"].INDEX_FMT_UINT16]), b.ib = f, this._subMeshes[c]._indexBuffer = b.ib)
            },
            setPrimitiveType: function(a, b) {
                b = b || 0;
                this._subMeshes[b] ? this._subMeshes[b]._primitiveType = a : cc.warn("Do not have sub mesh at index " + b)
            },
            clear: function() {
                this._subMeshes.length = 0;
                for (var a = this._subDatas, b = 0, c = a.length; b < c; b++) {
                    var d = a[b].vb;
                    d && d.destroy();
                    (d = a[b].ib) && d.destroy()
                }
                a.length = 0
            },
            setBoundingBox: function(a, b) {
                this._minPos =
                    a;
                this._maxPos = b
            },
            destroy: function() {
                this.clear()
            },
            _uploadData: function() {
                for (var a = this._subDatas, b = 0, c = a.length; b < c; b++) {
                    var d = a[b];
                    d.vDirty && (d.vb.update(0, d.vData), d.vDirty = !1);
                    d.iDirty && (d.ib.update(0, d.iData), d.iDirty = !1)
                }
            },
            _getAttrMeshData: function(a, b) {
                var c = this._subDatas[a];
                if (!c) return [];
                var d = c.vfm,
                    l = d.element(b);
                if (!l) return [];
                c.attrDatas || (c.attrDatas = {});
                var k = c.attrDatas;
                if (a = k[b]) return a;
                a = k[b] = [];
                var e = c.vData;
                b = new DataView(e.buffer, e.byteOffset, e.byteLength);
                c = l.stride;
                k = l.offset;
                var n = l.num,
                    h = l.bytes / n;
                l = f[l.type];
                d = e.byteLength / d._bytes;
                for (e = 0; e < d; e++)
                    for (var g = e * c + k, p = 0; p < n; p++) {
                        var v = b[l](g + p * h, u);
                        a.push(v)
                    }
                return a
            },
            copyAttribute: function(a, b, c, d, f) {
                var l = !1,
                    k = this._subDatas[a];
                if (!k) return l;
                var e = k.vfm,
                    h = e.element(b);
                if (!h) return l;
                var g = n[h.type];
                if (!g) return l;
                a = this._getAttrMeshData(a, b);
                k = k.vData.byteLength / e._bytes;
                e = h.bytes / h.num;
                if (0 < a.length) {
                    c = new DataView(c, f);
                    h = h.num;
                    for (f = 0; f < k; ++f)
                        for (l = f * h, b = 0; b < h; ++b) c[g](d * f + e * b, a[l + b], u);
                    l = !0
                }
                return l
            },
            copyIndices: function(b,
                c) {
                b = this._subDatas[b];
                if (!b) return !1;
                var d = b.iData;
                b = d.length / 2;
                d = new DataView(d.buffer, d.byteOffset, d.byteLength);
                for (var l = f[a["default"].INDEX_FMT_UINT8], k = 0; k < b; ++k) c[k] = d[l](2 * k);
                return !0
            }
        });
        cc.Mesh = q.exports = g
    }, {
        "../../renderer/core/input-assembler": 348,
        "../../renderer/gfx": 358,
        "../event/event-target": 174,
        "../renderer": 259,
        "./mesh-data": 198
    }],
    196: [function(g, q, m) {
        function h(a) {
            return a && a.__esModule ? a : {
                default: a
            }
        }
        var e = h(g("../../renderer/gfx")),
            d = h(g("../../renderer/core/input-assembler")),
            k = h(g("../geom-utils/aabb")),
            c = h(g("../value-types/vec3")),
            a = h(g("../value-types/mat4")),
            b = h(g("../assets/material/material-variant"));
        m = g("../components/CCRenderComponent");
        var l = g("./CCMesh"),
            f = g("../renderer/render-flow"),
            n = g("../renderer"),
            u = g("../assets/material/CCMaterial"),
            v = cc.Enum({
                OFF: 0,
                ON: 1
            });
        g = cc.Class({
            name: "cc.MeshRenderer",
            extends: m,
            editor: !1,
            properties: {
                _mesh: {
                    default: null,
                    type: l
                },
                _receiveShadows: !1,
                _shadowCastingMode: v.OFF,
                _enableAutoBatch: !1,
                mesh: {
                    get: function() {
                        return this._mesh
                    },
                    set: function(a) {
                        this._mesh !== a && (this._setMesh(a), a ? (this.markForRender(!0), this.node._renderFlag |= f.FLAG_TRANSFORM) : this.disableRender())
                    },
                    type: l,
                    animatable: !1
                },
                textures: {
                    default: [],
                    type: cc.Texture2D,
                    visible: !1
                },
                receiveShadows: {
                    get: function() {
                        return this._receiveShadows
                    },
                    set: function(a) {
                        this._receiveShadows = a;
                        this._updateReceiveShadow()
                    },
                    animatable: !1
                },
                shadowCastingMode: {
                    get: function() {
                        return this._shadowCastingMode
                    },
                    set: function(a) {
                        this._shadowCastingMode = a;
                        this._updateCastShadow()
                    },
                    type: v,
                    animatable: !1
                },
                enableAutoBatch: {
                    get: function() {
                        return this._enableAutoBatch
                    },
                    set: function(a) {
                        this._enableAutoBatch = a
                    }
                }
            },
            statics: {
                ShadowCastingMode: v
            },
            ctor: function() {
                this._boundingBox = cc.geomUtils && new k["default"];
                !0;
                this._debugDatas = {
                    wireFrame: [],
                    normal: []
                }
            },
            onEnable: function() {
                var a = this;
                this._super();
                this._mesh && !this._mesh.loaded ? (this.disableRender(), this._mesh.once("load", function() {
                    a.isValid && (a._setMesh(a._mesh), a.markForRender(!0))
                }), cc.assetManager.postLoadNative(this._mesh)) : this._setMesh(this._mesh);
                this._updateRenderNode();
                this._updateMaterial()
            },
            onDestroy: function() {
                this._setMesh(null);
                cc.pool.assembler.put(this._assembler)
            },
            _updateRenderNode: function() {
                this._assembler.setRenderNode(this.node)
            },
            _setMesh: function(a) {
                cc.geomUtils && a && k["default"].fromPoints(this._boundingBox, a._minPos, a._maxPos);
                this._mesh && this._mesh.off("init-format", this._updateMeshAttribute, this);
                a && a.on("init-format", this._updateMeshAttribute, this);
                this._mesh = a;
                this._assembler && (this._assembler._worldDatas = {});
                this._updateMeshAttribute()
            },
            _getDefaultMaterial: function() {
                return u.getBuiltinMaterial("unlit")
            },
            _validateRender: function() {
                var a = this._mesh;
                a && 0 < a._subDatas.length || this.disableRender()
            },
            _updateMaterial: function() {
                var a = this.textures;
                if (a && 0 < a.length)
                    for (var c = this._getDefaultMaterial(), d = 0; d < a.length; d++) {
                        var f = this._materials[d];
                        f && f._uuid !== c._uuid || (f || (f = b["default"].create(c, this), this.setMaterial(d, f)), f.setProperty("diffuseTexture", a[d]))
                    }
                this._updateReceiveShadow();
                this._updateCastShadow();
                this._updateMeshAttribute()
            },
            _updateReceiveShadow: function() {
                for (var a = this.getMaterials(), b = 0; b < a.length; b++) a[b].define("CC_USE_SHADOW_MAP", this._receiveShadows, void 0, !0)
            },
            _updateCastShadow: function() {
                for (var a = this.getMaterials(), b = 0; b < a.length; b++) a[b].define("CC_CASTING_SHADOW", this._shadowCastingMode === v.ON, void 0, !0)
            },
            _updateMeshAttribute: function() {
                var a = this._mesh && this._mesh.subDatas;
                if (a) {
                    for (var b = this.getMaterials(), c = 0; c < b.length && a[c]; c++) {
                        var d = a[c].vfm,
                            f = b[c];
                        f.define("CC_USE_ATTRIBUTE_COLOR", !!d.element(e["default"].ATTR_COLOR),
                            void 0, !0);
                        f.define("CC_USE_ATTRIBUTE_UV0", !!d.element(e["default"].ATTR_UV0), void 0, !0);
                        f.define("CC_USE_ATTRIBUTE_NORMAL", !!d.element(e["default"].ATTR_NORMAL), void 0, !0);
                        f.define("CC_USE_ATTRIBUTE_TANGENT", !!d.element(e["default"].ATTR_TANGENT), void 0, !0)
                    }!0;
                    for (var l in this._debugDatas) this._debugDatas[l].length = 0;
                    !1
                }
            },
            _checkBacth: function() {}
        });
        !0;
        var p = cc.Color.BLACK,
            t = cc.Color.RED,
            x = [cc.v3(), cc.v3()],
            z = cc.mat4(),
            E = {
                normal: function(f, l, k, h) {
                    l = k.vfm;
                    var g = l.element(e["default"].ATTR_NORMAL),
                        p = l.element(e["default"].ATTR_POSITION);
                    k = l.element(e["default"].ATTR_JOINTS);
                    var u = l.element(e["default"].ATTR_WEIGHTS);
                    if (g && p) {
                        l = [];
                        var v = [];
                        c["default"].set(x[0], 5, 0, 0);
                        a["default"].invert(z, f.node._worldMatrix);
                        c["default"].transformMat4Normal(x[0], x[0], z);
                        var A = x[0].mag();
                        var w = f.mesh;
                        f = w._getAttrMeshData(h, e["default"].ATTR_POSITION);
                        var B = w._getAttrMeshData(h, e["default"].ATTR_NORMAL),
                            E = w._getAttrMeshData(h, e["default"].ATTR_JOINTS);
                        h = w._getAttrMeshData(h, e["default"].ATTR_WEIGHTS);
                        w = f.length /
                            p.num;
                        for (var y = 0; y < w; y++) {
                            var m = y * g.num,
                                q = y * p.num;
                            c["default"].set(x[0], B[m], B[m + 1], B[m + 2]);
                            c["default"].set(x[1], f[q], f[q + 1], f[q + 2]);
                            c["default"].scaleAndAdd(x[0], x[1], x[0], A);
                            for (m = 0; 2 > m; m++) {
                                v.push(x[m].x, x[m].y, x[m].z);
                                if (k) {
                                    q = y * k.num;
                                    for (var Q = 0; Q < k.num; Q++) v.push(E[q + Q])
                                }
                                if (u)
                                    for (q = y * u.num, Q = 0; Q < u.num; Q++) v.push(h[q + Q])
                            }
                            l.push(2 * y, 2 * y + 1)
                        }
                        g = [{
                            name: e["default"].ATTR_POSITION,
                            type: e["default"].ATTR_TYPE_FLOAT32,
                            num: 3
                        }];
                        k && g.push({
                            name: e["default"].ATTR_JOINTS,
                            type: e["default"].ATTR_TYPE_FLOAT32,
                            num: k.num
                        });
                        u && g.push({
                            name: e["default"].ATTR_WEIGHTS,
                            type: e["default"].ATTR_TYPE_FLOAT32,
                            num: u.num
                        });
                        k = new e["default"].VertexFormat(g);
                        k = new e["default"].VertexBuffer(n.device, k, e["default"].USAGE_STATIC, new Float32Array(v));
                        l = new Uint16Array(l);
                        l = new e["default"].IndexBuffer(n.device, e["default"].INDEX_FMT_UINT16, e["default"].USAGE_STATIC, l, l.length);
                        v = b["default"].createWithBuiltin("unlit");
                        v.setProperty("diffuseColor", t);
                        return {
                            material: v,
                            ia: new d["default"](k, l, e["default"].PT_LINES)
                        }
                    }
                },
                wireFrame: function(a,
                    c, f) {
                    f = f.getIData(Uint16Array);
                    a = b["default"].createWithBuiltin("unlit");
                    a.setProperty("diffuseColor", p);
                    for (var l = [], k = 0; k < f.length; k += 3) {
                        var h = f[k + 0],
                            g = f[k + 1],
                            t = f[k + 2];
                        l.push(h, g, g, t, t, h)
                    }
                    f = new Uint16Array(l);
                    f = new e["default"].IndexBuffer(n.device, e["default"].INDEX_FMT_UINT16, e["default"].USAGE_STATIC, f, f.length);
                    return {
                        material: a,
                        ia: new d["default"](c._vertexBuffer, f, e["default"].PT_LINES)
                    }
                }
            };
        g.prototype._updateDebugDatas = function() {
            var a = this._debugDatas,
                b = this._mesh.subMeshes,
                c = this._mesh._subDatas,
                d;
            for (d in a) {
                var f = a[d];
                if (f.length !== b.length && cc.macro["SHOW_MESH_" + d.toUpperCase()]) {
                    f.length = b.length;
                    for (var l = 0; l < b.length; l++) f[l] = E[d](this, b[l], c[l], l)
                }
            }
        };
        cc.MeshRenderer = q.exports = g
    }, {
        "../../renderer/core/input-assembler": 348,
        "../../renderer/gfx": 358,
        "../assets/material/CCMaterial": 113,
        "../assets/material/material-variant": 120,
        "../components/CCRenderComponent": 149,
        "../geom-utils/aabb": 178,
        "../renderer": 259,
        "../renderer/render-flow": 260,
        "../value-types/mat4": 327,
        "../value-types/vec3": 335,
        "./CCMesh": 195
    }],
    197: [function(g, q, m) {
        g("./CCMesh");
        !0;
        g("./CCMeshRenderer");
        g("./mesh-renderer")
    }, {
        "./CCMesh": 195,
        "./CCMeshRenderer": 196,
        "./mesh-renderer": 199
    }],
    198: [function(g, q, m) {
        function h() {
            this.vfm = this.uint16IData = this.iData = this.uint32VData = this.float32VData = this.vData = null;
            this.offset = 0;
            this.ib = this.vb = null;
            this.iDirty = this.vDirty = !1;
            this.enable = !0
        }
        m.__esModule = !0;
        m.BufferRange = void 0;
        m.MeshData = h;
        m.VertexFormat = m.VertexBundle = m.Primitive = void 0;
        g = function(d) {
            return d && d.__esModule ? d : {
                default: d
            }
        }(g("../../renderer/gfx"));
        q = cc.Class({
            name: "cc.BufferRange",
            properties: {
                offset: 0,
                length: 0
            }
        });
        m.BufferRange = q;
        var e = cc.Class({
            name: "cc.mesh.VertexFormat",
            properties: {
                name: "",
                type: -1,
                num: -1,
                normalize: !1
            }
        });
        m.VertexFormat = e;
        e = cc.Class({
            name: "cc.mesh.VertexBundle",
            properties: {
                data: {
                    default: null,
                    type: q
                },
                formats: {
                    default: [],
                    type: e
                },
                verticesCount: 0
            }
        });
        m.VertexBundle = e;
        g = cc.Class({
            name: "cc.mesh.Primitive",
            properties: {
                vertexBundleIndices: {
                    default: [],
                    type: cc.Float
                },
                data: {
                    default: null,
                    type: q
                },
                indexUnit: g["default"].INDEX_FMT_UINT16,
                topology: g["default"].PT_TRIANGLES
            }
        });
        m.Primitive = g;
        h.prototype.setVData = function(d) {
            this.vData = d;
            this.uint32VData = this.float32VData = null
        };
        h.prototype.getVData = function(d) {
            return d === Float32Array ? (this.float32VData || (this.float32VData = new Float32Array(this.vData.buffer, this.vData.byteOffset, this.vData.byteLength / 4)), this.float32VData) : d === Uint32Array ? (this.uint32VData || (this.uint32VData = new Uint32Array(this.vData.buffer, this.vData.byteOffset, this.vData.byteLength / 4)), this.uint32VData) : this.vData
        };
        h.prototype.getIData = function(d) {
            return d === Uint16Array ? (this.uint16IData || (this.uint16IData = new Uint16Array(this.iData.buffer, this.iData.byteOffset, this.iData.byteLength / 2)), this.uint16IData) : this.iData
        }
    }, {
        "../../renderer/gfx": 358
    }],
    199: [function(g, q, m) {
        function h(a) {
            return a && a.__esModule ? a : {
                default: a
            }
        }

        function e(a, b) {
            a.prototype = Object.create(b.prototype);
            a.prototype.constructor = a;
            d(a, b)
        }

        function d(a, b) {
            d = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(a, b) {
                a.__proto__ = b;
                return a
            };
            return d(a, b)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var k = h(g("../renderer/assembler")),
            c = h(g("../../renderer/gfx")),
            a = h(g("../value-types/vec3"));
        g = g("./CCMeshRenderer");
        var b = new a["default"],
            l = function(d) {
                function f() {
                    return d.apply(this, arguments) || this
                }
                e(f, d);
                var l = f.prototype;
                l.init = function(a) {
                    d.prototype.init.call(this, a);
                    this._worldDatas = {};
                    this._renderNode = null
                };
                l.setRenderNode = function(a) {
                    this._renderNode = a
                };
                l.fillBuffers = function(a, b) {
                    if (a.mesh) {
                        a.mesh._uploadData();
                        for (var d = b.cullingMask ===
                                a.node._cullingMask, f = a.enableAutoBatch, l = a._materials, k = a.mesh._subMeshes, e = a.mesh.subDatas, n = 0; n < k.length; n++) {
                            var h = k[n],
                                g = e[n],
                                p = l[n] || l[0];
                            f && g.canBatch && h._primitiveType === c["default"].PT_TRIANGLES ? (d && p.getHash() === b.material.getHash() || b._flush(), b.material = p, b.cullingMask = a.node._cullingMask, b.node = b._dummyNode, this._fillBuffer(a, g, b, n)) : (b._flush(), b.material = p, b.cullingMask = a.node._cullingMask, b.node = this._renderNode, b._flushIA(h))
                        }(!0, !cc.macro.SHOW_MESH_WIREFRAME && !cc.macro.SHOW_MESH_NORMAL) ||
                        a.node._cullingMask & 1 << cc.Node.BuiltinGroupIndex.DEBUG || (b._flush(), b.node = this._renderNode, a._updateDebugDatas(), cc.macro.SHOW_MESH_WIREFRAME && this._drawDebugDatas(a, b, "wireFrame"), cc.macro.SHOW_MESH_NORMAL && this._drawDebugDatas(a, b, "normal"))
                    }
                };
                l._fillBuffer = function(a, b, c, d) {
                    var f = b.getVData(Float32Array),
                        l = b.vfm,
                        k = f.byteLength / l._bytes | 0;
                    b = b.getIData(Uint16Array);
                    var e = b.length,
                        n = c.getBuffer("mesh", l),
                        h = n.request(k, e),
                        g = h.indiceOffset,
                        p = h.byteOffset >> 2;
                    h = h.vertexOffset;
                    var t = n._vData;
                    n = n._iData;
                    !c.worldMatDirty && this._worldDatas[d] || this._updateWorldVertices(d, k, f, l, a.node._worldMatrix);
                    t.set(this._worldDatas[d], p);
                    for (a = 0; a < e; a++) n[g + a] = h + b[a]
                };
                l._updateWorldVertices = function(d, f, l, k, e) {
                    var n = this._worldDatas[d];
                    n || (n = this._worldDatas[d] = new Float32Array(l.length), n.set(l));
                    d = k._bytes / 4;
                    k = k._elements;
                    for (var h = 0, g = k.length; h < g; h++) {
                        var p = k[h],
                            t = p.offset / 4;
                        if (p.name === c["default"].ATTR_POSITION || p.name === c["default"].ATTR_NORMAL) {
                            p = p.name === c["default"].ATTR_NORMAL ? a["default"].transformMat4Normal :
                                a["default"].transformMat4;
                            for (var u = 0; u < f; u++) {
                                var x = u * d + t;
                                b.x = l[x];
                                b.y = l[x + 1];
                                b.z = l[x + 2];
                                p(b, b, e);
                                n[x] = b.x;
                                n[x + 1] = b.y;
                                n[x + 2] = b.z
                            }
                        }
                    }
                };
                l._drawDebugDatas = function(a, b, c) {
                    if (a = a._debugDatas[c])
                        for (c = 0; c < a.length; c++) {
                            var d = a[c];
                            d && (b.material = d.material, b._flushIA(d.ia))
                        }
                };
                return f
            }(k["default"]);
        m["default"] = l;
        k["default"].register(g, l);
        q.exports = m["default"]
    }, {
        "../../renderer/gfx": 358,
        "../renderer/assembler": 256,
        "../value-types/vec3": 335,
        "./CCMeshRenderer": 196
    }],
    200: [function(g, q, m) {
        function h() {
            this._activatingStack = []
        }
        var e = g("./component-scheduler");
        m = g("./platform/CCObject").Flags;
        var d = g("./platform/js"),
            k = m.IsPreloadStarted,
            c = m.IsOnLoadStarted,
            a = m.IsOnLoadCalled,
            b = m.Deactivating,
            l = cc.Class({
                extends: e.LifeCycleInvoker,
                add: function(a) {
                    this._zero.array.push(a)
                },
                remove: function(a) {
                    this._zero.fastRemove(a)
                },
                cancelInactive: function(a) {
                    e.LifeCycleInvoker.stableRemoveInactive(this._zero, a)
                },
                invoke: function() {
                    this._invoke(this._zero);
                    this._zero.array.length = 0
                }
            }),
            f = e.createInvokeImpl("c.__preload();"),
            n = e.createInvokeImpl("c.onLoad();c._objFlags|=" +
                a, !1, a),
            u = new d.Pool(4);
        u.get = function() {
            var a = this._get() || {
                preload: new l(f),
                onLoad: new e.OneOffInvoker(n),
                onEnable: new e.OneOffInvoker(e.invokeOnEnable)
            };
            a.preload._zero.i = -1;
            var b = a.onLoad;
            b._zero.i = -1;
            b._neg.i = -1;
            b._pos.i = -1;
            b = a.onEnable;
            b._zero.i = -1;
            b._neg.i = -1;
            b._pos.i = -1;
            return a
        };
        g = cc.Class({
            ctor: h,
            reset: h,
            _activateNodeRecursively: function(a, c, f, l) {
                if (a._objFlags & b) cc.errorID(3816, a.name);
                else {
                    a._activeInHierarchy = !0;
                    for (var k = a._components.length, e = 0; e < k; ++e) {
                        var n = a._components[e];
                        if (n instanceof cc.Component) this.activateComp(n, c, f, l);
                        else {
                            var h = a,
                                g = e;
                            !1;
                            n ? h._removeComponent(n) : d.array.removeAt(h._components, g);
                            --e;
                            --k
                        }
                    }
                    a._childArrivalOrder = a._children.length;
                    k = 0;
                    for (e = a._children.length; k < e; ++k) h = a._children[k], h._localZOrder = 4294901760 & h._localZOrder | k + 1, h._active && this._activateNodeRecursively(h, c, f, l);
                    a._onPostActivated(!0)
                }
            },
            _deactivateNodeRecursively: function(a) {
                !1;
                a._objFlags |= b;
                a._activeInHierarchy = !1;
                for (var c = a._components.length, d = 0; d < c; ++d) {
                    var f = a._components[d];
                    if (f._enabled &&
                        (cc.director._compScheduler.disableComp(f), a._activeInHierarchy)) {
                        a._objFlags &= ~b;
                        return
                    }
                }
                c = 0;
                for (d = a._children.length; c < d; ++c)
                    if (f = a._children[c], f._activeInHierarchy && (this._deactivateNodeRecursively(f), a._activeInHierarchy)) {
                        a._objFlags &= ~b;
                        return
                    }
                a._onPostActivated(!1);
                a._objFlags &= ~b
            },
            activateNode: function(a, b) {
                if (b) b = u.get(), this._activatingStack.push(b), this._activateNodeRecursively(a, b.preload, b.onLoad, b.onEnable), b.preload.invoke(), b.onLoad.invoke(), b.onEnable.invoke(), this._activatingStack.pop(),
                    u.put(b);
                else {
                    this._deactivateNodeRecursively(a);
                    b = this._activatingStack;
                    for (var d = 0; d < b.length; d++) {
                        var f = b[d];
                        f.preload.cancelInactive(k);
                        f.onLoad.cancelInactive(c);
                        f.onEnable.cancelInactive()
                    }
                }
                a.emit("active-in-hierarchy-changed", a)
            },
            activateComp: function(b, d, f, l) {
                cc.isValid(b, !0) && (b._objFlags & k || (b._objFlags |= k, b.__preload && (d ? d.add(b) : b.__preload())), b._objFlags & c || (b._objFlags |= c, b.onLoad ? f ? f.add(b) : (b.onLoad(), b._objFlags |= a) : b._objFlags |= a), b._enabled && b.node._activeInHierarchy && cc.director._compScheduler.enableComp(b,
                    l))
            },
            destroyComp: function(b) {
                cc.director._compScheduler.disableComp(b);
                b.onDestroy && b._objFlags & a && b.onDestroy()
            },
            resetComp: !1
        });
        q.exports = g
    }, {
        "./component-scheduler": 132,
        "./platform/CCObject": 233,
        "./platform/js": 248,
        "./utils/misc": 310
    }],
    201: [function(g, q, m) {
        function h() {
            this.localPoint = cc.v2();
            this.tangentImpulse = this.normalImpulse = 0
        }

        function e() {}
        var d = g("./CCPhysicsTypes").PTM_RATIO,
            k = g("./CCPhysicsTypes").ContactType,
            c = [],
            a = [cc.v2(), cc.v2()],
            b = new b2.WorldManifold,
            l = {
                points: [],
                separations: [],
                normal: cc.v2()
            },
            f = [new h, new h];
        new b2.Manifold;
        var n = {
                type: 0,
                localPoint: cc.v2(),
                localNormal: cc.v2(),
                points: []
            },
            u = {
                normalImpulses: [],
                tangentImpulses: []
            };
        e.prototype.init = function(a) {
            this.colliderA = a.GetFixtureA().collider;
            this.colliderB = a.GetFixtureB().collider;
            this.disabledOnce = this.disabled = !1;
            this._impulse = null;
            this._inverted = !1;
            this._b2contact = a;
            a._contact = this
        };
        e.prototype.reset = function() {
            this.setTangentSpeed(0);
            this.resetFriction();
            this.resetRestitution();
            this.colliderB = this.colliderA = null;
            this.disabled = !1;
            this._impulse = null;
            this._b2contact = this._b2contact._contact = null
        };
        e.prototype.getWorldManifold = function() {
            var c = l.points,
                f = l.separations,
                k = l.normal;
            this._b2contact.GetWorldManifold(b);
            var e = b.points,
                n = b.separations,
                h = this._b2contact.GetManifold().pointCount;
            c.length = f.length = h;
            for (var g = 0; g < h; g++) {
                var u = a[g];
                u.x = e[g].x * d;
                u.y = e[g].y * d;
                c[g] = u;
                f[g] = n[g] * d
            }
            k.x = b.normal.x;
            k.y = b.normal.y;
            this._inverted && (k.x *= -1, k.y *= -1);
            return l
        };
        e.prototype.getManifold = function() {
            for (var a = n.points, b =
                    n.localNormal, c = n.localPoint, l = this._b2contact.GetManifold(), k = l.points, e = a.length = l.pointCount, h = 0; h < e; h++) {
                var g = f[h],
                    u = k[h];
                g.localPoint.x = u.localPoint.x * d;
                g.localPoint.Y = u.localPoint.Y * d;
                g.normalImpulse = u.normalImpulse * d;
                g.tangentImpulse = u.tangentImpulse;
                a[h] = g
            }
            c.x = l.localPoint.x * d;
            c.y = l.localPoint.y * d;
            b.x = l.localNormal.x;
            b.y = l.localNormal.y;
            n.type = l.type;
            this._inverted && (b.x *= -1, b.y *= -1);
            return n
        };
        e.prototype.getImpulse = function() {
            var a = this._impulse;
            if (!a) return null;
            for (var b = u.normalImpulses,
                    c = u.tangentImpulses, f = a.count, l = 0; l < f; l++) b[l] = a.normalImpulses[l] * d, c[l] = a.tangentImpulses[l];
            c.length = b.length = f;
            return u
        };
        e.prototype.emit = function(a) {
            switch (a) {
                case k.BEGIN_CONTACT:
                    var b = "onBeginContact";
                    break;
                case k.END_CONTACT:
                    b = "onEndContact";
                    break;
                case k.PRE_SOLVE:
                    b = "onPreSolve";
                    break;
                case k.POST_SOLVE:
                    b = "onPostSolve"
            }
            a = this.colliderA;
            var c = this.colliderB,
                d = a.body,
                f = c.body,
                l;
            if (d.enabledContactListener) {
                d = d.node._components;
                this._inverted = !1;
                var e = 0;
                for (l = d.length; e < l; e++) {
                    var n = d[e];
                    n[b] &&
                        n[b](this, a, c)
                }
            }
            if (f.enabledContactListener)
                for (d = f.node._components, this._inverted = !0, e = 0, l = d.length; e < l; e++) n = d[e], n[b] && n[b](this, c, a);
            if (this.disabled || this.disabledOnce) this.setEnabled(!1), this.disabledOnce = !1
        };
        e.get = function(a) {
            var b = 0 === c.length ? new cc.PhysicsContact : c.pop();
            b.init(a);
            return b
        };
        e.put = function(a) {
            if (a = a._contact) c.push(a), a.reset()
        };
        g = e.prototype;
        g.setEnabled = function(a) {
            this._b2contact.SetEnabled(a)
        };
        g.isTouching = function() {
            return this._b2contact.IsTouching()
        };
        g.setTangentSpeed =
            function(a) {
                this._b2contact.SetTangentSpeed(a / d)
            };
        g.getTangentSpeed = function() {
            return this._b2contact.GetTangentSpeed() * d
        };
        g.setFriction = function(a) {
            this._b2contact.SetFriction(a)
        };
        g.getFriction = function() {
            return this._b2contact.GetFriction()
        };
        g.resetFriction = function() {
            return this._b2contact.ResetFriction()
        };
        g.setRestitution = function(a) {
            this._b2contact.SetRestitution(a)
        };
        g.getRestitution = function() {
            return this._b2contact.GetRestitution()
        };
        g.resetRestitution = function() {
            return this._b2contact.ResetRestitution()
        };
        e.ContactType = k;
        cc.PhysicsContact = q.exports = e
    }, {
        "./CCPhysicsTypes": 203
    }],
    202: [function(g, q, m) {
        m = g("./CCPhysicsTypes");
        var h = m.ContactType,
            e = m.BodyType,
            d = m.RayCastType,
            k = m.DrawBits,
            c = m.PTM_RATIO,
            a = m.PHYSICS_ANGLE_TO_ANGLE,
            b = g("./utils").convertToNodeRotation,
            l = g("./platform/CCPhysicsDebugDraw"),
            f = new b2.AABB,
            n = new b2.Vec2,
            u = new b2.Vec2,
            v = cc.v2(),
            p = cc.Class({
                mixins: [cc.EventTarget],
                statics: {
                    DrawBits: k,
                    PTM_RATIO: c,
                    VELOCITY_ITERATIONS: 10,
                    POSITION_ITERATIONS: 10,
                    FIXED_TIME_STEP: 1 / 60,
                    MAX_ACCUMULATOR: .2
                },
                ctor: function() {
                    this._debugDrawFlags = 0;
                    this._world = this._debugDrawer = null;
                    this._bodies = [];
                    this._joints = [];
                    this._contactMap = {};
                    this._contactID = 0;
                    this._delayEvents = [];
                    this._accumulator = 0;
                    cc.director._scheduler && cc.director._scheduler.enableForTarget(this);
                    this.enabledAccumulator = !1
                },
                pushDelayEvent: function(a, b, c) {
                    this._steping ? this._delayEvents.push({
                        target: a,
                        func: b,
                        args: c
                    }) : a[b].apply(a, c)
                },
                update: function(a) {
                    var b = this._world;
                    if (b && this.enabled) {
                        this.emit("before-step");
                        this._steping = !0;
                        var c = p.VELOCITY_ITERATIONS,
                            d = p.POSITION_ITERATIONS;
                        if (this.enabledAccumulator) {
                            this._accumulator += a;
                            a = p.FIXED_TIME_STEP;
                            var f = p.MAX_ACCUMULATOR;
                            for (this._accumulator > f && (this._accumulator = f); this._accumulator > a;) b.Step(a, c, d), this._accumulator -= a
                        } else b.Step(1 / cc.game.config.frameRate, c, d);
                        this.debugDrawFlags && (this._checkDebugDrawValid(), this._debugDrawer.clear(), b.DrawDebugData());
                        this._steping = !1;
                        b = this._delayEvents;
                        c = 0;
                        for (d = b.length; c < d; c++) a = b[c], a.target[a.func].apply(a.target, a.args);
                        b.length = 0;
                        this._syncNode()
                    }
                },
                testPoint: function(a) {
                    var b =
                        n.x = a.x / c;
                    a = n.y = a.y / c;
                    var d = .2 / c;
                    f.lowerBound.x = b - d;
                    f.lowerBound.y = a - d;
                    f.upperBound.x = b + d;
                    f.upperBound.y = a + d;
                    b = this._aabbQueryCallback;
                    b.init(n);
                    this._world.QueryAABB(b, f);
                    return (b = b.getFixture()) ? b.collider : null
                },
                testAABB: function(a) {
                    f.lowerBound.x = a.xMin / c;
                    f.lowerBound.y = a.yMin / c;
                    f.upperBound.x = a.xMax / c;
                    f.upperBound.y = a.yMax / c;
                    a = this._aabbQueryCallback;
                    a.init();
                    this._world.QueryAABB(a, f);
                    return a.getFixtures().map(function(a) {
                        return a.collider
                    })
                },
                rayCast: function(a, b, f) {
                    if (a.equals(b)) return [];
                    f = f || d.Closest;
                    n.x = a.x / c;
                    n.y = a.y / c;
                    u.x = b.x / c;
                    u.y = b.y / c;
                    var l = this._raycastQueryCallback;
                    l.init(f);
                    this._world.RayCast(l, n, u);
                    a = l.getFixtures();
                    if (0 < a.length) {
                        b = l.getPoints();
                        var k = l.getNormals();
                        l = l.getFractions();
                        for (var e = [], h = 0, g = a.length; h < g; h++) {
                            var p = a[h],
                                t = p.collider;
                            if (f === d.AllClosest) {
                                var x = e.find(function(a) {
                                    return a.collider === t
                                });
                                if (x) {
                                    l[h] < x.fraction && (x.fixtureIndex = t._getFixtureIndex(p), x.point.x = b[h].x * c, x.point.y = b[h].y * c, x.normal.x = k[h].x, x.normal.y = k[h].y, x.fraction = l[h]);
                                    continue
                                }
                            }
                            e.push({
                                collider: t,
                                fixtureIndex: t._getFixtureIndex(p),
                                point: cc.v2(b[h].x * c, b[h].y * c),
                                normal: cc.v2(k[h]),
                                fraction: l[h]
                            })
                        }
                        return e
                    }
                    return []
                },
                syncPosition: function() {
                    for (var a = this._bodies, b = 0; b < a.length; b++) a[b].syncPosition()
                },
                syncRotation: function() {
                    for (var a = this._bodies, b = 0; b < a.length; b++) a[b].syncRotation()
                },
                _registerContactFixture: function(a) {
                    this._contactListener.registerContactFixture(a)
                },
                _unregisterContactFixture: function(a) {
                    this._contactListener.unregisterContactFixture(a)
                },
                _addBody: function(a, b) {
                    var c = this._world,
                        d = a.node;
                    c && d && (a._b2Body = c.CreateBody(b), a._b2Body.body = a, this._bodies.push(a))
                },
                _removeBody: function(a) {
                    var b = this._world;
                    b && (a._b2Body.body = null, b.DestroyBody(a._b2Body), a._b2Body = null, cc.js.array.remove(this._bodies, a))
                },
                _addJoint: function(a, b) {
                    if (b = this._world.CreateJoint(b)) b._joint = a, a._joint = b, this._joints.push(a)
                },
                _removeJoint: function(a) {
                    a._isValid() && this._world.DestroyJoint(a._joint);
                    a._joint && (a._joint._joint = null);
                    cc.js.array.remove(this._joints, a)
                },
                _initCallback: function() {
                    if (!this._world) cc.warn("Please init PhysicsManager first");
                    else if (!this._contactListener) {
                        var a = new cc.PhysicsContactListener;
                        a.setBeginContact(this._onBeginContact);
                        a.setEndContact(this._onEndContact);
                        a.setPreSolve(this._onPreSolve);
                        a.setPostSolve(this._onPostSolve);
                        this._world.SetContactListener(a);
                        this._contactListener = a;
                        this._aabbQueryCallback = new cc.PhysicsAABBQueryCallback;
                        this._raycastQueryCallback = new cc.PhysicsRayCastCallback
                    }
                },
                _init: function() {
                    this.enabled = !0;
                    this.debugDrawFlags = k.e_shapeBit
                },
                _getWorld: function() {
                    return this._world
                },
                _syncNode: function() {
                    for (var d =
                            this._bodies, f = 0, l = d.length; f < l; f++) {
                        var k = d[f],
                            n = k.node,
                            h = k._b2Body,
                            g = h.GetPosition();
                        v.x = g.x * c;
                        v.y = g.y * c;
                        h = h.GetAngle() * a;
                        null !== n.parent.parent && (v = n.parent.convertToNodeSpaceAR(v), h = b(n.parent, h));
                        g = n._eventMask;
                        n._eventMask = 0;
                        n.position = v;
                        n.angle = -h;
                        n._eventMask = g;
                        k.type === e.Animated && k.resetVelocity()
                    }
                },
                _onBeginContact: function(a) {
                    cc.PhysicsContact.get(a).emit(h.BEGIN_CONTACT)
                },
                _onEndContact: function(a) {
                    var b = a._contact;
                    b && (b.emit(h.END_CONTACT), cc.PhysicsContact.put(a))
                },
                _onPreSolve: function(a) {
                    (a =
                        a._contact) && a.emit(h.PRE_SOLVE)
                },
                _onPostSolve: function(a, b) {
                    if (a = a._contact) a._impulse = b, a.emit(h.POST_SOLVE), a._impulse = null
                },
                _checkDebugDrawValid: function() {
                    if (!this._debugDrawer || !this._debugDrawer.isValid) {
                        var a = new cc.Node("PHYSICS_MANAGER_DEBUG_DRAW");
                        a.zIndex = cc.macro.MAX_ZINDEX;
                        cc.game.addPersistRootNode(a);
                        this._debugDrawer = a.addComponent(cc.Graphics);
                        a = new l(this._debugDrawer);
                        a.SetFlags(this.debugDrawFlags);
                        this._world.SetDebugDraw(a)
                    }
                }
            });
        cc.js.getset(p.prototype, "enabled", function() {
                return this._enabled
            },
            function(a) {
                !1;
                if (a && !this._world) {
                    var b = new b2.World(new b2.Vec2(0, -10));
                    b.SetAllowSleeping(!0);
                    this._world = b;
                    this._initCallback()
                }
                this._enabled = a
            });
        cc.js.getset(p.prototype, "debugDrawFlags", function() {
            return this._debugDrawFlags
        }, function(a) {
            !1;
            a && !this._debugDrawFlags ? this._debugDrawer && this._debugDrawer.node && (this._debugDrawer.node.active = !0) : !a && this._debugDrawFlags && this._debugDrawer && this._debugDrawer.node && (this._debugDrawer.node.active = !1);
            a && (this._checkDebugDrawValid(), this._world.m_debugDraw.SetFlags(a));
            if (this._debugDrawFlags = a) this._checkDebugDrawValid(), this._world.m_debugDraw.SetFlags(a)
        });
        cc.js.getset(p.prototype, "gravity", function() {
            if (this._world) {
                var a = this._world.GetGravity();
                return cc.v2(a.x * c, a.y * c)
            }
            return cc.v2()
        }, function(a) {
            this._world && this._world.SetGravity(new b2.Vec2(a.x / c, a.y / c))
        });
        cc.PhysicsManager = q.exports = p
    }, {
        "./CCPhysicsTypes": 203,
        "./platform/CCPhysicsDebugDraw": 224,
        "./utils": 226
    }],
    203: [function(g, q, m) {
        g = cc.Enum({
            Static: 0,
            Kinematic: 1,
            Dynamic: 2,
            Animated: 3
        });
        cc.RigidBodyType =
            g;
        m = cc.Enum({
            Closest: 0,
            Any: 1,
            AllClosest: 2,
            All: 3
        });
        cc.RayCastType = m;
        q.exports = {
            BodyType: g,
            ContactType: {
                BEGIN_CONTACT: "begin-contact",
                END_CONTACT: "end-contact",
                PRE_SOLVE: "pre-solve",
                POST_SOLVE: "post-solve"
            },
            RayCastType: m,
            DrawBits: b2.DrawFlags,
            PTM_RATIO: 32,
            ANGLE_TO_PHYSICS_ANGLE: -Math.PI / 180,
            PHYSICS_ANGLE_TO_ANGLE: -180 / Math.PI
        }
    }, {}],
    204: [function(g, q, m) {
        function h(a, b) {
            var c = b.length;
            return b[0 > a ? c - -a % c : a % c]
        }

        function e(a, b, c) {
            for (var d = []; b < a;) b += c.length;
            for (; a <= b; ++a) d.push(h(a, c));
            return d
        }

        function d(g) {
            n(g);
            for (var p = [], t, u, w, A, B = null, y = null, C = 0, m = 0, G = 0; G < g.length; ++G)
                if (c(G, g)) {
                    u = w = Number.MAX_SAFE_INTEGER || 9999999999999;
                    for (var D = 0; D < g.length; ++D) a(h(G - 1, g), h(G, g), h(D, g)) && l(h(G - 1, g), h(G, g), h(D - 1, g)) && (A = v(h(G - 1, g), h(G, g), h(D, g), h(D - 1, g)), c(h(G + 1, g), h(G, g), A) && (t = f(h(G, g), A), t < u && (u = t, B = A, C = D))), a(h(G + 1, g), h(G, g), h(D + 1, g)) && l(h(G + 1, g), h(G, g), h(D, g)) && (A = v(h(G + 1, g), h(G, g), h(D, g), h(D + 1, g)), a(h(G - 1, g), h(G, g), A) && (t = f(h(G, g), A), t < w && (w = t, m = D, y = A)));
                    if (C == (m + 1) % g.length) D = B.add(y).div(2), m = e(G, m, g), m.push(D),
                        g = e(C, G, g), g.push(D);
                    else {
                        u = 0;
                        for (t = C; m < C;) m += g.length;
                        for (D = C; D <= m; ++D) k(G, D, g) && (C = 1 / (f(h(G, g), h(D, g)) + 1), c(D, g) ? l(h(D - 1, g), h(D, g), h(G, g)) && b(h(D + 1, g), h(D, g), h(G, g)) ? C += 3 : C += 2 : C += 1, C > u && (t = D, u = C));
                        m = e(G, t, g);
                        g = e(t, G, g)
                    }
                    p = p.concat(d(m));
                    return p = p.concat(d(g))
                }
            p.push(g);
            for (G = p.length - 1; 0 <= G; G--) 0 == p[G].length && p.splice(G, 0);
            return p
        }

        function k(a, d, f) {
            if (c(a, f)) {
                if (b(h(a, f), h(a - 1, f), h(d, f)) && l(h(a, f), h(a + 1, f), h(d, f))) return !1
            } else if (l(h(a, f), h(a + 1, f), h(d, f)) || b(h(a, f), h(a - 1, f), h(d, f))) return !1;
            if (c(d, f)) {
                if (b(h(d, f), h(d - 1, f), h(a, f)) && l(h(d, f), h(d + 1, f), h(a, f))) return !1
            } else if (l(h(d, f), h(d + 1, f), h(a, f)) || b(h(d, f), h(d - 1, f), h(a, f))) return !1;
            for (var k = 0; k < f.length; ++k)
                if ((k + 1) % f.length != a && k != a && (k + 1) % f.length != d && k != d) {
                    var e = cc.v2();
                    var n = h(a, f),
                        g = h(d, f),
                        p = h(k, f);
                    var t = h(k + 1, f);
                    if (n == p || n == t || g == p || g == t) e = !1;
                    else {
                        var u = n.x;
                        n = n.y;
                        var x = g.x;
                        g = g.y;
                        var v = p.x;
                        p = p.y;
                        var z = t.x;
                        var m = t.y;
                        Math.max(u, x) < Math.min(v, z) || Math.max(v, z) < Math.min(u, x) || Math.max(n, g) < Math.min(p, m) || Math.max(p, m) < Math.min(n,
                            g) ? e = !1 : (t = (m - p) * (x - u) - (z - v) * (g - n), 1E-6 > Math.abs(t) ? e = !1 : (z = ((z - v) * (n - p) - (m - p) * (u - v)) / t, t = ((x - u) * (n - p) - (g - n) * (u - v)) / t, 0 < z && 1 > z && 0 < t && 1 > t ? (e.x = u + z * (x - u), e.y = n + z * (g - n), e = !0) : e = !1))
                    }
                    if (e) return !1
                }
            return !0
        }

        function c(a, b, c) {
            if ("undefined" === typeof c) {
                c = a;
                var d = b;
                a = h(c - 1, d);
                b = h(c, d);
                c = h(c + 1, d)
            }
            return 0 > p(a, b, c)
        }

        function a(a, b, c) {
            return 0 < p(a, b, c)
        }

        function b(a, b, c) {
            return 0 <= p(a, b, c)
        }

        function l(a, b, c) {
            return 0 >= p(a, b, c)
        }

        function f(a, b) {
            var c = b.x - a.x;
            a = b.y - a.y;
            return c * c + a * a
        }

        function n(a) {
            u(a) || a.reverse()
        }

        function u(a) {
            if (3 > a.length) return !0;
            var b, c = 0;
            for (b = 0; b < a.length; b++) {
                var d = (b + 1) % a.length;
                c += a[b].x * a[d].y;
                c -= a[b].y * a[d].x
            }
            return 0 < c / 2
        }

        function v(a, b, c, d) {
            var f = cc.v2(),
                l = b.y - a.y;
            b = a.x - b.x;
            a = l * a.x + b * a.y;
            var k = d.y - c.y;
            d = c.x - d.x;
            c = k * c.x + d * c.y;
            var e = l * d - k * b;
            1E-6 >= Math.abs(e - 0) || (f.x = (d * a - b * c) / e, f.y = (l * c - k * a) / e);
            return f
        }

        function p(a, b, c) {
            return a.x * (b.y - c.y) + b.x * (c.y - a.y) + c.x * (a.y - b.y)
        }
        q.exports = {
            ConvexPartition: d,
            ForceCounterClockWise: n,
            IsCounterClockWise: u
        }
    }, {}],
    205: [function(g, q, m) {
        var h = g("../CCNode").EventType,
            e = g("./CCPhysicsTypes").PTM_RATIO,
            d = g("./CCPhysicsTypes").ANGLE_TO_PHYSICS_ANGLE,
            k = g("./CCPhysicsTypes").PHYSICS_ANGLE_TO_ANGLE,
            c = g("./utils").getWorldRotation,
            a = g("./CCPhysicsTypes").BodyType,
            b = new b2.Vec2,
            l = new b2.Vec2,
            f = cc.Vec2.ZERO;
        g = cc.Class({
            name: "cc.RigidBody",
            extends: cc.Component,
            editor: !1,
            properties: {
                _type: a.Dynamic,
                _allowSleep: !0,
                _gravityScale: 1,
                _linearDamping: 0,
                _angularDamping: 0,
                _linearVelocity: cc.v2(0, 0),
                _angularVelocity: 0,
                _fixedRotation: !1,
                enabled: {
                    get: function() {
                        return this._enabled
                    },
                    set: function() {
                        cc.warnID(8200)
                    },
                    visible: !1,
                    override: !0
                },
                enabledContactListener: {
                    default: !1,
                    tooltip: !1
                },
                bullet: {
                    default: !1,
                    tooltip: !1
                },
                type: {
                    type: a,
                    tooltip: !1,
                    get: function() {
                        return this._type
                    },
                    set: function(b) {
                        this._type = b;
                        this._b2Body && (b === a.Animated ? this._b2Body.SetType(a.Kinematic) : this._b2Body.SetType(b))
                    }
                },
                allowSleep: {
                    tooltip: !1,
                    get: function() {
                        return this._b2Body ? this._b2Body.IsSleepingAllowed() : this._allowSleep
                    },
                    set: function(a) {
                        this._allowSleep = a;
                        this._b2Body && this._b2Body.SetSleepingAllowed(a)
                    }
                },
                gravityScale: {
                    tooltip: !1,
                    get: function() {
                        return this._gravityScale
                    },
                    set: function(a) {
                        this._gravityScale = a;
                        this._b2Body && this._b2Body.SetGravityScale(a)
                    }
                },
                linearDamping: {
                    tooltip: !1,
                    get: function() {
                        return this._linearDamping
                    },
                    set: function(a) {
                        this._linearDamping = a;
                        this._b2Body && this._b2Body.SetLinearDamping(this._linearDamping)
                    }
                },
                angularDamping: {
                    tooltip: !1,
                    get: function() {
                        return this._angularDamping
                    },
                    set: function(a) {
                        this._angularDamping = a;
                        this._b2Body && this._b2Body.SetAngularDamping(a)
                    }
                },
                linearVelocity: {
                    tooltip: !1,
                    type: cc.Vec2,
                    get: function() {
                        var a = this._linearVelocity;
                        if (this._b2Body) {
                            var b = this._b2Body.GetLinearVelocity();
                            a.x = b.x * e;
                            a.y = b.y * e
                        }
                        return a
                    },
                    set: function(a) {
                        this._linearVelocity = a;
                        var b = this._b2Body;
                        if (b) {
                            var c = b.m_linearVelocity;
                            c.Set(a.x / e, a.y / e);
                            b.SetLinearVelocity(c)
                        }
                    }
                },
                angularVelocity: {
                    tooltip: !1,
                    get: function() {
                        return this._b2Body ? this._b2Body.GetAngularVelocity() * k : this._angularVelocity
                    },
                    set: function(a) {
                        this._angularVelocity = a;
                        this._b2Body && this._b2Body.SetAngularVelocity(a * d)
                    }
                },
                fixedRotation: {
                    tooltip: !1,
                    get: function() {
                        return this._fixedRotation
                    },
                    set: function(a) {
                        this._fixedRotation = a;
                        this._b2Body && this._b2Body.SetFixedRotation(a)
                    }
                },
                awake: {
                    visible: !1,
                    tooltip: !1,
                    get: function() {
                        return !!this._b2Body && this._b2Body.IsAwake()
                    },
                    set: function(a) {
                        this._b2Body && this._b2Body.SetAwake(a)
                    }
                },
                awakeOnLoad: {
                    default: !0,
                    tooltip: !1,
                    animatable: !1
                },
                active: {
                    visible: !1,
                    get: function() {
                        return !!this._b2Body && this._b2Body.IsActive()
                    },
                    set: function(a) {
                        this._b2Body && this._b2Body.SetActive(a)
                    }
                }
            },
            getLocalPoint: function(a, c) {
                c = c || cc.v2();
                this._b2Body && (b.Set(a.x / e, a.y / e), a = this._b2Body.GetLocalPoint(b, c), c.x = a.x * e, c.y = a.y * e);
                return c
            },
            getWorldPoint: function(a, c) {
                c = c || cc.v2();
                this._b2Body && (b.Set(a.x / e, a.y / e), a = this._b2Body.GetWorldPoint(b, c), c.x = a.x * e, c.y = a.y * e);
                return c
            },
            getWorldVector: function(a, c) {
                c = c || cc.v2();
                this._b2Body && (b.Set(a.x / e, a.y / e), a = this._b2Body.GetWorldVector(b, c), c.x = a.x * e, c.y = a.y * e);
                return c
            },
            getLocalVector: function(a, c) {
                c = c || cc.v2();
                this._b2Body && (b.Set(a.x / e, a.y / e), a = this._b2Body.GetLocalVector(b, c), c.x = a.x * e,
                    c.y = a.y * e);
                return c
            },
            getWorldPosition: function(a) {
                a = a || cc.v2();
                if (this._b2Body) {
                    var b = this._b2Body.GetPosition();
                    a.x = b.x * e;
                    a.y = b.y * e
                }
                return a
            },
            getWorldRotation: function() {
                return this._b2Body ? this._b2Body.GetAngle() * k : 0
            },
            getLocalCenter: function(a) {
                a = a || cc.v2();
                if (this._b2Body) {
                    var b = this._b2Body.GetLocalCenter();
                    a.x = b.x * e;
                    a.y = b.y * e
                }
                return a
            },
            getWorldCenter: function(a) {
                a = a || cc.v2();
                if (this._b2Body) {
                    var b = this._b2Body.GetWorldCenter();
                    a.x = b.x * e;
                    a.y = b.y * e
                }
                return a
            },
            getLinearVelocityFromWorldPoint: function(a,
                c) {
                c = c || cc.v2();
                this._b2Body && (b.Set(a.x / e, a.y / e), a = this._b2Body.GetLinearVelocityFromWorldPoint(b, c), c.x = a.x * e, c.y = a.y * e);
                return c
            },
            getMass: function() {
                return this._b2Body ? this._b2Body.GetMass() : 0
            },
            getInertia: function() {
                return this._b2Body ? this._b2Body.GetInertia() * e * e : 0
            },
            getJointList: function() {
                if (!this._b2Body) return [];
                var a = [],
                    b = this._b2Body.GetJointList();
                if (!b) return [];
                a.push(b.joint._joint);
                for (var c = b.prev; c;) a.push(c.joint._joint), c = c.prev;
                for (b = b.next; b;) a.push(b.joint._joint), b = b.next;
                return a
            },
            applyForce: function(a, c, d) {
                this._b2Body && (b.Set(a.x / e, a.y / e), l.Set(c.x / e, c.y / e), this._b2Body.ApplyForce(b, l, d))
            },
            applyForceToCenter: function(a, c) {
                this._b2Body && (b.Set(a.x / e, a.y / e), this._b2Body.ApplyForceToCenter(b, c))
            },
            applyTorque: function(a, b) {
                this._b2Body && this._b2Body.ApplyTorque(a / e, b)
            },
            applyLinearImpulse: function(a, c, d) {
                this._b2Body && (b.Set(a.x / e, a.y / e), l.Set(c.x / e, c.y / e), this._b2Body.ApplyLinearImpulse(b, l, d))
            },
            applyAngularImpulse: function(a, b) {
                this._b2Body && this._b2Body.ApplyAngularImpulse(a /
                    e / e, b)
            },
            syncPosition: function(b) {
                var c = this._b2Body;
                if (c) {
                    var d = this.node.convertToWorldSpaceAR(f);
                    var l = this.type === a.Animated ? c.GetLinearVelocity() : c.GetPosition();
                    l.x = d.x / e;
                    l.y = d.y / e;
                    this.type === a.Animated && b ? (b = c.GetPosition(), d = cc.game.config.frameRate, l.x = (l.x - b.x) * d, l.y = (l.y - b.y) * d, c.SetAwake(!0), c.SetLinearVelocity(l)) : c.SetTransformVec(l, c.GetAngle())
                }
            },
            syncRotation: function(b) {
                var f = this._b2Body;
                if (f) {
                    var l = d * c(this.node);
                    if (this.type === a.Animated && b) {
                        b = f.GetAngle();
                        var k = cc.game.config.frameRate;
                        f.SetAwake(!0);
                        f.SetAngularVelocity((l - b) * k)
                    } else f.SetTransformVec(f.GetPosition(), l)
                }
            },
            resetVelocity: function() {
                var a = this._b2Body;
                if (a) {
                    var b = a.m_linearVelocity;
                    b.Set(0, 0);
                    a.SetLinearVelocity(b);
                    a.SetAngularVelocity(0)
                }
            },
            onEnable: function() {
                this._init()
            },
            onDisable: function() {
                this._destroy()
            },
            _registerNodeEvents: function() {
                var a = this.node;
                a.on(h.POSITION_CHANGED, this._onNodePositionChanged, this);
                a.on(h.ROTATION_CHANGED, this._onNodeRotationChanged, this);
                a.on(h.SCALE_CHANGED, this._onNodeScaleChanged,
                    this)
            },
            _unregisterNodeEvents: function() {
                var a = this.node;
                a.off(h.POSITION_CHANGED, this._onNodePositionChanged, this);
                a.off(h.ROTATION_CHANGED, this._onNodeRotationChanged, this);
                a.off(h.SCALE_CHANGED, this._onNodeScaleChanged, this)
            },
            _onNodePositionChanged: function() {
                this.syncPosition(!0)
            },
            _onNodeRotationChanged: function(a) {
                this.syncRotation(!0)
            },
            _onNodeScaleChanged: function(a) {
                if (this._b2Body) {
                    a = this.getComponents(cc.PhysicsCollider);
                    for (var b = 0; b < a.length; b++) a[b].apply()
                }
            },
            _init: function() {
                cc.director.getPhysicsManager().pushDelayEvent(this,
                    "__init", [])
            },
            _destroy: function() {
                cc.director.getPhysicsManager().pushDelayEvent(this, "__destroy", [])
            },
            __init: function() {
                if (!this._inited) {
                    this._registerNodeEvents();
                    var b = new b2.BodyDef;
                    this.type === a.Animated ? b.type = a.Kinematic : b.type = this.type;
                    b.allowSleep = this.allowSleep;
                    b.gravityScale = this.gravityScale;
                    b.linearDamping = this.linearDamping;
                    b.angularDamping = this.angularDamping;
                    var l = this.linearVelocity;
                    b.linearVelocity = new b2.Vec2(l.x / e, l.y / e);
                    b.angularVelocity = this.angularVelocity * d;
                    b.fixedRotation =
                        this.fixedRotation;
                    b.bullet = this.bullet;
                    l = this.node;
                    var k = l.convertToWorldSpaceAR(f);
                    b.position = new b2.Vec2(k.x / e, k.y / e);
                    b.angle = -Math.PI / 180 * c(l);
                    b.awake = this.awakeOnLoad;
                    cc.director.getPhysicsManager()._addBody(this, b);
                    this._inited = !0
                }
            },
            __destroy: function() {
                this._inited && (cc.director.getPhysicsManager()._removeBody(this), this._unregisterNodeEvents(), this._inited = !1)
            },
            _getBody: function() {
                return this._b2Body
            }
        });
        cc.RigidBody = q.exports = g
    }, {
        "../CCNode": 61,
        "./CCPhysicsTypes": 203,
        "./utils": 226
    }],
    206: [function(g,
        q, m) {
        g = g("../../../external/box2d/box2d");
        window.b2 = {};
        for (var h in g) - 1 === h.indexOf("b2_") && (q = h.replace("b2", ""), b2[q] = g[h]);
        b2.maxPolygonVertices = 8
    }, {
        "../../../external/box2d/box2d": 400
    }],
    207: [function(g, q, m) {
        var h = g("../CCPhysicsTypes").PTM_RATIO;
        g = cc.Class({
            name: "cc.PhysicsBoxCollider",
            extends: cc.PhysicsCollider,
            mixins: [cc.Collider.Box],
            editor: {
                menu: !1,
                help: "i18n:COMPONENT.help_url.edit-collider-component",
                requireComponent: cc.RigidBody
            },
            _createShape: function(e) {
                var d = Math.abs(e.x),
                    k = Math.abs(e.y);
                e = this.size.width / 2 / h * d;
                var c = this.size.height / 2 / h * k;
                d *= this.offset.x / h;
                k *= this.offset.y / h;
                var a = new b2.PolygonShape;
                a.SetAsBox(e, c, new b2.Vec2(d, k), 0);
                return a
            }
        });
        cc.PhysicsBoxCollider = q.exports = g
    }, {
        "../CCPhysicsTypes": 203
    }],
    208: [function(g, q, m) {
        var h = g("../CCPhysicsTypes").PTM_RATIO;
        g = cc.Class({
            name: "cc.PhysicsChainCollider",
            extends: cc.PhysicsCollider,
            editor: {
                menu: !1,
                inspector: !1,
                help: "i18n:COMPONENT.help_url.edit-collider-component",
                requireComponent: cc.RigidBody
            },
            properties: {
                loop: !1,
                points: {
                    default: function() {
                        return [cc.v2(-50,
                            0), cc.v2(50, 0)]
                    },
                    type: [cc.Vec2]
                },
                threshold: {
                    default: 1,
                    serializable: !1,
                    visible: !1
                }
            },
            _createShape: function(e) {
                for (var d = new b2.ChainShape, k = this.points, c = [], a = 0; a < k.length; a++) {
                    var b = k[a];
                    c.push(new b2.Vec2(b.x / h * e.x, b.y / h * e.y))
                }
                this.loop ? d.CreateLoop(c, c.length) : d.CreateChain(c, c.length);
                return d
            },
            resetInEditor: !1,
            resetPointsByContour: !1
        });
        cc.PhysicsChainCollider = q.exports = g
    }, {
        "../CCPhysicsTypes": 203
    }],
    209: [function(g, q, m) {
        var h = g("../CCPhysicsTypes").PTM_RATIO;
        g = cc.Class({
            name: "cc.PhysicsCircleCollider",
            extends: cc.PhysicsCollider,
            mixins: [cc.Collider.Circle],
            editor: {
                menu: !1,
                help: "i18n:COMPONENT.help_url.edit-collider-component",
                requireComponent: cc.RigidBody
            },
            _createShape: function(e) {
                var d = Math.abs(e.x),
                    k = this.offset.x / h * d;
                e = this.offset.y / h * Math.abs(e.y);
                var c = new b2.CircleShape;
                c.m_radius = this.radius / h * d;
                c.m_p = new b2.Vec2(k, e);
                return c
            }
        });
        cc.PhysicsCircleCollider = q.exports = g
    }, {
        "../CCPhysicsTypes": 203
    }],
    210: [function(g, q, m) {
        var h = g("../CCPhysicsTypes").PTM_RATIO,
            e = g("../utils").getWorldScale,
            d = new b2.AABB;
        g = cc.Class({
            name: "cc.PhysicsCollider",
            extends: cc.Collider,
            ctor: function() {
                this._fixtures = [];
                this._shapes = [];
                this._inited = !1;
                this._rect = cc.rect()
            },
            properties: {
                _density: 1,
                _sensor: !1,
                _friction: .2,
                _restitution: 0,
                density: {
                    tooltip: !1,
                    get: function() {
                        return this._density
                    },
                    set: function(d) {
                        this._density = d
                    }
                },
                sensor: {
                    tooltip: !1,
                    get: function() {
                        return this._sensor
                    },
                    set: function(d) {
                        this._sensor = d
                    }
                },
                friction: {
                    tooltip: !1,
                    get: function() {
                        return this._friction
                    },
                    set: function(d) {
                        this._friction = d
                    }
                },
                restitution: {
                    tooltip: !1,
                    get: function() {
                        return this._restitution
                    },
                    set: function(d) {
                        this._restitution = d
                    }
                },
                body: {
                    default: null,
                    type: cc.RigidBody,
                    visible: !1
                }
            },
            onDisable: function() {
                this._destroy()
            },
            onEnable: function() {
                this._init()
            },
            start: function() {
                this._init()
            },
            _getFixtureIndex: function(d) {
                return this._fixtures.indexOf(d)
            },
            _init: function() {
                cc.director.getPhysicsManager().pushDelayEvent(this, "__init", [])
            },
            _destroy: function() {
                cc.director.getPhysicsManager().pushDelayEvent(this, "__destroy", [])
            },
            __init: function() {
                if (!this._inited) {
                    var d =
                        this.body || this.getComponent(cc.RigidBody);
                    if (d) {
                        var c = d._getBody();
                        if (c) {
                            var a = d.node,
                                b = e(a);
                            this._scale = b;
                            b = 0 === b.x && 0 === b.y ? [] : this._createShape(b);
                            b instanceof Array || (b = [b]);
                            var l = 1 << a.groupIndex,
                                f = 0;
                            a = cc.game.collisionMatrix[a.groupIndex];
                            for (var h = 0; h < a.length; h++) a[h] && (f |= 1 << h);
                            l = {
                                categoryBits: l,
                                maskBits: f,
                                groupIndex: 0
                            };
                            f = cc.director.getPhysicsManager();
                            for (a = 0; a < b.length; a++) {
                                h = b[a];
                                var g = new b2.FixtureDef;
                                g.density = this.density;
                                g.isSensor = this.sensor;
                                g.friction = this.friction;
                                g.restitution =
                                    this.restitution;
                                g.shape = h;
                                g.filter = l;
                                g = c.CreateFixture(g);
                                g.collider = this;
                                d.enabledContactListener && f._registerContactFixture(g);
                                this._shapes.push(h);
                                this._fixtures.push(g)
                            }
                            this.body = d;
                            this._inited = !0
                        }
                    }
                }
            },
            __destroy: function() {
                if (this._inited) {
                    for (var d = this._fixtures, c = this.body._getBody(), a = cc.director.getPhysicsManager(), b = d.length - 1; 0 <= b; b--) {
                        var l = d[b];
                        l.collider = null;
                        a._unregisterContactFixture(l);
                        c && c.DestroyFixture(l)
                    }
                    this.body = null;
                    this._fixtures.length = 0;
                    this._shapes.length = 0;
                    this._inited = !1
                }
            },
            _createShape: function() {},
            apply: function() {
                this._destroy();
                this._init()
            },
            getAABB: function() {
                for (var k = 1E7, c = 1E7, a = -1E7, b = -1E7, l = this.body._getBody().GetTransform(), f = this._fixtures, e = 0; e < f.length; e++)
                    for (var g = f[e].GetShape(), v = g.GetChildCount(), p = 0; p < v; p++) g.ComputeAABB(d, l, p), d.lowerBound.x < k && (k = d.lowerBound.x), d.lowerBound.y < c && (c = d.lowerBound.y), d.upperBound.x > a && (a = d.upperBound.x), d.upperBound.y > b && (b = d.upperBound.y);
                k *= h;
                c *= h;
                a *= h;
                b *= h;
                l = this._rect;
                l.x = k;
                l.y = c;
                l.width = a - k;
                l.height = b - c;
                return l
            }
        });
        cc.PhysicsCollider = q.exports = g
    }, {
        "../CCPhysicsTypes": 203,
        "../utils": 226
    }],
    211: [function(g, q, m) {
        var h = g("../CCPhysicsTypes").PTM_RATIO,
            e = g("../CCPolygonSeparator");
        g = cc.Class({
            name: "cc.PhysicsPolygonCollider",
            extends: cc.PhysicsCollider,
            mixins: [cc.Collider.Polygon],
            editor: {
                menu: !1,
                inspector: !1,
                help: "i18n:COMPONENT.help_url.edit-collider-component",
                requireComponent: cc.RigidBody
            },
            _createShape: function(d) {
                var k = [],
                    c = this.points;
                0 < c.length && c[0].equals(c[c.length - 1]) && --c.length;
                c = e.ConvexPartition(c);
                for (var a = this.offset, b = 0; b < c.length; b++) {
                    for (var l = c[b], f = null, n = [], g = null, v = 0, p = l.length; v < p; v++) {
                        f || (f = new b2.PolygonShape);
                        var t = l[v];
                        t = new b2.Vec2((t.x + a.x) / h * d.x, (t.y + a.y) / h * d.y);
                        n.push(t);
                        g || (g = t);
                        n.length === b2.maxPolygonVertices && (f.Set(n, n.length), k.push(f), f = null, v < p - 1 && (n = [g, n[n.length - 1]]))
                    }
                    f && (f.Set(n, n.length), k.push(f))
                }
                return k
            }
        });
        cc.PhysicsPolygonCollider = q.exports = g
    }, {
        "../CCPhysicsTypes": 203,
        "../CCPolygonSeparator": 204
    }],
    212: [function(g, q, m) {
        g("./box2d-adapter");
        g("./CCPhysicsManager");
        g("./CCRigidBody");
        g("./CCPhysicsContact");
        g("./collider/CCPhysicsCollider");
        g("./collider/CCPhysicsChainCollider");
        g("./collider/CCPhysicsCircleCollider");
        g("./collider/CCPhysicsBoxCollider");
        g("./collider/CCPhysicsPolygonCollider");
        g("./joint/CCJoint");
        g("./joint/CCDistanceJoint");
        g("./joint/CCRevoluteJoint");
        g("./joint/CCMouseJoint");
        g("./joint/CCMotorJoint");
        g("./joint/CCPrismaticJoint");
        g("./joint/CCWeldJoint");
        g("./joint/CCWheelJoint");
        g("./joint/CCRopeJoint");
        g("./platform/CCPhysicsContactListner");
        g("./platform/CCPhysicsAABBQueryCallback");
        g("./platform/CCPhysicsRayCastCallback")
    }, {
        "./CCPhysicsContact": 201,
        "./CCPhysicsManager": 202,
        "./CCRigidBody": 205,
        "./box2d-adapter": 206,
        "./collider/CCPhysicsBoxCollider": 207,
        "./collider/CCPhysicsChainCollider": 208,
        "./collider/CCPhysicsCircleCollider": 209,
        "./collider/CCPhysicsCollider": 210,
        "./collider/CCPhysicsPolygonCollider": 211,
        "./joint/CCDistanceJoint": 213,
        "./joint/CCJoint": 214,
        "./joint/CCMotorJoint": 215,
        "./joint/CCMouseJoint": 216,
        "./joint/CCPrismaticJoint": 217,
        "./joint/CCRevoluteJoint": 218,
        "./joint/CCRopeJoint": 219,
        "./joint/CCWeldJoint": 220,
        "./joint/CCWheelJoint": 221,
        "./platform/CCPhysicsAABBQueryCallback": 222,
        "./platform/CCPhysicsContactListner": 223,
        "./platform/CCPhysicsRayCastCallback": 225
    }],
    213: [function(g, q, m) {
        var h = g("../CCPhysicsTypes").PTM_RATIO;
        g = cc.Class({
            name: "cc.DistanceJoint",
            extends: cc.Joint,
            editor: !1,
            properties: {
                _distance: 1,
                _frequency: 0,
                _dampingRatio: 0,
                distance: {
                    tooltip: !1,
                    get: function() {
                        return this._distance
                    },
                    set: function(e) {
                        this._distance =
                            e;
                        this._joint && this._joint.SetLength(e)
                    }
                },
                frequency: {
                    tooltip: !1,
                    get: function() {
                        return this._frequency
                    },
                    set: function(e) {
                        this._frequency = e;
                        this._joint && this._joint.SetFrequency(e)
                    }
                },
                dampingRatio: {
                    tooltip: !1,
                    get: function() {
                        return this._dampingRatio
                    },
                    set: function(e) {
                        this._dampingRatio = e;
                        this._joint && this._joint.SetDampingRatio(e)
                    }
                }
            },
            _createJointDef: function() {
                var e = new b2.DistanceJointDef;
                e.localAnchorA = new b2.Vec2(this.anchor.x / h, this.anchor.y / h);
                e.localAnchorB = new b2.Vec2(this.connectedAnchor.x / h, this.connectedAnchor.y /
                    h);
                e.length = this.distance / h;
                e.dampingRatio = this.dampingRatio;
                e.frequencyHz = this.frequency;
                return e
            }
        });
        cc.DistanceJoint = q.exports = g
    }, {
        "../CCPhysicsTypes": 203
    }],
    214: [function(g, q, m) {
        var h = g("../CCPhysicsTypes").PTM_RATIO;
        g = cc.Class({
            name: "cc.Joint",
            extends: cc.Component,
            editor: {
                requireComponent: cc.RigidBody
            },
            properties: {
                anchor: {
                    default: cc.v2(0, 0),
                    tooltip: !1
                },
                connectedAnchor: {
                    default: cc.v2(0, 0),
                    tooltip: !1
                },
                connectedBody: {
                    default: null,
                    type: cc.RigidBody,
                    tooltip: !1
                },
                collideConnected: {
                    default: !1,
                    tooltip: !1
                }
            },
            onDisable: function() {
                this._destroy()
            },
            onEnable: function() {
                this._init()
            },
            start: function() {
                this._init()
            },
            apply: function() {
                this._destroy();
                this._init()
            },
            getWorldAnchor: function() {
                if (this._joint) {
                    var e = this._joint.GetAnchorA();
                    return cc.v2(e.x * h, e.y * h)
                }
                return cc.Vec2.ZERO
            },
            getWorldConnectedAnchor: function() {
                if (this._joint) {
                    var e = this._joint.GetAnchorB();
                    return cc.v2(e.x * h, e.y * h)
                }
                return cc.Vec2.ZERO
            },
            getReactionForce: function(e) {
                var d = cc.v2();
                return this._joint ? this._joint.GetReactionForce(e, d) : d
            },
            getReactionTorque: function(e) {
                return this._joint ?
                    this._joint.GetReactionTorque(e) : 0
            },
            _init: function() {
                cc.director.getPhysicsManager().pushDelayEvent(this, "__init", [])
            },
            _destroy: function() {
                cc.director.getPhysicsManager().pushDelayEvent(this, "__destroy", [])
            },
            __init: function() {
                if (!this._inited && (this.body = this.getComponent(cc.RigidBody), this._isValid())) {
                    var e = this._createJointDef();
                    e && (e.bodyA = this.body._getBody(), e.bodyB = this.connectedBody._getBody(), e.collideConnected = this.collideConnected, cc.director.getPhysicsManager()._addJoint(this, e), this._inited = !0)
                }
            },
            __destroy: function() {
                this._inited && (cc.director.getPhysicsManager()._removeJoint(this), this._joint = null, this._inited = !1)
            },
            _createJointDef: function() {
                return null
            },
            _isValid: function() {
                return this.body && this.body._getBody() && this.connectedBody && this.connectedBody._getBody()
            }
        });
        cc.Joint = q.exports = g
    }, {
        "../CCPhysicsTypes": 203
    }],
    215: [function(g, q, m) {
        var h = g("../CCPhysicsTypes").PTM_RATIO,
            e = g("../CCPhysicsTypes").ANGLE_TO_PHYSICS_ANGLE;
        g = cc.Class({
            name: "cc.MotorJoint",
            extends: cc.Joint,
            editor: !1,
            properties: {
                _linearOffset: cc.v2(0,
                    0),
                _angularOffset: 0,
                _maxForce: 1,
                _maxTorque: 1,
                _correctionFactor: .3,
                anchor: {
                    tooltip: !1,
                    default: cc.v2(0, 0),
                    override: !0,
                    visible: !1
                },
                connectedAnchor: {
                    tooltip: !1,
                    default: cc.v2(0, 0),
                    override: !0,
                    visible: !1
                },
                linearOffset: {
                    tooltip: !1,
                    get: function() {
                        return this._linearOffset
                    },
                    set: function(d) {
                        this._linearOffset = d;
                        this._joint && this._joint.SetLinearOffset(new b2.Vec2(d.x / h, d.y / h))
                    }
                },
                angularOffset: {
                    tooltip: !1,
                    get: function() {
                        return this._angularOffset
                    },
                    set: function(d) {
                        this._angularOffset = d;
                        this._joint && this._joint.SetAngularOffset(d)
                    }
                },
                maxForce: {
                    tooltip: !1,
                    get: function() {
                        return this._maxForce
                    },
                    set: function(d) {
                        this._maxForce = d;
                        this._joint && this._joint.SetMaxForce(d)
                    }
                },
                maxTorque: {
                    tooltip: !1,
                    get: function() {
                        return this._maxTorque
                    },
                    set: function(d) {
                        this._maxTorque = d;
                        this._joint && this._joint.SetMaxTorque(d)
                    }
                },
                correctionFactor: {
                    tooltip: !1,
                    get: function() {
                        return this._correctionFactor
                    },
                    set: function(d) {
                        this._correctionFactor = d;
                        this._joint && this._joint.SetCorrectionFactor(d)
                    }
                }
            },
            _createJointDef: function() {
                var d = new b2.MotorJointDef;
                d.linearOffset =
                    new b2.Vec2(this.linearOffset.x / h, this.linearOffset.y / h);
                d.angularOffset = this.angularOffset * e;
                d.maxForce = this.maxForce;
                d.maxTorque = this.maxTorque;
                d.correctionFactor = this.correctionFactor;
                return d
            }
        });
        cc.MotorJoint = q.exports = g
    }, {
        "../CCPhysicsTypes": 203
    }],
    216: [function(g, q, m) {
        var h = g("../CCPhysicsTypes").PTM_RATIO,
            e = new b2.Vec2;
        g = cc.Class({
            name: "cc.MouseJoint",
            extends: cc.Joint,
            editor: !1,
            properties: {
                _target: 1,
                _frequency: 5,
                _dampingRatio: .7,
                _maxForce: 0,
                connectedBody: {
                    default: null,
                    type: cc.RigidBody,
                    visible: !1,
                    override: !0
                },
                collideConnected: {
                    default: !0,
                    visible: !1,
                    override: !0
                },
                anchor: {
                    tooltip: !1,
                    default: cc.v2(0, 0),
                    override: !0,
                    visible: !1
                },
                connectedAnchor: {
                    tooltip: !1,
                    default: cc.v2(0, 0),
                    override: !0,
                    visible: !1
                },
                mouseRegion: {
                    tooltip: !1,
                    default: null,
                    type: cc.Node
                },
                target: {
                    tooltip: !1,
                    visible: !1,
                    get: function() {
                        return this._target
                    },
                    set: function(d) {
                        this._target = d;
                        this._joint && (e.x = d.x / h, e.y = d.y / h, this._joint.SetTarget(e))
                    }
                },
                frequency: {
                    tooltip: !1,
                    get: function() {
                        return this._frequency
                    },
                    set: function(d) {
                        this._frequency =
                            d;
                        this._joint && this._joint.SetFrequency(d)
                    }
                },
                dampingRatio: {
                    tooltip: !1,
                    get: function() {
                        return this._dampingRatio
                    },
                    set: function(d) {
                        this._dampingRatio = d;
                        this._joint && this._joint.SetDampingRatio(d)
                    }
                },
                maxForce: {
                    tooltip: !1,
                    visible: !1,
                    get: function() {
                        return this._maxForce
                    },
                    set: function(d) {
                        this._maxForce = d;
                        this._joint && this._joint.SetMaxForce(d)
                    }
                }
            },
            onLoad: function() {
                var d = this.mouseRegion || this.node;
                d.on(cc.Node.EventType.TOUCH_START, this.onTouchBegan, this);
                d.on(cc.Node.EventType.TOUCH_MOVE, this.onTouchMove,
                    this);
                d.on(cc.Node.EventType.TOUCH_END, this.onTouchEnd, this);
                d.on(cc.Node.EventType.TOUCH_CANCEL, this.onTouchEnd, this)
            },
            onEnable: function() {},
            start: function() {},
            onTouchBegan: function(d) {
                var k = cc.director.getPhysicsManager();
                d = this._pressPoint = d.touch.getLocation();
                cc.Camera && cc.Camera.main && (d = cc.Camera.main.getScreenToWorldPoint(d));
                if (k = k.testPoint(d))(this.connectedBody = k.body).awake = !0, this.maxForce = 1E3 * this.connectedBody.getMass(), this.target = d, this._init()
            },
            onTouchMove: function(d) {
                this._pressPoint =
                    d.touch.getLocation()
            },
            onTouchEnd: function(d) {
                this._destroy();
                this._pressPoint = null
            },
            _createJointDef: function() {
                var d = new b2.MouseJointDef;
                e.x = this.target.x / h;
                e.y = this.target.y / h;
                d.target = e;
                d.maxForce = this.maxForce;
                d.dampingRatio = this.dampingRatio;
                d.frequencyHz = this.frequency;
                return d
            },
            update: function() {
                if (this._pressPoint && this._isValid()) {
                    var d = cc.Camera.findCamera(this.node);
                    this.target = d ? d.getScreenToWorldPoint(this._pressPoint) : this._pressPoint
                }
            }
        });
        cc.MouseJoint = q.exports = g
    }, {
        "../CCPhysicsTypes": 203
    }],
    217: [function(g, q, m) {
        var h = g("../CCPhysicsTypes").PTM_RATIO,
            e = g("../CCPhysicsTypes").ANGLE_TO_PHYSICS_ANGLE;
        g = cc.Class({
            name: "cc.PrismaticJoint",
            extends: cc.Joint,
            editor: !1,
            properties: {
                localAxisA: {
                    default: cc.v2(1, 0),
                    tooltip: !1
                },
                referenceAngle: {
                    default: 0,
                    tooltip: !1
                },
                enableLimit: {
                    default: !1,
                    tooltip: !1
                },
                enableMotor: {
                    default: !1,
                    tooltip: !1
                },
                lowerLimit: {
                    default: 0,
                    tooltip: !1
                },
                upperLimit: {
                    default: 0,
                    tooltip: !1
                },
                _maxMotorForce: 0,
                _motorSpeed: 0,
                maxMotorForce: {
                    tooltip: !1,
                    get: function() {
                        return this._maxMotorForce
                    },
                    set: function(d) {
                        this._maxMotorForce = d;
                        this._joint && this._joint.SetMaxMotorForce(d)
                    }
                },
                motorSpeed: {
                    tooltip: !1,
                    get: function() {
                        return this._motorSpeed
                    },
                    set: function(d) {
                        this._motorSpeed = d;
                        this._joint && this._joint.SetMotorSpeed(d)
                    }
                }
            },
            _createJointDef: function() {
                var d = new b2.PrismaticJointDef;
                d.localAnchorA = new b2.Vec2(this.anchor.x / h, this.anchor.y / h);
                d.localAnchorB = new b2.Vec2(this.connectedAnchor.x / h, this.connectedAnchor.y / h);
                d.localAxisA = new b2.Vec2(this.localAxisA.x, this.localAxisA.y);
                d.referenceAngle =
                    this.referenceAngle * e;
                d.enableLimit = this.enableLimit;
                d.lowerTranslation = this.lowerLimit / h;
                d.upperTranslation = this.upperLimit / h;
                d.enableMotor = this.enableMotor;
                d.maxMotorForce = this.maxMotorForce;
                d.motorSpeed = this.motorSpeed;
                return d
            }
        });
        cc.PrismaticJoint = q.exports = g
    }, {
        "../CCPhysicsTypes": 203
    }],
    218: [function(g, q, m) {
        var h = g("../CCPhysicsTypes").PTM_RATIO,
            e = g("../CCPhysicsTypes").ANGLE_TO_PHYSICS_ANGLE,
            d = g("../CCPhysicsTypes").PHYSICS_ANGLE_TO_ANGLE;
        g = cc.Class({
            name: "cc.RevoluteJoint",
            extends: cc.Joint,
            editor: !1,
            properties: {
                _maxMotorTorque: 0,
                _motorSpeed: 0,
                _enableLimit: !1,
                _enableMotor: !1,
                referenceAngle: {
                    default: 0,
                    tooltip: !1
                },
                lowerAngle: {
                    default: 0,
                    tooltip: !1
                },
                upperAngle: {
                    default: 0,
                    tooltip: !1
                },
                maxMotorTorque: {
                    tooltip: !1,
                    get: function() {
                        return this._maxMotorTorque
                    },
                    set: function(d) {
                        this._maxMotorTorque = d;
                        this._joint && this._joint.SetMaxMotorTorque(d)
                    }
                },
                motorSpeed: {
                    tooltip: !1,
                    get: function() {
                        return this._motorSpeed
                    },
                    set: function(d) {
                        this._motorSpeed = d;
                        this._joint && this._joint.SetMotorSpeed(d * e)
                    }
                },
                enableLimit: {
                    tooltip: !1,
                    get: function() {
                        return this._enableLimit
                    },
                    set: function(d) {
                        this._enableLimit = d;
                        this._joint && this._joint.EnableLimit(d)
                    }
                },
                enableMotor: {
                    tooltip: !1,
                    get: function() {
                        return this._enableMotor
                    },
                    set: function(d) {
                        this._enableMotor = d;
                        this._joint && this._joint.EnableMotor(d)
                    }
                }
            },
            getJointAngle: function() {
                return this._joint ? this._joint.GetJointAngle() * d : 0
            },
            setLimits: function(d, c) {
                if (this._joint) return this._joint.SetLimits(d * e, c * e)
            },
            _createJointDef: function() {
                var d = new b2.RevoluteJointDef;
                d.localAnchorA = new b2.Vec2(this.anchor.x /
                    h, this.anchor.y / h);
                d.localAnchorB = new b2.Vec2(this.connectedAnchor.x / h, this.connectedAnchor.y / h);
                d.lowerAngle = this.upperAngle * e;
                d.upperAngle = this.lowerAngle * e;
                d.maxMotorTorque = this.maxMotorTorque;
                d.motorSpeed = this.motorSpeed * e;
                d.enableLimit = this.enableLimit;
                d.enableMotor = this.enableMotor;
                d.referenceAngle = this.referenceAngle * e;
                return d
            }
        });
        cc.RevoluteJoint = q.exports = g
    }, {
        "../CCPhysicsTypes": 203
    }],
    219: [function(g, q, m) {
        var h = g("../CCPhysicsTypes").PTM_RATIO;
        g = cc.Class({
            name: "cc.RopeJoint",
            extends: cc.Joint,
            editor: !1,
            properties: {
                _maxLength: 1,
                maxLength: {
                    tooltip: !1,
                    get: function() {
                        return this._maxLength
                    },
                    set: function(e) {
                        this._maxLength = e;
                        this._joint && this._joint.SetMaxLength(e)
                    }
                }
            },
            _createJointDef: function() {
                var e = new b2.RopeJointDef;
                e.localAnchorA = new b2.Vec2(this.anchor.x / h, this.anchor.y / h);
                e.localAnchorB = new b2.Vec2(this.connectedAnchor.x / h, this.connectedAnchor.y / h);
                e.maxLength = this.maxLength / h;
                return e
            }
        });
        cc.RopeJoint = q.exports = g
    }, {
        "../CCPhysicsTypes": 203
    }],
    220: [function(g, q, m) {
        var h = g("../CCPhysicsTypes").PTM_RATIO,
            e = g("../CCPhysicsTypes").ANGLE_TO_PHYSICS_ANGLE;
        g = cc.Class({
            name: "cc.WeldJoint",
            extends: cc.Joint,
            editor: !1,
            properties: {
                referenceAngle: {
                    default: 0,
                    tooltip: !1
                },
                _frequency: 0,
                _dampingRatio: 0,
                frequency: {
                    tooltip: !1,
                    get: function() {
                        return this._frequency
                    },
                    set: function(d) {
                        this._frequency = d;
                        this._joint && this._joint.SetFrequency(d)
                    }
                },
                dampingRatio: {
                    tooltip: !1,
                    get: function() {
                        return this._dampingRatio
                    },
                    set: function(d) {
                        this._dampingRatio = d;
                        this._joint && this._joint.SetDampingRatio(d)
                    }
                }
            },
            _createJointDef: function() {
                var d =
                    new b2.WeldJointDef;
                d.localAnchorA = new b2.Vec2(this.anchor.x / h, this.anchor.y / h);
                d.localAnchorB = new b2.Vec2(this.connectedAnchor.x / h, this.connectedAnchor.y / h);
                d.referenceAngle = this.referenceAngle * e;
                d.frequencyHz = this.frequency;
                d.dampingRatio = this.dampingRatio;
                return d
            }
        });
        cc.WeldJoint = q.exports = g
    }, {
        "../CCPhysicsTypes": 203
    }],
    221: [function(g, q, m) {
        var h = g("../CCPhysicsTypes").PTM_RATIO,
            e = g("../CCPhysicsTypes").ANGLE_TO_PHYSICS_ANGLE;
        g = cc.Class({
            name: "cc.WheelJoint",
            extends: cc.Joint,
            editor: !1,
            properties: {
                _maxMotorTorque: 0,
                _motorSpeed: 0,
                _enableMotor: !1,
                _frequency: 2,
                _dampingRatio: .7,
                localAxisA: {
                    default: cc.v2(1, 0),
                    tooltip: !1
                },
                maxMotorTorque: {
                    tooltip: !1,
                    get: function() {
                        return this._maxMotorTorque
                    },
                    set: function(d) {
                        this._maxMotorTorque = d;
                        this._joint && this._joint.SetMaxMotorTorque(d)
                    }
                },
                motorSpeed: {
                    tooltip: !1,
                    get: function() {
                        return this._motorSpeed
                    },
                    set: function(d) {
                        this._motorSpeed = d;
                        this._joint && this._joint.SetMotorSpeed(d * e)
                    }
                },
                enableMotor: {
                    tooltip: !1,
                    get: function() {
                        return this._enableMotor
                    },
                    set: function(d) {
                        this._enableMotor =
                            d;
                        this._joint && this._joint.EnableMotor(d)
                    }
                },
                frequency: {
                    tooltip: !1,
                    get: function() {
                        return this._frequency
                    },
                    set: function(d) {
                        this._frequency = d;
                        this._joint && this._joint.SetSpringFrequencyHz(d)
                    }
                },
                dampingRatio: {
                    tooltip: !1,
                    get: function() {
                        return this._dampingRatio
                    },
                    set: function(d) {
                        this._dampingRatio = d;
                        this._joint && this._joint.SetDampingRatio(d)
                    }
                }
            },
            _createJointDef: function() {
                var d = new b2.WheelJointDef;
                d.localAnchorA = new b2.Vec2(this.anchor.x / h, this.anchor.y / h);
                d.localAnchorB = new b2.Vec2(this.connectedAnchor.x /
                    h, this.connectedAnchor.y / h);
                d.localAxisA = new b2.Vec2(this.localAxisA.x, this.localAxisA.y);
                d.maxMotorTorque = this.maxMotorTorque;
                d.motorSpeed = this.motorSpeed * e;
                d.enableMotor = this.enableMotor;
                d.dampingRatio = this.dampingRatio;
                d.frequencyHz = this.frequency;
                return d
            }
        });
        cc.WheelJoint = q.exports = g
    }, {
        "../CCPhysicsTypes": 203
    }],
    222: [function(g, q, m) {
        function h() {
            this._point = new b2.Vec2;
            this._isPoint = !1;
            this._fixtures = []
        }
        var e = g("../CCPhysicsTypes").BodyType;
        h.prototype.init = function(d) {
            d ? (this._isPoint = !0, this._point.x =
                d.x, this._point.y = d.y) : this._isPoint = !1;
            this._fixtures.length = 0
        };
        h.prototype.ReportFixture = function(d) {
            if (d.GetBody().GetType() === e.Dynamic)
                if (this._isPoint) {
                    if (d.TestPoint(this._point)) return this._fixtures.push(d), !1
                } else this._fixtures.push(d);
            return !0
        };
        h.prototype.getFixture = function() {
            return this._fixtures[0]
        };
        h.prototype.getFixtures = function() {
            return this._fixtures
        };
        cc.PhysicsAABBQueryCallback = q.exports = h
    }, {
        "../CCPhysicsTypes": 203
    }],
    223: [function(g, q, m) {
        function h() {
            this._contactFixtures = []
        }
        h.prototype.setBeginContact = function(e) {
            this._BeginContact = e
        };
        h.prototype.setEndContact = function(e) {
            this._EndContact = e
        };
        h.prototype.setPreSolve = function(e) {
            this._PreSolve = e
        };
        h.prototype.setPostSolve = function(e) {
            this._PostSolve = e
        };
        h.prototype.BeginContact = function(e) {
            if (this._BeginContact) {
                var d = e.GetFixtureA(),
                    k = e.GetFixtureB(),
                    c = this._contactFixtures;
                e._shouldReport = !1;
                if (-1 !== c.indexOf(d) || -1 !== c.indexOf(k)) e._shouldReport = !0, this._BeginContact(e)
            }
        };
        h.prototype.EndContact = function(e) {
            this._EndContact &&
                e._shouldReport && (e._shouldReport = !1, this._EndContact(e))
        };
        h.prototype.PreSolve = function(e, d) {
            this._PreSolve && e._shouldReport && this._PreSolve(e, d)
        };
        h.prototype.PostSolve = function(e, d) {
            this._PostSolve && e._shouldReport && this._PostSolve(e, d)
        };
        h.prototype.registerContactFixture = function(e) {
            this._contactFixtures.push(e)
        };
        h.prototype.unregisterContactFixture = function(e) {
            cc.js.array.remove(this._contactFixtures, e)
        };
        cc.PhysicsContactListener = q.exports = h
    }, {}],
    224: [function(g, q, m) {
        function h(a) {
            b2.Draw.call(this);
            this._drawer = a;
            this._xf = this._dxf = new b2.Transform
        }
        var e = g("../CCPhysicsTypes").PTM_RATIO,
            d = cc.v2(),
            k = cc.Color.GREEN,
            c = cc.Color.RED;
        cc.js.extend(h, b2.Draw);
        cc.js.mixin(h.prototype, {
            _DrawPolygon: function(a, b) {
                for (var c = this._drawer, f = 0; f < b; f++) {
                    b2.Transform.MulXV(this._xf, a[f], d);
                    var k = d.x * e,
                        h = d.y * e;
                    0 === f ? c.moveTo(k, h) : c.lineTo(k, h)
                }
                c.close()
            },
            DrawPolygon: function(a, b, c) {
                this._applyStrokeColor(c);
                this._DrawPolygon(a, b);
                this._drawer.stroke()
            },
            DrawSolidPolygon: function(a, b, c) {
                this._applyFillColor(c);
                this._DrawPolygon(a, b);
                this._drawer.fill();
                this._drawer.stroke()
            },
            _DrawCircle: function(a, b) {
                var c = this._xf.p;
                this._drawer.circle((a.x + c.x) * e, (a.y + c.y) * e, b * e)
            },
            DrawCircle: function(a, b, c) {
                this._applyStrokeColor(c);
                this._DrawCircle(a, b);
                this._drawer.stroke()
            },
            DrawSolidCircle: function(a, b, c, d) {
                this._applyFillColor(d);
                this._DrawCircle(a, b);
                this._drawer.fill()
            },
            DrawSegment: function(a, b, c) {
                var f = this._drawer;
                a.x === b.x && a.y === b.y ? (this._applyFillColor(c), this._DrawCircle(a, 2 / e), f.fill()) : (this._applyStrokeColor(c),
                    b2.Transform.MulXV(this._xf, a, d), f.moveTo(d.x * e, d.y * e), b2.Transform.MulXV(this._xf, b, d), f.lineTo(d.x * e, d.y * e), f.stroke())
            },
            DrawTransform: function(a) {
                var b = this._drawer;
                b.strokeColor = c;
                d.x = d.y = 0;
                b2.Transform.MulXV(a, d, d);
                b.moveTo(d.x * e, d.y * e);
                d.x = 1;
                d.y = 0;
                b2.Transform.MulXV(a, d, d);
                b.lineTo(d.x * e, d.y * e);
                b.stroke();
                b.strokeColor = k;
                d.x = d.y = 0;
                b2.Transform.MulXV(a, d, d);
                b.moveTo(d.x * e, d.y * e);
                d.x = 0;
                d.y = 1;
                b2.Transform.MulXV(a, d, d);
                b.lineTo(d.x * e, d.y * e);
                b.stroke()
            },
            DrawPoint: function(a, b, c) {},
            _applyStrokeColor: function(a) {
                var b =
                    this._drawer.strokeColor;
                b.r = 255 * a.r;
                b.g = 255 * a.g;
                b.b = 255 * a.b;
                b.a = 150;
                this._drawer.strokeColor = b
            },
            _applyFillColor: function(a) {
                var b = this._drawer.fillColor;
                b.r = 255 * a.r;
                b.g = 255 * a.g;
                b.b = 255 * a.b;
                b.a = 150;
                this._drawer.fillColor = b
            },
            PushTransform: function(a) {
                this._xf = a
            },
            PopTransform: function() {
                this._xf = this._dxf
            }
        });
        q.exports = h
    }, {
        "../CCPhysicsTypes": 203
    }],
    225: [function(g, q, m) {
        function h() {
            this._type = 0;
            this._fixtures = [];
            this._points = [];
            this._normals = [];
            this._fractions = []
        }
        h.prototype.init = function(e) {
            this._type =
                e;
            this._fixtures.length = 0;
            this._points.length = 0;
            this._normals.length = 0;
            this._fractions.length = 0
        };
        h.prototype.ReportFixture = function(e, d, k, c) {
            if (0 === this._type) return this._fixtures[0] = e, this._points[0] = d, this._normals[0] = k, this._fractions[0] = c;
            this._fixtures.push(e);
            this._points.push(cc.v2(d));
            this._normals.push(cc.v2(k));
            this._fractions.push(c);
            return 1 === this._type ? 0 : 2 <= this._type ? 1 : c
        };
        h.prototype.getFixtures = function() {
            return this._fixtures
        };
        h.prototype.getPoints = function() {
            return this._points
        };
        h.prototype.getNormals = function() {
            return this._normals
        };
        h.prototype.getFractions = function() {
            return this._fractions
        };
        cc.PhysicsRayCastCallback = q.exports = h
    }, {}],
    226: [function(g, q, m) {
        q.exports = {
            getWorldRotation: function(h) {
                var e = h.angle;
                for (h = h.parent; h.parent;) e += h.angle, h = h.parent;
                return -e
            },
            getWorldScale: function(h) {
                var e = h.scaleX,
                    d = h.scaleY;
                for (h = h.parent; h.parent;) e *= h.scaleX, d *= h.scaleY, h = h.parent;
                return cc.v2(e, d)
            },
            convertToNodeRotation: function(h, e) {
                e -= -h.angle;
                for (h = h.parent; h.parent;) e -= -h.angle,
                    h = h.parent;
                return e
            }
        }
    }, {}],
    227: [function(g, q, m) {
        function h(a, b, c, d, f) {
            f = d["default"];
            !1;
            E.setClassAttr(a, c, "default", f);
            !1;
            f = a.__props__;
            0 > f.indexOf(c) && f.push(c);
            t(a, d, b, c, !1);
            !1;
            !1
        }

        function e(a, b, c, d, f) {
            var l = d.get,
                k = d.set,
                e = a.prototype,
                h = !Object.getOwnPropertyDescriptor(e, c);
            l && (!1, t(a, d, b, c, !0), !1, !1, E.setClassAttr(a, c, "serializable", !1), !1, f || x.get(e, c, l, h, h), !1, !1);
            k && (f || (!1, x.set(e, c, k, h, h)), !1, !1)
        }

        function d(a) {
            return "function" === typeof a ? (!1, a()) : a
        }

        function k(a, b, c) {
            for (var d in b) a.hasOwnProperty(d) ||
                c && !c(d) || Object.defineProperty(a, d, x.getPropertyDescriptor(b, d))
        }

        function c(a, b, c, d) {
            var l = d.__ctor__,
                e = d.ctor,
                h = d.__ES6__;
            !1;
            h ? (l = [e], d = e) : (l = l ? [l] : n(b, c, d), d = F(l, b, a, d), x.value(d, "extend", function(a) {
                a["extends"] = this;
                return p(a)
            }, !0));
            x.value(d, "__ctors__", 0 < l.length ? l : null, !0);
            e = d.prototype;
            b && (h || (x.extend(d, b), e = d.prototype), d.$super = b, !1);
            if (c) {
                for (b = c.length - 1; 0 <= b; b--) {
                    var g = c[b];
                    k(e, g.prototype);
                    k(d, g, function(a) {
                        return g.hasOwnProperty(a) && !0
                    });
                    p._isCCClass(g) && k(E.getClassAttrs(d), E.getClassAttrs(g))
                }
                e.constructor =
                    d
            }
            h || (e.__initProps__ = f);
            x.setClassName(a, d);
            return d
        }

        function a(a, b, d, f) {
            var l = cc.Component,
                k = cc._RF.peek();
            if (k && x.isChildClassOf(b, l)) {
                if (x.isChildClassOf(k.cls, l)) return cc.errorID(3615), null;
                !1;
                a = a || k.script
            }
            a = c(a, b, d, f);
            if (k)
                if (x.isChildClassOf(b, l)) {
                    if (b = k.uuid) x._setClassId(b, a), !1;
                    k.cls = a
                } else x.isChildClassOf(k.cls, l) || (k.cls = a);
            return a
        }

        function b(a) {
            var b = x.getClassName(a),
                c = a.constructor;
            b = "new " + b + "(";
            for (var d = 0; d < c.__props__.length; d++) {
                var f = a[c.__props__[d]];
                !1;
                b += f;
                d < c.__props__.length -
                    1 && (b += ",")
            }
            return b + ")"
        }

        function l(a) {
            return JSON.stringify(a).replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029")
        }

        function f(a) {
            var c = E.getClassAttrs(a),
                d = a.__props__;
            null === d && (y.init(), d = a.__props__);
            for (var f = [], k = "", e = 0; e < d.length; e++) {
                var h = d[e],
                    n = h + w + "default";
                if (n in c) {
                    h = C.test(h) ? "this." + h + "=" : "this[" + l(h) + "]=";
                    n = c[n];
                    if ("object" === typeof n && n) n = n instanceof cc.ValueType ? b(n) : Array.isArray(n) ? "[]" : "{}";
                    else if ("function" === typeof n) {
                        var g = f.length;
                        f.push(n);
                        n = "F[" + g + "]()";
                        !1
                    } else n =
                        "string" === typeof n ? l(n) : n;
                    h = h + n + ";\n";
                    k += h
                }
            }
            c = 0 === f.length ? Function(k) : Function("F", "return (function(){\n" + k + "})")(f);
            a.prototype.__initProps__ = c;
            c.call(this)
        }

        function n(a, b, c) {
            var d = [];
            a = [a].concat(b);
            for (b = 0; b < a.length; b++) {
                var f = a[b];
                if (f) {
                    f = p._isCCClass(f) ? f.__ctors__ || [] : [f];
                    for (var l = 0; l < f.length; l++) {
                        var k = d,
                            e = f[l];
                        0 > k.indexOf(e) && k.push(e)
                    }
                }
            }(c = c.ctor) && d.push(c);
            return d
        }

        function u(a, b, c) {
            c = !1;
            for (var d in b)
                if (!(0 <= B.indexOf(d))) {
                    var f = b[d];
                    if ("function" === typeof f) {
                        var l = x.getPropertyDescriptor(a.prototype,
                            d);
                        if (l && (l = l.value, "function" === typeof l)) {
                            G.test(f) && (c = !0, b[d] = function(a, b) {
                                return function() {
                                    var c = this._super;
                                    this._super = a;
                                    var d = b.apply(this, arguments);
                                    this._super = c;
                                    return d
                                }
                            }(l, f));
                            continue
                        }!1
                    }
                }
            return c
        }

        function v(a, b, c, d, f, l) {
            a.__props__ = [];
            d && d.__props__ && (a.__props__ = d.__props__.slice());
            if (f)
                for (d = 0; d < f.length; ++d) {
                    var k = f[d];
                    k.__props__ && (a.__props__ = a.__props__.concat(k.__props__.filter(function(b) {
                        return 0 > a.__props__.indexOf(b)
                    })))
                }
            if (c) {
                A.preprocessAttrs(c, b, a, l);
                for (var n in c) f =
                    c[n], "default" in f ? h(a, b, n, f, l) : e(a, b, n, f, l)
            }
            var g = E.getClassAttrs(a);
            a.__values__ = a.__props__.filter(function(a) {
                return !1 !== g[a + w + "serializable"]
            })
        }

        function p(b) {
            b = b || {};
            var c = b.name,
                d = b["extends"],
                f = b.mixins,
                l = a(c, d, f, b);
            c || (c = cc.js.getClassName(l));
            l._sealed = !0;
            d && (d._sealed = !1);
            var k = b.properties;
            "function" === typeof k || d && null === d.__props__ || f && f.some(function(a) {
                return null === a.__props__
            }) ? (!1, y.push({
                cls: l,
                props: k,
                mixins: f
            }), l.__props__ = l.__values__ = null) : v(l, c, k, d, b.mixins, b.__ES6__);
            if (f =
                b.statics)
                for (h in !1, f) l[h] = f[h];
            for (var e in b)
                if (!(0 <= B.indexOf(e))) {
                    var h = b[e];
                    A.validateMethodWithProps(h, e, c, l, d) && x.value(l.prototype, e, h, !0, !0)
                }(b = b.editor) && cc.Component._registerEditorProps(l, b);
            return l
        }

        function t(a, b, c, d, f) {
            function l() {
                h = d + w;
                return e = E.getClassAttrs(a)
            }

            function k(a, c) {
                if (a in b) {
                    var d = b[a];
                    typeof d === c && ((e || l())[h + a] = d)
                }
            }
            var e = null,
                h = "";
            !1;
            !1;
            if (c = b.type) D[c] ? ((e || l())[h + "type"] = c, !1) : "Object" === c ? !1 : c === E.ScriptUuid ? ((e || l())[h + "type"] = "Script", e[h + "ctor"] = cc.ScriptAsset) :
                "object" === typeof c ? z.isEnum(c) ? ((e || l())[h + "type"] = "Enum", e[h + "enumList"] = z.getList(c)) : !1 : ("function" === typeof c && ((e || l())[h + "type"] = "Object", e[h + "ctor"] = c), !1);
            b.editorOnly && (!1, (e || l())[h + "editorOnly"] = !0);
            !1;
            !1 === b.serializable && (!1, (e || l())[h + "serializable"] = !1);
            k("formerlySerializedAs", "string");
            !1;
            !1;
            if (c = b.range) Array.isArray(c) ? 2 <= c.length ? ((e || l())[h + "min"] = c[0], e[h + "max"] = c[1], 2 < c.length && (e[h + "step"] = c[2])) : !1 : !1;
            k("min", "number");
            k("max", "number");
            k("step", "number");
            k("userData", "object")
        }
        var x = g("./js"),
            z = g("./CCEnum");
        g("./utils");
        var E = g("./attribute"),
            w = E.DELIMETER,
            A = g("./preprocess-class");
        g("./requiring-frame");
        var B = "name extends mixins ctor __ctor__ properties statics editor __ES6__".split(" "),
            y = {
                datas: null,
                push: function(a) {
                    if (this.datas) this.datas.push(a);
                    else {
                        this.datas = [a];
                        var b = this;
                        setTimeout(function() {
                            b.init()
                        }, 0)
                    }
                },
                init: function() {
                    var a = this.datas;
                    if (a) {
                        for (var b = 0; b < a.length; ++b) {
                            var c = a[b],
                                d = c.cls,
                                f = c.props;
                            "function" === typeof f && (f = f());
                            var l = x.getClassName(d);
                            f ? v(d, l, f, d.$super, c.mixins) : cc.errorID(3633, l)
                        }
                        this.datas = null
                    }
                }
            },
            C = /^[A-Za-z_$][0-9A-Za-z_$]*$/,
            F = function(a, b, c, d) {
                var f = "return function CCClass(){\n";
                b && u(b, d, c) && (f += "this._super=null;\n");
                f += "this.__initProps__(CCClass);\n";
                a = a.length;
                if (0 < a)
                    if (1 === a) f += "CCClass.__ctors__[0].apply(this,arguments);\n";
                    else
                        for (f += "var cs=CCClass.__ctors__;\n", b = 0; b < a; b++) f += "cs[" + b + "].apply(this,arguments);\n";
                return Function(f + "}")()
            },
            G = /xyz/.test(function() {
                xyz
            }) ? /\b\._super\b/ : /.*/;
        /xyz/.test(function() {
            xyz
        });
        p._isCCClass = function(a) {
            return a && a.hasOwnProperty("__ctors__")
        };
        p._fastDefine = function(a, b, c) {
            x.setClassName(a, b);
            a = b.__props__ = b.__values__ = Object.keys(c);
            b = E.getClassAttrs(b);
            for (var d = 0; d < a.length; d++) {
                var f = a[d];
                b[f + w + "visible"] = !1;
                b[f + w + "default"] = c[f]
            }
        };
        p.Attr = E;
        p.attr = E.attr;
        p.getInheritanceChain = function(a) {
            for (var b = [];;) {
                a = x.getSuper(a);
                if (!a) break;
                a !== Object && b.push(a)
            }
            return b
        };
        var D = {
            Integer: "Number",
            Float: "Number",
            Boolean: "Boolean",
            String: "String"
        };
        cc.Class = p;
        q.exports = {
            isArray: function(a) {
                a =
                    d(a);
                return Array.isArray(a)
            },
            fastDefine: p._fastDefine,
            getNewValueTypeCode: (!0, b),
            IDENTIFIER_RE: C,
            escapeForJS: l,
            getDefault: d
        };
        !1
    }, {
        "./CCEnum": 229,
        "./attribute": 239,
        "./js": 248,
        "./preprocess-class": 249,
        "./requiring-frame": 250,
        "./utils": 251
    }],
    228: [function(g, q, m) {
        function h(a) {
            return a
        }

        function e(a, b) {
            return a[b] || (a[b] = {})
        }

        function d(a) {
            return function(b) {
                return "function" === typeof b ? a(b) : function(c) {
                    return a(c, b)
                }
            }
        }

        function k(a, b, c) {
            return function(a) {
                !1;
                return function(c) {
                    return b(c, a)
                }
            }
        }

        function c(a,
            b) {
            !1;
            return e(a, "__ccclassCache__")
        }

        function a(a, b, d) {
            return a(function(a, f) {
                if (a = c(a, b)) f = void 0 !== d ? d : f, a = e(a, "proto"), e(a, "editor")[b] = f
            }, b)
        }
        g("./CCClass");
        var b = g("./preprocess-class"),
            l = g("./js"),
            f = k.bind(null, !1),
            n = k.bind(null, !1),
            u = k.bind(null, !1);
        g = d(function(a, b) {
            var c = l.getSuper(a);
            c === Object && (c = null);
            b = {
                name: b,
                extends: c,
                ctor: a,
                __ES6__: !0
            };
            if (c = a.__ccclassCache__)(c = c.proto) && l.mixin(b, c), a.__ccclassCache__ = void 0;
            a = cc.Class(b);
            !1;
            return a
        });
        m = d(h);
        f = a(f, "requireComponent");
        var v = n(h);
        u = a(u, "executionOrder");
        var p = d(h),
            t = d(h),
            x = n(h),
            z = n(h);
        n = n(h);
        cc._decorator = q.exports = {
            ccclass: g,
            property: function(a, d, f) {
                function k(a, d, f) {
                    var k = c(a.constructor);
                    if (k) {
                        var n = e(k, "proto");
                        n = e(n, "properties");
                        a = a.constructor;
                        var g = h,
                            p, t = f && (f.get || f.set);
                        g && (p = b.getFullFormOfProperty(g, t));
                        p = l.mixin(n[d] || {}, p || g || {});
                        if (t) !1, f.get && (p.get = f.get), f.set && (p.set = f.set);
                        else {
                            !1;
                            t = void 0;
                            if (f) {
                                if (f.initializer) a: {
                                    k = f.initializer;
                                    try {
                                        var u = k()
                                    } catch (O) {
                                        t = k;
                                        break a
                                    }
                                    t = "object" !== typeof u || null === u ? u : k
                                }
                            } else {
                                if (!(u =
                                        k["default"])) {
                                    a: {
                                        try {
                                            var x = new a
                                        } catch (O) {
                                            !1;
                                            u = {};
                                            break a
                                        }
                                        u = x
                                    }
                                    u = k["default"] = u
                                }
                                k = u;
                                k.hasOwnProperty(d) && (t = k[d])
                            }!1;
                            !1;
                            p["default"] = t
                        }
                        n[d] = p
                    }
                }
                var h = null;
                if ("undefined" === typeof d) return h = a, k;
                k(a, d, f)
            },
            executeInEditMode: m,
            requireComponent: f,
            menu: v,
            executionOrder: u,
            disallowMultiple: p,
            playOnFocus: t,
            inspector: x,
            icon: z,
            help: n,
            mixins: function() {
                for (var a = [], b = 0; b < arguments.length; b++) a[b] = arguments[b];
                return function(b) {
                    (b = c(b, "mixins")) && (e(b, "proto").mixins = a)
                }
            }
        }
    }, {
        "./CCClass": 227,
        "./js": 248,
        "./preprocess-class": 249,
        "./utils": 251
    }],
    229: [function(g, q, m) {
        function h(d) {
            if ("__enums__" in d) return d;
            e.value(d, "__enums__", null, !0);
            for (var k = -1, c = Object.keys(d), a = 0; a < c.length; a++) {
                var b = c[a],
                    l = d[b];
                if (-1 === l) l = ++k, d[b] = l;
                else if ("number" === typeof l) k = l;
                else if ("string" === typeof l && Number.isInteger(parseFloat(b))) continue;
                l = "" + l;
                b !== l && (!1, e.value(d, l, b))
            }
            return d
        }
        var e = g("./js");
        h.isEnum = function(d) {
            return d && d.hasOwnProperty("__enums__")
        };
        h.getList = function(d) {
            if (d.__enums__) return d.__enums__;
            var k = d.__enums__ = [],
                c;
            for (c in d) {
                var a = d[c];
                Number.isInteger(a) && k.push({
                    name: c,
                    value: a
                })
            }
            k.sort(function(a, c) {
                return a.value - c.value
            });
            return k
        };
        !1;
        q.exports = cc.Enum = h
    }, {
        "./js": 248
    }],
    230: [function(g, q, m) {
        var h = g("../event-manager");
        g = g("./CCInputManager");
        var e;
        cc.Acceleration = function(d, k, c, a) {
            this.x = d || 0;
            this.y = k || 0;
            this.z = c || 0;
            this.timestamp = a || 0
        };
        g.setAccelerometerEnabled = function(d) {
            this._accelEnabled !== d && (this._accelEnabled = d, d = cc.director.getScheduler(), d.enableForTarget(this), this._accelEnabled ? (this._registerAccelerometerEvent(),
                this._accelCurTime = 0, d.scheduleUpdate(this)) : (this._unregisterAccelerometerEvent(), this._accelCurTime = 0, d.unscheduleUpdate(this)), !1, !1)
        };
        g.setAccelerometerInterval = function(d) {
            this._accelInterval !== d && (this._accelInterval = d, !1, !1)
        };
        g._registerKeyboardEvent = function() {
            cc.game.canvas.addEventListener("keydown", function(d) {
                h.dispatchEvent(new cc.Event.EventKeyboard(d.keyCode, !0));
                d.stopPropagation();
                d.preventDefault()
            }, !1);
            cc.game.canvas.addEventListener("keyup", function(d) {
                h.dispatchEvent(new cc.Event.EventKeyboard(d.keyCode, !1));
                d.stopPropagation();
                d.preventDefault()
            }, !1)
        };
        g._registerAccelerometerEvent = function() {
            var d = window;
            this._acceleration = new cc.Acceleration;
            this._accelDeviceEvent = d.DeviceMotionEvent || d.DeviceOrientationEvent;
            cc.sys.browserType === cc.sys.BROWSER_TYPE_MOBILE_QQ && (this._accelDeviceEvent = window.DeviceOrientationEvent);
            var k = this._accelDeviceEvent === d.DeviceMotionEvent ? "devicemotion" : "deviceorientation",
                c = navigator.userAgent;
            (/Android/.test(c) || /Adr/.test(c) && cc.sys.browserType === cc.BROWSER_TYPE_UC) &&
            (this._minus = -1);
            e = this.didAccelerate.bind(this);
            d.addEventListener(k, e, !1)
        };
        g._unregisterAccelerometerEvent = function() {
            var d = window,
                k = this._accelDeviceEvent === d.DeviceMotionEvent ? "devicemotion" : "deviceorientation";
            e && d.removeEventListener(k, e, !1)
        };
        g.didAccelerate = function(d) {
            var k = window;
            if (this._accelEnabled) {
                var c = this._acceleration;
                if (this._accelDeviceEvent === window.DeviceMotionEvent) {
                    var a = d.accelerationIncludingGravity;
                    var b = this._accelMinus * a.x * .1;
                    var l = this._accelMinus * a.y * .1;
                    a = .1 * a.z
                } else b =
                    d.gamma / 90 * .981, l = -d.beta / 90 * .981, a = d.alpha / 90 * .981;
                if (cc.view._isRotated) {
                    var f = b;
                    b = -l;
                    l = f
                }
                c.x = b;
                c.y = l;
                c.z = a;
                c.timestamp = d.timeStamp || Date.now();
                d = c.x;
                90 === k.orientation ? (c.x = -c.y, c.y = d) : -90 === k.orientation ? (c.x = c.y, c.y = -d) : 180 === k.orientation && (c.x = -c.x, c.y = -c.y);
                cc.sys.os !== cc.sys.OS_ANDROID && cc.sys.os !== cc.sys.OS_OPENHARMONY || cc.sys.browserType === cc.sys.BROWSER_TYPE_MOBILE_QQ || (c.x = -c.x, c.y = -c.y)
            }
        }
    }, {
        "../event-manager": 172,
        "./CCInputManager": 231
    }],
    231: [function(g, q, m) {
        var h = g("./CCMacro"),
            e = g("./CCSys"),
            d = g("../event-manager"),
            k = cc.v2();
        g = {
            _mousePressed: !1,
            _isRegisterEvent: !1,
            _preTouchPoint: cc.v2(0, 0),
            _prevMousePoint: cc.v2(0, 0),
            _preTouchPool: [],
            _preTouchPoolPointer: 0,
            _touches: [],
            _maxTouches: 10,
            _touchesIntegerDict: {},
            _indexBitsUsed: 0,
            _touchesCache: {},
            _touchCount: 0,
            _accelEnabled: !1,
            _accelInterval: .2,
            _accelMinus: 1,
            _accelCurTime: 0,
            _acceleration: null,
            _accelDeviceEvent: null,
            _canvasBoundingRect: {
                left: 0,
                top: 0,
                adjustedLeft: 0,
                adjustedTop: 0,
                width: 0,
                height: 0
            },
            _getUnUsedIndex: function() {
                for (var c = cc.sys.now(),
                        a = h.TOUCH_TIMEOUT, b = this._indexBitsUsed, d = -1, f = this._touches, k = this._touchesIntegerDict, e = this._touchesCache, g = 0; g < this._maxTouches; g++) {
                    if (1 & b) {
                        var p = f[g];
                        p && c - p._lastModified > a && (p = p.getID(), delete k[p], delete e[p], this._touchCount--, -1 === d ? (d = g, this._indexBitsUsed |= 1 << g) : this._indexBitsUsed &= ~(1 << g))
                    } else -1 === d && (d = g, this._indexBitsUsed |= 1 << g);
                    b >>= 1
                }
                return d
            },
            _glView: null,
            _updateCanvasBoundingRect: function() {
                var c = cc.game.canvas,
                    a = this._canvasBoundingRect,
                    b = document.documentElement,
                    d = window.pageXOffset -
                    b.clientLeft;
                b = window.pageYOffset - b.clientTop;
                c.getBoundingClientRect ? (c = c.getBoundingClientRect(), a.left = c.left + d, a.top = c.top + b, a.width = c.width, a.height = c.height) : c instanceof HTMLCanvasElement ? (a.left = d, a.top = b, a.width = c.width, a.height = c.height) : (a.left = d, a.top = b, a.width = parseInt(c.style.width), a.height = parseInt(c.style.height))
            },
            handleTouchesBegin: function(c) {
                for (var a = e.now(), b, l, f, k = [], h = this._touches, g = this._touchesIntegerDict, p = this._touchesCache, t = 0, x = c.length; t < x; t++)
                    if (b = c[t], f = b.getID(),
                        l = g[f], void 0 === l)
                        if (l = this._getUnUsedIndex(), -1 === l) cc.logID(2300, l);
                        else {
                            var z = new cc.Touch(b._point.x, b._point.y, f);
                            z._setPrevPoint(b._prevPoint);
                            z._lastModified = a;
                            h[l] = z;
                            g[f] = l;
                            p[f] = z;
                            this._touchCount++;
                            k.push(z)
                        }
                0 < k.length && (this._glView._convertTouchesWithScale(k), c = new cc.Event.EventTouch(k), c._eventCode = cc.Event.EventTouch.BEGAN, d.dispatchEvent(c))
            },
            handleTouchesMove: function(c) {
                for (var a = e.now(), b, l, f = [], k = this._touches, h = this._touchesIntegerDict, g = 0, p = c.length; g < p; g++)
                    if (b = c[g], l = b.getID(),
                        l = h[l], void 0 !== l && (l = k[l])) l._setPoint(b._point), l._setPrevPoint(b._prevPoint), l._lastModified = a, f.push(l);
                0 < f.length && (this._glView._convertTouchesWithScale(f), c = new cc.Event.EventTouch(f), c._eventCode = cc.Event.EventTouch.MOVED, d.dispatchEvent(c))
            },
            handleTouchesEnd: function(c) {
                c = this.getSetOfTouchesEndOrCancel(c);
                0 < c.length && (this._glView._convertTouchesWithScale(c), c = new cc.Event.EventTouch(c), c._eventCode = cc.Event.EventTouch.ENDED, d.dispatchEvent(c));
                this._preTouchPool.length = 0
            },
            handleTouchesCancel: function(c) {
                c =
                    this.getSetOfTouchesEndOrCancel(c);
                0 < c.length && (this._glView._convertTouchesWithScale(c), c = new cc.Event.EventTouch(c), c._eventCode = cc.Event.EventTouch.CANCELED, d.dispatchEvent(c));
                this._preTouchPool.length = 0
            },
            getSetOfTouchesEndOrCancel: function(c) {
                for (var a, b, d, f = [], k = this._touches, e = this._touchesIntegerDict, h = this._touchesCache, g = 0, t = c.length; g < t; g++)
                    if (a = c[g], d = a.getID(), b = e[d], void 0 !== b) {
                        var x = k[b];
                        x && (x._setPoint(a._point), x._setPrevPoint(a._prevPoint), f.push(x), delete e[d], delete h[d], this._touchCount--,
                            this._indexBitsUsed &= ~(1 << b))
                    }
                return f
            },
            getGlobalTouchCount: function() {
                return this._touchCount
            },
            getGlobalTouches: function() {
                return this._touchesCache
            },
            getPreTouch: function(c) {
                for (var a = null, b = this._preTouchPool, d = c.getID(), f = b.length - 1; 0 <= f; f--)
                    if (b[f].getID() === d) {
                        a = b[f];
                        break
                    }
                a || (a = c);
                return a
            },
            setPreTouch: function(c) {
                for (var a = !1, b = this._preTouchPool, d = c.getID(), f = b.length - 1; 0 <= f; f--)
                    if (b[f].getID() === d) {
                        b[f] = c;
                        a = !0;
                        break
                    }
                a || (50 >= b.length ? b.push(c) : (b[this._preTouchPoolPointer] = c, this._preTouchPoolPointer =
                    (this._preTouchPoolPointer + 1) % 50))
            },
            getTouchByXY: function(c, a, b) {
                var d = this._preTouchPoint;
                c = this._glView.convertToLocationInView(c, a, b);
                a = new cc.Touch(c.x, c.y, 0);
                a._setPrevPoint(d.x, d.y);
                d.x = c.x;
                d.y = c.y;
                return a
            },
            getMouseEvent: function(c, a, b) {
                var d = this._prevMousePoint;
                b = new cc.Event.EventMouse(b);
                b._setPrevCursor(d.x, d.y);
                d.x = c.x;
                d.y = c.y;
                this._glView._convertMouseToLocationInView(d, a);
                b.setLocation(d.x, d.y);
                return b
            },
            getPointByEvent: function(c, a) {
                cc.sys.browserType !== cc.sys.BROWSER_TYPE_QQ && cc.sys.browserType !==
                    cc.sys.BROWSER_TYPE_UC && cc.sys.browserType !== cc.sys.BROWSER_TYPE_SAFARI || this._updateCanvasBoundingRect();
                if (null != c.pageX) return {
                    x: c.pageX,
                    y: c.pageY
                };
                a.left -= document.body.scrollLeft;
                a.top -= document.body.scrollTop;
                return {
                    x: c.clientX,
                    y: c.clientY
                }
            },
            getTouchesByEvent: function(c, a) {
                for (var b = [], d = this._glView, f, h, g = this._preTouchPoint, v = c.changedTouches.length, p = 0; p < v; p++)
                    if (f = c.changedTouches[p]) {
                        var t = e.BROWSER_TYPE_FIREFOX === e.browserType ? d.convertToLocationInView(f.pageX, f.pageY, a, k) : d.convertToLocationInView(f.clientX,
                            f.clientY, a, k);
                        null != f.identifier ? (f = new cc.Touch(t.x, t.y, f.identifier), h = this.getPreTouch(f).getLocation(), f._setPrevPoint(h.x, h.y), this.setPreTouch(f)) : (f = new cc.Touch(t.x, t.y), f._setPrevPoint(g.x, g.y));
                        g.x = t.x;
                        g.y = t.y;
                        b.push(f)
                    }
                return b
            },
            getHTMLElementPosition: function(c) {
                var a = document.documentElement,
                    b = window.pageXOffset - a.clientLeft;
                a = window.pageYOffset - a.clientTop;
                return c.getBoundingClientRect ? (c = c.getBoundingClientRect(), {
                    left: c.left + b,
                    top: c.top + a,
                    width: c.width,
                    height: c.height
                }) : c instanceof
                HTMLCanvasElement ? {
                    left: b,
                    top: a,
                    width: c.width,
                    height: c.height
                } : {
                    left: b,
                    top: a,
                    width: parseInt(c.style.width),
                    height: parseInt(c.style.height)
                }
            },
            registerSystemEvent: function(c) {
                if (!this._isRegisterEvent) {
                    this._glView = cc.view;
                    var a = this,
                        b = this._canvasBoundingRect;
                    window.addEventListener("resize", this._updateCanvasBoundingRect.bind(this));
                    var l = e.isMobile,
                        f = "touches" in e.capabilities;
                    if ("mouse" in e.capabilities) {
                        l || (window.addEventListener("mousedown", function() {
                            a._mousePressed = !0
                        }, !1), window.addEventListener("mouseup",
                            function(c) {
                                if (a._mousePressed) {
                                    a._mousePressed = !1;
                                    var f = a.getPointByEvent(c, b);
                                    cc.rect(b.left, b.top, b.width, b.height).contains(f) || (a.handleTouchesEnd([a.getTouchByXY(f.x, f.y, b)]), f = a.getMouseEvent(f, b, cc.Event.EventMouse.UP), f.setButton(c.button), d.dispatchEvent(f))
                                }
                            }, !1));
                        var k = cc.Event.EventMouse,
                            h = [!l && ["mousedown", k.DOWN, function(b, d, f, l) {
                                    a._mousePressed = !0;
                                    a.handleTouchesBegin([a.getTouchByXY(f.x, f.y, l)]);
                                    c.focus()
                                }], !l && ["mouseup", k.UP, function(b, c, d, f) {
                                    a._mousePressed = !1;
                                    a.handleTouchesEnd([a.getTouchByXY(d.x,
                                        d.y, f)])
                                }], !l && ["mousemove", k.MOVE, function(b, c, d, f) {
                                    a.handleTouchesMove([a.getTouchByXY(d.x, d.y, f)]);
                                    a._mousePressed || c.setButton(null)
                                }],
                                ["mousewheel", k.SCROLL, function(a, b) {
                                    b.setScrollData(0, a.wheelDelta)
                                }],
                                ["DOMMouseScroll", k.SCROLL, function(a, b) {
                                    b.setScrollData(0, -120 * a.detail)
                                }]
                            ];
                        l = function() {
                            var f = h[g];
                            if (f) {
                                var l = f[1],
                                    e = f[2];
                                c.addEventListener(f[0], function(c) {
                                    var f = a.getPointByEvent(c, b),
                                        h = a.getMouseEvent(f, b, l),
                                        n = c.button;
                                    l === k.MOVE && (1 & c.buttons ? n = k.BUTTON_LEFT : 2 & c.buttons ? n = k.BUTTON_RIGHT :
                                        4 & c.buttons && (n = k.BUTTON_MIDDLE));
                                    h.setButton(n);
                                    e(c, h, f, b);
                                    d.dispatchEvent(h);
                                    c.stopPropagation();
                                    c.preventDefault()
                                }, !1)
                            }
                        };
                        for (var g = 0; g < h.length; ++g) l()
                    }
                    if (window.navigator.msPointerEnabled) {
                        var p = {
                            MSPointerDown: a.handleTouchesBegin,
                            MSPointerMove: a.handleTouchesMove,
                            MSPointerUp: a.handleTouchesEnd,
                            MSPointerCancel: a.handleTouchesCancel
                        };
                        l = function() {
                            var d = p[t];
                            c.addEventListener(t, function(c) {
                                var f = document.documentElement;
                                b.adjustedLeft = b.left - f.scrollLeft;
                                b.adjustedTop = b.top - f.scrollTop;
                                d.call(a, [a.getTouchByXY(c.clientX, c.clientY, b)]);
                                c.stopPropagation()
                            }, !1)
                        };
                        for (var t in p) l()
                    }
                    if (f) {
                        var x = {
                            touchstart: function(b) {
                                a.handleTouchesBegin(b);
                                c.focus()
                            },
                            touchmove: function(b) {
                                a.handleTouchesMove(b)
                            },
                            touchend: function(b) {
                                a.handleTouchesEnd(b)
                            },
                            touchcancel: function(b) {
                                a.handleTouchesCancel(b)
                            }
                        };
                        f = function(b) {
                            var d = x[b];
                            c.addEventListener(b, function(b) {
                                if (b.changedTouches) {
                                    var f = a.getHTMLElementPosition(c),
                                        l = document.body;
                                    f.left -= l.scrollLeft || 0;
                                    f.top -= l.scrollTop || 0;
                                    d(a.getTouchesByEvent(b, f));
                                    b.stopPropagation();
                                    b.preventDefault()
                                }
                            }, !1)
                        };
                        for (var z in x) f(z)
                    }
                    this._registerKeyboardEvent();
                    this._isRegisterEvent = !0
                }
            },
            _registerKeyboardEvent: function() {},
            _registerAccelerometerEvent: function() {},
            update: function(c) {
                this._accelCurTime > this._accelInterval && (this._accelCurTime -= this._accelInterval, d.dispatchEvent(new cc.Event.EventAcceleration(this._acceleration)));
                this._accelCurTime += c
            }
        };
        q.exports = cc.internal.inputManager = g
    }, {
        "../event-manager": 172,
        "./CCMacro": 232,
        "./CCSys": 236
    }],
    232: [function(g,
        q, m) {
        cc.macro = {
            RAD: Math.PI / 180,
            DEG: 180 / Math.PI,
            REPEAT_FOREVER: Number.MAX_VALUE - 1,
            FLT_EPSILON: 1.192092896E-7,
            MIN_ZINDEX: -Math.pow(2, 15),
            MAX_ZINDEX: Math.pow(2, 15) - 1,
            ONE: 1,
            ZERO: 0,
            SRC_ALPHA: 770,
            SRC_ALPHA_SATURATE: 776,
            SRC_COLOR: 768,
            DST_ALPHA: 772,
            DST_COLOR: 774,
            ONE_MINUS_SRC_ALPHA: 771,
            ONE_MINUS_SRC_COLOR: 769,
            ONE_MINUS_DST_ALPHA: 773,
            ONE_MINUS_DST_COLOR: 775,
            ONE_MINUS_CONSTANT_ALPHA: 32772,
            ONE_MINUS_CONSTANT_COLOR: 32770,
            ORIENTATION_PORTRAIT: 1,
            ORIENTATION_LANDSCAPE: 2,
            ORIENTATION_AUTO: 3,
            DENSITYDPI_DEVICE: "device-dpi",
            DENSITYDPI_HIGH: "high-dpi",
            DENSITYDPI_MEDIUM: "medium-dpi",
            DENSITYDPI_LOW: "low-dpi",
            FIX_ARTIFACTS_BY_STRECHING_TEXEL_TMX: !0,
            DIRECTOR_STATS_POSITION: cc.v2(0, 0),
            ENABLE_STACKABLE_ACTIONS: !0,
            TOUCH_TIMEOUT: 5E3,
            BATCH_VERTEX_COUNT: 2E4,
            ENABLE_TILEDMAP_CULLING: !0,
            ENABLE_TRANSPARENT_CANVAS: !1,
            ENABLE_WEBGL_ANTIALIAS: !1,
            ENABLE_CULLING: !1,
            CLEANUP_IMAGE_CACHE: !1,
            SHOW_MESH_WIREFRAME: !1,
            SHOW_MESH_NORMAL: !1,
            ENABLE_MULTI_TOUCH: !0,
            ALLOW_IMAGE_BITMAP: !cc.sys.isMobile,
            ENABLE_NATIVE_TTF_RENDERER: !0
        };
        Object.defineProperty(cc.macro,
            "ROTATE_ACTION_CCW", {
                set: function(h) {
                    cc.RotateTo && cc.RotateBy && (cc.RotateTo._reverse = cc.RotateBy._reverse = h)
                }
            });
        cc.macro.SUPPORT_TEXTURE_FORMATS = ".astc .pkm .pvr .webp .jpg .jpeg .bmp .png".split(" ");
        cc.macro.KEY = {
            none: 0,
            back: 6,
            menu: 18,
            backspace: 8,
            tab: 9,
            enter: 13,
            shift: 16,
            ctrl: 17,
            alt: 18,
            pause: 19,
            capslock: 20,
            escape: 27,
            space: 32,
            pageup: 33,
            pagedown: 34,
            end: 35,
            home: 36,
            left: 37,
            up: 38,
            right: 39,
            down: 40,
            select: 41,
            insert: 45,
            Delete: 46,
            0: 48,
            1: 49,
            2: 50,
            3: 51,
            4: 52,
            5: 53,
            6: 54,
            7: 55,
            8: 56,
            9: 57,
            a: 65,
            b: 66,
            c: 67,
            d: 68,
            e: 69,
            f: 70,
            g: 71,
            h: 72,
            i: 73,
            j: 74,
            k: 75,
            l: 76,
            m: 77,
            n: 78,
            o: 79,
            p: 80,
            q: 81,
            r: 82,
            s: 83,
            t: 84,
            u: 85,
            v: 86,
            w: 87,
            x: 88,
            y: 89,
            z: 90,
            num0: 96,
            num1: 97,
            num2: 98,
            num3: 99,
            num4: 100,
            num5: 101,
            num6: 102,
            num7: 103,
            num8: 104,
            num9: 105,
            "*": 106,
            "+": 107,
            "-": 109,
            numdel: 110,
            "/": 111,
            f1: 112,
            f2: 113,
            f3: 114,
            f4: 115,
            f5: 116,
            f6: 117,
            f7: 118,
            f8: 119,
            f9: 120,
            f10: 121,
            f11: 122,
            f12: 123,
            numlock: 144,
            scrolllock: 145,
            ";": 186,
            semicolon: 186,
            equal: 187,
            "=": 187,
            ",": 188,
            comma: 188,
            dash: 189,
            ".": 190,
            period: 190,
            forwardslash: 191,
            grave: 192,
            "[": 219,
            openbracket: 219,
            backslash: 220,
            "]": 221,
            closebracket: 221,
            quote: 222,
            dpadLeft: 1E3,
            dpadRight: 1001,
            dpadUp: 1003,
            dpadDown: 1004,
            dpadCenter: 1005
        };
        cc.macro.ImageFormat = cc.Enum({
            JPG: 0,
            PNG: 1,
            TIFF: 2,
            WEBP: 3,
            PVR: 4,
            ETC: 5,
            S3TC: 6,
            ATITC: 7,
            TGA: 8,
            RAWDATA: 9,
            UNKNOWN: 10
        });
        cc.macro.BlendFactor = cc.Enum({
            ONE: 1,
            ZERO: 0,
            SRC_ALPHA: 770,
            SRC_COLOR: 768,
            DST_ALPHA: 772,
            DST_COLOR: 774,
            ONE_MINUS_SRC_ALPHA: 771,
            ONE_MINUS_SRC_COLOR: 769,
            ONE_MINUS_DST_ALPHA: 773,
            ONE_MINUS_DST_COLOR: 775
        });
        cc.macro.TextAlignment = cc.Enum({
            LEFT: 0,
            CENTER: 1,
            RIGHT: 2
        });
        cc.macro.VerticalTextAlignment = cc.Enum({
            TOP: 0,
            CENTER: 1,
            BOTTOM: 2
        });
        q.exports = cc.macro
    }, {}],
    233: [function(g, q, m) {
        function h() {
            this._name = "";
            this._objFlags = 0
        }
        var e = g("./js"),
            d = g("./CCClass");
        d.fastDefine("cc.Object", h, {
            _name: "",
            _objFlags: 0
        });
        e.value(h, "Flags", {
            Destroyed: 1,
            DontSave: 8,
            EditorOnly: 16,
            Dirty: 32,
            DontDestroy: 64,
            PersistentMask: -4192741,
            Destroying: 128,
            Deactivating: 256,
            LockedInEditor: 512,
            HideInHierarchy: 1024,
            IsPreloadStarted: 8192,
            IsOnLoadStarted: 32768,
            IsOnLoadCalled: 16384,
            IsOnEnableCalled: 2048,
            IsStartCalled: 65536,
            IsEditorOnEnableCalled: 4096,
            IsPositionLocked: 2097152,
            IsRotationLocked: 131072,
            IsScaleLocked: 262144,
            IsAnchorLocked: 524288,
            IsSizeLocked: 1048576
        });
        var k = [];
        e.value(h, "_deferredDestroy", function() {
            for (var c = k.length, a = 0; a < c; ++a) {
                var b = k[a];
                b._objFlags & 1 || b._destroyImmediate()
            }
            c === k.length ? k.length = 0 : k.splice(0, c);
            !1
        });
        !1;
        g = h.prototype;
        e.getset(g, "name", function() {
            return this._name
        }, function(c) {
            this._name = c
        }, !0);
        e.get(g, "isValid", function() {
            return !(this._objFlags & 1)
        }, !0);
        !1;
        !1;
        g.destroy = function() {
            if (this._objFlags & 1) return cc.warnID(5E3), !1;
            if (this._objFlags & 4) return !1;
            this._objFlags |= 4;
            k.push(this);
            !1;
            return !0
        };
        !1;
        !1;
        g._destruct = function() {
            var c = this.constructor,
                a = c.__destruct__;
            if (!a) {
                var b = this instanceof cc._BaseNode || this instanceof cc.Component,
                    l = b ? "_id" : null;
                a = {};
                for (h in this)
                    if (this.hasOwnProperty(h) && h !== l) switch (typeof this[h]) {
                        case "string":
                            a[h] = "";
                            break;
                        case "object":
                        case "function":
                            a[h] = null
                    }
                if (cc.Class._isCCClass(c)) {
                    l = cc.Class.Attr.getClassAttrs(c);
                    for (var f = c.__props__, k = 0; k < f.length; k++) {
                        var h = f[k];
                        var g = h + cc.Class.Attr.DELIMETER +
                            "default";
                        if (g in l && (!b || "_id" !== h)) switch (typeof l[g]) {
                            case "string":
                                a[h] = "";
                                break;
                            case "object":
                            case "function":
                                a[h] = null;
                                break;
                            case "undefined":
                                a[h] = void 0
                        }
                    }
                }!0;
                b = "";
                for (h in a) l = d.IDENTIFIER_RE.test(h) ? "o." + h + "=" : "o[" + d.escapeForJS(h) + "]=", f = a[h], "" === f && (f = '""'), b += l + f + ";\n";
                a = Function("o", b);
                e.value(c, "__destruct__", a, !0)
            }
            a(this)
        };
        g._onPreDestroy = null;
        g._destroyImmediate = function() {
            this._objFlags & 1 ? cc.errorID(5E3) : (this._onPreDestroy && this._onPreDestroy(), !0, this._destruct(), this._objFlags |=
                1)
        };
        !1;
        g._deserialize = null;
        cc.isValid = function(c, a) {
            return "object" === typeof c ? !!c && !(c._objFlags & (a ? 5 : 1)) : "undefined" !== typeof c
        };
        !1;
        !1;
        cc.Object = q.exports = h
    }, {
        "./CCClass": 227,
        "./js": 248
    }],
    234: [function(g, q, m) {
        g = g("../platform/js");
        cc.SAXParser = function() {
            (!0, window.DOMParser) ? (this._isSupportDOMParser = !0, this._parser = new DOMParser) : (this._isSupportDOMParser = !1, this._parser = null)
        };
        cc.SAXParser.prototype = {
            constructor: cc.SAXParser,
            parse: function(h) {
                return this._parseXML(h)
            },
            _parseXML: function(h) {
                if (this._isSupportDOMParser) var e =
                    this._parser.parseFromString(h, "text/xml");
                else e = new ActiveXObject("Microsoft.XMLDOM"), e.async = "false", e.loadXML(h);
                return e
            }
        };
        cc.PlistParser = function() {
            cc.SAXParser.call(this)
        };
        g.extend(cc.PlistParser, cc.SAXParser);
        g.mixin(cc.PlistParser.prototype, {
            parse: function(h) {
                h = this._parseXML(h).documentElement;
                if ("plist" !== h.tagName) return cc.warnID(5100), {};
                for (var e = null, d = 0, k = h.childNodes.length; d < k && (e = h.childNodes[d], 1 !== e.nodeType); d++);
                return this._parseNode(e)
            },
            _parseNode: function(h) {
                var e = null,
                    d = h.tagName;
                if ("dict" === d) e = this._parseDict(h);
                else if ("array" === d) e = this._parseArray(h);
                else if ("string" === d)
                    if (1 === h.childNodes.length) e = h.firstChild.nodeValue;
                    else
                        for (e = "", d = 0; d < h.childNodes.length; d++) e += h.childNodes[d].nodeValue;
                else "false" === d ? e = !1 : "true" === d ? e = !0 : "real" === d ? e = parseFloat(h.firstChild.nodeValue) : "integer" === d && (e = parseInt(h.firstChild.nodeValue, 10));
                return e
            },
            _parseArray: function(h) {
                for (var e = [], d = 0, k = h.childNodes.length; d < k; d++) {
                    var c = h.childNodes[d];
                    1 === c.nodeType && e.push(this._parseNode(c))
                }
                return e
            },
            _parseDict: function(h) {
                for (var e = {}, d = null, k = 0, c = h.childNodes.length; k < c; k++) {
                    var a = h.childNodes[k];
                    1 === a.nodeType && ("key" === a.tagName ? d = a.firstChild.nodeValue : e[d] = this._parseNode(a))
                }
                return e
            }
        });
        cc.saxParser = new cc.SAXParser;
        cc.plistParser = new cc.PlistParser;
        q.exports = {
            saxParser: cc.saxParser,
            plistParser: cc.plistParser
        }
    }, {
        "../platform/js": 248
    }],
    235: [function(g, q, m) {
        cc.screen = {
            _supportsFullScreen: !1,
            _onfullscreenchange: null,
            _onfullscreenerror: null,
            _preOnFullScreenChange: null,
            _preOnFullScreenError: null,
            _preOnTouch: null,
            _touchEvent: "",
            _fn: null,
            _fnMap: ["requestFullscreen exitFullscreen fullscreenchange fullscreenEnabled fullscreenElement fullscreenerror".split(" "), "requestFullScreen exitFullScreen fullScreenchange fullScreenEnabled fullScreenElement fullscreenerror".split(" "), "webkitRequestFullScreen webkitCancelFullScreen webkitfullscreenchange webkitIsFullScreen webkitCurrentFullScreenElement webkitfullscreenerror".split(" "), "mozRequestFullScreen mozCancelFullScreen mozfullscreenchange mozFullScreen mozFullScreenElement mozfullscreenerror".split(" "),
                "msRequestFullscreen msExitFullscreen MSFullscreenChange msFullscreenEnabled msFullscreenElement msfullscreenerror".split(" ")
            ],
            init: function() {
                this._fn = {};
                var h, e, d = this._fnMap;
                var k = 0;
                for (h = d.length; k < h; k++)
                    if ((e = d[k]) && "undefined" !== typeof document[e[1]]) {
                        k = 0;
                        for (h = e.length; k < h; k++) this._fn[d[0][k]] = e[k];
                        break
                    }
                this._supportsFullScreen = void 0 !== this._fn.requestFullscreen;
                this._touchEvent = "ontouchend" in window ? "touchend" : "mousedown"
            },
            fullScreen: function() {
                return !!this._supportsFullScreen && !!(document[this._fn.fullscreenElement] ||
                    document[this._fn.webkitFullscreenElement] || document[this._fn.mozFullScreenElement])
            },
            requestFullScreen: function(h, e, d) {
                if (h && "video" === h.tagName.toLowerCase()) {
                    if (cc.sys.os === cc.sys.OS_IOS && cc.sys.isBrowser && 0 < h.readyState) {
                        h.webkitEnterFullscreen && h.webkitEnterFullscreen();
                        return
                    }
                    h.setAttribute("x5-video-player-fullscreen", "true")
                }
                if (this._supportsFullScreen) {
                    h = h || document.documentElement;
                    if (e) {
                        var k = this._fn.fullscreenchange;
                        this._onfullscreenchange && document.removeEventListener(k, this._onfullscreenchange);
                        this._onfullscreenchange = e;
                        document.addEventListener(k, e, !1)
                    }
                    d && (e = this._fn.fullscreenerror, this._onfullscreenerror && document.removeEventListener(e, this._onfullscreenerror), this._onfullscreenerror = d, document.addEventListener(e, d, {
                        once: !0
                    }));
                    h = h[this._fn.requestFullscreen]();
                    "undefined" === typeof document[this._fn.fullscreenerror] && window.Promise && h instanceof Promise && h["catch"](function(c) {})
                }
            },
            exitFullScreen: function(h) {
                if (h && "video" === h.tagName.toLowerCase()) {
                    if (cc.sys.os === cc.sys.OS_IOS && cc.sys.isBrowser) {
                        h.webkitExitFullscreen &&
                            h.webkitExitFullscreen();
                        return
                    }
                    h.setAttribute("x5-video-player-fullscreen", "false")
                }
                return !this._supportsFullScreen || document[this._fn.exitFullscreen]()
            },
            autoFullScreen: function(h, e) {
                h = h || document.body;
                this._ensureFullScreen(h, e);
                this.requestFullScreen(h, e)
            },
            disableAutoFullScreen: function(h) {
                h = cc.game.canvas || h;
                var e = this._touchEvent;
                this._preOnTouch && (h.removeEventListener(e, this._preOnTouch), this._preOnTouch = null)
            },
            _ensureFullScreen: function(h, e) {
                function d() {
                    k._preOnFullScreenError = null;
                    k._preOnTouch &&
                        c.removeEventListener(b, k._preOnTouch);
                    k._preOnTouch = function() {
                        k._preOnTouch = null;
                        k.requestFullScreen(h, e)
                    };
                    c.addEventListener(b, k._preOnTouch, {
                        once: !0
                    })
                }
                var k = this,
                    c = cc.game.canvas || h,
                    a = this._fn.fullscreenerror,
                    b = this._touchEvent;
                this._preOnFullScreenError && h.removeEventListener(a, this._preOnFullScreenError);
                this._preOnFullScreenError = d;
                h.addEventListener(a, d, {
                    once: !0
                })
            }
        };
        cc.screen.init()
    }, {}],
    236: [function(g, q, m) {
        function h() {
            cc.sys = {};
            var d = cc.sys;
            d.LANGUAGE_ENGLISH = "en";
            d.LANGUAGE_CHINESE = "zh";
            d.LANGUAGE_FRENCH = "fr";
            d.LANGUAGE_ITALIAN = "it";
            d.LANGUAGE_GERMAN = "de";
            d.LANGUAGE_SPANISH = "es";
            d.LANGUAGE_DUTCH = "du";
            d.LANGUAGE_RUSSIAN = "ru";
            d.LANGUAGE_KOREAN = "ko";
            d.LANGUAGE_JAPANESE = "ja";
            d.LANGUAGE_HUNGARIAN = "hu";
            d.LANGUAGE_PORTUGUESE = "pt";
            d.LANGUAGE_ARABIC = "ar";
            d.LANGUAGE_NORWEGIAN = "no";
            d.LANGUAGE_POLISH = "pl";
            d.LANGUAGE_TURKISH = "tr";
            d.LANGUAGE_UKRAINIAN = "uk";
            d.LANGUAGE_ROMANIAN = "ro";
            d.LANGUAGE_BULGARIAN = "bg";
            d.LANGUAGE_UNKNOWN = "unknown";
            d.OS_OPENHARMONY = "OpenHarmony";
            d.OS_IOS = "iOS";
            d.OS_ANDROID =
                "Android";
            d.OS_WINDOWS = "Windows";
            d.OS_MARMALADE = "Marmalade";
            d.OS_LINUX = "Linux";
            d.OS_BADA = "Bada";
            d.OS_BLACKBERRY = "Blackberry";
            d.OS_OSX = "OS X";
            d.OS_WP8 = "WP8";
            d.OS_WINRT = "WINRT";
            d.OS_UNKNOWN = "Unknown";
            d.UNKNOWN = -1;
            d.WIN32 = 0;
            d.LINUX = 1;
            d.MACOS = 2;
            d.ANDROID = 3;
            d.IPHONE = 4;
            d.IPAD = 5;
            d.BLACKBERRY = 6;
            d.NACL = 7;
            d.EMSCRIPTEN = 8;
            d.TIZEN = 9;
            d.WINRT = 10;
            d.WP8 = 11;
            d.OPENHARMONY = 12;
            d.MOBILE_BROWSER = 100;
            d.DESKTOP_BROWSER = 101;
            d.EDITOR_PAGE = 102;
            d.EDITOR_CORE = 103;
            d.WECHAT_GAME = 104;
            d.QQ_PLAY = 105;
            d.FB_PLAYABLE_ADS = 106;
            d.BAIDU_GAME =
                107;
            d.VIVO_GAME = 108;
            d.OPPO_GAME = 109;
            d.HUAWEI_GAME = 110;
            d.XIAOMI_GAME = 111;
            d.JKW_GAME = 112;
            d.ALIPAY_GAME = 113;
            d.WECHAT_GAME_SUB = 114;
            d.BAIDU_GAME_SUB = 115;
            d.QTT_GAME = 116;
            d.BYTEDANCE_GAME = 117;
            d.BYTEDANCE_GAME_SUB = 118;
            d.LINKSURE = 119;
            d.TAOBAO = 120;
            d.TAOBAO_MINIGAME = 121;
            d.BROWSER_TYPE_WECHAT = "wechat";
            d.BROWSER_TYPE_ANDROID = "androidbrowser";
            d.BROWSER_TYPE_IE = "ie";
            d.BROWSER_TYPE_EDGE = "edge";
            d.BROWSER_TYPE_QQ = "qqbrowser";
            d.BROWSER_TYPE_MOBILE_QQ = "mqqbrowser";
            d.BROWSER_TYPE_UC = "ucbrowser";
            d.BROWSER_TYPE_UCBS = "ucbs";
            d.BROWSER_TYPE_360 = "360browser";
            d.BROWSER_TYPE_BAIDU_APP = "baiduboxapp";
            d.BROWSER_TYPE_BAIDU = "baidubrowser";
            d.BROWSER_TYPE_MAXTHON = "maxthon";
            d.BROWSER_TYPE_OPERA = "opera";
            d.BROWSER_TYPE_OUPENG = "oupeng";
            d.BROWSER_TYPE_MIUI = "miuibrowser";
            d.BROWSER_TYPE_FIREFOX = "firefox";
            d.BROWSER_TYPE_SAFARI = "safari";
            d.BROWSER_TYPE_CHROME = "chrome";
            d.BROWSER_TYPE_LIEBAO = "liebao";
            d.BROWSER_TYPE_QZONE = "qzone";
            d.BROWSER_TYPE_SOUGOU = "sogou";
            d.BROWSER_TYPE_HUAWEI = "huawei";
            d.BROWSER_TYPE_UNKNOWN = "unknown";
            d.isNative = !1;
            d.isBrowser =
                "object" === typeof window && "object" === typeof document && !0;
            d.glExtension = function(a) {
                return !!cc.renderer.device.ext(a)
            };
            d.getMaxJointMatrixSize = function() {
                if (!d._maxJointMatrixSize) {
                    var a = cc.game._renderContext;
                    a = Math.floor(a.getParameter(a.MAX_VERTEX_UNIFORM_VECTORS) / 4) - 10;
                    d._maxJointMatrixSize = 50 > a ? 0 : 50
                }
                return d._maxJointMatrixSize
            };
            d.getSafeAreaRect = function() {
                var a = cc.view.getVisibleSize();
                return cc.rect(0, 0, a.width, a.height)
            };
            if (e.__globalAdapter && e.__globalAdapter.adaptSys) e.__globalAdapter.adaptSys(d);
            else {
                !1;
                !1;
                !1;
                var k = window,
                    c = k.navigator,
                    a = document,
                    b = a.documentElement,
                    l = c.userAgent.toLowerCase();
                !1;
                d.isMobile = /mobile|android|iphone|ipad/.test(l);
                "undefined" !== typeof FbPlayableAd ? d.platform = d.FB_PLAYABLE_ADS : d.platform = d.isMobile ? d.MOBILE_BROWSER : d.DESKTOP_BROWSER;
                var f = (f = c.language) || c.browserLanguage;
                d.languageCode = f.toLowerCase();
                f = f ? f.split("-")[0] : d.LANGUAGE_ENGLISH;
                d.language = f;
                var h = !1;
                f = !1;
                var g = "";
                var v = 0;
                var p = /android\s*(\d+(?:\.\d+)*)/i.exec(l) || /android\s*(\d+(?:\.\d+)*)/i.exec(c.platform);
                p && (h = !0, g = p[1] || "", v = parseInt(g) || 0);
                if (p = /(iPad|iPhone|iPod).*OS ((\d+_?){2,3})/i.exec(l)) f = !0, g = p[2] || "", v = parseInt(g) || 0;
                else if (/(iPhone|iPad|iPod)/.exec(c.platform) || "MacIntel" === c.platform && c.maxTouchPoints && 1 < c.maxTouchPoints) f = !0, g = "", v = 0;
                p = d.OS_UNKNOWN; - 1 !== c.appVersion.indexOf("Win") ? p = d.OS_WINDOWS : f ? p = d.OS_IOS : -1 !== c.appVersion.indexOf("Mac") ? p = d.OS_OSX : -1 !== c.appVersion.indexOf("X11") && -1 === c.appVersion.indexOf("Linux") ? p = d.OS_UNIX : h ? p = d.OS_ANDROID : -1 === c.appVersion.indexOf("Linux") &&
                    -1 === l.indexOf("ubuntu") || (p = d.OS_LINUX);
                d.os = p;
                d.osVersion = g;
                d.osMainVersion = v;
                d.browserType = d.BROWSER_TYPE_UNKNOWN;
                (function() {
                    var a = /qq|ucbrowser|ubrowser|edge|HuaweiBrowser/i,
                        b = /chrome|safari|firefox|trident|opera|opr\/|oupeng/i;
                    a = (a = /mqqbrowser|micromessenger|qqbrowser|sogou|qzone|liebao|maxthon|ucbs|360 aphone|360browser|baiduboxapp|baidubrowser|maxthon|mxbrowser|miuibrowser/i.exec(l) || a.exec(l) || b.exec(l)) ? a[0].toLowerCase() : d.BROWSER_TYPE_UNKNOWN;
                    "safari" === a && h ? a = d.BROWSER_TYPE_ANDROID : "qq" ===
                        a && l.match(/android.*applewebkit/i) && (a = d.BROWSER_TYPE_ANDROID);
                    b = {
                        micromessenger: d.BROWSER_TYPE_WECHAT,
                        trident: d.BROWSER_TYPE_IE,
                        edge: d.BROWSER_TYPE_EDGE,
                        "360 aphone": d.BROWSER_TYPE_360,
                        mxbrowser: d.BROWSER_TYPE_MAXTHON,
                        "opr/": d.BROWSER_TYPE_OPERA,
                        ubrowser: d.BROWSER_TYPE_UC,
                        huaweibrowser: d.BROWSER_TYPE_HUAWEI
                    };
                    "qqbrowser" !== a && "mqqbrowser" !== a || l.match(/wechat|micromessenger/i) && (a = d.BROWSER_TYPE_WECHAT);
                    d.browserType = b[a] || a
                })();
                d.browserVersion = "";
                (function() {
                    var a = /(qq|chrome|safari|firefox|trident|opera|opr\/|oupeng)(mobile)?(browser)?\/?([\d.]+)/i,
                        b = l.match(/(mqqbrowser|micromessenger|qqbrowser|sogou|qzone|liebao|maxthon|uc|ucbs|360 aphone|360|baiduboxapp|baidu|maxthon|mxbrowser|miui(?:.hybrid)?)(mobile)?(browser)?\/?([\d.]+)/i);
                    b || (b = l.match(a));
                    d.browserVersion = b ? b[4] : ""
                })();
                f = window.innerWidth || document.documentElement.clientWidth;
                g = window.innerHeight || document.documentElement.clientHeight;
                v = window.devicePixelRatio || 1;
                d.windowPixelResolution = {
                    width: v * f,
                    height: v * g
                };
                d._checkWebGLRenderMode = function() {
                    if (cc.game.renderType !== cc.game.RENDER_TYPE_WEBGL) throw Error("This feature supports WebGL render mode only.");
                };
                f = document.createElement("canvas");
                try {
                    var t = d.localStorage = k.localStorage;
                    t.setItem("storage", "");
                    t.removeItem("storage");
                    t = null
                } catch (w) {
                    t = function() {
                        cc.warnID(5200)
                    }, d.localStorage = {
                        getItem: t,
                        setItem: t,
                        removeItem: t,
                        clear: t
                    }
                }
                t = f.toDataURL("image/webp").startsWith("data:image/webp");
                g = !!f.getContext("2d");
                v = !1;
                !1;
                k.WebGLRenderingContext && (v = !0);
                var x = d.capabilities = {
                    canvas: g,
                    opengl: v,
                    webp: t,
                    imageBitmap: !1
                };
                "undefined" !== typeof createImageBitmap && "undefined" !== typeof Blob && (f.width = f.height = 2, createImageBitmap(f, {}).then(function(a) {
                    x.imageBitmap = !0;
                    a.close && a.close()
                })["catch"](function(a) {}));
                (void 0 !== b.ontouchstart || void 0 !== a.ontouchstart || c.msPointerEnabled || "string" === typeof __wxjs_environment && "miniprogram" === __wxjs_environment) && (x.touches = !0);
                void 0 !== b.onmouseup && (x.mouse = !0);
                void 0 !== b.onkeyup && (x.keyboard = !0);
                (k.DeviceMotionEvent || k.DeviceOrientationEvent) && (x.accelerometer = !0);
                var z = {
                    ONLY_ONE: !1,
                    WEB_AUDIO: !!(window.AudioContext || window.webkitAudioContext || window.mozAudioContext),
                    DELAY_CREATE_CTX: !1
                };
                d.os === d.OS_IOS && (z.USE_LOADER_EVENT = "loadedmetadata");
                d.browserType === d.BROWSER_TYPE_FIREFOX && (z.DELAY_CREATE_CTX = !0, z.USE_LOADER_EVENT = "canplay");
                d.os === d.OS_ANDROID && d.browserType === d.BROWSER_TYPE_UC && (z.ONE_SOURCE = !0);
                try {
                    z.WEB_AUDIO && (z.context = new(window.AudioContext || window.webkitAudioContext || window.mozAudioContext), z.DELAY_CREATE_CTX && setTimeout(function() {
                        z.context = new(window.AudioContext || window.webkitAudioContext || window.mozAudioContext)
                    }, 0))
                } catch (w) {
                    z.WEB_AUDIO = !1, cc.logID(5201)
                }
                var E = [];
                (function() {
                    var a = document.createElement("audio");
                    a.canPlayType && (a.canPlayType('audio/ogg; codecs="vorbis"') && E.push(".ogg"), a.canPlayType("audio/mpeg") && E.push(".mp3"), a.canPlayType('audio/wav; codecs="1"') && E.push(".wav"), a.canPlayType("audio/mp4") && E.push(".mp4"), a.canPlayType("audio/x-m4a") && E.push(".m4a"))
                })();
                z.format = E;
                d.__audioSupport = z
            }
            d.NetworkType = {
                NONE: 0,
                LAN: 1,
                WWAN: 2
            };
            d.getNetworkType = function() {
                return d.NetworkType.LAN
            };
            d.getBatteryLevel = function() {
                return 1
            };
            d.garbageCollect = function() {};
            d.restartVM = function() {};
            d.isObjectValid = function(a) {
                return a ? !0 : !1
            };
            d.dump = function() {
                var a = "" + ("isMobile : " + this.isMobile + "\r\n");
                a += "language : " + this.language + "\r\n";
                a += "browserType : " + this.browserType + "\r\n";
                a += "browserVersion : " + this.browserVersion + "\r\n";
                a += "capabilities : " + JSON.stringify(this.capabilities) + "\r\n";
                a += "os : " + this.os + "\r\n";
                a += "osVersion : " + this.osVersion + "\r\n";
                a += "platform : " + this.platform + "\r\n";
                a += "Using " + (cc.game.renderType === cc.game.RENDER_TYPE_WEBGL ? "WEBGL" : "CANVAS") +
                    " renderer.\r\n";
                cc.log(a)
            };
            d.openURL = function(a) {
                !1;
                !1;
                window.open(a)
            };
            d.now = function() {
                return Date.now ? Date.now() : +new Date
            };
            return d
        }!0;
        var e = "undefined" === typeof window ? global : window;
        g = cc && cc.sys ? cc.sys : h();
        q.exports = g
    }, {}],
    237: [function(g, q, m) {
        var h = g("../event/event-target");
        m = g("../platform/js");
        var e = g("../renderer");
        g("../platform/CCClass");
        var d = {
            init: function() {
                this.html = document.getElementsByTagName("html")[0]
            },
            availWidth: function(a) {
                return a && a !== this.html ? a.clientWidth : window.innerWidth
            },
            availHeight: function(a) {
                return a && a !== this.html ? a.clientHeight : window.innerHeight
            },
            meta: {
                width: "device-width"
            },
            adaptationType: cc.sys.browserType
        };
        cc.sys.os === cc.sys.OS_IOS && (d.adaptationType = cc.sys.BROWSER_TYPE_SAFARI);
        switch (d.adaptationType) {
            case cc.sys.BROWSER_TYPE_SAFARI:
            case cc.sys.BROWSER_TYPE_SOUGOU:
            case cc.sys.BROWSER_TYPE_UC:
                d.meta["minimal-ui"] = "true", d.availWidth = function(a) {
                    return a.clientWidth
                }, d.availHeight = function(a) {
                    return a.clientHeight
                }
        }
        var k = null,
            c = function() {
                h.call(this);
                var a =
                    cc.ContainerStrategy,
                    b = cc.ContentStrategy;
                d.init(this);
                this._frameSize = cc.size(0, 0);
                this._designResolutionSize = cc.size(0, 0);
                this._originalDesignResolutionSize = cc.size(0, 0);
                this._scaleY = this._scaleX = 1;
                this._viewportRect = cc.rect(0, 0, 0, 0);
                this._visibleRect = cc.rect(0, 0, 0, 0);
                this._autoFullScreen = !1;
                this._devicePixelRatio = 1;
                !1;
                this._maxPixelRatio = 2;
                this._retinaEnabled = !1;
                this._resizeCallback = null;
                this._resizeWithBrowserSize = this._resizing = !1;
                this._orientationChanging = !0;
                this._isRotated = !1;
                this._orientation =
                    cc.macro.ORIENTATION_AUTO;
                this._isAdjustViewport = !0;
                this._antiAliasEnabled = !1;
                this._resolutionPolicy = null;
                this._rpExactFit = new cc.ResolutionPolicy(a.EQUAL_TO_FRAME, b.EXACT_FIT);
                this._rpShowAll = new cc.ResolutionPolicy(a.EQUAL_TO_FRAME, b.SHOW_ALL);
                this._rpNoBorder = new cc.ResolutionPolicy(a.EQUAL_TO_FRAME, b.NO_BORDER);
                this._rpFixedHeight = new cc.ResolutionPolicy(a.EQUAL_TO_FRAME, b.FIXED_HEIGHT);
                this._rpFixedWidth = new cc.ResolutionPolicy(a.EQUAL_TO_FRAME, b.FIXED_WIDTH);
                cc.game.once(cc.game.EVENT_ENGINE_INITED,
                    this.init, this)
            };
        cc.js.extend(c, h);
        cc.js.mixin(c.prototype, {
            init: function() {
                this._initFrameSize();
                var a = cc.game.canvas.width,
                    b = cc.game.canvas.height;
                this._designResolutionSize.width = a;
                this._designResolutionSize.height = b;
                this._originalDesignResolutionSize.width = a;
                this._originalDesignResolutionSize.height = b;
                this._viewportRect.width = a;
                this._viewportRect.height = b;
                this._visibleRect.width = a;
                this._visibleRect.height = b;
                cc.winSize.width = this._visibleRect.width;
                cc.winSize.height = this._visibleRect.height;
                cc.visibleRect &&
                    cc.visibleRect.init(this._visibleRect)
            },
            _resizeEvent: function(a) {
                var b = this.setDesignResolutionSize ? this : cc.view;
                var c = cc.sys;
                if (c.browserType === c.BROWSER_TYPE_UC && c.os === c.OS_IOS) setTimeout(function() {
                    b._resizeEvent(a)
                }, 0);
                else {
                    c = b._frameSize.width;
                    var d = b._frameSize.height,
                        k = b._isRotated;
                    if (cc.sys.isMobile) {
                        var e = cc.game.container.style,
                            h = e.margin;
                        e.margin = "0";
                        e.display = "none";
                        b._initFrameSize();
                        e.margin = h;
                        e.display = "block"
                    } else b._initFrameSize();
                    if (!0 === a || b._isRotated !== k || b._frameSize.width !==
                        c || b._frameSize.height !== d) c = b._originalDesignResolutionSize.width, d = b._originalDesignResolutionSize.height, b._resizing = !0, 0 < c && b.setDesignResolutionSize(c, d, b._resolutionPolicy), b._resizing = !1, b.emit("canvas-resize"), b._resizeCallback && b._resizeCallback.call()
                }
            },
            _orientationChange: function() {
                cc.view._orientationChanging = !0;
                cc.view._resizeEvent();
                cc.sys.browserType === cc.sys.BROWSER_TYPE_SAFARI && cc.sys.isMobile && setTimeout(function() {
                    window.innerHeight > window.innerWidth && window.scrollTo(0, 1)
                }, 500)
            },
            _resize: function() {
                cc.view._resizeEvent(!1)
            },
            resizeWithBrowserSize: function(a) {
                a ? this._resizeWithBrowserSize || (this._resizeWithBrowserSize = !0, window.addEventListener("resize", this._resize), window.addEventListener("orientationchange", this._orientationChange)) : this._resizeWithBrowserSize && (this._resizeWithBrowserSize = !1, window.removeEventListener("resize", this._resize), window.removeEventListener("orientationchange", this._orientationChange))
            },
            setResizeCallback: function(a) {
                !1;
                "function" !== typeof a && null !=
                    a || (this._resizeCallback = a)
            },
            setOrientation: function(a) {
                (a &= cc.macro.ORIENTATION_AUTO) && this._orientation !== a && (this._orientation = a, this.setDesignResolutionSize(this._originalDesignResolutionSize.width, this._originalDesignResolutionSize.height, this._resolutionPolicy))
            },
            _initFrameSize: function() {
                var a = this._frameSize,
                    b = d.availWidth(cc.game.frame),
                    c = d.availHeight(cc.game.frame),
                    f = b >= c;
                (!1, !cc.sys.isMobile) || f && this._orientation & cc.macro.ORIENTATION_LANDSCAPE || !f && this._orientation & cc.macro.ORIENTATION_PORTRAIT ?
                    (a.width = b, a.height = c, cc.game.container.style["-webkit-transform"] = "rotate(0deg)", cc.game.container.style.transform = "rotate(0deg)", this._isRotated = !1) : (a.width = c, a.height = b, cc.game.container.style["-webkit-transform"] = "rotate(90deg)", cc.game.container.style.transform = "rotate(90deg)", cc.game.container.style["-webkit-transform-origin"] = "0px 0px 0px", cc.game.container.style.transformOrigin = "0px 0px 0px", this._isRotated = !0);
                this._orientationChanging && setTimeout(function() {
                    cc.view._orientationChanging = !1
                }, 1E3)
            },
            _setViewportMeta: function(a, b) {
                var c = document.getElementById("cocosMetaElement");
                c && b && document.head.removeChild(c);
                var d = document.getElementsByName("viewport");
                d = d ? d[0] : null;
                var k;
                var e = d ? d.content : "";
                c = c || document.createElement("meta");
                c.id = "cocosMetaElement";
                c.name = "viewport";
                c.content = "";
                for (k in a)
                    if (-1 == e.indexOf(k)) e += "," + k + "=" + a[k];
                    else if (b) {
                    var h = new RegExp(k + "s*=s*[^,]+");
                    e = e.replace(h, k + "=" + a[k])
                }
                /^,/.test(e) && (e = e.substr(1));
                c.content = e;
                d && (d.content = e);
                document.head.appendChild(c)
            },
            _adjustViewportMeta: function() {
                this._isAdjustViewport && (this._setViewportMeta(d.meta, !1), this._isAdjustViewport = !1)
            },
            adjustViewportMeta: function(a) {
                this._isAdjustViewport = a
            },
            enableRetina: function(a) {
                this._retinaEnabled = !!a
            },
            isRetinaEnabled: function() {
                return this._retinaEnabled
            },
            enableAntiAlias: function(a) {
                cc.warnID(9200);
                if (this._antiAliasEnabled !== a)
                    if (this._antiAliasEnabled = a, cc.game.renderType === cc.game.RENDER_TYPE_WEBGL) cc.assetManager.assets.forEach(function(b) {
                        if (b instanceof cc.Texture2D) {
                            var c =
                                cc.Texture2D.Filter;
                            a ? b.setFilters(c.LINEAR, c.LINEAR) : b.setFilters(c.NEAREST, c.NEAREST)
                        }
                    });
                    else if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {
                    var b = cc.game.canvas.getContext("2d");
                    b.imageSmoothingEnabled = a;
                    b.mozImageSmoothingEnabled = a
                }
            },
            isAntiAliasEnabled: function() {
                return this._antiAliasEnabled
            },
            enableAutoFullScreen: function(a) {
                a && a !== this._autoFullScreen && cc.sys.isMobile ? (this._autoFullScreen = !0, cc.screen.autoFullScreen(cc.game.frame)) : (this._autoFullScreen = !1, cc.screen.disableAutoFullScreen(cc.game.frame))
            },
            isAutoFullScreenEnabled: function() {
                return this._autoFullScreen
            },
            setCanvasSize: function(a, b) {
                var c = cc.game.canvas,
                    d = cc.game.container;
                c.width = a * this._devicePixelRatio;
                c.height = b * this._devicePixelRatio;
                c.style.width = a + "px";
                c.style.height = b + "px";
                d.style.width = a + "px";
                d.style.height = b + "px";
                this._resizeEvent()
            },
            getCanvasSize: function() {
                return cc.size(cc.game.canvas.width, cc.game.canvas.height)
            },
            getFrameSize: function() {
                return cc.size(this._frameSize.width, this._frameSize.height)
            },
            setFrameSize: function(a,
                b) {
                this._frameSize.width = a;
                this._frameSize.height = b;
                cc.game.frame.style.width = a + "px";
                cc.game.frame.style.height = b + "px";
                this._resizeEvent(!0)
            },
            getVisibleSize: function() {
                return cc.size(this._visibleRect.width, this._visibleRect.height)
            },
            getVisibleSizeInPixel: function() {
                return cc.size(this._visibleRect.width * this._scaleX, this._visibleRect.height * this._scaleY)
            },
            getVisibleOrigin: function() {
                return cc.v2(this._visibleRect.x, this._visibleRect.y)
            },
            getVisibleOriginInPixel: function() {
                return cc.v2(this._visibleRect.x *
                    this._scaleX, this._visibleRect.y * this._scaleY)
            },
            getResolutionPolicy: function() {
                return this._resolutionPolicy
            },
            setResolutionPolicy: function(a) {
                if (a instanceof cc.ResolutionPolicy) this._resolutionPolicy = a;
                else {
                    var b = cc.ResolutionPolicy;
                    a === b.EXACT_FIT && (this._resolutionPolicy = this._rpExactFit);
                    a === b.SHOW_ALL && (this._resolutionPolicy = this._rpShowAll);
                    a === b.NO_BORDER && (this._resolutionPolicy = this._rpNoBorder);
                    a === b.FIXED_HEIGHT && (this._resolutionPolicy = this._rpFixedHeight);
                    a === b.FIXED_WIDTH && (this._resolutionPolicy =
                        this._rpFixedWidth)
                }
            },
            setDesignResolutionSize: function(a, b, c) {
                if (0 < a && 0 < b)
                    if (this.setResolutionPolicy(c), (c = this._resolutionPolicy) && c.preApply(this), cc.sys.isMobile && this._adjustViewportMeta(), this._orientationChanging = !0, this._resizing || this._initFrameSize(), c) {
                        this._originalDesignResolutionSize.width = this._designResolutionSize.width = a;
                        this._originalDesignResolutionSize.height = this._designResolutionSize.height = b;
                        var d = c.apply(this, this._designResolutionSize);
                        d.scale && 2 === d.scale.length && (this._scaleX =
                            d.scale[0], this._scaleY = d.scale[1]);
                        d.viewport && (a = this._viewportRect, b = this._visibleRect, d = d.viewport, a.x = d.x, a.y = d.y, a.width = d.width, a.height = d.height, b.x = 0, b.y = 0, b.width = d.width / this._scaleX, b.height = d.height / this._scaleY);
                        c.postApply(this);
                        cc.winSize.width = this._visibleRect.width;
                        cc.winSize.height = this._visibleRect.height;
                        cc.visibleRect && cc.visibleRect.init(this._visibleRect);
                        e.updateCameraViewport();
                        cc.internal.inputManager._updateCanvasBoundingRect();
                        this.emit("design-resolution-changed")
                    } else cc.logID(2201);
                else cc.errorID(2200)
            },
            getDesignResolutionSize: function() {
                return cc.size(this._designResolutionSize.width, this._designResolutionSize.height)
            },
            setRealPixelResolution: function(a, b, c) {
                !0;
                !0;
                this._setViewportMeta({
                    width: a
                }, !0);
                document.documentElement.style.width = a + "px";
                document.body.style.width = a + "px";
                document.body.style.left = "0px";
                document.body.style.top = "0px";
                this.setDesignResolutionSize(a, b, c)
            },
            setViewportInPoints: function(a, b, c, d) {
                var f = this._scaleX,
                    l = this._scaleY;
                cc.game._renderContext.viewport(a *
                    f + this._viewportRect.x, b * l + this._viewportRect.y, c * f, d * l)
            },
            setScissorInPoints: function(a, b, c, d) {
                var f = this._scaleX,
                    l = this._scaleY;
                a = Math.ceil(a * f + this._viewportRect.x);
                b = Math.ceil(b * l + this._viewportRect.y);
                c = Math.ceil(c * f);
                d = Math.ceil(d * l);
                l = cc.game._renderContext;
                k || (f = l.getParameter(l.SCISSOR_BOX), k = cc.rect(f[0], f[1], f[2], f[3]));
                if (k.x !== a || k.y !== b || k.width !== c || k.height !== d) k.x = a, k.y = b, k.width = c, k.height = d, l.scissor(a, b, c, d)
            },
            isScissorEnabled: function() {
                return cc.game._renderContext.isEnabled(gl.SCISSOR_TEST)
            },
            getScissorRect: function() {
                if (!k) {
                    var a = gl.getParameter(gl.SCISSOR_BOX);
                    k = cc.rect(a[0], a[1], a[2], a[3])
                }
                a = 1 / this._scaleX;
                var b = 1 / this._scaleY;
                return cc.rect((k.x - this._viewportRect.x) * a, (k.y - this._viewportRect.y) * b, k.width * a, k.height * b)
            },
            getViewportRect: function() {
                return this._viewportRect
            },
            getScaleX: function() {
                return this._scaleX
            },
            getScaleY: function() {
                return this._scaleY
            },
            getDevicePixelRatio: function() {
                return this._devicePixelRatio
            },
            convertToLocationInView: function(a, b, c, d) {
                d = d || cc.v2();
                a = this._devicePixelRatio *
                    (a - (c.adjustedLeft ? c.adjustedLeft : c.left));
                b = this._devicePixelRatio * ((c.adjustedTop ? c.adjustedTop : c.top) + c.height - b);
                this._isRotated ? (d.x = cc.game.canvas.width - b, d.y = a) : (d.x = a, d.y = b);
                return d
            },
            _convertMouseToLocationInView: function(a, b) {
                var c = this._viewportRect;
                a.x = (this._devicePixelRatio * (a.x - b.left) - c.x) / this._scaleX;
                a.y = (this._devicePixelRatio * (b.top + b.height - a.y) - c.y) / this._scaleY
            },
            _convertPointWithScale: function(a) {
                var b = this._viewportRect;
                a.x = (a.x - b.x) / this._scaleX;
                a.y = (a.y - b.y) / this._scaleY
            },
            _convertTouchesWithScale: function(a) {
                for (var b = this._viewportRect, c = this._scaleX, d = this._scaleY, k, e, h = 0; h < a.length; h++) k = a[h], e = k._point, k = k._prevPoint, e.x = (e.x - b.x) / c, e.y = (e.y - b.y) / d, k.x = (k.x - b.x) / c, k.y = (k.y - b.y) / d
            }
        });
        cc.ContainerStrategy = cc.Class({
            name: "ContainerStrategy",
            preApply: function(a) {},
            apply: function(a, b) {},
            postApply: function(a) {},
            _setupContainer: function(a, b, c) {
                var d = cc.game.canvas;
                this._setupStyle(a, b, c);
                var l = a._devicePixelRatio = 1;
                !1;
                a.isRetinaEnabled() && (l = a._devicePixelRatio = Math.min(a._maxPixelRatio,
                    window.devicePixelRatio || 1));
                d.width = b * l;
                d.height = c * l
            },
            _setupStyle: function(a, b, c) {
                var d = cc.game.canvas,
                    l = cc.game.container;
                cc.sys.os === cc.sys.OS_ANDROID && (document.body.style.width = (a._isRotated ? c : b) + "px", document.body.style.height = (a._isRotated ? b : c) + "px");
                l.style.width = d.style.width = b + "px";
                l.style.height = d.style.height = c + "px"
            },
            _fixContainer: function() {
                document.body.insertBefore(cc.game.container, document.body.firstChild);
                var a = document.body.style;
                a.width = window.innerWidth + "px";
                a.height = window.innerHeight +
                    "px";
                a.overflow = "hidden";
                a = cc.game.container.style;
                a.position = "fixed";
                a.left = a.top = "0px";
                document.body.scrollTop = 0
            }
        });
        cc.ContentStrategy = cc.Class({
            name: "ContentStrategy",
            ctor: function() {
                this._result = {
                    scale: [1, 1],
                    viewport: null
                }
            },
            _buildResult: function(a, b, c, d, k, e) {
                2 > Math.abs(a - c) && (c = a);
                2 > Math.abs(b - d) && (d = b);
                a = cc.rect((a - c) / 2, (b - d) / 2, c, d);
                cc.game.renderType === cc.game.RENDER_TYPE_CANVAS;
                this._result.scale = [k, e];
                this._result.viewport = a;
                return this._result
            },
            preApply: function(a) {},
            apply: function(a, b) {
                return {
                    scale: [1,
                        1
                    ]
                }
            },
            postApply: function(a) {}
        });
        (function() {
            var a = cc.Class({
                    name: "EqualToFrame",
                    extends: cc.ContainerStrategy,
                    apply: function(a) {
                        var b = a._frameSize.height,
                            c = cc.game.container.style;
                        this._setupContainer(a, a._frameSize.width, a._frameSize.height);
                        a._isRotated ? c.margin = "0 0 0 " + b + "px" : c.margin = "0px";
                        c.padding = "0px"
                    }
                }),
                b = cc.Class({
                    name: "ProportionalToFrame",
                    extends: cc.ContainerStrategy,
                    apply: function(a, b) {
                        var c = a._frameSize.width,
                            d = a._frameSize.height,
                            f = cc.game.container.style,
                            l = b.width;
                        b = b.height;
                        var k =
                            c / l,
                            e = d / b,
                            h, n;
                        k < e ? (h = c, n = b * k) : (h = l * e, n = d);
                        l = Math.round((c - h) / 2);
                        n = Math.round((d - n) / 2);
                        this._setupContainer(a, c - 2 * l, d - 2 * n);
                        !0;
                        a._isRotated ? f.margin = "0 0 0 " + d + "px" : f.margin = "0px";
                        f.paddingLeft = l + "px";
                        f.paddingRight = l + "px";
                        f.paddingTop = n + "px";
                        f.paddingBottom = n + "px"
                    }
                });
            cc.Class({
                name: "EqualToWindow",
                extends: a,
                preApply: function(a) {
                    this._super(a);
                    cc.game.frame = document.documentElement
                },
                apply: function(a) {
                    this._super(a);
                    this._fixContainer()
                }
            });
            cc.Class({
                name: "ProportionalToWindow",
                extends: b,
                preApply: function(a) {
                    this._super(a);
                    cc.game.frame = document.documentElement
                },
                apply: function(a, b) {
                    this._super(a, b);
                    this._fixContainer()
                }
            });
            var d = cc.Class({
                    name: "OriginalContainer",
                    extends: cc.ContainerStrategy,
                    apply: function(a) {
                        this._setupContainer(a, cc.game.canvas.width, cc.game.canvas.height)
                    }
                }),
                f = ("undefined" === typeof window ? global : window).__globalAdapter;
            f && (f.adaptContainerStrategy && f.adaptContainerStrategy(cc.ContainerStrategy.prototype), f.adaptView && f.adaptView(c.prototype));
            cc.ContainerStrategy.EQUAL_TO_FRAME = new a;
            cc.ContainerStrategy.PROPORTION_TO_FRAME =
                new b;
            cc.ContainerStrategy.ORIGINAL_CONTAINER = new d;
            a = cc.Class({
                name: "ExactFit",
                extends: cc.ContentStrategy,
                apply: function(a, b) {
                    a = cc.game.canvas.width;
                    var c = cc.game.canvas.height;
                    return this._buildResult(a, c, a, c, a / b.width, c / b.height)
                }
            });
            b = cc.Class({
                name: "ShowAll",
                extends: cc.ContentStrategy,
                apply: function(a, b) {
                    a = cc.game.canvas.width;
                    var c = cc.game.canvas.height,
                        d = b.width;
                    b = b.height;
                    var f = a / d,
                        l = c / b,
                        k = 0,
                        e, h;
                    f < l ? (k = f, e = a, h = b * k) : (k = l, e = d * k, h = c);
                    return this._buildResult(a, c, e, h, k, k)
                }
            });
            d = cc.Class({
                name: "NoBorder",
                extends: cc.ContentStrategy,
                apply: function(a, b) {
                    a = cc.game.canvas.width;
                    var c = cc.game.canvas.height,
                        d = b.width;
                    b = b.height;
                    var f = a / d,
                        l = c / b,
                        k, e, h;
                    f < l ? (k = l, e = d * k, h = c) : (k = f, e = a, h = b * k);
                    return this._buildResult(a, c, e, h, k, k)
                }
            });
            f = cc.Class({
                name: "FixedHeight",
                extends: cc.ContentStrategy,
                apply: function(a, b) {
                    a = cc.game.canvas.width;
                    var c = cc.game.canvas.height;
                    b = c / b.height;
                    return this._buildResult(a, c, a, c, b, b)
                }
            });
            var k = cc.Class({
                name: "FixedWidth",
                extends: cc.ContentStrategy,
                apply: function(a, b) {
                    a = cc.game.canvas.width;
                    var c = cc.game.canvas.height;
                    b = a / b.width;
                    return this._buildResult(a, c, a, c, b, b)
                }
            });
            cc.ContentStrategy.EXACT_FIT = new a;
            cc.ContentStrategy.SHOW_ALL = new b;
            cc.ContentStrategy.NO_BORDER = new d;
            cc.ContentStrategy.FIXED_HEIGHT = new f;
            cc.ContentStrategy.FIXED_WIDTH = new k
        })();
        cc.ResolutionPolicy = cc.Class({
            name: "cc.ResolutionPolicy",
            ctor: function(a, b) {
                this._contentStrategy = this._containerStrategy = null;
                this.setContainerStrategy(a);
                this.setContentStrategy(b)
            },
            preApply: function(a) {
                this._containerStrategy.preApply(a);
                this._contentStrategy.preApply(a)
            },
            apply: function(a, b) {
                this._containerStrategy.apply(a, b);
                return this._contentStrategy.apply(a, b)
            },
            postApply: function(a) {
                this._containerStrategy.postApply(a);
                this._contentStrategy.postApply(a)
            },
            setContainerStrategy: function(a) {
                a instanceof cc.ContainerStrategy && (this._containerStrategy = a)
            },
            setContentStrategy: function(a) {
                a instanceof cc.ContentStrategy && (this._contentStrategy = a)
            }
        });
        m.get(cc.ResolutionPolicy.prototype, "canvasSize", function() {
            return cc.v2(cc.game.canvas.width,
                cc.game.canvas.height)
        });
        cc.ResolutionPolicy.EXACT_FIT = 0;
        cc.ResolutionPolicy.NO_BORDER = 1;
        cc.ResolutionPolicy.SHOW_ALL = 2;
        cc.ResolutionPolicy.FIXED_HEIGHT = 3;
        cc.ResolutionPolicy.FIXED_WIDTH = 4;
        cc.ResolutionPolicy.UNKNOWN = 5;
        cc.view = new c;
        cc.winSize = cc.size();
        q.exports = cc.view
    }, {
        "../event/event-target": 174,
        "../platform/CCClass": 227,
        "../platform/js": 248,
        "../renderer": 259
    }],
    238: [function(g, q, m) {
        cc.visibleRect = {
            topLeft: cc.v2(0, 0),
            topRight: cc.v2(0, 0),
            top: cc.v2(0, 0),
            bottomLeft: cc.v2(0, 0),
            bottomRight: cc.v2(0,
                0),
            bottom: cc.v2(0, 0),
            center: cc.v2(0, 0),
            left: cc.v2(0, 0),
            right: cc.v2(0, 0),
            width: 0,
            height: 0,
            init: function(h) {
                var e = this.width = h.width,
                    d = this.height = h.height,
                    k = h.x;
                h = h.y;
                var c = h + d,
                    a = k + e;
                this.topLeft.x = k;
                this.topLeft.y = c;
                this.topRight.x = a;
                this.topRight.y = c;
                this.top.x = k + e / 2;
                this.top.y = c;
                this.bottomLeft.x = k;
                this.bottomLeft.y = h;
                this.bottomRight.x = a;
                this.bottomRight.y = h;
                this.bottom.x = k + e / 2;
                this.bottom.y = h;
                this.center.x = k + e / 2;
                this.center.y = h + d / 2;
                this.left.x = k;
                this.left.y = h + d / 2;
                this.right.x = a;
                this.right.y = h +
                    d / 2
            }
        }
    }, {}],
    239: [function(g, q, m) {
        function h(c, a) {
            a = a ? Object.create(a) : {};
            k.value(c, "__attrs__", a);
            return a
        }

        function e(c) {
            var a;
            if (!(a = c.hasOwnProperty("__attrs__") && c.__attrs__))
                if ("function" !== typeof c) a = h(c, e(c.constructor));
                else {
                    for (var b = cc.Class.getInheritanceChain(c), d = b.length - 1; 0 <= d; d--) {
                        var f = b[d];
                        f.hasOwnProperty("__attrs__") && f.__attrs__ || (a = b[d + 1], h(f, a && a.__attrs__))
                    }
                    a = b[0];
                    h(c, a && a.__attrs__);
                    a = c.__attrs__
                }
            return a
        }

        function d(c, a) {
            this.name = c;
            this["default"] = a
        }
        var k = g("./js");
        g("./utils");
        d.prototype.toString = function() {
            return this.name
        };
        cc.Integer = new d("Integer", 0);
        cc.Float = new d("Float", 0);
        !1;
        cc.Boolean = new d("Boolean", !1);
        cc.String = new d("String", "");
        q.exports = {
            PrimitiveType: d,
            attr: function(c, a, b) {
                c = e(c);
                !0;
                a += "$_$";
                b = {};
                for (var d in c) d.startsWith(a) && (b[d.slice(a.length)] = c[d]);
                return b
            },
            getClassAttrs: e,
            setClassAttr: function(c, a, b, d) {
                e(c)[a + "$_$" + b] = d
            },
            DELIMETER: "$_$",
            getTypeChecker_ET: (!1, !1),
            getObjTypeChecker_ET: (!1, !1),
            ScriptUuid: {}
        }
    }, {
        "./CCClass": 227,
        "./js": 248,
        "./utils": 251
    }],
    240: [function(g, q, m) {
        function h() {}

        function e() {
            this.callback = h;
            this.target = void 0;
            this.once = !1
        }

        function d() {
            this.callbackInfos = [];
            this.containCanceled = this.isInvoking = !1
        }

        function k() {
            this._callbackTable = c.createMap(!0)
        }
        var c = g("./js"),
            a = c.array.fastRemoveAt;
        e.prototype.set = function(a, b, c) {
            this.callback = a;
            this.target = b;
            this.once = !!c
        };
        var b = new c.Pool(function(a) {
            a.callback = h;
            a.target = void 0;
            a.once = !1;
            return !0
        }, 32);
        b.get = function() {
            return this._get() || new e
        };
        g = d.prototype;
        g.removeByCallback = function(c) {
            for (var d =
                    0; d < this.callbackInfos.length; ++d) {
                var f = this.callbackInfos[d];
                f && f.callback === c && (b.put(f), a(this.callbackInfos, d), --d)
            }
        };
        g.removeByTarget = function(c) {
            for (var d = 0; d < this.callbackInfos.length; ++d) {
                var f = this.callbackInfos[d];
                f && f.target === c && (b.put(f), a(this.callbackInfos, d), --d)
            }
        };
        g.cancel = function(a) {
            var c = this.callbackInfos[a];
            c && (b.put(c), this.callbackInfos[a] = null);
            this.containCanceled = !0
        };
        g.cancelAll = function() {
            for (var a = 0; a < this.callbackInfos.length; a++) {
                var c = this.callbackInfos[a];
                c && (b.put(c),
                    this.callbackInfos[a] = null)
            }
            this.containCanceled = !0
        };
        g.purgeCanceled = function() {
            for (var b = this.callbackInfos.length - 1; 0 <= b; --b) this.callbackInfos[b] || a(this.callbackInfos, b);
            this.containCanceled = !1
        };
        g.clear = function() {
            this.cancelAll();
            this.callbackInfos.length = 0;
            this.containCanceled = this.isInvoking = !1
        };
        var l = new c.Pool(function(a) {
            a.callbackInfos = [];
            a.isInvoking = !1;
            a.containCanceled = !1;
            return !0
        }, 16);
        l.get = function() {
            return this._get() || new d
        };
        g = k.prototype;
        g.on = function(a, c, d, k) {
            var f = this._callbackTable[a];
            f || (f = this._callbackTable[a] = l.get());
            a = b.get();
            a.set(c, d, k);
            f.callbackInfos.push(a)
        };
        g.hasEventListener = function(a, b, c) {
            var d = this._callbackTable[a];
            if (!d) return !1;
            a = d.callbackInfos;
            if (!b) {
                if (d.isInvoking) {
                    for (b = 0; b < a.length; ++b)
                        if (a[b]) return !0;
                    return !1
                }
                return 0 < a.length
            }
            for (d = 0; d < a.length; ++d) {
                var f = a[d];
                if (f && f.callback === b && f.target === c) return !0
            }
            return !1
        };
        g.removeAll = function(a) {
            if ("string" === typeof a) {
                var b = this._callbackTable[a];
                b && (b.isInvoking ? b.cancelAll() : (b.clear(), l.put(b), delete this._callbackTable[a]))
            } else if (a)
                for (b in this._callbackTable) {
                    var c =
                        this._callbackTable[b];
                    if (c.isInvoking)
                        for (var d = c.callbackInfos, f = 0; f < d.length; ++f) {
                            var k = d[f];
                            k && k.target === a && c.cancel(f)
                        } else c.removeByTarget(a)
                }
        };
        g.off = function(c, d, l) {
            if (c = this._callbackTable[c])
                for (var f = c.callbackInfos, k = 0; k < f.length; ++k) {
                    var e = f[k];
                    if (e && e.callback === d && e.target === l) {
                        c.isInvoking ? c.cancel(k) : (a(f, k), b.put(e));
                        break
                    }
                }
        };
        g.emit = function(a, b, c, d, l, k) {
            var f = this._callbackTable[a];
            if (f) {
                var e = !f.isInvoking;
                f.isInvoking = !0;
                for (var h = f.callbackInfos, g = 0, n = h.length; g < n; ++g) {
                    var p =
                        h[g];
                    if (p) {
                        var t = p.target,
                            u = p.callback;
                        p.once && this.off(a, u, t);
                        t ? u.call(t, b, c, d, l, k) : u(b, c, d, l, k)
                    }
                }
                e && (f.isInvoking = !1, f.containCanceled && f.purgeCanceled())
            }
        };
        !1;
        q.exports = k
    }, {
        "./js": 248
    }],
    241: [function(g, q, m) {
        function h(e, d) {
            for (var k = 0; k < d.length; k++) {
                var c = d[k];
                Array.isArray(c) ? h(e, c) : e.push(c)
            }
        }
        q.exports = {
            flattenCodeArray: function(e) {
                var d = [];
                h(d, e);
                return d.join("")
            }
        }
    }, {}],
    242: [function(g, q, m) {
        function h(a) {
            return a && a.__esModule ? a : {
                default: a
            }
        }

        function e(a, b) {
            a.x = b[1];
            a.y = b[2];
            a.z = b[3];
            a.w = b[4]
        }

        function d(a, b) {
            for (var c = a[4][b[0]], d = c[0], f = new d[0], l = d[1], k = d[2], e = c[c.length - 1], h = 1; h < e; ++h) f[l[c[h]]] = b[h];
            for (; h < b.length; ++h)(0, I[d[c[h] + k]])(a, f, l[c[h]], b[h]);
            return f
        }

        function k(a, b, c) {
            var d = new b;
            d._deserialize ? d._deserialize(c, a[0]) : cc.errorID(5303, p["default"].getClassName(b));
            return d
        }

        function c(a, b, c, d) {
            0 <= d ? b[c] = a[5][d] : a[7][3 * ~d] = b
        }

        function a(a) {
            return function(b, c, d, f) {
                c[d] = f;
                for (c = 0; c < f.length; ++c) a(b, f, c, f[c])
            }
        }

        function b(a, b, c, d) {
            b[c] = null;
            a[8][d] = b
        }

        function l(a, b, c, f) {
            b[c] = d(a,
                f)
        }

        function f(a, b, c, d, f, l) {
            var k = a(b);
            if (!k) {
                if (f) {
                    c[d] = function(b, c, d) {
                        return function() {
                            var f;
                            (f = a(d)) || (l || v.reportMissingClass(d), f = Object);
                            b[c] = f;
                            return new f
                        }
                    }(c, d, b);
                    return
                }
                l || v.reportMissingClass(b);
                k = Object
            }
            c[d] = k
        }

        function n(a, b, c) {
            var d = c || p["default"]._getClassById;
            a = a[3];
            for (var l = 0; l < a.length; ++l) {
                var k = a[l];
                if ("string" !== typeof k) {
                    !0;
                    if ("function" === typeof k[0]) throw Error("Can not deserialize the same JSON data again.");
                    f(d, k[0], k, F, b, c)
                } else f(d, k, a, l, b, c)
            }
        }

        function u(a) {
            var b = a[4];
            if (b) {
                a = a[3];
                for (var c = 0; c < b.length; ++c) {
                    var d = b[c];
                    d[0] = a[d[0]]
                }
            }
        }

        function v(a, b, c) {
            !1;
            "string" === typeof a && (a = JSON.parse(a));
            var f = !b;
            b = b || D.pool.get();
            b.init(a);
            c = c || {};
            var l = a[0],
                e = !1;
            "object" === typeof l && (e = l.preprocessed, l = l.version);
            if (1 > l) throw Error(cc.debug.getError(5304, l));
            c._version = l;
            c.result = b;
            a[0] = c;
            e || (n(a, !1, c.classFinder), u(a));
            cc.game._isCloning = !0;
            c = a[5];
            l = a;
            e = l[5];
            var h = l[6],
                g = 0 === h ? 0 : h.length,
                p = e[e.length - 1],
                t = e.length - g;
            "number" !== typeof p ? p = 0 : (0 > p && (p = ~p), --t);
            for (var x = 0; x <
                t; ++x) e[x] = d(l, e[x]);
            t = l[3];
            for (var v = 0; v < g; ++v, ++x) {
                var z = h[v],
                    A = e[x];
                0 <= z ? e[x] = k(l, t[z], A) : (z = ~z, (0, I[z])(l, e, x, A))
            }
            l = p;
            cc.game._isCloning = !1;
            if (a[7]) {
                e = a[7];
                h = a[2];
                g = e.length - 1;
                p = 0;
                for (x = 3 * e[g]; p < x; p += 3) t = e[p], v = c[e[p + 2]], z = e[p + 1], 0 <= z ? t[h[z]] = v : t[~z] = v;
                for (; p < g; p += 3) x = c[e[p]], t = c[e[p + 2]], v = e[p + 1], 0 <= v ? x[h[v]] = t : x[~v] = t
            }
            e = a[5];
            h = a[2];
            g = a[1];
            p = a[8];
            x = a[9];
            a = a[10];
            for (t = 0; t < p.length; ++t) v = p[t], "number" === typeof v && (p[t] = e[v]), v = x[t], "number" === typeof v && (v = 0 <= v ? h[v] : ~v, x[t] = v), v = a[t], "number" ===
                typeof v && (a[t] = g[v]);
            f && D.pool.put(b);
            return c[l]
        }
        m.__esModule = !0;
        m["default"] = v;
        m.getDependUuidList = function(a) {
            var b = a[1];
            return a[10].map(function(a) {
                return b[a]
            })
        };
        m.hasNativeDep = function(a) {
            a = a[5];
            a = a[a.length - 1];
            return "number" === typeof a && 0 > a
        };
        m.packCustomObjData = function(a, b, c) {
            return [1, B, B, [a], B, c ? [b, -1] : [b],
                [0], B, [],
                [],
                []
            ]
        };
        m.unpackJSONs = function(a, b) {
            if (1 > a[0]) throw Error(cc.debug.getError(5304, a[0]));
            n(a, !0, b);
            u(a);
            b = new K(a[0]);
            var c = a[1],
                d = a[2],
                f = a[3],
                l = a[4];
            a = a[G];
            for (var k = 0; k < a.length; ++k) a[k].unshift(b,
                c, d, f, l);
            return a
        };
        var p = h(g("./js"));
        q = h(g("../value-types/vec2"));
        m = h(g("../value-types/vec3"));
        var t = h(g("../value-types/vec4")),
            x = h(g("../value-types/color")),
            z = h(g("../value-types/size")),
            E = h(g("../value-types/rect")),
            w = h(g("../value-types/quat")),
            A = h(g("../value-types/mat4")),
            B = 0,
            y = [q["default"], m["default"], t["default"], w["default"], x["default"], z["default"], E["default"], A["default"]],
            C = [function(a, b) {
                    a.x = b[1];
                    a.y = b[2]
                }, function(a, b) {
                    a.x = b[1];
                    a.y = b[2];
                    a.z = b[3]
                }, e, e, function(a, b) {
                    a._val = b[1]
                },
                function(a, b) {
                    a.width = b[1];
                    a.height = b[2]
                },
                function(a, b) {
                    a.x = b[1];
                    a.y = b[2];
                    a.width = b[3];
                    a.height = b[4]
                },
                function(a, b) {
                    A["default"].fromArray(a, b, 1)
                }
            ],
            F = 0,
            G = 5,
            D = function() {
                function a() {
                    this.uuidList = this.uuidPropList = this.uuidObjList = null
                }
                var b = a.prototype;
                b.init = function(a) {
                    this.uuidObjList = a[8];
                    this.uuidPropList = a[9];
                    this.uuidList = a[10]
                };
                b.reset = function() {
                    this.uuidPropList = this.uuidObjList = this.uuidList = null
                };
                b.push = function(a, b, c) {
                    this.uuidObjList.push(a);
                    this.uuidPropList.push(b);
                    this.uuidList.push(c)
                };
                return a
            }();
        D.pool = new p["default"].Pool(function(a) {
            a.reset()
        }, 5);
        D.pool.get = function() {
            return this._get() || new D
        };
        !1;
        !1;
        var I = Array(13);
        I[0] = function(a, b, c, d) {
            b[c] = d
        };
        I[1] = c;
        I[2] = a(c);
        I[3] = a(b);
        I[4] = l;
        I[5] = function(a, b, c, d) {
            C[d[0]](b[c], d)
        };
        I[6] = b;
        I[7] = function(a, b, c, d) {
            b[c].set(d)
        };
        I[8] = function(a, b, c, d) {
            a = new y[d[0]];
            C[d[0]](a, d);
            b[c] = a
        };
        I[9] = a(l);
        I[10] = function(a, b, c, d) {
            b[c] = k(a, a[3][d[0]], d[1])
        };
        I[11] = function(a, b, c, d) {
            var f = d[0];
            b[c] = f;
            for (b = 1; b < d.length; b += 3)(0, I[d[b + 1]])(a, f, d[b], d[b + 2])
        };
        I[12] = function(a, b, c, d) {
            var f = d[0];
            b[c] = f;
            for (b = 0; b < f.length; ++b) {
                c = f[b];
                var l = d[b + 1];
                if (0 !== l)(0, I[l])(a, f, b, c)
            }
        };
        v.Details = D;
        var K = function(a) {
            this.preprocessed = !0;
            this.version = a
        };
        !1;
        !1;
        !1;
        !1
    }, {
        "../value-types/color": 324,
        "../value-types/mat4": 327,
        "../value-types/quat": 328,
        "../value-types/rect": 329,
        "../value-types/size": 330,
        "../value-types/vec2": 334,
        "../value-types/vec3": 335,
        "../value-types/vec4": 336,
        "./js": 248
    }],
    243: [function(g, q, m) {
        g = function(h) {
            return h && h.__esModule ? h : {
                default: h
            }
        }(g("./deserialize-compiled"));
        g["default"].reportMissingClass = function(h) {
            !1;
            cc.warnID(5302, h)
        };
        !0;
        cc.deserialize = g["default"]
    }, {
        "./deserialize-compiled": 242,
        "./deserialize-editor": void 0
    }],
    244: [function(g, q, m) {
        function h(e) {
            this.id = 0 | 998 * Math.random();
            this.prefix = e ? e + "." : ""
        }
        h.prototype.getNewId = function() {
            return this.prefix + ++this.id
        };
        h.global = new h("global");
        q.exports = h
    }, {}],
    245: [function(g, q, m) {
        g("./js");
        g("./CCClass");
        g("./CCClassDecorator");
        g("./CCEnum");
        g("./CCObject");
        g("./callbacks-invoker");
        g("./deserialize");
        g("./instantiate");
        g("./instantiate-jit");
        g("./requiring-frame");
        g("./CCSys");
        g("./CCMacro");
        !0;
        g("./CCVisibleRect")
    }, {
        "./CCClass": 227,
        "./CCClassDecorator": 228,
        "./CCEnum": 229,
        "./CCMacro": 232,
        "./CCObject": 233,
        "./CCSys": 236,
        "./CCVisibleRect": 238,
        "./callbacks-invoker": 240,
        "./deserialize": 243,
        "./instantiate": 247,
        "./instantiate-jit": 246,
        "./js": 248,
        "./requiring-frame": 250
    }],
    246: [function(g, q, m) {
        function h(a) {
            if (a === Float32Array) return "Float32Array";
            if (a === Float64Array) return "Float64Array";
            if (a === Int8Array) return "Int8Array";
            if (a === Int16Array) return "Int16Array";
            if (a === Int32Array) return "Int32Array";
            if (a === Uint8Array) return "Uint8Array";
            if (a === Uint16Array) return "Uint16Array";
            if (a === Uint32Array) return "Uint32Array";
            if (a === Uint8ClampedArray) return "Uint8ClampedArray";
            throw Error("Unknown TypedArray to instantiate: " + a);
        }

        function e(a, b) {
            this.varName = a;
            this.expression = b
        }

        function d(a, b) {
            return b instanceof e ? new e(b.varName, a + b.expression) : a + b
        }

        function k(a, b, c) {
            Array.isArray(c) ? (c[0] = d(b, c[0]), a.push(c)) : a.push(d(b, c) + ";")
        }

        function c(a) {
            this._exps = [];
            this._targetExp = a
        }

        function a(a, b) {
            if ("function" === typeof a) try {
                a = a()
            } catch (C) {
                return !1
            }
            if (a === b) return !0;
            if (a && b && "object" === typeof a && "object" === typeof b && a.constructor === b.constructor)
                if (a instanceof cc.ValueType) {
                    if (a.equals(b)) return !0
                } else {
                    if (Array.isArray(a)) return 0 === a.length && 0 === b.length;
                    if (a.constructor === Object) return p.isEmptyObject(a) && p.isEmptyObject(b)
                }
            return !1
        }

        function b(a) {
            return E.test(a) ? "." + a : "[" + w(a) + "]"
        }

        function l(a, b) {
            this.parent = b;
            this.objsToClear_iN$t = [];
            this.codeArray = [];
            this.objs = [];
            this.funcs = [];
            this.funcModuleCache = p.createMap();
            p.mixin(this.funcModuleCache, A);
            this.globalVariables = [];
            this.localVariableId = this.globalVariableId = 0;
            this.codeArray.push("var o,t;", "if(R){", "o=R;", "}else{", "o=R=new " + this.getFuncModule(a.constructor, !0) + "();", "}");
            p.value(a, "_iN$t", {
                globalVar: "R"
            }, !0);
            this.objsToClear_iN$t.push(a);
            this.enumerateObject(this.codeArray, a);
            var c;
            0 < this.globalVariables.length && (c = "var " + this.globalVariables.join(",") + ";");
            a = x.flattenCodeArray(["return (function(R){",
                c || [], this.codeArray, "return o;", "})"
            ]);
            this.result = Function("O", "F", a)(this.objs, this.funcs);
            a = 0;
            for (b = this.objsToClear_iN$t.length; a < b; ++a) this.objsToClear_iN$t[a]._iN$t = null;
            this.objsToClear_iN$t.length = 0
        }
        var f = g("./CCObject"),
            n = f.Flags.Destroyed,
            u = f.Flags.PersistentMask,
            v = g("./attribute"),
            p = g("./js"),
            t = g("./CCClass"),
            x = g("./compiler"),
            z = v.DELIMETER + "default",
            E = t.IDENTIFIER_RE,
            w = t.escapeForJS,
            A = {
                "cc.Node": "cc.Node",
                "cc.Sprite": "cc.Sprite",
                "cc.Label": "cc.Label",
                "cc.Button": "cc.Button",
                "cc.Widget": "cc.Widget",
                "cc.Animation": "cc.Animation",
                "cc.ClickEvent": !1,
                "cc.PrefabInfo": !1
            };
        try {
            !Float32Array.name && (Float32Array.name = "Float32Array"), !Float64Array.name && (Float64Array.name = "Float64Array"), !Int8Array.name && (Int8Array.name = "Int8Array"), !Int16Array.name && (Int16Array.name = "Int16Array"), !Int32Array.name && (Int32Array.name = "Int32Array"), !Uint8Array.name && (Uint8Array.name = "Uint8Array"), !Uint16Array.name && (Uint16Array.name = "Uint16Array"), !Uint32Array.name && (Uint32Array.name = "Uint32Array"), !Uint8ClampedArray.name &&
                (Uint8ClampedArray.name = "Uint8ClampedArray")
        } catch (B) {}
        e.prototype.toString = function() {
            return "var " + this.varName + "=" + this.expression + ";"
        };
        c.prototype.append = function(a, b) {
            this._exps.push([a, b])
        };
        c.prototype.writeCode = function(a) {
            if (1 < this._exps.length) {
                a.push("t=" + this._targetExp + ";");
                var c = "t"
            } else {
                if (1 !== this._exps.length) return;
                c = this._targetExp
            }
            for (var d = 0; d < this._exps.length; d++) {
                var f = this._exps[d];
                k(a, c + b(f[0]) + "=", f[1])
            }
        };
        c.pool = new p.Pool(function(a) {
            a._exps.length = 0;
            a._targetExp = null
        }, 1);
        c.pool.get = function(a) {
            var b = this._get() || new c;
            b._targetExp = a;
            return b
        };
        g = l.prototype;
        g.getFuncModule = function(a, b) {
            var c = p.getClassName(a);
            if (c) {
                var d = this.funcModuleCache[c];
                if (d) return d;
                if (void 0 === d && (d = -1 !== c.indexOf("."))) try {
                    if (d = a === Function("return " + c)()) return this.funcModuleCache[c] = c
                } catch (G) {}
            }
            d = this.funcs.indexOf(a);
            0 > d && (d = this.funcs.length, this.funcs.push(a));
            a = "F[" + d + "]";
            b && (a = "(" + a + ")");
            return this.funcModuleCache[c] = a
        };
        g.getObjRef = function(a) {
            var b = this.objs.indexOf(a);
            0 > b &&
                (b = this.objs.length, this.objs.push(a));
            return "O[" + b + "]"
        };
        g.setValueType = function(a, b, d, f) {
            f = c.pool.get(f);
            var l = b.constructor.__props__;
            l || (l = Object.keys(b));
            for (var k = 0; k < l.length; k++) {
                var e = l[k],
                    h = d[e];
                b[e] !== h && (h = this.enumerateField(d, e, h), f.append(e, h))
            }
            f.writeCode(a);
            c.pool.put(f)
        };
        g.enumerateCCClass = function(c, d, f) {
            var l = f.__values__;
            f = v.getClassAttrs(f);
            for (var k = 0; k < l.length; k++) {
                var e = l[k],
                    h = d[e],
                    g = f[e + z];
                if (!a(g, h)) {
                    if ("object" === typeof h && h instanceof cc.ValueType && (g = t.getDefault(g)) &&
                        g.constructor === h.constructor) {
                        e = "o" + b(e);
                        this.setValueType(c, g, h, e);
                        continue
                    }
                    this.setObjProp(c, d, e, h)
                }
            }
        };
        g.instantiateArray = function(a) {
            if (0 === a.length) return "[]";
            var b = "a" + ++this.localVariableId,
                c = [new e(b, "new Array(" + a.length + ")")];
            p.value(a, "_iN$t", {
                globalVar: "",
                source: c
            }, !0);
            this.objsToClear_iN$t.push(a);
            for (var d = 0; d < a.length; ++d) {
                var f = b + "[" + d + "]=",
                    l = this.enumerateField(a, d, a[d]);
                k(c, f, l)
            }
            return c
        };
        g.instantiateTypedArray = function(a) {
            var b = a.constructor.name || h(a.constructor);
            if (0 === a.length) return "new " +
                b;
            var c = "a" + ++this.localVariableId;
            b = [new e(c, "new " + b + "(" + a.length + ")")];
            a._iN$t = {
                globalVar: "",
                source: b
            };
            this.objsToClear_iN$t.push(a);
            for (var d = 0; d < a.length; ++d) 0 !== a[d] && k(b, c + "[" + d + "]=", a[d]);
            return b
        };
        g.enumerateField = function(a, b, c) {
            if ("object" === typeof c && c) return (a = c._iN$t) ? (c = a.globalVar, c || (c = a.globalVar = "v" + ++this.globalVariableId, this.globalVariables.push(c), a.source[0] = d(c + "=", a.source[0])), c) : ArrayBuffer.isView(c) ? this.instantiateTypedArray(c) : Array.isArray(c) ? this.instantiateArray(c) :
                this.instantiateObj(c);
            if ("function" === typeof c) return this.getFuncModule(c);
            if ("string" === typeof c) return w(c);
            "_objFlags" === b && a instanceof f && (c &= u);
            return c
        };
        g.setObjProp = function(a, c, d, f) {
            var l = "o" + b(d) + "=";
            c = this.enumerateField(c, d, f);
            k(a, l, c)
        };
        g.enumerateObject = function(a, b) {
            var c = b.constructor;
            if (cc.Class._isCCClass(c)) this.enumerateCCClass(a, b, c);
            else
                for (var d in b) !b.hasOwnProperty(d) || 95 === d.charCodeAt(0) && 95 === d.charCodeAt(1) && "__type__" !== d || (c = b[d], "object" === typeof c && c && c === b._iN$t ||
                    this.setObjProp(a, b, d, c))
        };
        g.instantiateObj = function(a) {
            if (a instanceof cc.ValueType) return t.getNewValueTypeCode(a);
            if (a instanceof cc.Asset) return this.getObjRef(a);
            if (a._objFlags & n) return null;
            var b = a.constructor;
            if (cc.Class._isCCClass(b)) {
                if (this.parent)
                    if (this.parent instanceof cc.Component) {
                        if (a instanceof cc._BaseNode || a instanceof cc.Component) return this.getObjRef(a)
                    } else if (this.parent instanceof cc._BaseNode)
                    if (a instanceof cc._BaseNode) {
                        if (!a.isChildOf(this.parent)) return this.getObjRef(a)
                    } else if (a instanceof cc.Component) {
                    var c;
                    if (null == (c = a.node) || !c.isChildOf(this.parent)) return this.getObjRef(a)
                }
                b = new e("o", "new " + this.getFuncModule(b, !0) + "()")
            } else if (b === Object) b = new e("o", "{}");
            else {
                if (b) return this.getObjRef(a);
                b = new e("o", "Object.create(null)")
            }
            b = [b];
            p.value(a, "_iN$t", {
                globalVar: "",
                source: b
            }, !0);
            this.objsToClear_iN$t.push(a);
            this.enumerateObject(b, a);
            return ["(function(){", b, "return o;})();"]
        };
        q.exports = {
            compile: function(a) {
                return (new l(a, a instanceof cc._BaseNode && a)).result
            },
            equalsToDefault: a
        };
        !1
    }, {
        "./CCClass": 227,
        "./CCObject": 233,
        "./attribute": 239,
        "./compiler": 241,
        "./js": 248
    }],
    247: [function(g, q, m) {
        function h(a, b) {
            if (!b) {
                if ("object" !== typeof a || Array.isArray(a) || !a || !cc.isValid(a)) return !1, null;
                !1
            }
            if (a instanceof c) {
                if (a._instantiate) return cc.game._isCloning = !0, a = a._instantiate(null, !0), cc.game._isCloning = !1, a;
                if (a instanceof cc.Asset) return !1, null
            }
            cc.game._isCloning = !0;
            a = e(a);
            cc.game._isCloning = !1;
            return a
        }

        function e(a, b) {
            if (Array.isArray(a) || f && f(a)) return !1, null;
            var c = a._iN$t ? a._iN$t :
                a.constructor ? new a.constructor : Object.create(null);
            d(a, c, b);
            a = 0;
            for (b = u.length; a < b; ++a) u[a]._iN$t = null;
            u.length = 0;
            return c
        }

        function d(b, d, f) {
            n.value(b, "_iN$t", d, !0);
            u.push(b);
            var e = b.constructor;
            if (cc.Class._isCCClass(e)) {
                var h = e.__values__;
                for (e = 0; e < h.length; e++) {
                    var g = h[e],
                        p = b[g];
                    if ("object" === typeof p && p) {
                        var t = d[g];
                        t instanceof a && t.constructor === p.constructor ? t.set(p) : d[g] = p._iN$t || k(p, f)
                    } else d[g] = p
                }
            } else
                for (h in b) !b.hasOwnProperty(h) || 95 === h.charCodeAt(0) && 95 === h.charCodeAt(1) && "__type__" !==
                    h || (e = b[h], "object" === typeof e && e ? e !== d && (d[h] = e._iN$t || k(e, f)) : d[h] = e);
            b instanceof c && (d._objFlags &= l)
        }

        function k(c, f) {
            if (c instanceof a) return c.clone();
            if (c instanceof cc.Asset) return c;
            if (ArrayBuffer.isView(c)) {
                f = c.length;
                var l = new c.constructor(f);
                c._iN$t = l;
                u.push(c);
                for (var e = 0; e < f; ++e) l[e] = c[e];
                return l
            }
            if (Array.isArray(c)) {
                e = c.length;
                l = Array(e);
                n.value(c, "_iN$t", l, !0);
                u.push(c);
                for (var h = 0; h < e; ++h) {
                    var g = c[h];
                    l[h] = "object" === typeof g && g ? g._iN$t || k(g, f) : g
                }
                return l
            }
            if (c._objFlags & b) return null;
            l = c.constructor;
            if (cc.Class._isCCClass(l)) {
                if (f)
                    if (f instanceof cc.Component) {
                        if (c instanceof cc._BaseNode || c instanceof cc.Component) return c
                    } else if (f instanceof cc._BaseNode)
                    if (c instanceof cc._BaseNode) {
                        if (!c.isChildOf(f)) return c
                    } else if (c instanceof cc.Component && (null == (e = c.node) || !e.isChildOf(f))) return c;
                l = new l
            } else if (l === Object) l = {};
            else {
                if (l) return c;
                l = Object.create(null)
            }
            d(c, l, f);
            return l
        }
        var c = g("./CCObject"),
            a = g("../value-types/value-type"),
            b = c.Flags.Destroyed,
            l = c.Flags.PersistentMask,
            f = g("./utils").isDomNode,
            n = g("./js"),
            u = [];
        h._clone = e;
        cc.instantiate = h;
        q.exports = h
    }, {
        "../value-types/value-type": 333,
        "./CCObject": 233,
        "./js": 248,
        "./utils": 251
    }],
    248: [function(g, q, m) {
        function h(a, b) {
            for (; a;) {
                var c = Object.getOwnPropertyDescriptor(a, b);
                if (c) return c;
                a = Object.getPrototypeOf(a)
            }
            return null
        }

        function e(a, b) {
            a.splice(b, 1)
        }

        function d(a, b) {
            b = a.indexOf(b);
            return 0 <= b ? (e(a, b), !0) : !1
        }

        function k(a, b) {
            void 0 === b && (b = a, a = null);
            this.get = null;
            this.count = 0;
            this._pool = Array(b);
            this._cleanup = a
        }
        var c = new(g("./id-generater"))("TmpCId."),
            a = {
                isNumber: function(a) {
                    return "number" === typeof a || a instanceof Number
                },
                isString: function(a) {
                    return "string" === typeof a || a instanceof String
                },
                addon: function(a) {
                    a = a || {};
                    for (var b = 1, c = arguments.length; b < c; b++) {
                        var d = arguments[b];
                        if (d)
                            if ("object" !== typeof d) cc.errorID(5402, d);
                            else
                                for (var f in d)
                                    if (!(f in a)) {
                                        var l = f,
                                            k = a,
                                            e = h(d, l);
                                        Object.defineProperty(k, l, e)
                                    }
                    }
                    return a
                },
                mixin: function(a) {
                    a = a || {};
                    for (var b = 1, c = arguments.length; b < c; b++) {
                        var d = arguments[b];
                        if (d)
                            if ("object" !== typeof d) cc.errorID(5403, d);
                            else
                                for (var f in d) {
                                    var l =
                                        f,
                                        k = a,
                                        e = h(d, l);
                                    Object.defineProperty(k, l, e)
                                }
                    }
                    return a
                },
                extend: function(a, b) {
                    !1;
                    for (var c in b) b.hasOwnProperty(c) && (a[c] = b[c]);
                    a.prototype = Object.create(b.prototype, {
                        constructor: {
                            value: a,
                            writable: !0,
                            configurable: !0
                        }
                    });
                    return a
                },
                getSuper: function(a) {
                    return (a = (a = a.prototype) && Object.getPrototypeOf(a)) && a.constructor
                },
                isChildClassOf: function(b, c) {
                    if (b && c) {
                        if ("function" !== typeof b) return !1;
                        if ("function" !== typeof c) return !1, !1;
                        if (b === c) return !0;
                        for (;;) {
                            b = a.getSuper(b);
                            if (!b) break;
                            if (b === c) return !0
                        }
                    }
                    return !1
                },
                clear: function(a) {
                    for (var b = Object.keys(a), c = 0; c < b.length; c++) delete a[b[c]]
                },
                isEmptyObject: function(a) {
                    for (var b in a) return !1;
                    return !0
                },
                getPropertyDescriptor: h
            },
            b = {
                value: void 0,
                enumerable: !1,
                writable: !1,
                configurable: !0
            };
        a.value = function(a, c, d, f, l) {
            b.value = d;
            b.writable = f;
            b.enumerable = l;
            Object.defineProperty(a, c, b);
            b.value = void 0
        };
        var l = {
            get: null,
            set: null,
            enumerable: !1
        };
        a.getset = function(a, b, c, d, f, k) {
            "function" !== typeof d && (f = d, d = void 0);
            l.get = c;
            l.set = d;
            l.enumerable = f;
            l.configurable = k;
            Object.defineProperty(a,
                b, l);
            l.get = null;
            l.set = null
        };
        var f = {
            get: null,
            enumerable: !1,
            configurable: !1
        };
        a.get = function(a, b, c, d, l) {
            f.get = c;
            f.enumerable = d;
            f.configurable = l;
            Object.defineProperty(a, b, f);
            f.get = null
        };
        var n = {
            set: null,
            enumerable: !1,
            configurable: !1
        };
        a.set = function(a, b, c, d, f) {
            n.set = c;
            n.enumerable = d;
            n.configurable = f;
            Object.defineProperty(a, b, n);
            n.set = null
        };
        a.getClassName = function(b) {
            if ("function" === typeof b) {
                var c = b.prototype;
                if (c && c.hasOwnProperty("__classname__") && c.__classname__) return c.__classname__;
                c = "";
                b.name && (c =
                    b.name);
                b.toString && (b = b.toString(), (b = "[" === b.charAt(0) ? b.match(/\[\w+\s*(\w+)\]/) : b.match(/function\s*(\w+)/)) && 2 === b.length && (c = b[1]));
                return "Object" !== c ? c : ""
            }
            return b && b.constructor ? a.getClassName(b.constructor) : ""
        };
        (function() {
            function b(b, c, d) {
                a.getset(a, c, function() {
                    return Object.assign({}, d)
                }, function(b) {
                    a.clear(d);
                    Object.assign(d, b)
                });
                return function(c, f) {
                    f.prototype.hasOwnProperty(b) && delete d[f.prototype[b]];
                    a.value(f.prototype, b, c);
                    if (c) {
                        var l = d[c];
                        l && l !== f ? (c = "A Class already exists with the same " +
                            b + ' : "' + c + '".', !1, cc.error(c)) : d[c] = f
                    }
                }
            }
            var d = {},
                f = {};
            a._setClassId = b("__cid__", "_registeredClassIds", d);
            var l = b("__classname__", "_registeredClassNames", f);
            a.setClassName = function(b, d) {
                l(b, d);
                d.prototype.hasOwnProperty("__cid__") || (b = b || c.getNewId()) && a._setClassId(b, d)
            };
            a.unregisterClass = function() {
                for (var a = 0; a < arguments.length; a++) {
                    var b = arguments[a].prototype,
                        c = b.__cid__;
                    c && delete d[c];
                    (b = b.__classname__) && delete f[b]
                }
            };
            a._getClassById = function(a) {
                return d[a]
            };
            a.getClassByName = function(a) {
                return f[a]
            };
            a._getClassId = function(a, b) {
                b = "undefined" === typeof b || b;
                if ("function" === typeof a && a.prototype.hasOwnProperty("__cid__")) return a = a.prototype.__cid__, !b && !1, a;
                if (a && a.constructor) {
                    var c = a.constructor.prototype;
                    if (c && c.hasOwnProperty("__cid__")) return a = a.__cid__, !b && !1, a
                }
                return ""
            }
        })();
        a.obsolete = function(b, c, d, f) {
            function l() {
                !1;
                return this[e]
            }
            var k = /([^.]+)$/;
            c = k.exec(c)[0];
            var e = k.exec(d)[0];
            f ? a.getset(b, c, l, function(a) {
                !1;
                this[e] = a
            }) : a.get(b, c, l)
        };
        a.obsoletes = function(b, c, d, f) {
            for (var l in d) a.obsolete(b,
                c + "." + l, d[l], f)
        };
        var u = /(%d)|(%s)/,
            v = /%s/;
        a.formatStr = function() {
            var a = arguments.length;
            if (0 === a) return "";
            var b = arguments[0];
            if (1 === a) return "" + b;
            if ("string" === typeof b && u.test(b))
                for (var c = 1; c < a; ++c) {
                    var d = arguments[c],
                        f = "number" === typeof d ? u : v;
                    b = f.test(b) ? b.replace(f, "" + d) : b + (" " + d)
                } else
                    for (c = 1; c < a; ++c) b += " " + arguments[c];
            return b
        };
        a.shiftArguments = function() {
            for (var a = arguments.length - 1, b = Array(a), c = 0; c < a; ++c) b[c] = arguments[c + 1];
            return b
        };
        a.createMap = function(a) {
            var b = Object.create(null);
            a && (b["."] = !0, b["/"] = !0, delete b["."], delete b["/"]);
            return b
        };
        a.array = {
            remove: d,
            fastRemove: function(a, b) {
                b = a.indexOf(b);
                0 <= b && (a[b] = a[a.length - 1], --a.length)
            },
            removeAt: e,
            fastRemoveAt: function(a, b) {
                var c = a.length;
                0 > b || b >= c || (a[b] = a[c - 1], a.length = c - 1)
            },
            contains: function(a, b) {
                return 0 <= a.indexOf(b)
            },
            verifyType: function(a, b) {
                if (a && 0 < a.length)
                    for (var c = 0; c < a.length; c++)
                        if (!(a[c] instanceof b)) return cc.logID(1300), !1;
                return !0
            },
            removeArray: function(a, b) {
                for (var c = 0, f = b.length; c < f; c++) d(a, b[c])
            },
            appendObjectsAt: function(a,
                b, c) {
                a.splice.apply(a, [c, 0].concat(b));
                return a
            },
            copy: function(a) {
                var b, c = a.length,
                    d = Array(c);
                for (b = 0; b < c; b += 1) d[b] = a[b];
                return d
            },
            MutableForwardIterator: g("../utils/mutable-forward-iterator")
        };
        k.prototype._get = function() {
            if (0 < this.count) {
                --this.count;
                var a = this._pool[this.count];
                this._pool[this.count] = null;
                return a
            }
            return null
        };
        k.prototype.put = function(a) {
            var b = this._pool;
            this.count < b.length && (!this._cleanup || !1 !== this._cleanup(a)) && (b[this.count] = a, ++this.count)
        };
        k.prototype.resize = function(a) {
            0 <=
                a && (this._pool.length = a, this.count > a && (this.count = a))
        };
        a.Pool = k;
        cc.js = a;
        q.exports = a
    }, {
        "../utils/mutable-forward-iterator": 311,
        "./id-generater": 244
    }],
    249: [function(g, q, m) {
        function h(a, b, d, f) {
            if (a.get || a.set) !1;
            else if (a.hasOwnProperty("default")) {
                var l = "_N$" + b;
                a.get = function() {
                    return this[l]
                };
                a.set = function(a) {
                    var b = this[l];
                    this[l] = a;
                    d.call(this, b)
                };
                !1;
                b = {};
                f[l] = b;
                for (var k in c) f = c[k], a.hasOwnProperty(k) && (b[k] = a[k], f.canUsedInGet || delete a[k])
            } else !1
        }

        function e(a, b, c) {
            a = a ? {
                _short: !0
            } : {
                _short: !0,
                default: b
            };
            c && (a.type = c);
            return a
        }
        var d = g("./js"),
            k = g("./attribute"),
            c = {
                default: {},
                serializable: {},
                editorOnly: {},
                formerlySerializedAs: {}
            };
        m.getFullFormOfProperty = function(a, b) {
            return a && a.constructor === Object ? null : Array.isArray(a) && 0 < a.length ? e(b, [], a) : "function" === typeof a ? e(b, d.isChildClassOf(a, cc.ValueType) ? new a : null, a) : a instanceof k.PrimitiveType ? e(b, a["default"]) : e(b, a)
        };
        m.preprocessAttrs = function(a, b, c, d) {
            for (var f in a)
                if (d = a[f], (c = m.getFullFormOfProperty(d, !1)) && (d = a[f] = c), d) {
                    !1;
                    !1;
                    if (c =
                        d.notify) !1, h(d, f, c, a);
                    if ("type" in d) a: {
                        c = d;d = d.type;
                        var l = b,
                            k = f,
                            e = (!1, !1);
                        if (Array.isArray(d)) {
                            if (e && "default" in c) {
                                var t = g("./CCClass").isArray;
                                t(c["default"]) || cc.warnID(5507, l, k)
                            }
                            if (!(0 < d.length)) {
                                cc.errorID(5508, l, k);
                                break a
                            }
                            c.type = d = d[0]
                        }
                        if ("function" === typeof d) d === String ? (c.type = cc.String, e && cc.warnID(3608, '"' + l + "." + k + '"')) : d === Boolean ? (c.type = cc.Boolean, e && cc.warnID(3609, '"' + l + "." + k + '"')) : d === Number && (c.type = cc.Float, e && cc.warnID(3610, '"' + l + "." + k + '"'));
                        else if (e) switch (d) {
                            case "Number":
                                cc.warnID(5510,
                                    l, k);
                                break;
                            case "String":
                                cc.warn('The type of "' + l + "." + k + '" must be cc.String, not "String".');
                                break;
                            case "Boolean":
                                cc.warn('The type of "' + l + "." + k + '" must be cc.Boolean, not "Boolean".');
                                break;
                            case "Float":
                                cc.warn('The type of "' + l + "." + k + '" must be cc.Float, not "Float".');
                                break;
                            case "Integer":
                                cc.warn('The type of "' + l + "." + k + '" must be cc.Integer, not "Integer".');
                                break;
                            case null:
                                cc.warnID(5511, l, k)
                        }!1
                    }
                }
        };
        !1;
        m.validateMethodWithProps = function(a, b, c, d, k) {
            !1;
            if ("function" !== typeof a && null !== a) return !1, !1;
            !1;
            return !0
        }
    }, {
        "./CCClass": 227,
        "./attribute": 239,
        "./js": 248
    }],
    250: [function(g, q, m) {
        var h = [];
        cc._RF = {
            push: function(e, d, k) {
                void 0 === k && (k = d, d = "");
                h.push({
                    uuid: d,
                    script: k,
                    module: e,
                    exports: e.exports,
                    beh: null
                })
            },
            pop: function() {
                var e = h.pop(),
                    d = e.module,
                    k = d.exports;
                if (k === e.exports) {
                    for (var c in k) return;
                    d.exports = e.cls
                }
            },
            peek: function() {
                return h[h.length - 1]
            }
        };
        !1
    }, {}],
    251: [function(g, q, m) {
        g("./js");
        q.exports = {
            contains: function(h, e) {
                if ("function" == typeof h.contains) return h.contains(e);
                if ("function" ==
                    typeof h.compareDocumentPosition) return !!(16 & h.compareDocumentPosition(e));
                if (e = e.parentNode) {
                    do {
                        if (e === h) return !0;
                        e = e.parentNode
                    } while (null !== e)
                }
                return !1
            },
            isDomNode: "object" === typeof window && ("function" === typeof Node ? function(h) {
                return h instanceof Node
            } : function(h) {
                return h && "object" === typeof h && "number" === typeof h.nodeType && "string" === typeof h.nodeName
            }),
            callInNextTick: function(h, e, d) {
                h && setTimeout(function() {
                    h(e, d)
                }, 0)
            }
        };
        !1;
        !1
    }, {
        "./js": 248
    }],
    252: [function(g, q, m) {
        g("./platform/js");
        g("./value-types");
        g("./utils");
        g("./platform/CCInputManager");
        g("./platform/CCInputExtension");
        g("./event");
        g("./platform/CCSys");
        g("./platform/CCMacro");
        g("./asset-manager");
        g("./CCDirector");
        g("./renderer");
        !0;
        g("./platform/CCView");
        g("./platform/CCScreen");
        g("./CCScheduler");
        g("./event-manager")
    }, {
        "./CCDirector": 59,
        "./CCScheduler": 64,
        "./asset-manager": 82,
        "./event": 176,
        "./event-manager": 172,
        "./platform/CCInputExtension": 230,
        "./platform/CCInputManager": 231,
        "./platform/CCMacro": 232,
        "./platform/CCScreen": 235,
        "./platform/CCSys": 236,
        "./platform/CCView": 237,
        "./platform/js": 248,
        "./renderer": 259,
        "./utils": 309,
        "./value-types": 325
    }],
    253: [function(g, q, m) {
        function h(a) {
            return a && a.__esModule ? a : {
                default: a
            }
        }

        function e(a, b) {
            for (var c = 0; c < b.length; c++) {
                var d = b[c];
                d.enumerable = d.enumerable || !1;
                d.configurable = !0;
                "value" in d && (d.writable = !0);
                Object.defineProperty(a, k(d.key), d)
            }
        }

        function d(a, b, c) {
            b && e(a.prototype, b);
            c && e(a, c);
            Object.defineProperty(a, "prototype", {
                writable: !1
            });
            return a
        }

        function k(a) {
            a: if ("object" === typeof a && null !== a) {
                $jscomp.initSymbol();
                var b = a[Symbol.toPrimitive];
                if (void 0 !== b) {
                    a = b.call(a, "string");
                    if ("object" !== typeof a) break a;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                a = String(a)
            }return "symbol" === typeof a ? a : String(a)
        }

        function c(a) {
            if (void 0 === a) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return a
        }

        function a(a, c) {
            a.prototype = Object.create(c.prototype);
            a.prototype.constructor = a;
            b(a, c)
        }

        function b(a, c) {
            b = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(a,
                b) {
                a.__proto__ = b;
                return a
            };
            return b(a, c)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var l = h(g("./assembler")),
            f = h(g("./utils/dynamic-atlas/manager")),
            n = h(g("./webgl/render-data"));
        g = function(b) {
            function l() {
                var a = b.call(this) || this;
                a._renderData = new n["default"];
                a._renderData.init(c(a));
                a.initData();
                a.initLocal();
                return a
            }
            a(l, b);
            var k = l.prototype;
            k.initData = function() {
                this._renderData.createQuadData(0, this.verticesFloats, this.indicesCount)
            };
            k.initLocal = function() {
                this._local = [];
                this._local.length = 4
            };
            k.updateColor =
                function(a, b) {
                    var c = this._renderData.uintVDatas[0];
                    if (c) {
                        b = null != b ? b : a.node.color._val;
                        a = this.floatsPerVert;
                        for (var d = this.colorOffset, f = c.length; d < f; d += a) c[d] = b
                    }
                };
            k.getBuffer = function() {
                return cc.renderer._handle._meshBuffer
            };
            k.updateWorldVerts = function(a) {
                var b = this._local,
                    c = this._renderData.vDatas[0],
                    d = a.node._worldMatrix.m,
                    f = d[0],
                    l = d[1],
                    k = d[4],
                    e = d[5];
                a = d[12];
                d = d[13];
                var h = b[0],
                    g = b[2],
                    n = b[1],
                    p = b[3];
                b = this.floatsPerVert;
                var t = 0;
                if (1 === f && 0 === l && 0 === k && 1 === e) c[t] = h + a, c[t + 1] = n + d, t += b, c[t] = g + a, c[t +
                    1] = n + d, t += b, c[t] = h + a, c[t + 1] = p + d, t += b, c[t] = g + a, c[t + 1] = p + d;
                else {
                    var u = f * h;
                    f *= g;
                    h *= l;
                    l *= g;
                    g = k * n;
                    k *= p;
                    n *= e;
                    e *= p;
                    c[t] = u + g + a;
                    c[t + 1] = h + n + d;
                    t += b;
                    c[t] = f + g + a;
                    c[t + 1] = l + n + d;
                    t += b;
                    c[t] = u + k + a;
                    c[t + 1] = h + e + d;
                    t += b;
                    c[t] = f + k + a;
                    c[t + 1] = l + e + d
                }
            };
            k.fillBuffers = function(a, b) {
                b.worldMatDirty && this.updateWorldVerts(a);
                a = this._renderData;
                var c = a.vDatas[0];
                a = a.iDatas[0];
                var d = this.getBuffer(b);
                b = d.request(this.verticesCount, this.indicesCount);
                var f = b.byteOffset >> 2,
                    l = d._vData;
                c.length + f > l.length ? l.set(c.subarray(0, l.length - f), f) :
                    l.set(c, f);
                c = d._iData;
                d = b.indiceOffset;
                b = b.vertexOffset;
                f = 0;
                for (l = a.length; f < l; f++) c[d++] = b + a[f]
            };
            k.packToDynamicAtlas = function(a, b) {
                !1;
                if (!b._original && f["default"] && b._texture.packable && b._texture.loaded) {
                    var c = f["default"].insertSpriteFrame(b);
                    c && b._setDynamicAtlasFrame(c)
                }(c = a._materials[0]) && c.getProperty("texture") !== b._texture._texture && (a._vertsDirty = !0, a._updateMaterial())
            };
            d(l, [{
                key: "verticesFloats",
                get: function() {
                    return this.verticesCount * this.floatsPerVert
                }
            }]);
            return l
        }(l["default"]);
        m["default"] = g;
        cc.js.addon(g.prototype, {
            floatsPerVert: 5,
            verticesCount: 4,
            indicesCount: 6,
            uvOffset: 2,
            colorOffset: 4
        });
        cc.Assembler2D = g;
        q.exports = m["default"]
    }, {
        "./assembler": 256,
        "./utils/dynamic-atlas/manager": void 0,
        "./webgl/render-data": 297
    }],
    254: [function(g, q, m) {
        m.__esModule = !0;
        m["default"] = void 0;
        var h = g("./webgl/vertex-format"),
            e = function(d) {
                return d && d.__esModule ? d : {
                    default: d
                }
            }(g("../value-types/vec3")),
            d = [];
        for (g = 0; 4 > g; g++) d.push(cc.v3());
        g = {
            floatsPerVert: 6,
            uvOffset: 3,
            colorOffset: 5,
            getBuffer: function(d) {
                return d._meshBuffer3D
            },
            getVfmt: function() {
                return h.vfmt3D
            },
            updateWorldVerts: function(k) {
                k = k.node._worldMatrix;
                var c = this._local,
                    a = this._renderData.vDatas[0];
                e["default"].set(d[0], c[0], c[1], 0);
                e["default"].set(d[1], c[2], c[1], 0);
                e["default"].set(d[2], c[0], c[3], 0);
                e["default"].set(d[3], c[2], c[3], 0);
                c = this.floatsPerVert;
                for (var b = 0; 4 > b; b++) {
                    var l = d[b];
                    e["default"].transformMat4(l, l, k);
                    var f = c * b;
                    a[f] = l.x;
                    a[f + 1] = l.y;
                    a[f + 2] = l.z
                }
            }
        };
        cc.Assembler3D = g;
        m["default"] = g;
        q.exports = m["default"]
    }, {
        "../value-types/vec3": 335,
        "./webgl/vertex-format": 299
    }],
    255: [function(g, q, m) {
        function h(a, b) {
            a.prototype = Object.create(b.prototype);
            a.prototype.constructor = a;
            e(a, b)
        }

        function e(a, b) {
            e = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(a, b) {
                a.__proto__ = b;
                return a
            };
            return e(a, b)
        }

        function d(a) {
            Object.getOwnPropertyDescriptor(a, "__assemblerId__") || (a.__assemblerId__ = ++k);
            return a.__assemblerId__
        }
        m.__esModule = !0;
        m["default"] = void 0;
        g = function(a) {
            return a && a.__esModule ? a : {
                default: a
            }
        }(g("../utils/pool"));
        var k = 0,
            c = new(function(a) {
                function b() {
                    var b =
                        arguments.length;
                    for (var c = Array(b), d = 0; d < b; d++) c[d] = arguments[d];
                    b = a.call.apply(a, [this].concat(c)) || this;
                    b._pool = {};
                    return b
                }
                h(b, a);
                var c = b.prototype;
                c.put = function(a) {
                    if (a)
                        if (this.enabled) {
                            var b = d(a.constructor),
                                c = this._pool;
                            c[b] || (c[b] = []);
                            this.count > this.maxSize || (this._clean(a), c[b].push(a), this.count++)
                        } else !1
                };
                c.get = function(a) {
                    if (this.enabled) {
                        var b = this._pool;
                        var c = d(a);
                        b = b[c] && b[c].pop()
                    }
                    b ? this.count-- : b = new a;
                    return b
                };
                c.clear = function() {
                    !1;
                    this._pool = {};
                    this.count = 0
                };
                c._clean = function(a) {
                    !1;
                    a._renderComp = null
                };
                return b
            }(g["default"]));
        g["default"].register("assembler", c);
        m["default"] = c;
        q.exports = m["default"]
    }, {
        "../utils/pool": 312
    }],
    256: [function(g, q, m) {
        m.__esModule = !0;
        m["default"] = void 0;
        var h = g("./webgl/vertex-format"),
            e = function(d) {
                return d && d.__esModule ? d : {
                    default: d
                }
            }(g("./assembler-pool"));
        g = function() {
            function d() {
                this._extendNative && this._extendNative()
            }
            var k = d.prototype;
            k.init = function(c) {
                this._renderComp = c
            };
            k.updateRenderData = function(c) {};
            k.fillBuffers = function(c, a) {};
            k.getVfmt =
                function() {
                    return h.vfmtPosUvColor
                };
            return d
        }();
        m["default"] = g;
        g.register = function(d, k) {
            d.__assembler__ = k
        };
        g.init = function(d) {
            for (var k = d.constructor, c = k.__assembler__; !c;) {
                k = k.$super;
                if (!k) {
                    cc.warn("Can not find assembler for render component : [" + cc.js.getClassName(d) + "]");
                    return
                }
                c = k.__assembler__
            }
            c.getConstructor && (c = c.getConstructor(d));
            d._assembler && d._assembler.constructor === c || (k = e["default"].get(c), k.init(d), d._assembler = k)
        };
        cc.Assembler = g;
        q.exports = m["default"]
    }, {
        "./assembler-pool": 255,
        "./webgl/vertex-format": 299
    }],
    257: [function(g, q, m) {
        g = function(h) {
            try {
                var e = h.getContext("2d")
            } catch (d) {
                console.error(d);
                return
            }
            this._canvas = h;
            this._ctx = e;
            this._caps = {};
            this._stats = {
                drawcalls: 0
            };
            this._sx = this._sy = this._sw = this._sh = this._vx = this._vy = this._vw = this._vh = 0
        };
        g.prototype._restoreTexture = function(h) {};
        g.prototype.setViewport = function(h, e, d, k) {
            if (this._vx !== h || this._vy !== e || this._vw !== d || this._vh !== k) this._vx = h, this._vy = e, this._vw = d, this._vh = k
        };
        g.prototype.setScissor = function(h, e, d, k) {
            if (this._sx !== h || this._sy !== e || this._sw !==
                d || this._sh !== k) this._sx = h, this._sy = e, this._sw = d, this._sh = k
        };
        g.prototype.clear = function(h) {
            var e = this._ctx;
            e.clearRect(this._vx, this._vy, this._vw, this._vh);
            !h || 0 === h[0] && 0 === h[1] && 0 === h[2] || (e.fillStyle = "rgb(" + h[0] + "," + h[1] + "," + h[2] + ")", e.globalAlpha = h[3], e.fillRect(this._vx, this._vy, this._vw, this._vh))
        };
        g.prototype.resetDrawCalls = function() {
            this._stats.drawcalls = 0
        };
        g.prototype.getDrawCalls = function() {
            return this._stats.drawcalls
        };
        q.exports = g
    }, {}],
    258: [function(g, q, m) {
        g = function(h, e) {
            this._device =
                h;
            this._height = this._width = 4;
            this._image = null;
            e && (void 0 !== e.width && (this._width = e.width), void 0 !== e.height && (this._height = e.height), this.updateImage(e))
        };
        g.prototype.update = function(h) {
            this.updateImage(h)
        };
        g.prototype.updateImage = function(h) {
            h.images && h.images[0] && (h = h.images[0]) && h !== this._image && (this._image = h)
        };
        g.prototype.destroy = function() {
            this._image = null
        };
        q.exports = g
    }, {}],
    259: [function(g, q, m) {
        function h(c) {
            return c && c.__esModule ? c : {
                default: c
            }
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var e = h(g("../../renderer/gfx")),
            d = h(g("../../renderer/core/input-assembler")),
            k = h(g("../../renderer/core/pass"));
        d = cc.renderer = {
            Texture2D: null,
            InputAssembler: d["default"],
            Pass: k["default"],
            renderEngine: null,
            canvas: null,
            device: null,
            scene: null,
            drawCalls: 0,
            _handle: null,
            _cameraNode: null,
            _camera: null,
            _forward: null,
            _flow: null,
            initWebGL: function(c, a) {
                g("./webgl/assemblers");
                var b = g("./webgl/model-batcher");
                this.Texture2D = e["default"].Texture2D;
                this.canvas = c;
                this._flow = cc.RenderFlow;
                !1;
                var d = g("../../renderer/scene/scene"),
                    f = g("../../renderer/renderers/forward-renderer");
                this.device = new e["default"].Device(c, a);
                this.scene = new d;
                c = new e["default"].Texture2D(this.device, {
                    images: [],
                    width: 128,
                    height: 128,
                    wrapS: e["default"].WRAP_REPEAT,
                    wrapT: e["default"].WRAP_REPEAT,
                    format: e["default"].TEXTURE_FMT_RGB8,
                    genMipmaps: !1
                });
                this._forward = new f(this.device, {
                    defaultTexture: c,
                    programTemplates: [],
                    programChunks: {}
                });
                this._handle = new b(this.device, this.scene);
                this._flow.init(this._handle, this._forward)
            },
            initCanvas: function(c) {
                var a = g("./canvas"),
                    b = g("./canvas/Texture2D"),
                    d = g("./canvas/Device");
                this.Device = d;
                this.Texture2D = b;
                this.canvas = c;
                this.device = new d(c);
                this._camera = {
                    a: 1,
                    b: 0,
                    c: 0,
                    d: 1,
                    tx: 0,
                    ty: 0
                };
                this._handle = new a.RenderComponentHandle(this.device, this._camera);
                this._forward = new a.ForwardRenderer;
                this._flow = cc.RenderFlow;
                this._flow.init(this._handle, this._forward)
            },
            updateCameraViewport: function() {
                if (!0, cc.director) {
                    var c = cc.director.getScene();
                    c && c.setScale(1, 1, 1)
                }
                cc.game.renderType === cc.game.RENDER_TYPE_CANVAS && (c = cc.view.getViewportRect(), this.device.setViewport(c.x, c.y, c.width, c.height),
                    this._camera.a = cc.view.getScaleX(), this._camera.d = cc.view.getScaleY(), this._camera.tx = c.x, this._camera.ty = c.y + c.height)
            },
            render: function(c, a) {
                this.device.resetDrawCalls();
                c && (this._flow.render(c, a), this.drawCalls = this.device.getDrawCalls())
            },
            clear: function() {
                this._handle.reset();
                this._forward.clear()
            }
        };
        m["default"] = d;
        q.exports = m["default"]
    }, {
        "../../renderer/core/input-assembler": 348,
        "../../renderer/core/pass": 349,
        "../../renderer/gfx": 358,
        "../../renderer/renderers/forward-renderer": 377,
        "../../renderer/scene/scene": 381,
        "./canvas": void 0,
        "./canvas/Device": 257,
        "./canvas/Texture2D": 258,
        "./webgl/assemblers": 269,
        "./webgl/model-batcher": 295
    }],
    260: [function(g, q, m) {
        function h() {
            this._func = d;
            this._next = null
        }

        function e(d, e) {
            if (d === k || d === c) return A;
            var g = new h;
            g._next = e || A;
            switch (d) {
                case a:
                    g._func = g._localTransform;
                    break;
                case b:
                    g._func = g._worldTransform;
                    break;
                case l:
                    g._func = g._updateRenderData;
                    break;
                case f:
                    g._func = g._opacity;
                    break;
                case n:
                    g._func = g._color;
                    break;
                case v:
                    g._func = g._render;
                    break;
                case p:
                    g._func = g._children;
                    break;
                case t:
                    g._func = g._postRender
            }
            return g
        }

        function d(a) {
            for (var b = a._renderFlag, c = B, d = null, f = x; 0 < f;) f & b && (d = e(f, d)), f >>= 1;
            (c[b] = d)._func(a)
        }
        m = 0;
        var k = 1 << m++,
            c = 1 << m++,
            a = 1 << m++,
            b = 1 << m++;
        g = a | b;
        var l = 1 << m++,
            f = 1 << m++,
            n = 1 << m++,
            u = f | n,
            v = 1 << m++,
            p = 1 << m++,
            t = 1 << m++,
            x = 1 << m++,
            z, E, w = 0;
        m = h.prototype;
        m._doNothing = function() {};
        m._localTransform = function(b) {
            b._updateLocalMatrix();
            b._renderFlag &= ~a;
            this._next._func(b)
        };
        m._worldTransform = function(a) {
            z.worldMatDirty++;
            var c = a._matrix,
                d = a._trs,
                f = c.m;
            f[12] = d[0];
            f[13] = d[1];
            f[14] =
                d[2];
            a._mulMat(a._worldMatrix, a._parent._worldMatrix, c);
            a._renderFlag &= ~b;
            this._next._func(a);
            z.worldMatDirty--
        };
        m._updateRenderData = function(a) {
            var b = a._renderComponent;
            b._assembler.updateRenderData(b);
            a._renderFlag &= ~l;
            this._next._func(a)
        };
        m._opacity = function(a) {
            z.parentOpacityDirty++;
            this._next._func(a);
            a._renderFlag &= ~f;
            z.parentOpacityDirty--
        };
        m._color = function(a) {
            var b = a._renderComponent;
            b && b._updateColor();
            a._renderFlag &= ~n;
            this._next._func(a)
        };
        m._render = function(a) {
            var b = a._renderComponent;
            b._checkBacth(z, a._cullingMask);
            b._assembler.fillBuffers(b, z);
            this._next._func(a)
        };
        m._children = function(a) {
            for (var c = w, d = z, f = d.parentOpacity, l = d.parentOpacity *= a._opacity / 255, k = (d.worldMatDirty ? b : 0) | (d.parentOpacityDirty ? u : 0), e = a._children, h = 0, g = e.length; h < g; h++) {
                var n = e[h];
                n._renderFlag |= k;
                if (n._activeInHierarchy && 0 !== n._opacity) {
                    w = n._cullingMask = 0 === n.groupIndex ? c : 1 << n.groupIndex;
                    var p = n._color._val;
                    n._color._fastSetA(n._opacity * l);
                    B[n._renderFlag]._func(n);
                    n._color._val = p
                }
            }
            d.parentOpacity = f;
            this._next._func(a)
        };
        m._postRender = function(a) {
            var b = a._renderComponent;
            b._checkBacth(z, a._cullingMask);
            b._assembler.postFillBuffers(b, z);
            this._next._func(a)
        };
        var A = new h;
        A._func = A._doNothing;
        A._next = A;
        var B = {};
        h.flows = B;
        h.createFlow = e;
        var y = [];
        h.registerValidate = function(a) {
            a._inValidateList || (y.push(a), a._inValidateList = !0)
        };
        h.validateRenderers = function() {
            for (var a = 0, b = y.length; a < b; a++) {
                var c = y[a];
                c.isValid && (c.enabledInHierarchy ? c._validateRender() : c.disableRender(), c._inValidateList = !1)
            }
            y.length = 0
        };
        h.visitRootNode =
            function(a) {
                h.validateRenderers();
                var c = w;
                w = a._cullingMask;
                a._renderFlag & b ? (z.worldMatDirty++, a._calculWorldMatrix(), a._renderFlag &= ~b, B[a._renderFlag]._func(a), z.worldMatDirty--) : B[a._renderFlag]._func(a);
                w = c
            };
        h.render = function(a, b) {
            z.reset();
            z.walking = !0;
            h.visitRootNode(a);
            z.terminate();
            z.walking = !1;
            E.render(z._renderScene, b)
        };
        h.renderCamera = function(a, b) {
            z.reset();
            z.walking = !0;
            h.visitRootNode(b);
            z.terminate();
            z.walking = !1;
            E.renderCamera(a, z._renderScene)
        };
        h.init = function(a, b) {
            z = a;
            E = b;
            B[0] = A;
            for (a =
                1; a < x; a++) B[a] = new h
        };
        h.getBachther = function() {
            return z
        };
        h.FLAG_DONOTHING = k;
        h.FLAG_BREAK_FLOW = c;
        h.FLAG_LOCAL_TRANSFORM = a;
        h.FLAG_WORLD_TRANSFORM = b;
        h.FLAG_TRANSFORM = g;
        h.FLAG_UPDATE_RENDER_DATA = l;
        h.FLAG_OPACITY = f;
        h.FLAG_COLOR = n;
        h.FLAG_OPACITY_COLOR = u;
        h.FLAG_RENDER = v;
        h.FLAG_CHILDREN = p;
        h.FLAG_POST_RENDER = t;
        h.FLAG_FINAL = x;
        q.exports = cc.RenderFlow = h
    }, {}],
    261: [function(g, q, m) {
        function h(a, b) {
            a.prototype = Object.create(b.prototype);
            a.prototype.constructor = a;
            e(a, b)
        }

        function e(a, b) {
            e = Object.setPrototypeOf ? Object.setPrototypeOf.bind() :
                function(a, b) {
                    a.__proto__ = b;
                    return a
                };
            return e(a, b)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var d = function(a) {
                return a && a.__esModule ? a : {
                    default: a
                }
            }(g("../../assembler-2d")),
            k = g("../../../utils/text-utils"),
            c = g("../../../platform/CCMacro"),
            a = g("../../../components/CCLabel").Overflow,
            b = g("../utils").shareLabelInfo,
            l = function() {
                this["char"] = "";
                this.valid = !0;
                this.line = this.y = this.x = 0;
                this.hash = ""
            },
            f = cc.rect(),
            n = null,
            u = [],
            v = [],
            p = [],
            t = [],
            x = null,
            z = 0,
            E = 0,
            w = 0,
            A = 0,
            B = 0,
            y = 1,
            C = null,
            F = cc.size(),
            G = "",
            D = 0,
            I = 0,
            K = 0,
            L =
            0,
            R = 0,
            M = 0,
            S = 0,
            O = !1,
            Q = 0,
            V = 0,
            ba = 0;
        g = function(d) {
            function e() {
                return d.apply(this, arguments) || this
            }
            h(e, d);
            var g = e.prototype;
            g.updateRenderData = function(a) {
                a._vertsDirty && n !== a && (n = a, this._reserveQuads(a, a.string.toString().length), this._updateFontFamily(a), this._updateProperties(a), this._updateLabelInfo(a), this._updateContent(), this.updateWorldVerts(a), n._actualFontSize = D, n.node.setContentSize(F), n._vertsDirty = !1, n = null, this._resetProperties())
            };
            g._updateFontScale = function() {
                y = D / I
            };
            g._updateFontFamily =
                function(a) {
                    var c = a.font;
                    C = c.spriteFrame;
                    x = c._fntConfig;
                    b.fontAtlas = c._fontDefDictionary;
                    this.packToDynamicAtlas(a, C)
                };
            g._updateLabelInfo = function() {
                b.hash = "";
                b.margin = 0
            };
            g._updateProperties = function(c) {
                G = c.string.toString();
                D = c.fontSize;
                I = x ? x.fontSize : c.fontSize;
                K = c.horizontalAlign;
                L = c.verticalAlign;
                R = c.spacingX;
                S = c.overflow;
                M = c._lineHeight;
                F.width = c.node.width;
                F.height = c.node.height;
                S === a.NONE ? (O = !1, F.width += 2 * b.margin, F.height += 2 * b.margin) : S === a.RESIZE_HEIGHT ? (O = !0, F.height += 2 * b.margin) : O = c.enableWrapText;
                b.lineHeight = M;
                b.fontSize = D;
                this._setupBMFontOverflowMetrics()
            };
            g._resetProperties = function() {
                C = x = null;
                b.hash = "";
                b.margin = 0
            };
            g._updateContent = function() {
                this._updateFontScale();
                this._computeHorizontalKerningForText();
                this._alignText()
            };
            g._computeHorizontalKerningForText = function() {
                var a = G,
                    b = a.length,
                    c;
                x && (c = x.kerningDict);
                if (c && !cc.js.isEmptyObject(c))
                    for (var d = -1, f = 0; f < b; ++f) {
                        var l = a.charCodeAt(f);
                        d = c[d << 16 | 65535 & l] || 0;
                        u[f] = f < b - 1 ? d : 0;
                        d = l
                    } else u.length = 0
            };
            g._multilineTextWrap = function(c) {
                for (var d =
                        G.length, f = 0, l = 0, e = 0, h = 0, g = 0, n = 0, t = 0, v, w = cc.v2(0, 0), m = 0; m < d;) {
                    var r = G.charAt(m);
                    if ("\n" === r) p.push(g), g = 0, f++, l = 0, e -= M * this._getFontScale() + 0, this._recordPlaceholderInfo(m, r), m++;
                    else {
                        for (var C = c(G, m, d), D = n, q = t, I = g, K = l, da = !1, T = 0; T < C; ++T) {
                            var N = m + T;
                            r = G.charAt(N);
                            if ("\r" === r) this._recordPlaceholderInfo(N, r);
                            else if (v = b.fontAtlas.getLetterDefinitionForChar(r, b)) {
                                var L = K + v.offsetX * y - b.margin;
                                if (O && 0 < ba && 0 < l && L + v.w * y > ba && !k.isUnicodeSpace(r)) {
                                    p.push(g);
                                    g = 0;
                                    f++;
                                    l = 0;
                                    e -= M * this._getFontScale() + 0;
                                    da = !0;
                                    break
                                }
                                w.x =
                                    L;
                                w.y = e - v.offsetY * y + b.margin;
                                this._recordLetterInfo(w, r, N, f);
                                N + 1 < u.length && N < d - 1 && (K += u[N + 1]);
                                K += v.xAdvance * y + R - 2 * b.margin;
                                I = w.x + v.w * y - b.margin;
                                D < w.y && (D = w.y);
                                q > w.y - v.h * y && (q = w.y - v.h * y)
                            } else this._recordPlaceholderInfo(N, r), v = "", x && (v = x.atlasName), console.log("Can't find letter definition in texture atlas " + v + " for letter:" + r)
                        }
                        da || (l = K, g = I, n < D && (n = D), t > q && (t = q), h < g && (h = g), m += C)
                    }
                }
                p.push(g);
                z = f + 1;
                E = z * M * this._getFontScale();
                1 < z && (E += 0 * (z - 1));
                F.width = Q;
                F.height = V;
                0 >= Q && (F.width = parseFloat(h.toFixed(2)) +
                    2 * b.margin);
                0 >= V && (F.height = parseFloat(E.toFixed(2)) + 2 * b.margin);
                A = F.height;
                B = 0;
                S !== a.CLAMP && (0 < n && (A = F.height + n), t < -E && (B = E + t));
                return !0
            };
            g._getFirstCharLen = function() {
                return 1
            };
            g._getFontScale = function() {
                return S === a.SHRINK ? y : 1
            };
            g._getFirstWordLen = function(a, c, d) {
                var f = a.charAt(c);
                if (k.isUnicodeCJK(f) || "\n" === f || k.isUnicodeSpace(f)) return 1;
                var l = 1,
                    e = b.fontAtlas.getLetterDefinitionForChar(f, b);
                if (!e) return l;
                for (var h = e.xAdvance * y + R, g = c + 1; g < d; ++g) {
                    f = a.charAt(g);
                    e = b.fontAtlas.getLetterDefinitionForChar(f,
                        b);
                    if (!e) break;
                    c = h + e.offsetX * y;
                    if (c + e.w * y > ba && !k.isUnicodeSpace(f) && 0 < ba) break;
                    h += e.xAdvance * y + R;
                    if ("\n" === f || k.isUnicodeSpace(f) || k.isUnicodeCJK(f)) break;
                    l++
                }
                return l
            };
            g._multilineTextWrapByWord = function() {
                return this._multilineTextWrap(this._getFirstWordLen)
            };
            g._multilineTextWrapByChar = function() {
                return this._multilineTextWrap(this._getFirstCharLen)
            };
            g._recordPlaceholderInfo = function(a, c) {
                if (a >= v.length) {
                    var d = new l;
                    v.push(d)
                }
                v[a]["char"] = c;
                v[a].hash = c.charCodeAt(0) + b.hash;
                v[a].valid = !1
            };
            g._recordLetterInfo =
                function(a, c, d, f) {
                    if (d >= v.length) {
                        var k = new l;
                        v.push(k)
                    }
                    k = c.charCodeAt(0) + b.hash;
                    v[d].line = f;
                    v[d]["char"] = c;
                    v[d].hash = k;
                    v[d].valid = b.fontAtlas.getLetter(k).valid;
                    v[d].x = a.x;
                    v[d].y = a.y
                };
            g._alignText = function() {
                E = 0;
                p.length = 0;
                this._multilineTextWrapByWord();
                this._computeAlignmentOffset();
                S === a.SHRINK && 0 < D && this._isVerticalClamp() && this._shrinkLabelToContentSize(this._isVerticalClamp);
                this._updateQuads() || S === a.SHRINK && this._shrinkLabelToContentSize(this._isHorizontalClamp)
            };
            g._scaleFontSizeDown = function(a) {
                var b = !0;
                a || (a = .1, b = !1);
                D = a;
                b && this._updateContent()
            };
            g._shrinkLabelToContentSize = function(a) {
                for (var b = 0, c = 0 | D, d; b < c;) {
                    var f = d = b + c + 1 >> 1;
                    if (0 >= f) break;
                    y = f / I;
                    this._multilineTextWrapByWord();
                    this._computeAlignmentOffset();
                    a() ? c = d - 1 : b = d
                }
                a = b;
                0 <= a && this._scaleFontSizeDown(a)
            };
            g._isVerticalClamp = function() {
                return E > F.height
            };
            g._isHorizontalClamp = function() {
                for (var a = !1, c = 0, d = G.length; c < d; ++c) {
                    var f = v[c];
                    if (f.valid) {
                        var l = b.fontAtlas.getLetter(f.hash);
                        l = f.x + l.w * y;
                        f = f.line;
                        if (0 < Q)
                            if (O) {
                                if (p[f] > F.width && (l > F.width ||
                                        0 > l)) {
                                    a = !0;
                                    break
                                }
                            } else if (l > F.width) {
                            a = !0;
                            break
                        }
                    }
                }
                return a
            };
            g._isHorizontalClamped = function(a, b) {
                b = p[b];
                a = a > F.width || 0 > a;
                return O ? b > F.width && a : a
            };
            g._updateQuads = function() {
                var c = C ? C._texture : b.fontAtlas.getTexture(),
                    d = n.node;
                this.verticesCount = this.indicesCount = 0;
                this._renderData && (this._renderData.dataLength = 0);
                var l = d._anchorPoint.x * F.width;
                d = d._anchorPoint.y * F.height;
                for (var k = !0, e = 0, h = G.length; e < h; ++e) {
                    var g = v[e];
                    if (g.valid) {
                        var p = b.fontAtlas.getLetter(g.hash);
                        f.height = p.h;
                        f.width = p.w;
                        f.x = p.u;
                        f.y = p.v;
                        var u = g.y + w;
                        if (0 < V) {
                            if (u > A) {
                                var x = u - A;
                                f.y += x;
                                f.height -= x;
                                u -= x
                            }
                            u - p.h * y < B && S === a.CLAMP && (f.height = u < B ? 0 : (u - B) / y)
                        }
                        x = g.line;
                        var z = g.x + p.w / 2 * y + t[x];
                        if (0 < Q && this._isHorizontalClamped(z, x))
                            if (S === a.CLAMP) f.width = 0;
                            else if (S === a.SHRINK) {
                            if (F.width > p.w) {
                                k = !1;
                                break
                            }
                            f.width = 0
                        }
                        0 < f.height && 0 < f.width && (p = this._determineRect(f), this.appendQuad(n, c, f, p, g.x + t[g.line] - l, u - d, y))
                    }
                }
                this._quadsUpdated(n);
                return k
            };
            g._determineRect = function(a) {
                var b = C.isRotated(),
                    c = C._originalSize,
                    d = C._rect,
                    f = C._offset,
                    l = f.x + (c.width -
                        d.width) / 2;
                c = f.y - (c.height - d.height) / 2;
                b ? (f = a.x, a.x = d.x + d.height - a.y - a.height - c, a.y = f + d.y - l, 0 > a.y && (a.height += c)) : (a.x += d.x - l, a.y += d.y + c);
                return b
            };
            g._computeAlignmentOffset = function() {
                t.length = 0;
                switch (K) {
                    case c.TextAlignment.LEFT:
                        for (var a = 0; a < z; ++a) t.push(0);
                        break;
                    case c.TextAlignment.CENTER:
                        a = 0;
                        for (var b = p.length; a < b; a++) t.push((F.width - p[a]) / 2);
                        break;
                    case c.TextAlignment.RIGHT:
                        for (a = 0, b = p.length; a < b; a++) t.push(F.width - p[a])
                }
                w = F.height;
                L !== c.VerticalTextAlignment.TOP && (a = F.height - E + M * this._getFontScale() -
                    I * y, L === c.VerticalTextAlignment.BOTTOM ? w -= a : w -= a / 2)
            };
            g._setupBMFontOverflowMetrics = function() {
                var b = F.width,
                    c = F.height;
                S === a.RESIZE_HEIGHT && (c = 0);
                S === a.NONE && (c = b = 0);
                Q = b;
                V = c;
                ba = b
            };
            g.updateWorldVerts = function() {};
            g.appendQuad = function(a, b, c, d, f, l, k) {};
            g._quadsUpdated = function(a) {};
            g._reserveQuads = function() {};
            return e
        }(d["default"]);
        m["default"] = g;
        q.exports = m["default"]
    }, {
        "../../../components/CCLabel": 140,
        "../../../platform/CCMacro": 232,
        "../../../utils/text-utils": 317,
        "../../assembler-2d": 253,
        "../utils": 265
    }],
    262: [function(g, q, m) {
        function h() {
            this._rect = null;
            this.uv = [];
            this._original = this._texture = null
        }
        h.prototype = {
            constructor: h,
            getRect: function() {
                return cc.rect(this._rect)
            },
            setRect: function(e) {
                this._rect = e;
                this._texture && this._calculateUV()
            },
            _setDynamicAtlasFrame: function(e) {
                e && (this._original = {
                    _texture: this._texture,
                    _x: this._rect.x,
                    _y: this._rect.y
                }, this._texture = e.texture, this._rect.x = e.x, this._rect.y = e.y, this._calculateUV())
            },
            _resetDynamicAtlasFrame: function() {
                this._original && (this._rect.x = this._original._x,
                    this._rect.y = this._original._y, this._texture = this._original._texture, this._original = null, this._calculateUV())
            },
            _refreshTexture: function(e) {
                this._texture = e;
                this._rect = cc.rect(0, 0, e.width, e.height);
                this._calculateUV()
            },
            _calculateUV: function() {
                var e = this._rect,
                    d = this._texture,
                    k = this.uv,
                    c = d.width,
                    a = d.height;
                d = 0 === c ? 0 : e.x / c;
                c = 0 === c ? 0 : (e.x + e.width) / c;
                var b = 0 === a ? 0 : (e.y + e.height) / a;
                e = 0 === a ? 0 : e.y / a;
                k[0] = d;
                k[1] = b;
                k[2] = c;
                k[3] = b;
                k[4] = d;
                k[5] = e;
                k[6] = c;
                k[7] = e
            }
        };
        q.exports = h
    }, {}],
    263: [function(g, q, m) {
        function h(a,
            b) {
            a.prototype = Object.create(b.prototype);
            a.prototype.constructor = a;
            e(a, b)
        }

        function e(a, b) {
            e = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(a, b) {
                a.__proto__ = b;
                return a
            };
            return e(a, b)
        }

        function d(a, b) {
            this._texture = null;
            this._labelInfo = b;
            this._char = a;
            this._context = this._canvas = this._data = this._hash = null;
            this._offsetY = this._height = this._width = 0;
            this._hash = a.charCodeAt(0) + b.hash
        }

        function k(a, b) {
            var c = new n;
            c.initWithSize(a, b);
            c.update();
            this._fontDefDictionary = new x(c);
            this._nexty = this._y =
                this._x = 0;
            this._width = a;
            this._height = b;
            cc.director.on(cc.Director.EVENT_BEFORE_SCENE_LAUNCH, this.beforeSceneLoad, this)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var c = function(a) {
                return a && a.__esModule ? a : {
                    default: a
                }
            }(g("../../webgl/assemblers/label/2d/bmfont")),
            a = g("../../../components/CCLabel"),
            b = g("../../../components/CCLabelOutline"),
            l = g("../../../utils/text-utils"),
            f = g("../../../components/CCComponent"),
            n = g("../../../assets/CCRenderTexture"),
            u = cc.js.isChildClassOf(b, f),
            v = g("../utils").getFontFamily,
            p = g("../utils").shareLabelInfo,
            t = cc.BitmapFont.FontLetterDefinition,
            x = cc.BitmapFont.FontAtlas,
            z = cc.Color.WHITE,
            E = (1 / 255).toFixed(3);
        d.prototype = {
            constructor: d,
            updateRenderData: function() {
                this._updateProperties();
                this._updateTexture()
            },
            _updateProperties: function() {
                this._texture = new cc.Texture2D;
                this._data = a._canvasPool.get();
                this._canvas = this._data.canvas;
                this._context = this._data.context;
                this._context.font = this._labelInfo.fontDesc;
                var b = l.safeMeasureText(this._context, this._char, this._labelInfo.fontDesc),
                    c = 2 * this._labelInfo.margin + 2;
                this._width = parseFloat(b.toFixed(2)) + c;
                this._height = (1 + l.BASELINE_RATIO) * this._labelInfo.fontSize + c;
                this._offsetY = -this._labelInfo.fontSize * l.BASELINE_RATIO / 2;
                this._canvas.width !== this._width && (this._canvas.width = this._width);
                this._canvas.height !== this._height && (this._canvas.height = this._height);
                this._texture.initWithElement(this._canvas)
            },
            _updateTexture: function() {
                var a = this._context,
                    b = this._labelInfo,
                    c = this._canvas.width,
                    d = this._canvas.height,
                    f = this._labelInfo.fontSize,
                    k = c / 2;
                f = d / 2 + f * l.MIDDLE_RATIO + f * l.BASELINE_OFFSET;
                var e = b.color;
                a.lineJoin = "round";
                a.textAlign = "center";
                a.clearRect(0, 0, c, d);
                a.fillStyle = "rgba(" + e.r + ", " + e.g + ", " + e.b + ", " + E + ")";
                a.fillRect(0, 0, c, d);
                a.font = b.fontDesc;
                a.fillStyle = "rgba(" + e.r + ", " + e.g + ", " + e.b + ", 1)";
                b.isOutlined && 0 < b.margin && (c = b.out || z, a.strokeStyle = "rgba(" + c.r + ", " + c.g + ", " + c.b + ", " + c.a / 255 + ")", a.lineWidth = 2 * b.margin, a.strokeText(this._char, k, f));
                a.fillText(this._char, k, f);
                this._texture.handleLoadedTexture()
            },
            destroy: function() {
                this._texture.destroy();
                this._texture = null;
                a._canvasPool.put(this._data)
            }
        };
        cc.js.mixin(k.prototype, {
            insertLetterTexture: function(a) {
                var b = a._texture,
                    c = b.width,
                    d = b.height;
                this._x + c + 0 > this._width && (this._x = 0, this._y = this._nexty);
                this._y + d > this._nexty && (this._nexty = this._y + d + 0);
                if (this._nexty > this._height) return null;
                this._fontDefDictionary._texture.drawTextureAt(b, this._x, this._y);
                this._dirty = !0;
                b = new t;
                b.u = this._x + 1;
                b.v = this._y + 1;
                b.texture = this._fontDefDictionary._texture;
                b.valid = !0;
                b.w = a._width - 2;
                b.h = a._height - 2;
                b.xAdvance =
                    b.w;
                b.offsetY = a._offsetY;
                this._x += c + 0;
                this._fontDefDictionary.addLetterDefinitions(a._hash, b);
                return b
            },
            update: function() {
                this._dirty && (this._fontDefDictionary._texture.update(), this._dirty = !1)
            },
            reset: function() {
                this._nexty = this._y = this._x = 0;
                for (var a = this._fontDefDictionary._letterDefinitions, b = 0, c = a.length; b < c; b++) {
                    var d = a[b];
                    d.isValid && d.destroy()
                }
                this._fontDefDictionary.clear()
            },
            destroy: function() {
                this.reset();
                this._fontDefDictionary._texture.destroy();
                this._fontDefDictionary._texture = null
            },
            beforeSceneLoad: function() {
                this.clearAllCache()
            },
            clearAllCache: function() {
                this.destroy();
                var a = new n;
                a.initWithSize(this._width, this._height);
                a.update();
                this._fontDefDictionary._texture = a
            },
            getLetter: function(a) {
                return this._fontDefDictionary._letterDefinitions[a]
            },
            getTexture: function() {
                return this._fontDefDictionary.getTexture()
            },
            getLetterDefinitionForChar: function(a, b) {
                var c = a.charCodeAt(0) + b.hash;
                c = this._fontDefDictionary._letterDefinitions[c];
                c || (a = new d(a, b), a.updateRenderData(), c = this.insertLetterTexture(a), a.destroy());
                return c
            }
        });
        var w = null;
        g = function(a) {
            function c() {
                return a.apply(this, arguments) || this
            }
            h(c, a);
            var d = c.prototype;
            d._getAssemblerData = function() {
                w || (w = new k(2048, 2048), cc.Label._shareAtlas = w);
                return w.getTexture()
            };
            d._updateFontFamily = function(a) {
                p.fontAtlas = w;
                p.fontFamily = v(a);
                var c = u && a.getComponent(b);
                c && c.enabled ? (p.isOutlined = !0, p.margin = c.width, p.out = c.color.clone(), p.out.a = c.color.a * a.node.color.a / 255) : (p.isOutlined = !1, p.margin = 0)
            };
            d._updateLabelInfo = function(a) {
                p.fontDesc = this._getFontDesc();
                p.color = a.node.color;
                a = p.color.toHEX();
                var b = "";
                p.isOutlined && 0 < p.margin && (b = b + p.margin + p.out.toHEX());
                p.hash = "" + p.fontSize + p.fontFamily + a + b
            };
            d._getFontDesc = function() {
                var a = p.fontSize.toString() + "px ";
                return a += p.fontFamily
            };
            d._computeHorizontalKerningForText = function() {};
            d._determineRect = function(a) {
                return !1
            };
            return c
        }(c["default"]);
        m["default"] = g;
        q.exports = m["default"]
    }, {
        "../../../assets/CCRenderTexture": 102,
        "../../../components/CCComponent": 138,
        "../../../components/CCLabel": 140,
        "../../../components/CCLabelOutline": 141,
        "../../../utils/text-utils": 317,
        "../../webgl/assemblers/label/2d/bmfont": 270,
        "../utils": 265
    }],
    264: [function(g, q, m) {
        function h(a, b) {
            a.prototype = Object.create(b.prototype);
            a.prototype.constructor = a;
            e(a, b)
        }

        function e(a, b) {
            e = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(a, b) {
                a.__proto__ = b;
                return a
            };
            return e(a, b)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var d = function(a) {
                return a && a.__esModule ? a : {
                    default: a
                }
            }(g("../../assembler-2d")),
            k = g("../../../utils/text-utils"),
            c = g("../../../platform/CCMacro"),
            a = g("../../../components/CCLabel"),
            b = g("../../../components/CCLabelOutline"),
            l = g("../../../components/CCLabelShadow"),
            f = a.Overflow,
            n = g("../utils").deleteFromDynamicAtlas,
            u = g("../utils").getFontFamily,
            v = (1 / 255).toFixed(3),
            p = null,
            t = null,
            x = null,
            z = "",
            E = "",
            w = 0,
            A = 0,
            B = [],
            y = cc.Size.ZERO,
            C = 0,
            F = 0,
            G = 0,
            D = null,
            I = "",
            K = f.NONE,
            L = !1,
            R = !1,
            M = null,
            S = cc.Color.WHITE,
            O = null,
            Q = cc.Color.BLACK,
            V = cc.rect(),
            ba = cc.Size.ZERO,
            da = cc.Size.ZERO,
            T = !1,
            N = !1,
            fa = !1,
            Z = 0,
            W = cc.Vec2.ZERO,
            X = 0,
            la, ea = ["left", "center", "right"];
        g = function(d) {
            function e() {
                return d.apply(this,
                    arguments) || this
            }
            h(e, d);
            var g = e.prototype;
            g._getAssemblerData = function() {
                la = a._canvasPool.get();
                la.canvas.width = la.canvas.height = 1;
                return la
            };
            g._resetAssemblerData = function(b) {
                b && a._canvasPool.put(b)
            };
            g.updateRenderData = function(a) {
                d.prototype.updateRenderData.call(this, a);
                a._vertsDirty && (this._updateProperties(a), this._calculateLabelFont(), this._updateLabelDimensions(), this._updateTexture(a), this._calDynamicAtlas(a), a._actualFontSize = w, a.node.setContentSize(da), this.updateVerts(a), a._vertsDirty = !1, x = t = p = null)
            };
            g.updateVerts = function() {};
            g._updatePaddingRect = function() {
                var a = 0,
                    b = 0,
                    c = 0,
                    d = 0,
                    f = 0;
                ba.width = ba.height = 0;
                M && (a = b = c = d = f = M.width, ba.width = ba.height = 2 * f);
                O && (f = O.blur + f, c = Math.max(c, -O._offset.x + f), d = Math.max(d, O._offset.x + f), a = Math.max(a, O._offset.y + f), b = Math.max(b, -O._offset.y + f));
                N && (f = A * Math.tan(.20943951), d += f, ba.width += f);
                V.x = c;
                V.y = a;
                V.width = c + d;
                V.height = a + b
            };
            g._updateProperties = function(a) {
                var c = a._assemblerData;
                p = c.context;
                t = c.canvas;
                x = a._frame._original ? a._frame._original._texture :
                    a._frame._texture;
                E = a.string.toString();
                A = w = a._fontSize;
                Z = a.underlineHeight || A / 8;
                K = a.overflow;
                y.width = a.node.width;
                y.height = a.node.height;
                da = a.node.getContentSize();
                C = a._lineHeight;
                F = a.horizontalAlign;
                G = a.verticalAlign;
                D = a.node.color;
                T = a.enableBold;
                N = a.enableItalic;
                fa = a.enableUnderline;
                I = u(a);
                R = a.srcBlendFactor === cc.macro.BlendFactor.ONE;
                !1;
                L = K !== f.NONE && (K === f.RESIZE_HEIGHT || a.enableWrapText);
                (M = (M = b && a.getComponent(b)) && M.enabled && 0 < M.width ? M : null) && S.set(M.color);
                if (O = (O = l && a.getComponent(l)) &&
                    O.enabled ? O : null) Q.set(O.color), Q.a = Q.a * a.node.color.a / 255;
                this._updatePaddingRect()
            };
            g._calculateFillTextStartPosition = function() {
                var a = 0;
                F === c.TextAlignment.RIGHT ? a = y.width - V.width : F === c.TextAlignment.CENTER && (a = (y.width - V.width) / 2);
                var b = this._getLineHeight() * (B.length - 1),
                    d = w * (1 - k.BASELINE_RATIO / 2);
                G !== c.VerticalTextAlignment.TOP && (b = b + V.height + w - y.height, G === c.VerticalTextAlignment.BOTTOM ? (b += k.BASELINE_RATIO / 2 * w, d -= b) : d -= b / 2);
                d += k.BASELINE_OFFSET * w;
                return cc.v2(a + V.x, d + V.y)
            };
            g._setupOutline =
                function() {
                    p.strokeStyle = "rgba(" + S.r + ", " + S.g + ", " + S.b + ", " + S.a / 255 + ")";
                    p.lineWidth = 2 * M.width
                };
            g._setupShadow = function() {
                p.shadowColor = "rgba(" + Q.r + ", " + Q.g + ", " + Q.b + ", " + Q.a / 255 + ")";
                p.shadowBlur = O.blur;
                p.shadowOffsetX = O.offset.x;
                p.shadowOffsetY = -O.offset.y
            };
            g._drawTextEffect = function(a, b) {
                if (O || M || fa) {
                    var d = 1 < B.length && O,
                        f = this._measureText(p, z);
                    O && this._setupShadow();
                    M && this._setupOutline();
                    for (var l = 0; l < B.length; ++l) {
                        var k = a.x;
                        var e = a.y + l * b;
                        d && (M && p.strokeText(B[l], k, e), p.fillText(B[l], k, e));
                        fa &&
                            (X = f(B[l]), F === c.TextAlignment.RIGHT ? W.x = a.x - X : F === c.TextAlignment.CENTER ? W.x = a.x - X / 2 : W.x = a.x, W.y = e + A / 8, p.fillRect(W.x, W.y, X, Z))
                    }
                    d && (p.shadowColor = "transparent")
                }
            };
            g._updateTexture = function() {
                p.clearRect(0, 0, t.width, t.height);
                p.lineJoin = "round";
                if (R) p.fillStyle = "rgba(" + D.r + ", " + D.g + ", " + D.b + ", " + D.a / 255 + ")";
                else {
                    var a = M ? S : D;
                    p.fillStyle = "rgba(" + a.r + ", " + a.g + ", " + a.b + ", " + v + ")";
                    p.fillRect(0, 0, t.width, t.height);
                    p.fillStyle = "rgba(" + D.r + ", " + D.g + ", " + D.b + ", 1)"
                }
                a = this._calculateFillTextStartPosition();
                var b = this._getLineHeight(),
                    c = a.x;
                this._drawTextEffect(a, b);
                for (var d = 0; d < B.length; ++d) {
                    var f = a.y + d * b;
                    M && p.strokeText(B[d], c, f);
                    p.fillText(B[d], c, f)
                }
                O && (p.shadowColor = "transparent");
                x.handleLoadedTexture()
            };
            g._calDynamicAtlas = function(b) {
                if (b.cacheMode === a.CacheMode.BITMAP) {
                    var c = b._frame;
                    n(b, c);
                    c._original || c.setRect(cc.rect(0, 0, t.width, t.height));
                    this.packToDynamicAtlas(b, c)
                }
            };
            g._updateLabelDimensions = function() {
                var a = cc.renderer.device.caps ? cc.renderer.device.caps.maxTextureSize : 2048;
                (y.width >
                    a || y.height > a) && cc.warn("The maximum texture size supported by the device is " + a);
                y.width = Math.min(y.width, a);
                y.height = Math.min(y.height, a);
                a = !1;
                t.width !== y.width && (t.width = y.width, a = !0);
                t.height !== y.height && (t.height = y.height, a = !0);
                a && (p.font = z);
                p.textAlign = ea[F]
            };
            g._getFontDesc = function() {
                var a = w.toString() + "px ";
                a += I;
                T && (a = "bold " + a);
                N && (a = "italic " + a);
                return a
            };
            g._getLineHeight = function() {
                var a = C;
                a = 0 === a ? w : a * w / A;
                return 0 | a
            };
            g._calculateParagraphLength = function(a, b) {
                for (var c = [], d = 0; d < a.length; ++d) {
                    var f =
                        k.safeMeasureText(b, a[d], z);
                    c.push(f)
                }
                return c
            };
            g._measureText = function(a, b) {
                return function(c) {
                    return k.safeMeasureText(a, c, b)
                }
            };
            g._calculateShrinkFont = function(a) {
                var b = this._calculateParagraphLength(a, p),
                    c, d, f = 0;
                if (L) {
                    if (b = da.width, f = da.height, !(0 > b || 0 > f)) {
                        for (var l, e = 0, h = 0 | w + 1, g; e < h;) {
                            g = e + h + 1 >> 1;
                            if (0 >= g) {
                                cc.logID(4003);
                                break
                            }
                            w = g;
                            z = this._getFontDesc();
                            p.font = z;
                            var n = this._getLineHeight();
                            for (c = d = 0; c < a.length; ++c) l = k.safeMeasureText(p, a[c], z), l = k.fragmentText(a[c], l, b, this._measureText(p, z)), d +=
                                l.length * n;
                            d > f ? h = g - 1 : e = g
                        }
                        0 === e ? cc.logID(4003) : (w = e, z = this._getFontDesc(), p.font = z)
                    }
                } else {
                    d = a.length * this._getLineHeight();
                    for (c = 0; c < a.length; ++c) f < b[c] && (f = b[c]);
                    w = A * Math.min(1, (y.width - V.width) / f, y.height / d) | 0;
                    z = this._getFontDesc();
                    p.font = z
                }
            };
            g._calculateWrapText = function(a) {
                if (L) {
                    B = [];
                    for (var b = da.width, c = 0; c < a.length; ++c) {
                        var d = k.safeMeasureText(p, a[c], z);
                        d = k.fragmentText(a[c], d, b, this._measureText(p, z));
                        B = B.concat(d)
                    }
                }
            };
            g._calculateLabelFont = function() {
                var a = E.split("\n");
                B = a;
                z = this._getFontDesc();
                p.font = z;
                switch (K) {
                    case f.NONE:
                        for (var b = 0, c = 0; c < a.length; ++c) {
                            var d = k.safeMeasureText(p, a[c], z);
                            b = b > d ? b : d
                        }
                        a = (B.length + k.BASELINE_RATIO) * this._getLineHeight();
                        b = parseFloat(b.toFixed(2));
                        a = parseFloat(a.toFixed(2));
                        y.width = b + V.width;
                        y.height = a + V.height;
                        da.width = b + ba.width;
                        da.height = a + ba.height;
                        break;
                    case f.SHRINK:
                        this._calculateShrinkFont(a);
                        this._calculateWrapText(a);
                        break;
                    case f.CLAMP:
                        this._calculateWrapText(a);
                        break;
                    case f.RESIZE_HEIGHT:
                        this._calculateWrapText(a), b = (B.length + k.BASELINE_RATIO) * this._getLineHeight(),
                            y.height = b + V.height, da.height = b + ba.height
                }
            };
            return e
        }(d["default"]);
        m["default"] = g;
        q.exports = m["default"]
    }, {
        "../../../components/CCLabel": 140,
        "../../../components/CCLabelOutline": 141,
        "../../../components/CCLabelShadow": 142,
        "../../../platform/CCMacro": 232,
        "../../../utils/text-utils": 317,
        "../../assembler-2d": 253,
        "../utils": 265
    }],
    265: [function(g, q, m) {
        var h = g("./dynamic-atlas/manager");
        g = cc.Color.WHITE;
        q.exports = {
            deleteFromDynamicAtlas: function(e, d) {
                d && d._original && h && (h.deleteAtlasSpriteFrame(d), d._resetDynamicAtlasFrame())
            },
            getFontFamily: function(e) {
                if (e.useSystemFont) return e.fontFamily || "Arial";
                if (e.font) {
                    if (e.font._nativeAsset) return e.font._nativeAsset;
                    cc.assetManager.postLoadNative(e.font, function(d) {
                        e.isValid && e.setVertsDirty()
                    })
                }
                return "Arial"
            },
            shareLabelInfo: {
                fontAtlas: null,
                fontSize: 0,
                lineHeight: 0,
                hAlign: 0,
                vAlign: 0,
                hash: "",
                fontFamily: "",
                fontDesc: "Arial",
                color: g,
                isOutlined: !1,
                out: g,
                margin: 0
            }
        }
    }, {
        "./dynamic-atlas/manager": void 0
    }],
    266: [function(g, q, m) {
        function h(b, f, h) {
            h = h || 2;
            var g = f && f.length,
                n = g ? f[0] * h : b.length,
                p = e(b, 0, n, h, !0),
                u = [];
            if (!p) return u;
            var x;
            if (g) {
                var v = h;
                g = [];
                var z;
                var A = 0;
                for (z = f.length; A < z; A++) {
                    var w = f[A] * v;
                    var B = A < z - 1 ? f[A + 1] * v : b.length;
                    w = e(b, w, B, v, !1);
                    w === w.next && (w.steiner = !0);
                    g.push(l(w))
                }
                g.sort(c);
                for (A = 0; A < g.length; A++) {
                    f = g[A];
                    v = p;
                    if (v = a(f, v)) f = t(v, f), d(f, f.next);
                    p = d(p, p.next)
                }
            }
            if (b.length > 80 * h) {
                var m = x = b[0];
                var y = g = b[1];
                for (v = h; v < n; v += h) A = b[v], f = b[v + 1], A < m && (m = A), f < y && (y = f), A > x && (x = A), f > g && (g = f);
                x = Math.max(x - m, g - y)
            }
            k(p, u, h, m, y, x);
            return u
        }

        function e(a, b, c, d, f) {
            if (f === 0 < w(a, b, c, d))
                for (f =
                    b; f < c; f += d) var l = x(f, a[f], a[f + 1], l);
            else
                for (f = c - d; f >= b; f -= d) l = x(f, a[f], a[f + 1], l);
            l && u(l, l.next) && (z(l), l = l.next);
            return l
        }

        function d(a, b) {
            if (!a) return a;
            b || (b = a);
            do {
                var c = !1;
                if (a.steiner || !u(a, a.next) && 0 !== n(a.prev, a, a.next)) a = a.next;
                else {
                    z(a);
                    a = b = a.prev;
                    if (a === a.next) return null;
                    c = !0
                }
            } while (c || a !== b);
            return b
        }

        function k(a, c, l, e, h, g, x) {
            if (a) {
                if (!x && g) {
                    var A = a,
                        w = A;
                    do null === w.z && (w.z = b(w.x, w.y, e, h, g)), w.prevZ = w.prev, w = w.nextZ = w.next; while (w !== A);
                    w.prevZ.nextZ = null;
                    w.prevZ = null;
                    A = w;
                    var B, m, E, y, C = 1;
                    do {
                        w = A;
                        var F = A = null;
                        for (m = 0; w;) {
                            m++;
                            var D = w;
                            for (B = E = 0; B < C && (E++, D = D.nextZ, D); B++);
                            for (y = C; 0 < E || 0 < y && D;) 0 === E ? (B = D, D = D.nextZ, y--) : 0 !== y && D ? w.z <= D.z ? (B = w, w = w.nextZ, E--) : (B = D, D = D.nextZ, y--) : (B = w, w = w.nextZ, E--), F ? F.nextZ = B : A = B, B.prevZ = F, F = B;
                            w = D
                        }
                        F.nextZ = null;
                        C *= 2
                    } while (1 < m)
                }
                for (A = a; a.prev !== a.next;) {
                    w = a.prev;
                    D = a.next;
                    if (g) a: {
                        F = a;y = e;
                        var G = h,
                            q = g;m = F.prev;E = F;C = F.next;
                        if (0 <= n(m, E, C)) F = !1;
                        else {
                            var T = m.x > E.x ? m.x > C.x ? m.x : C.x : E.x > C.x ? E.x : C.x,
                                N = m.y > E.y ? m.y > C.y ? m.y : C.y : E.y > C.y ? E.y : C.y;
                            B = b(m.x < E.x ? m.x < C.x ? m.x :
                                C.x : E.x < C.x ? E.x : C.x, m.y < E.y ? m.y < C.y ? m.y : C.y : E.y < C.y ? E.y : C.y, y, G, q);
                            y = b(T, N, y, G, q);
                            for (G = F.nextZ; G && G.z <= y;) {
                                if (G !== F.prev && G !== F.next && f(m.x, m.y, E.x, E.y, C.x, C.y, G.x, G.y) && 0 <= n(G.prev, G, G.next)) {
                                    F = !1;
                                    break a
                                }
                                G = G.nextZ
                            }
                            for (G = F.prevZ; G && G.z >= B;) {
                                if (G !== F.prev && G !== F.next && f(m.x, m.y, E.x, E.y, C.x, C.y, G.x, G.y) && 0 <= n(G.prev, G, G.next)) {
                                    F = !1;
                                    break a
                                }
                                G = G.prevZ
                            }
                            F = !0
                        }
                    }
                    else a: if (F = a, m = F.prev, E = F, C = F.next, 0 <= n(m, E, C)) F = !1;
                        else {
                            for (B = F.next.next; B !== F.prev;) {
                                if (f(m.x, m.y, E.x, E.y, C.x, C.y, B.x, B.y) && 0 <= n(B.prev, B, B.next)) {
                                    F = !1;
                                    break a
                                }
                                B = B.next
                            }
                            F = !0
                        } if (F) c.push(w.i / l), c.push(a.i / l), c.push(D.i / l), z(a), A = a = D.next;
                    else if (a = D, a === A) {
                        if (x)
                            if (1 === x) {
                                x = c;
                                A = l;
                                w = a;
                                do D = w.prev, F = w.next.next, !u(D, F) && v(D, w, w.next, F) && p(D, F) && p(F, D) && (x.push(D.i / A), x.push(w.i / A), x.push(F.i / A), z(w), z(w.next), w = a = F), w = w.next; while (w !== a);
                                a = w;
                                k(a, c, l, e, h, g, 2)
                            } else {
                                if (2 === x) a: {
                                    x = a;do {
                                        for (A = x.next.next; A !== x.prev;) {
                                            if (w = x.i !== A.i) {
                                                w = x;
                                                D = A;
                                                if (F = w.next.i !== D.i && w.prev.i !== D.i) {
                                                    b: {
                                                        F = w;do {
                                                            if (F.i !== w.i && F.next.i !== w.i && F.i !== D.i && F.next.i !== D.i && v(F, F.next,
                                                                    w, D)) {
                                                                F = !0;
                                                                break b
                                                            }
                                                            F = F.next
                                                        } while (F !== w);F = !1
                                                    }
                                                    F = !F
                                                }
                                                if (F = F && p(w, D) && p(D, w)) {
                                                    F = w;
                                                    m = !1;
                                                    E = (w.x + D.x) / 2;
                                                    D = (w.y + D.y) / 2;
                                                    do F.y > D !== F.next.y > D && E < (F.next.x - F.x) * (D - F.y) / (F.next.y - F.y) + F.x && (m = !m), F = F.next; while (F !== w);
                                                    F = m
                                                }
                                                w = F
                                            }
                                            if (w) {
                                                a = t(x, A);
                                                x = d(x, x.next);
                                                a = d(a, a.next);
                                                k(x, c, l, e, h, g);
                                                k(a, c, l, e, h, g);
                                                break a
                                            }
                                            A = A.next
                                        }
                                        x = x.next
                                    } while (x !== a)
                                }
                            }
                        else k(d(a), c, l, e, h, g, 1);
                        break
                    }
                }
            }
        }

        function c(a, b) {
            return a.x - b.x
        }

        function a(a, b) {
            var c = b,
                d = a.x,
                l = a.y,
                k = -Infinity;
            do {
                if (l <= c.y && l >= c.next.y) {
                    var e = c.x + (l - c.y) * (c.next.x - c.x) /
                        (c.next.y - c.y);
                    if (e <= d && e > k) {
                        k = e;
                        if (e === d) {
                            if (l === c.y) return c;
                            if (l === c.next.y) return c.next
                        }
                        var h = c.x < c.next.x ? c : c.next
                    }
                }
                c = c.next
            } while (c !== b);
            if (!h) return null;
            if (d === k) return h.prev;
            b = h;
            e = h.x;
            var g = h.y,
                n = Infinity;
            for (c = h.next; c !== b;) {
                if (d >= c.x && c.x >= e && f(l < g ? d : k, l, e, g, l < g ? k : d, l, c.x, c.y)) {
                    var t = Math.abs(l - c.y) / (d - c.x);
                    (t < n || t === n && c.x > h.x) && p(c, a) && (h = c, n = t)
                }
                c = c.next
            }
            return h
        }

        function b(a, b, c, d, f) {
            a = 32767 * (a - c) / f;
            b = 32767 * (b - d) / f;
            a = 16711935 & (a | a << 8);
            a = 252645135 & (a | a << 4);
            a = 858993459 & (a | a << 2);
            b = 16711935 &
                (b | b << 8);
            b = 252645135 & (b | b << 4);
            b = 858993459 & (b | b << 2);
            return 1431655765 & (a | a << 1) | (1431655765 & (b | b << 1)) << 1
        }

        function l(a) {
            var b = a,
                c = a;
            do b.x < c.x && (c = b), b = b.next; while (b !== a);
            return c
        }

        function f(a, b, c, d, f, l, k, e) {
            return 0 <= (f - k) * (b - e) - (a - k) * (l - e) && 0 <= (a - k) * (d - e) - (c - k) * (b - e) && 0 <= (c - k) * (l - e) - (f - k) * (d - e)
        }

        function n(a, b, c) {
            return (b.y - a.y) * (c.x - b.x) - (b.x - a.x) * (c.y - b.y)
        }

        function u(a, b) {
            return a.x === b.x && a.y === b.y
        }

        function v(a, b, c, d) {
            return u(a, b) && u(c, d) || u(a, d) && u(c, b) ? !0 : 0 < n(a, b, c) !== 0 < n(a, b, d) && 0 < n(c, d, a) !==
                0 < n(c, d, b)
        }

        function p(a, b) {
            return 0 > n(a.prev, a, a.next) ? 0 <= n(a, b, a.next) && 0 <= n(a, a.prev, b) : 0 > n(a, b, a.prev) || 0 > n(a, a.next, b)
        }

        function t(a, b) {
            var c = new E(a.i, a.x, a.y),
                d = new E(b.i, b.x, b.y),
                f = a.next,
                l = b.prev;
            a.next = b;
            b.prev = a;
            c.next = f;
            f.prev = c;
            d.next = c;
            c.prev = d;
            l.next = d;
            d.prev = l;
            return d
        }

        function x(a, b, c, d) {
            a = new E(a, b, c);
            d ? (a.next = d.next, a.prev = d, d.next.prev = a, d.next = a) : (a.prev = a, a.next = a);
            return a
        }

        function z(a) {
            a.next.prev = a.prev;
            a.prev.next = a.next;
            a.prevZ && (a.prevZ.nextZ = a.nextZ);
            a.nextZ && (a.nextZ.prevZ =
                a.prevZ)
        }

        function E(a, b, c) {
            this.i = a;
            this.x = b;
            this.y = c;
            this.nextZ = this.prevZ = this.z = this.next = this.prev = null;
            this.steiner = !1
        }

        function w(a, b, c, d) {
            for (var f = 0, l = c - d; b < c; b += d) f += (a[l] - a[b]) * (a[b + 1] + a[l + 1]), l = b;
            return f
        }
        cc.Graphics.earcut = q.exports = h;
        h.deviation = function(a, b, c, d) {
            var f = b && b.length,
                l = Math.abs(w(a, 0, f ? b[0] * c : a.length, c));
            if (f) {
                f = 0;
                for (var k = b.length; f < k; f++) l -= Math.abs(w(a, b[f] * c, f < k - 1 ? b[f + 1] * c : a.length, c))
            }
            for (f = b = 0; f < d.length; f += 3) {
                k = d[f] * c;
                var e = d[f + 1] * c,
                    h = d[f + 2] * c;
                b += Math.abs((a[k] -
                    a[h]) * (a[e + 1] - a[k + 1]) - (a[k] - a[e]) * (a[h + 1] - a[k + 1]))
            }
            return 0 === l && 0 === b ? 0 : Math.abs((b - l) / l)
        };
        h.flatten = function(a) {
            for (var b = a[0][0].length, c = {
                    vertices: [],
                    holes: [],
                    dimensions: b
                }, d = 0, f = 0; f < a.length; f++) {
                for (var l = 0; l < a[f].length; l++)
                    for (var k = 0; k < b; k++) c.vertices.push(a[f][l][k]);
                0 < f && (d += a[f - 1].length, c.holes.push(d))
            }
            return c
        }
    }, {}],
    267: [function(g, q, m) {
        function h() {
            this.reset()
        }

        function e(a) {
            this._tessTol = .25;
            this._distTol = .01;
            this._updatePathOffset = !1;
            this._paths = null;
            this._pathOffset = this._pathLength =
                0;
            this._points = null;
            this._commandy = this._commandx = this._pointsOffset = 0;
            this._paths = [];
            this._points = []
        }
        var d = g("../../../../graphics/helper"),
            k = g("../../../../graphics/types").PointFlags,
            c = cc.Graphics.Point = cc.Class({
                name: "cc.GraphicsPoint",
                extends: cc.Vec2,
                ctor: function(a, b) {
                    this.reset()
                },
                reset: function() {
                    this.len = this.flags = this.dmy = this.dmx = this.dy = this.dx = 0
                }
            });
        cc.js.mixin(h.prototype, {
            reset: function() {
                this.closed = !1;
                this.nbevel = 0;
                this.complex = !0;
                this.points ? this.points.length = 0 : this.points = []
            }
        });
        cc.js.mixin(e.prototype, {
            moveTo: function(a, b) {
                this._updatePathOffset && (this._pathOffset = this._pathLength, this._updatePathOffset = !1);
                this._addPath();
                this._addPoint(a, b, k.PT_CORNER);
                this._commandx = a;
                this._commandy = b
            },
            lineTo: function(a, b) {
                this._addPoint(a, b, k.PT_CORNER);
                this._commandx = a;
                this._commandy = b
            },
            bezierCurveTo: function(a, b, c, f, e, h) {
                var l = this._curPath;
                l = l.points[l.points.length - 1];
                l.x === a && l.y === b && c === e && f === h ? this.lineTo(e, h) : (d.tesselateBezier(this, l.x, l.y, a, b, c, f, e, h, 0, k.PT_CORNER), this._commandx =
                    e, this._commandy = h)
            },
            quadraticCurveTo: function(a, b, c, d) {
                var f = this._commandx,
                    l = this._commandy;
                this.bezierCurveTo(f + 2 / 3 * (a - f), l + 2 / 3 * (b - l), c + 2 / 3 * (a - c), d + 2 / 3 * (b - d), c, d)
            },
            arc: function(a, b, c, f, k, e) {
                d.arc(this, a, b, c, f, k, e)
            },
            ellipse: function(a, b, c, f) {
                d.ellipse(this, a, b, c, f);
                this._curPath.complex = !1
            },
            circle: function(a, b, c) {
                d.ellipse(this, a, b, c, c);
                this._curPath.complex = !1
            },
            rect: function(a, b, c, d) {
                this.moveTo(a, b);
                this.lineTo(a, b + d);
                this.lineTo(a + c, b + d);
                this.lineTo(a + c, b);
                this.close();
                this._curPath.complex = !1
            },
            roundRect: function(a, b, c, f, k) {
                d.roundRect(this, a, b, c, f, k);
                this._curPath.complex = !1
            },
            clear: function(a) {
                this._pointsOffset = this._pathOffset = this._pathLength = 0;
                this._curPath = null;
                a && (this._paths.length = 0, this._points.length = 0)
            },
            close: function() {
                this._curPath.closed = !0
            },
            _addPath: function() {
                var a = this._paths[this._pathLength];
                a ? a.reset() : (a = new h, this._paths.push(a));
                this._pathLength++;
                return this._curPath = a
            },
            _addPoint: function(a, b, d) {
                var f = this._curPath;
                if (f) {
                    var l = this._points;
                    f = f.points;
                    var k = this._pointsOffset++;
                    (k = l[k]) ? (k.x = a, k.y = b) : (k = new c(a, b), l.push(k));
                    k.flags = d;
                    f.push(k)
                }
            }
        });
        cc.Graphics._Impl = e;
        q.exports = e
    }, {
        "../../../../graphics/helper": 191,
        "../../../../graphics/types": 193
    }],
    268: [function(g, q, m) {
        function h(a) {
            return a && a.__esModule ? a : {
                default: a
            }
        }

        function e(a, b) {
            a.prototype = Object.create(b.prototype);
            a.prototype.constructor = a;
            d(a, b)
        }

        function d(a, b) {
            d = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(a, b) {
                a.__proto__ = b;
                return a
            };
            return d(a, b)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var k = h(g("../../../assembler")),
            c = h(g("../../../../../renderer/core/input-assembler")),
            a = g("../../mesh-buffer"),
            b = g("../../../index"),
            l = g("../../../../graphics/graphics"),
            f = g("../../../../graphics/types").PointFlags,
            n = l.LineJoin,
            u = l.LineCap,
            v = g("./earcut");
        g("./impl");
        var p = Math.PI,
            t = Math.min,
            x = Math.max,
            z = Math.ceil,
            E = Math.acos,
            w = Math.cos,
            A = Math.sin,
            B = Math.atan2;
        g = cc.gfx;
        var y = new g.VertexFormat([{
            name: g.ATTR_POSITION,
            type: g.ATTR_TYPE_FLOAT32,
            num: 2
        }, {
            name: g.ATTR_COLOR,
            type: g.ATTR_TYPE_UINT8,
            num: 4,
            normalize: !0
        }, {
            name: "a_dist",
            type: g.ATTR_TYPE_FLOAT32,
            num: 1
        }]);
        y.name = "vfmtPosColorSdf";
        g = function(d) {
            function l(a) {
                a = d.call(this, a) || this;
                a._buffer = null;
                a._buffers = [];
                a._bufferOffset = 0;
                return a
            }
            e(l, d);
            var k = l.prototype;
            k.getVfmt = function() {
                return y
            };
            k.getVfmtFloatCount = function() {
                return 4
            };
            k.requestBuffer = function() {
                var d = {
                        indiceStart: 0,
                        vertexStart: 0
                    },
                    f = new a(b._handle, this.getVfmt());
                d.meshbuffer = f;
                f = new c["default"](f._vb, f._ib);
                d.ia = f;
                this._buffers.push(d);
                return d
            };
            k.getBuffers = function() {
                0 === this._buffers.length && this.requestBuffer();
                return this._buffers
            };
            k.clear = function(a) {
                this._bufferOffset = 0;
                var b = this._buffers;
                if (a) {
                    a = 0;
                    for (var c = b.length; a < c; a++) {
                        var d = b[a];
                        d.meshbuffer.destroy();
                        d.meshbuffer = null
                    }
                    b.length = 0
                } else
                    for (a = 0, c = b.length; a < c; a++) d = b[a], d.indiceStart = 0, d.vertexStart = 0, d.meshbuffer.reset()
            };
            k.fillBuffers = function(a, b) {
                b._flush();
                b.node = a.node;
                b.material = a._materials[0];
                a = this.getBuffers();
                for (var c = 0, d = a.length; c < d; c++) {
                    var f = a[c],
                        l = f.meshbuffer;
                    f.ia._count = f.indiceStart;
                    b._flushIA(f.ia);
                    l.uploadData()
                }
            };
            k.genBuffer = function(a, b) {
                var c =
                    this.getBuffers(),
                    d = c[this._bufferOffset],
                    f = d.meshbuffer,
                    l = d.vertexStart + b;
                if (65535 < l || 131070 < 3 * l) ++this._bufferOffset, l = b, this._bufferOffset < c.length ? d = c[this._bufferOffset] : (d = this.requestBuffer(a), c[this._bufferOffset] = d), f = d.meshbuffer;
                l > f.vertexOffset && f.requestStatic(b, 3 * b);
                return this._buffer = d
            };
            k.stroke = function(a) {
                this._curColor = a._strokeColor._val;
                this._flattenPaths(a._impl);
                this._expandStroke(a);
                a._impl._updatePathOffset = !0
            };
            k.fill = function(a) {
                this._curColor = a._fillColor._val;
                this._expandFill(a);
                a._impl._updatePathOffset = !0
            };
            k._expandStroke = function(a) {
                var b = .5 * a.lineWidth,
                    c = a.lineCap,
                    d = a.lineJoin,
                    l = a.miterLimit,
                    k = a._impl;
                var e = 2 * E(b / (b + k._tessTol));
                e = x(2, z(p / e));
                this._calculateJoins(k, b, d, l);
                l = k._paths;
                for (var h = 0, g = k._pathOffset, t = k._pathLength; g < t; g++) {
                    var v = l[g],
                        w = v.points.length;
                    d === n.ROUND ? h += 2 * (w + v.nbevel * (e + 2) + 1) : h += 2 * (w + 5 * v.nbevel + 1);
                    v.closed || (c === u.ROUND ? h += 2 * (2 * e + 2) : h += 12)
                }
                a = this.genBuffer(a, h);
                g = a.meshbuffer;
                h = g._vData;
                g = g._iData;
                t = k._pathOffset;
                for (k = k._pathLength; t < k; t++) {
                    w =
                        l[t];
                    var A = w.points,
                        m = A.length;
                    v = a.vertexStart;
                    var B;
                    if (B = w.closed) {
                        var y = A[m - 1];
                        w = A[0];
                        var C = 0
                    } else y = A[0], w = A[1], C = 1, --m;
                    w = w || y;
                    if (!B) {
                        var F = w.sub(y);
                        F.normalizeSelf();
                        var q = F.x;
                        F = F.y;
                        c === u.BUTT ? this._buttCapStart(y, q, F, b, 0) : c === u.SQUARE ? this._buttCapStart(y, q, F, b, b) : c === u.ROUND && this._roundCapStart(y, q, F, b, e)
                    }
                    for (; C < m; ++C) d === n.ROUND ? this._roundJoin(y, w, b, b, e) : 0 !== (w.flags & (f.PT_BEVEL | f.PT_INNERBEVEL)) ? this._bevelJoin(y, w, b, b) : (this._vset(w.x + w.dmx * b, w.y + w.dmy * b, 1), this._vset(w.x - w.dmx * b, w.y - w.dmy *
                        b, -1)), y = w, w = A[C + 1];
                    B ? (w = this.getVfmtFloatCount(), A = v * w, this._vset(h[A], h[A + 1], 1), this._vset(h[A + w], h[A + w + 1], -1)) : (y = w.sub(y), y.normalizeSelf(), A = y.x, y = y.y, c === u.BUTT ? this._buttCapEnd(w, A, y, b, 0) : c === u.SQUARE ? this._buttCapEnd(w, A, y, b, b) : c === u.ROUND && this._roundCapEnd(w, A, y, b, e));
                    w = a.indiceStart;
                    v += 2;
                    for (A = a.vertexStart; v < A; v++) g[w++] = v - 2, g[w++] = v - 1, g[w++] = v;
                    a.indiceStart = w
                }
            };
            k._expandFill = function(a) {
                for (var b = a._impl, c = b._paths, d = 0, f = b._pathOffset, l = b._pathLength; f < l; f++) d += c[f].points.length;
                a = this.genBuffer(a,
                    d);
                f = a.meshbuffer;
                d = f._vData;
                f = f._iData;
                l = b._pathOffset;
                for (b = b._pathLength; l < b; l++) {
                    var k = c[l],
                        e = k.points,
                        h = e.length;
                    if (0 !== h) {
                        for (var g = a.vertexStart, n = 0; n < h; ++n) this._vset(e[n].x, e[n].y);
                        e = a.indiceStart;
                        if (k.complex) {
                            k = [];
                            h = this.getVfmtFloatCount();
                            n = g;
                            for (var p = a.vertexStart; n < p; n++) {
                                var t = n * h;
                                k.push(d[t]);
                                k.push(d[t + 1])
                            }
                            k = v(k, null, 2);
                            if (!k || 0 === k.length) continue;
                            h = 0;
                            for (n = k.length; h < n; h++) f[e++] = k[h] + g
                        } else
                            for (k = g, g += 2, h = a.vertexStart; g < h; g++) f[e++] = k, f[e++] = g - 1, f[e++] = g;
                        a.indiceStart = e
                    }
                }
            };
            k._calculateJoins = function(a, b, c, d) {
                var l = 0,
                    k = b * b;
                0 < b && (l = 1 / b);
                var e = a._paths,
                    h = a._pathOffset;
                for (a = a._pathLength; h < a; h++)
                    for (var g = e[h], p = g.points, u = p.length, v = p[u - 1], z = p[0], w = 0, A = g.nbevel = 0; A < u; A++) {
                        var m = -v.dx;
                        var E = -z.dx;
                        z.dmx = .5 * (v.dy + z.dy);
                        z.dmy = .5 * (m + E);
                        m = z.dmx * z.dmx + z.dmy * z.dmy;
                        1E-6 < m && (E = 1 / m, 600 < E && (E = 600), z.dmx *= E, z.dmy *= E);
                        0 < z.dx * v.dy - v.dx * z.dy && (w++, z.flags |= f.PT_LEFT);
                        E = x(11, t(v.len, z.len) * l);
                        1 > m * E * E && (z.flags |= f.PT_INNERBEVEL);
                        E = z.dmx * b;
                        var B = z.dmy * b;
                        E = E * E + B * B;
                        E > z.len * z.len + k && E > v.len *
                            v.len + k && (z.flags |= f.PT_INNERBEVEL);
                        z.flags & f.PT_CORNER && (1 > m * d * d || c === n.BEVEL || c === n.ROUND) && (z.flags |= f.PT_BEVEL);
                        0 !== (z.flags & (f.PT_BEVEL | f.PT_INNERBEVEL)) && g.nbevel++;
                        v = z;
                        z = p[A + 1]
                    }
            };
            k._flattenPaths = function(a) {
                var b = a._paths,
                    c = a._pathOffset;
                for (a = a._pathLength; c < a; c++) {
                    var d = b[c],
                        f = d.points,
                        l = f[f.length - 1],
                        k = f[0];
                    2 < f.length && l.equals(k) && (d.closed = !0, f.pop(), l = f[f.length - 1]);
                    d = 0;
                    for (var e = f.length; d < e; d++) {
                        var h = k.sub(l);
                        l.len = h.mag();
                        (h.x || h.y) && h.normalizeSelf();
                        l.dx = h.x;
                        l.dy = h.y;
                        l = k;
                        k = f[d +
                            1]
                    }
                }
            };
            k._chooseBevel = function(a, b, c, d) {
                var f = c.x,
                    l = c.y;
                0 !== a ? (a = f + b.dy * d, b = l - b.dx * d, f += c.dy * d, c = l - c.dx * d) : (a = f += c.dmx * d, b = c = l + c.dmy * d);
                return [a, b, f, c]
            };
            k._buttCapStart = function(a, b, c, d, f) {
                var l = a.x - b * f;
                a = a.y - c * f;
                b = -b;
                this._vset(l + c * d, a + b * d, 1);
                this._vset(l - c * d, a - b * d, -1)
            };
            k._buttCapEnd = function(a, b, c, d, f) {
                var l = a.x + b * f;
                a = a.y + c * f;
                b = -b;
                this._vset(l + c * d, a + b * d, 1);
                this._vset(l - c * d, a - b * d, -1)
            };
            k._roundCapStart = function(a, b, c, d, f) {
                var l = a.x;
                a = a.y;
                for (var k = -b, e = 0; e < f; e++) {
                    var h = e / (f - 1) * p,
                        g = w(h) * d;
                    h = A(h) * d;
                    this._vset(l - c * g - b * h, a - k * g - c * h, 1);
                    this._vset(l, a, 0)
                }
                this._vset(l + c * d, a + k * d, 1);
                this._vset(l - c * d, a - k * d, -1)
            };
            k._roundCapEnd = function(a, b, c, d, f) {
                var l = a.x;
                a = a.y;
                var k = -b;
                this._vset(l + c * d, a + k * d, 1);
                this._vset(l - c * d, a - k * d, -1);
                for (var e = 0; e < f; e++) {
                    var h = e / (f - 1) * p,
                        g = w(h) * d;
                    h = A(h) * d;
                    this._vset(l, a, 0);
                    this._vset(l - c * g + b * h, a - k * g + c * h, 1)
                }
            };
            k._roundJoin = function(a, b, c, d, l) {
                var k = a.dy,
                    e = -a.dx,
                    h = b.dy,
                    g = -b.dx,
                    n = b.x,
                    t = b.y;
                if (0 !== (b.flags & f.PT_LEFT)) {
                    a = this._chooseBevel(b.flags & f.PT_INNERBEVEL, a, b, c);
                    var u = a[0],
                        x = a[1];
                    c = a[2];
                    a = a[3];
                    var v = B(-e, -k),
                        m = B(-g, -h);
                    m > v && (m -= 2 * p);
                    this._vset(u, x, 1);
                    this._vset(n - k * d, b.y - e * d, -1);
                    k = z((v - m) / p) * l;
                    l = 2 > k ? 2 : k > l ? l : k;
                    for (k = 0; k < l; k++) b = v + k / (l - 1) * (m - v), e = n + w(b) * d, b = t + A(b) * d, this._vset(n, t, 0), this._vset(e, b, -1);
                    this._vset(c, a, 1);
                    this._vset(n - h * d, t - g * d, -1)
                } else {
                    v = this._chooseBevel(b.flags & f.PT_INNERBEVEL, a, b, -d);
                    u = v[0];
                    x = v[1];
                    a = v[2];
                    v = v[3];
                    m = B(e, k);
                    b = B(g, h);
                    b < m && (b += 2 * p);
                    this._vset(n + k * d, t + e * d, 1);
                    this._vset(u, x, -1);
                    k = z((b - m) / p) * l;
                    l = 2 > k ? 2 : k > l ? l : k;
                    for (k = 0; k < l; k++) u = m + k / (l - 1) * (b - m), e = n +
                        w(u) * c, u = t + A(u) * c, this._vset(e, u, 1), this._vset(n, t, 0);
                    this._vset(n + h * d, t + g * d, 1);
                    this._vset(a, v, -1)
                }
            };
            k._bevelJoin = function(a, b, c, d) {
                var l = a.dy,
                    k = -a.dx,
                    e = b.dy,
                    h = -b.dx;
                if (b.flags & f.PT_LEFT) {
                    var g = this._chooseBevel(b.flags & f.PT_INNERBEVEL, a, b, c);
                    c = g[0];
                    a = g[1];
                    var n = g[2];
                    g = g[3];
                    this._vset(c, a, 1);
                    this._vset(b.x - l * d, b.y - k * d, -1);
                    this._vset(n, g, 1);
                    this._vset(b.x - e * d, b.y - h * d, -1)
                } else g = this._chooseBevel(b.flags & f.PT_INNERBEVEL, a, b, -d), d = g[0], a = g[1], n = g[2], g = g[3], this._vset(b.x + l * c, b.y + k * c, 1), this._vset(d,
                    a, -1), this._vset(b.x + e * c, b.y + h * c, 1), this._vset(n, g, -1)
            };
            k._vset = function(a, b, c) {
                void 0 === c && (c = 0);
                var d = this._buffer,
                    f = d.meshbuffer,
                    l = d.vertexStart * this.getVfmtFloatCount(),
                    k = f._vData,
                    e = f._uintVData;
                k[l] = a;
                k[l + 1] = b;
                e[l + 2] = this._curColor;
                k[l + 3] = c;
                d.vertexStart++;
                f._dirty = !0
            };
            return l
        }(k["default"]);
        m["default"] = g;
        k["default"].register(cc.Graphics, g);
        q.exports = m["default"]
    }, {
        "../../../../../renderer/core/input-assembler": 348,
        "../../../../graphics/graphics": 190,
        "../../../../graphics/types": 193,
        "../../../assembler": 256,
        "../../../index": 259,
        "../../mesh-buffer": 294,
        "./earcut": 266,
        "./impl": 267
    }],
    269: [function(g, q, m) {
        cc.assemblers = {};
        g("./sprite");
        g("./mask-assembler");
        g("./graphics");
        g("./label");
        g("./motion-streak")
    }, {
        "./graphics": 268,
        "./label": 277,
        "./mask-assembler": 278,
        "./motion-streak": 279,
        "./sprite": 292
    }],
    270: [function(g, q, m) {
        function h(d, c) {
            d.prototype = Object.create(c.prototype);
            d.prototype.constructor = d;
            e(d, c)
        }

        function e(d, c) {
            e = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(a, b) {
                a.__proto__ = b;
                return a
            };
            return e(d, c)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var d = 0;
        g = function(k) {
            function c() {
                return k.apply(this, arguments) || this
            }
            h(c, k);
            var a = c.prototype;
            a.initData = function() {
                this._renderData.createFlexData(0, 4, 6, this.getVfmt())
            };
            a._reserveQuads = function(a, c) {
                a = 4 * c;
                c *= 6;
                var b = this._renderData._flexBuffer;
                b.reserve(a, c);
                b.used(a, c);
                a = this._renderData.iDatas[0];
                for (var l = b = 0; b < c; b += 6, l += 4) a[b] = l, a[b + 1] = l + 1, a[b + 2] = l + 2, a[b + 3] = l + 1, a[b + 4] = l + 3, a[b + 5] = l + 2;
                d = 0
            };
            a._quadsUpdated = function(a) {
                d = 0;
                this._renderData._flexBuffer.used(this.verticesCount,
                    this.indicesCount)
            };
            a._getColor = function(a) {
                return a.node._color._val
            };
            a.appendQuad = function(a, c, f, k, e, h, g) {
                var b = this._renderData,
                    l = b.vDatas[0];
                b = b.uintVDatas[0];
                this.verticesCount += 4;
                this.indicesCount = this.verticesCount / 2 * 3;
                var n = c.width,
                    p = c.height,
                    u = f.width,
                    v = f.height;
                c = this._getColor(a);
                var m = this.floatsPerVert,
                    y = d + this.uvOffset;
                if (k) {
                    k = f.x / n;
                    var C = (f.x + v) / n;
                    n = (f.y + u) / p;
                    f = f.y / p;
                    l[y] = k;
                    l[y + 1] = f;
                    y += m;
                    l[y] = k;
                    l[y + 1] = n;
                    y += m;
                    l[y] = C;
                    l[y + 1] = f;
                    y += m;
                    l[y] = C;
                    l[y + 1] = n
                } else k = f.x / n, C = (f.x + u) / n, n = (f.y + v) / p,
                    f = f.y / p, l[y] = k, l[y + 1] = n, y += m, l[y] = C, l[y + 1] = n, y += m, l[y] = k, l[y + 1] = f, y += m, l[y] = C, l[y + 1] = f;
                this.appendVerts(a, d, e, e + u * g, h - v * g, h);
                a = d + this.colorOffset;
                for (e = 0; 4 > e; e++) b[a] = c, a += m;
                d += 4 * this.floatsPerVert
            };
            a.appendVerts = function(a, c, d, k, e, h) {
                a = this._local;
                var b = this.floatsPerVert;
                a[c] = d;
                a[c + 1] = e;
                c += b;
                a[c] = k;
                a[c + 1] = e;
                c += b;
                a[c] = d;
                a[c + 1] = h;
                c += b;
                a[c] = k;
                a[c + 1] = h
            };
            a.updateWorldVerts = function(a) {
                var b = a.node._worldMatrix.m;
                a = b[0];
                var c = b[1],
                    d = b[4],
                    k = b[5],
                    e = b[12];
                b = b[13];
                for (var h = this._local, g = this._renderData.vDatas[0],
                        x = this.floatsPerVert, z = 0; z < h.length; z += x) {
                    var m = h[z],
                        w = h[z + 1];
                    g[z] = m * a + w * d + e;
                    g[z + 1] = m * c + w * k + b
                }
            };
            return c
        }(function(d) {
            return d && d.__esModule ? d : {
                default: d
            }
        }(g("../../../../utils/label/bmfont"))["default"]);
        m["default"] = g;
        q.exports = m["default"]
    }, {
        "../../../../utils/label/bmfont": 261
    }],
    271: [function(g, q, m) {
            function h(d, c) {
                d.prototype = Object.create(c.prototype);
                d.prototype.constructor = d;
                e(d, c)
            }

            function e(d, c) {
                e = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(a, b) {
                    a.__proto__ = b;
                    return a
                };
                return e(d,
                    c)
            }
            m.__esModule = !0;
            m["default"] = void 0;
            g("../../../../../platform/js");
            g("./bmfont");
            g = g("../../../../utils/label/letter-font");
            var d = cc.color(255, 255, 255, 255);
            g = function(k) {
                function c() {
                    return k.apply(this, arguments) || this
                }
                h(c, k);
                var a = c.prototype;
                a.createData = function(a) {
                    return a.requestRenderData()
                };
                a._getColor = function(a) {
                    d._fastSetA(a.node._color.a);
                    return d._val
                };
                a.updateColor = function(a) {
                    var b = this._getColor(a);
                    k.prototype.updateColor.call(this, a, b)
                };
                return c
            }(g);
            m["default"] = g;
            q.exports = m["default"]
        },
        {
            "../../../../../platform/js": 248,
            "../../../../utils/label/letter-font": 263,
            "./bmfont": 270
        }
    ],
    272: [function(g, q, m) {
        m.__esModule = !0;
        m["default"] = void 0;
        var h = function(e) {
            return e && e.__esModule ? e : {
                default: e
            }
        }(g("../../../../../assets/material/material-variant"));
        g("../../../../../components/CCLabel");
        g("../../../../../components/CCLabelShadow");
        g("../../../../../components/CCLabelOutline");
        g("../../../../../assets/material/CCMaterial");
        g = function() {
            function e() {}
            var d = e.prototype;
            d.init = function(d) {
                this.labelMaterial =
                    null;
                this._label = this._renderComp = d;
                renderer.CustomAssembler.prototype.ctor.call(this);
                d.node._proxy.setAssembler(this);
                this._layout = new jsb.LabelRenderer;
                this._layout.init(d);
                this._cfg = new DataView(this._layout._cfg);
                this._layoutInfo = new DataView(this._layout._layout);
                this._cfgFields = "string" == typeof jsb.LabelRenderer._cfgFields ? JSON.parse(jsb.LabelRenderer._cfgFields) : jsb.LabelRenderer._cfgFields;
                this._layoutFields = "string" == typeof jsb.LabelRenderer._layoutFields ? JSON.parse(jsb.LabelRenderer._layoutFields) :
                    jsb.LabelRenderer._layoutFields;
                this._layout.bindNodeProxy(d.node._proxy);
                this._bindMaterial(d)
            };
            d._setBufferFlag = function(d, c, a, b, l) {
                "int8" == b && 1 == a ? (a = d.getInt8(c), d.setInt8(c, l | a)) : "int32" == b && 4 == a ? (a = d.getInt32(c, jsb.__isLittleEndian__), d.setInt32(c, l | a, jsb.__isLittleEndian__)) : cc.warn("flag storage type should be int8/int32 only, type/size -> " + b + "/" + a + ".")
            };
            d._updateCfgFlag = function(d) {
                var c = this._cfgFields.updateFlags;
                this._setBufferFlag(this._cfg, c.offset, c.size, c.type, d)
            };
            d._setBufferValue =
                function(d, c, a, b, l) {
                    "float" == b && 4 == a ? d.setFloat32(c, l, jsb.__isLittleEndian__) : "int32" == b && 4 == a ? d.setInt32(c, l, jsb.__isLittleEndian__) : "bool" == b && 1 == a ? d.setInt8(c, l ? 1 : 0, jsb.__isLittleEndian__) : "Color4B" == b && 4 == a ? (d.setUint8(c, l.r), d.setUint8(c + 1, l.g), d.setUint8(c + 2, l.b), d.setUint8(c + 3, l.a)) : "int8" == b && 1 == a ? d.setUint8(c, l) : cc.warn("dont know how to set value to buffer, type/size -> " + b + "/" + a + ".")
                };
            d._setFieldValue = function(d, c, a, b) {
                c = c[a];
                this._setBufferValue(d, c.offset, c.size, c.type, b)
            };
            d._getBufferValue =
                function(d, c, a, b) {
                    if ("float" == b && 4 == a) return d.getFloat32(c, jsb.__isLittleEndian__);
                    if ("int32" == b && 4 == a) return d.getInt32(c, jsb.__isLittleEndian__);
                    if ("bool" == b && 1 == a) return 0 != d.getInt8(c, jsb.__isLittleEndian__);
                    if ("Color4B" == b && 4 == a) {
                        a = d.getUint8(c);
                        b = d.getUint8(c + 1);
                        var l = d.getUint8(c + 2);
                        d = d.getUint8(c + 3);
                        return {
                            r: a,
                            g: b,
                            b: l,
                            a: d
                        }
                    }
                    if ("int8" == b && 1 == a) return d.getUint8(c);
                    cc.warn("dont know how to get value from buffer, type/size -> " + b + "/" + a + ".")
                };
            d._getFieldValue = function(d, c, a) {
                c = c[a];
                return this._getBufferValue(d,
                    c.offset, c.size, c.type)
            };
            d._getLayoutValue = function(d) {
                return this._getFieldValue(this._layoutInfo, this._layoutFields, d)
            };
            d._setLayoutValue = function(d, c) {
                return this._setFieldValue(this._layoutInfo, this._layoutFields, d, c)
            };
            d._updateCfgFlag_Content = function() {
                this._updateCfgFlag(1)
            };
            d._updateCfgFlag_Font = function() {
                this._updateCfgFlag(2)
            };
            d._colorEqual = function(d, c) {
                return d.r == c.r && d.g == c.g && d.b == c.b && d.a == c.a
            };
            d._colorToObj = function(d, c, a, b) {
                return {
                    r: d,
                    g: c,
                    b: a,
                    a: b
                }
            };
            d.setString = function(d) {
                d != this._layout.string &&
                    (this._layout.string = d, this._updateCfgFlag_Content())
            };
            d.setFontPath = function(d) {
                d != this._layout.fontPath && (this._layout.fontPath = d, this._updateCfgFlag_Font())
            };
            d.setFontSize = function(d, c) {
                this._getFieldValue(this._cfg, this._cfgFields, "fontSize") != d && (this._setFieldValue(this._cfg, this._cfgFields, "fontSize", d), this._setFieldValue(this._cfg, this._cfgFields, "fontSizeRetina", c), this._updateCfgFlag_Font())
            };
            d.setOutline = function(d) {
                var c = this._getLayoutValue("outlineSize");
                0 < c != 0 < d && this._updateCfgFlag_Font();
                c != d && (this._updateCfgFlag_Content(), this._setLayoutValue("outlineSize", d))
            };
            d.setOutlineColor = function(d) {
                var c = this._getLayoutValue("outlineColor");
                this._colorEqual(c, d) || (this._setLayoutValue("outlineColor", d), this._updateCfgFlag_Content())
            };
            d.setLineHeight = function(d) {
                this._getLayoutValue("lineHeight") != d && (this._setLayoutValue("lineHeight", d), this._updateCfgFlag_Content())
            };
            d.setOverFlow = function(d) {
                this._getLayoutValue("overflow") != d && (this._setLayoutValue("overflow", d), this._updateCfgFlag_Content())
            };
            d.setEnableWrap = function(d) {
                this._getLayoutValue("wrap") != d && (this._setLayoutValue("wrap", d), this._updateCfgFlag_Content())
            };
            d.setVerticalAlign = function(d) {
                this._getLayoutValue("valign") != d && (this._setLayoutValue("valign", d), this._updateCfgFlag_Content())
            };
            d.setHorizontalAlign = function(d) {
                this._getLayoutValue("halign") != d && (this._setLayoutValue("halign", d), this._updateCfgFlag_Content())
            };
            d.setContentSize = function(d, c) {
                var a = this._getLayoutValue("width"),
                    b = this._getLayoutValue("height");
                if (a != d || b !=
                    c) this._setLayoutValue("height", c), this._setLayoutValue("width", d), this._updateCfgFlag_Content()
            };
            d.setAnchorPoint = function(d, c) {
                var a = this._getLayoutValue("anchorX"),
                    b = this._getLayoutValue("anchorY");
                if (a != d || b != c) this._setLayoutValue("anchorX", d), this._setLayoutValue("anchorY", c), this._updateCfgFlag_Content()
            };
            d.setColor = function(d) {
                var c = this._getLayoutValue("color");
                this._colorEqual(c, d) || (this._setLayoutValue("color", d), this._updateCfgFlag_Content())
            };
            d.setShadow = function(d, c, a) {
                var b = this._getLayoutValue("shadowBlur"),
                    l = this._getLayoutValue("shadowX"),
                    f = this._getLayoutValue("shadowY");
                0 < b != 0 < a && this._updateCfgFlag_Font();
                var k = !1;
                b != a && (this._setLayoutValue("shadowBlur", a), k = !0);
                l != d && (this._setLayoutValue("shadowX", d), k = !0);
                f != c && (this._setLayoutValue("shadowY", c), k = !0);
                k && this._updateCfgFlag_Content()
            };
            d.setShadowColor = function(d) {
                var c = this._getLayoutValue("shadowColor");
                this._colorEqual(c, d) || (this._setLayoutValue("shadowColor", d), this._updateCfgFlag_Content())
            };
            d.setItalic = function(d) {
                this._getLayoutValue("italic") !=
                    d && (this._setLayoutValue("italic", d), this._updateCfgFlag_Content())
            };
            d.setBold = function(d) {
                this._getLayoutValue("bold") != d && (this._setLayoutValue("bold", d), this._updateCfgFlag_Content(), this._updateCfgFlag_Font())
            };
            d.setUnderline = function(d) {
                this._getLayoutValue("underline") != d && (this._setLayoutValue("underline", d), this._updateCfgFlag_Content())
            };
            d.setSpacingX = function(d) {
                this._getLayoutValue("spaceX") == d || "number" != typeof d || isNaN(d) || (this._setLayoutValue("spaceX", d), this._updateCfgFlag_Content())
            };
            d.updateRenderData = function(d) {
                if (d._vertsDirty) {
                    d.font && d.font.nativeUrl && this.setFontPath(cc.assetManager.cacheManager.getCache(d.font.nativeUrl) || d.font.nativeUrl);
                    var c = this._layout,
                        a = d.node.color,
                        b = d.node,
                        l = d.fontSize;
                    this.setString(d.string);
                    this.setFontSize(d.fontSize, l / 72 * d.fontSize);
                    this.setLineHeight(d.lineHeight);
                    this.setEnableWrap(d.enableWrapText);
                    this.setItalic(d.enableItalic);
                    this.setUnderline(d.enableUnderline);
                    this.setBold(d.enableBold);
                    this.setOverFlow(d.overflow);
                    this.setVerticalAlign(d.verticalAlign);
                    this.setHorizontalAlign(d.horizontalAlign);
                    this.setSpacingX(d.spacingX);
                    this.setContentSize(b.getContentSize().width, b.getContentSize().height);
                    this.setAnchorPoint(b.anchorX, b.anchorY);
                    this.setColor(this._colorToObj(a.getR(), a.getG(), a.getB(), Math.ceil(a.getA() * b.opacity / 255)));
                    (a = b.getComponent(cc.LabelShadow)) && a.enabled ? (l = a.color, this.setShadow(a.offset.x, a.offset.y, a.blur), this.setShadowColor(this._colorToObj(l.getR(), l.getG(), l.getB(), Math.ceil(l.getA() * b.opacity / 255)))) : this.setShadow(0, 0, -1);
                    this._updateTTFMaterial(d);
                    c.render()
                }
            };
            d._bindMaterial = function(d) {
                var c = this.labelMaterial;
                c || (this.labelMaterial = c = h["default"].createWithBuiltin("2d-label", d));
                return c
            };
            d._updateTTFMaterial = function(d) {
                var c = this._bindMaterial(d),
                    a = this._label.node,
                    b = this._layout,
                    l = a.getComponent(cc.LabelOutline),
                    f = 0;
                l && l.enabled && 0 < l.width && (f = Math.max(Math.min(l.width / 10, .4), .1), l = l.color, this.setOutlineColor(this._colorToObj(l.getR(), l.getG(), l.getB(), Math.ceil(l.getA() * a.opacity / 255))));
                this.setOutline(f);
                c.define("CC_USE_MODEL", !0);
                c.define("USE_TEXTURE_ALPHAONLY", !0);
                c.define("USE_SDF", 0 < f || d.enableBold);
                c.define("USE_SDF_EXTEND", d.enableBold ? 1 : 0);
                void 0 !== c.getDefine("CC_SUPPORT_standard_derivatives") && cc.sys.glExtension("OES_standard_derivatives") && c.define("CC_SUPPORT_standard_derivatives", !0);
                b.setEffect(c.effect._nativeObj)
            };
            d.fillBuffers = function(d, c) {
                this._layout.render()
            };
            d.getVfmt = function() {};
            return e
        }();
        m["default"] = g;
        q.exports = m["default"]
    }, {
        "../../../../../assets/material/CCMaterial": 113,
        "../../../../../assets/material/material-variant": 120,
        "../../../../../components/CCLabel": 140,
        "../../../../../components/CCLabelOutline": 141,
        "../../../../../components/CCLabelShadow": 142
    }],
    273: [function(g, q, m) {
        function h(a, b) {
            a.prototype = Object.create(b.prototype);
            a.prototype.constructor = a;
            e(a, b)
        }

        function e(a, b) {
            e = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(a, b) {
                a.__proto__ = b;
                return a
            };
            return e(a, b)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var d = function(a) {
                return a && a.__esModule ? a : {
                    default: a
                }
            }(g("../../../../utils/label/ttf")),
            k = g("../../../../../components/CCLabelShadow"),
            c = cc.color(255, 255, 255, 255);
        g = function(a) {
            function b() {
                return a.apply(this, arguments) || this
            }
            h(b, a);
            var d = b.prototype;
            d.updateUVs = function(a) {
                var b = this._renderData.vDatas[0];
                a = a._frame.uv;
                for (var c = this.uvOffset, d = this.floatsPerVert, f = 0; 4 > f; f++) {
                    var l = 2 * f,
                        k = d * f + c;
                    b[k] = a[l];
                    b[k + 1] = a[l + 1]
                }
            };
            d.updateColor = function(b) {
                c._fastSetA(b.node._color.a);
                a.prototype.updateColor.call(this, b, c._val)
            };
            d.updateVerts = function(a) {
                var b = a.node,
                    c = a._ttfTexture.width,
                    d = a._ttfTexture.height,
                    f = b.anchorX * b.width,
                    l = b.anchorY * b.height,
                    e = k && a.getComponent(k);
                if (e && e._enabled) {
                    var h = (c - b.width) / 2,
                        g = (d - b.height) / 2;
                    e = e.offset; - e.x > h ? f += c - b.width : h > e.x && (f += h - e.x); - e.y > g ? l += d - b.height : g > e.y && (l += g - e.y)
                }
                b = this._local;
                b[0] = -f;
                b[1] = -l;
                b[2] = c - f;
                b[3] = d - l;
                this.updateUVs(a);
                this.updateWorldVerts(a)
            };
            return b
        }(d["default"]);
        m["default"] = g;
        q.exports = m["default"]
    }, {
        "../../../../../components/CCLabelShadow": 142,
        "../../../../utils/label/ttf": 264
    }],
    274: [function(g, q, m) {
        function h(a, c) {
            a.prototype = Object.create(c.prototype);
            a.prototype.constructor = a;
            e(a, c)
        }

        function e(a, c) {
            e = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(a, b) {
                a.__proto__ = b;
                return a
            };
            return e(a, c)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var d = function(a) {
                return a && a.__esModule ? a : {
                    default: a
                }
            }(g("../../../../../value-types/vec3")),
            k = g("../../../../assembler-3d");
        g = g("../2d/bmfont");
        var c = new d["default"],
            a = new d["default"];
        g = function(a) {
            function b() {
                return a.apply(this, arguments) || this
            }
            h(b, a);
            return b
        }(g);
        m["default"] = g;
        cc.js.mixin(g.prototype,
            k, {
                updateWorldVerts: function(b) {
                    b = b.node._worldMatrix;
                    for (var l = this._local, f = this._renderData.vDatas[0], k = this.floatsPerVert, e = 0; e < f.length; e += k) d["default"].set(c, l[e], l[e + 1], 0), d["default"].transformMat4(a, c, b), f[e] = a.x, f[e + 1] = a.y, f[e + 2] = a.z
                }
            });
        q.exports = m["default"]
    }, {
        "../../../../../value-types/vec3": 335,
        "../../../../assembler-3d": 254,
        "../2d/bmfont": 270
    }],
    275: [function(g, q, m) {
        function h(a, c) {
            a.prototype = Object.create(c.prototype);
            a.prototype.constructor = a;
            e(a, c)
        }

        function e(a, c) {
            e = Object.setPrototypeOf ?
                Object.setPrototypeOf.bind() : function(a, b) {
                    a.__proto__ = b;
                    return a
                };
            return e(a, c)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var d = function(a) {
                return a && a.__esModule ? a : {
                    default: a
                }
            }(g("../../../../../value-types/vec3")),
            k = g("../../../../assembler-3d");
        g = g("../2d/letter");
        var c = new d["default"],
            a = new d["default"];
        g = function(a) {
            function b() {
                return a.apply(this, arguments) || this
            }
            h(b, a);
            return b
        }(g);
        m["default"] = g;
        cc.js.mixin(g.prototype, k, {
            updateWorldVerts: function(b) {
                b = b.node._worldMatrix;
                for (var l = this._local,
                        f = this._renderData.vDatas[0], k = this.floatsPerVert, e = 0; e < f.length; e += k) d["default"].set(c, l[e], l[e + 1], 0), d["default"].transformMat4(a, c, b), f[e] = a.x, f[e + 1] = a.y, f[e + 2] = a.z
            }
        });
        q.exports = m["default"]
    }, {
        "../../../../../value-types/vec3": 335,
        "../../../../assembler-3d": 254,
        "../2d/letter": 271
    }],
    276: [function(g, q, m) {
        function h(d, c) {
            d.prototype = Object.create(c.prototype);
            d.prototype.constructor = d;
            e(d, c)
        }

        function e(d, c) {
            e = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(a, b) {
                a.__proto__ = b;
                return a
            };
            return e(d, c)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var d = g("../../../../assembler-3d");
        g = function(d) {
            function c() {
                return d.apply(this, arguments) || this
            }
            h(c, d);
            return c
        }(g("../2d/ttf"));
        m["default"] = g;
        cc.js.mixin(g.prototype, d);
        q.exports = m["default"]
    }, {
        "../../../../assembler-3d": 254,
        "../2d/ttf": 273
    }],
    277: [function(g, q, m) {
        function h(a) {
            return a && a.__esModule ? a : {
                default: a
            }
        }
        q = h(g("../../../assembler"));
        var e = h(g("../../../../components/CCLabel")),
            d = h(g("./2d/ttf")),
            k = h(g("./2d/bmfont")),
            c = h(g("./2d/letter")),
            a = h(g("./3d/ttf")),
            b = h(g("./3d/bmfont")),
            l = h(g("./3d/letter"));
        !1;
        e["default"]._canvasPool = {
            pool: [],
            get: function() {
                var a = this.pool.pop();
                if (!a) {
                    a = document.createElement("canvas");
                    var b = a.getContext("2d");
                    a = {
                        canvas: a,
                        context: b
                    };
                    b.textBaseline = "alphabetic"
                }
                return a
            },
            put: function(a) {
                32 <= this.pool.length || this.pool.push(a)
            }
        };
        q["default"].register(cc.Label, {
            getConstructor: function(f) {
                var h = f.node.is3DNode,
                    g = h ? a["default"] : d["default"];
                f.font instanceof cc.BitmapFont ? g = h ? b["default"] : k["default"] : f.cacheMode ===
                    e["default"].CacheMode.CHAR && (!1, cc.sys.platform === cc.sys.WECHAT_GAME_SUB ? cc.warn("sorry, subdomain does not support CHAR mode currently!") : g = h ? l["default"] : c["default"]);
                return g
            },
            TTF: d["default"],
            Bmfont: k["default"],
            Letter: c["default"],
            TTF3D: a["default"],
            Bmfont3D: b["default"],
            Letter3D: l["default"],
            NativeTTF: void 0
        })
    }, {
        "../../../../components/CCLabel": 140,
        "../../../assembler": 256,
        "./2d/bmfont": 270,
        "./2d/letter": 271,
        "./2d/nativeTTF": 272,
        "./2d/ttf": 273,
        "./3d/bmfont": 274,
        "./3d/letter": 275,
        "./3d/ttf": 276
    }],
    278: [function(g, q, m) {
        function h(a, b) {
            a.prototype = Object.create(b.prototype);
            a.prototype.constructor = a;
            e(a, b)
        }

        function e(a, b) {
            e = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(a, b) {
                a.__proto__ = b;
                return a
            };
            return e(a, b)
        }

        function d(a) {
            for (var b = l.DS_FUNC_EQUAL, c = l.STENCIL_OP_KEEP, d, f = d = 0; f < n.length; ++f) d += 1 << f;
            f = n[n.length - 1];
            f._enableMaterial.effect.setStencil(l.STENCIL_ENABLE, b, d, d, c, l.STENCIL_OP_KEEP, l.STENCIL_OP_KEEP, 1 << n.length - 1);
            a._flushMaterial(f._enableMaterial)
        }
        m.__esModule = !0;
        m.MaskAssembler = void 0;
        q = function(a) {
            return a && a.__esModule ? a : {
                default: a
            }
        }(g("../../assembler"));
        var k = g("../../../components/CCMask"),
            c = g("../../render-flow"),
            a = g("./sprite/2d/simple"),
            b = g("./graphics"),
            l = g("../../../../renderer/gfx"),
            f = g("../vertex-format").vfmtPos,
            n = [];
        g = function(e) {
            function g() {
                return e.apply(this, arguments) || this
            }
            h(g, e);
            var p = g.prototype;
            p.updateRenderData = function(c) {
                c._type === k.Type.IMAGE_STENCIL ? c.spriteFrame ? a.prototype.updateRenderData.call(this, c) : c.setMaterial(0, null) :
                    (c._graphics.setMaterial(0, c._materials[0]), b.prototype.updateRenderData.call(c._graphics._assembler, c._graphics, c._graphics))
            };
            p.fillBuffers = function(e, h) {
                if (e._type !== k.Type.IMAGE_STENCIL || e.spriteFrame) {
                    8 < n.length + 1 && cc.errorID(9E3, 8);
                    n.push(e);
                    var g = 1 << n.length - 1;
                    e._clearMaterial.effect.setStencil(l.STENCIL_ENABLE, l.DS_FUNC_NEVER, g, g, e.inverted ? l.STENCIL_OP_REPLACE : l.STENCIL_OP_ZERO, l.STENCIL_OP_KEEP, l.STENCIL_OP_KEEP, g);
                    var p = h.getBuffer("mesh", f),
                        t = p.request(4, 6);
                    g = t.indiceOffset;
                    var u = t.byteOffset >>
                        2;
                    t = t.vertexOffset;
                    var x = p._vData;
                    p = p._iData;
                    x[u++] = -1;
                    x[u++] = -1;
                    x[u++] = -1;
                    x[u++] = 1;
                    x[u++] = 1;
                    x[u++] = 1;
                    x[u++] = 1;
                    x[u++] = -1;
                    p[g++] = t;
                    p[g++] = t + 3;
                    p[g++] = t + 1;
                    p[g++] = t + 1;
                    p[g++] = t + 3;
                    p[g++] = t + 2;
                    h.node = h._dummyNode;
                    h.material = e._clearMaterial;
                    h._flush();
                    g = 1 << n.length - 1;
                    e._materials[0].effect.setStencil(l.STENCIL_ENABLE, l.DS_FUNC_NEVER, g, g, e.inverted ? l.STENCIL_OP_ZERO : l.STENCIL_OP_REPLACE, l.STENCIL_OP_KEEP, l.STENCIL_OP_KEEP, g);
                    h.material = e._materials[0];
                    e._type === k.Type.IMAGE_STENCIL ? (h.node = h._dummyNode, a.prototype.fillBuffers.call(e._assembler,
                        e, h), h._flush()) : (h.node = e.node, b.prototype.fillBuffers.call(e._graphics._assembler, e._graphics, h));
                    d(h)
                }
                e.node._renderFlag |= c.FLAG_UPDATE_RENDER_DATA
            };
            p.postFillBuffers = function(a, b) {
                if (a._type !== k.Type.IMAGE_STENCIL || a.spriteFrame) 0 === n.length && cc.errorID(9001), n.pop(), 0 === n.length ? b._flushMaterial(a._exitMaterial) : d(b);
                a.node._renderFlag |= c.FLAG_UPDATE_RENDER_DATA
            };
            return g
        }(a);
        m.MaskAssembler = g;
        q["default"].register(k, g)
    }, {
        "../../../../renderer/gfx": 358,
        "../../../components/CCMask": 144,
        "../../assembler": 256,
        "../../render-flow": 260,
        "../vertex-format": 299,
        "./graphics": 268,
        "./sprite/2d/simple": 283
    }],
    279: [function(g, q, m) {
        function h(a) {
            return a && a.__esModule ? a : {
                default: a
            }
        }

        function e(a, b) {
            a.prototype = Object.create(b.prototype);
            a.prototype.constructor = a;
            d(a, b)
        }

        function d(a, b) {
            d = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(a, b) {
                a.__proto__ = b;
                return a
            };
            return d(a, b)
        }

        function k(a, b) {
            this.point = a || cc.v2();
            this.dir = b || cc.v2();
            this.time = this.distance = 0
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var c = h(g("../../assembler-2d")),
            a = h(g("../../../value-types/mat4")),
            b = g("../../../components/CCMotionStreak"),
            l = g("../../render-flow");
        k.prototype.setPoint = function(a, b) {
            this.point.x = a;
            this.point.y = b
        };
        k.prototype.setDir = function(a, b) {
            this.dir.x = a;
            this.dir.y = b
        };
        cc.v2();
        cc.v2();
        var f = cc.v2(),
            n = cc.v2(),
            u = new a["default"];
        g = function(a) {
            function b() {
                var b = a.call(this) || this;
                b._tailShortenTime = 0;
                return b
            }
            e(b, a);
            var c = b.prototype;
            c.initData = function() {
                this._renderData.createFlexData(0, 16, 42)
            };
            c.update = function(a, b) {
                !1;
                var c = a._stroke /
                    2;
                a.node.getWorldMatrix(u);
                var d = u.m[12],
                    l = u.m[13],
                    e = a._points,
                    h = a._lastWPos,
                    g = a._fadeTime;
                if (a._lastWPosUpdated && (h.x !== d || h.y !== l)) {
                    var p = !1;
                    if (0 === e.length) {
                        var t = new k;
                        t.setPoint(h.x, h.y);
                        this._tailShortenTime = t.time = g;
                        e.push(t);
                        t = new k;
                        e.unshift(t)
                    } else {
                        t = e[0];
                        var x = e[1];
                        p = x.point.x - d;
                        x = x.point.y - l;
                        p = p * p + x * x >= a.minSeg * a.minSeg
                    }
                    t.setPoint(d, l);
                    t.time = g + b;
                    x = e[1];
                    t.distance = t.point.sub(x.point, n).mag();
                    n.normalizeSelf();
                    t.setDir(n.x, n.y);
                    2 === e.length && x.setDir(n.x, n.y);
                    p && (p = new k(t.point.clone(),
                        t.dir.clone()), p.distance = t.distance, p.time = t.time, e.unshift(p))
                }
                h.x = d;
                h.y = l;
                a._lastWPosUpdated = !0;
                if (!(2 > e.length)) {
                    d = a._color;
                    a = d.a;
                    d = d.b << 16 | d.g << 8 | d.r;
                    l = 0;
                    h = this._renderData._flexBuffer;
                    h.reserve(2 * e.length, 6 * (e.length - 1));
                    t = h.vData;
                    p = h.uintVData;
                    for (x = e.length - 1; 0 <= x; x--) {
                        var v = e[x],
                            z = v.point,
                            m = v.dir;
                        v.time -= b;
                        var q = x === e.length - 1;
                        if (0 >= v.time) q && 0 <= x - 1 && (this._tailShortenTime = e[x - 1].time - b), e.splice(x, 1);
                        else {
                            var M = v.time / g;
                            if (q) {
                                q = e[x - 1];
                                if (!q) {
                                    e.splice(x, 1);
                                    continue
                                }
                                3 <= e.length ? (v = v.time /
                                    this._tailShortenTime, 1 >= v && (z.x = q.point.x - q.distance * q.dir.x * v, z.y = q.point.y - q.distance * q.dir.y * v)) : this._tailShortenTime = v.time
                            }
                            v = f;
                            v.x = -m.y;
                            v.y = m.x;
                            m = M * a << 24 >>> 0 | d;
                            v = 5 * l;
                            t[v] = z.x + f.x * c;
                            t[v + 1] = z.y + f.y * c;
                            t[v + 2] = 1;
                            t[v + 3] = M;
                            p[v + 4] = m;
                            v += 5;
                            t[v] = z.x - f.x * c;
                            t[v + 1] = z.y - f.y * c;
                            t[v + 2] = 0;
                            t[v + 3] = M;
                            p[v + 4] = m;
                            l += 2
                        }
                    }
                    h.used(l, 2 >= l ? 0 : 3 * (l - 2))
                }
            };
            c.fillBuffers = function(a, b) {
                var c = this._renderData._flexBuffer,
                    d = c.vData,
                    f = c.usedVertices,
                    k = c.usedVerticesFloats;
                b = b._meshBuffer;
                c = b.request(f, c.usedIndices);
                var e = c.byteOffset >>
                    2,
                    h = b._vData;
                d.length + e > h.length ? h.set(d.subarray(0, k), e) : h.set(d, e);
                d = b._iData;
                k = c.indiceOffset;
                c = c.vertexOffset;
                for (b = 0; b < f; b += 2) e = c + b, d[k++] = e, d[k++] = e + 2, d[k++] = e + 1, d[k++] = e + 1, d[k++] = e + 2, d[k++] = e + 3;
                a.node._renderFlag |= l.FLAG_UPDATE_RENDER_DATA
            };
            return b
        }(c["default"]);
        m["default"] = g;
        g.register(b, g);
        q.exports = m["default"]
    }, {
        "../../../components/CCMotionStreak": 145,
        "../../../value-types/mat4": 327,
        "../../assembler-2d": 253,
        "../../render-flow": 260
    }],
    280: [function(g, q, m) {
        function h(c, a) {
            c.prototype =
                Object.create(a.prototype);
            c.prototype.constructor = c;
            e(c, a)
        }

        function e(c, a) {
            e = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(a, c) {
                a.__proto__ = c;
                return a
            };
            return e(c, a)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var d = function(c) {
                return c && c.__esModule ? c : {
                    default: c
                }
            }(g("../../../../assembler-2d")),
            k = g("../../../../../components/CCSprite").FillType;
        g = function(c) {
            function a() {
                return c.apply(this, arguments) || this
            }
            h(a, c);
            var b = a.prototype;
            b.updateRenderData = function(a) {
                this.packToDynamicAtlas(a,
                    a._spriteFrame);
                if (a._vertsDirty) {
                    var b = a._fillStart,
                        c = a._fillRange;
                    0 > c && (b += c, c = -c);
                    c = b + c;
                    b = 1 < b ? 1 : b;
                    b = 0 > b ? 0 : b;
                    c = 1 < c ? 1 : c;
                    c = (0 > c ? 0 : c) - b;
                    c = b + (0 > c ? 0 : c);
                    c = 1 < c ? 1 : c;
                    this.updateUVs(a, b, c);
                    this.updateVerts(a, b, c);
                    a._vertsDirty = !1
                }
            };
            b.updateUVs = function(a, b, c) {
                var d = a._spriteFrame,
                    f = d._texture.width,
                    l = d._texture.height,
                    e = d._rect,
                    h;
                if (d._rotated) {
                    d = e.x / f;
                    var g = (e.y + e.width) / l;
                    f = (e.x + e.height) / f;
                    var n = e.y / l;
                    l = e = d;
                    d = f;
                    var w = h = g;
                    g = n
                } else d = e.x / f, g = (e.y + e.height) / l, f = (e.x + e.width) / f, n = e.y / l, l = d, e = f, g = w = g, n = h = n;
                var A = this._renderData.vDatas[0],
                    m = this.uvOffset,
                    y = this.floatsPerVert;
                switch (a._fillType) {
                    case k.HORIZONTAL:
                        A[m] = l + (e - l) * b;
                        A[m + 1] = g + (w - g) * b;
                        A[m + y] = l + (e - l) * c;
                        A[m + y + 1] = g + (w - g) * c;
                        A[m + 2 * y] = d + (f - d) * b;
                        A[m + 2 * y + 1] = n + (h - n) * b;
                        A[m + 3 * y] = d + (f - d) * c;
                        A[m + 3 * y + 1] = n + (h - n) * c;
                        break;
                    case k.VERTICAL:
                        A[m] = l + (d - l) * b;
                        A[m + 1] = g + (n - g) * b;
                        A[m + y] = e + (f - e) * b;
                        A[m + y + 1] = w + (h - w) * b;
                        A[m + 2 * y] = l + (d - l) * c;
                        A[m + 2 * y + 1] = g + (n - g) * c;
                        A[m + 3 * y] = e + (f - e) * c;
                        A[m + 3 * y + 1] = w + (h - w) * c;
                        break;
                    default:
                        cc.errorID(2626)
                }
            };
            b.updateVerts = function(a, b, c) {
                var d = a.node,
                    f = d.width,
                    l = d.height,
                    e = d.anchorX * f,
                    h = d.anchorY * l;
                d = -e;
                var g = -h;
                f -= e;
                l -= h;
                switch (a._fillType) {
                    case k.HORIZONTAL:
                        c = d + (f - d) * c;
                        d += (f - d) * b;
                        f = c;
                        break;
                    case k.VERTICAL:
                        c = g + (l - g) * c;
                        g += (l - g) * b;
                        l = c;
                        break;
                    default:
                        cc.errorID(2626)
                }
                b = this._local;
                b[0] = d;
                b[1] = g;
                b[2] = f;
                b[3] = l;
                this.updateWorldVerts(a)
            };
            return a
        }(d["default"]);
        m["default"] = g;
        q.exports = m["default"]
    }, {
        "../../../../../components/CCSprite": 155,
        "../../../../assembler-2d": 253
    }],
    281: [function(g, q, m) {
        function h(d, k) {
            d.prototype = Object.create(k.prototype);
            d.prototype.constructor =
                d;
            e(d, k)
        }

        function e(d, k) {
            e = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(c, a) {
                c.__proto__ = a;
                return c
            };
            return e(d, k)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        g = function(d) {
            function k() {
                return d.apply(this, arguments) || this
            }
            h(k, d);
            var c = k.prototype;
            c.initData = function(a) {
                this._renderData.createFlexData(0, 4, 6, this.getVfmt())
            };
            c.updateRenderData = function(a) {
                this.packToDynamicAtlas(a, a._spriteFrame);
                var b = a.spriteFrame;
                if (b && (b = b.vertices)) {
                    this.verticesCount = b.x.length;
                    this.indicesCount = b.triangles.length;
                    var c = this._renderData._flexBuffer;
                    c.reserve(this.verticesCount, this.indicesCount) && (this.updateColor(a), a._vertsDirty = !0);
                    c.used(this.verticesCount, this.indicesCount);
                    this.updateIndices(b.triangles);
                    a._vertsDirty && (this.updateUVs(a), this.updateVerts(a), this.updateWorldVerts(a), a._vertsDirty = !1)
                }
            };
            c.updateIndices = function(a) {
                this._renderData.iDatas[0].set(a)
            };
            c.updateUVs = function(a) {
                var b = a.spriteFrame.vertices;
                a = b.nu;
                b = b.nv;
                for (var c = this.uvOffset, d = this.floatsPerVert, k = this._renderData.vDatas[0],
                        e = 0; e < a.length; e++) {
                    var h = d * e + c;
                    k[h] = a[e];
                    k[h + 1] = b[e]
                }
            };
            c.updateVerts = function(a) {
                var b = a.node,
                    c = Math.abs(b.width),
                    d = Math.abs(b.height),
                    k = b.anchorX * c;
                b = b.anchorY * d;
                var e = a.spriteFrame,
                    h = e.vertices,
                    g = h.x,
                    t = h.y,
                    x = e._originalSize.width,
                    z = e._originalSize.height,
                    m = e._rect.width;
                h = e._rect.height;
                var w = e._offset.x + (x - m) / 2,
                    A = e._offset.y + (z - h) / 2;
                x = c / (a.trim ? m : x);
                m = d / (a.trim ? h : z);
                h = this._local;
                if (a.trim) {
                    a = 0;
                    for (var B = g.length; a < B; a++) {
                        var y = 2 * a;
                        h[y] = (g[a] - w) * x - k;
                        h[y + 1] = (z - t[a] - A) * m - b
                    }
                } else
                    for (w = 0, A = g.length; w <
                        A; w++) a = 2 * w, h[a] = g[w] * x - k, h[a + 1] = (z - t[w]) * m - b;
                if (e._flipX)
                    for (g = 0, t = this.verticesCount; g < t; g++) h[2 * g] = c - h[2 * g] - 2 * k;
                if (e._flipY)
                    for (c = 0, k = this.verticesCount; c < k; c++) h[2 * c + 1] = d - h[2 * c + 1] - 2 * b
            };
            c.updateWorldVerts = function(a) {
                var b = a.node._worldMatrix.m;
                a = b[0];
                var c = b[1],
                    d = b[4],
                    k = b[5],
                    e = b[12];
                b = b[13];
                for (var h = this._local, g = this._renderData.vDatas[0], t = this.floatsPerVert, x = 0, z = this.verticesCount; x < z; x++) {
                    var m = h[2 * x],
                        w = h[2 * x + 1];
                    g[t * x] = m * a + w * d + e;
                    g[t * x + 1] = m * c + w * k + b
                }
            };
            return k
        }(function(d) {
            return d && d.__esModule ?
                d : {
                    default: d
                }
        }(g("../../../../assembler-2d"))["default"]);
        m["default"] = g;
        q.exports = m["default"]
    }, {
        "../../../../assembler-2d": 253
    }],
    282: [function(g, q, m) {
        function h(a, b) {
            a.prototype = Object.create(b.prototype);
            a.prototype.constructor = a;
            e(a, b)
        }

        function e(a, b) {
            e = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(a, b) {
                a.__proto__ = b;
                return a
            };
            return e(a, b)
        }

        function d(a, b, c, d, f, l, k) {
            var e = Math.sin(l),
                h = Math.cos(l);
            if (0 !== Math.cos(l)) {
                var g = e / h;
                if (0 < (a - f.x) * h) {
                    var n = f.y + g * (a - f.x);
                    k[0].x = a;
                    k[0].y =
                        n
                }
                0 < (b - f.x) * h && (a = f.y + g * (b - f.x), k[2].x = b, k[2].y = a)
            }
            0 !== Math.sin(l) && (b = h / e, 0 < (d - f.y) * e && (k[3].x = f.x + b * (d - f.y), k[3].y = d), 0 < (c - f.y) * e && (k[1].x = f.x + b * (c - f.y), k[1].y = c))
        }

        function k(a, b) {
            var c = b.x - a.x;
            a = b.y - a.y;
            if (0 !== c || 0 !== a) {
                if (0 === c) return 0 < a ? .5 * Math.PI : 1.5 * Math.PI;
                a = Math.atan(a / c);
                0 > c && (a += Math.PI);
                return a
            }
        }
        m.__esModule = !0;
        m["default"] = void 0;
        g = function(a) {
            return a && a.__esModule ? a : {
                default: a
            }
        }(g("../../../../assembler-2d"));
        var c = 2 * Math.PI,
            a = [cc.v2(0, 0), cc.v2(0, 0), cc.v2(0, 0), cc.v2(0, 0)],
            b = [0, 0,
                0, 0
            ],
            l = [0, 0, 0, 0, 0, 0, 0, 0],
            f = [cc.v2(0, 0), cc.v2(0, 0), cc.v2(0, 0), cc.v2(0, 0)],
            n = [cc.v2(0, 0), cc.v2(0, 0), cc.v2(0, 0), cc.v2(0, 0)],
            u = cc.v2(0, 0),
            v = [];
        g = function(e) {
            function g() {
                return e.apply(this, arguments) || this
            }
            h(g, e);
            var p = g.prototype;
            p.initData = function(a) {
                this._renderData.createFlexData(0, 4, 6, this.getVfmt());
                this.updateIndices()
            };
            p.updateRenderData = function(k) {
                e.prototype.updateRenderData.call(this, k);
                var h = k.spriteFrame;
                this.packToDynamicAtlas(k, h);
                if (k._vertsDirty) {
                    var g = k._fillStart,
                        p = k._fillRange;
                    0 > p && (g += p, p = -p);
                    for (; 1 <= g;) --g;
                    for (; 0 > g;) g += 1;
                    g *= c;
                    p *= c;
                    var t = k.node,
                        x = t.width,
                        z = t.height,
                        m = t.anchorX * x,
                        q = t.anchorY * z;
                    t = -m;
                    var D = -q;
                    x -= m;
                    z -= q;
                    b[0] = t;
                    b[1] = D;
                    b[2] = x;
                    b[3] = z;
                    q = k._fillCenter;
                    m = u.x = Math.min(Math.max(0, q.x), 1) * (x - t) + t;
                    q = u.y = Math.min(Math.max(0, q.y), 1) * (z - D) + D;
                    a[0].x = a[3].x = t;
                    a[1].x = a[2].x = x;
                    a[0].y = a[1].y = D;
                    a[2].y = a[3].y = z;
                    v.length = 0;
                    m !== b[0] && (v[0] = [3, 0]);
                    m !== b[2] && (v[2] = [1, 2]);
                    q !== b[1] && (v[1] = [0, 1]);
                    q !== b[3] && (v[3] = [2, 3]);
                    x = h._texture.width;
                    t = h._texture.height;
                    D = h._rect;
                    h._rotated ? (h =
                        D.x / x, x = (D.x + D.height) / x, z = D.y / t, t = (D.y + D.width) / t, l[0] = l[2] = h, l[4] = l[6] = x, l[3] = l[7] = t, l[1] = l[5] = z) : (h = D.x / x, x = (D.x + D.width) / x, z = D.y / t, t = (D.y + D.height) / t, l[0] = l[4] = h, l[2] = l[6] = x, l[1] = l[3] = t, l[5] = l[7] = z);
                    d(b[0], b[2], b[1], b[3], u, g, f);
                    d(b[0], b[2], b[1], b[3], u, g + p, n);
                    this.updateVerts(k, g, p);
                    k._vertsDirty = !1
                }
            };
            p.updateVerts = function(b, d, l) {
                for (var e = d + l, h = this._local, g = h.length = 0, p = 3 * this.floatsPerVert, t = 0; 4 > t; ++t) {
                    var x = v[t];
                    if (x)
                        if (l >= c) h.length = g + p, this._generateTriangle(h, g, u, a[x[0]], a[x[1]]), g += p;
                        else {
                            var z = k(u, a[x[0]]),
                                w = k(u, a[x[1]]);
                            w < z && (w += c);
                            z -= c;
                            w -= c;
                            for (var m = 0; 3 > m; ++m) z >= e || (z >= d ? (h.length = g + p, w >= e ? this._generateTriangle(h, g, u, a[x[0]], n[t]) : this._generateTriangle(h, g, u, a[x[0]], a[x[1]]), g += p) : w <= d || (w <= e ? (h.length = g + p, this._generateTriangle(h, g, u, f[t], a[x[1]])) : (h.length = g + p, this._generateTriangle(h, g, u, f[t], n[t])), g += p)), z += c, w += c
                        }
                }
                this.allocWorldVerts(b);
                this.updateWorldVerts(b)
            };
            p.allocWorldVerts = function(a) {
                a = a.node._color._val;
                var b = this._renderData,
                    c = this.floatsPerVert,
                    d = this._local,
                    f = d.length / c;
                this.verticesCount = this.indicesCount = f;
                var l = b._flexBuffer;
                l.reserve(f, f) && this.updateIndices();
                l.used(this.verticesCount, this.indicesCount);
                f = b.vDatas[0];
                b = b.uintVDatas[0];
                l = this.uvOffset;
                for (var k = 0; k < d.length; k += c) {
                    var e = k + l;
                    f[e] = d[e];
                    f[e + 1] = d[e + 1];
                    b[e + 2] = a
                }
            };
            p.updateIndices = function() {
                for (var a = this._renderData.iDatas[0], b = 0; b < a.length; b++) a[b] = b
            };
            p.updateWorldVerts = function(a) {
                var b = a.node._worldMatrix.m;
                a = b[0];
                var c = b[1],
                    d = b[4],
                    f = b[5],
                    l = b[12];
                b = b[13];
                for (var k = this._local, e = this._renderData.vDatas[0],
                        h = this.floatsPerVert, g = 0; g < k.length; g += h) {
                    var n = k[g],
                        p = k[g + 1];
                    e[g] = n * a + p * d + l;
                    e[g + 1] = n * c + p * f + b
                }
            };
            p._generateTriangle = function(a, c, d, f, l) {
                var k = b[0],
                    e = b[1],
                    h = b[2],
                    g = b[3],
                    n = this.floatsPerVert;
                a[c] = d.x;
                a[c + 1] = d.y;
                a[c + n] = f.x;
                a[c + n + 1] = f.y;
                a[c + 2 * n] = l.x;
                a[c + 2 * n + 1] = l.y;
                var p = this.uvOffset;
                var t = (d.x - k) / (h - k);
                d = (d.y - e) / (g - e);
                this._generateUV(t, d, a, c + p);
                t = (f.x - k) / (h - k);
                d = (f.y - e) / (g - e);
                this._generateUV(t, d, a, c + n + p);
                t = (l.x - k) / (h - k);
                d = (l.y - e) / (g - e);
                this._generateUV(t, d, a, c + 2 * n + p)
            };
            p._generateUV = function(a, b, c,
                d) {
                var f = l[0] + (l[2] - l[0]) * a,
                    k = l[1] + (l[3] - l[1]) * a,
                    e = l[5] + (l[7] - l[5]) * a;
                c[d] = f + (l[4] + (l[6] - l[4]) * a - f) * b;
                c[d + 1] = k + (e - k) * b
            };
            return g
        }(g["default"]);
        m["default"] = g;
        q.exports = m["default"]
    }, {
        "../../../../assembler-2d": 253
    }],
    283: [function(g, q, m) {
        function h(d, k) {
            d.prototype = Object.create(k.prototype);
            d.prototype.constructor = d;
            e(d, k)
        }

        function e(d, k) {
            e = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(c, a) {
                c.__proto__ = a;
                return c
            };
            return e(d, k)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        g = function(d) {
            function k() {
                return d.apply(this,
                    arguments) || this
            }
            h(k, d);
            var c = k.prototype;
            c.updateRenderData = function(a) {
                this.packToDynamicAtlas(a, a._spriteFrame);
                a._vertsDirty && (this.updateUVs(a), this.updateVerts(a), a._vertsDirty = !1)
            };
            c.updateUVs = function(a) {
                a = a._spriteFrame.uv;
                for (var b = this.uvOffset, c = this.floatsPerVert, d = this._renderData.vDatas[0], k = 0; 4 > k; k++) {
                    var e = 2 * k,
                        h = c * k + b;
                    d[h] = a[e];
                    d[h + 1] = a[e + 1]
                }
            };
            c.updateVerts = function(a) {
                var b = a.node,
                    c = b.width,
                    d = b.height,
                    k = b.anchorX * c;
                b = b.anchorY * d;
                if (a.trim) {
                    var e = -k;
                    var h = -b;
                    c -= k;
                    d -= b
                } else {
                    var g =
                        a.spriteFrame;
                    e = g._originalSize.width;
                    var t = g._originalSize.height;
                    h = g._rect.width;
                    var x = g._rect.height,
                        z = g._offset,
                        m = c / e;
                    g = d / t;
                    var w = z.x - (e - h) / 2,
                        A = z.y + (t - x) / 2;
                    t = z.y - (t - x) / 2;
                    e = (z.x + (e - h) / 2) * m - k;
                    h = A * g - b;
                    c = c + w * m - k;
                    d = d + t * g - b
                }
                k = this._local;
                k[0] = e;
                k[1] = h;
                k[2] = c;
                k[3] = d;
                this.updateWorldVerts(a)
            };
            return k
        }(function(d) {
            return d && d.__esModule ? d : {
                default: d
            }
        }(g("../../../../assembler-2d"))["default"]);
        m["default"] = g;
        q.exports = m["default"]
    }, {
        "../../../../assembler-2d": 253
    }],
    284: [function(g, q, m) {
        function h(d, k) {
            d.prototype =
                Object.create(k.prototype);
            d.prototype.constructor = d;
            e(d, k)
        }

        function e(d, k) {
            e = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(c, a) {
                c.__proto__ = a;
                return c
            };
            return e(d, k)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        g = function(d) {
            function k() {
                return d.apply(this, arguments) || this
            }
            h(k, d);
            var c = k.prototype;
            c.initData = function(a) {
                if (!(0 < this._renderData.meshCount)) {
                    this._renderData.createData(0, this.verticesFloats, this.indicesCount);
                    a = this._renderData.iDatas[0];
                    for (var b = 0, c = 0; 3 > c; ++c)
                        for (var d = 0; 3 >
                            d; ++d) {
                            var k = 4 * c + d;
                            a[b++] = k;
                            a[b++] = k + 1;
                            a[b++] = k + 4;
                            a[b++] = k + 1;
                            a[b++] = k + 5;
                            a[b++] = k + 4
                        }
                }
            };
            c.initLocal = function() {
                this._local = [];
                this._local.length = 8
            };
            c.updateRenderData = function(a) {
                this.packToDynamicAtlas(a, a._spriteFrame);
                a._vertsDirty && (this.updateUVs(a), this.updateVerts(a), a._vertsDirty = !1)
            };
            c.updateVerts = function(a) {
                var b = a.node,
                    c = b.width,
                    d = b.height,
                    k = b.anchorX * c;
                b = b.anchorY * d;
                var e = a.spriteFrame,
                    h = e.insetLeft,
                    g = e.insetRight,
                    t = e.insetTop;
                e = e.insetBottom;
                var x = c - h - g,
                    z = d - t - e;
                g = c / (h + g);
                t = d / (t + e);
                g = isNaN(g) ||
                    1 < g ? 1 : g;
                t = isNaN(t) || 1 < t ? 1 : t;
                var m = this._local;
                m[0] = -k;
                m[1] = -b;
                m[2] = h * g - k;
                m[3] = e * t - b;
                m[4] = m[2] + (0 > x ? 0 : x);
                m[5] = m[3] + (0 > z ? 0 : z);
                m[6] = c - k;
                m[7] = d - b;
                this.updateWorldVerts(a)
            };
            c.updateUVs = function(a) {
                var b = this._renderData.vDatas[0];
                a = a.spriteFrame.uvSliced;
                for (var c = this.uvOffset, d = this.floatsPerVert, k = 0; 4 > k; ++k)
                    for (var e = 0; 4 > e; ++e) {
                        var h = 4 * k + e,
                            g = a[h];
                        h *= d;
                        b[h + c] = g.u;
                        b[h + c + 1] = g.v
                    }
            };
            c.updateWorldVerts = function(a) {
                var b = a.node._worldMatrix.m;
                a = b[0];
                var c = b[1],
                    d = b[4],
                    k = b[5],
                    e = b[12];
                b = b[13];
                for (var h = this._local,
                        g = this._renderData.vDatas[0], t = this.floatsPerVert, x = 0; 4 > x; ++x)
                    for (var z = h[2 * x + 1], m = 0; 4 > m; ++m) {
                        var w = h[2 * m],
                            A = (4 * x + m) * t;
                        g[A] = w * a + z * d + e;
                        g[A + 1] = w * c + z * k + b
                    }
            };
            return k
        }(function(d) {
            return d && d.__esModule ? d : {
                default: d
            }
        }(g("../../../../assembler-2d"))["default"]);
        m["default"] = g;
        Object.assign(g.prototype, {
            verticesCount: 16,
            indicesCount: 54
        });
        q.exports = m["default"]
    }, {
        "../../../../assembler-2d": 253
    }],
    285: [function(g, q, m) {
            function h(d, k) {
                d.prototype = Object.create(k.prototype);
                d.prototype.constructor = d;
                e(d, k)
            }

            function e(d,
                k) {
                e = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(c, a) {
                    c.__proto__ = a;
                    return c
                };
                return e(d, k)
            }
            m.__esModule = !0;
            m["default"] = void 0;
            g = function(d) {
                function k() {
                    return d.apply(this, arguments) || this
                }
                h(k, d);
                var c = k.prototype;
                c.initData = function(a) {
                    this.col = this.row = this.vRepeat = this.hRepeat = this.rectHeight = this.rectWidth = this.contentHeight = this.contentWidth = this.verticesCount = 0;
                    this._renderData.createFlexData(0, 4, 6, this.getVfmt());
                    this._updateIndices()
                };
                c.initLocal = function() {
                    this._local = {
                        x: [],
                        y: []
                    }
                };
                c._updateIndices = function() {
                    for (var a = this._renderData.iDatas[0], b = 0, c = 0, d = a.length; b < d; b += 6, c += 4) a[b] = c, a[b + 1] = c + 1, a[b + 2] = c + 2, a[b + 3] = c + 1, a[b + 4] = c + 3, a[b + 5] = c + 2
                };
                c.updateRenderData = function(a) {
                    var b = a._spriteFrame;
                    this.packToDynamicAtlas(a, b);
                    var c = a.node,
                        d = this.contentWidth = Math.abs(c.width);
                    c = this.contentHeight = Math.abs(c.height);
                    var k = b._rect,
                        e = b.insetLeft,
                        h = b.insetRight,
                        g = k.width - e - h,
                        t = b.insetTop;
                    b = b.insetBottom;
                    k = k.height - t - b;
                    this.sizableWidth = d - e - h;
                    this.sizableHeight = c - t - b;
                    this.sizableWidth =
                        0 < this.sizableWidth ? this.sizableWidth : 0;
                    this.sizableHeight = 0 < this.sizableHeight ? this.sizableHeight : 0;
                    d = this.hRepeat = 0 === g ? this.sizableWidth : this.sizableWidth / g;
                    c = this.vRepeat = 0 === k ? this.sizableHeight : this.sizableHeight / k;
                    c = this.row = Math.ceil(c + 2);
                    d = this.col = Math.ceil(d + 2);
                    d *= c;
                    this.verticesCount = 4 * d;
                    this.indicesCount = 6 * d;
                    d = this._renderData._flexBuffer;
                    d.reserve(this.verticesCount, this.indicesCount) && (this._updateIndices(), this.updateColor(a));
                    d.used(this.verticesCount, this.indicesCount);
                    a._vertsDirty &&
                        (this.updateUVs(a), this.updateVerts(a), a._vertsDirty = !1)
                };
                c.updateVerts = function(a) {
                    var b = a._spriteFrame,
                        c = b._rect,
                        d = a.node,
                        k = d.anchorX * d.width,
                        e = d.anchorY * d.height,
                        h = this.row,
                        g = this.col,
                        t = this.contentWidth,
                        x = this.contentHeight,
                        z = this._local,
                        m = z.x;
                    z = z.y;
                    m.length = z.length = 0;
                    var w = b.insetLeft,
                        A = b.insetRight,
                        B = c.width - w - A,
                        y = b.insetTop;
                    b = b.insetBottom;
                    c = c.height - y - b;
                    var C = 1 < d.width / (w + A) ? 1 : d.width / (w + A);
                    d = 1 < d.height / (y + b) ? 1 : d.height / (y + b);
                    var F = 0 < B ? 0 === Math.floor(1E3 * this.sizableWidth) / 1E3 % B ? B : this.sizableWidth %
                        B : this.sizableWidth;
                    var q = 0 < c ? 0 === Math.floor(1E3 * this.sizableHeight) / 1E3 % c ? c : this.sizableHeight % c : this.sizableHeight;
                    for (var D = 0; D <= g; D++) 0 === D ? m[D] = -k : 0 < D && D < g ? m[D] = 1 === D ? w * C + Math.min(B, this.sizableWidth) - k : 0 < B ? D === g - 1 ? w + F + B * (D - 2) - k : w + Math.min(B, this.sizableWidth) + B * (D - 2) - k : w + this.sizableWidth - k : D === g && (m[D] = Math.min(w + this.sizableWidth + A, t) - k);
                    for (k = 0; k <= h; k++) 0 === k ? z[k] = -e : 0 < k && k < h ? z[k] = 1 === k ? b * d + Math.min(c, this.sizableHeight) - e : 0 < c ? k === h - 1 ? b + q + (k - 2) * c - e : b + Math.min(c, this.sizableHeight) + (k - 2) *
                        c - e : b + this.sizableHeight - e : k === h && (z[k] = Math.min(b + this.sizableHeight + y, x) - e);
                    this.updateWorldVerts(a)
                };
                c.updateWorldVerts = function(a) {
                    var b = this._local,
                        c = b.x;
                    b = b.y;
                    var d = this._renderData.vDatas[0],
                        k = this.col,
                        e = a.node._worldMatrix.m;
                    a = e[0];
                    var h = e[1],
                        g = e[4],
                        t = e[5],
                        x = e[12];
                    e = e[13];
                    for (var z, m, w, A, B = this.floatsPerVert, y = 0, C = 0, F = this.row; C < F; ++C) {
                        w = b[C];
                        A = b[C + 1];
                        for (var q = 0, D = k; q < D; ++q) z = c[q], m = c[q + 1], d[y] = z * a + w * g + x, d[y + 1] = z * h + w * t + e, y += B, d[y] = m * a + w * g + x, d[y + 1] = m * h + w * t + e, y += B, d[y] = z * a + A * g + x, d[y + 1] = z * h +
                            A * t + e, y += B, d[y] = m * a + A * g + x, d[y + 1] = m * h + A * t + e, y += B
                    }
                };
                c.updateUVs = function(a) {
                    var b = this._renderData.vDatas[0];
                    if (b) {
                        var c = a._spriteFrame,
                            d = c._rect,
                            k = d.width - c.insetLeft - c.insetRight;
                        c = d.height - c.insetTop - c.insetBottom;
                        d = this.row;
                        for (var e = this.col, h = this.hRepeat, g = this.vRepeat, t, x = a.spriteFrame.uv, z = a.spriteFrame.uvSliced, m = a.spriteFrame._rotated, w = this.floatsPerVert, A = this.uvOffset, B = [], y = [], C = 0; C < d; ++C) {
                            t = this.sizableHeight > c ? this.sizableHeight >= C * c ? 1 : g % 1 : g;
                            for (var F = 0, q = e; F < q; ++F) a = this.sizableWidth >
                                k ? this.sizableWidth >= F * k ? 1 : h % 1 : h, m ? (0 === C ? (B[0] = z[0].u, B[1] = z[0].u, B[2] = z[4].u + (z[8].u - z[4].u) * t) : C < d - 1 ? (B[0] = z[4].u, B[1] = z[4].u, B[2] = z[4].u + (z[8].u - z[4].u) * t) : C === d - 1 && (B[0] = z[8].u, B[1] = z[8].u, B[2] = z[12].u), 0 === F ? (y[0] = z[0].v, y[1] = z[1].v + (z[2].v - z[1].v) * a, y[2] = z[0].v) : F < e - 1 ? (y[0] = z[1].v, y[1] = z[1].v + (z[2].v - z[1].v) * a, y[2] = z[1].v) : F === e - 1 && (y[0] = z[2].v, y[1] = z[3].v, y[2] = z[2].v), B[3] = B[2], y[3] = y[1]) : (0 === F ? (B[0] = z[0].u, B[1] = z[1].u + (z[2].u - z[1].u) * a, B[2] = x[0]) : F < e - 1 ? (B[0] = z[1].u, B[1] = z[1].u + (z[2].u - z[1].u) *
                                    a, B[2] = z[1].u) : F === e - 1 && (B[0] = z[2].u, B[1] = z[3].u, B[2] = z[2].u), 0 === C ? (y[0] = z[0].v, y[1] = z[0].v, y[2] = z[4].v + (z[8].v - z[4].v) * t) : C < d - 1 ? (y[0] = z[4].v, y[1] = z[4].v, y[2] = z[4].v + (z[8].v - z[4].v) * t) : C === d - 1 && (y[0] = z[8].v, y[1] = z[8].v, y[2] = z[12].v), B[3] = B[1], y[3] = y[2]), b[A] = B[0], b[A + 1] = y[0], A += w, b[A] = B[1], b[A + 1] = y[1], A += w, b[A] = B[2], b[A + 1] = y[2], A += w, b[A] = B[3], b[A + 1] = y[3], A += w
                        }
                    }
                };
                return k
            }(function(d) {
                return d && d.__esModule ? d : {
                    default: d
                }
            }(g("../../../../assembler-2d"))["default"]);
            m["default"] = g;
            q.exports = m["default"]
        },
        {
            "../../../../assembler-2d": 253
        }
    ],
    286: [function(g, q, m) {
            function h(d, c) {
                d.prototype = Object.create(c.prototype);
                d.prototype.constructor = d;
                e(d, c)
            }

            function e(d, c) {
                e = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(a, b) {
                    a.__proto__ = b;
                    return a
                };
                return e(d, c)
            }
            m.__esModule = !0;
            m["default"] = void 0;
            var d = g("../../../../assembler-3d");
            g = function(d) {
                function c() {
                    return d.apply(this, arguments) || this
                }
                h(c, d);
                return c
            }(g("../2d/bar-filled"));
            m["default"] = g;
            cc.js.mixin(g.prototype, d);
            q.exports = m["default"]
        },
        {
            "../../../../assembler-3d": 254,
            "../2d/bar-filled": 280
        }
    ],
    287: [function(g, q, m) {
        function h(a, b) {
            a.prototype = Object.create(b.prototype);
            a.prototype.constructor = a;
            e(a, b)
        }

        function e(a, b) {
            e = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(a, b) {
                a.__proto__ = b;
                return a
            };
            return e(a, b)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var d = function(a) {
                return a && a.__esModule ? a : {
                    default: a
                }
            }(g("../../../../../value-types/vec3")),
            k = g("../../../../assembler-3d");
        g = g("../2d/mesh");
        var c = new d["default"];
        g = function(a) {
            function b() {
                return a.apply(this,
                    arguments) || this
            }
            h(b, a);
            return b
        }(g);
        m["default"] = g;
        cc.js.mixin(g.prototype, k, {
            updateWorldVerts: function(a) {
                a = a.node._worldMatrix;
                for (var b = this._local, l = this._renderData.vDatas[0], f = this.floatsPerVert, k = 0, e = b.length / 2; k < e; k++) {
                    d["default"].set(c, b[2 * k], b[2 * k + 1], 0);
                    d["default"].transformMat4(c, c, a);
                    var h = f * k;
                    l[h] = c.x;
                    l[h + 1] = c.y;
                    l[h + 2] = c.z
                }
            }
        });
        q.exports = m["default"]
    }, {
        "../../../../../value-types/vec3": 335,
        "../../../../assembler-3d": 254,
        "../2d/mesh": 281
    }],
    288: [function(g, q, m) {
        function h(a, c) {
            a.prototype =
                Object.create(c.prototype);
            a.prototype.constructor = a;
            e(a, c)
        }

        function e(a, c) {
            e = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(a, b) {
                a.__proto__ = b;
                return a
            };
            return e(a, c)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var d = function(a) {
                return a && a.__esModule ? a : {
                    default: a
                }
            }(g("../../../../../value-types/vec3")),
            k = g("../../../../assembler-3d");
        g = g("../2d/radial-filled");
        var c = new d["default"],
            a = new d["default"];
        g = function(a) {
            function b() {
                return a.apply(this, arguments) || this
            }
            h(b, a);
            return b
        }(g);
        m["default"] =
            g;
        cc.js.mixin(g.prototype, k, {
            updateWorldVerts: function(b) {
                b = b.node._worldMatrix;
                for (var l = this._local, f = this._renderData.vDatas[0], k = this.floatsPerVert, e = 0; e < f.length; e += k) d["default"].set(c, l[e], l[e + 1], 0), d["default"].transformMat4(a, c, b), f[e] = a.x, f[e + 1] = a.y, f[e + 2] = a.z
            }
        });
        q.exports = m["default"]
    }, {
        "../../../../../value-types/vec3": 335,
        "../../../../assembler-3d": 254,
        "../2d/radial-filled": 282
    }],
    289: [function(g, q, m) {
        function h(d, c) {
            d.prototype = Object.create(c.prototype);
            d.prototype.constructor = d;
            e(d,
                c)
        }

        function e(d, c) {
            e = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(a, b) {
                a.__proto__ = b;
                return a
            };
            return e(d, c)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var d = g("../../../../assembler-3d");
        g = function(d) {
            function c() {
                return d.apply(this, arguments) || this
            }
            h(c, d);
            return c
        }(g("../2d/simple"));
        m["default"] = g;
        cc.js.mixin(g.prototype, d);
        q.exports = m["default"]
    }, {
        "../../../../assembler-3d": 254,
        "../2d/simple": 283
    }],
    290: [function(g, q, m) {
        function h(a, c) {
            a.prototype = Object.create(c.prototype);
            a.prototype.constructor =
                a;
            e(a, c)
        }

        function e(a, c) {
            e = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(a, b) {
                a.__proto__ = b;
                return a
            };
            return e(a, c)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var d = function(a) {
                return a && a.__esModule ? a : {
                    default: a
                }
            }(g("../../../../../value-types/vec3")),
            k = g("../../../../assembler-3d");
        g = g("../2d/sliced");
        var c = new d["default"],
            a = new d["default"];
        g = function(a) {
            function b() {
                return a.apply(this, arguments) || this
            }
            h(b, a);
            return b
        }(g);
        m["default"] = g;
        cc.js.mixin(g.prototype, k, {
            updateWorldVerts: function(b) {
                b =
                    b.node._worldMatrix;
                for (var l = this._local, f = this._renderData.vDatas[0], k = this.floatsPerVert, e = 0; 4 > e; ++e)
                    for (var h = l[2 * e + 1], g = 0; 4 > g; ++g) {
                        d["default"].set(c, l[2 * g], h, 0);
                        d["default"].transformMat4(a, c, b);
                        var t = (4 * e + g) * k;
                        f[t] = a.x;
                        f[t + 1] = a.y;
                        f[t + 2] = a.z
                    }
            }
        });
        q.exports = m["default"]
    }, {
        "../../../../../value-types/vec3": 335,
        "../../../../assembler-3d": 254,
        "../2d/sliced": 284
    }],
    291: [function(g, q, m) {
        function h(a, c) {
            a.prototype = Object.create(c.prototype);
            a.prototype.constructor = a;
            e(a, c)
        }

        function e(a, c) {
            e = Object.setPrototypeOf ?
                Object.setPrototypeOf.bind() : function(a, b) {
                    a.__proto__ = b;
                    return a
                };
            return e(a, c)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var d = function(a) {
                return a && a.__esModule ? a : {
                    default: a
                }
            }(g("../../../../../value-types/vec3")),
            k = g("../../../../assembler-3d");
        g = g("../2d/tiled");
        for (var c = [], a = 0; 4 > a; a++) c.push(new d["default"]);
        g = function(a) {
            function b() {
                return a.apply(this, arguments) || this
            }
            h(b, a);
            return b
        }(g);
        m["default"] = g;
        cc.js.mixin(g.prototype, k, {
            updateWorldVerts: function(a) {
                var b = this._local,
                    f = b.x;
                b = b.y;
                var k =
                    this._renderData.vDatas[0],
                    e = this.col;
                a = a.node._worldMatrix;
                for (var h, g, t, x, z = 0, m = 0, w = this.row; m < w; ++m) {
                    t = b[m];
                    x = b[m + 1];
                    for (var A = 0, B = e; A < B; ++A) {
                        h = f[A];
                        g = f[A + 1];
                        d["default"].set(c[0], h, t, 0);
                        d["default"].set(c[1], g, t, 0);
                        d["default"].set(c[2], h, x, 0);
                        d["default"].set(c[3], g, x, 0);
                        for (h = 0; 4 > h; h++) {
                            g = c[h];
                            d["default"].transformMat4(g, g, a);
                            var y = 6 * h;
                            k[z + y] = g.x;
                            k[z + y + 1] = g.y;
                            k[z + y + 2] = g.z
                        }
                        z += 24
                    }
                }
            }
        });
        q.exports = m["default"]
    }, {
        "../../../../../value-types/vec3": 335,
        "../../../../assembler-3d": 254,
        "../2d/tiled": 285
    }],
    292: [function(g, q, m) {
        function h(a) {
            return a && a.__esModule ? a : {
                default: a
            }
        }
        q = h(g("../../../assembler"));
        var e = g("../../../../components/CCSprite"),
            d = h(g("./2d/simple")),
            k = h(g("./2d/sliced")),
            c = h(g("./2d/tiled")),
            a = h(g("./2d/radial-filled")),
            b = h(g("./2d/bar-filled")),
            l = h(g("./2d/mesh")),
            f = h(g("./3d/simple")),
            n = h(g("./3d/sliced")),
            u = h(g("./3d/tiled")),
            v = h(g("./3d/radial-filled")),
            p = h(g("./3d/bar-filled")),
            t = h(g("./3d/mesh"));
        q["default"].register(cc.Sprite, {
            getConstructor: function(h) {
                var g = h.node.is3DNode,
                    x = g ? f["default"] : d["default"];
                switch (h.type) {
                    case e.Type.SLICED:
                        x = g ? n["default"] : k["default"];
                        break;
                    case e.Type.TILED:
                        x = g ? u["default"] : c["default"];
                        break;
                    case e.Type.FILLED:
                        x = h._fillType === e.FillType.RADIAL ? g ? v["default"] : a["default"] : g ? p["default"] : b["default"];
                        break;
                    case e.Type.MESH:
                        x = g ? t["default"] : l["default"]
                }
                return x
            },
            Simple: d["default"],
            Sliced: k["default"],
            Tiled: c["default"],
            RadialFilled: a["default"],
            BarFilled: b["default"],
            Mesh: l["default"],
            Simple3D: f["default"],
            Sliced3D: n["default"],
            Tiled3D: u["default"],
            RadialFilled3D: v["default"],
            BarFilled3D: p["default"],
            Mesh3D: t["default"]
        })
    }, {
        "../../../../components/CCSprite": 155,
        "../../../assembler": 256,
        "./2d/bar-filled": 280,
        "./2d/mesh": 281,
        "./2d/radial-filled": 282,
        "./2d/simple": 283,
        "./2d/sliced": 284,
        "./2d/tiled": 285,
        "./3d/bar-filled": 286,
        "./3d/mesh": 287,
        "./3d/radial-filled": 288,
        "./3d/simple": 289,
        "./3d/sliced": 290,
        "./3d/tiled": 291
    }],
    293: [function(g, q, m) {
        m.__esModule = !0;
        m["default"] = void 0;
        g = function() {
            function h(d, k, c, a, b) {
                this._handler = d;
                this._index = k;
                this._vfmt =
                    b;
                this._verticesBytes = b._bytes;
                this._initVerticesCount = c;
                this._initIndicesCount = a;
                this.reset()
            }
            var e = h.prototype;
            e._reallocVData = function(d, k) {
                this.vData = new Float32Array(d);
                this.uintVData = new Uint32Array(this.vData.buffer);
                k && this.vData.set(k);
                this._handler.updateMesh(this._index, this.vData, this.iData)
            };
            e._reallocIData = function(d, k) {
                this.iData = new Uint16Array(d);
                k && this.iData.set(k);
                this._handler.updateMesh(this._index, this.vData, this.iData)
            };
            e.reserve = function(d, k) {
                var c = d * this._verticesBytes >>
                    2,
                    a = this.vData.length;
                d = !1;
                if (c > a) {
                    for (; a < c;) a *= 2;
                    this._reallocVData(a, this.vData);
                    d = !0
                }
                c = this.iData.length;
                if (k > c) {
                    for (; c < k;) c *= 2;
                    this._reallocIData(k, this.iData);
                    d = !0
                }
                return d
            };
            e.used = function(d, k) {
                this.usedVertices = d;
                this.usedIndices = k;
                this.usedVerticesFloats = d * this._verticesBytes >> 2;
                this._handler.updateMeshRange(d, k)
            };
            e.reset = function() {
                this._reallocVData(this._initVerticesCount * this._verticesBytes >> 2);
                this._reallocIData(this._initIndicesCount);
                this.usedIndices = this.usedVerticesFloats = this.usedVertices =
                    0
            };
            return h
        }();
        m["default"] = g;
        cc.FlexBuffer = g;
        q.exports = m["default"]
    }, {}],
    294: [function(g, q, m) {
        var h = function(d) {
            return d && d.__esModule ? d : {
                default: d
            }
        }(g("../../../renderer/gfx"));
        if (cc.sys.platform === cc.sys.WECHAT_GAME) {
            var e;
            g = (cc.sys.os === cc.sys.OS_IOS || cc.sys.os === cc.sys.OS_OSX) && (null == (e = GameGlobal) ? void 0 : e.isIOSHighPerformanceMode) && /(OS 1[4-9])|(Version\/1[4-9])/.test(window.navigator.userAgent)
        } else g = (cc.sys.os === cc.sys.OS_IOS || cc.sys.os === cc.sys.OS_OSX) && cc.sys.isBrowser && /(OS 1[4-9])|(Version\/1[4-9])/.test(window.navigator.userAgent);
        e = cc.Class({
            name: "cc.MeshBuffer",
            ctor: function(d, k) {
                this.init(d, k)
            },
            init: function(d, k) {
                this.indiceStart = this.vertexOffset = this.indiceOffset = this.byteOffset = 0;
                this._dirty = !1;
                this._vertexFormat = k;
                this._vertexBytes = this._vertexFormat._bytes;
                this._arrOffset = 0;
                this._vbArr = [];
                this._vb = new h["default"].VertexBuffer(d._device, k, h["default"].USAGE_DYNAMIC, new ArrayBuffer, 0);
                this._vbArr[0] = this._vb;
                this._ibArr = [];
                this._ib = new h["default"].IndexBuffer(d._device, h["default"].INDEX_FMT_UINT16, h["default"].USAGE_STATIC,
                    new ArrayBuffer, 0);
                this._ibArr[0] = this._ib;
                this._iData = this._uintVData = this._vData = null;
                this._batcher = d;
                this._initVDataCount = 256 * k._bytes;
                this._initIDataCount = 1536;
                this._offsetInfo = {
                    byteOffset: 0,
                    vertexOffset: 0,
                    indiceOffset: 0
                };
                this._reallocBuffer()
            },
            uploadData: function() {
                if (0 !== this.byteOffset && this._dirty) {
                    var d = new Float32Array(this._vData.buffer, 0, this.byteOffset >> 2),
                        k = new Uint16Array(this._iData.buffer, 0, this.indiceOffset);
                    this._vb.update(0, d);
                    this._ib.update(0, k);
                    this._dirty = !1
                }
            },
            switchBuffer: function() {
                var d =
                    ++this._arrOffset;
                this.indiceStart = this.indiceOffset = this.vertexOffset = this.byteOffset = 0;
                d < this._vbArr.length ? (this._vb = this._vbArr[d], this._ib = this._ibArr[d]) : (this._vb = new h["default"].VertexBuffer(this._batcher._device, this._vertexFormat, h["default"].USAGE_DYNAMIC, new ArrayBuffer, 0), this._vbArr[d] = this._vb, this._ib = new h["default"].IndexBuffer(this._batcher._device, h["default"].INDEX_FMT_UINT16, h["default"].USAGE_STATIC, new ArrayBuffer, 0), this._ibArr[d] = this._ib)
            },
            checkAndSwitchBuffer: function(d) {
                65535 <
                    this.vertexOffset + d && (this.uploadData(), this._batcher._flush(), this.switchBuffer())
            },
            requestStatic: function(d, k) {
                this.checkAndSwitchBuffer(d);
                var c = this.byteOffset + d * this._vertexBytes,
                    a = this.indiceOffset + k,
                    b = this._vData.byteLength,
                    l = this._iData.length;
                if (c > b || a > l) {
                    for (; b < c || l < a;) this._initVDataCount *= 2, this._initIDataCount *= 2, b = 4 * this._initVDataCount, l = this._initIDataCount;
                    this._reallocBuffer()
                }
                this._updateOffset(d, k, c)
            },
            _updateOffset: function(d, k, c) {
                var a = this._offsetInfo;
                a.vertexOffset = this.vertexOffset;
                this.vertexOffset += d;
                a.indiceOffset = this.indiceOffset;
                this.indiceOffset += k;
                a.byteOffset = this.byteOffset;
                this.byteOffset = c;
                this._dirty = !0
            },
            request: function(d, k) {
                this._batcher._buffer !== this && (this._batcher._flush(), this._batcher._buffer = this);
                this.requestStatic(d, k);
                return this._offsetInfo
            },
            _reallocBuffer: function() {
                this._reallocVData(!0);
                this._reallocIData(!0)
            },
            _reallocVData: function(d) {
                var k;
                this._vData && (k = new Uint8Array(this._vData.buffer));
                this._vData = new Float32Array(this._initVDataCount);
                this._uintVData =
                    new Uint32Array(this._vData.buffer);
                var c = new Uint8Array(this._uintVData.buffer);
                if (k && d) {
                    d = 0;
                    for (var a = k.length; d < a; d++) c[d] = k[d]
                }
            },
            _reallocIData: function(d) {
                var k = this._iData;
                this._iData = new Uint16Array(this._initIDataCount);
                if (k && d) {
                    d = this._iData;
                    for (var c = 0, a = k.length; c < a; c++) d[c] = k[c]
                }
            },
            reset: function() {
                this._arrOffset = 0;
                this._vb = this._vbArr[0];
                this._ib = this._ibArr[0];
                this.indiceStart = this.vertexOffset = this.indiceOffset = this.byteOffset = 0;
                this._dirty = !1
            },
            destroy: function() {
                this.reset();
                for (var d =
                        0; d < this._vbArr.length; d++) this._vbArr[d].destroy();
                this._vbArr = null;
                for (d = 0; d < this._ibArr.length; d++) this._ibArr[d].destroy();
                this._vb = this._ib = this._ibArr = null
            },
            forwardIndiceStartToOffset: function() {
                this.indiceStart = this.indiceOffset
            }
        });
        g && (e.prototype.checkAndSwitchBuffer = function(d) {
            65535 < this.vertexOffset + d && (this.uploadData(), this._batcher._flush())
        }, e.prototype.forwardIndiceStartToOffset = function() {
            this.uploadData();
            this.switchBuffer()
        });
        cc.MeshBuffer = q.exports = e
    }, {
        "../../../renderer/gfx": 358
    }],
    295: [function(g, q, m) {
        function h(a) {
            return a && a.__esModule ? a : {
                default: a
            }
        }
        var e = h(g("../../../renderer/core/input-assembler")),
            d = h(g("../../../renderer/memop/recycle-pool")),
            k = h(g("../../../renderer/scene/model"));
        m = g("./vertex-format");
        var c = m.vfmtPosUvColor,
            a = m.vfmt3D,
            b = g("./quad-buffer"),
            l = g("./mesh-buffer"),
            f = g("./spine-buffer");
        m = g("../../assets/material/CCMaterial");
        new(g("../../platform/id-generater"))("VertextFormat");
        var n = {},
            u = new m,
            v = new e["default"];
        v._count = 0;
        g = function(b, f) {
            this._renderScene =
                f;
            this._device = b;
            this.walking = !1;
            this.material = u;
            this.cullingMask = 1;
            this._iaPool = new d["default"](function() {
                return new e["default"]
            }, 16);
            this._modelPool = new d["default"](function() {
                return new k["default"]
            }, 16);
            this._quadBuffer = this.getBuffer("quad", c);
            this._meshBuffer = this.getBuffer("mesh", c);
            this._quadBuffer3D = this.getBuffer("quad", a);
            this._meshBuffer3D = this.getBuffer("mesh", a);
            this._buffer = this._meshBuffer;
            this._batchedModels = [];
            this._dummyNode = new cc.Node;
            this._sortKey = 0;
            this.node = this._dummyNode;
            this.parentOpacity = 1;
            this.worldMatDirty = this.parentOpacityDirty = 0
        };
        g.prototype = {
            constructor: g,
            reset: function() {
                this._iaPool.reset();
                for (var a = this._renderScene, b = this._batchedModels, c = 0; c < b.length; ++c) b[c].setInputAssembler(null), b[c].setEffect(null), a.removeModel(b[c]);
                this._modelPool.reset();
                this._sortKey = b.length = 0;
                for (var d in n) n[d].reset();
                this._buffer = this._meshBuffer;
                this.node = this._dummyNode;
                this.material = u;
                this.parentOpacity = this.cullingMask = 1;
                this.worldMatDirty = this.parentOpacityDirty =
                    0
            },
            _flushMaterial: function(a) {
                if (a && (this.material = a, a = a.effect)) {
                    var b = this._modelPool.add();
                    this._batchedModels.push(b);
                    b.sortKey = this._sortKey++;
                    b._cullingMask = this.cullingMask;
                    b.setNode(this.node);
                    b.setEffect(a, null);
                    b.setInputAssembler(v);
                    this._renderScene.addModel(b)
                }
            },
            _flush: function() {
                var a = this.material,
                    b = this._buffer,
                    c = b.indiceOffset - b.indiceStart;
                if (this.walking && a && !(0 >= c) && (a = a.effect)) {
                    var d = this._iaPool.add();
                    d._vertexBuffer = b._vb;
                    d._indexBuffer = b._ib;
                    d._start = b.indiceStart;
                    d._count =
                        c;
                    c = this._modelPool.add();
                    this._batchedModels.push(c);
                    c.sortKey = this._sortKey++;
                    c._cullingMask = this.cullingMask;
                    c.setNode(this.node);
                    c.setEffect(a);
                    c.setInputAssembler(d);
                    this._renderScene.addModel(c);
                    b.forwardIndiceStartToOffset()
                }
            },
            _flushIA: function(a) {
                if (a) {
                    var b = this.material.effect;
                    if (b) {
                        var c = this._modelPool.add();
                        this._batchedModels.push(c);
                        c.sortKey = this._sortKey++;
                        c._cullingMask = this.cullingMask;
                        c.setNode(this.node);
                        c.setEffect(b);
                        c.setInputAssembler(a);
                        this._renderScene.addModel(c)
                    }
                }
            },
            terminate: function() {
                cc.dynamicAtlasManager &&
                    cc.dynamicAtlasManager.enabled && cc.dynamicAtlasManager.update();
                this._flush();
                for (var a in n) n[a].uploadData();
                this.walking = !1
            },
            getBuffer: function(a, c) {
                var d = a + c.getHash(),
                    k = n[d];
                if (!k) {
                    if ("mesh" === a) k = new l(this, c);
                    else if ("quad" === a) k = new b(this, c);
                    else {
                        if ("spine" !== a) return cc.error("Not support buffer type [" + a + "]"), null;
                        k = new f(this, c)
                    }
                    n[d] = k
                }
                return k
            }
        };
        q.exports = g
    }, {
        "../../../renderer/core/input-assembler": 348,
        "../../../renderer/memop/recycle-pool": 373,
        "../../../renderer/scene/model": 380,
        "../../assets/material/CCMaterial": 113,
        "../../platform/id-generater": 244,
        "./mesh-buffer": 294,
        "./quad-buffer": 296,
        "./spine-buffer": 298,
        "./vertex-format": 299
    }],
    296: [function(g, q, m) {
        g = g("./mesh-buffer");
        g = cc.Class({
            name: "cc.QuadBuffer",
            extends: g,
            _fillQuadBuffer: function() {
                for (var h = this._initIDataCount / 6, e = this._iData, d = 0, k = 0; d < h; d++) {
                    var c = 4 * d;
                    e[k++] = c;
                    e[k++] = c + 1;
                    e[k++] = c + 2;
                    e[k++] = c + 1;
                    e[k++] = c + 3;
                    e[k++] = c + 2
                }
                h = new Uint16Array(this._iData.buffer, 0, 6 * h);
                this._ib.update(0, h)
            },
            uploadData: function() {
                if (0 !== this.byteOffset && this._dirty) {
                    var h = new Float32Array(this._vData.buffer,
                        0, this.byteOffset >> 2);
                    this._vb.update(0, h);
                    this._dirty = !1
                }
            },
            switchBuffer: function() {
                this._super();
                var h = new Uint16Array(this._iData.buffer, 0, this._initIDataCount);
                this._ib.update(0, h)
            },
            _reallocBuffer: function() {
                this._reallocVData(!0);
                this._reallocIData();
                this._fillQuadBuffer()
            }
        });
        cc.QuadBuffer = q.exports = g
    }, {
        "./mesh-buffer": 294
    }],
    297: [function(g, q, m) {
        function h() {
            this.vDatas = [];
            this.uintVDatas = [];
            this.iDatas = [];
            this.meshCount = 0;
            this._flexBuffer = this._infos = null
        }
        m.__esModule = !0;
        m["default"] = h;
        var e =
            function(d) {
                return d && d.__esModule ? d : {
                    default: d
                }
            }(g("./flex-buffer")),
            d = g("./vertex-format");
        cc.js.mixin(h.prototype, {
            init: function(d) {},
            clear: function() {
                this.vDatas.length = 0;
                this.iDatas.length = 0;
                this.meshCount = this.uintVDatas.length = 0;
                this._infos = null;
                this._flexBuffer && this._flexBuffer.reset()
            },
            updateMesh: function(d, c, a) {
                this.vDatas[d] = c;
                this.uintVDatas[d] = new Uint32Array(c.buffer, 0, c.length);
                this.iDatas[d] = a;
                this.meshCount = this.vDatas.length
            },
            updateMeshRange: function(d, c) {},
            createData: function(d,
                c, a) {
                c = new Float32Array(c);
                a = new Uint16Array(a);
                this.updateMesh(d, c, a)
            },
            createQuadData: function(d, c, a) {
                this.createData(d, c, a);
                this.initQuadIndices(this.iDatas[d])
            },
            createFlexData: function(k, c, a, b) {
                b = b || d.vfmtPosUvColor;
                this._flexBuffer = new e["default"](this, k, c, a, b)
            },
            initQuadIndices: function(d) {
                for (var c = d.length / 6, a = 0, b = 0; a < c; a++) {
                    var l = 4 * a;
                    d[b++] = l;
                    d[b++] = l + 1;
                    d[b++] = l + 2;
                    d[b++] = l + 1;
                    d[b++] = l + 3;
                    d[b++] = l + 2
                }
            }
        });
        cc.RenderData = h;
        q.exports = m["default"]
    }, {
        "./flex-buffer": 293,
        "./vertex-format": 299
    }],
    298: [function(g,
        q, m) {
        g = cc.Class({
            name: "cc.SpineBuffer",
            extends: g("./mesh-buffer"),
            requestStatic: function(h, e) {
                this.checkAndSwitchBuffer(h);
                h = this.byteOffset + h * this._vertexBytes;
                e = this.indiceOffset + e;
                var d = this._vData.byteLength,
                    k = this._iData.length;
                if (h > d || e > k) {
                    for (; d < h || k < e;) this._initVDataCount *= 2, this._initIDataCount *= 2, d = 4 * this._initVDataCount, k = this._initIDataCount;
                    this._reallocBuffer()
                }
                h = this._offsetInfo;
                h.vertexOffset = this.vertexOffset;
                h.indiceOffset = this.indiceOffset;
                h.byteOffset = this.byteOffset
            },
            adjust: function(h,
                e) {
                this.vertexOffset += h;
                this.indiceOffset += e;
                this.byteOffset += h * this._vertexBytes;
                this._dirty = !0
            }
        });
        cc.SpineBuffer = q.exports = g
    }, {
        "./mesh-buffer": 294
    }],
    299: [function(g, q, m) {
        g = (g = g("../../../renderer/gfx")) && g.__esModule ? g : {
            default: g
        };
        m = new g["default"].VertexFormat([{
            name: g["default"].ATTR_POSITION,
            type: g["default"].ATTR_TYPE_FLOAT32,
            num: 3
        }, {
            name: g["default"].ATTR_UV0,
            type: g["default"].ATTR_TYPE_FLOAT32,
            num: 2
        }, {
            name: g["default"].ATTR_COLOR,
            type: g["default"].ATTR_TYPE_UINT8,
            num: 4,
            normalize: !0
        }]);
        m.name =
            "vfmt3D";
        g["default"].VertexFormat.XYZ_UV_Color = m;
        var h = new g["default"].VertexFormat([{
            name: g["default"].ATTR_POSITION,
            type: g["default"].ATTR_TYPE_FLOAT32,
            num: 2
        }, {
            name: g["default"].ATTR_UV0,
            type: g["default"].ATTR_TYPE_FLOAT32,
            num: 2
        }, {
            name: g["default"].ATTR_COLOR,
            type: g["default"].ATTR_TYPE_UINT8,
            num: 4,
            normalize: !0
        }]);
        h.name = "vfmtPosUvColor";
        g["default"].VertexFormat.XY_UV_Color = h;
        var e = new g["default"].VertexFormat([{
            name: g["default"].ATTR_POSITION,
            type: g["default"].ATTR_TYPE_FLOAT32,
            num: 2
        }, {
            name: g["default"].ATTR_UV0,
            type: g["default"].ATTR_TYPE_FLOAT32,
            num: 2
        }, {
            name: g["default"].ATTR_COLOR,
            type: g["default"].ATTR_TYPE_UINT8,
            num: 4,
            normalize: !0
        }, {
            name: g["default"].ATTR_COLOR0,
            type: g["default"].ATTR_TYPE_UINT8,
            num: 4,
            normalize: !0
        }]);
        e.name = "vfmtPosUvTwoColor";
        g["default"].VertexFormat.XY_UV_Two_Color = e;
        var d = new g["default"].VertexFormat([{
            name: g["default"].ATTR_POSITION,
            type: g["default"].ATTR_TYPE_FLOAT32,
            num: 2
        }, {
            name: g["default"].ATTR_UV0,
            type: g["default"].ATTR_TYPE_FLOAT32,
            num: 2
        }]);
        d.name = "vfmtPosUv";
        g["default"].VertexFormat.XY_UV =
            d;
        var k = new g["default"].VertexFormat([{
            name: g["default"].ATTR_POSITION,
            type: g["default"].ATTR_TYPE_FLOAT32,
            num: 2
        }, {
            name: g["default"].ATTR_COLOR,
            type: g["default"].ATTR_TYPE_UINT8,
            num: 4,
            normalize: !0
        }]);
        k.name = "vfmtPosColor";
        g["default"].VertexFormat.XY_Color = k;
        var c = new g["default"].VertexFormat([{
            name: g["default"].ATTR_POSITION,
            type: g["default"].ATTR_TYPE_FLOAT32,
            num: 2
        }]);
        c.name = "vfmtPos";
        g["default"].VertexFormat.XY = c;
        q.exports = {
            vfmt3D: m,
            vfmtPosUvColor: h,
            vfmtPosUvTwoColor: e,
            vfmtPosUv: d,
            vfmtPosColor: k,
            vfmtPos: c
        }
    }, {
        "../../../renderer/gfx": 358
    }],
    300: [function(g, q, m) {
        g("../platform/CCSys");
        var h = /(\.[^\.\/\?\\]*)(\?.*)?$/,
            e = /((.*)(\/|\\|\\\\))?(.*?\..*$)?/,
            d = /[^\.\/]+\/\.\.\//;
        cc.path = {
            join: function() {
                for (var d = arguments.length, c = "", a = 0; a < d; a++) c = (c + ("" === c ? "" : "/") + arguments[a]).replace(/(\/|\\\\)$/, "");
                return c
            },
            extname: function(d) {
                return (d = h.exec(d)) ? d[1] : ""
            },
            mainFileName: function(d) {
                if (d) {
                    var c = d.lastIndexOf(".");
                    if (-1 !== c) return d.substring(0, c)
                }
                return d
            },
            basename: function(d, c) {
                var a = d.indexOf("?");
                0 < a && (d = d.substring(0, a));
                a = /(\/|\\)([^\/\\]+)$/g.exec(d.replace(/(\/|\\)$/, ""));
                if (!a) return d;
                a = a[2];
                return c && d.substring(d.length - c.length).toLowerCase() === c.toLowerCase() ? a.substring(0, a.length - c.length) : a
            },
            dirname: function(d) {
                return (d = e.exec(d)) ? d[2] : ""
            },
            changeExtname: function(d, c) {
                c = c || "";
                var a = d.indexOf("?"),
                    b = "";
                0 < a && (b = d.substring(a), d = d.substring(0, a));
                a = d.lastIndexOf(".");
                return 0 > a ? d + c + b : d.substring(0, a) + c + b
            },
            changeBasename: function(d, c, a) {
                if (0 === c.indexOf(".")) return this.changeExtname(d,
                    c);
                var b = d.indexOf("?"),
                    l = "";
                a = a ? this.extname(d) : "";
                0 < b && (l = d.substring(b), d = d.substring(0, b));
                b = d.lastIndexOf("/");
                return d.substring(0, 0 >= b ? 0 : b + 1) + c + a + l
            },
            _normalize: function(k) {
                k = String(k);
                do {
                    var c = k;
                    k = k.replace(d, "")
                } while (c.length !== k.length);
                return k
            },
            sep: cc.sys.os === cc.sys.OS_WINDOWS ? "\\" : "/",
            stripSep: function(d) {
                return d.replace(/[\/\\]$/, "")
            }
        };
        q.exports = cc.path
    }, {
        "../platform/CCSys": 236
    }],
    301: [function(g, q, m) {
        g = function(h, e, d, k, c, a) {
            this.a = h;
            this.b = e;
            this.c = d;
            this.d = k;
            this.tx = c;
            this.ty = a
        };
        g.create = function(h, e, d, k, c, a) {
            return {
                a: h,
                b: e,
                c: d,
                d: k,
                tx: c,
                ty: a
            }
        };
        g.identity = function() {
            return {
                a: 1,
                b: 0,
                c: 0,
                d: 1,
                tx: 0,
                ty: 0
            }
        };
        g.clone = function(h) {
            return {
                a: h.a,
                b: h.b,
                c: h.c,
                d: h.d,
                tx: h.tx,
                ty: h.ty
            }
        };
        g.concat = function(h, e, d) {
            var k = e.a,
                c = e.b,
                a = e.c,
                b = e.d,
                l = e.tx;
            e = e.ty;
            h.a = k * d.a + c * d.c;
            h.b = k * d.b + c * d.d;
            h.c = a * d.a + b * d.c;
            h.d = a * d.b + b * d.d;
            h.tx = l * d.a + e * d.c + d.tx;
            h.ty = l * d.b + e * d.d + d.ty;
            return h
        };
        g.invert = function(h, e) {
            var d = e.a,
                k = e.b,
                c = e.c,
                a = e.d,
                b = 1 / (d * a - k * c),
                l = e.tx;
            e = e.ty;
            h.a = b * a;
            h.b = -b * k;
            h.c = -b * c;
            h.d = b * d;
            h.tx = b * (c * e -
                a * l);
            h.ty = b * (k * l - d * e);
            return h
        };
        g.fromMat4 = function(h, e) {
            e = e.m;
            h.a = e[0];
            h.b = e[1];
            h.c = e[4];
            h.d = e[5];
            h.tx = e[12];
            h.ty = e[13];
            return h
        };
        g.transformVec2 = function(h, e, d, k) {
            if (void 0 === k) {
                k = d;
                var c = e.x;
                e = e.y
            } else c = e, e = d;
            h.x = k.a * c + k.c * e + k.tx;
            h.y = k.b * c + k.d * e + k.ty;
            return h
        };
        g.transformSize = function(h, e, d) {
            h.width = d.a * e.width + d.c * e.height;
            h.height = d.b * e.width + d.d * e.height;
            return h
        };
        g.transformRect = function(h, e, d) {
            var k = e.x,
                c = e.y,
                a = k + e.width,
                b = c + e.height,
                l = d.a * k + d.c * c + d.tx;
            e = d.b * k + d.d * c + d.ty;
            var f = d.a * a + d.c *
                c + d.tx;
            c = d.b * a + d.d * c + d.ty;
            var g = d.a * k + d.c * b + d.tx;
            k = d.b * k + d.d * b + d.ty;
            var u = d.a * a + d.c * b + d.tx;
            a = d.b * a + d.d * b + d.ty;
            d = Math.min(l, f, g, u);
            l = Math.max(l, f, g, u);
            f = Math.min(e, c, k, a);
            e = Math.max(e, c, k, a);
            h.x = d;
            h.y = f;
            h.width = l - d;
            h.height = e - f;
            return h
        };
        g.transformObb = function(h, e, d, k, c, a) {
            var b = c.x,
                l = c.y,
                f = c.width,
                g = c.height;
            c = a.a * b + a.c * l + a.tx;
            b = a.b * b + a.d * l + a.ty;
            l = a.a * f;
            f *= a.b;
            var u = a.c * g;
            a = a.d * g;
            e.x = c;
            e.y = b;
            d.x = l + c;
            d.y = f + b;
            h.x = u + c;
            h.y = a + b;
            k.x = l + u + c;
            k.y = f + a + b
        };
        cc.AffineTransform = q.exports = g
    }, {}],
    302: [function(g,
        q, m) {
        function h(a) {
            return a ? "string" === typeof a ? b.getClassByName(a) : a : (cc.errorID(3804), null)
        }

        function e(a, b) {
            if (b._sealed)
                for (var c = 0; c < a._components.length; ++c) {
                    var d = a._components[c];
                    if (d.constructor === b) return d
                } else
                    for (c = 0; c < a._components.length; ++c)
                        if (d = a._components[c], d instanceof b) return d;
            return null
        }

        function d(a, b, c) {
            if (b._sealed)
                for (var d = 0; d < a._components.length; ++d) {
                    var f = a._components[d];
                    f.constructor === b && c.push(f)
                } else
                    for (d = 0; d < a._components.length; ++d) f = a._components[d], f instanceof
            b && c.push(f)
        }

        function k(a, b) {
            for (var c = 0; c < a.length; ++c) {
                var d = a[c],
                    f = e(d, b);
                if (f || 0 < d._children.length && (f = k(d._children, b))) return f
            }
            return null
        }

        function c(a, b, f) {
            for (var l = 0; l < a.length; ++l) {
                var k = a[l];
                d(k, b, f);
                0 < k._children.length && c(k._children, b, f)
            }
        }
        var a = g("../platform/CCObject").Flags;
        m = g("./misc");
        var b = g("../platform/js"),
            l = g("../platform/id-generater"),
            f = g("../event-manager"),
            n = g("../renderer/render-flow"),
            u = a.Destroying,
            v = a.DontDestroy,
            p = a.Deactivating,
            t = new l("Node");
        g = cc.Class({
            name: "cc._BaseNode",
            extends: cc.Object,
            properties: {
                _parent: null,
                _children: [],
                _active: !0,
                _components: [],
                _prefab: null,
                _persistNode: {
                    get: function() {
                        return 0 < (this._objFlags & v)
                    },
                    set: function(a) {
                        a ? this._objFlags |= v : this._objFlags &= ~v
                    }
                },
                name: {
                    get: function() {
                        return this._name
                    },
                    set: function(a) {
                        !1;
                        this._name = a;
                        !1
                    }
                },
                uuid: {
                    get: function() {
                        return this._id
                    }
                },
                children: {
                    get: function() {
                        return this._children
                    }
                },
                childrenCount: {
                    get: function() {
                        return this._children.length
                    }
                },
                active: {
                    get: function() {
                        return this._active
                    },
                    set: function(a) {
                        a = !!a;
                        if (this._active !== a) {
                            this._active = a;
                            var b = this._parent;
                            b && b._activeInHierarchy && cc.director._nodeActivator.activateNode(this, a)
                        }
                    }
                },
                activeInHierarchy: {
                    get: function() {
                        return this._activeInHierarchy
                    }
                }
            },
            ctor: function(a) {
                this._name = void 0 !== a ? a : "New Node";
                this._activeInHierarchy = !1;
                this._id = t.getNewId();
                cc.director._scheduler && cc.director._scheduler.enableForTarget(this);
                this.__eventTargets = []
            },
            getParent: function() {
                return this._parent
            },
            setParent: function(a) {
                if (this._parent !== a) {
                    !1;
                    var b = this._parent;
                    (!0,
                        b) && b._objFlags & p && cc.errorID(3821);
                    this._parent = a || null;
                    this._onSetParent(a);
                    a && ((!0, a._objFlags & p) && cc.errorID(3821), f._setDirtyForNode(this), a._children.push(this), a.emit && a.emit("child-added", this), a._renderFlag |= n.FLAG_CHILDREN);
                    b ? b._objFlags & u || (a = b._children.indexOf(this), !1, b._children.splice(a, 1), b.emit && b.emit("child-removed", this), this._onHierarchyChanged(b), 0 === b._children.length && (b._renderFlag &= ~n.FLAG_CHILDREN)) : a && this._onHierarchyChanged(null)
                }
            },
            attr: function(a) {
                b.mixin(this, a)
            },
            getChildByUuid: function(a) {
                if (!a) return cc.log("Invalid uuid"), null;
                for (var b = this._children, c = 0, d = b.length; c < d; c++)
                    if (b[c]._id === a) return b[c];
                return null
            },
            getChildByName: function(a) {
                if (!a) return cc.log("Invalid name"), null;
                for (var b = this._children, c = 0, d = b.length; c < d; c++)
                    if (b[c]._name === a) return b[c];
                return null
            },
            addChild: function(a) {
                !1;
                cc.assertID(a, 1606);
                cc.assertID(null === a._parent, 1605);
                a.setParent(this)
            },
            insertChild: function(a, b) {
                a.parent = this;
                a.setSiblingIndex(b)
            },
            getSiblingIndex: function() {
                return this._parent ?
                    this._parent._children.indexOf(this) : 0
            },
            setSiblingIndex: function(a) {
                if (this._parent)
                    if (this._parent._objFlags & p) cc.errorID(3821);
                    else {
                        var b = this._parent._children;
                        a = -1 !== a ? a : b.length - 1;
                        var c = b.indexOf(this);
                        a !== c && (b.splice(c, 1), a < b.length ? b.splice(a, 0, this) : b.push(this), this._onSiblingIndexChanged && this._onSiblingIndexChanged(a))
                    }
            },
            walk: function(a, b) {
                var c = cc._BaseNode,
                    d = 1,
                    f, l, k = c._stacks[c._stackId];
                k || (k = [], c._stacks.push(k));
                c._stackId++;
                k.length = 0;
                k[0] = this;
                var e = null;
                for (l = !1; d;)
                    if (d--, f = k[d])
                        if (!l &&
                            a ? a(f) : l && b && b(f), k[d] = null, l) {
                            if (e === this._parent) break;
                            l = !1;
                            if (h)
                                if (g++, h[g]) k[d] = h[g], d++;
                                else if (e) {
                                k[d] = e;
                                d++;
                                l = !0;
                                if (e._parent) {
                                    var h = e._parent._children;
                                    var g = h.indexOf(e);
                                    e = e._parent
                                } else h = e = null;
                                if (0 > g) break
                            }
                        } else 0 < f._children.length ? (e = f, h = f._children, g = 0, k[d] = h[g], d++) : (k[d] = f, d++, l = !0);
                k.length = 0;
                c._stackId--
            },
            cleanup: function() {},
            removeFromParent: function(a) {
                this._parent && (void 0 === a && (a = !0), this._parent.removeChild(this, a))
            },
            removeChild: function(a, b) {
                -1 < this._children.indexOf(a) &&
                    ((b || void 0 === b) && a.cleanup(), a.parent = null)
            },
            removeAllChildren: function(a) {
                var b = this._children;
                void 0 === a && (a = !0);
                for (var c = b.length - 1; 0 <= c; c--) {
                    var d = b[c];
                    d && (a && d.cleanup(), d.parent = null)
                }
                this._children.length = 0
            },
            isChildOf: function(a) {
                var b = this;
                do {
                    if (b === a) return !0;
                    b = b._parent
                } while (b);
                return !1
            },
            getComponent: function(a) {
                return (a = h(a)) ? e(this, a) : null
            },
            getComponents: function(a) {
                a = h(a);
                var b = [];
                a && d(this, a, b);
                return b
            },
            getComponentInChildren: function(a) {
                return (a = h(a)) ? k(this._children, a) : null
            },
            getComponentsInChildren: function(a) {
                a = h(a);
                var b = [];
                a && (d(this, a, b), c(this._children, a, b));
                return b
            },
            _checkMultipleComp: (!1, !1),
            addComponent: function(a) {
                !1;
                if ("string" === typeof a) {
                    var c = b.getClassByName(a);
                    if (!c) return cc.errorID(3807, a), cc._RFpeek() && cc.errorID(3808, a), null
                } else {
                    if (!a) return cc.errorID(3804), null;
                    c = a
                }
                if ("function" !== typeof c) return cc.errorID(3809), null;
                if (!b.isChildClassOf(c, cc.Component)) return cc.errorID(3810), null;
                !1;
                if ((a = c._requireComponent) && !this.getComponent(a) && !this.addComponent(a)) return null;
                c = new c;
                c.node = this;
                this._components.push(c);
                !1;
                this._activeInHierarchy && cc.director._nodeActivator.activateComp(c);
                return c
            },
            _addComponentAt: !1,
            removeComponent: function(a) {
                a ? (a instanceof cc.Component || (a = this.getComponent(a)), a && a.destroy()) : cc.errorID(3813)
            },
            _getDependComponent: !1,
            _removeComponent: function(a) {
                if (!a) cc.errorID(3814);
                else if (!(this._objFlags & u)) {
                    var b = this._components.indexOf(a); - 1 !== b ? (this._components.splice(b, 1), !1) : a.node !== this && cc.errorID(3815)
                }
            },
            destroy: function() {
                cc.Object.prototype.destroy.call(this) &&
                    (this.active = !1)
            },
            destroyAllChildren: function() {
                for (var a = this._children, b = 0; b < a.length; ++b) a[b].destroy()
            },
            _onSetParent: function(a) {},
            _onPostActivated: function() {},
            _onBatchCreated: function(a) {},
            _onHierarchyChanged: function(a) {
                a = this._parent;
                !this._persistNode || a instanceof cc.Scene || (cc.game.removePersistRootNode(this), !1);
                !1;
                !1;
                a = this._active && !(!a || !a._activeInHierarchy);
                this._activeInHierarchy !== a && cc.director._nodeActivator.activateNode(this, a)
            },
            _instantiate: function(a, b) {
                a || (a = cc.instantiate._clone(this,
                    this));
                !1;
                !1;
                a._parent = null;
                a._onBatchCreated(b);
                return a
            },
            _registerIfAttached: (!1, !1),
            _onPreDestroy: function() {
                var a;
                this._objFlags |= u;
                var b = this._parent,
                    c = b && b._objFlags & u;
                !c && !1;
                var d = this._children;
                var f = 0;
                for (a = d.length; f < a; ++f) d[f]._destroyImmediate();
                f = 0;
                for (a = this._components.length; f < a; ++f) this._components[f]._destroyImmediate();
                d = this.__eventTargets;
                f = 0;
                for (a = d.length; f < a; ++f) {
                    var l = d[f];
                    l && l.targetOff(this)
                }
                d.length = 0;
                this._persistNode && cc.game.removePersistRootNode(this);
                !c && b && (f = b._children.indexOf(this),
                    b._children.splice(f, 1), b.emit && b.emit("child-removed", this));
                return c
            },
            onRestore: !1
        });
        g.idGenerater = t;
        g._stacks = [
            []
        ];
        g._stackId = 0;
        g.prototype._onPreDestroyBase = g.prototype._onPreDestroy;
        !1;
        g.prototype._onHierarchyChangedBase = g.prototype._onHierarchyChanged;
        !1;
        m.propertyDefine(g, ["parent", "name", "children", "childrenCount"], {});
        !1;
        cc._BaseNode = q.exports = g
    }, {
        "../event-manager": 172,
        "../platform/CCObject": 233,
        "../platform/id-generater": 244,
        "../platform/js": 248,
        "../renderer/render-flow": 260,
        "./misc": 310
    }],
    303: [function(g, q, m) {
        q.exports = {
            binarySearchEpsilon: function(h, e) {
                for (var d = 0, k = h.length - 1, c = k >>> 1; d <= k; c = d + k >>> 1) {
                    var a = h[c];
                    if (a > e + 1E-6) k = c - 1;
                    else {
                        if (!(a < e - 1E-6)) return c;
                        d = c + 1
                    }
                }
                return ~d
            }
        }
    }, {}],
    304: [function(g, q, m) {
        var h = g("../components/CCRenderComponent"),
            e = g("../platform/CCMacro").BlendFactor,
            d = g("../../renderer/gfx");
        g = cc.Class({
            properties: {
                _srcBlendFactor: e.SRC_ALPHA,
                _dstBlendFactor: e.ONE_MINUS_SRC_ALPHA,
                srcBlendFactor: {
                    get: function() {
                        return this._srcBlendFactor
                    },
                    set: function(d) {
                        this._srcBlendFactor !==
                            d && (this._srcBlendFactor = d, this._updateBlendFunc(!0), this._onBlendChanged && this._onBlendChanged())
                    },
                    animatable: !1,
                    type: e,
                    tooltip: !1,
                    visible: !0
                },
                dstBlendFactor: {
                    get: function() {
                        return this._dstBlendFactor
                    },
                    set: function(d) {
                        this._dstBlendFactor !== d && (this._dstBlendFactor = d, this._updateBlendFunc(!0))
                    },
                    animatable: !1,
                    type: e,
                    tooltip: !1,
                    visible: !0
                }
            },
            setMaterial: function(d, c) {
                d = h.prototype.setMaterial.call(this, d, c);
                this._srcBlendFactor === e.SRC_ALPHA && this._dstBlendFactor === e.ONE_MINUS_SRC_ALPHA || this._updateMaterialBlendFunc(d);
                return d
            },
            _updateMaterial: function() {
                this._updateBlendFunc()
            },
            _updateBlendFunc: function(d) {
                if (d || this._srcBlendFactor !== e.SRC_ALPHA || this._dstBlendFactor !== e.ONE_MINUS_SRC_ALPHA) {
                    d = this.getMaterials();
                    for (var c = 0; c < d.length; c++) this._updateMaterialBlendFunc(d[c])
                }
            },
            _updateMaterialBlendFunc: function(k) {
                k.setBlend(!0, d.BLEND_FUNC_ADD, this._srcBlendFactor, this._dstBlendFactor, d.BLEND_FUNC_ADD, this._srcBlendFactor, this._dstBlendFactor);
                !1
            }
        });
        q.exports = cc.BlendFunc = g
    }, {
        "../../renderer/gfx": 358,
        "../components/CCRenderComponent": 149,
        "../platform/CCMacro": 232
    }],
    305: [function(g, q, m) {
        var h = g("./misc").BASE64_VALUES,
            e = "0123456789abcdef".split("");
        g = ["", "", "", ""];
        var d = g.concat(g, "-", g, "-", g, "-", g, "-", g, g, g),
            k = d.map(function(c, a) {
                return "-" === c ? NaN : a
            }).filter(isFinite);
        q.exports = function(c) {
            if (22 !== c.length) return c;
            d[0] = c[0];
            d[1] = c[1];
            for (var a = 2, b = 2; 22 > a; a += 2) {
                var l = h[c.charCodeAt(a)],
                    f = h[c.charCodeAt(a + 1)];
                d[k[b++]] = e[l >> 2];
                d[k[b++]] = e[(3 & l) << 2 | f >> 4];
                d[k[b++]] = e[15 & f]
            }
            return d.join("")
        };
        !1
    }, {
        "./misc": 310
    }],
    306: [function(g, q, m) {
        cc.find =
            q.exports = function(h, e) {
                if (null == h) return cc.errorID(3814), null;
                if (!e && (e = cc.director.getScene(), !e)) return !1, null;
                !1;
                var d = "/" !== h[0] ? 0 : 1;
                for (h = h.split("/"); d < h.length; d++) {
                    var k = h[d],
                        c = e._children;
                    e = null;
                    for (var a = 0, b = c.length; a < b; ++a) {
                        var l = c[a];
                        if (l.name === k) {
                            e = l;
                            break
                        }
                    }
                    if (!e) return null
                }
                return e
            }
    }, {}],
    307: [function(g, q, m) {
        var h = function(d) {
                return d && d.__esModule ? d : {
                    default: d
                }
            }(g("../assets/material/material-variant")),
            e = g("../assets/material/CCMaterial");
        g = cc.Class({
            properties: {
                _normalMaterial: null,
                normalMaterial: {
                    get: function() {
                        return this._normalMaterial
                    },
                    set: function(d) {
                        this._normalMaterial = d;
                        this._updateDisabledState && this._updateDisabledState()
                    },
                    type: e,
                    tooltip: !1,
                    animatable: !1
                },
                _grayMaterial: null,
                grayMaterial: {
                    get: function() {
                        return this._grayMaterial
                    },
                    set: function(d) {
                        this._grayMaterial = d;
                        this._updateDisabledState && this._updateDisabledState()
                    },
                    type: e,
                    tooltip: !1,
                    animatable: !1
                }
            },
            _switchGrayMaterial: function(d, k) {
                d ? ((d = this._grayMaterial) || (d = e.getBuiltinMaterial("2d-gray-sprite")), d = this._grayMaterial =
                    h["default"].create(d, k)) : ((d = this._normalMaterial) || (d = e.getBuiltinMaterial("2d-sprite", k)), d = this._normalMaterial = h["default"].create(d, k));
                k.setMaterial(0, d)
            }
        });
        q.exports = g
    }, {
        "../assets/material/CCMaterial": 113,
        "../assets/material/material-variant": 120
    }],
    308: [function(g, q, m) {
        var h = /^(click)(\s)*=|(param)(\s)*=/,
            e = /(\s)*src(\s)*=|(\s)*height(\s)*=|(\s)*width(\s)*=|(\s)*align(\s)*=|(\s)*offset(\s)*=|(\s)*click(\s)*=|(\s)*param(\s)*=/;
        g = function() {
            this._parsedObject = {};
            this._specialSymbolArray = [];
            this._specialSymbolArray.push([/&lt;/g, "<"]);
            this._specialSymbolArray.push([/&gt;/g, ">"]);
            this._specialSymbolArray.push([/&amp;/g, "&"]);
            this._specialSymbolArray.push([/&quot;/g, '"']);
            this._specialSymbolArray.push([/&apos;/g, "'"]);
            this._specialSymbolArray.push([/&nbsp;/g, " "])
        };
        g.prototype = {
            constructor: g,
            parse: function(d) {
                this._resultObjectArray = [];
                if (!d) return this._resultObjectArray;
                this._stack = [];
                for (var k = 0, c = d.length; k < c;) {
                    var a = d.indexOf(">", k),
                        b = -1;
                    0 <= a && (b = d.lastIndexOf("<", a), b < k - 1 && (b = d.indexOf("<",
                        a + 1), a = d.indexOf(">", b + 1)));
                    if (0 > b) this._stack.pop(), this._processResult(d.substring(k)), k = c;
                    else {
                        var l = d.substring(k, b),
                            f = d.substring(b + 1, a);
                        "" === f && (l = d.substring(k, a + 1));
                        this._processResult(l); - 1 === a ? a = b : "/" === d.charAt(b + 1) ? this._stack.pop() : this._addToStack(f);
                        k = a + 1
                    }
                }
                return this._resultObjectArray
            },
            _attributeToObject: function(d) {
                d = d.trim();
                var k = {};
                var c = d.match(/^(color|size)(\s)*=/);
                if (c) {
                    var a = c[0];
                    d = d.substring(a.length).trim();
                    if ("" === d) return k;
                    var b = d.indexOf(" ");
                    switch (a[0]) {
                        case "c":
                            k.color = -1 < b ? d.substring(0, b).trim() : d;
                            break;
                        case "s":
                            k.size = parseInt(d)
                    } - 1 < b && (d = d.substring(b + 1).trim(), d = this._processEventHandler(d), k.event = d);
                    return k
                }
                if ((c = d.match(/^(br(\s)*\/)/)) && 0 < c[0].length && (a = c[0].trim(), a.startsWith("br") && "/" === a[a.length - 1])) return k.isNewLine = !0, this._resultObjectArray.push({
                    text: "",
                    style: {
                        newline: !0
                    }
                }), k;
                if ((c = d.match(/^(img(\s)*src(\s)*=[^>]+\/)/)) && 0 < c[0].length && (a = c[0].trim(), a.startsWith("img") && "/" === a[a.length - 1])) {
                    c = d.match(e);
                    for (var l = !1; c;) {
                        d = d.substring(d.indexOf(c[0]));
                        a = d.substr(0, c[0].length);
                        d = d.substring(a.length).trim();
                        b = d.indexOf(" ");
                        c = -1 < b ? d.substr(0, b) : d;
                        a = a.replace(/[^a-zA-Z]/g, "").trim();
                        a = a.toLocaleLowerCase();
                        d = d.substring(b).trim();
                        c.endsWith("/") && (c = c.slice(0, -1));
                        if ("src" === a) {
                            switch (c.charCodeAt(0)) {
                                case 34:
                                case 39:
                                    l = !0, c = c.slice(1, -1)
                            }
                            k.isImage = !0;
                            k.src = c
                        } else if ("height" === a) k.imageHeight = parseInt(c);
                        else if ("width" === a) k.imageWidth = parseInt(c);
                        else if ("align" === a) {
                            switch (c.charCodeAt(0)) {
                                case 34:
                                case 39:
                                    c = c.slice(1, -1)
                            }
                            k.imageAlign = c.toLocaleLowerCase()
                        } else "offset" ===
                            a ? k.imageOffset = c : "click" === a && (k.event = this._processEventHandler(a + "=" + c));
                        k.event && "param" === a && (k.event.param = c.replace(/^\"|\"$/g, ""));
                        c = d.match(e)
                    }
                    l && k.isImage && this._resultObjectArray.push({
                        text: "",
                        style: k
                    });
                    return {}
                }
                if (c = d.match(/^(outline(\s)*[^>]*)/)) {
                    d = c[0].substring(7).trim();
                    l = {
                        color: "#ffffff",
                        width: 1
                    };
                    if (d) {
                        var f = /(\s)*color(\s)*=|(\s)*width(\s)*=|(\s)*click(\s)*=|(\s)*param(\s)*=/;
                        for (c = d.match(f); c;) d = d.substring(d.indexOf(c[0])), a = d.substr(0, c[0].length), d = d.substring(a.length).trim(),
                            b = d.indexOf(" "), c = -1 < b ? d.substr(0, b) : d, a = a.replace(/[^a-zA-Z]/g, "").trim(), a = a.toLocaleLowerCase(), d = d.substring(b).trim(), "click" === a ? k.event = this._processEventHandler(a + "=" + c) : "color" === a ? l.color = c : "width" === a && (l.width = parseInt(c)), k.event && "param" === a && (k.event.param = c.replace(/^\"|\"$/g, "")), c = d.match(f)
                    }
                    k.outline = l
                }
                if ((c = d.match(/^(on|u|b|i)(\s)*/)) && 0 < c[0].length) {
                    a = c[0];
                    d = d.substring(a.length).trim();
                    switch (a[0]) {
                        case "u":
                            k.underline = !0;
                            break;
                        case "i":
                            k.italic = !0;
                            break;
                        case "b":
                            k.bold = !0
                    }
                    if ("" ===
                        d) return k;
                    d = this._processEventHandler(d);
                    k.event = d
                }
                return k
            },
            _processEventHandler: function(d) {
                for (var k, c = {}, a = d.match(h); a;) {
                    var b = a[0],
                        l = "";
                    a = !1;
                    d = d.substring(b.length).trim();
                    '"' === d.charAt(0) ? (k = d.indexOf('"', 1), -1 < k && (l = d.substring(1, k).trim(), a = !0), k++) : "'" === d.charAt(0) ? (k = d.indexOf("'", 1), -1 < k && (l = d.substring(1, k).trim(), a = !0), k++) : (l = (k = d.match(/(\S)+/)) ? k[0] : "", k = l.length);
                    a && (b = b.substring(0, b.length - 1).trim(), c[b] = l);
                    d = d.substring(k).trim();
                    a = d.match(h)
                }
                return c
            },
            _addToStack: function(d) {
                d =
                    this._attributeToObject(d);
                if (0 !== this._stack.length) {
                    if (d.isNewLine || d.isImage) return;
                    var k = this._stack[this._stack.length - 1],
                        c;
                    for (c in k) d[c] || (d[c] = k[c])
                }
                this._stack.push(d)
            },
            _processResult: function(d) {
                "" !== d && (d = this._escapeSpecialSymbol(d), 0 < this._stack.length ? this._resultObjectArray.push({
                    text: d,
                    style: this._stack[this._stack.length - 1]
                }) : this._resultObjectArray.push({
                    text: d
                }))
            },
            _escapeSpecialSymbol: function(d) {
                for (var k = 0; k < this._specialSymbolArray.length; ++k) d = d.replace(this._specialSymbolArray[k][0],
                    this._specialSymbolArray[k][1]);
                return d
            }
        };
        !1;
        q.exports = g
    }, {}],
    309: [function(g, q, m) {
        g("./CCPath");
        !0;
        g("./profiler/CCProfiler");
        g("./find");
        g("./mutable-forward-iterator")
    }, {
        "./CCPath": 300,
        "./find": 306,
        "./mutable-forward-iterator": 311,
        "./profiler/CCProfiler": 314
    }],
    310: [function(g, q, m) {
        var h = g("../platform/js");
        g = {
            propertyDefine: function(d, k, c) {
                function a(a, b, c, d) {
                    var f = Object.getOwnPropertyDescriptor(a, b);
                    f ? (f.get && (a[c] = f.get), f.set && d && (a[d] = f.set)) : (c = a[c], !1, h.getset(a, b, c, a[d]))
                }
                d = d.prototype;
                for (var b = 0; b < k.length; b++) {
                    var l = k[b];
                    var f = l[0].toUpperCase() + l.slice(1);
                    a(d, l, "get" + f, "set" + f)
                }
                for (l in c) k = c[l], a(d, l, k[0], k[1])
            },
            NextPOT: function(d) {
                --d;
                d |= d >> 1;
                d |= d >> 2;
                d |= d >> 4;
                d |= d >> 8;
                return (d | d >> 16) + 1
            }
        };
        !1;
        g.BUILTIN_CLASSID_RE = /^(?:cc|dragonBones|sp|ccsg)\..+/;
        m = Array(123);
        for (var e = 0; 123 > e; ++e) m[e] = 64;
        for (e = 0; 64 > e; ++e) m["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charCodeAt(e)] = e;
        g.BASE64_VALUES = m;
        g.pushToMap = function(d, k, c, a) {
            var b = d[k];
            b ? Array.isArray(b) ? a ? (b.push(b[0]),
                b[0] = c) : b.push(c) : d[k] = a ? [c, b] : [b, c] : d[k] = c
        };
        g.clampf = function(d, k, c) {
            if (k > c) {
                var a = k;
                k = c;
                c = a
            }
            return d < k ? k : d < c ? d : c
        };
        g.clamp01 = function(d) {
            return 0 > d ? 0 : 1 > d ? d : 1
        };
        g.lerp = function(d, k, c) {
            return d + (k - d) * c
        };
        g.degreesToRadians = function(d) {
            return d * cc.macro.RAD
        };
        g.radiansToDegrees = function(d) {
            return d * cc.macro.DEG
        };
        cc.misc = q.exports = g
    }, {
        "../platform/js": 248
    }],
    311: [function(g, q, m) {
        function h(e) {
            this.i = 0;
            this.array = e
        }
        g = h.prototype;
        g.remove = function(e) {
            e = this.array.indexOf(e);
            0 <= e && this.removeAt(e)
        };
        g.removeAt =
            function(e) {
                this.array.splice(e, 1);
                e <= this.i && --this.i
            };
        g.fastRemove = function(e) {
            e = this.array.indexOf(e);
            0 <= e && this.fastRemoveAt(e)
        };
        g.fastRemoveAt = function(e) {
            var d = this.array;
            d[e] = d[d.length - 1];
            --d.length;
            e <= this.i && --this.i
        };
        g.push = function(e) {
            this.array.push(e)
        };
        q.exports = h
    }, {}],
    312: [function(g, q, m) {
        m.__esModule = !0;
        m["default"] = void 0;
        g = function() {
            function h() {
                this.enabled = !1;
                this.count = 0;
                this.maxSize = 1024
            }
            var e = h.prototype;
            e.get = function() {};
            e.put = function() {};
            e.clear = function() {};
            return h
        }();
        m["default"] = g;
        cc.pool = {};
        g.register = function(h, e) {
            cc.pool[h] = e
        };
        q.exports = m["default"]
    }, {}],
    313: [function(g, q, m) {
        cc._PrefabInfo = cc.Class({
            name: "cc.PrefabInfo",
            properties: {
                root: null,
                asset: null,
                fileId: "",
                sync: !1
            }
        });
        q.exports = {
            syncWithPrefab: function(h) {
                var e = h._prefab;
                if (e.asset) {
                    var d = h._objFlags,
                        k = h._parent,
                        c = h._id,
                        a = h._name,
                        b = h._active,
                        l = h._eulerAngles.x,
                        f = h._eulerAngles.y,
                        g = h._eulerAngles.z,
                        u = h._localZOrder,
                        v = h._trs,
                        p = v[0],
                        t = v[1],
                        x = v[2];
                    cc.game._isCloning = !0;
                    !0;
                    e.asset._doInstantiate(h);
                    cc.game._isCloning = !1;
                    h._objFlags = d;
                    h._parent = k;
                    h._id = c;
                    h._prefab = e;
                    h._name = a;
                    h._active = b;
                    h._localZOrder = u;
                    v = h._trs;
                    v[0] = p;
                    v[1] = t;
                    v[2] = x;
                    h._eulerAngles.x = l;
                    h._eulerAngles.y = f;
                    h._eulerAngles.z = g
                } else !1, cc.errorID(3701, h.name), h._prefab = null
            }
        }
    }, {}],
    314: [function(g, q, m) {
        function h() {
            if (!l || !l.isValid) {
                l = new cc.Node("PROFILER-NODE");
                l.x = l.y = 10;
                l.groupIndex = cc.Node.BuiltinGroupIndex.DEBUG;
                cc.Camera._setupDebugCamera();
                l.zIndex = k.MAX_ZINDEX;
                cc.game.addPersistRootNode(l);
                var a = new cc.Node("LEFT-PANEL");
                a.anchorX = a.anchorY =
                    0;
                var c = a.addComponent(cc.Label);
                c.fontSize = 15;
                c.lineHeight = 15;
                a.parent = l;
                a = new cc.Node("RIGHT-PANEL");
                a.anchorX = 1;
                a.anchorY = 0;
                a.x = 200;
                var d = a.addComponent(cc.Label);
                d.horizontalAlign = cc.Label.HorizontalAlign.RIGHT;
                d.fontSize = 15;
                d.lineHeight = 15;
                a.parent = l;
                cc.sys.platform !== cc.sys.BAIDU_GAME_SUB && cc.sys.platform !== cc.sys.WECHAT_GAME_SUB && (c.cacheMode = cc.Label.CacheMode.CHAR, d.cacheMode = cc.Label.CacheMode.CHAR);
                f = {
                    left: c,
                    right: d
                }
            }
            c = cc.director._lastUpdate;
            b.frame._counter.start(c);
            b.logic._counter.start(c)
        }

        function e() {
            var a = performance.now();
            cc.director.isPaused() ? b.frame._counter.start(a) : b.logic._counter.end(a);
            b.render._counter.start(a)
        }

        function d() {
            var a = performance.now();
            b.render._counter.end(a);
            b.draws._counter.value = cc.renderer.drawCalls;
            b.frame._counter.end(a);
            b.fps._counter.frame(a);
            var c = "",
                d = "",
                l;
            for (l in b) {
                var k = b[l];
                k._counter.sample(a);
                c += k.desc + "\n";
                d += k._counter.human() + "\n"
            }
            f && (f.left.string = c, f.right.string = d)
        }
        var k = g("../../platform/CCMacro"),
            c = g("./perf-counter"),
            a = !1,
            b = null,
            l =
            null,
            f = null;
        cc.profiler = q.exports = {
            isShowingStats: function() {
                return a
            },
            hideStats: function() {
                a && (l && (l.active = !1), cc.director.off(cc.Director.EVENT_BEFORE_UPDATE, h), cc.director.off(cc.Director.EVENT_AFTER_UPDATE, e), cc.director.off(cc.Director.EVENT_AFTER_DRAW, d), a = !1)
            },
            showStats: function() {
                if (!a) {
                    if (!b) {
                        b = {
                            fps: {
                                desc: "Framerate (FPS)",
                                below: 30,
                                average: 500
                            },
                            draws: {
                                desc: "Draw Call"
                            },
                            frame: {
                                desc: "Frame time (ms)",
                                min: 0,
                                max: 50,
                                average: 500
                            },
                            logic: {
                                desc: "Game Logic (ms)",
                                min: 0,
                                max: 50,
                                average: 500,
                                color: "#080"
                            },
                            render: {
                                desc: "Renderer (ms)",
                                min: 0,
                                max: 50,
                                average: 500,
                                color: "#f90"
                            },
                            mode: {
                                desc: cc.game.renderType === cc.game.RENDER_TYPE_WEBGL ? "WebGL" : "Canvas",
                                min: 1
                            }
                        };
                        var f = performance.now(),
                            k;
                        for (k in b) b[k]._counter = new c(k, b[k], f)
                    }
                    l && (l.active = !0);
                    cc.director.on(cc.Director.EVENT_BEFORE_UPDATE, h);
                    cc.director.on(cc.Director.EVENT_AFTER_UPDATE, e);
                    cc.director.on(cc.Director.EVENT_AFTER_DRAW, d);
                    a = !0
                }
            }
        }
    }, {
        "../../platform/CCMacro": 232,
        "./perf-counter": 316
    }],
    315: [function(g, q, m) {
        g = cc.Class({
            name: "cc.Counter",
            ctor: function(h,
                e, d) {
                this._id = h;
                this._opts = e || {};
                this._accumSamples = this._accumValue = this._averageValue = this._total = this._value = 0;
                this._accumStart = d
            },
            properties: {
                value: {
                    get: function() {
                        return this._value
                    },
                    set: function(h) {
                        this._value = h
                    }
                }
            },
            _average: function(h, e) {
                this._opts.average && (this._accumValue += h, ++this._accumSamples, e - this._accumStart >= this._opts.average && (this._averageValue = this._accumValue / this._accumSamples, this._accumValue = 0, this._accumStart = e, this._accumSamples = 0))
            },
            sample: function(h) {
                this._average(this._value,
                    h)
            },
            human: function() {
                return Math.round(100 * (this._opts.average ? this._averageValue : this._value)) / 100
            },
            alarm: function() {
                return this._opts.below && this._value < this._opts.below || this._opts.over && this._value > this._opts.over
            }
        });
        q.exports = g
    }, {}],
    316: [function(g, q, m) {
        g = g("./counter");
        g = cc.Class({
            name: "cc.PerfCounter",
            extends: g,
            ctor: function(h, e, d) {
                this._time = d
            },
            start: function(h) {
                this._time = h
            },
            end: function(h) {
                this._value = h - this._time;
                this._average(this._value)
            },
            tick: function() {
                this.end();
                this.start()
            },
            frame: function(h) {
                var e =
                    h - this._time;
                this._total++;
                e > (this._opts.average || 1E3) && (this._value = 1E3 * this._total / e, this._total = 0, this._time = h, this._average(this._value))
            }
        });
        q.exports = g
    }, {
        "./counter": 315
    }],
    317: [function(g, q, m) {
        function h(d) {
            this.count = 0;
            this.limit = d;
            this.datas = {};
            this.tail = this.head = null
        }
        g = function(d) {
            return d && d.__esModule ? d : {
                default: d
            }
        }(g("../platform/js"));
        !1;
        var e = new g["default"].Pool(2);
        e.get = function() {
            return this._get() || {
                key: null,
                value: null,
                prev: null,
                next: null
            }
        };
        h.prototype.moveToHead = function(d) {
            d.next =
                this.head;
            d.prev = null;
            null !== this.head && (this.head.prev = d);
            this.head = d;
            null === this.tail && (this.tail = d);
            this.count++;
            this.datas[d.key] = d
        };
        h.prototype.put = function(d, c) {
            var a = e.get();
            a.key = d;
            a.value = c;
            this.count >= this.limit && (d = this.tail, delete this.datas[d.key], this.count--, this.tail = d.prev, this.tail.next = null, d.prev = null, d.next = null, e.put(d));
            this.moveToHead(a)
        };
        h.prototype.remove = function(d) {
            null !== d.prev ? d.prev.next = d.next : this.head = d.next;
            null !== d.next ? d.next.prev = d.prev : this.tail = d.prev;
            delete this.datas[d.key];
            this.count--
        };
        h.prototype.get = function(d) {
            return (d = this.datas[d]) ? (this.remove(d), this.moveToHead(d), d.value) : null
        };
        h.prototype.clear = function() {
            this.count = 0;
            this.datas = {};
            this.tail = this.head = null
        };
        h.prototype.has = function(d) {
            return !!this.datas[d]
        };
        h.prototype["delete"] = function(d) {
            this.remove(this.datas[d])
        };
        var d = new h(100);
        cc.textUtils = q.exports = {
            BASELINE_RATIO: .26,
            MIDDLE_RATIO: .37,
            BASELINE_OFFSET: 0,
            label_wordRex: /([a-zA-Z0-9\xc4\xd6\xdc\xe4\xf6\xfc\xdf\xe9\xe8\xe7\xe0\xf9\xea\xe2\xee\xf4\xfb\u0430-\u044f\u0410-\u042f\u0401\u0451]+|\S)/,
            label_symbolRex: /^[!,.:;'}\]%\?>\u3001\u2018\u201c\u300b\uff1f\u3002\uff0c\uff01]/,
            label_lastWordRex: /([a-zA-Z0-9\xc4\xd6\xdc\xe4\xf6\xfc\xdf\xe9\xe8\xe7\xe0\xf9\xea\xe2\xee\xf4\xfb\u0430\xed\xec\xcd\xcc\xef\xc1\xc0\xe1\xe0\xc9\xc8\xd2\xd3\xf2\xf3\u0150\u0151\xd9\xda\u0170\xfa\u0171\xf1\xd1\xe6\xc6\u0153\u0152\xc3\xc2\xe3\xd4\xf5\u011b\u0161\u010d\u0159\u017e\xfd\xe1\xed\xe9\xf3\xfa\u016f\u0165\u010f\u0148\u011a\u0160\u010c\u0158\u017d\xc1\xcd\xc9\xd3\xda\u0164\u017c\u017a\u015b\xf3\u0144\u0142\u0119\u0107\u0105\u017b\u0179\u015a\xd3\u0143\u0141\u0118\u0106\u0104-\u044f\u0410-\u042f\u0401\u0451]+|\S)$/,
            label_lastEnglish: /[a-zA-Z0-9\xc4\xd6\xdc\xe4\xf6\xfc\xdf\xe9\xe8\xe7\xe0\xf9\xea\xe2\xee\xf4\xfb\u0430\xed\xec\xcd\xcc\xef\xc1\xc0\xe1\xe0\xc9\xc8\xd2\xd3\xf2\xf3\u0150\u0151\xd9\xda\u0170\xfa\u0171\xf1\xd1\xe6\xc6\u0153\u0152\xc3\xc2\xe3\xd4\xf5\u011b\u0161\u010d\u0159\u017e\xfd\xe1\xed\xe9\xf3\xfa\u016f\u0165\u010f\u0148\u011a\u0160\u010c\u0158\u017d\xc1\xcd\xc9\xd3\xda\u0164\u017c\u017a\u015b\xf3\u0144\u0142\u0119\u0107\u0105\u017b\u0179\u015a\xd3\u0143\u0141\u0118\u0106\u0104-\u044f\u0410-\u042f\u0401\u0451]+$/,
            label_firstEnglish: /^[a-zA-Z0-9\xc4\xd6\xdc\xe4\xf6\xfc\xdf\xe9\xe8\xe7\xe0\xf9\xea\xe2\xee\xf4\xfb\u0430\xed\xec\xcd\xcc\xef\xc1\xc0\xe1\xe0\xc9\xc8\xd2\xd3\xf2\xf3\u0150\u0151\xd9\xda\u0170\xfa\u0171\xf1\xd1\xe6\xc6\u0153\u0152\xc3\xc2\xe3\xd4\xf5\u011b\u0161\u010d\u0159\u017e\xfd\xe1\xed\xe9\xf3\xfa\u016f\u0165\u010f\u0148\u011a\u0160\u010c\u0158\u017d\xc1\xcd\xc9\xd3\xda\u0164\u017c\u017a\u015b\xf3\u0144\u0142\u0119\u0107\u0105\u017b\u0179\u015a\xd3\u0143\u0141\u0118\u0106\u0104-\u044f\u0410-\u042f\u0401\u0451]/,
            highSurrogateRex: /[\uD800-\uDBFF]/,
            lowSurrogateRex: /[\uDC00-\uDFFF]/,
            label_wrapinspection: !0,
            __CHINESE_REG: /^[\u4E00-\u9FFF\u3400-\u4DFF]+$/,
            __JAPANESE_REG: /[\u3000-\u303F]|[\u3040-\u309F]|[\u30A0-\u30FF]|[\uFF00-\uFFEF]|[\u4E00-\u9FAF]|[\u2605-\u2606]|[\u2190-\u2195]|\u203B/g,
            __KOREAN_REG: /^[\u1100-\u11FF]|[\u3130-\u318F]|[\uA960-\uA97F]|[\uAC00-\uD7AF]|[\uD7B0-\uD7FF]+$/,
            isUnicodeCJK: function(d) {
                return this.__CHINESE_REG.test(d) || this.__JAPANESE_REG.test(d) || this.__KOREAN_REG.test(d)
            },
            isUnicodeSpace: function(d) {
                d =
                    d.charCodeAt(0);
                return 9 <= d && 13 >= d || 32 === d || 133 === d || 160 === d || 5760 === d || 8192 <= d && 8202 >= d || 8232 === d || 8233 === d || 8239 === d || 8287 === d || 12288 === d
            },
            safeMeasureText: function(e, c, a) {
                a = (a || e.font) + "\ud83c\udfae" + c;
                var b = d.get(a);
                if (null !== b) return b;
                e = (e = e.measureText(c)) && e.width || 0;
                d.put(a, e);
                return e
            },
            _safeSubstring: function(d, c, a) {
                var b = c,
                    l = a,
                    f = d[c];
                this.lowSurrogateRex.test(f) && b--;
                void 0 !== a && (a - 1 !== c ? this.highSurrogateRex.test(d[a - 1]) && l-- : this.highSurrogateRex.test(f) && l++);
                return d.substring(b, l)
            },
            fragmentText: function(d, c, a, b) {
                var l = [];
                if (0 === d.length || 0 > a) return l.push(""), l;
                for (; c > a && 1 < d.length;) {
                    for (var f = a / c * d.length | 0, e = this._safeSubstring(d, f), k = c - b(e), h = e, g = 0, t = 0; k > a && 10 > t++;) f *= a / k, f |= 0, e = this._safeSubstring(d, f), k = c - b(e);
                    for (t = 0; k <= a && 10 > t++;) e && (g = (h = this.label_wordRex.exec(e)) ? h[0].length : 1, h = e), f += g, e = this._safeSubstring(d, f), k = c - b(e);
                    f -= g;
                    0 === f ? (f = 1, h = this._safeSubstring(d, 1)) : 1 === f && this.highSurrogateRex.test(d[0]) && (f = 2, h = this._safeSubstring(d, 2));
                    c = this._safeSubstring(d, 0,
                        f);
                    this.label_wrapinspection && this.label_symbolRex.test(h || e) && (t = this.label_lastWordRex.exec(c), f -= t ? t[0].length : 0, 0 === f && (f = 1), h = this._safeSubstring(d, f), c = this._safeSubstring(d, 0, f));
                    this.label_firstEnglish.test(h) && (t = this.label_lastEnglish.exec(c)) && c !== t[0] && (f -= t[0].length, h = this._safeSubstring(d, f), c = this._safeSubstring(d, 0, f));
                    0 === l.length ? l.push(c) : (c = c.trimLeft(), 0 < c.length && l.push(c));
                    d = h || e;
                    c = b(d)
                }
                0 === l.length ? l.push(d) : (d = d.trimLeft(), 0 < d.length && l.push(d));
                return l
            }
        }
    }, {
        "../platform/js": 248
    }],
    318: [function(g, q, m) {
        var h = g("../assets/CCTexture2D");
        q.exports = {
            loadImage: function(e, d, k) {
                cc.assertID(e, 3103);
                var c = cc.assetManager.assets.get(e);
                if (c) {
                    if (c.loaded) return d && d.call(k, null, c), c;
                    c.once("load", function() {
                        d && d.call(k, null, c)
                    }, k);
                    return c
                }
                cc.assetManager.loadRemote(e, function(a, b) {
                    d && d.call(k, a, b)
                })
            },
            cacheImage: function(e, d) {
                if (e && d) {
                    var k = new h;
                    k.initWithElement(d);
                    cc.assetManager.assets.add(e, k);
                    return k
                }
            },
            postLoadTexture: function(e, d) {
                e.loaded ? d && d() : e.nativeUrl ? cc.assetManager.postLoadNative(e,
                    d) : d && d()
            }
        }
    }, {
        "../assets/CCTexture2D": 109
    }],
    319: [function(g, q, m) {
        m = g("./node-unit");
        g = g("./node-mem-pool");
        q.exports = {
            NodeMemPool: new g(m)
        }
    }, {
        "./node-mem-pool": 321,
        "./node-unit": 322
    }],
    320: [function(g, q, m) {
        g = function(h) {
            this._unitClass = h;
            this._pool = [];
            this._findOrder = [];
            !1
        };
        m = g.prototype;
        m._initNative = function() {
            this._nativeMemPool = new renderer.MemPool
        };
        m._buildUnit = function(h) {
            h = new this._unitClass(h, this);
            !1;
            return h
        };
        m._destroyUnit = function(h) {
            this._pool[h] = null;
            for (var e = 0, d = this._findOrder.length; e <
                d; e++) {
                var k = this._findOrder[e];
                if (k && k.unitID == h) {
                    this._findOrder.splice(e, 1);
                    break
                }
            }!1
        };
        m._findUnitID = function() {
            for (var h = 0, e = this._pool; e[h];) h++;
            return h
        };
        m.pop = function() {
            for (var h = null, e = 0, d = this._findOrder, k = this._pool, c = d.length; e < c; e++) {
                var a = d[e];
                if (a && a.hasSpace()) {
                    h = a;
                    break
                }
            }
            h || (e = this._findUnitID(), h = this._buildUnit(e), k[e] = h, d.push(h), e = d.length - 1);
            k = d[0];
            k !== h && (d[0] = h, d[e] = k);
            return h.pop()
        };
        m.push = function(h) {
            var e = this._pool[h.unitID];
            e.push(h.index);
            1 < this._findOrder.length && e.isAllFree() &&
                this._destroyUnit(h.unitID);
            return e
        };
        q.exports = g
    }, {}],
    321: [function(g, q, m) {
        var h = g("./mem-pool"),
            e = function(d) {
                h.call(this, d)
            };
        (function() {
            var d = function() {};
            d.prototype = h.prototype;
            e.prototype = new d
        })();
        g = e.prototype;
        g._initNative = function() {
            this._nativeMemPool = new renderer.NodeMemPool
        };
        g._destroyUnit = function(d) {
            h.prototype._destroyUnit.call(this, d);
            !1
        };
        q.exports = e
    }, {
        "./mem-pool": 320
    }],
    322: [function(g, q, m) {
        var h = g("../../value-types/utils"),
            e = 10 * h.FLOAT_BYTES,
            d = 16 * h.FLOAT_BYTES,
            k = 16 * h.FLOAT_BYTES,
            c = g("./unit-base"),
            a = function(a, l) {
                c.call(this, a, l);
                a = this._contentNum;
                this.trsList = new h.FLOAT_ARRAY_TYPE(10 * a);
                this.localMatList = new h.FLOAT_ARRAY_TYPE(16 * a);
                this.worldMatList = new h.FLOAT_ARRAY_TYPE(16 * a);
                !1;
                for (l = 0; l < a; l++) {
                    var b = this._spacesData[l];
                    b.trs = new h.FLOAT_ARRAY_TYPE(this.trsList.buffer, l * e, 10);
                    b.localMat = new h.FLOAT_ARRAY_TYPE(this.localMatList.buffer, l * d, 16);
                    b.worldMat = new h.FLOAT_ARRAY_TYPE(this.worldMatList.buffer, l * k, 16);
                    !1
                }
            };
        (function() {
            var b = function() {};
            b.prototype = c.prototype;
            a.prototype = new b
        })();
        q.exports = a
    }, {
        "../../value-types/utils": 332,
        "./unit-base": 323
    }],
    323: [function(g, q, m) {
        g = function(h, e, d) {
            d = d || 128;
            this.unitID = h;
            this._memPool = e;
            this._data = new Uint16Array(2);
            this._data[0] = 0;
            this._data[1] = 0;
            this._contentNum = d;
            this._signData = new Uint16Array(2 * this._contentNum);
            this._spacesData = [];
            for (e = 0; e < d; e++) {
                var k = 2 * e;
                this._signData[k + 0] = e + 1;
                this._signData[k + 1] = 0;
                this._spacesData[e] = {
                    index: e,
                    unitID: h
                }
            }
            this._signData[2 * (d - 1)] = 65535
        };
        m = g.prototype;
        m.hasSpace = function() {
            return 65535 !==
                this._data[0]
        };
        m.isAllFree = function() {
            return 0 == this._data[1]
        };
        m.pop = function() {
            var h = this._data[0];
            if (65535 === h) return null;
            var e = 2 * h;
            h = this._spacesData[h];
            this._signData[e + 1] = 1;
            this._data[0] = this._signData[e + 0];
            this._data[1]++;
            return h
        };
        m.push = function(h) {
            var e = 2 * h;
            this._signData[e + 1] = 0;
            this._signData[e + 0] = this._data[0];
            this._data[0] = h;
            this._data[1]--
        };
        m.dump = function() {
            for (var h = 0, e = this._data[0], d = ""; 65535 != e;) h++, d += e + "->", e = this._signData[2 * e + 0];
            e = 0;
            for (var k = "", c = this._contentNum, a = 0; a < c; a++) 1 ==
                this._signData[2 * a + 1] && (e++, k += a + "->");
            c = h + e;
            console.log("unitID:", this.unitID, "spaceNum:", h, "calc using num:", e, "store using num:", this._data[1], "calc total num:", c, "actually total num:", this._contentNum);
            console.log("free info:", d);
            console.log("using info:", k);
            e != this._data[1] && cc.error("using num error", "calc using num:", e, "store using num:", this._data[1]);
            h + e != this._contentNum && cc.error("total num error", "calc total num:", c, "actually total num:", this._contentNum)
        };
        q.exports = g
    }, {}],
    324: [function(g,
        q, m) {
        function h(a) {
            return a && a.__esModule ? a : {
                default: a
            }
        }

        function e(a, b) {
            for (var c = 0; c < b.length; c++) {
                var d = b[c];
                d.enumerable = d.enumerable || !1;
                d.configurable = !0;
                "value" in d && (d.writable = !0);
                Object.defineProperty(a, k(d.key), d)
            }
        }

        function d(a, b, c) {
            b && e(a.prototype, b);
            c && e(a, c);
            Object.defineProperty(a, "prototype", {
                writable: !1
            });
            return a
        }

        function k(a) {
            a: if ("object" === typeof a && null !== a) {
                $jscomp.initSymbol();
                var b = a[Symbol.toPrimitive];
                if (void 0 !== b) {
                    a = b.call(a, "string");
                    if ("object" !== typeof a) break a;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                a = String(a)
            }return "symbol" === typeof a ? a : String(a)
        }

        function c(b, c) {
            b.prototype = Object.create(c.prototype);
            b.prototype.constructor = b;
            a(b, c)
        }

        function a(b, c) {
            a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(a, b) {
                a.__proto__ = b;
                return a
            };
            return a(b, c)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var b = h(g("./value-type")),
            l = h(g("../platform/CCClass")),
            f = h(g("../utils/misc")),
            n = function(a) {
                function b(b, c, d, f) {
                    void 0 === b && (b = 0);
                    void 0 === c && (c = 0);
                    void 0 === d && (d = 0);
                    void 0 === f && (f = 255);
                    var l = a.call(this) ||
                        this;
                    l._val = 0;
                    "object" === typeof b && (c = b.g, d = b.b, f = b.a, b = b.r);
                    l._val = (f << 24 >>> 0) + (d << 16) + (c << 8) + (0 | b);
                    return l
                }
                c(b, a);
                b.copy = function(a, b) {
                    a.r = b.r;
                    a.g = b.g;
                    a.b = b.b;
                    a.a = b.a;
                    return a
                };
                b.clone = function(a) {
                    return new b(a.r, a.g, a.b, a.a)
                };
                b.set = function(a, b, c, d, f) {
                    void 0 === b && (b = 255);
                    void 0 === c && (c = 255);
                    void 0 === d && (d = 255);
                    void 0 === f && (f = 255);
                    a.r = b;
                    a.g = c;
                    a.b = d;
                    a.a = f;
                    return a
                };
                b.fromHex = function(a, b) {
                    a.r = b >> 24 & 255;
                    a.g = b >> 16 & 255;
                    a.b = b >> 8 & 255;
                    a.a = 255 & b;
                    return a
                };
                b.fromHEX = function(a, b) {
                    b = 0 === b.indexOf("#") ?
                        b.substring(1) : b;
                    a.r = parseInt(b.substr(0, 2), 16) || 0;
                    a.g = parseInt(b.substr(2, 2), 16) || 0;
                    a.b = parseInt(b.substr(4, 2), 16) || 0;
                    a.a = parseInt(b.substr(6, 2), 16) || 255;
                    a._val = (a.a << 24 >>> 0) + (a.b << 16) + (a.g << 8) + a.r;
                    return a
                };
                b.add = function(a, b, c) {
                    a.r = b.r + c.r;
                    a.g = b.g + c.g;
                    a.b = b.b + c.b;
                    a.a = b.a + c.a;
                    return a
                };
                b.subtract = function(a, b, c) {
                    a.r = b.r - c.r;
                    a.g = b.g - c.g;
                    a.b = b.b - c.b;
                    a.a = b.a - c.a;
                    return a
                };
                b.multiply = function(a, b, c) {
                    a.r = b.r * c.r;
                    a.g = b.g * c.g;
                    a.b = b.b * c.b;
                    a.a = b.a * c.a;
                    return a
                };
                b.divide = function(a, b, c) {
                    a.r = b.r / c.r;
                    a.g = b.g /
                        c.g;
                    a.b = b.b / c.b;
                    a.a = b.a / c.a;
                    return a
                };
                b.scale = function(a, b, c) {
                    a.r = b.r * c;
                    a.g = b.g * c;
                    a.b = b.b * c;
                    a.a = b.a * c;
                    return a
                };
                b.lerp = function(a, b, c, d) {
                    var f = b.r,
                        l = b.g,
                        e = b.b;
                    b = b.a;
                    a.r = f + d * (c.r - f);
                    a.g = l + d * (c.g - l);
                    a.b = e + d * (c.b - e);
                    a.a = b + d * (c.a - b);
                    return a
                };
                b.toArray = function(a, c, d) {
                    void 0 === d && (d = 0);
                    var f = c instanceof b || 1 < c.a ? 1 / 255 : 1;
                    a[d + 0] = c.r * f;
                    a[d + 1] = c.g * f;
                    a[d + 2] = c.b * f;
                    a[d + 3] = c.a * f;
                    return a
                };
                b.fromArray = function(a, b, c) {
                    void 0 === c && (c = 0);
                    b.r = 255 * a[c + 0];
                    b.g = 255 * a[c + 1];
                    b.b = 255 * a[c + 2];
                    b.a = 255 * a[c + 3];
                    return b
                };
                b.premultiplyAlpha =
                    function(a, b) {
                        var c = b.a / 255;
                        a.r = b.r * c;
                        a.g = b.g * c;
                        a.b = b.b * c;
                        a._fastSetA(b.a);
                        return a
                    };
                var l = b.prototype;
                l.clone = function() {
                    var a = new b;
                    a._val = this._val;
                    return a
                };
                l.equals = function(a) {
                    return a && this._val === a._val
                };
                l.lerp = function(a, c, d) {
                    d = d || new b;
                    var f = this.r,
                        l = this.g,
                        e = this.b,
                        k = this.a;
                    d.r = f + (a.r - f) * c;
                    d.g = l + (a.g - l) * c;
                    d.b = e + (a.b - e) * c;
                    d.a = k + (a.a - k) * c;
                    return d
                };
                l.toString = function() {
                    return "rgba(" + this.r.toFixed() + ", " + this.g.toFixed() + ", " + this.b.toFixed() + ", " + this.a.toFixed() + ")"
                };
                l.getR = function() {
                    return 255 &
                        this._val
                };
                l.setR = function(a) {
                    a = ~~f["default"].clampf(a, 0, 255);
                    this._val = (4294967040 & this._val | a) >>> 0;
                    return this
                };
                l.getG = function() {
                    return (65280 & this._val) >> 8
                };
                l.setG = function(a) {
                    a = ~~f["default"].clampf(a, 0, 255);
                    this._val = (4294902015 & this._val | a << 8) >>> 0;
                    return this
                };
                l.getB = function() {
                    return (16711680 & this._val) >> 16
                };
                l.setB = function(a) {
                    a = ~~f["default"].clampf(a, 0, 255);
                    this._val = (4278255615 & this._val | a << 16) >>> 0;
                    return this
                };
                l.getA = function() {
                    return (4278190080 & this._val) >>> 24
                };
                l.setA = function(a) {
                    a = ~~f["default"].clampf(a,
                        0, 255);
                    this._val = (16777215 & this._val | a << 24) >>> 0;
                    return this
                };
                l.toCSS = function(a) {
                    return a && "rgba" !== a ? "rgb" === a ? "rgb(" + this.r + "," + this.g + "," + this.b + ")" : "#" + this.toHEX(a) : "rgba(" + this.r + "," + this.g + "," + this.b + "," + (this.a / 255).toFixed(2) + ")"
                };
                l.fromHEX = function(a) {
                    a = 0 === a.indexOf("#") ? a.substring(1) : a;
                    var b = parseInt(a.substr(0, 2), 16) || 0,
                        c = parseInt(a.substr(2, 2), 16) || 0,
                        d = parseInt(a.substr(4, 2), 16) || 0;
                    this._val = ((parseInt(a.substr(6, 2), 16) || 255) << 24 >>> 0) + (d << 16) + (c << 8) + b;
                    return this
                };
                l.toHEX = function(a) {
                    var b = [(16 > this.r ? "0" : "") + this.r.toString(16), (16 > this.g ? "0" : "") + this.g.toString(16), (16 > this.b ? "0" : "") + this.b.toString(16)];
                    "#rgb" === a ? (b[0] = b[0][0], b[1] = b[1][0], b[2] = b[2][0]) : "#rrggbbaa" === a && b.push((16 > this.a ? "0" : "") + this.a.toString(16));
                    return b.join("")
                };
                l.toRGBValue = function() {
                    return 16777215 & this._val
                };
                l.fromHSV = function(a, b, c) {
                    var d, f;
                    if (0 === b) var l = d = f = c;
                    else if (0 === c) l = d = f = 0;
                    else {
                        1 === a && (a = 0);
                        a *= 6;
                        var e = Math.floor(a),
                            k = a - e;
                        a = c * (1 - b);
                        var h = c * (1 - b * k);
                        b = c * (1 - b * (1 - k));
                        switch (e) {
                            case 0:
                                l = c;
                                d = b;
                                f = a;
                                break;
                            case 1:
                                l = h;
                                d = c;
                                f = a;
                                break;
                            case 2:
                                l = a;
                                d = c;
                                f = b;
                                break;
                            case 3:
                                l = a;
                                d = h;
                                f = c;
                                break;
                            case 4:
                                l = b;
                                d = a;
                                f = c;
                                break;
                            case 5:
                                l = c, d = a, f = h
                        }
                    }
                    this._val = (this.a << 24 >>> 0) + (255 * f << 16) + (255 * d << 8) + (0 | 255 * l);
                    return this
                };
                l.toHSV = function() {
                    var a = this.r / 255,
                        b = this.g / 255,
                        c = this.b / 255,
                        d = {
                            h: 0,
                            s: 0,
                            v: 0
                        },
                        f = Math.max(a, b, c),
                        l = Math.min(a, b, c);
                    d.v = f;
                    d.s = f ? (f - l) / f : 0;
                    d.s ? (l = f - l, d.h = a === f ? (b - c) / l : b === f ? 2 + (c - a) / l : 4 + (a - b) / l, d.h /= 6, 0 > d.h && (d.h += 1)) : d.h = 0;
                    return d
                };
                l.set = function(a) {
                    a._val ? this._val = a._val : (this.r = a.r, this.g = a.g, this.b =
                        a.b, this.a = a.a);
                    return this
                };
                l._fastSetA = function(a) {
                    this._val = (16777215 & this._val | a << 24) >>> 0
                };
                l.multiply = function(a) {
                    this._val = 4278190080 & ((4278190080 & this._val) >>> 8) * a.a | 16711680 & (16711680 & this._val) * a.b >> 8 | 65280 & (65280 & this._val) * a.g >> 8 | 255 & (255 & this._val) * a.r >> 8;
                    return this
                };
                d(b, [{
                        key: "r",
                        get: function() {
                            return this.getR()
                        },
                        set: function(a) {
                            this.setR(a)
                        }
                    }, {
                        key: "g",
                        get: function() {
                            return this.getG()
                        },
                        set: function(a) {
                            this.setG(a)
                        }
                    }, {
                        key: "b",
                        get: function() {
                            return this.getB()
                        },
                        set: function(a) {
                            this.setB(a)
                        }
                    },
                    {
                        key: "a",
                        get: function() {
                            return this.getA()
                        },
                        set: function(a) {
                            this.setA(a)
                        }
                    }
                ], [{
                    key: "WHITE",
                    get: function() {
                        return new b(255, 255, 255, 255)
                    }
                }, {
                    key: "BLACK",
                    get: function() {
                        return new b(0, 0, 0, 255)
                    }
                }, {
                    key: "TRANSPARENT",
                    get: function() {
                        return new b(0, 0, 0, 0)
                    }
                }, {
                    key: "GRAY",
                    get: function() {
                        return new b(127.5, 127.5, 127.5)
                    }
                }, {
                    key: "RED",
                    get: function() {
                        return new b(255, 0, 0)
                    }
                }, {
                    key: "GREEN",
                    get: function() {
                        return new b(0, 255, 0)
                    }
                }, {
                    key: "BLUE",
                    get: function() {
                        return new b(0, 0, 255)
                    }
                }, {
                    key: "YELLOW",
                    get: function() {
                        return new b(255,
                            235, 4)
                    }
                }, {
                    key: "ORANGE",
                    get: function() {
                        return new b(255, 127, 0)
                    }
                }, {
                    key: "CYAN",
                    get: function() {
                        return new b(0, 255, 255)
                    }
                }, {
                    key: "MAGENTA",
                    get: function() {
                        return new b(255, 0, 255)
                    }
                }]);
                return b
            }(b["default"]);
        m["default"] = n;
        n.div = n.divide;
        n.sub = n.subtract;
        n.mul = n.multiply;
        n.WHITE_R = n.WHITE;
        n.BLACK_R = n.BLACK;
        n.TRANSPARENT_R = n.TRANSPARENT;
        n.GRAY_R = n.GRAY;
        n.RED_R = n.RED;
        n.GREEN_R = n.GREEN;
        n.BLUE_R = n.BLUE;
        n.YELLOW_R = n.YELLOW;
        n.ORANGE_R = n.ORANGE;
        n.CYAN_R = n.CYAN;
        n.MAGENTA_R = n.MAGENTA;
        l["default"].fastDefine("cc.Color",
            n, {
                r: 0,
                g: 0,
                b: 0,
                a: 255
            });
        cc.Color = n;
        cc.color = function(a, b, c, d) {
            return "string" === typeof a ? (new n).fromHEX(a) : "object" === typeof a ? new n(a.r, a.g, a.b, a.a) : new n(a, b, c, d)
        };
        q.exports = m["default"]
    }, {
        "../platform/CCClass": 227,
        "../utils/misc": 310,
        "./value-type": 333
    }],
    325: [function(g, q, m) {
        function h(c) {
            return c && c.__esModule ? c : {
                default: c
            }
        }
        m.__esModule = !0;
        var e = {
            Vec2: !0,
            Vec3: !0,
            Vec4: !0,
            Mat4: !0,
            Mat3: !0,
            Rect: !0,
            Size: !0,
            Color: !0,
            Quat: !0,
            Trs: !0
        };
        m.Vec4 = m.Vec3 = m.Vec2 = m.Trs = m.Size = m.Rect = m.Quat = m.Mat4 = m.Mat3 = m.Color =
            void 0;
        var d = h(g("./vec2"));
        m.Vec2 = d["default"];
        d = h(g("./vec3"));
        m.Vec3 = d["default"];
        d = h(g("./vec4"));
        m.Vec4 = d["default"];
        d = h(g("./mat4"));
        m.Mat4 = d["default"];
        d = h(g("./mat3"));
        m.Mat3 = d["default"];
        d = h(g("./rect"));
        m.Rect = d["default"];
        d = h(g("./size"));
        m.Size = d["default"];
        d = h(g("./color"));
        m.Color = d["default"];
        d = h(g("./quat"));
        m.Quat = d["default"];
        d = h(g("./trs"));
        m.Trs = d["default"];
        var k = g("./utils");
        Object.keys(k).forEach(function(c) {
            "default" !== c && "__esModule" !== c && (Object.prototype.hasOwnProperty.call(e,
                c) || c in m && m[c] === k[c] || (m[c] = k[c]))
        });
        cc.math = q.exports
    }, {
        "./color": 324,
        "./mat3": 326,
        "./mat4": 327,
        "./quat": 328,
        "./rect": 329,
        "./size": 330,
        "./trs": 331,
        "./utils": 332,
        "./vec2": 334,
        "./vec3": 335,
        "./vec4": 336
    }],
    326: [function(g, q, m) {
        m.__esModule = !0;
        m["default"] = void 0;
        var h = g("../value-types/utils"),
            e = function(d) {
                return d && d.__esModule ? d : {
                    default: d
                }
            }(g("./vec3"));
        g = function() {
            function d(d, c, a, b, l, f, e, g, v) {
                void 0 === d && (d = 1);
                void 0 === c && (c = 0);
                void 0 === a && (a = 0);
                void 0 === b && (b = 0);
                void 0 === l && (l = 1);
                void 0 ===
                    f && (f = 0);
                void 0 === e && (e = 0);
                void 0 === g && (g = 0);
                void 0 === v && (v = 1);
                this.m = void 0;
                if (d instanceof h.FLOAT_ARRAY_TYPE) this.m = d;
                else {
                    var k = this.m = new h.FLOAT_ARRAY_TYPE(9);
                    k[0] = d;
                    k[1] = c;
                    k[2] = a;
                    k[3] = b;
                    k[4] = l;
                    k[5] = f;
                    k[6] = e;
                    k[7] = g;
                    k[8] = v
                }
            }
            d.create = function(e, c, a, b, l, f, h, g, v) {
                void 0 === e && (e = 1);
                void 0 === c && (c = 0);
                void 0 === a && (a = 0);
                void 0 === b && (b = 0);
                void 0 === l && (l = 1);
                void 0 === f && (f = 0);
                void 0 === h && (h = 0);
                void 0 === g && (g = 0);
                void 0 === v && (v = 1);
                return new d(e, c, a, b, l, f, h, g, v)
            };
            d.clone = function(e) {
                e = e.m;
                return new d(e[0],
                    e[1], e[2], e[3], e[4], e[5], e[6], e[7], e[8])
            };
            d.copy = function(d, c) {
                d.m.set(c.m);
                return d
            };
            d.set = function(d, c, a, b, l, f, e, h, g, p) {
                var k = d.m;
                k[0] = c;
                k[1] = a;
                k[2] = b;
                k[3] = l;
                k[4] = f;
                k[5] = e;
                k[6] = h;
                k[7] = g;
                k[8] = p;
                return d
            };
            d.identity = function(d) {
                var c = d.m;
                c[0] = 1;
                c[1] = 0;
                c[2] = 0;
                c[3] = 0;
                c[4] = 1;
                c[5] = 0;
                c[6] = 0;
                c[7] = 0;
                c[8] = 1;
                return d
            };
            d.transpose = function(d, c) {
                var a = c.m,
                    b = d.m;
                if (d === c) {
                    c = a[1];
                    var l = a[2],
                        f = a[5];
                    b[1] = a[3];
                    b[2] = a[6];
                    b[3] = c;
                    b[5] = a[7];
                    b[6] = l;
                    b[7] = f
                } else b[0] = a[0], b[1] = a[3], b[2] = a[6], b[3] = a[1], b[4] = a[4], b[5] = a[7],
                    b[6] = a[2], b[7] = a[5], b[8] = a[8];
                return d
            };
            d.invert = function(d, c) {
                var a = c.m;
                c = d.m;
                var b = a[0],
                    l = a[1],
                    f = a[2],
                    e = a[3],
                    k = a[4],
                    h = a[5],
                    g = a[6],
                    t = a[7];
                a = a[8];
                var x = a * k - h * t,
                    m = -a * e + h * g,
                    E = t * e - k * g,
                    w = b * x + l * m + f * E;
                if (!w) return d;
                w = 1 / w;
                c[0] = x * w;
                c[1] = (-a * l + f * t) * w;
                c[2] = (h * l - f * k) * w;
                c[3] = m * w;
                c[4] = (a * b - f * g) * w;
                c[5] = (-h * b + f * e) * w;
                c[6] = E * w;
                c[7] = (-t * b + l * g) * w;
                c[8] = (k * b - l * e) * w;
                return d
            };
            d.adjoint = function(d, c) {
                var a = c.m;
                c = d.m;
                var b = a[0],
                    l = a[1],
                    f = a[2],
                    e = a[3],
                    k = a[4],
                    h = a[5],
                    g = a[6],
                    t = a[7];
                a = a[8];
                c[0] = k * a - h * t;
                c[1] = f * t - l * a;
                c[2] = l * h - f *
                    k;
                c[3] = h * g - e * a;
                c[4] = b * a - f * g;
                c[5] = f * e - b * h;
                c[6] = e * t - k * g;
                c[7] = l * g - b * t;
                c[8] = b * k - l * e;
                return d
            };
            d.determinant = function(d) {
                d = d.m;
                var c = d[3],
                    a = d[4],
                    b = d[5],
                    l = d[6],
                    f = d[7],
                    e = d[8];
                return d[0] * (e * a - b * f) + d[1] * (-e * c + b * l) + d[2] * (f * c - a * l)
            };
            d.multiply = function(d, c, a) {
                var b = c.m,
                    l = a.m;
                a = d.m;
                c = b[0];
                var f = b[1],
                    e = b[2],
                    k = b[3],
                    h = b[4],
                    g = b[5],
                    t = b[6],
                    x = b[7];
                b = b[8];
                var m = l[0],
                    E = l[1],
                    w = l[2],
                    A = l[3],
                    B = l[4],
                    y = l[5],
                    C = l[6],
                    F = l[7];
                l = l[8];
                a[0] = m * c + E * k + w * t;
                a[1] = m * f + E * h + w * x;
                a[2] = m * e + E * g + w * b;
                a[3] = A * c + B * k + y * t;
                a[4] = A * f + B * h + y * x;
                a[5] = A * e + B *
                    g + y * b;
                a[6] = C * c + F * k + l * t;
                a[7] = C * f + F * h + l * x;
                a[8] = C * e + F * g + l * b;
                return d
            };
            d.multiplyMat4 = function(d, c, a) {
                var b = c.m,
                    l = a.m;
                a = d.m;
                c = b[0];
                var f = b[1],
                    e = b[2],
                    k = b[3],
                    h = b[4],
                    g = b[5],
                    t = b[6],
                    x = b[7];
                b = b[8];
                var m = l[0],
                    E = l[1],
                    w = l[2],
                    A = l[4],
                    B = l[5],
                    y = l[6],
                    C = l[8],
                    F = l[9];
                l = l[10];
                a[0] = m * c + E * k + w * t;
                a[1] = m * f + E * h + w * x;
                a[2] = m * e + E * g + w * b;
                a[3] = A * c + B * k + y * t;
                a[4] = A * f + B * h + y * x;
                a[5] = A * e + B * g + y * b;
                a[6] = C * c + F * k + l * t;
                a[7] = C * f + F * h + l * x;
                a[8] = C * e + F * g + l * b;
                return d
            };
            d.translate = function(d, c, a) {
                var b = c.m;
                c = d.m;
                var l = b[0],
                    f = b[1],
                    e = b[2],
                    k = b[3],
                    h = b[4],
                    g = b[5],
                    t = b[6],
                    x = b[7];
                b = b[8];
                var m = a.x;
                a = a.y;
                c[0] = l;
                c[1] = f;
                c[2] = e;
                c[3] = k;
                c[4] = h;
                c[5] = g;
                c[6] = m * l + a * k + t;
                c[7] = m * f + a * h + x;
                c[8] = m * e + a * g + b;
                return d
            };
            d.rotate = function(d, c, a) {
                var b = c.m;
                c = d.m;
                var l = b[0],
                    f = b[1],
                    e = b[2],
                    k = b[3],
                    h = b[4],
                    g = b[5],
                    t = b[6],
                    x = b[7];
                b = b[8];
                var m = Math.sin(a);
                a = Math.cos(a);
                c[0] = a * l + m * k;
                c[1] = a * f + m * h;
                c[2] = a * e + m * g;
                c[3] = a * k - m * l;
                c[4] = a * h - m * f;
                c[5] = a * g - m * e;
                c[6] = t;
                c[7] = x;
                c[8] = b;
                return d
            };
            d.scale = function(d, c, a) {
                var b = a.x;
                a = a.y;
                c = c.m;
                var l = d.m;
                l[0] = b * c[0];
                l[1] = b * c[1];
                l[2] = b * c[2];
                l[3] = a * c[3];
                l[4] = a *
                    c[4];
                l[5] = a * c[5];
                l[6] = c[6];
                l[7] = c[7];
                l[8] = c[8];
                return d
            };
            d.fromMat4 = function(d, c) {
                c = c.m;
                var a = d.m;
                a[0] = c[0];
                a[1] = c[1];
                a[2] = c[2];
                a[3] = c[4];
                a[4] = c[5];
                a[5] = c[6];
                a[6] = c[8];
                a[7] = c[9];
                a[8] = c[10];
                return d
            };
            d.fromTranslation = function(d, c) {
                var a = d.m;
                a[0] = 1;
                a[1] = 0;
                a[2] = 0;
                a[3] = 0;
                a[4] = 1;
                a[5] = 0;
                a[6] = c.x;
                a[7] = c.y;
                a[8] = 1;
                return d
            };
            d.fromRotation = function(d, c) {
                var a = Math.sin(c);
                c = Math.cos(c);
                var b = d.m;
                b[0] = c;
                b[1] = a;
                b[2] = 0;
                b[3] = -a;
                b[4] = c;
                b[5] = 0;
                b[6] = 0;
                b[7] = 0;
                b[8] = 1;
                return d
            };
            d.fromScaling = function(d, c) {
                var a = d.m;
                a[0] = c.x;
                a[1] = 0;
                a[2] = 0;
                a[3] = 0;
                a[4] = c.y;
                a[5] = 0;
                a[6] = 0;
                a[7] = 0;
                a[8] = 1;
                return d
            };
            d.fromQuat = function(d, c) {
                var a = d.m,
                    b = c.x,
                    l = c.y,
                    f = c.z;
                c = c.w;
                var e = b + b,
                    k = l + l,
                    h = f + f;
                b *= e;
                var g = l * e;
                l *= k;
                var t = f * e,
                    x = f * k;
                f *= h;
                e *= c;
                k *= c;
                c *= h;
                a[0] = 1 - l - f;
                a[3] = g - c;
                a[6] = t + k;
                a[1] = g + c;
                a[4] = 1 - b - f;
                a[7] = x - e;
                a[2] = t - k;
                a[5] = x + e;
                a[8] = 1 - b - l;
                return d
            };
            d.fromViewUp = function(k, c, a) {
                return function() {
                    var a = new e["default"](0, 1, 0),
                        c = new e["default"],
                        f = new e["default"];
                    return function(b, l, k) {
                        if (e["default"].lengthSqr(l) < h.EPSILON * h.EPSILON) return d.identity(b),
                            b;
                        k = k || a;
                        e["default"].normalize(c, e["default"].cross(c, k, l));
                        if (e["default"].lengthSqr(c) < h.EPSILON * h.EPSILON) return d.identity(b), b;
                        e["default"].cross(f, l, c);
                        d.set(b, c.x, c.y, c.z, f.x, f.y, f.z, l.x, l.y, l.z);
                        return b
                    }
                }()(k, c, a)
            };
            d.normalFromMat4 = function(d, c) {
                var a = c.m;
                c = d.m;
                var b = a[0],
                    l = a[1],
                    f = a[2],
                    e = a[3],
                    k = a[4],
                    h = a[5],
                    g = a[6],
                    t = a[7],
                    x = a[8],
                    m = a[9],
                    E = a[10],
                    w = a[11],
                    A = a[12],
                    B = a[13],
                    y = a[14];
                a = a[15];
                var C = b * h - l * k,
                    F = b * g - f * k,
                    q = b * t - e * k,
                    D = l * g - f * h,
                    I = l * t - e * h,
                    K = f * t - e * g,
                    L = x * B - m * A,
                    R = x * y - E * A;
                x = x * a - w * A;
                var M = m * y - E * B;
                m = m * a - w * B;
                E = E * a - w * y;
                w = C * E - F * m + q * M + D * x - I * R + K * L;
                if (!w) return d;
                w = 1 / w;
                c[0] = (h * E - g * m + t * M) * w;
                c[1] = (g * x - k * E - t * R) * w;
                c[2] = (k * m - h * x + t * L) * w;
                c[3] = (f * m - l * E - e * M) * w;
                c[4] = (b * E - f * x + e * R) * w;
                c[5] = (l * x - b * m - e * L) * w;
                c[6] = (B * K - y * I + a * D) * w;
                c[7] = (y * q - A * K - a * F) * w;
                c[8] = (A * I - B * q + a * C) * w;
                return d
            };
            d.frob = function(d) {
                d = d.m;
                return Math.sqrt(Math.pow(d[0], 2) + Math.pow(d[1], 2) + Math.pow(d[2], 2) + Math.pow(d[3], 2) + Math.pow(d[4], 2) + Math.pow(d[5], 2) + Math.pow(d[6], 2) + Math.pow(d[7], 2) + Math.pow(d[8], 2))
            };
            d.add = function(d, c, a) {
                c = c.m;
                a = a.m;
                var b =
                    d.m;
                b[0] = c[0] + a[0];
                b[1] = c[1] + a[1];
                b[2] = c[2] + a[2];
                b[3] = c[3] + a[3];
                b[4] = c[4] + a[4];
                b[5] = c[5] + a[5];
                b[6] = c[6] + a[6];
                b[7] = c[7] + a[7];
                b[8] = c[8] + a[8];
                return d
            };
            d.subtract = function(d, c, a) {
                c = c.m;
                a = a.m;
                var b = d.m;
                b[0] = c[0] - a[0];
                b[1] = c[1] - a[1];
                b[2] = c[2] - a[2];
                b[3] = c[3] - a[3];
                b[4] = c[4] - a[4];
                b[5] = c[5] - a[5];
                b[6] = c[6] - a[6];
                b[7] = c[7] - a[7];
                b[8] = c[8] - a[8];
                return d
            };
            d.multiplyScalar = function(d, c, a) {
                c = c.m;
                var b = d.m;
                b[0] = c[0] * a;
                b[1] = c[1] * a;
                b[2] = c[2] * a;
                b[3] = c[3] * a;
                b[4] = c[4] * a;
                b[5] = c[5] * a;
                b[6] = c[6] * a;
                b[7] = c[7] * a;
                b[8] = c[8] * a;
                return d
            };
            d.multiplyScalarAndAdd = function(d, c, a, b) {
                c = c.m;
                a = a.m;
                var l = d.m;
                l[0] = c[0] + a[0] * b;
                l[1] = c[1] + a[1] * b;
                l[2] = c[2] + a[2] * b;
                l[3] = c[3] + a[3] * b;
                l[4] = c[4] + a[4] * b;
                l[5] = c[5] + a[5] * b;
                l[6] = c[6] + a[6] * b;
                l[7] = c[7] + a[7] * b;
                l[8] = c[8] + a[8] * b;
                return d
            };
            d.exactEquals = function(d, c) {
                d = d.m;
                c = c.m;
                return d[0] === c[0] && d[1] === c[1] && d[2] === c[2] && d[3] === c[3] && d[4] === c[4] && d[5] === c[5] && d[6] === c[6] && d[7] === c[7] && d[8] === c[8]
            };
            d.equals = function(d, c) {
                var a = d.m,
                    b = c.m;
                c = a[0];
                d = a[1];
                var l = a[2],
                    f = a[3],
                    e = a[4],
                    k = a[5],
                    g = a[6],
                    p = a[7];
                a = a[8];
                var t =
                    b[0],
                    x = b[1],
                    m = b[2],
                    E = b[3],
                    w = b[4],
                    A = b[5],
                    B = b[6],
                    y = b[7];
                b = b[8];
                return Math.abs(c - t) <= h.EPSILON * Math.max(1, Math.abs(c), Math.abs(t)) && Math.abs(d - x) <= h.EPSILON * Math.max(1, Math.abs(d), Math.abs(x)) && Math.abs(l - m) <= h.EPSILON * Math.max(1, Math.abs(l), Math.abs(m)) && Math.abs(f - E) <= h.EPSILON * Math.max(1, Math.abs(f), Math.abs(E)) && Math.abs(e - w) <= h.EPSILON * Math.max(1, Math.abs(e), Math.abs(w)) && Math.abs(k - A) <= h.EPSILON * Math.max(1, Math.abs(k), Math.abs(A)) && Math.abs(g - B) <= h.EPSILON * Math.max(1, Math.abs(g), Math.abs(B)) &&
                    Math.abs(p - y) <= h.EPSILON * Math.max(1, Math.abs(p), Math.abs(y)) && Math.abs(a - b) <= h.EPSILON * Math.max(1, Math.abs(a), Math.abs(b))
            };
            d.toArray = function(d, c, a) {
                void 0 === a && (a = 0);
                c = c.m;
                for (var b = 0; 9 > b; b++) d[a + b] = c[b];
                return d
            };
            d.fromArray = function(d, c, a) {
                void 0 === a && (a = 0);
                for (var b = d.m, l = 0; 9 > l; l++) b[l] = c[a + l];
                return d
            };
            d.prototype.toString = function() {
                var d = this.m;
                return "mat3(" + d[0] + ", " + d[1] + ", " + d[2] + ", " + d[3] + ", " + d[4] + ", " + d[5] + ", " + d[6] + ", " + d[7] + ", " + d[8] + ")"
            };
            return d
        }();
        m["default"] = g;
        g.sub = g.subtract;
        g.mul = g.multiply;
        g.IDENTITY = Object.freeze(new g);
        cc.Mat3 = g;
        q.exports = m["default"]
    }, {
        "../value-types/utils": 332,
        "./vec3": 335
    }],
    327: [function(g, q, m) {
        function h(a) {
            return a && a.__esModule ? a : {
                default: a
            }
        }

        function e(a, b) {
            a.prototype = Object.create(b.prototype);
            a.prototype.constructor = a;
            d(a, b)
        }

        function d(a, b) {
            d = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(a, b) {
                a.__proto__ = b;
                return a
            };
            return d(a, b)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var k = h(g("./value-type")),
            c = h(g("../platform/CCClass")),
            a =
            h(g("./vec3")),
            b = h(g("./quat")),
            l = g("./utils"),
            f = h(g("./mat3")),
            n = 0,
            u = 0,
            v = 0,
            p = 0,
            t = 0,
            x = 0,
            z = 0,
            E = 0,
            w = 0,
            A = 0,
            B = 0,
            y = 0,
            C = 0,
            F = 0,
            G = 0,
            D = 0,
            I = function(c) {
                function d(a, b, d, f, e, k, h, g, n, p, t, u, v, x, w, m) {
                    void 0 === a && (a = 1);
                    void 0 === b && (b = 0);
                    void 0 === d && (d = 0);
                    void 0 === f && (f = 0);
                    void 0 === e && (e = 0);
                    void 0 === k && (k = 1);
                    void 0 === h && (h = 0);
                    void 0 === g && (g = 0);
                    void 0 === n && (n = 0);
                    void 0 === p && (p = 0);
                    void 0 === t && (t = 1);
                    void 0 === u && (u = 0);
                    void 0 === v && (v = 0);
                    void 0 === x && (x = 0);
                    void 0 === w && (w = 0);
                    void 0 === m && (m = 1);
                    var z = c.call(this) || this;
                    z.m =
                        void 0;
                    if (a instanceof l.FLOAT_ARRAY_TYPE) z.m = a;
                    else {
                        z.m = new l.FLOAT_ARRAY_TYPE(16);
                        var A = z.m;
                        A[0] = a;
                        A[1] = b;
                        A[2] = d;
                        A[3] = f;
                        A[4] = e;
                        A[5] = k;
                        A[6] = h;
                        A[7] = g;
                        A[8] = n;
                        A[9] = p;
                        A[10] = t;
                        A[11] = u;
                        A[12] = v;
                        A[13] = x;
                        A[14] = w;
                        A[15] = m
                    }
                    return z
                }
                e(d, c);
                var k = d.prototype;
                k.mul = function(a, b) {
                    return d.multiply(b || new d, this, a)
                };
                k.mulScalar = function(a, b) {
                    d.multiplyScalar(b || new d, this, a)
                };
                k.sub = function(a, b) {
                    d.subtract(b || new d, this, a)
                };
                d.clone = function(a) {
                    a = a.m;
                    return new d(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9],
                        a[10], a[11], a[12], a[13], a[14], a[15])
                };
                d.copy = function(a, b) {
                    var c = a.m;
                    b = b.m;
                    c[0] = b[0];
                    c[1] = b[1];
                    c[2] = b[2];
                    c[3] = b[3];
                    c[4] = b[4];
                    c[5] = b[5];
                    c[6] = b[6];
                    c[7] = b[7];
                    c[8] = b[8];
                    c[9] = b[9];
                    c[10] = b[10];
                    c[11] = b[11];
                    c[12] = b[12];
                    c[13] = b[13];
                    c[14] = b[14];
                    c[15] = b[15];
                    return a
                };
                d.set = function(a, b, c, d, f, l, e, k, h, g, n, p, t, u, v, x, w) {
                    var m = a.m;
                    m[0] = b;
                    m[1] = c;
                    m[2] = d;
                    m[3] = f;
                    m[4] = l;
                    m[5] = e;
                    m[6] = k;
                    m[7] = h;
                    m[8] = g;
                    m[9] = n;
                    m[10] = p;
                    m[11] = t;
                    m[12] = u;
                    m[13] = v;
                    m[14] = x;
                    m[15] = w;
                    return a
                };
                d.identity = function(a) {
                    var b = a.m;
                    b[0] = 1;
                    b[1] = 0;
                    b[2] = 0;
                    b[3] =
                        0;
                    b[4] = 0;
                    b[5] = 1;
                    b[6] = 0;
                    b[7] = 0;
                    b[8] = 0;
                    b[9] = 0;
                    b[10] = 1;
                    b[11] = 0;
                    b[12] = 0;
                    b[13] = 0;
                    b[14] = 0;
                    b[15] = 1;
                    return a
                };
                d.transpose = function(a, b) {
                    var c = a.m,
                        d = b.m;
                    if (a === b) {
                        b = d[1];
                        var f = d[2],
                            l = d[3],
                            e = d[6],
                            k = d[7],
                            h = d[11];
                        c[1] = d[4];
                        c[2] = d[8];
                        c[3] = d[12];
                        c[4] = b;
                        c[6] = d[9];
                        c[7] = d[13];
                        c[8] = f;
                        c[9] = e;
                        c[11] = d[14];
                        c[12] = l;
                        c[13] = k;
                        c[14] = h
                    } else c[0] = d[0], c[1] = d[4], c[2] = d[8], c[3] = d[12], c[4] = d[1], c[5] = d[5], c[6] = d[9], c[7] = d[13], c[8] = d[2], c[9] = d[6], c[10] = d[10], c[11] = d[14], c[12] = d[3], c[13] = d[7], c[14] = d[11], c[15] = d[15];
                    return a
                };
                d.invert =
                    function(a, b) {
                        b = b.m;
                        n = b[0];
                        u = b[1];
                        v = b[2];
                        p = b[3];
                        t = b[4];
                        x = b[5];
                        z = b[6];
                        E = b[7];
                        w = b[8];
                        A = b[9];
                        B = b[10];
                        y = b[11];
                        C = b[12];
                        F = b[13];
                        G = b[14];
                        D = b[15];
                        b = n * x - u * t;
                        var c = n * z - v * t,
                            d = n * E - p * t,
                            f = u * z - v * x,
                            l = u * E - p * x,
                            e = v * E - p * z,
                            k = w * F - A * C,
                            h = w * G - B * C,
                            g = w * D - y * C,
                            m = A * G - B * F,
                            q = A * D - y * F,
                            Q = B * D - y * G,
                            O = b * Q - c * q + d * m + f * g - l * h + e * k;
                        if (0 === O) return null;
                        O = 1 / O;
                        var I = a.m;
                        I[0] = (x * Q - z * q + E * m) * O;
                        I[1] = (v * q - u * Q - p * m) * O;
                        I[2] = (F * e - G * l + D * f) * O;
                        I[3] = (B * l - A * e - y * f) * O;
                        I[4] = (z * g - t * Q - E * h) * O;
                        I[5] = (n * Q - v * g + p * h) * O;
                        I[6] = (G * d - C * e - D * c) * O;
                        I[7] = (w * e - B * d + y * c) * O;
                        I[8] = (t *
                            q - x * g + E * k) * O;
                        I[9] = (u * g - n * q - p * k) * O;
                        I[10] = (C * l - F * d + D * b) * O;
                        I[11] = (A * d - w * l - y * b) * O;
                        I[12] = (x * h - t * m - z * k) * O;
                        I[13] = (n * m - u * h + v * k) * O;
                        I[14] = (F * c - C * f - G * b) * O;
                        I[15] = (w * f - A * c + B * b) * O;
                        return a
                    };
                d.determinant = function(a) {
                    a = a.m;
                    n = a[0];
                    u = a[1];
                    v = a[2];
                    p = a[3];
                    t = a[4];
                    x = a[5];
                    z = a[6];
                    E = a[7];
                    w = a[8];
                    A = a[9];
                    B = a[10];
                    y = a[11];
                    C = a[12];
                    F = a[13];
                    G = a[14];
                    D = a[15];
                    return (n * x - u * t) * (B * D - y * G) - (n * z - v * t) * (A * D - y * F) + (n * E - p * t) * (A * G - B * F) + (u * z - v * x) * (w * D - y * C) - (u * E - p * x) * (w * G - B * C) + (v * E - p * z) * (w * F - A * C)
                };
                d.multiply = function(a, b, c) {
                    var d = a.m;
                    b = b.m;
                    c = c.m;
                    n = b[0];
                    u = b[1];
                    v = b[2];
                    p = b[3];
                    t = b[4];
                    x = b[5];
                    z = b[6];
                    E = b[7];
                    w = b[8];
                    A = b[9];
                    B = b[10];
                    y = b[11];
                    C = b[12];
                    F = b[13];
                    G = b[14];
                    D = b[15];
                    b = c[0];
                    var f = c[1],
                        l = c[2],
                        e = c[3];
                    d[0] = b * n + f * t + l * w + e * C;
                    d[1] = b * u + f * x + l * A + e * F;
                    d[2] = b * v + f * z + l * B + e * G;
                    d[3] = b * p + f * E + l * y + e * D;
                    b = c[4];
                    f = c[5];
                    l = c[6];
                    e = c[7];
                    d[4] = b * n + f * t + l * w + e * C;
                    d[5] = b * u + f * x + l * A + e * F;
                    d[6] = b * v + f * z + l * B + e * G;
                    d[7] = b * p + f * E + l * y + e * D;
                    b = c[8];
                    f = c[9];
                    l = c[10];
                    e = c[11];
                    d[8] = b * n + f * t + l * w + e * C;
                    d[9] = b * u + f * x + l * A + e * F;
                    d[10] = b * v + f * z + l * B + e * G;
                    d[11] = b * p + f * E + l * y + e * D;
                    b = c[12];
                    f = c[13];
                    l = c[14];
                    e = c[15];
                    d[12] = b *
                        n + f * t + l * w + e * C;
                    d[13] = b * u + f * x + l * A + e * F;
                    d[14] = b * v + f * z + l * B + e * G;
                    d[15] = b * p + f * E + l * y + e * D;
                    return a
                };
                d.transform = function(a, b, c) {
                    var d = c.x,
                        f = c.y;
                    c = c.z;
                    var l = a.m,
                        e = b.m;
                    b === a ? (l[12] = e[0] * d + e[4] * f + e[8] * c + e[12], l[13] = e[1] * d + e[5] * f + e[9] * c + e[13], l[14] = e[2] * d + e[6] * f + e[10] * c + e[14], l[15] = e[3] * d + e[7] * f + e[11] * c + e[15]) : (n = e[0], u = e[1], v = e[2], p = e[3], t = e[4], x = e[5], z = e[6], E = e[7], w = e[8], A = e[9], B = e[10], y = e[11], C = e[12], F = e[13], G = e[14], D = e[15], l[0] = n, l[1] = u, l[2] = v, l[3] = p, l[4] = t, l[5] = x, l[6] = z, l[7] = E, l[8] = w, l[9] = A, l[10] = B, l[11] =
                        y, l[12] = n * d + t * f + w * c + e[12], l[13] = u * d + x * f + A * c + e[13], l[14] = v * d + z * f + B * c + e[14], l[15] = p * d + E * f + y * c + e[15]);
                    return a
                };
                d.translate = function(a, b, c) {
                    var d = a.m,
                        f = b.m;
                    b === a ? (d[12] += c.x, d[13] += c.y, d[14] += c.z) : (d[0] = f[0], d[1] = f[1], d[2] = f[2], d[3] = f[3], d[4] = f[4], d[5] = f[5], d[6] = f[6], d[7] = f[7], d[8] = f[8], d[9] = f[9], d[10] = f[10], d[11] = f[11], d[12] += c.x, d[13] += c.y, d[14] += c.z, d[15] = f[15]);
                    return a
                };
                d.scale = function(a, b, c) {
                    var d = c.x,
                        f = c.y;
                    c = c.z;
                    var l = a.m;
                    b = b.m;
                    l[0] = b[0] * d;
                    l[1] = b[1] * d;
                    l[2] = b[2] * d;
                    l[3] = b[3] * d;
                    l[4] = b[4] * f;
                    l[5] =
                        b[5] * f;
                    l[6] = b[6] * f;
                    l[7] = b[7] * f;
                    l[8] = b[8] * c;
                    l[9] = b[9] * c;
                    l[10] = b[10] * c;
                    l[11] = b[11] * c;
                    l[12] = b[12];
                    l[13] = b[13];
                    l[14] = b[14];
                    l[15] = b[15];
                    return a
                };
                d.rotate = function(a, b, c, d) {
                    var f = d.x,
                        e = d.y;
                    d = d.z;
                    var k = Math.sqrt(f * f + e * e + d * d);
                    if (Math.abs(k) < l.EPSILON) return null;
                    k = 1 / k;
                    f *= k;
                    e *= k;
                    d *= k;
                    var h = Math.sin(c),
                        g = Math.cos(c),
                        m = 1 - g;
                    c = b.m;
                    n = c[0];
                    u = c[1];
                    v = c[2];
                    p = c[3];
                    t = c[4];
                    x = c[5];
                    z = c[6];
                    E = c[7];
                    w = c[8];
                    A = c[9];
                    B = c[10];
                    y = c[11];
                    k = f * f * m + g;
                    var C = e * f * m + d * h,
                        F = d * f * m - e * h,
                        q = f * e * m - d * h,
                        G = e * e * m + g,
                        D = d * e * m + f * h,
                        Q = f * d * m + e * h;
                    f = e * d * m - f *
                        h;
                    e = d * d * m + g;
                    d = a.m;
                    d[0] = n * k + t * C + w * F;
                    d[1] = u * k + x * C + A * F;
                    d[2] = v * k + z * C + B * F;
                    d[3] = p * k + E * C + y * F;
                    d[4] = n * q + t * G + w * D;
                    d[5] = u * q + x * G + A * D;
                    d[6] = v * q + z * G + B * D;
                    d[7] = p * q + E * G + y * D;
                    d[8] = n * Q + t * f + w * e;
                    d[9] = u * Q + x * f + A * e;
                    d[10] = v * Q + z * f + B * e;
                    d[11] = p * Q + E * f + y * e;
                    b !== a && (d[12] = c[12], d[13] = c[13], d[14] = c[14], d[15] = c[15]);
                    return a
                };
                d.rotateX = function(a, b, c) {
                    var d = a.m,
                        f = b.m,
                        l = Math.sin(c);
                    c = Math.cos(c);
                    var e = f[4],
                        k = f[5],
                        h = f[6],
                        g = f[7],
                        n = f[8],
                        p = f[9],
                        t = f[10],
                        u = f[11];
                    b !== a && (d[0] = f[0], d[1] = f[1], d[2] = f[2], d[3] = f[3], d[12] = f[12], d[13] = f[13], d[14] =
                        f[14], d[15] = f[15]);
                    d[4] = e * c + n * l;
                    d[5] = k * c + p * l;
                    d[6] = h * c + t * l;
                    d[7] = g * c + u * l;
                    d[8] = n * c - e * l;
                    d[9] = p * c - k * l;
                    d[10] = t * c - h * l;
                    d[11] = u * c - g * l;
                    return a
                };
                d.rotateY = function(a, b, c) {
                    var d = a.m,
                        f = b.m,
                        l = Math.sin(c);
                    c = Math.cos(c);
                    var e = f[0],
                        k = f[1],
                        h = f[2],
                        g = f[3],
                        n = f[8],
                        p = f[9],
                        t = f[10],
                        u = f[11];
                    b !== a && (d[4] = f[4], d[5] = f[5], d[6] = f[6], d[7] = f[7], d[12] = f[12], d[13] = f[13], d[14] = f[14], d[15] = f[15]);
                    d[0] = e * c - n * l;
                    d[1] = k * c - p * l;
                    d[2] = h * c - t * l;
                    d[3] = g * c - u * l;
                    d[8] = e * l + n * c;
                    d[9] = k * l + p * c;
                    d[10] = h * l + t * c;
                    d[11] = g * l + u * c;
                    return a
                };
                d.rotateZ = function(a,
                    b, c) {
                    var d = b.m,
                        f = a.m,
                        l = Math.sin(c);
                    c = Math.cos(c);
                    var e = b.m[0],
                        k = b.m[1],
                        h = b.m[2],
                        g = b.m[3],
                        n = b.m[4],
                        p = b.m[5],
                        t = b.m[6],
                        u = b.m[7];
                    b !== a && (f[8] = d[8], f[9] = d[9], f[10] = d[10], f[11] = d[11], f[12] = d[12], f[13] = d[13], f[14] = d[14], f[15] = d[15]);
                    f[0] = e * c + n * l;
                    f[1] = k * c + p * l;
                    f[2] = h * c + t * l;
                    f[3] = g * c + u * l;
                    f[4] = n * c - e * l;
                    f[5] = p * c - k * l;
                    f[6] = t * c - h * l;
                    f[7] = u * c - g * l;
                    return a
                };
                d.fromTranslation = function(a, b) {
                    var c = a.m;
                    c[0] = 1;
                    c[1] = 0;
                    c[2] = 0;
                    c[3] = 0;
                    c[4] = 0;
                    c[5] = 1;
                    c[6] = 0;
                    c[7] = 0;
                    c[8] = 0;
                    c[9] = 0;
                    c[10] = 1;
                    c[11] = 0;
                    c[12] = b.x;
                    c[13] = b.y;
                    c[14] = b.z;
                    c[15] =
                        1;
                    return a
                };
                d.fromScaling = function(a, b) {
                    var c = a.m;
                    c[0] = b.x;
                    c[1] = 0;
                    c[2] = 0;
                    c[3] = 0;
                    c[4] = 0;
                    c[5] = b.y;
                    c[6] = 0;
                    c[7] = 0;
                    c[8] = 0;
                    c[9] = 0;
                    c[10] = b.z;
                    c[11] = 0;
                    c[12] = 0;
                    c[13] = 0;
                    c[14] = 0;
                    c[15] = 1;
                    return a
                };
                d.fromRotation = function(a, b, c) {
                    var d = c.x,
                        f = c.y;
                    c = c.z;
                    var e = Math.sqrt(d * d + f * f + c * c);
                    if (Math.abs(e) < l.EPSILON) return null;
                    e = 1 / e;
                    d *= e;
                    f *= e;
                    c *= e;
                    e = Math.sin(b);
                    b = Math.cos(b);
                    var k = 1 - b,
                        h = a.m;
                    h[0] = d * d * k + b;
                    h[1] = f * d * k + c * e;
                    h[2] = c * d * k - f * e;
                    h[3] = 0;
                    h[4] = d * f * k - c * e;
                    h[5] = f * f * k + b;
                    h[6] = c * f * k + d * e;
                    h[7] = 0;
                    h[8] = d * c * k + f * e;
                    h[9] = f * c * k - d * e;
                    h[10] =
                        c * c * k + b;
                    h[11] = 0;
                    h[12] = 0;
                    h[13] = 0;
                    h[14] = 0;
                    h[15] = 1;
                    return a
                };
                d.fromXRotation = function(a, b) {
                    var c = Math.sin(b);
                    b = Math.cos(b);
                    var d = a.m;
                    d[0] = 1;
                    d[1] = 0;
                    d[2] = 0;
                    d[3] = 0;
                    d[4] = 0;
                    d[5] = b;
                    d[6] = c;
                    d[7] = 0;
                    d[8] = 0;
                    d[9] = -c;
                    d[10] = b;
                    d[11] = 0;
                    d[12] = 0;
                    d[13] = 0;
                    d[14] = 0;
                    d[15] = 1;
                    return a
                };
                d.fromYRotation = function(a, b) {
                    var c = Math.sin(b);
                    b = Math.cos(b);
                    var d = a.m;
                    d[0] = b;
                    d[1] = 0;
                    d[2] = -c;
                    d[3] = 0;
                    d[4] = 0;
                    d[5] = 1;
                    d[6] = 0;
                    d[7] = 0;
                    d[8] = c;
                    d[9] = 0;
                    d[10] = b;
                    d[11] = 0;
                    d[12] = 0;
                    d[13] = 0;
                    d[14] = 0;
                    d[15] = 1;
                    return a
                };
                d.fromZRotation = function(a, b) {
                    var c = Math.sin(b);
                    b = Math.cos(b);
                    var d = a.m;
                    d[0] = b;
                    d[1] = c;
                    d[2] = 0;
                    d[3] = 0;
                    d[4] = -c;
                    d[5] = b;
                    d[6] = 0;
                    d[7] = 0;
                    d[8] = 0;
                    d[9] = 0;
                    d[10] = 1;
                    d[11] = 0;
                    d[12] = 0;
                    d[13] = 0;
                    d[14] = 0;
                    d[15] = 1;
                    return a
                };
                d.fromRT = function(a, b, c) {
                    var d = b.x,
                        f = b.y,
                        l = b.z,
                        e = b.w,
                        k = d + d,
                        h = f + f,
                        g = l + l;
                    b = d * k;
                    var n = d * h;
                    d *= g;
                    var p = f * h;
                    f *= g;
                    l *= g;
                    k *= e;
                    h *= e;
                    e *= g;
                    g = a.m;
                    g[0] = 1 - (p + l);
                    g[1] = n + e;
                    g[2] = d - h;
                    g[3] = 0;
                    g[4] = n - e;
                    g[5] = 1 - (b + l);
                    g[6] = f + k;
                    g[7] = 0;
                    g[8] = d + h;
                    g[9] = f - k;
                    g[10] = 1 - (b + p);
                    g[11] = 0;
                    g[12] = c.x;
                    g[13] = c.y;
                    g[14] = c.z;
                    g[15] = 1;
                    return a
                };
                d.getTranslation = function(a, b) {
                    b = b.m;
                    a.x = b[12];
                    a.y =
                        b[13];
                    a.z = b[14];
                    return a
                };
                d.getScaling = function(a, b) {
                    var c = b.m,
                        d = L.m;
                    b = d[0] = c[0];
                    var l = d[1] = c[1],
                        e = d[2] = c[2],
                        k = d[3] = c[4],
                        h = d[4] = c[5],
                        g = d[5] = c[6],
                        n = d[6] = c[8],
                        p = d[7] = c[9];
                    c = d[8] = c[10];
                    a.x = Math.sqrt(b * b + l * l + e * e);
                    a.y = Math.sqrt(k * k + h * h + g * g);
                    a.z = Math.sqrt(n * n + p * p + c * c);
                    0 > f["default"].determinant(L) && (a.x *= -1);
                    return a
                };
                d.getRotation = function(a, b) {
                    b = b.m;
                    var c = b[0] + b[5] + b[10];
                    0 < c ? (c = 2 * Math.sqrt(c + 1), a.w = .25 * c, a.x = (b[6] - b[9]) / c, a.y = (b[8] - b[2]) / c, a.z = (b[1] - b[4]) / c) : b[0] > b[5] && b[0] > b[10] ? (c = 2 * Math.sqrt(1 + b[0] -
                        b[5] - b[10]), a.w = (b[6] - b[9]) / c, a.x = .25 * c, a.y = (b[1] + b[4]) / c, a.z = (b[8] + b[2]) / c) : b[5] > b[10] ? (c = 2 * Math.sqrt(1 + b[5] - b[0] - b[10]), a.w = (b[8] - b[2]) / c, a.x = (b[1] + b[4]) / c, a.y = .25 * c, a.z = (b[6] + b[9]) / c) : (c = 2 * Math.sqrt(1 + b[10] - b[0] - b[5]), a.w = (b[1] - b[4]) / c, a.x = (b[8] + b[2]) / c, a.y = (b[6] + b[9]) / c, a.z = .25 * c);
                    return a
                };
                d.toRTS = function(c, d, l, e) {
                    c = c.m;
                    var k = L.m;
                    e.x = a["default"].set(K, c[0], c[1], c[2]).mag();
                    k[0] = c[0] / e.x;
                    k[1] = c[1] / e.x;
                    k[2] = c[2] / e.x;
                    e.y = a["default"].set(K, c[4], c[5], c[6]).mag();
                    k[3] = c[4] / e.y;
                    k[4] = c[5] / e.y;
                    k[5] =
                        c[6] / e.y;
                    e.z = a["default"].set(K, c[8], c[9], c[10]).mag();
                    k[6] = c[8] / e.z;
                    k[7] = c[9] / e.z;
                    k[8] = c[10] / e.z;
                    0 > f["default"].determinant(L) && (e.x *= -1, k[0] *= -1, k[1] *= -1, k[2] *= -1);
                    b["default"].fromMat3(d, L);
                    a["default"].set(l, c[12], c[13], c[14])
                };
                d.fromRTS = function(a, b, c, d) {
                    var f = b.x,
                        e = b.y,
                        l = b.z,
                        k = b.w,
                        h = f + f,
                        g = e + e,
                        n = l + l;
                    b = f * h;
                    var p = f * g;
                    f *= n;
                    var t = e * g;
                    e *= n;
                    l *= n;
                    h *= k;
                    g *= k;
                    k *= n;
                    n = d.x;
                    var u = d.y;
                    d = d.z;
                    var v = a.m;
                    v[0] = (1 - (t + l)) * n;
                    v[1] = (p + k) * n;
                    v[2] = (f - g) * n;
                    v[3] = 0;
                    v[4] = (p - k) * u;
                    v[5] = (1 - (b + l)) * u;
                    v[6] = (e + h) * u;
                    v[7] = 0;
                    v[8] = (f +
                        g) * d;
                    v[9] = (e - h) * d;
                    v[10] = (1 - (b + t)) * d;
                    v[11] = 0;
                    v[12] = c.x;
                    v[13] = c.y;
                    v[14] = c.z;
                    v[15] = 1;
                    return a
                };
                d.fromRTSOrigin = function(a, b, c, d, f) {
                    var e = b.x,
                        l = b.y,
                        k = b.z,
                        h = b.w,
                        g = e + e,
                        n = l + l,
                        p = k + k;
                    b = e * g;
                    var t = e * n;
                    e *= p;
                    var u = l * n;
                    l *= p;
                    k *= p;
                    g *= h;
                    n *= h;
                    h *= p;
                    p = d.x;
                    var v = d.y;
                    d = d.z;
                    var x = f.x,
                        m = f.y;
                    f = f.z;
                    var w = a.m;
                    w[0] = (1 - (u + k)) * p;
                    w[1] = (t + h) * p;
                    w[2] = (e - n) * p;
                    w[3] = 0;
                    w[4] = (t - h) * v;
                    w[5] = (1 - (b + k)) * v;
                    w[6] = (l + g) * v;
                    w[7] = 0;
                    w[8] = (e + n) * d;
                    w[9] = (l - g) * d;
                    w[10] = (1 - (b + u)) * d;
                    w[11] = 0;
                    w[12] = c.x + x - (w[0] * x + w[4] * m + w[8] * f);
                    w[13] = c.y + m - (w[1] * x + w[5] * m + w[9] *
                        f);
                    w[14] = c.z + f - (w[2] * x + w[6] * m + w[10] * f);
                    w[15] = 1;
                    return a
                };
                d.fromQuat = function(a, b) {
                    var c = b.x,
                        d = b.y,
                        f = b.z,
                        e = b.w,
                        l = c + c,
                        k = d + d,
                        h = f + f;
                    c *= l;
                    b = d * l;
                    d *= k;
                    var g = f * l,
                        n = f * k;
                    f *= h;
                    l *= e;
                    k *= e;
                    e *= h;
                    h = a.m;
                    h[0] = 1 - d - f;
                    h[1] = b + e;
                    h[2] = g - k;
                    h[3] = 0;
                    h[4] = b - e;
                    h[5] = 1 - c - f;
                    h[6] = n + l;
                    h[7] = 0;
                    h[8] = g + k;
                    h[9] = n - l;
                    h[10] = 1 - c - d;
                    h[11] = 0;
                    h[12] = 0;
                    h[13] = 0;
                    h[14] = 0;
                    h[15] = 1;
                    return a
                };
                d.frustum = function(a, b, c, d, f, e, l) {
                    var k = 1 / (c - b),
                        h = 1 / (f - d),
                        g = 1 / (e - l),
                        n = a.m;
                    n[0] = 2 * e * k;
                    n[1] = 0;
                    n[2] = 0;
                    n[3] = 0;
                    n[4] = 0;
                    n[5] = 2 * e * h;
                    n[6] = 0;
                    n[7] = 0;
                    n[8] = (c + b) * k;
                    n[9] = (f + d) * h;
                    n[10] = (l + e) * g;
                    n[11] = -1;
                    n[12] = 0;
                    n[13] = 0;
                    n[14] = l * e * 2 * g;
                    n[15] = 0;
                    return a
                };
                d.perspective = function(a, b, c, d, f) {
                    b = 1 / Math.tan(b / 2);
                    var e = 1 / (d - f),
                        l = a.m;
                    l[0] = b / c;
                    l[1] = 0;
                    l[2] = 0;
                    l[3] = 0;
                    l[4] = 0;
                    l[5] = b;
                    l[6] = 0;
                    l[7] = 0;
                    l[8] = 0;
                    l[9] = 0;
                    l[10] = (f + d) * e;
                    l[11] = -1;
                    l[12] = 0;
                    l[13] = 0;
                    l[14] = 2 * f * d * e;
                    l[15] = 0;
                    return a
                };
                d.ortho = function(a, b, c, d, f, l, e) {
                    var k = 1 / (b - c),
                        h = 1 / (d - f),
                        g = 1 / (l - e),
                        n = a.m;
                    n[0] = -2 * k;
                    n[1] = 0;
                    n[2] = 0;
                    n[3] = 0;
                    n[4] = 0;
                    n[5] = -2 * h;
                    n[6] = 0;
                    n[7] = 0;
                    n[8] = 0;
                    n[9] = 0;
                    n[10] = 2 * g;
                    n[11] = 0;
                    n[12] = (b + c) * k;
                    n[13] = (f + d) * h;
                    n[14] = (e + l) * g;
                    n[15] = 1;
                    return a
                };
                d.lookAt = function(a, b, c, d) {
                    var f = b.x,
                        l = b.y;
                    b = b.z;
                    var e = d.x,
                        k = d.y,
                        h = d.z;
                    d = f - c.x;
                    var g = l - c.y;
                    c = b - c.z;
                    var n = 1 / Math.sqrt(d * d + g * g + c * c);
                    d *= n;
                    g *= n;
                    c *= n;
                    var p = k * c - h * g;
                    h = h * d - e * c;
                    e = e * g - k * d;
                    n = 1 / Math.sqrt(p * p + h * h + e * e);
                    p *= n;
                    h *= n;
                    e *= n;
                    k = g * e - c * h;
                    n = c * p - d * e;
                    var t = d * h - g * p,
                        u = a.m;
                    u[0] = p;
                    u[1] = k;
                    u[2] = d;
                    u[3] = 0;
                    u[4] = h;
                    u[5] = n;
                    u[6] = g;
                    u[7] = 0;
                    u[8] = e;
                    u[9] = t;
                    u[10] = c;
                    u[11] = 0;
                    u[12] = -(p * f + h * l + e * b);
                    u[13] = -(k * f + n * l + t * b);
                    u[14] = -(d * f + g * l + c * b);
                    u[15] = 1;
                    return a
                };
                d.inverseTranspose = function(a, b) {
                    b = b.m;
                    n = b[0];
                    u = b[1];
                    v = b[2];
                    p = b[3];
                    t = b[4];
                    x = b[5];
                    z = b[6];
                    E = b[7];
                    w = b[8];
                    A = b[9];
                    B = b[10];
                    y = b[11];
                    C = b[12];
                    F = b[13];
                    G = b[14];
                    D = b[15];
                    var c = n * x - u * t,
                        d = n * z - v * t,
                        f = n * E - p * t,
                        e = u * z - v * x,
                        l = u * E - p * x,
                        k = v * E - p * z,
                        h = w * F - A * C,
                        g = w * G - B * C,
                        m = w * D - y * C,
                        q = A * G - B * F,
                        I = A * D - y * F,
                        O = B * D - y * G,
                        Q = c * O - d * I + f * q + e * m - l * g + k * h;
                    if (!Q) return null;
                    Q = 1 / Q;
                    b = a.m;
                    b[0] = (x * O - z * I + E * q) * Q;
                    b[1] = (z * m - t * O - E * g) * Q;
                    b[2] = (t * I - x * m + E * h) * Q;
                    b[3] = 0;
                    b[4] = (v * I - u * O - p * q) * Q;
                    b[5] = (n * O - v * m + p * g) * Q;
                    b[6] = (u * m - n * I - p * h) * Q;
                    b[7] = 0;
                    b[8] = (F * k - G * l + D * e) * Q;
                    b[9] = (G * f - C * k - D * d) * Q;
                    b[10] = (C * l - F * f + D * c) * Q;
                    b[11] = 0;
                    b[12] = 0;
                    b[13] = 0;
                    b[14] =
                        0;
                    b[15] = 1;
                    return a
                };
                d.add = function(a, b, c) {
                    var d = a.m;
                    b = b.m;
                    c = c.m;
                    d[0] = b[0] + c[0];
                    d[1] = b[1] + c[1];
                    d[2] = b[2] + c[2];
                    d[3] = b[3] + c[3];
                    d[4] = b[4] + c[4];
                    d[5] = b[5] + c[5];
                    d[6] = b[6] + c[6];
                    d[7] = b[7] + c[7];
                    d[8] = b[8] + c[8];
                    d[9] = b[9] + c[9];
                    d[10] = b[10] + c[10];
                    d[11] = b[11] + c[11];
                    d[12] = b[12] + c[12];
                    d[13] = b[13] + c[13];
                    d[14] = b[14] + c[14];
                    d[15] = b[15] + c[15];
                    return a
                };
                d.subtract = function(a, b, c) {
                    var d = a.m;
                    b = b.m;
                    c = c.m;
                    d[0] = b[0] - c[0];
                    d[1] = b[1] - c[1];
                    d[2] = b[2] - c[2];
                    d[3] = b[3] - c[3];
                    d[4] = b[4] - c[4];
                    d[5] = b[5] - c[5];
                    d[6] = b[6] - c[6];
                    d[7] = b[7] - c[7];
                    d[8] = b[8] - c[8];
                    d[9] = b[9] - c[9];
                    d[10] = b[10] - c[10];
                    d[11] = b[11] - c[11];
                    d[12] = b[12] - c[12];
                    d[13] = b[13] - c[13];
                    d[14] = b[14] - c[14];
                    d[15] = b[15] - c[15];
                    return a
                };
                d.multiplyScalar = function(a, b, c) {
                    var d = a.m;
                    b = b.m;
                    d[0] = b[0] * c;
                    d[1] = b[1] * c;
                    d[2] = b[2] * c;
                    d[3] = b[3] * c;
                    d[4] = b[4] * c;
                    d[5] = b[5] * c;
                    d[6] = b[6] * c;
                    d[7] = b[7] * c;
                    d[8] = b[8] * c;
                    d[9] = b[9] * c;
                    d[10] = b[10] * c;
                    d[11] = b[11] * c;
                    d[12] = b[12] * c;
                    d[13] = b[13] * c;
                    d[14] = b[14] * c;
                    d[15] = b[15] * c;
                    return a
                };
                d.multiplyScalarAndAdd = function(a, b, c, d) {
                    var f = a.m;
                    b = b.m;
                    c = c.m;
                    f[0] = b[0] + c[0] * d;
                    f[1] = b[1] +
                        c[1] * d;
                    f[2] = b[2] + c[2] * d;
                    f[3] = b[3] + c[3] * d;
                    f[4] = b[4] + c[4] * d;
                    f[5] = b[5] + c[5] * d;
                    f[6] = b[6] + c[6] * d;
                    f[7] = b[7] + c[7] * d;
                    f[8] = b[8] + c[8] * d;
                    f[9] = b[9] + c[9] * d;
                    f[10] = b[10] + c[10] * d;
                    f[11] = b[11] + c[11] * d;
                    f[12] = b[12] + c[12] * d;
                    f[13] = b[13] + c[13] * d;
                    f[14] = b[14] + c[14] * d;
                    f[15] = b[15] + c[15] * d;
                    return a
                };
                d.strictEquals = function(a, b) {
                    a = a.m;
                    b = b.m;
                    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] ===
                        b[13] && a[14] === b[14] && a[15] === b[15]
                };
                d.equals = function(a, b, c) {
                    void 0 === c && (c = l.EPSILON);
                    a = a.m;
                    b = b.m;
                    return Math.abs(a[0] - b[0]) <= c * Math.max(1, Math.abs(a[0]), Math.abs(b[0])) && Math.abs(a[1] - b[1]) <= c * Math.max(1, Math.abs(a[1]), Math.abs(b[1])) && Math.abs(a[2] - b[2]) <= c * Math.max(1, Math.abs(a[2]), Math.abs(b[2])) && Math.abs(a[3] - b[3]) <= c * Math.max(1, Math.abs(a[3]), Math.abs(b[3])) && Math.abs(a[4] - b[4]) <= c * Math.max(1, Math.abs(a[4]), Math.abs(b[4])) && Math.abs(a[5] - b[5]) <= c * Math.max(1, Math.abs(a[5]), Math.abs(b[5])) &&
                        Math.abs(a[6] - b[6]) <= c * Math.max(1, Math.abs(a[6]), Math.abs(b[6])) && Math.abs(a[7] - b[7]) <= c * Math.max(1, Math.abs(a[7]), Math.abs(b[7])) && Math.abs(a[8] - b[8]) <= c * Math.max(1, Math.abs(a[8]), Math.abs(b[8])) && Math.abs(a[9] - b[9]) <= c * Math.max(1, Math.abs(a[9]), Math.abs(b[9])) && Math.abs(a[10] - b[10]) <= c * Math.max(1, Math.abs(a[10]), Math.abs(b[10])) && Math.abs(a[11] - b[11]) <= c * Math.max(1, Math.abs(a[11]), Math.abs(b[11])) && Math.abs(a[12] - b[12]) <= c * Math.max(1, Math.abs(a[12]), Math.abs(b[12])) && Math.abs(a[13] - b[13]) <= c * Math.max(1,
                            Math.abs(a[13]), Math.abs(b[13])) && Math.abs(a[14] - b[14]) <= c * Math.max(1, Math.abs(a[14]), Math.abs(b[14])) && Math.abs(a[15] - b[15]) <= c * Math.max(1, Math.abs(a[15]), Math.abs(b[15]))
                };
                d.adjoint = function(a, b) {
                    var c = b.m;
                    b = a.m;
                    var d = c[0],
                        f = c[1],
                        l = c[2],
                        e = c[3],
                        k = c[4],
                        h = c[5],
                        g = c[6],
                        n = c[7],
                        p = c[8],
                        t = c[9],
                        u = c[10],
                        v = c[11],
                        x = c[12],
                        m = c[13],
                        w = c[14];
                    c = c[15];
                    b[0] = h * (u * c - v * w) - t * (g * c - n * w) + m * (g * v - n * u);
                    b[1] = -(f * (u * c - v * w) - t * (l * c - e * w) + m * (l * v - e * u));
                    b[2] = f * (g * c - n * w) - h * (l * c - e * w) + m * (l * n - e * g);
                    b[3] = -(f * (g * v - n * u) - h * (l * v - e * u) + t * (l * n - e *
                        g));
                    b[4] = -(k * (u * c - v * w) - p * (g * c - n * w) + x * (g * v - n * u));
                    b[5] = d * (u * c - v * w) - p * (l * c - e * w) + x * (l * v - e * u);
                    b[6] = -(d * (g * c - n * w) - k * (l * c - e * w) + x * (l * n - e * g));
                    b[7] = d * (g * v - n * u) - k * (l * v - e * u) + p * (l * n - e * g);
                    b[8] = k * (t * c - v * m) - p * (h * c - n * m) + x * (h * v - n * t);
                    b[9] = -(d * (t * c - v * m) - p * (f * c - e * m) + x * (f * v - e * t));
                    b[10] = d * (h * c - n * m) - k * (f * c - e * m) + x * (f * n - e * h);
                    b[11] = -(d * (h * v - n * t) - k * (f * v - e * t) + p * (f * n - e * h));
                    b[12] = -(k * (t * w - u * m) - p * (h * w - g * m) + x * (h * u - g * t));
                    b[13] = d * (t * w - u * m) - p * (f * w - l * m) + x * (f * u - l * t);
                    b[14] = -(d * (h * w - g * m) - k * (f * w - l * m) + x * (f * g - l * h));
                    b[15] = d * (h * u - g * t) - k * (f *
                        u - l * t) + p * (f * g - l * h);
                    return a
                };
                d.toArray = function(a, b, c) {
                    void 0 === c && (c = 0);
                    b = b.m;
                    for (var d = 0; 16 > d; d++) a[c + d] = b[d];
                    return a
                };
                d.fromArray = function(a, b, c) {
                    void 0 === c && (c = 0);
                    for (var d = a.m, f = 0; 16 > f; f++) d[f] = b[c + f];
                    return a
                };
                k.clone = function() {
                    var a = this.m;
                    return new d(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15])
                };
                k.set = function(a) {
                    var b = this.m;
                    a = a.m;
                    b[0] = a[0];
                    b[1] = a[1];
                    b[2] = a[2];
                    b[3] = a[3];
                    b[4] = a[4];
                    b[5] = a[5];
                    b[6] = a[6];
                    b[7] = a[7];
                    b[8] = a[8];
                    b[9] = a[9];
                    b[10] = a[10];
                    b[11] =
                        a[11];
                    b[12] = a[12];
                    b[13] = a[13];
                    b[14] = a[14];
                    b[15] = a[15];
                    return this
                };
                k.equals = function(a) {
                    return d.strictEquals(this, a)
                };
                k.fuzzyEquals = function(a) {
                    return d.equals(this, a)
                };
                k.toString = function() {
                    var a = this.m;
                    return a ? "[\n" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ",\n" + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ",\n" + a[8] + ", " + a[9] + ", " + a[10] + ", " + a[11] + ",\n" + a[12] + ", " + a[13] + ", " + a[14] + ", " + a[15] + "\n]" : "[\n1, 0, 0, 0\n0, 1, 0, 0\n0, 0, 1, 0\n0, 0, 0, 1\n]"
                };
                k.identity = function() {
                    return d.identity(this)
                };
                k.transpose =
                    function(a) {
                        a = a || new d;
                        return d.transpose(a, this)
                    };
                k.invert = function(a) {
                    a = a || new d;
                    return d.invert(a, this)
                };
                k.adjoint = function(a) {
                    a = a || new d;
                    return d.adjoint(a, this)
                };
                k.determinant = function() {
                    return d.determinant(this)
                };
                k.add = function(a, b) {
                    b = b || new d;
                    return d.add(b, this, a)
                };
                k.subtract = function(a) {
                    return d.subtract(this, this, a)
                };
                k.multiply = function(a) {
                    return d.multiply(this, this, a)
                };
                k.multiplyScalar = function(a) {
                    return d.multiplyScalar(this, this, a)
                };
                k.translate = function(a, b) {
                    b = b || new d;
                    return d.translate(b,
                        this, a)
                };
                k.scale = function(a, b) {
                    b = b || new d;
                    return d.scale(b, this, a)
                };
                k.rotate = function(a, b, c) {
                    c = c || new d;
                    return d.rotate(c, this, a, b)
                };
                k.getTranslation = function(b) {
                    b = b || new a["default"];
                    return d.getTranslation(b, this)
                };
                k.getScale = function(b) {
                    b = b || new a["default"];
                    return d.getScaling(b, this)
                };
                k.getRotation = function(a) {
                    a = a || new b["default"];
                    return d.getRotation(a, this)
                };
                k.fromRTS = function(a, b, c) {
                    return d.fromRTS(this, a, b, c)
                };
                k.fromQuat = function(a) {
                    return d.fromQuat(this, a)
                };
                return d
            }(k["default"]);
        m["default"] =
            I;
        I.mul = I.multiply;
        I.sub = I.subtract;
        I.IDENTITY = Object.freeze(new I);
        var K = new a["default"],
            L = new f["default"];
        c["default"].fastDefine("cc.Mat4", I, {
            m00: 1,
            m01: 0,
            m02: 0,
            m03: 0,
            m04: 0,
            m05: 1,
            m06: 0,
            m07: 0,
            m08: 0,
            m09: 0,
            m10: 1,
            m11: 0,
            m12: 0,
            m13: 0,
            m14: 0,
            m15: 1
        });
        g = function(a) {
            Object.defineProperty(I.prototype, "m" + a, {
                get: function() {
                    return this.m[a]
                },
                set: function(b) {
                    this.m[a] = b
                }
            })
        };
        for (k = 0; 16 > k; k++) g(k);
        cc.mat4 = function(a, b, c, d, f, l, e, k, h, g, n, p, t, u, v, x) {
            b = new I(a, b, c, d, f, l, e, k, h, g, n, p, t, u, v, x);
            void 0 === a && I.identity(b);
            return b
        };
        cc.Mat4 = I;
        q.exports = m["default"]
    }, {
        "../platform/CCClass": 227,
        "./mat3": 326,
        "./quat": 328,
        "./utils": 332,
        "./value-type": 333,
        "./vec3": 335
    }],
    328: [function(g, q, m) {
        function h(a) {
            return a && a.__esModule ? a : {
                default: a
            }
        }

        function e(a, b) {
            a.prototype = Object.create(b.prototype);
            a.prototype.constructor = a;
            d(a, b)
        }

        function d(a, b) {
            d = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(a, b) {
                a.__proto__ = b;
                return a
            };
            return d(a, b)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var k = h(g("./value-type")),
            c = h(g("../platform/CCClass")),
            a = h(g("./vec3")),
            b = h(g("./mat3")),
            l = g("./utils"),
            f = 0,
            n = 0,
            u = 0,
            v = 0,
            p = function(c) {
                function d(a, b, d, f) {
                    void 0 === a && (a = 0);
                    void 0 === b && (b = 0);
                    void 0 === d && (d = 0);
                    void 0 === f && (f = 1);
                    var l = c.call(this) || this;
                    l.x = void 0;
                    l.y = void 0;
                    l.z = void 0;
                    l.w = void 0;
                    a && "object" === typeof a ? (l.x = a.x, l.y = a.y, l.z = a.z, l.w = a.w) : (l.x = a, l.y = b, l.z = d, l.w = f);
                    return l
                }
                e(d, c);
                var k = d.prototype;
                k.mul = function(a, b) {
                    return d.multiply(b || new d, this, a)
                };
                d.clone = function(a) {
                    return new d(a.x, a.y, a.z, a.w)
                };
                d.copy = function(a, b) {
                    a.x = b.x;
                    a.y = b.y;
                    a.z = b.z;
                    a.w = b.w;
                    return a
                };
                d.set = function(a, b, c, d, f) {
                    a.x = b;
                    a.y = c;
                    a.z = d;
                    a.w = f;
                    return a
                };
                d.identity = function(a) {
                    a.x = 0;
                    a.y = 0;
                    a.z = 0;
                    a.w = 1;
                    return a
                };
                d.rotationTo = function(b, c, f) {
                    var l = a["default"].dot(c, f);
                    if (-.999999 > l) return a["default"].cross(z, a["default"].RIGHT, c), 1E-6 > z.mag() && a["default"].cross(z, a["default"].UP, c), a["default"].normalize(z, z), d.fromAxisAngle(b, z, Math.PI), b;
                    if (.999999 < l) return b.x = 0, b.y = 0, b.z = 0, b.w = 1, b;
                    a["default"].cross(z, c, f);
                    b.x = z.x;
                    b.y = z.y;
                    b.z = z.z;
                    b.w = 1 + l;
                    return d.normalize(b,
                        b)
                };
                d.getAxisAngle = function(a, b) {
                    var c = 2 * Math.acos(b.w),
                        d = Math.sin(c / 2);
                    0 !== d ? (a.x = b.x / d, a.y = b.y / d, a.z = b.z / d) : (a.x = 1, a.y = 0, a.z = 0);
                    return c
                };
                d.multiply = function(a, b, c) {
                    f = b.x * c.w + b.w * c.x + b.y * c.z - b.z * c.y;
                    n = b.y * c.w + b.w * c.y + b.z * c.x - b.x * c.z;
                    u = b.z * c.w + b.w * c.z + b.x * c.y - b.y * c.x;
                    v = b.w * c.w - b.x * c.x - b.y * c.y - b.z * c.z;
                    a.x = f;
                    a.y = n;
                    a.z = u;
                    a.w = v;
                    return a
                };
                d.multiplyScalar = function(a, b, c) {
                    a.x = b.x * c;
                    a.y = b.y * c;
                    a.z = b.z * c;
                    a.w = b.w * c;
                    return a
                };
                d.scaleAndAdd = function(a, b, c, d) {
                    a.x = b.x + c.x * d;
                    a.y = b.y + c.y * d;
                    a.z = b.z + c.z * d;
                    a.w = b.w +
                        c.w * d;
                    return a
                };
                d.rotateX = function(a, b, c) {
                    c *= .5;
                    var d = Math.sin(c);
                    c = Math.cos(c);
                    f = b.x * c + b.w * d;
                    n = b.y * c + b.z * d;
                    u = b.z * c - b.y * d;
                    v = b.w * c - b.x * d;
                    a.x = f;
                    a.y = n;
                    a.z = u;
                    a.w = v;
                    return a
                };
                d.rotateY = function(a, b, c) {
                    c *= .5;
                    var d = Math.sin(c);
                    c = Math.cos(c);
                    f = b.x * c - b.z * d;
                    n = b.y * c + b.w * d;
                    u = b.z * c + b.x * d;
                    v = b.w * c - b.y * d;
                    a.x = f;
                    a.y = n;
                    a.z = u;
                    a.w = v;
                    return a
                };
                d.rotateZ = function(a, b, c) {
                    c *= .5;
                    var d = Math.sin(c);
                    c = Math.cos(c);
                    f = b.x * c + b.y * d;
                    n = b.y * c - b.x * d;
                    u = b.z * c + b.w * d;
                    v = b.w * c - b.z * d;
                    a.x = f;
                    a.y = n;
                    a.z = u;
                    a.w = v;
                    return a
                };
                d.rotateAround = function(b,
                    c, f, l) {
                    d.invert(t, c);
                    a["default"].transformQuat(z, f, t);
                    d.fromAxisAngle(t, z, l);
                    d.multiply(b, c, t);
                    return b
                };
                d.rotateAroundLocal = function(a, b, c, f) {
                    d.fromAxisAngle(t, c, f);
                    d.multiply(a, b, t);
                    return a
                };
                d.calculateW = function(a, b) {
                    a.x = b.x;
                    a.y = b.y;
                    a.z = b.z;
                    a.w = Math.sqrt(Math.abs(1 - b.x * b.x - b.y * b.y - b.z * b.z));
                    return a
                };
                d.dot = function(a, b) {
                    return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w
                };
                d.lerp = function(a, b, c, d) {
                    a.x = b.x + d * (c.x - b.x);
                    a.y = b.y + d * (c.y - b.y);
                    a.z = b.z + d * (c.z - b.z);
                    a.w = b.w + d * (c.w - b.w);
                    return a
                };
                d.slerp = function(a,
                    b, c, d) {
                    var f = b.x * c.x + b.y * c.y + b.z * c.z + b.w * c.w;
                    0 > f && (f = -f, c.x = -c.x, c.y = -c.y, c.z = -c.z, c.w = -c.w);
                    if (1E-6 < 1 - f) {
                        var l = Math.acos(f),
                            e = Math.sin(l);
                        f = Math.sin((1 - d) * l) / e;
                        d = Math.sin(d * l) / e
                    } else f = 1 - d;
                    a.x = f * b.x + d * c.x;
                    a.y = f * b.y + d * c.y;
                    a.z = f * b.z + d * c.z;
                    a.w = f * b.w + d * c.w;
                    return a
                };
                d.sqlerp = function(a, b, c, f, l, e) {
                    d.slerp(t, b, l, e);
                    d.slerp(x, c, f, e);
                    d.slerp(a, t, x, 2 * e * (1 - e));
                    return a
                };
                d.invert = function(a, b) {
                    var c = b.x * b.x + b.y * b.y + b.z * b.z + b.w * b.w;
                    c = c ? 1 / c : 0;
                    a.x = -b.x * c;
                    a.y = -b.y * c;
                    a.z = -b.z * c;
                    a.w = b.w * c;
                    return a
                };
                d.conjugate = function(a,
                    b) {
                    a.x = -b.x;
                    a.y = -b.y;
                    a.z = -b.z;
                    a.w = b.w;
                    return a
                };
                d.len = function(a) {
                    return Math.sqrt(a.x * a.x + a.y * a.y + a.z * a.z + a.w * a.w)
                };
                d.lengthSqr = function(a) {
                    return a.x * a.x + a.y * a.y + a.z * a.z + a.w * a.w
                };
                d.normalize = function(a, b) {
                    var c = b.x * b.x + b.y * b.y + b.z * b.z + b.w * b.w;
                    0 < c && (c = 1 / Math.sqrt(c), a.x = b.x * c, a.y = b.y * c, a.z = b.z * c, a.w = b.w * c);
                    return a
                };
                d.fromAxes = function(a, c, f, l) {
                    b["default"].set(E, c.x, c.y, c.z, f.x, f.y, f.z, l.x, l.y, l.z);
                    return d.normalize(a, d.fromMat3(a, E))
                };
                d.fromViewUp = function(a, c, f) {
                    b["default"].fromViewUp(E, c, f);
                    return d.normalize(a, d.fromMat3(a, E))
                };
                d.fromAxisAngle = function(a, b, c) {
                    c *= .5;
                    var d = Math.sin(c);
                    a.x = d * b.x;
                    a.y = d * b.y;
                    a.z = d * b.z;
                    a.w = Math.cos(c);
                    return a
                };
                d.fromAngleZ = function(a, b) {
                    b *= w;
                    a.x = a.y = 0;
                    a.z = Math.sin(b);
                    a.w = Math.cos(b);
                    return a
                };
                d.fromMat3 = function(a, b) {
                    var c = b.m,
                        d = c[0];
                    b = c[1];
                    var f = c[2],
                        l = c[3],
                        e = c[4],
                        k = c[5],
                        h = c[6],
                        g = c[7];
                    c = c[8];
                    var n = d + e + c;
                    0 < n ? (d = .5 / Math.sqrt(n + 1), a.w = .25 / d, a.x = (k - g) * d, a.y = (h - f) * d, a.z = (b - l) * d) : d > e && d > c ? (d = 2 * Math.sqrt(1 + d - e - c), a.w = (k - g) / d, a.x = .25 * d, a.y = (l + b) / d, a.z = (h + f) / d) :
                        e > c ? (d = 2 * Math.sqrt(1 + e - d - c), a.w = (h - f) / d, a.x = (l + b) / d, a.y = .25 * d, a.z = (g + k) / d) : (d = 2 * Math.sqrt(1 + c - d - e), a.w = (b - l) / d, a.x = (h + f) / d, a.y = (g + k) / d, a.z = .25 * d);
                    return a
                };
                d.fromEuler = function(a, b, c, d) {
                    b *= w;
                    c *= w;
                    d *= w;
                    var f = Math.sin(b);
                    b = Math.cos(b);
                    var l = Math.sin(c);
                    c = Math.cos(c);
                    var e = Math.sin(d);
                    d = Math.cos(d);
                    a.x = f * c * d + b * l * e;
                    a.y = b * l * d + f * c * e;
                    a.z = b * c * e - f * l * d;
                    a.w = b * c * d - f * l * e;
                    return a
                };
                d.toAxisX = function(a, b) {
                    var c = 2 * b.y,
                        d = 2 * b.z;
                    a.x = 1 - c * b.y - d * b.z;
                    a.y = c * b.x + d * b.w;
                    a.z = d * b.x + c * b.w;
                    return a
                };
                d.toAxisY = function(a, b) {
                    var c =
                        2 * b.x,
                        d = 2 * b.z;
                    a.x = 2 * b.y * b.x - d * b.w;
                    a.y = 1 - c * b.x - d * b.z;
                    a.z = d * b.y + c * b.w;
                    return a
                };
                d.toAxisZ = function(a, b) {
                    var c = 2 * b.x,
                        d = 2 * b.y,
                        f = 2 * b.z;
                    a.x = f * b.x - d * b.w;
                    a.y = f * b.y - c * b.w;
                    a.z = 1 - c * b.x - d * b.y;
                    return a
                };
                d.toEuler = function(a, b, c) {
                    var d = b.x,
                        f = b.y,
                        e = b.z,
                        k = b.w,
                        h = d * f + e * k;
                    if (.499999 < h) b = 0, d = (0, l.toDegree)(2 * Math.atan2(d, k)), f = 90;
                    else if (-.499999 > h) b = 0, d = -(0, l.toDegree)(2 * Math.atan2(d, k)), f = -90;
                    else {
                        b = d * d;
                        var g = f * f,
                            n = e * e;
                        b = (0, l.toDegree)(Math.atan2(2 * d * k - 2 * f * e, 1 - 2 * b - 2 * n));
                        d = (0, l.toDegree)(Math.atan2(2 * f * k - 2 * d * e, 1 - 2 *
                            g - 2 * n));
                        f = (0, l.toDegree)(Math.asin(2 * h));
                        c && (b = -180 * Math.sign(b + 1E-6) + b, d = -180 * Math.sign(d + 1E-6) + d, f = 180 * Math.sign(f + 1E-6) - f)
                    }
                    a.x = b;
                    a.y = d;
                    a.z = f;
                    return a
                };
                d.strictEquals = function(a, b) {
                    return a.x === b.x && a.y === b.y && a.z === b.z && a.w === b.w
                };
                d.equals = function(a, b, c) {
                    void 0 === c && (c = l.EPSILON);
                    return Math.abs(a.x - b.x) <= c * Math.max(1, Math.abs(a.x), Math.abs(b.x)) && Math.abs(a.y - b.y) <= c * Math.max(1, Math.abs(a.y), Math.abs(b.y)) && Math.abs(a.z - b.z) <= c * Math.max(1, Math.abs(a.z), Math.abs(b.z)) && Math.abs(a.w - b.w) <= c * Math.max(1,
                        Math.abs(a.w), Math.abs(b.w))
                };
                d.toArray = function(a, b, c) {
                    void 0 === c && (c = 0);
                    a[c + 0] = b.x;
                    a[c + 1] = b.y;
                    a[c + 2] = b.z;
                    a[c + 3] = b.w;
                    return a
                };
                d.fromArray = function(a, b, c) {
                    void 0 === c && (c = 0);
                    a.x = b[c + 0];
                    a.y = b[c + 1];
                    a.z = b[c + 2];
                    a.w = b[c + 3];
                    return a
                };
                k.clone = function() {
                    return new d(this.x, this.y, this.z, this.w)
                };
                k.set = function(a) {
                    this.x = a.x;
                    this.y = a.y;
                    this.z = a.z;
                    this.w = a.w;
                    return this
                };
                k.equals = function(a) {
                    return a && this.x === a.x && this.y === a.y && this.z === a.z && this.w === a.w
                };
                k.toEuler = function(a) {
                    return d.toEuler(a, this)
                };
                k.fromEuler =
                    function(a) {
                        return d.fromEuler(this, a.x, a.y, a.z)
                    };
                k.lerp = function(a, b, c) {
                    c = c || new d;
                    d.slerp(c, this, a, b);
                    return c
                };
                k.multiply = function(a) {
                    return d.multiply(this, this, a)
                };
                k.rotateAround = function(a, b, c, f) {
                    f = f || new d;
                    return d.rotateAround(f, a, b, c)
                };
                return d
            }(k["default"]);
        m["default"] = p;
        p.mul = p.multiply;
        p.scale = p.multiplyScalar;
        p.mag = p.len;
        p.IDENTITY = Object.freeze(new p);
        var t = new p,
            x = new p,
            z = new a["default"],
            E = new b["default"],
            w = .5 * Math.PI / 180;
        c["default"].fastDefine("cc.Quat", p, {
            x: 0,
            y: 0,
            z: 0,
            w: 1
        });
        cc.quat =
            function(a, b, c, d) {
                return new p(a, b, c, d)
            };
        cc.Quat = p;
        q.exports = m["default"]
    }, {
        "../platform/CCClass": 227,
        "./mat3": 326,
        "./utils": 332,
        "./value-type": 333,
        "./vec3": 335
    }],
    329: [function(g, q, m) {
        function h(a) {
            return a && a.__esModule ? a : {
                default: a
            }
        }

        function e(a, b) {
            for (var c = 0; c < b.length; c++) {
                var d = b[c];
                d.enumerable = d.enumerable || !1;
                d.configurable = !0;
                "value" in d && (d.writable = !0);
                Object.defineProperty(a, k(d.key), d)
            }
        }

        function d(a, b, c) {
            b && e(a.prototype, b);
            c && e(a, c);
            Object.defineProperty(a, "prototype", {
                writable: !1
            });
            return a
        }

        function k(a) {
            a: if ("object" === typeof a && null !== a) {
                $jscomp.initSymbol();
                var b = a[Symbol.toPrimitive];
                if (void 0 !== b) {
                    a = b.call(a, "string");
                    if ("object" !== typeof a) break a;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                a = String(a)
            }return "symbol" === typeof a ? a : String(a)
        }

        function c(b, c) {
            b.prototype = Object.create(c.prototype);
            b.prototype.constructor = b;
            a(b, c)
        }

        function a(b, c) {
            a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(a, b) {
                a.__proto__ = b;
                return a
            };
            return a(b, c)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var b = h(g("./value-type")),
            l = h(g("../platform/CCClass")),
            f = h(g("./vec2")),
            n = h(g("./size")),
            u = function(a) {
                function b(b, c, d, f) {
                    void 0 === b && (b = 0);
                    void 0 === c && (c = 0);
                    void 0 === d && (d = 0);
                    void 0 === f && (f = 0);
                    var l = a.call(this) || this;
                    l.x = void 0;
                    l.y = void 0;
                    l.width = void 0;
                    l.height = void 0;
                    b && "object" === typeof b && (c = b.y, d = b.width, f = b.height, b = b.x);
                    l.x = b || 0;
                    l.y = c || 0;
                    l.width = d || 0;
                    l.height = f || 0;
                    return l
                }
                c(b, a);
                b.fromMinMax = function(a, c) {
                    var d = Math.min(a.x, c.x),
                        f = Math.min(a.y, c.y);
                    return new b(d, f, Math.max(a.x, c.x) - d, Math.max(a.y, c.y) - f)
                };
                var l = b.prototype;
                l.clone = function() {
                    return new b(this.x, this.y, this.width, this.height)
                };
                l.equals = function(a) {
                    return a && this.x === a.x && this.y === a.y && this.width === a.width && this.height === a.height
                };
                l.lerp = function(a, c, d) {
                    d = d || new b;
                    var f = this.x,
                        l = this.y,
                        e = this.width,
                        k = this.height;
                    d.x = f + (a.x - f) * c;
                    d.y = l + (a.y - l) * c;
                    d.width = e + (a.width - e) * c;
                    d.height = k + (a.height - k) * c;
                    return d
                };
                l.set = function(a) {
                    this.x = a.x;
                    this.y = a.y;
                    this.width = a.width;
                    this.height = a.height;
                    return this
                };
                l.intersects = function(a) {
                    var b = this.y + this.height,
                        c = a.x + a.width,
                        d = a.y + a.height;
                    return !(this.x + this.width < a.x || c < this.x || b < a.y || d < this.y)
                };
                l.intersection = function(a, b) {
                    var c = this.y,
                        d = this.x + this.width,
                        f = this.y + this.height,
                        l = b.y,
                        e = b.x + b.width,
                        k = b.y + b.height;
                    a.x = Math.max(this.x, b.x);
                    a.y = Math.max(c, l);
                    a.width = Math.min(d, e) - a.x;
                    a.height = Math.min(f, k) - a.y;
                    return a
                };
                l.contains = function(a) {
                    return this.x <= a.x && this.x + this.width >= a.x && this.y <= a.y && this.y + this.height >= a.y
                };
                l.containsRect = function(a) {
                    return this.x <=
                        a.x && this.x + this.width >= a.x + a.width && this.y <= a.y && this.y + this.height >= a.y + a.height
                };
                l.union = function(a, b) {
                    var c = this.x,
                        d = this.y,
                        f = this.width,
                        l = this.height,
                        e = b.x,
                        k = b.y,
                        h = b.width;
                    b = b.height;
                    a.x = Math.min(c, e);
                    a.y = Math.min(d, k);
                    a.width = Math.max(c + f, e + h) - a.x;
                    a.height = Math.max(d + l, k + b) - a.y;
                    return a
                };
                l.transformMat4 = function(a, b) {
                    var c = this.x,
                        d = this.y,
                        f = c + this.width,
                        l = d + this.height,
                        e = b.m,
                        k = e[0] * c + e[4] * d + e[12];
                    b = e[1] * c + e[5] * d + e[13];
                    var h = e[0] * f + e[4] * d + e[12];
                    d = e[1] * f + e[5] * d + e[13];
                    var g = e[0] * c + e[4] * l + e[12];
                    c = e[1] * c + e[5] * l + e[13];
                    var n = e[0] * f + e[4] * l + e[12];
                    l = e[1] * f + e[5] * l + e[13];
                    f = Math.min(k, h, g, n);
                    k = Math.max(k, h, g, n);
                    h = Math.min(b, d, c, l);
                    b = Math.max(b, d, c, l);
                    a.x = f;
                    a.y = h;
                    a.width = k - f;
                    a.height = b - h;
                    return a
                };
                l.toString = function() {
                    return "(" + this.x.toFixed(2) + ", " + this.y.toFixed(2) + ", " + this.width.toFixed(2) + ", " + this.height.toFixed(2) + ")"
                };
                d(b, [{
                    key: "xMin",
                    get: function() {
                        return this.x
                    },
                    set: function(a) {
                        this.width += this.x - a;
                        this.x = a
                    }
                }, {
                    key: "yMin",
                    get: function() {
                        return this.y
                    },
                    set: function(a) {
                        this.height += this.y -
                            a;
                        this.y = a
                    }
                }, {
                    key: "xMax",
                    get: function() {
                        return this.x + this.width
                    },
                    set: function(a) {
                        this.width = a - this.x
                    }
                }, {
                    key: "yMax",
                    get: function() {
                        return this.y + this.height
                    },
                    set: function(a) {
                        this.height = a - this.y
                    }
                }, {
                    key: "center",
                    get: function() {
                        return new f["default"](this.x + .5 * this.width, this.y + .5 * this.height)
                    },
                    set: function(a) {
                        this.x = a.x - .5 * this.width;
                        this.y = a.y - .5 * this.height
                    }
                }, {
                    key: "origin",
                    get: function() {
                        return new f["default"](this.x, this.y)
                    },
                    set: function(a) {
                        this.x = a.x;
                        this.y = a.y
                    }
                }, {
                    key: "size",
                    get: function() {
                        return new n["default"](this.width,
                            this.height)
                    },
                    set: function(a) {
                        this.width = a.width;
                        this.height = a.height
                    }
                }]);
                return b
            }(b["default"]);
        m["default"] = u;
        l["default"].fastDefine("cc.Rect", u, {
            x: 0,
            y: 0,
            width: 0,
            height: 0
        });
        cc.Rect = u;
        cc.rect = function(a, b, c, d) {
            return new u(a, b, c, d)
        };
        q.exports = m["default"]
    }, {
        "../platform/CCClass": 227,
        "./size": 330,
        "./value-type": 333,
        "./vec2": 334
    }],
    330: [function(g, q, m) {
        function h(a) {
            return a && a.__esModule ? a : {
                default: a
            }
        }

        function e(a, b) {
            for (var c = 0; c < b.length; c++) {
                var d = b[c];
                d.enumerable = d.enumerable || !1;
                d.configurable = !0;
                "value" in d && (d.writable = !0);
                Object.defineProperty(a, k(d.key), d)
            }
        }

        function d(a, b, c) {
            b && e(a.prototype, b);
            c && e(a, c);
            Object.defineProperty(a, "prototype", {
                writable: !1
            });
            return a
        }

        function k(a) {
            a: if ("object" === typeof a && null !== a) {
                $jscomp.initSymbol();
                var b = a[Symbol.toPrimitive];
                if (void 0 !== b) {
                    a = b.call(a, "string");
                    if ("object" !== typeof a) break a;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                a = String(a)
            }return "symbol" === typeof a ? a : String(a)
        }

        function c(b, c) {
            b.prototype = Object.create(c.prototype);
            b.prototype.constructor = b;
            a(b, c)
        }

        function a(b, c) {
            a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(a, b) {
                a.__proto__ = b;
                return a
            };
            return a(b, c)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var b = h(g("./value-type"));
        g = h(g("../platform/CCClass"));
        var l = function(a) {
            function b(b, c) {
                void 0 === b && (b = 0);
                void 0 === c && (c = 0);
                var d = a.call(this) || this;
                d.width = void 0;
                d.height = void 0;
                b && "object" === typeof b ? (d.width = b.width, d.height = b.height) : (d.width = b || 0, d.height = c || 0);
                return d
            }
            c(b, a);
            var f = b.prototype;
            f.clone =
                function() {
                    return new b(this.width, this.height)
                };
            f.equals = function(a) {
                return a && this.width === a.width && this.height === a.height
            };
            f.lerp = function(a, c, d) {
                d = d || new b;
                var f = this.width,
                    l = this.height;
                d.width = f + (a.width - f) * c;
                d.height = l + (a.height - l) * c;
                return d
            };
            f.set = function(a) {
                this.width = a.width;
                this.height = a.height;
                return this
            };
            f.toString = function() {
                return "(" + this.width.toFixed(2) + ", " + this.height.toFixed(2) + ")"
            };
            d(b, null, [{
                key: "ZERO",
                get: function() {
                    return new b
                }
            }]);
            return b
        }(b["default"]);
        m["default"] = l;
        l.ZERO_R = l.ZERO;
        g["default"].fastDefine("cc.Size", l, {
            width: 0,
            height: 0
        });
        cc.size = function(a, b) {
            return new l(a, b)
        };
        cc.Size = l;
        q.exports = m["default"]
    }, {
        "../platform/CCClass": 227,
        "./value-type": 333
    }],
    331: [function(g, q, m) {
        m.__esModule = !0;
        m["default"] = void 0;
        var h = function(d) {
                return d && d.__esModule ? d : {
                    default: d
                }
            }(g("./quat")),
            e = new h["default"];
        g = function() {
            function d() {}
            d.toRotation = function(d, c) {
                d.x = c[3];
                d.y = c[4];
                d.z = c[5];
                d.w = c[6];
                return d
            };
            d.fromRotation = function(d, c) {
                d[3] = c.x;
                d[4] = c.y;
                d[5] = c.z;
                d[6] =
                    c.w;
                return d
            };
            d.toEuler = function(k, c) {
                d.toRotation(e, c);
                h["default"].toEuler(k, e);
                return k
            };
            d.fromEuler = function(k, c) {
                h["default"].fromEuler(e, c.x, c.y, c.z);
                d.fromRotation(k, e);
                return k
            };
            d.fromEulerNumber = function(k, c, a, b) {
                h["default"].fromEuler(e, c, a, b);
                d.fromRotation(k, e);
                return k
            };
            d.toScale = function(d, c) {
                d.x = c[7];
                d.y = c[8];
                d.z = c[9];
                return d
            };
            d.fromScale = function(d, c) {
                d[7] = c.x;
                d[8] = c.y;
                d[9] = c.z;
                return d
            };
            d.toPosition = function(d, c) {
                d.x = c[0];
                d.y = c[1];
                d.z = c[2];
                return d
            };
            d.fromPosition = function(d, c) {
                d[0] =
                    c.x;
                d[1] = c.y;
                d[2] = c.z;
                return d
            };
            d.fromAngleZ = function(k, c) {
                h["default"].fromAngleZ(e, c);
                d.fromRotation(k, e);
                return k
            };
            d.toMat4 = function(d, c) {
                var a = c[3],
                    b = c[4],
                    l = c[5],
                    f = c[6],
                    e = a + a,
                    k = b + b,
                    h = l + l,
                    g = a * e,
                    t = a * k;
                a *= h;
                var x = b * k;
                b *= h;
                l *= h;
                e *= f;
                k *= f;
                f *= h;
                h = c[7];
                var m = c[8],
                    E = c[9],
                    w = d.m;
                w[0] = (1 - (x + l)) * h;
                w[1] = (t + f) * h;
                w[2] = (a - k) * h;
                w[3] = 0;
                w[4] = (t - f) * m;
                w[5] = (1 - (g + l)) * m;
                w[6] = (b + e) * m;
                w[7] = 0;
                w[8] = (a + k) * E;
                w[9] = (b - e) * E;
                w[10] = (1 - (g + x)) * E;
                w[11] = 0;
                w[12] = c[0];
                w[13] = c[1];
                w[14] = c[2];
                w[15] = 1;
                return d
            };
            return d
        }();
        m["default"] =
            g;
        cc.Trs = g;
        q.exports = m["default"]
    }, {
        "./quat": 328
    }],
    332: [function(g, q, m) {
        function h(a, b) {
            return Math.random() * (b - a) + a
        }

        function e(a) {
            return (9301 * a + 49297) % 233280 / 233280
        }

        function d(a, b, c) {
            return e(a) * (c - b) + b
        }

        function k(a, b) {
            return a - Math.floor(a / b) * b
        }
        m.__esModule = !0;
        m.INT_MIN = m.INT_MAX = m.INT_BITS = m.FLOAT_BYTES = m.FLOAT_ARRAY_TYPE = m.EPSILON = void 0;
        m.approx = function(a, c, d) {
            d = d || b;
            return Math.abs(a - c) <= d
        };
        m.clamp = function(a, b, c) {
            return a < b ? b : a > c ? c : a
        };
        m.clamp01 = function(a) {
            return 0 > a ? 0 : 1 < a ? 1 : a
        };
        m.equals = function(a,
            c) {
            return Math.abs(a - c) <= b * Math.max(1, Math.abs(a), Math.abs(c))
        };
        m.inverseLerp = function(a, b, c) {
            return (c - a) / (b - a)
        };
        m.lerp = function(a, b, c) {
            return a + (b - a) * c
        };
        m.nextPow2 = function(a) {
            --a;
            a |= a >> 1;
            a |= a >> 2;
            a |= a >> 4;
            a |= a >> 8;
            a |= a >> 16;
            ++a;
            return a
        };
        m.pingPong = function(a, b) {
            a = k(a, 2 * b);
            return a = b - Math.abs(a - b)
        };
        m.pseudoRandom = e;
        m.pseudoRandomRange = d;
        m.pseudoRandomRangeInt = function(a, b, c) {
            return Math.floor(d(a, b, c))
        };
        m.random = void 0;
        m.randomRange = h;
        m.randomRangeInt = function(a, b) {
            return Math.floor(h(a, b))
        };
        m.repeat =
            k;
        m.sign = function(a) {
            return (0 < a) - (0 > a)
        };
        m.toDegree = function(b) {
            return b * a
        };
        m.toRadian = function(a) {
            return a * c
        };
        var c = Math.PI / 180,
            a = 180 / Math.PI,
            b = 1E-6;
        m.EPSILON = b;
        m.INT_BITS = 32;
        m.INT_MAX = 2147483647;
        m.INT_MIN = -2147483648;
        m.FLOAT_ARRAY_TYPE = Float64Array;
        m.FLOAT_BYTES = 8;
        m.random = Math.random
    }, {}],
    333: [function(g, q, m) {
        m.__esModule = !0;
        m["default"] = void 0;
        var h = function(e) {
            return e && e.__esModule ? e : {
                default: e
            }
        }(g("../platform/js"));
        g = function() {
            function e() {}
            var d = e.prototype;
            d.clone = function() {
                cc.errorID("0100",
                    h["default"].getClassName(this) + ".clone");
                return null
            };
            d.equals = function(d) {
                cc.errorID("0100", h["default"].getClassName(this) + ".equals");
                return !1
            };
            d.lerp = function(d, c) {
                cc.errorID("0100", h["default"].getClassName(this) + ".lerp");
                return this.clone()
            };
            d.set = function(d) {
                cc.errorID("0100", h["default"].getClassName(this) + ".set")
            };
            d.toString = function() {
                return "[object Object]"
            };
            return e
        }();
        m["default"] = g;
        h["default"].setClassName("cc.ValueType", g);
        cc.ValueType = g;
        q.exports = m["default"]
    }, {
        "../platform/js": 248
    }],
    334: [function(g, q, m) {
        function h(a) {
            return a && a.__esModule ? a : {
                default: a
            }
        }

        function e(a, b) {
            for (var c = 0; c < b.length; c++) {
                var d = b[c];
                d.enumerable = d.enumerable || !1;
                d.configurable = !0;
                "value" in d && (d.writable = !0);
                Object.defineProperty(a, k(d.key), d)
            }
        }

        function d(a, b, c) {
            b && e(a.prototype, b);
            c && e(a, c);
            Object.defineProperty(a, "prototype", {
                writable: !1
            });
            return a
        }

        function k(a) {
            a: if ("object" === typeof a && null !== a) {
                $jscomp.initSymbol();
                var b = a[Symbol.toPrimitive];
                if (void 0 !== b) {
                    a = b.call(a, "string");
                    if ("object" !== typeof a) break a;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                a = String(a)
            }return "symbol" === typeof a ? a : String(a)
        }

        function c(b, c) {
            b.prototype = Object.create(c.prototype);
            b.prototype.constructor = b;
            a(b, c)
        }

        function a(b, c) {
            a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(a, b) {
                a.__proto__ = b;
                return a
            };
            return a(b, c)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var b = h(g("./value-type")),
            l = h(g("../platform/CCClass")),
            f = h(g("../utils/misc")),
            n = g("./utils"),
            u = 0,
            v = 0,
            p = function(a) {
                function b(c, d) {
                    void 0 ===
                        c && (c = 0);
                    void 0 === d && (d = 0);
                    var f = a.call(this) || this;
                    f.mag = b.prototype.len;
                    f.magSqr = b.prototype.lengthSqr;
                    f.subSelf = b.prototype.subtract;
                    f.mulSelf = b.prototype.multiplyScalar;
                    f.divSelf = b.prototype.divide;
                    f.scaleSelf = b.prototype.multiply;
                    f.negSelf = b.prototype.negate;
                    f.x = void 0;
                    f.y = void 0;
                    f.z = 0;
                    c && "object" === typeof c ? (f.x = c.x || 0, f.y = c.y || 0) : (f.x = c || 0, f.y = d || 0);
                    return f
                }
                c(b, a);
                var e = b.prototype;
                e.sub = function(a, c) {
                    return b.subtract(c || new b, this, a)
                };
                e.mul = function(a, c) {
                    return b.multiplyScalar(c || new b,
                        this, a)
                };
                e.div = function(a, c) {
                    return b.multiplyScalar(c || new b, this, 1 / a)
                };
                e.scale = function(a, c) {
                    return b.multiply(c || new b, this, a)
                };
                e.neg = function(a) {
                    return b.negate(a || new b, this)
                };
                b.clone = function(a) {
                    return new b(a.x, a.y)
                };
                b.copy = function(a, b) {
                    a.x = b.x;
                    a.y = b.y;
                    return a
                };
                b.set = function(a, b, c) {
                    a.x = b;
                    a.y = c;
                    return a
                };
                b.add = function(a, b, c) {
                    a.x = b.x + c.x;
                    a.y = b.y + c.y;
                    return a
                };
                b.subtract = function(a, b, c) {
                    a.x = b.x - c.x;
                    a.y = b.y - c.y;
                    return a
                };
                b.multiply = function(a, b, c) {
                    a.x = b.x * c.x;
                    a.y = b.y * c.y;
                    return a
                };
                b.divide =
                    function(a, b, c) {
                        a.x = b.x / c.x;
                        a.y = b.y / c.y;
                        return a
                    };
                b.ceil = function(a, b) {
                    a.x = Math.ceil(b.x);
                    a.y = Math.ceil(b.y);
                    return a
                };
                b.floor = function(a, b) {
                    a.x = Math.floor(b.x);
                    a.y = Math.floor(b.y);
                    return a
                };
                b.min = function(a, b, c) {
                    a.x = Math.min(b.x, c.x);
                    a.y = Math.min(b.y, c.y);
                    return a
                };
                b.max = function(a, b, c) {
                    a.x = Math.max(b.x, c.x);
                    a.y = Math.max(b.y, c.y);
                    return a
                };
                b.round = function(a, b) {
                    a.x = Math.round(b.x);
                    a.y = Math.round(b.y);
                    return a
                };
                b.multiplyScalar = function(a, b, c) {
                    a.x = b.x * c;
                    a.y = b.y * c;
                    return a
                };
                b.scaleAndAdd = function(a,
                    b, c, d) {
                    a.x = b.x + c.x * d;
                    a.y = b.y + c.y * d;
                    return a
                };
                b.distance = function(a, b) {
                    u = b.x - a.x;
                    v = b.y - a.y;
                    return Math.sqrt(u * u + v * v)
                };
                b.squaredDistance = function(a, b) {
                    u = b.x - a.x;
                    v = b.y - a.y;
                    return u * u + v * v
                };
                b.len = function(a) {
                    u = a.x;
                    v = a.y;
                    return Math.sqrt(u * u + v * v)
                };
                b.lengthSqr = function(a) {
                    u = a.x;
                    v = a.y;
                    return u * u + v * v
                };
                b.negate = function(a, b) {
                    a.x = -b.x;
                    a.y = -b.y;
                    return a
                };
                b.inverse = function(a, b) {
                    a.x = 1 / b.x;
                    a.y = 1 / b.y;
                    return a
                };
                b.inverseSafe = function(a, b) {
                    u = b.x;
                    v = b.y;
                    Math.abs(u) < n.EPSILON ? a.x = 0 : a.x = 1 / u;
                    Math.abs(v) < n.EPSILON ? a.y =
                        0 : a.y = 1 / v;
                    return a
                };
                b.normalize = function(a, b) {
                    u = b.x;
                    v = b.y;
                    b = u * u + v * v;
                    0 < b && (b = 1 / Math.sqrt(b), a.x = u * b, a.y = v * b);
                    return a
                };
                b.dot = function(a, b) {
                    return a.x * b.x + a.y * b.y
                };
                b.cross = function(a, b, c) {
                    a.x = a.y = 0;
                    a.z = b.x * c.y - b.y * c.x;
                    return a
                };
                b.lerp = function(a, b, c, d) {
                    u = b.x;
                    v = b.y;
                    a.x = u + d * (c.x - u);
                    a.y = v + d * (c.y - v);
                    return a
                };
                b.random = function(a, b) {
                    b = b || 1;
                    var c = 2 * (0, n.random)() * Math.PI;
                    a.x = Math.cos(c) * b;
                    a.y = Math.sin(c) * b;
                    return a
                };
                b.transformMat3 = function(a, b, c) {
                    u = b.x;
                    v = b.y;
                    b = c.m;
                    a.x = b[0] * u + b[3] * v + b[6];
                    a.y = b[1] * u + b[4] *
                        v + b[7];
                    return a
                };
                b.transformMat4 = function(a, b, c) {
                    u = b.x;
                    v = b.y;
                    b = c.m;
                    a.x = b[0] * u + b[4] * v + b[12];
                    a.y = b[1] * u + b[5] * v + b[13];
                    return a
                };
                b.strictEquals = function(a, b) {
                    return a.x === b.x && a.y === b.y
                };
                b.equals = function(a, b, c) {
                    void 0 === c && (c = n.EPSILON);
                    return Math.abs(a.x - b.x) <= c * Math.max(1, Math.abs(a.x), Math.abs(b.x)) && Math.abs(a.y - b.y) <= c * Math.max(1, Math.abs(a.y), Math.abs(b.y))
                };
                b.angle = function(a, c) {
                    b.normalize(t, a);
                    b.normalize(x, c);
                    a = b.dot(t, x);
                    return 1 < a ? 0 : -1 > a ? Math.PI : Math.acos(a)
                };
                b.toArray = function(a, b, c) {
                    void 0 ===
                        c && (c = 0);
                    a[c + 0] = b.x;
                    a[c + 1] = b.y;
                    return a
                };
                b.fromArray = function(a, b, c) {
                    void 0 === c && (c = 0);
                    a.x = b[c + 0];
                    a.y = b[c + 1];
                    return a
                };
                e.clone = function() {
                    return new b(this.x, this.y)
                };
                e.set = function(a) {
                    this.x = a.x;
                    this.y = a.y;
                    return this
                };
                e.equals = function(a) {
                    return a && this.x === a.x && this.y === a.y
                };
                e.fuzzyEquals = function(a, b) {
                    return this.x - b <= a.x && a.x <= this.x + b && this.y - b <= a.y && a.y <= this.y + b ? !0 : !1
                };
                e.toString = function() {
                    return "(" + this.x.toFixed(2) + ", " + this.y.toFixed(2) + ")"
                };
                e.lerp = function(a, c, d) {
                    d = d || new b;
                    var f = this.x,
                        e = this.y;
                    d.x = f + (a.x - f) * c;
                    d.y = e + (a.y - e) * c;
                    return d
                };
                e.clampf = function(a, b) {
                    this.x = f["default"].clampf(this.x, a.x, b.x);
                    this.y = f["default"].clampf(this.y, a.y, b.y);
                    return this
                };
                e.add = function(a, c) {
                    c = c || new b;
                    c.x = this.x + a.x;
                    c.y = this.y + a.y;
                    return c
                };
                e.addSelf = function(a) {
                    this.x += a.x;
                    this.y += a.y;
                    return this
                };
                e.subtract = function(a) {
                    this.x -= a.x;
                    this.y -= a.y;
                    return this
                };
                e.multiplyScalar = function(a) {
                    this.x *= a;
                    this.y *= a;
                    return this
                };
                e.multiply = function(a) {
                    this.x *= a.x;
                    this.y *= a.y;
                    return this
                };
                e.divide = function(a) {
                    this.x /=
                        a;
                    this.y /= a;
                    return this
                };
                e.negate = function() {
                    this.x = -this.x;
                    this.y = -this.y;
                    return this
                };
                e.dot = function(a) {
                    return this.x * a.x + this.y * a.y
                };
                e.cross = function(a) {
                    return this.x * a.y - this.y * a.x
                };
                e.len = function() {
                    return Math.sqrt(this.x * this.x + this.y * this.y)
                };
                e.lengthSqr = function() {
                    return this.x * this.x + this.y * this.y
                };
                e.normalizeSelf = function() {
                    var a = this.x * this.x + this.y * this.y;
                    if (1 === a || 0 === a) return this;
                    a = 1 / Math.sqrt(a);
                    this.x *= a;
                    this.y *= a;
                    return this
                };
                e.normalize = function(a) {
                    a = a || new b;
                    a.x = this.x;
                    a.y = this.y;
                    a.normalizeSelf();
                    return a
                };
                e.angle = function(a) {
                    var b = this.magSqr(),
                        c = a.magSqr();
                    if (0 === b || 0 === c) return console.warn("Can't get angle between zero vector"), 0;
                    a = this.dot(a) / Math.sqrt(b * c);
                    a = f["default"].clampf(a, -1, 1);
                    return Math.acos(a)
                };
                e.signAngle = function(a) {
                    var b = this.angle(a);
                    return 0 > this.cross(a) ? -b : b
                };
                e.rotate = function(a, c) {
                    c = c || new b;
                    c.x = this.x;
                    c.y = this.y;
                    return c.rotateSelf(a)
                };
                e.rotateSelf = function(a) {
                    var b = Math.sin(a);
                    a = Math.cos(a);
                    var c = this.x;
                    this.x = a * c - b * this.y;
                    this.y = b * c + a * this.y;
                    return this
                };
                e.project = function(a) {
                    return a.multiplyScalar(this.dot(a) / a.dot(a))
                };
                e.transformMat4 = function(a, c) {
                    c = c || new b;
                    b.transformMat4(c, this, a);
                    return c
                };
                e.maxAxis = function() {
                    return Math.max(this.x, this.y)
                };
                d(b, null, [{
                    key: "ONE",
                    get: function() {
                        return new b(1, 1)
                    }
                }, {
                    key: "ZERO",
                    get: function() {
                        return new b(0, 0)
                    }
                }, {
                    key: "UP",
                    get: function() {
                        return new b(0, 1)
                    }
                }, {
                    key: "RIGHT",
                    get: function() {
                        return new b(1, 0)
                    }
                }]);
                return b
            }(b["default"]);
        m["default"] = p;
        p.sub = p.subtract;
        p.mul = p.multiply;
        p.scale = p.multiplyScalar;
        p.mag = p.len;
        p.squaredMagnitude = p.lengthSqr;
        p.div = p.divide;
        p.ONE_R = p.ONE;
        p.ZERO_R = p.ZERO;
        p.UP_R = p.UP;
        p.RIGHT_R = p.RIGHT;
        var t = new p,
            x = new p;
        l["default"].fastDefine("cc.Vec2", p, {
            x: 0,
            y: 0
        });
        cc.v2 = function(a, b) {
            return new p(a, b)
        };
        cc.Vec2 = p;
        q.exports = m["default"]
    }, {
        "../platform/CCClass": 227,
        "../utils/misc": 310,
        "./utils": 332,
        "./value-type": 333
    }],
    335: [function(g, q, m) {
        function h(a) {
            return a && a.__esModule ? a : {
                default: a
            }
        }

        function e(a, b) {
            for (var c = 0; c < b.length; c++) {
                var d = b[c];
                d.enumerable = d.enumerable || !1;
                d.configurable = !0;
                "value" in d && (d.writable = !0);
                Object.defineProperty(a, k(d.key), d)
            }
        }

        function d(a, b, c) {
            b && e(a.prototype, b);
            c && e(a, c);
            Object.defineProperty(a, "prototype", {
                writable: !1
            });
            return a
        }

        function k(a) {
            a: if ("object" === typeof a && null !== a) {
                $jscomp.initSymbol();
                var b = a[Symbol.toPrimitive];
                if (void 0 !== b) {
                    a = b.call(a, "string");
                    if ("object" !== typeof a) break a;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                a = String(a)
            }return "symbol" === typeof a ? a : String(a)
        }

        function c(b, c) {
            b.prototype = Object.create(c.prototype);
            b.prototype.constructor = b;
            a(b, c)
        }

        function a(b, c) {
            a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(a, b) {
                a.__proto__ = b;
                return a
            };
            return a(b, c)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var b = h(g("./value-type")),
            l = h(g("../platform/CCClass")),
            f = h(g("../utils/misc")),
            n = h(g("./vec2")),
            u = g("./utils"),
            v = 0,
            p = 0,
            t = 0,
            x = function(a) {
                function b(c, d, f) {
                    void 0 === c && (c = 0);
                    void 0 === d && (d = 0);
                    void 0 === f && (f = 0);
                    var e = a.call(this) || this;
                    e.mag = b.prototype.len;
                    e.magSqr = b.prototype.lengthSqr;
                    e.subSelf = b.prototype.subtract;
                    e.mulSelf = b.prototype.multiplyScalar;
                    e.divSelf = b.prototype.divide;
                    e.scaleSelf = b.prototype.multiply;
                    e.negSelf = b.prototype.negate;
                    e.x = void 0;
                    e.y = void 0;
                    e.z = void 0;
                    e.angle = n["default"].prototype.angle;
                    e.project = n["default"].prototype.project;
                    c && "object" === typeof c ? (e.x = c.x, e.y = c.y, e.z = c.z) : (e.x = c, e.y = d, e.z = f);
                    return e
                }
                c(b, a);
                var e = b.prototype;
                e.sub = function(a, c) {
                    return b.subtract(c || new b, this, a)
                };
                e.mul = function(a, c) {
                    return b.multiplyScalar(c || new b, this, a)
                };
                e.div = function(a, c) {
                    return b.multiplyScalar(c ||
                        new b, this, 1 / a)
                };
                e.scale = function(a, c) {
                    return b.multiply(c || new b, this, a)
                };
                e.neg = function(a) {
                    return b.negate(a || new b, this)
                };
                b.zero = function(a) {
                    a.x = 0;
                    a.y = 0;
                    a.z = 0;
                    return a
                };
                b.clone = function(a) {
                    return new b(a.x, a.y, a.z)
                };
                b.copy = function(a, b) {
                    a.x = b.x;
                    a.y = b.y;
                    a.z = b.z;
                    return a
                };
                b.set = function(a, b, c, d) {
                    a.x = b;
                    a.y = c;
                    a.z = d;
                    return a
                };
                b.add = function(a, b, c) {
                    a.x = b.x + c.x;
                    a.y = b.y + c.y;
                    a.z = b.z + c.z;
                    return a
                };
                b.subtract = function(a, b, c) {
                    a.x = b.x - c.x;
                    a.y = b.y - c.y;
                    a.z = b.z - c.z;
                    return a
                };
                b.multiply = function(a, b, c) {
                    a.x = b.x *
                        c.x;
                    a.y = b.y * c.y;
                    a.z = b.z * c.z;
                    return a
                };
                b.divide = function(a, b, c) {
                    a.x = b.x / c.x;
                    a.y = b.y / c.y;
                    a.z = b.z / c.z;
                    return a
                };
                b.ceil = function(a, b) {
                    a.x = Math.ceil(b.x);
                    a.y = Math.ceil(b.y);
                    a.z = Math.ceil(b.z);
                    return a
                };
                b.floor = function(a, b) {
                    a.x = Math.floor(b.x);
                    a.y = Math.floor(b.y);
                    a.z = Math.floor(b.z);
                    return a
                };
                b.min = function(a, b, c) {
                    a.x = Math.min(b.x, c.x);
                    a.y = Math.min(b.y, c.y);
                    a.z = Math.min(b.z, c.z);
                    return a
                };
                b.max = function(a, b, c) {
                    a.x = Math.max(b.x, c.x);
                    a.y = Math.max(b.y, c.y);
                    a.z = Math.max(b.z, c.z);
                    return a
                };
                b.round = function(a,
                    b) {
                    a.x = Math.round(b.x);
                    a.y = Math.round(b.y);
                    a.z = Math.round(b.z);
                    return a
                };
                b.multiplyScalar = function(a, b, c) {
                    a.x = b.x * c;
                    a.y = b.y * c;
                    a.z = b.z * c;
                    return a
                };
                b.scaleAndAdd = function(a, b, c, d) {
                    a.x = b.x + c.x * d;
                    a.y = b.y + c.y * d;
                    a.z = b.z + c.z * d;
                    return a
                };
                b.distance = function(a, b) {
                    v = b.x - a.x;
                    p = b.y - a.y;
                    t = b.z - a.z;
                    return Math.sqrt(v * v + p * p + t * t)
                };
                b.squaredDistance = function(a, b) {
                    v = b.x - a.x;
                    p = b.y - a.y;
                    t = b.z - a.z;
                    return v * v + p * p + t * t
                };
                b.len = function(a) {
                    v = a.x;
                    p = a.y;
                    t = a.z;
                    return Math.sqrt(v * v + p * p + t * t)
                };
                b.lengthSqr = function(a) {
                    v = a.x;
                    p = a.y;
                    t = a.z;
                    return v * v + p * p + t * t
                };
                b.negate = function(a, b) {
                    a.x = -b.x;
                    a.y = -b.y;
                    a.z = -b.z;
                    return a
                };
                b.inverse = function(a, b) {
                    a.x = 1 / b.x;
                    a.y = 1 / b.y;
                    a.z = 1 / b.z;
                    return a
                };
                b.inverseSafe = function(a, b) {
                    v = b.x;
                    p = b.y;
                    t = b.z;
                    Math.abs(v) < u.EPSILON ? a.x = 0 : a.x = 1 / v;
                    Math.abs(p) < u.EPSILON ? a.y = 0 : a.y = 1 / p;
                    Math.abs(t) < u.EPSILON ? a.z = 0 : a.z = 1 / t;
                    return a
                };
                b.normalize = function(a, b) {
                    v = b.x;
                    p = b.y;
                    t = b.z;
                    b = v * v + p * p + t * t;
                    0 < b && (b = 1 / Math.sqrt(b), a.x = v * b, a.y = p * b, a.z = t * b);
                    return a
                };
                b.dot = function(a, b) {
                    return a.x * b.x + a.y * b.y + a.z * b.z
                };
                b.cross = function(a,
                    b, c) {
                    var d = b.x,
                        f = b.y;
                    b = b.z;
                    var e = c.x,
                        l = c.y;
                    c = c.z;
                    a.x = f * c - b * l;
                    a.y = b * e - d * c;
                    a.z = d * l - f * e;
                    return a
                };
                b.lerp = function(a, b, c, d) {
                    a.x = b.x + d * (c.x - b.x);
                    a.y = b.y + d * (c.y - b.y);
                    a.z = b.z + d * (c.z - b.z);
                    return a
                };
                b.random = function(a, b) {
                    b = b || 1;
                    var c = 2 * (0, u.random)() * Math.PI,
                        d = 2 * (0, u.random)() - 1,
                        f = Math.sqrt(1 - d * d);
                    a.x = f * Math.cos(c) * b;
                    a.y = f * Math.sin(c) * b;
                    a.z = d * b;
                    return a
                };
                b.transformMat4 = function(a, b, c) {
                    v = b.x;
                    p = b.y;
                    t = b.z;
                    b = c.m;
                    c = (c = b[3] * v + b[7] * p + b[11] * t + b[15]) ? 1 / c : 1;
                    a.x = (b[0] * v + b[4] * p + b[8] * t + b[12]) * c;
                    a.y = (b[1] * v + b[5] * p + b[9] *
                        t + b[13]) * c;
                    a.z = (b[2] * v + b[6] * p + b[10] * t + b[14]) * c;
                    return a
                };
                b.transformMat4Normal = function(a, b, c) {
                    v = b.x;
                    p = b.y;
                    t = b.z;
                    b = c.m;
                    c = (c = b[3] * v + b[7] * p + b[11] * t) ? 1 / c : 1;
                    a.x = (b[0] * v + b[4] * p + b[8] * t) * c;
                    a.y = (b[1] * v + b[5] * p + b[9] * t) * c;
                    a.z = (b[2] * v + b[6] * p + b[10] * t) * c;
                    return a
                };
                b.transformMat3 = function(a, b, c) {
                    v = b.x;
                    p = b.y;
                    t = b.z;
                    b = c.m;
                    a.x = v * b[0] + p * b[3] + t * b[6];
                    a.y = v * b[1] + p * b[4] + t * b[7];
                    a.z = v * b[2] + p * b[5] + t * b[8];
                    return a
                };
                b.transformAffine = function(a, b, c) {
                    v = b.x;
                    p = b.y;
                    t = b.z;
                    b = c.m;
                    a.x = b[0] * v + b[1] * p + b[2] * t + b[3];
                    a.y = b[4] * v + b[5] * p + b[6] *
                        t + b[7];
                    a.x = b[8] * v + b[9] * p + b[10] * t + b[11];
                    return a
                };
                b.transformQuat = function(a, b, c) {
                    var d = c.w * b.x + c.y * b.z - c.z * b.y,
                        f = c.w * b.y + c.z * b.x - c.x * b.z,
                        e = c.w * b.z + c.x * b.y - c.y * b.x;
                    b = -c.x * b.x - c.y * b.y - c.z * b.z;
                    a.x = d * c.w + b * -c.x + f * -c.z - e * -c.y;
                    a.y = f * c.w + b * -c.y + e * -c.x - d * -c.z;
                    a.z = e * c.w + b * -c.z + d * -c.y - f * -c.x;
                    return a
                };
                b.transformRTS = function(a, b, c, d, f) {
                    var e = b.x * f.x,
                        l = b.y * f.y,
                        k = b.z * f.z;
                    b = c.w * e + c.y * k - c.z * l;
                    f = c.w * l + c.z * e - c.x * k;
                    var h = c.w * k + c.x * l - c.y * e;
                    e = -c.x * e - c.y * l - c.z * k;
                    a.x = b * c.w + e * -c.x + f * -c.z - h * -c.y + d.x;
                    a.y = f * c.w + e * -c.y + h *
                        -c.x - b * -c.z + d.y;
                    a.z = h * c.w + e * -c.z + b * -c.y - f * -c.x + d.z;
                    return a
                };
                b.transformInverseRTS = function(a, b, c, d, f) {
                    var e = b.x - d.x,
                        l = b.y - d.y,
                        k = b.z - d.z;
                    b = c.w * e - c.y * k + c.z * l;
                    d = c.w * l - c.z * e + c.x * k;
                    var h = c.w * k - c.x * l + c.y * e;
                    e = c.x * e + c.y * l + c.z * k;
                    a.x = (b * c.w + e * c.x + d * c.z - h * c.y) / f.x;
                    a.y = (d * c.w + e * c.y + h * c.x - b * c.z) / f.y;
                    a.z = (h * c.w + e * c.z + b * c.y - d * c.x) / f.z;
                    return a
                };
                b.rotateX = function(a, b, c, d) {
                    v = b.x - c.x;
                    p = b.y - c.y;
                    t = b.z - c.z;
                    b = Math.cos(d);
                    var f = Math.sin(d);
                    d = p * b - t * f;
                    b = p * f + t * b;
                    a.x = v + c.x;
                    a.y = d + c.y;
                    a.z = b + c.z;
                    return a
                };
                b.rotateY = function(a,
                    b, c, d) {
                    v = b.x - c.x;
                    p = b.y - c.y;
                    t = b.z - c.z;
                    b = Math.cos(d);
                    d = Math.sin(d);
                    var f = p,
                        e = t * b - v * d;
                    a.x = t * d + v * b + c.x;
                    a.y = f + c.y;
                    a.z = e + c.z;
                    return a
                };
                b.rotateZ = function(a, b, c, d) {
                    v = b.x - c.x;
                    p = b.y - c.y;
                    t = b.z - c.z;
                    b = Math.cos(d);
                    d = Math.sin(d);
                    var f = v * d + p * b,
                        e = t;
                    a.x = v * b - p * d + c.x;
                    a.y = f + c.y;
                    a.z = e + c.z;
                    return a
                };
                b.strictEquals = function(a, b) {
                    return a.x === b.x && a.y === b.y && a.z === b.z
                };
                b.equals = function(a, b, c) {
                    void 0 === c && (c = u.EPSILON);
                    var d = a.x,
                        f = a.y;
                    a = a.z;
                    var e = b.x,
                        l = b.y;
                    b = b.z;
                    return Math.abs(d - e) <= c * Math.max(1, Math.abs(d), Math.abs(e)) &&
                        Math.abs(f - l) <= c * Math.max(1, Math.abs(f), Math.abs(l)) && Math.abs(a - b) <= c * Math.max(1, Math.abs(a), Math.abs(b))
                };
                b.angle = function(a, c) {
                    b.normalize(z, a);
                    b.normalize(E, c);
                    a = b.dot(z, E);
                    return 1 < a ? 0 : -1 > a ? Math.PI : Math.acos(a)
                };
                b.projectOnPlane = function(a, c, d) {
                    return b.subtract(a, c, b.project(a, c, d))
                };
                b.project = function(a, c, d) {
                    var f = b.lengthSqr(d);
                    return 1E-6 > f ? b.set(a, 0, 0, 0) : b.multiplyScalar(a, d, b.dot(c, d) / f)
                };
                b.toArray = function(a, b, c) {
                    void 0 === c && (c = 0);
                    a[c + 0] = b.x;
                    a[c + 1] = b.y;
                    a[c + 2] = b.z;
                    return a
                };
                b.fromArray =
                    function(a, b, c) {
                        void 0 === c && (c = 0);
                        a.x = b[c + 0];
                        a.y = b[c + 1];
                        a.z = b[c + 2];
                        return a
                    };
                e.clone = function() {
                    return new b(this.x, this.y, this.z)
                };
                e.set = function(a) {
                    this.x = a.x;
                    this.y = a.y;
                    this.z = a.z;
                    return this
                };
                e.equals = function(a) {
                    return a && this.x === a.x && this.y === a.y && this.z === a.z
                };
                e.fuzzyEquals = function(a, b) {
                    return this.x - b <= a.x && a.x <= this.x + b && this.y - b <= a.y && a.y <= this.y + b && this.z - b <= a.z && a.z <= this.z + b ? !0 : !1
                };
                e.toString = function() {
                    return "(" + this.x.toFixed(2) + ", " + this.y.toFixed(2) + ", " + this.z.toFixed(2) + ")"
                };
                e.lerp = function(a, c, d) {
                    d = d || new b;
                    b.lerp(d, this, a, c);
                    return d
                };
                e.clampf = function(a, b) {
                    this.x = f["default"].clampf(this.x, a.x, b.x);
                    this.y = f["default"].clampf(this.y, a.y, b.y);
                    this.z = f["default"].clampf(this.z, a.z, b.z);
                    return this
                };
                e.addSelf = function(a) {
                    this.x += a.x;
                    this.y += a.y;
                    this.z += a.z;
                    return this
                };
                e.add = function(a, c) {
                    c = c || new b;
                    c.x = this.x + a.x;
                    c.y = this.y + a.y;
                    c.z = this.z + a.z;
                    return c
                };
                e.subtract = function(a) {
                    this.x -= a.x;
                    this.y -= a.y;
                    this.z -= a.z;
                    return this
                };
                e.multiplyScalar = function(a) {
                    this.x *= a;
                    this.y *=
                        a;
                    this.z *= a;
                    return this
                };
                e.multiply = function(a) {
                    this.x *= a.x;
                    this.y *= a.y;
                    this.z *= a.z;
                    return this
                };
                e.divide = function(a) {
                    this.x /= a;
                    this.y /= a;
                    this.z /= a;
                    return this
                };
                e.negate = function() {
                    this.x = -this.x;
                    this.y = -this.y;
                    this.z = -this.z;
                    return this
                };
                e.dot = function(a) {
                    return this.x * a.x + this.y * a.y + this.z * a.z
                };
                e.cross = function(a, c) {
                    c = c || new b;
                    b.cross(c, this, a);
                    return c
                };
                e.len = function() {
                    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z)
                };
                e.lengthSqr = function() {
                    return this.x * this.x + this.y * this.y + this.z *
                        this.z
                };
                e.normalizeSelf = function() {
                    b.normalize(this, this);
                    return this
                };
                e.normalize = function(a) {
                    a = a || new b;
                    b.normalize(a, this);
                    return a
                };
                e.transformMat4 = function(a, c) {
                    c = c || new b;
                    b.transformMat4(c, this, a);
                    return c
                };
                e.maxAxis = function() {
                    return Math.max(this.x, this.y, this.z)
                };
                e.signAngle = function(a) {
                    cc.warnID(1408, "vec3.signAngle", "v2.1", "cc.v2(selfVector).signAngle(vector)");
                    var b = new n["default"](this.x, this.y);
                    a = new n["default"](a.x, a.y);
                    return b.signAngle(a)
                };
                e.rotate = function(a, b) {
                    cc.warnID(1408,
                        "vec3.rotate", "v2.1", "cc.v2(selfVector).rotate(radians, out)");
                    return n["default"].prototype.rotate.call(this, a, b)
                };
                e.rotateSelf = function(a) {
                    cc.warnID(1408, "vec3.rotateSelf", "v2.1", "cc.v2(selfVector).rotateSelf(radians)");
                    return n["default"].prototype.rotateSelf.call(this, a)
                };
                d(b, null, [{
                    key: "ONE",
                    get: function() {
                        return new b(1, 1, 1)
                    }
                }, {
                    key: "ZERO",
                    get: function() {
                        return new b
                    }
                }, {
                    key: "UP",
                    get: function() {
                        return new b(0, 1, 0)
                    }
                }, {
                    key: "RIGHT",
                    get: function() {
                        return new b(1, 0, 0)
                    }
                }, {
                    key: "FORWARD",
                    get: function() {
                        return new b(0,
                            0, 1)
                    }
                }]);
                return b
            }(b["default"]);
        m["default"] = x;
        x.sub = x.subtract;
        x.mul = x.multiply;
        x.scale = x.multiplyScalar;
        x.mag = x.len;
        x.squaredMagnitude = x.lengthSqr;
        x.div = x.divide;
        x.ONE_R = x.ONE;
        x.ZERO_R = x.ZERO;
        x.UP_R = x.UP;
        x.RIGHT_R = x.RIGHT;
        x.FRONT_R = x.FORWARD;
        var z = new x,
            E = new x;
        l["default"].fastDefine("cc.Vec3", x, {
            x: 0,
            y: 0,
            z: 0
        });
        cc.v3 = function(a, b, c) {
            return new x(a, b, c)
        };
        cc.Vec3 = x;
        q.exports = m["default"]
    }, {
        "../platform/CCClass": 227,
        "../utils/misc": 310,
        "./utils": 332,
        "./value-type": 333,
        "./vec2": 334
    }],
    336: [function(g,
        q, m) {
        function h(a) {
            return a && a.__esModule ? a : {
                default: a
            }
        }

        function e(a, b) {
            for (var c = 0; c < b.length; c++) {
                var d = b[c];
                d.enumerable = d.enumerable || !1;
                d.configurable = !0;
                "value" in d && (d.writable = !0);
                Object.defineProperty(a, k(d.key), d)
            }
        }

        function d(a, b, c) {
            b && e(a.prototype, b);
            c && e(a, c);
            Object.defineProperty(a, "prototype", {
                writable: !1
            });
            return a
        }

        function k(a) {
            a: if ("object" === typeof a && null !== a) {
                $jscomp.initSymbol();
                var b = a[Symbol.toPrimitive];
                if (void 0 !== b) {
                    a = b.call(a, "string");
                    if ("object" !== typeof a) break a;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                a = String(a)
            }return "symbol" === typeof a ? a : String(a)
        }

        function c(b, c) {
            b.prototype = Object.create(c.prototype);
            b.prototype.constructor = b;
            a(b, c)
        }

        function a(b, c) {
            a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(a, b) {
                a.__proto__ = b;
                return a
            };
            return a(b, c)
        }

        function b(a, b, c, d) {
            return new t(a, b, c, d)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        m.v4 = b;
        q = h(g("../platform/CCClass"));
        var l = h(g("./value-type")),
            f = g("./utils"),
            n = 0,
            u = 0,
            v = 0,
            p = 0,
            t = function(a) {
                function b(c, d, f, e) {
                    void 0 === c && (c = 0);
                    void 0 === d && (d = 0);
                    void 0 === f && (f = 0);
                    void 0 === e && (e = 0);
                    var l = a.call(this) || this;
                    l.mag = b.prototype.len;
                    l.magSqr = b.prototype.lengthSqr;
                    l.subSelf = b.prototype.subtract;
                    l.mulSelf = b.prototype.multiplyScalar;
                    l.divSelf = b.prototype.divide;
                    l.scaleSelf = b.prototype.multiply;
                    l.negSelf = b.prototype.negate;
                    l.x = void 0;
                    l.y = void 0;
                    l.z = void 0;
                    l.w = void 0;
                    c && "object" === typeof c ? (l.x = c.x, l.y = c.y, l.z = c.z, l.w = c.w) : (l.x = c, l.y = d, l.z = f, l.w = e);
                    return l
                }
                c(b, a);
                var e = b.prototype;
                e.sub = function(a, c) {
                    return b.subtract(c || new b, this, a)
                };
                e.mul = function(a,
                    c) {
                    return b.multiplyScalar(c || new b, this, a)
                };
                e.div = function(a, c) {
                    return b.multiplyScalar(c || new b, this, 1 / a)
                };
                e.scale = function(a, c) {
                    return b.multiply(c || new b, this, a)
                };
                e.neg = function(a) {
                    return b.negate(a || new b, this)
                };
                b.clone = function(a) {
                    return new b(a.x, a.y, a.z, a.w)
                };
                b.copy = function(a, b) {
                    a.x = b.x;
                    a.y = b.y;
                    a.z = b.z;
                    a.w = b.w;
                    return a
                };
                b.set = function(a, b, c, d, f) {
                    a.x = b;
                    a.y = c;
                    a.z = d;
                    a.w = f;
                    return a
                };
                b.add = function(a, b, c) {
                    a.x = b.x + c.x;
                    a.y = b.y + c.y;
                    a.z = b.z + c.z;
                    a.w = b.w + c.w;
                    return a
                };
                b.subtract = function(a, b, c) {
                    a.x =
                        b.x - c.x;
                    a.y = b.y - c.y;
                    a.z = b.z - c.z;
                    a.w = b.w - c.w;
                    return a
                };
                b.multiply = function(a, b, c) {
                    a.x = b.x * c.x;
                    a.y = b.y * c.y;
                    a.z = b.z * c.z;
                    a.w = b.w * c.w;
                    return a
                };
                b.divide = function(a, b, c) {
                    a.x = b.x / c.x;
                    a.y = b.y / c.y;
                    a.z = b.z / c.z;
                    a.w = b.w / c.w;
                    return a
                };
                b.ceil = function(a, b) {
                    a.x = Math.ceil(b.x);
                    a.y = Math.ceil(b.y);
                    a.z = Math.ceil(b.z);
                    a.w = Math.ceil(b.w);
                    return a
                };
                b.floor = function(a, b) {
                    a.x = Math.floor(b.x);
                    a.y = Math.floor(b.y);
                    a.z = Math.floor(b.z);
                    a.w = Math.floor(b.w);
                    return a
                };
                b.min = function(a, b, c) {
                    a.x = Math.min(b.x, c.x);
                    a.y = Math.min(b.y,
                        c.y);
                    a.z = Math.min(b.z, c.z);
                    a.w = Math.min(b.w, c.w);
                    return a
                };
                b.max = function(a, b, c) {
                    a.x = Math.max(b.x, c.x);
                    a.y = Math.max(b.y, c.y);
                    a.z = Math.max(b.z, c.z);
                    a.w = Math.max(b.w, c.w);
                    return a
                };
                b.round = function(a, b) {
                    a.x = Math.round(b.x);
                    a.y = Math.round(b.y);
                    a.z = Math.round(b.z);
                    a.w = Math.round(b.w);
                    return a
                };
                b.multiplyScalar = function(a, b, c) {
                    a.x = b.x * c;
                    a.y = b.y * c;
                    a.z = b.z * c;
                    a.w = b.w * c;
                    return a
                };
                b.scaleAndAdd = function(a, b, c, d) {
                    a.x = b.x + c.x * d;
                    a.y = b.y + c.y * d;
                    a.z = b.z + c.z * d;
                    a.w = b.w + c.w * d;
                    return a
                };
                b.distance = function(a, b) {
                    var c =
                        b.x - a.x,
                        d = b.y - a.y,
                        f = b.z - a.z;
                    a = b.w - a.w;
                    return Math.sqrt(c * c + d * d + f * f + a * a)
                };
                b.squaredDistance = function(a, b) {
                    var c = b.x - a.x,
                        d = b.y - a.y,
                        f = b.z - a.z;
                    a = b.w - a.w;
                    return c * c + d * d + f * f + a * a
                };
                b.len = function(a) {
                    n = a.x;
                    u = a.y;
                    v = a.z;
                    p = a.w;
                    return Math.sqrt(n * n + u * u + v * v + p * p)
                };
                b.lengthSqr = function(a) {
                    n = a.x;
                    u = a.y;
                    v = a.z;
                    p = a.w;
                    return n * n + u * u + v * v + p * p
                };
                b.negate = function(a, b) {
                    a.x = -b.x;
                    a.y = -b.y;
                    a.z = -b.z;
                    a.w = -b.w;
                    return a
                };
                b.inverse = function(a, b) {
                    a.x = 1 / b.x;
                    a.y = 1 / b.y;
                    a.z = 1 / b.z;
                    a.w = 1 / b.w;
                    return a
                };
                b.inverseSafe = function(a, b) {
                    n = b.x;
                    u =
                        b.y;
                    v = b.z;
                    p = b.w;
                    Math.abs(n) < f.EPSILON ? a.x = 0 : a.x = 1 / n;
                    Math.abs(u) < f.EPSILON ? a.y = 0 : a.y = 1 / u;
                    Math.abs(v) < f.EPSILON ? a.z = 0 : a.z = 1 / v;
                    Math.abs(p) < f.EPSILON ? a.w = 0 : a.w = 1 / p;
                    return a
                };
                b.normalize = function(a, b) {
                    n = b.x;
                    u = b.y;
                    v = b.z;
                    p = b.w;
                    b = n * n + u * u + v * v + p * p;
                    0 < b && (b = 1 / Math.sqrt(b), a.x = n * b, a.y = u * b, a.z = v * b, a.w = p * b);
                    return a
                };
                b.dot = function(a, b) {
                    return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w
                };
                b.lerp = function(a, b, c, d) {
                    a.x = b.x + d * (c.x - b.x);
                    a.y = b.y + d * (c.y - b.y);
                    a.z = b.z + d * (c.z - b.z);
                    a.w = b.w + d * (c.w - b.w);
                    return a
                };
                b.random = function(a, b) {
                    b =
                        b || 1;
                    var c = 2 * (0, f.random)() * Math.PI,
                        d = 2 * (0, f.random)() - 1,
                        e = Math.sqrt(1 - d * d);
                    a.x = e * Math.cos(c) * b;
                    a.y = e * Math.sin(c) * b;
                    a.z = d * b;
                    a.w = 0;
                    return a
                };
                b.transformMat4 = function(a, b, c) {
                    n = b.x;
                    u = b.y;
                    v = b.z;
                    p = b.w;
                    b = c.m;
                    a.x = b[0] * n + b[4] * u + b[8] * v + b[12] * p;
                    a.y = b[1] * n + b[5] * u + b[9] * v + b[13] * p;
                    a.z = b[2] * n + b[6] * u + b[10] * v + b[14] * p;
                    a.w = b[3] * n + b[7] * u + b[11] * v + b[15] * p;
                    return a
                };
                b.transformAffine = function(a, b, c) {
                    n = b.x;
                    u = b.y;
                    v = b.z;
                    p = b.w;
                    c = c.m;
                    a.x = c[0] * n + c[1] * u + c[2] * v + c[3] * p;
                    a.y = c[4] * n + c[5] * u + c[6] * v + c[7] * p;
                    a.x = c[8] * n + c[9] * u + c[10] * v + c[11] *
                        p;
                    a.w = b.w;
                    return a
                };
                b.transformQuat = function(a, b, c) {
                    var d = b.x,
                        f = b.y,
                        e = b.z;
                    n = c.x;
                    u = c.y;
                    v = c.z;
                    p = c.w;
                    c = p * d + u * e - v * f;
                    var l = p * f + v * d - n * e,
                        k = p * e + n * f - u * d;
                    d = -n * d - u * f - v * e;
                    a.x = c * p + d * -n + l * -v - k * -u;
                    a.y = l * p + d * -u + k * -n - c * -v;
                    a.z = k * p + d * -v + c * -u - l * -n;
                    a.w = b.w;
                    return a
                };
                b.strictEquals = function(a, b) {
                    return a.x === b.x && a.y === b.y && a.z === b.z && a.w === b.w
                };
                b.equals = function(a, b, c) {
                    void 0 === c && (c = f.EPSILON);
                    return Math.abs(a.x - b.x) <= c * Math.max(1, Math.abs(a.x), Math.abs(b.x)) && Math.abs(a.y - b.y) <= c * Math.max(1, Math.abs(a.y), Math.abs(b.y)) &&
                        Math.abs(a.z - b.z) <= c * Math.max(1, Math.abs(a.z), Math.abs(b.z)) && Math.abs(a.w - b.w) <= c * Math.max(1, Math.abs(a.w), Math.abs(b.w))
                };
                b.toArray = function(a, b, c) {
                    void 0 === c && (c = 0);
                    a[c + 0] = b.x;
                    a[c + 1] = b.y;
                    a[c + 2] = b.z;
                    a[c + 3] = b.w;
                    return a
                };
                b.fromArray = function(a, b, c) {
                    void 0 === c && (c = 0);
                    a.x = b[c + 0];
                    a.y = b[c + 1];
                    a.z = b[c + 2];
                    a.w = b[c + 3];
                    return a
                };
                e.clone = function() {
                    return new b(this.x, this.y, this.z, this.w)
                };
                e.set = function(a, b, c, d) {
                    a && "object" === typeof a ? (this.x = a.x, this.y = a.y, this.z = a.z, this.w = a.w) : (this.x = a || 0, this.y = b || 0,
                        this.z = c || 0, this.w = d || 0);
                    return this
                };
                e.equals = function(a, b) {
                    void 0 === b && (b = f.EPSILON);
                    return Math.abs(this.x - a.x) <= b * Math.max(1, Math.abs(this.x), Math.abs(a.x)) && Math.abs(this.y - a.y) <= b * Math.max(1, Math.abs(this.y), Math.abs(a.y)) && Math.abs(this.z - a.z) <= b * Math.max(1, Math.abs(this.z), Math.abs(a.z)) && Math.abs(this.w - a.w) <= b * Math.max(1, Math.abs(this.w), Math.abs(a.w))
                };
                e.equals4f = function(a, b, c, d, e) {
                    void 0 === e && (e = f.EPSILON);
                    return Math.abs(this.x - a) <= e * Math.max(1, Math.abs(this.x), Math.abs(a)) && Math.abs(this.y -
                        b) <= e * Math.max(1, Math.abs(this.y), Math.abs(b)) && Math.abs(this.z - c) <= e * Math.max(1, Math.abs(this.z), Math.abs(c)) && Math.abs(this.w - d) <= e * Math.max(1, Math.abs(this.w), Math.abs(d))
                };
                e.strictEquals = function(a) {
                    return this.x === a.x && this.y === a.y && this.z === a.z && this.w === a.w
                };
                e.strictEquals4f = function(a, b, c, d) {
                    return this.x === a && this.y === b && this.z === c && this.w === d
                };
                e.lerp = function(a, b) {
                    n = this.x;
                    u = this.y;
                    v = this.z;
                    p = this.w;
                    this.x = n + b * (a.x - n);
                    this.y = u + b * (a.y - u);
                    this.z = v + b * (a.z - v);
                    this.w = p + b * (a.w - p);
                    return this
                };
                e.toString = function() {
                    return "(" + this.x.toFixed(2) + ", " + this.y.toFixed(2) + ", " + this.z.toFixed(2) + ", " + this.w.toFixed(2) + ")"
                };
                e.clampf = function(a, b) {
                    this.x = (0, f.clamp)(this.x, a.x, b.x);
                    this.y = (0, f.clamp)(this.y, a.y, b.y);
                    this.z = (0, f.clamp)(this.z, a.z, b.z);
                    this.w = (0, f.clamp)(this.w, a.w, b.w);
                    return this
                };
                e.addSelf = function(a) {
                    this.x += a.x;
                    this.y += a.y;
                    this.z += a.z;
                    this.w += a.w;
                    return this
                };
                e.add = function(a, c) {
                    c = c || new b;
                    c.x = this.x + a.x;
                    c.y = this.y + a.y;
                    c.z = this.z + a.z;
                    c.w = this.w + a.w;
                    return c
                };
                e.subtract = function(a,
                    c) {
                    c = c || new b;
                    c.x = this.x - a.x;
                    c.y = this.y - a.y;
                    c.z = this.z - a.z;
                    c.w = this.w - a.w;
                    return c
                };
                e.multiplyScalar = function(a) {
                    this.x *= a;
                    this.y *= a;
                    this.z *= a;
                    this.w *= a;
                    return this
                };
                e.multiply = function(a) {
                    this.x *= a.x;
                    this.y *= a.y;
                    this.z *= a.z;
                    this.w *= a.w;
                    return this
                };
                e.divide = function(a) {
                    this.x /= a;
                    this.y /= a;
                    this.z /= a;
                    this.w /= a;
                    return this
                };
                e.negate = function() {
                    this.x = -this.x;
                    this.y = -this.y;
                    this.z = -this.z;
                    this.w = -this.w;
                    return this
                };
                e.dot = function(a) {
                    return this.x * a.x + this.y * a.y + this.z * a.z + this.w * a.w
                };
                e.cross = function(a,
                    c) {
                    c = c || new b;
                    var d = this.x,
                        f = this.y,
                        e = this.z,
                        l = a.x,
                        k = a.y;
                    a = a.z;
                    c.x = f * a - e * k;
                    c.y = e * l - d * a;
                    c.z = d * k - f * l;
                    return c
                };
                e.len = function() {
                    var a = this.x,
                        b = this.y,
                        c = this.z,
                        d = this.w;
                    return Math.sqrt(a * a + b * b + c * c + d * d)
                };
                e.lengthSqr = function() {
                    var a = this.x,
                        b = this.y,
                        c = this.z,
                        d = this.w;
                    return a * a + b * b + c * c + d * d
                };
                e.normalizeSelf = function() {
                    this.normalize(this);
                    return this
                };
                e.normalize = function(a) {
                    a = a || new b;
                    n = this.x;
                    u = this.y;
                    v = this.z;
                    p = this.w;
                    var c = n * n + u * u + v * v + p * p;
                    0 < c && (c = 1 / Math.sqrt(c), a.x = n * c, a.y = u * c, a.z = v * c, a.w = p * c);
                    return a
                };
                e.transformMat4 = function(a, c) {
                    c = c || new b;
                    n = this.x;
                    u = this.y;
                    v = this.z;
                    p = this.w;
                    a = a.m;
                    c.x = a[0] * n + a[4] * u + a[8] * v + a[12] * p;
                    c.y = a[1] * n + a[5] * u + a[9] * v + a[13] * p;
                    c.z = a[2] * n + a[6] * u + a[10] * v + a[14] * p;
                    c.w = a[3] * n + a[7] * u + a[11] * v + a[15] * p;
                    return c
                };
                e.maxAxis = function() {
                    return Math.max(this.x, this.y, this.z, this.w)
                };
                d(b, null, [{
                    key: "ZERO",
                    get: function() {
                        return new b(0, 0, 0, 0)
                    }
                }, {
                    key: "ONE",
                    get: function() {
                        return new b(1, 1, 1, 1)
                    }
                }, {
                    key: "NEG_ONE",
                    get: function() {
                        return new b(-1, -1, -1, -1)
                    }
                }]);
                return b
            }(l["default"]);
        m["default"] =
            t;
        t.sub = t.subtract;
        t.mul = t.multiply;
        t.div = t.divide;
        t.scale = t.multiplyScalar;
        t.mag = t.len;
        t.squaredMagnitude = t.lengthSqr;
        t.ZERO_R = t.ZERO;
        t.ONE_R = t.ONE;
        t.NEG_ONE_R = t.NEG_ONE;
        q["default"].fastDefine("cc.Vec4", t, {
            x: 0,
            y: 0,
            z: 0,
            w: 0
        });
        cc.v4 = b;
        cc.Vec4 = t
    }, {
        "../platform/CCClass": 227,
        "./utils": 332,
        "./value-type": 333
    }],
    337: [function(g, q, m) {
        var h = cc.js;
        !0;
        g = function(d, c, a) {
            d && (a = a || h.getClassName(d), c.forEach(function(b) {
                function c() {
                    cc.errorID(1406, a, b)
                }
                h.getset(d.prototype, b, c, c)
            }))
        };
        q = function(d, c, a) {
            d && c.forEach(function(b) {
                h.getset(d,
                    b,
                    function() {
                        cc.errorID(1406, a, b)
                    })
            })
        };
        m = function(d, c, a) {
            var b, e;
            if (d) {
                var f = "Sorry, " + (a || cc.js.getClassName(d)) + ".%s is removed, please use %s instead.";
                a = function() {
                    function a(a, b) {
                        function c(b) {
                            cc.error(f, a, b)
                        }
                        Array.isArray(b) || (b = b.split(",").map(function(a) {
                            return a.trim()
                        }));
                        try {
                            h.getset(d, a, c.bind(null, b[0]), b[1] && c.bind(null, b[1]))
                        } catch (x) {}
                    }
                    e = c[k];
                    "*" === k[0] ? (b = k.slice(1), a("g" + b, e), a("s" + b, e)) : k.split(",").map(function(a) {
                        return a.trim()
                    }).forEach(function(b) {
                        a(b, e)
                    })
                };
                for (var k in c) a()
            }
        };
        var e = function(d, c, a) {
            if (d) {
                a = a || h.getClassName(d);
                for (var b in c)(function() {
                    var e = b,
                        f = d[e];
                    f && (d[e] = function() {
                        cc.warn("Sorry, %s.%s is deprecated. Please use %s instead", a, e, c[e]);
                        return f.apply(this, arguments)
                    })
                })()
            }
        };
        h.get(cc, "info", function() {
            cc.errorID(1400, "cc.info", "cc.log");
            return cc.log
        });
        h.get(cc, "spriteFrameCache", function() {
            cc.errorID(1404)
        });
        h.get(cc, "vmath", function() {
            cc.warnID(1400, "cc.vmath", "cc.math");
            return cc.math
        });
        h.get(cc.math, "vec2", function() {
            cc.warnID(1400, "cc.vmath.vec2",
                "cc.Vec2");
            return cc.Vec2
        });
        h.get(cc.math, "vec3", function() {
            cc.warnID(1400, "cc.vmath.vec3", "cc.Vec3");
            return cc.Vec3
        });
        h.get(cc.math, "vec4", function() {
            cc.warnID(1400, "cc.vmath.vec4", "cc.Vec4");
            return cc.Vec4
        });
        h.get(cc.math, "mat4", function() {
            cc.warnID(1400, "cc.vmath.mat4", "cc.Mat4");
            return cc.Mat4
        });
        h.get(cc.math, "mat3", function() {
            cc.warnID(1400, "cc.vmath.mat3", "cc.Mat3");
            return cc.Mat3
        });
        h.get(cc.math, "quat", function() {
            cc.warnID(1400, "cc.vmath.quat", "cc.Quat");
            return cc.Quat
        });
        h.get(cc.SpriteFrame.prototype,
            "_textureLoaded",
            function() {
                cc.errorID(1400, "spriteFrame._textureLoaded", "spriteFrame.textureLoaded()");
                return this.textureLoaded()
            });
        g(cc.SpriteFrame, ["addLoadedEventListener"]);
        e(cc.Sprite.prototype, {
            setState: "cc.Sprite.setMaterial",
            getState: "cc.Sprite.getMaterial"
        }, "cc.Sprite");
        h.get(cc.SpriteFrame.prototype, "clearTexture", function() {
            cc.errorID(1406, "cc.SpriteFrame", "clearTexture");
            return function() {}
        });
        h.get(cc, "textureCache", function() {
            cc.errorID(1406, "cc", "textureCache")
        });
        var d = cc.Texture2D;
        h.get(d.prototype, "releaseTexture", function() {
            cc.errorID(1400, "texture.releaseTexture()", "texture.destroy()");
            return this.destroy
        });
        h.get(d.prototype, "getName", function() {
            cc.errorID(1400, "texture.getName()", "texture._glID");
            return function() {
                return this._glID || null
            }
        });
        h.get(d.prototype, "isLoaded", function() {
            cc.errorID(1400, "texture.isLoaded function", "texture.loaded property");
            return function() {
                return this.loaded
            }
        });
        h.get(d.prototype, "setAntiAliasTexParameters", function() {
            cc.errorID(1400, "texture.setAntiAliasTexParameters()",
                "texture.setFilters(cc.Texture2D.Filter.LINEAR, cc.Texture2D.Filter.LINEAR)");
            return function() {
                this.setFilters(d.Filter.LINEAR, d.Filter.LINEAR)
            }
        });
        h.get(d.prototype, "setAliasTexParameters", function() {
            cc.errorID(1400, "texture.setAntiAliasTexParameters()", "texture.setFilters(cc.Texture2D.Filter.NEAREST, cc.Texture2D.Filter.NEAREST)");
            return function() {
                this.setFilters(d.Filter.NEAREST, d.Filter.NEAREST)
            }
        });
        q(cc.macro, ["ENABLE_GL_STATE_CACHE", "FIX_ARTIFACTS_BY_STRECHING_TEXEL"], "cc.macro");
        m(cc.macro, {
            PI: "Math.PI",
            PI2: "Math.PI * 2",
            FLT_MAX: "Number.MAX_VALUE",
            FLT_MIN: "Number.MIN_VALUE",
            UINT_MAX: "Number.MAX_SAFE_INTEGER"
        }, "cc.macro");
        q(cc.game, ["CONFIG_KEY"], "cc.game");
        q(cc.sys, "dumpRoot cleanScript BROWSER_TYPE_WECHAT_GAME BROWSER_TYPE_WECHAT_GAME_SUB BROWSER_TYPE_BAIDU_GAME BROWSER_TYPE_BAIDU_GAME_SUB BROWSER_TYPE_XIAOMI_GAME BROWSER_TYPE_ALIPAY_GAME".split(" "), "cc.sys");
        m(cc.Director, {
                EVENT_PROJECTION_CHANGED: "",
                EVENT_BEFORE_VISIT: "EVENT_AFTER_UPDATE",
                EVENT_AFTER_VISIT: "EVENT_BEFORE_DRAW"
            },
            "cc.Director");
        e(cc.Director.prototype, {
            convertToGL: "cc.view.convertToLocationInView",
            convertToUI: "",
            getWinSize: "cc.winSize",
            getWinSizeInPixels: "cc.winSize",
            getVisibleSize: "cc.view.getVisibleSize",
            getVisibleOrigin: "cc.view.getVisibleOrigin",
            purgeCachedData: "cc.assetManager.releaseAll",
            setDepthTest: "cc.Camera.main.depth",
            setClearColor: "cc.Camera.main.backgroundColor",
            getRunningScene: "cc.director.getScene",
            getAnimationInterval: "cc.game.getFrameRate",
            setAnimationInterval: "cc.game.setFrameRate",
            isDisplayStats: "cc.debug.isDisplayStats",
            setDisplayStats: "cc.debug.setDisplayStats",
            stopAnimation: "cc.game.pause",
            startAnimation: "cc.game.resume"
        }, "cc.Director");
        g(cc.Director, "pushScene popScene popToRootScene popToSceneStackLevel setProjection getProjection".split(" "), "cc.Director");
        m(cc.Scheduler, {
            scheduleCallbackForTarget: "schedule",
            scheduleUpdateForTarget: "scheduleUpdate",
            unscheduleCallbackForTarget: "unschedule",
            unscheduleUpdateForTarget: "unscheduleUpdate",
            unscheduleAllCallbacksForTarget: "unscheduleAllForTarget",
            unscheduleAllCallbacks: "unscheduleAll",
            unscheduleAllCallbacksWithMinPriority: "unscheduleAllWithMinPriority"
        }, "cc.Scheduler");
        m(cc.view, {
            adjustViewPort: "adjustViewportMeta",
            setViewPortInPoints: "setViewportInPoints",
            getViewPortRect: "getViewportRect"
        }, "cc.view");
        q(cc.view, "isViewReady setTargetDensityDPI getTargetDensityDPI setFrameZoomFactor canSetContentScaleFactor setContentTranslateLeftTop getContentTranslateLeftTop setViewName getViewName".split(" "), "cc.view");
        g(cc.PhysicsManager, ["attachDebugDrawToCamera", "detachDebugDrawFromCamera"]);
        g(cc.CollisionManager, ["attachDebugDrawToCamera", "detachDebugDrawFromCamera"]);
        m(cc._BaseNode.prototype, {
            tag: "name",
            getTag: "name",
            setTag: "name",
            getChildByTag: "getChildByName",
            removeChildByTag: "getChildByName(name).destroy()"
        });
        g(cc.Node, "_cascadeColorEnabled cascadeColor isCascadeColorEnabled setCascadeColorEnabled _cascadeOpacityEnabled cascadeOpacity isCascadeOpacityEnabled setCascadeOpacityEnabled opacityModifyRGB isOpacityModifyRGB setOpacityModifyRGB ignoreAnchor isIgnoreAnchorPointForPosition ignoreAnchorPointForPosition isRunning _sgNode".split(" "));
        e(cc.Node.prototype, {
            getNodeToParentTransform: "getLocalMatrix",
            getNodeToParentTransformAR: "getLocalMatrix",
            getNodeToWorldTransform: "getWorldMatrix",
            getNodeToWorldTransformAR: "getWorldMatrix",
            getParentToNodeTransform: "getLocalMatrix",
            getWorldToNodeTransform: "getWorldMatrix",
            convertTouchToNodeSpace: "convertToNodeSpaceAR",
            convertTouchToNodeSpaceAR: "convertToNodeSpaceAR",
            convertToWorldSpace: "convertToWorldSpaceAR",
            convertToNodeSpace: "convertToNodeSpaceAR"
        });
        m(cc.Node.prototype, {
            getRotationX: "rotationX",
            setRotationX: "rotationX",
            getRotationY: "rotationY",
            setRotationY: "rotationY",
            getPositionX: "x",
            setPositionX: "x",
            getPositionY: "y",
            setPositionY: "y",
            getSkewX: "skewX",
            setSkewX: "skewX",
            getSkewY: "skewY",
            setSkewY: "skewY",
            getScaleX: "scaleX",
            setScaleX: "scaleX",
            getScaleY: "scaleY",
            setScaleY: "scaleY",
            getOpacity: "opacity",
            setOpacity: "opacity",
            getColor: "color",
            setColor: "color",
            getLocalZOrder: "zIndex",
            setLocalZOrder: "zIndex"
        });
        m(cc.Sprite.prototype, {
            setInsetLeft: "cc.SpriteFrame insetLeft",
            setInsetRight: "cc.SpriteFrame insetRight",
            setInsetTop: "cc.SpriteFrame insetTop",
            setInsetBottom: "cc.SpriteFrame insetBottom"
        });
        cc.Material.getInstantiatedBuiltinMaterial = cc.MaterialVariant.createWithBuiltin;
        cc.Material.getInstantiatedMaterial = cc.MaterialVariant.create;
        e(cc.Material, {
            getInstantiatedBuiltinMaterial: "cc.MaterialVariant.createWithBuiltin",
            getInstantiatedMaterial: "cc.MaterialVariant.create"
        });
        cc.js.getset(cc.RenderComponent.prototype, "sharedMaterials", function() {
                cc.warnID(1400, "sharedMaterials", "getMaterials");
                return this.materials
            },
            function(d) {
                cc.warnID(1400, "sharedMaterials", "setMaterial");
                this.materials = d
            });
        e(cc.Follow.prototype, {
            setBoudarySet: "cc.Follow.setBoundarySet"
        });
        e(cc.Camera.prototype, {
            getNodeToCameraTransform: "getWorldToScreenMatrix2D",
            getCameraToWorldPoint: "getScreenToWorldPoint",
            getWorldToCameraPoint: "getWorldToScreenPoint",
            getCameraToWorldMatrix: "getScreenToWorldMatrix2D",
            getWorldToCameraMatrix: "getWorldToScreenMatrix2D"
        });
        g(cc.Camera, ["addTarget", "removeTarget", "getTargets"]);
        !1;
        Object.defineProperties(cc.Scene.prototype, {
            active: {
                get: function() {
                    cc.error('"%s" is not defined in the Scene, it is only defined in normal nodes.', "active");
                    return !0
                },
                set: function() {
                    cc.error('"%s" is not defined in the Scene, it is only defined in normal nodes.', "active")
                }
            },
            activeInHierarchy: {
                get: function() {
                    cc.error('"%s" is not defined in the Scene, it is only defined in normal nodes.', "activeInHierarchy");
                    return !0
                }
            },
            getComponent: {
                get: function() {
                    cc.error('"%s" is not defined in the Scene, it is only defined in normal nodes.', "getComponent");
                    return function() {
                        return null
                    }
                }
            },
            addComponent: {
                get: function() {
                    cc.error('"%s" is not defined in the Scene, it is only defined in normal nodes.', "addComponent");
                    return function() {
                        return null
                    }
                }
            }
        });
        q(cc.dynamicAtlasManager, ["minFrameSize"], "cc.dynamicAtlasManager");
        cc.Light && q(cc.Light.prototype, ["shadowDepthScale"], "cc.Light.prototype");
        m(cc, {
            affineTransformMake: "cc.AffineTransform.create",
            affineTransformMakeIdentity: "cc.AffineTransform.identity",
            affineTransformClone: "cc.AffineTransform.clone",
            affineTransformConcat: "cc.AffineTransform.concat",
            affineTransformConcatIn: "cc.AffineTransform.concat",
            affineTransformInvert: "cc.AffineTransform.invert",
            affineTransformInvertIn: "cc.AffineTransform.invert",
            affineTransformInvertOut: "cc.AffineTransform.invert",
            affineTransformEqualToTransform: "cc.AffineTransform.equal",
            pointApplyAffineTransform: "cc.AffineTransform.transformVec2",
            sizeApplyAffineTransform: "cc.AffineTransform.transformSize",
            rectApplyAffineTransform: "cc.AffineTransform.transformRect",
            obbApplyAffineTransform: "cc.AffineTransform.transformObb",
            pointEqualToPoint: "cc.Vec2 equals",
            sizeEqualToSize: "cc.Size equals",
            rectEqualToRect: "rectA.equals(rectB)",
            rectContainsRect: "rectA.containsRect(rectB)",
            rectContainsPoint: "rect.contains(vec2)",
            rectOverlapsRect: "rectA.intersects(rectB)",
            rectIntersectsRect: "rectA.intersects(rectB)",
            rectIntersection: "rectA.intersection(intersection, rectB)",
            rectUnion: "rectA.union(union, rectB)",
            rectGetMaxX: "rect.xMax",
            rectGetMidX: "rect.center.x",
            rectGetMinX: "rect.xMin",
            rectGetMaxY: "rect.yMax",
            rectGetMidY: "rect.center.y",
            rectGetMinY: "rect.yMin",
            colorEqual: "colorA.equals(colorB)",
            hexToColor: "color.fromHEX(hexColor)",
            colorToHex: "color.toHEX()",
            TextAlignment: "cc.macro.TextAlignment",
            VerticalTextAlignment: "cc.macro.VerticalTextAlignment",
            pNeg: "p.neg()",
            pAdd: "p1.add(p2)",
            pSub: "p1.sub(p2)",
            pMult: "p.mul(factor)",
            pMidpoint: "p1.add(p2).mul(0.5)",
            pDot: "p1.dot(p2)",
            pCross: "p1.cross(p2)",
            pPerp: "p.rotate(-90 * Math.PI / 180)",
            pRPerp: "p.rotate(90 * Math.PI / 180)",
            pProject: "p1.project(p2)",
            pLengthSQ: "p.magSqr()",
            pDistanceSQ: "p1.sub(p2).magSqr()",
            pLength: "p.mag()",
            pDistance: "p1.sub(p2).mag()",
            pNormalize: "p.normalize()",
            pForAngle: "cc.v2(Math.cos(a), Math.sin(a))",
            pToAngle: "Math.atan2(v.y, v.x)",
            pZeroIn: "p.x = p.y = 0",
            pIn: "p1.set(p2)",
            pMultIn: "p.mulSelf(factor)",
            pSubIn: "p1.subSelf(p2)",
            pAddIn: "p1.addSelf(p2)",
            pNormalizeIn: "p.normalizeSelf()",
            pSameAs: "p1.equals(p2)",
            pAngle: "v1.angle(v2)",
            pAngleSigned: "v1.signAngle(v2)",
            pRotateByAngle: "p.rotate(radians)",
            pCompMult: "v1.multiply(v2)",
            pFuzzyEqual: "v1.fuzzyEquals(v2, tolerance)",
            pLerp: "p.lerp(endPoint, ratio)",
            pClamp: "p.clampf(min_inclusive, max_inclusive)",
            rand: "Math.random() * 0xffffff",
            randomMinus1To1: "(Math.random() - 0.5) * 2",
            container: "cc.game.container",
            _canvas: "cc.game.canvas",
            _renderType: "cc.game.renderType",
            _getError: "cc.debug.getError",
            _initDebugSetting: "cc.debug._resetDebugSetting",
            DebugMode: "cc.debug.DebugMode"
        }, "cc");
        q(cc, "blendFuncDisable pFromSize pCompOp pIntersectPoint pSegmentIntersect pLineIntersect obbApplyMatrix getImageFormatByData initEngine".split(" "), "cc");
        e(cc, {
            p: "cc.v2"
        }, "cc");
        m(cc.Rect, {
            contain: "rectA.contains(rectB)",
            transformMat4: "rect.transformMat4(out, mat4)"
        });
        m(cc.Color, {
            rgb2hsv: "color.toHSV()",
            hsv2rgb: "color.fromHSV(h, s, v)"
        });
        e(cc.Color, {
            fromHex: "cc.Color.fromHEX"
        });
        h.get(cc, "lerp", function() {
            cc.errorID(1400, "cc.lerp", "cc.misc.lerp");
            return cc.misc.lerp
        });
        h.get(cc, "random0To1", function() {
            cc.errorID(1400, "cc.random0To1", "Math.random");
            return Math.random
        });
        h.get(cc, "degreesToRadians", function() {
            cc.errorID(1400, "cc.degreesToRadians", "cc.misc.degreesToRadians");
            return cc.misc.degreesToRadians
        });
        h.get(cc, "radiansToDegrees", function() {
            cc.errorID(1400, "cc.radiansToDegrees", "cc.misc.radiansToDegrees");
            return cc.misc.radiansToDegrees
        });
        h.get(cc, "clampf", function() {
            cc.errorID(1400, "cc.clampf", "cc.misc.clampf");
            return cc.misc.clampf
        });
        h.get(cc, "clamp01", function() {
            cc.errorID(1400, "cc.clamp01", "cc.misc.clamp01");
            return cc.misc.clamp01
        });
        h.get(cc, "ImageFormat", function() {
            cc.errorID(1400, "cc.ImageFormat", "cc.macro.ImageFormat");
            return cc.macro.ImageFormat
        });
        h.get(cc, "KEY", function() {
            cc.errorID(1400,
                "cc.KEY", "cc.macro.KEY");
            return cc.macro.KEY
        });
        h.get(cc, "Easing", function() {
            cc.errorID(1400, "cc.Easing", "cc.easing");
            return cc.easing
        });
        h.get(cc, "isChildClassOf", function() {
            cc.errorID(1400, "cc.isChildClassOf", "cc.js.isChildClassOf");
            return cc.js.isChildClassOf
        });
        "object" === typeof dragonBones && "undefined" !== typeof dragonBones.CCFactory && h.get(dragonBones.CCFactory, "getFactory", function() {
            cc.errorID(1400, "dragonBones.CCFactory.getFactory", "dragonBones.CCFactory.getInstance");
            return dragonBones.CCFactory.getInstance
        });
        cc.renderer.renderEngine = {
            get gfx() {
                cc.warnID(1400, "cc.renderer.renderEngine.gfx", "cc.gfx");
                return cc.gfx
            },
            get math() {
                cc.warnID(1400, "cc.renderer.renderEngine.math", "cc.math");
                return cc.vmath
            },
            get InputAssembler() {
                cc.warnID(1400, "cc.renderer.renderEngine.InputAssembler", "cc.renderer.InputAssembler");
                return cc.renderer.InputAssembler
            }
        };
        q(cc.audioEngine, ["getProfile", "preload", "setMaxWebAudioSize"], "cc.audioEngine")
    }, {}],
    338: [function(g, q, m) {
        g("./core/CCGame");
        g("./actions")
    }, {
        "./actions": 8,
        "./core/CCGame": 60
    }],
    339: [function(g, q, m) {
        var h = g("../compression/zlib.min"),
            e = g("../core/CCDebug");
        g = function(d) {
            var k, c, a;
            this.data = d;
            this.pos = 8;
            this.palette = [];
            this.imgData = [];
            this.transparency = {};
            this.animation = null;
            this.text = {};
            for (c = null;;) {
                var b = this.readUInt32();
                d = [];
                for (a = 0; 4 > a; ++a) d.push(String.fromCharCode(this.data[this.pos++]));
                d = d.join("");
                switch (d) {
                    case "IHDR":
                        this.width = this.readUInt32();
                        this.height = this.readUInt32();
                        this.bits = this.data[this.pos++];
                        this.colorType = this.data[this.pos++];
                        this.compressionMethod =
                            this.data[this.pos++];
                        this.filterMethod = this.data[this.pos++];
                        this.interlaceMethod = this.data[this.pos++];
                        break;
                    case "acTL":
                        this.animation = {
                            numFrames: this.readUInt32(),
                            numPlays: this.readUInt32() || Infinity,
                            frames: []
                        };
                        break;
                    case "PLTE":
                        this.palette = this.read(b);
                        break;
                    case "fcTL":
                        c && this.animation.frames.push(c);
                        this.pos += 4;
                        c = {
                            width: this.readUInt32(),
                            height: this.readUInt32(),
                            xOffset: this.readUInt32(),
                            yOffset: this.readUInt32()
                        };
                        d = this.readUInt16();
                        b = this.readUInt16() || 100;
                        c.delay = 1E3 * d / b;
                        c.disposeOp = this.data[this.pos++];
                        c.blendOp = this.data[this.pos++];
                        c.data = [];
                        break;
                    case "IDAT":
                    case "fdAT":
                        "fdAT" === d && (this.pos += 4, b -= 4);
                        d = (null != c ? c.data : void 0) || this.imgData;
                        for (a = 0; 0 <= b ? a < b : a > b; 0 <= b ? ++a : --a) d.push(this.data[this.pos++]);
                        break;
                    case "tRNS":
                        this.transparency = {};
                        switch (this.colorType) {
                            case 3:
                                this.transparency.indexed = this.read(b);
                                b = 255 - this.transparency.indexed.length;
                                if (0 < b)
                                    for (d = 0; 0 <= b ? d < b : d > b; 0 <= b ? ++d : --d) this.transparency.indexed.push(255);
                                break;
                            case 0:
                                this.transparency.grayscale = this.read(b)[0];
                                break;
                            case 2:
                                this.transparency.rgb =
                                    this.read(b)
                        }
                        break;
                    case "tEXt":
                        a = this.read(b);
                        b = a.indexOf(0);
                        d = String.fromCharCode.apply(String, a.slice(0, b));
                        this.text[d] = String.fromCharCode.apply(String, a.slice(b + 1));
                        break;
                    case "IEND":
                        c && this.animation.frames.push(c);
                        a: {
                            switch (this.colorType) {
                                case 0:
                                case 3:
                                case 4:
                                    c = 1;
                                    break a;
                                case 2:
                                case 6:
                                    c = 3;
                                    break a
                            }
                            c = void 0
                        }
                        this.colors = c;
                        this.hasAlphaChannel = 4 === (k = this.colorType) || 6 === k;
                        k = this.colors + (this.hasAlphaChannel ? 1 : 0);
                        this.pixelBitlength = this.bits * k;
                        a: {
                            switch (this.colors) {
                                case 1:
                                    k = "DeviceGray";
                                    break a;
                                case 3:
                                    k = "DeviceRGB";
                                    break a
                            }
                            k = void 0
                        }
                        this.colorSpace = k;
                        Uint8Array != Array && (this.imgData = new Uint8Array(this.imgData));
                        return;
                    default:
                        this.pos += b
                }
                this.pos += 4;
                if (this.pos > this.data.length) throw Error(e.getError(6017));
            }
        };
        g.prototype = {
            constructor: g,
            read: function(d) {
                var e;
                var c = [];
                for (e = 0; 0 <= d ? e < d : e > d; 0 <= d ? ++e : --e) c.push(this.data[this.pos++]);
                return c
            },
            readUInt32: function() {
                var d = this.data[this.pos++] << 24;
                var e = this.data[this.pos++] << 16;
                var c = this.data[this.pos++] << 8;
                var a = this.data[this.pos++];
                return d |
                    e | c | a
            },
            readUInt16: function() {
                var d = this.data[this.pos++] << 8;
                var e = this.data[this.pos++];
                return d | e
            },
            decodePixels: function(d) {
                var k, c, a, b, l, f, g, u;
                null == d && (d = this.imgData);
                if (0 === d.length) return new Uint8Array(0);
                d = (new h.Inflate(d, {
                    index: 0,
                    verify: !1
                })).decompress();
                var v = this.pixelBitlength / 8;
                var p = v * this.width;
                var t = new Uint8Array(p * this.height);
                var m = d.length;
                for (c = b = l = 0; b < m;) {
                    switch (d[b++]) {
                        case 0:
                            for (k = 0; k < p; k += 1) t[c++] = d[b++];
                            break;
                        case 1:
                            for (a = f = 0; f < p; a = f += 1) {
                                k = d[b++];
                                var z = a < v ? 0 : t[c - v];
                                t[c++] =
                                    (k + z) % 256
                            }
                            break;
                        case 2:
                            for (a = z = 0; z < p; a = z += 1) {
                                k = d[b++];
                                var E = (a - a % v) / v;
                                f = l && t[(l - 1) * p + E * v + a % v];
                                t[c++] = (f + k) % 256
                            }
                            break;
                        case 3:
                            for (a = u = 0; u < p; a = u += 1) k = d[b++], E = (a - a % v) / v, z = a < v ? 0 : t[c - v], f = l && t[(l - 1) * p + E * v + a % v], t[c++] = (k + Math.floor((z + f) / 2)) % 256;
                            break;
                        case 4:
                            for (a = u = 0; u < p; a = u += 1) {
                                k = d[b++];
                                E = (a - a % v) / v;
                                z = a < v ? 0 : t[c - v];
                                0 === l ? f = g = 0 : (f = t[(l - 1) * p + E * v + a % v], g = E && t[(l - 1) * p + (E - 1) * v + a % v]);
                                var w = z + f - g;
                                a = Math.abs(w - z);
                                E = Math.abs(w - f);
                                w = Math.abs(w - g);
                                z = a <= E && a <= w ? z : E <= w ? f : g;
                                t[c++] = (k + z) % 256
                            }
                            break;
                        default:
                            throw Error(e.getError(6018,
                                d[b - 1]));
                    }
                    l++
                }
                return t
            },
            copyToImageData: function(d, e) {
                var c, a;
                var b = this.colors;
                var l = null;
                var f = this.hasAlphaChannel;
                this.palette.length && (l = null != (c = this._decodedPalette) ? c : this._decodedPalette = this.decodePalette(), b = 4, f = !0);
                d = d.data || d;
                var k = d.length;
                var h = l || e;
                c = a = 0;
                if (1 === b)
                    for (; c < k;) b = l ? 4 * e[c / 4] : a, a = h[b++], d[c++] = a, d[c++] = a, d[c++] = a, d[c++] = f ? h[b++] : 255, a = b;
                else
                    for (; c < k;) b = l ? 4 * e[c / 4] : a, d[c++] = h[b++], d[c++] = h[b++], d[c++] = h[b++], d[c++] = f ? h[b++] : 255, a = b
            },
            decodePalette: function() {
                var d, e, c, a, b;
                var l = this.palette;
                var f = this.transparency.indexed || [];
                var h = new Uint8Array((f.length || 0) + l.length);
                var g = c = d = e = 0;
                for (a = l.length; c < a; g = c += 3) h[e++] = l[g], h[e++] = l[g + 1], h[e++] = l[g + 2], h[e++] = null != (b = f[d++]) ? b : 255;
                return h
            },
            render: function(d) {
                d.width = this.width;
                d.height = this.height;
                d = d.getContext("2d");
                var e = d.createImageData(this.width, this.height);
                this.copyToImageData(e, this.decodePixels());
                return d.putImageData(e, 0, 0)
            }
        };
        q.exports = g
    }, {
        "../compression/zlib.min": 26,
        "../core/CCDebug": 58
    }],
    340: [function(g,
        q, m) {
        m = g("../core/assets/CCAsset");
        g = g("../core/assets/CCSpriteFrame");
        g = cc.Class({
            name: "cc.ParticleAsset",
            extends: m,
            properties: {
                spriteFrame: {
                    default: null,
                    type: g
                }
            }
        });
        cc.ParticleAsset = q.exports = g
    }, {
        "../core/assets/CCAsset": 94,
        "../core/assets/CCSpriteFrame": 106
    }],
    341: [function(g, q, m) {
        var h = g("../core/platform/CCMacro");
        m = g("./CCParticleAsset");
        var e = g("../core/components/CCRenderComponent"),
            d = g("../compression/ZipUtils"),
            k = g("./CCPNGReader"),
            c = g("./CCTIFFReader"),
            a = g("../core/utils/texture-util");
        g("../core/renderer/render-flow");
        var b = g("./particle-simulator");
        g("../core/assets/material/CCMaterial");
        var l = g("../core/utils/blend-func"),
            f = cc.Enum({
                GRAVITY: 0,
                RADIUS: 1
            }),
            n = cc.Enum({
                FREE: 0,
                RELATIVE: 1,
                GROUPED: 2
            });
        g = cc.Class({
            name: "cc.ParticleSystem",
            extends: e,
            mixins: [l],
            editor: !1,
            ctor: function() {
                this.initProperties()
            },
            initProperties: function() {
                this._previewTimer = null;
                this._focused = !1;
                this._aspectRatio = 1;
                this._simulator = new b(this);
                this._startColor = cc.color(255, 255, 255, 255);
                this._startColorVar = cc.color(0, 0, 0, 0);
                this._endColor = cc.color(255,
                    255, 255, 0);
                this._endColorVar = cc.color(0, 0, 0, 0);
                this._renderSpriteFrame = null
            },
            properties: {
                preview: {
                    default: !0,
                    editorOnly: !0,
                    notify: !1,
                    animatable: !1,
                    tooltip: !1
                },
                _custom: !1,
                custom: {
                    get: function() {
                        return this._custom
                    },
                    set: function(a) {
                        !1;
                        this._custom !== a && (this._custom = a, this._applyFile(), !1)
                    },
                    animatable: !1,
                    tooltip: !1
                },
                _file: {
                    default: null,
                    type: m
                },
                file: {
                    get: function() {
                        return this._file
                    },
                    set: function(a, b) {
                        this._file !== a && ((this._file = a) ? (this._applyFile(), !1) : this.custom = !0)
                    },
                    animatable: !1,
                    type: m,
                    tooltip: !1
                },
                _spriteFrame: {
                    default: null,
                    type: cc.SpriteFrame
                },
                spriteFrame: {
                    get: function() {
                        return this._spriteFrame
                    },
                    set: function(a, b) {
                        b = this._renderSpriteFrame;
                        !1;
                        b !== a && ((this._renderSpriteFrame = a) && !a._uuid || (this._spriteFrame = a), this._applySpriteFrame(b), !1)
                    },
                    type: cc.SpriteFrame,
                    tooltip: !1
                },
                _texture: {
                    default: null,
                    type: cc.Texture2D,
                    editorOnly: !0
                },
                texture: {
                    get: function() {
                        return this._getTexture()
                    },
                    set: function(a) {
                        a && cc.warnID(6017)
                    },
                    type: cc.Texture2D,
                    tooltip: !1,
                    readonly: !0,
                    visible: !1,
                    animatable: !1
                },
                particleCount: {
                    visible: !1,
                    get: function() {
                        return this._simulator.particles.length
                    },
                    readonly: !0
                },
                _stopped: !0,
                stopped: {
                    get: function() {
                        return this._stopped
                    },
                    animatable: !1,
                    visible: !1
                },
                playOnLoad: !0,
                autoRemoveOnFinish: {
                    default: !1,
                    animatable: !1,
                    tooltip: !1
                },
                active: {
                    get: function() {
                        return this._simulator.active
                    },
                    visible: !1
                },
                totalParticles: 150,
                duration: -1,
                emissionRate: 10,
                life: 1,
                lifeVar: 0,
                _startColor: null,
                startColor: {
                    type: cc.Color,
                    get: function() {
                        return this._startColor
                    },
                    set: function(a) {
                        this._startColor.r = a.r;
                        this._startColor.g = a.g;
                        this._startColor.b =
                            a.b;
                        this._startColor.a = a.a
                    }
                },
                _startColorVar: null,
                startColorVar: {
                    type: cc.Color,
                    get: function() {
                        return this._startColorVar
                    },
                    set: function(a) {
                        this._startColorVar.r = a.r;
                        this._startColorVar.g = a.g;
                        this._startColorVar.b = a.b;
                        this._startColorVar.a = a.a
                    }
                },
                _endColor: null,
                endColor: {
                    type: cc.Color,
                    get: function() {
                        return this._endColor
                    },
                    set: function(a) {
                        this._endColor.r = a.r;
                        this._endColor.g = a.g;
                        this._endColor.b = a.b;
                        this._endColor.a = a.a
                    }
                },
                _endColorVar: null,
                endColorVar: {
                    type: cc.Color,
                    get: function() {
                        return this._endColorVar
                    },
                    set: function(a) {
                        this._endColorVar.r = a.r;
                        this._endColorVar.g = a.g;
                        this._endColorVar.b = a.b;
                        this._endColorVar.a = a.a
                    }
                },
                angle: 90,
                angleVar: 20,
                startSize: 50,
                startSizeVar: 0,
                endSize: 0,
                endSizeVar: 0,
                startSpin: 0,
                startSpinVar: 0,
                endSpin: 0,
                endSpinVar: 0,
                sourcePos: cc.Vec2.ZERO,
                posVar: cc.Vec2.ZERO,
                _positionType: {
                    default: n.FREE,
                    formerlySerializedAs: "positionType"
                },
                positionType: {
                    type: n,
                    get: function() {
                        return this._positionType
                    },
                    set: function(a) {
                        this._positionType = a;
                        this._updateMaterial()
                    }
                },
                emitterMode: {
                    default: f.GRAVITY,
                    type: f
                },
                gravity: cc.Vec2.ZERO,
                speed: 180,
                speedVar: 50,
                tangentialAccel: 80,
                tangentialAccelVar: 0,
                radialAccel: 0,
                radialAccelVar: 0,
                rotationIsDir: !1,
                startRadius: 0,
                startRadiusVar: 0,
                endRadius: 0,
                endRadiusVar: 0,
                rotatePerS: 0,
                rotatePerSVar: 0
            },
            statics: {
                DURATION_INFINITY: -1,
                START_SIZE_EQUAL_TO_END_SIZE: -1,
                START_RADIUS_EQUAL_TO_END_RADIUS: -1,
                EmitterMode: f,
                PositionType: n,
                _PNGReader: k,
                _TIFFReader: c
            },
            onFocusInEditor: !1,
            onLostFocusInEditor: !1,
            onRestore: !1,
            _startPreview: !1,
            _stopPreview: !1,
            _convertTextureToSpriteFrame: !1,
            __preload: function() {
                this._super();
                !1;
                this._custom && this.spriteFrame && !this._renderSpriteFrame ? this._applySpriteFrame(this.spriteFrame) : this._file && (this._custom ? !this._getTexture() && this._applyFile() : this._applyFile());
                !0;
                this.playOnLoad && this.resetSystem();
                !1
            },
            onDestroy: function() {
                this.autoRemoveOnFinish && (this.autoRemoveOnFinish = !1);
                this._buffer && (this._buffer.destroy(), this._buffer = null);
                this._simulator._uvFilled = 0;
                this._super()
            },
            lateUpdate: function(a) {
                this._simulator.finished || this._simulator.step(a)
            },
            addParticle: function() {},
            stopSystem: function() {
                this._stopped = !0;
                this._simulator.stop()
            },
            resetSystem: function() {
                this._stopped = !1;
                this._simulator.reset();
                this.markForRender(!0)
            },
            isFull: function() {
                return this.particleCount >= this.totalParticles
            },
            setTextureWithRect: function(a, b) {
                a instanceof cc.Texture2D && (this.spriteFrame = new cc.SpriteFrame(a, b))
            },
            _applyFile: function() {
                var a = this._file;
                if (a) {
                    var b = this;
                    cc.assetManager.postLoadNative(a, function(c) {
                        c || !a._nativeAsset ? cc.errorID(6029) : b.isValid && (b._plistFile =
                            a.nativeUrl, b._custom || (b._spriteFrame !== a.spriteFrame && (b.spriteFrame = a.spriteFrame), b._initWithDictionary(a._nativeAsset)), b._spriteFrame ? !b._renderSpriteFrame && b._spriteFrame && b._applySpriteFrame(b.spriteFrame) : a.spriteFrame ? b.spriteFrame = a.spriteFrame : b._custom && b._initTextureWithDictionary(a._nativeAsset))
                    })
                }
            },
            _initTextureWithDictionary: function(b) {
                var f = cc.path.changeBasename(this._plistFile, b.textureFileName || "");
                if (b.textureFileName) a.loadImage(f, function(a, c) {
                    a ? (b.textureFileName = void 0,
                        this._initTextureWithDictionary(b)) : (cc.assetManager.assets.add(f, c), this.spriteFrame = new cc.SpriteFrame(c))
                }, this);
                else if (b.textureImageData) {
                    var e = b.textureImageData;
                    if (!(e && 0 < e.length)) return !1;
                    var l = cc.assetManager.assets.get(f);
                    if (!l) {
                        e = d.unzipBase64AsArray(e, 1);
                        if (!e) return cc.warnID(6030, this._file.name), !1;
                        l = 8 < e.length && 137 === e[0] && 80 === e[1] && 78 === e[2] && 71 === e[3] && 13 === e[4] && 10 === e[5] && 26 === e[6] && 10 === e[7] ? h.ImageFormat.PNG : 2 < e.length && (73 === e[0] && 73 === e[1] || 77 === e[0] && 77 === e[1] || 255 === e[0] &&
                            216 === e[1]) ? h.ImageFormat.TIFF : h.ImageFormat.UNKNOWN;
                        if (l !== h.ImageFormat.TIFF && l !== h.ImageFormat.PNG) return cc.warnID(6031, this._file.name), !1;
                        var g = document.createElement("canvas");
                        l === h.ImageFormat.PNG ? (new k(e)).render(g) : c.parseTIFF(e, g);
                        l = a.cacheImage(f, g)
                    }
                    l || cc.warnID(6032, this._file.name);
                    this.spriteFrame = new cc.SpriteFrame(l)
                }
                return !0
            },
            _initWithDictionary: function(a) {
                this.totalParticles = parseInt(a.maxParticles || 0);
                this.life = parseFloat(a.particleLifespan || 0);
                this.lifeVar = parseFloat(a.particleLifespanVariance ||
                    0);
                this.emissionRate = a.emissionRate || Math.min(this.totalParticles / this.life, Number.MAX_VALUE);
                this.duration = parseFloat(a.duration || 0);
                this.srcBlendFactor = parseInt(a.blendFuncSource || h.SRC_ALPHA);
                this.dstBlendFactor = parseInt(a.blendFuncDestination || h.ONE_MINUS_SRC_ALPHA);
                var b = this._startColor;
                b.r = 255 * parseFloat(a.startColorRed || 0);
                b.g = 255 * parseFloat(a.startColorGreen || 0);
                b.b = 255 * parseFloat(a.startColorBlue || 0);
                b.a = 255 * parseFloat(a.startColorAlpha || 0);
                b = this._startColorVar;
                b.r = 255 * parseFloat(a.startColorVarianceRed ||
                    0);
                b.g = 255 * parseFloat(a.startColorVarianceGreen || 0);
                b.b = 255 * parseFloat(a.startColorVarianceBlue || 0);
                b.a = 255 * parseFloat(a.startColorVarianceAlpha || 0);
                b = this._endColor;
                b.r = 255 * parseFloat(a.finishColorRed || 0);
                b.g = 255 * parseFloat(a.finishColorGreen || 0);
                b.b = 255 * parseFloat(a.finishColorBlue || 0);
                b.a = 255 * parseFloat(a.finishColorAlpha || 0);
                b = this._endColorVar;
                b.r = 255 * parseFloat(a.finishColorVarianceRed || 0);
                b.g = 255 * parseFloat(a.finishColorVarianceGreen || 0);
                b.b = 255 * parseFloat(a.finishColorVarianceBlue || 0);
                b.a =
                    255 * parseFloat(a.finishColorVarianceAlpha || 0);
                this.startSize = parseFloat(a.startParticleSize || 0);
                this.startSizeVar = parseFloat(a.startParticleSizeVariance || 0);
                this.endSize = parseFloat(a.finishParticleSize || 0);
                this.endSizeVar = parseFloat(a.finishParticleSizeVariance || 0);
                this.positionType = parseFloat(void 0 !== a.positionType ? a.positionType : n.RELATIVE);
                this.sourcePos.x = 0;
                this.sourcePos.y = 0;
                this.posVar.x = parseFloat(a.sourcePositionVariancex || 0);
                this.posVar.y = parseFloat(a.sourcePositionVariancey || 0);
                this.angle =
                    parseFloat(a.angle || 0);
                this.angleVar = parseFloat(a.angleVariance || 0);
                this.startSpin = parseFloat(a.rotationStart || 0);
                this.startSpinVar = parseFloat(a.rotationStartVariance || 0);
                this.endSpin = parseFloat(a.rotationEnd || 0);
                this.endSpinVar = parseFloat(a.rotationEndVariance || 0);
                this.emitterMode = parseInt(a.emitterType || f.GRAVITY);
                if (this.emitterMode === f.GRAVITY) this.gravity.x = parseFloat(a.gravityx || 0), this.gravity.y = parseFloat(a.gravityy || 0), this.speed = parseFloat(a.speed || 0), this.speedVar = parseFloat(a.speedVariance ||
                    0), this.radialAccel = parseFloat(a.radialAcceleration || 0), this.radialAccelVar = parseFloat(a.radialAccelVariance || 0), this.tangentialAccel = parseFloat(a.tangentialAcceleration || 0), this.tangentialAccelVar = parseFloat(a.tangentialAccelVariance || 0), b = a.rotationIsDir || "", null !== b ? (b = b.toString().toLowerCase(), this.rotationIsDir = "true" === b || "1" === b) : this.rotationIsDir = !1;
                else {
                    if (this.emitterMode !== f.RADIUS) return cc.warnID(6009), !1;
                    this.startRadius = parseFloat(a.maxRadius || 0);
                    this.startRadiusVar = parseFloat(a.maxRadiusVariance ||
                        0);
                    this.endRadius = parseFloat(a.minRadius || 0);
                    this.endRadiusVar = parseFloat(a.minRadiusVariance || 0);
                    this.rotatePerS = parseFloat(a.rotatePerSecond || 0);
                    this.rotatePerSVar = parseFloat(a.rotatePerSecondVariance || 0)
                }
                this._initTextureWithDictionary(a);
                return !0
            },
            _validateRender: function() {
                var a = this._getTexture();
                a && a.loaded ? this._super() : this.disableRender()
            },
            _onTextureLoaded: function() {
                this._simulator.updateUVs(!0);
                this._syncAspect();
                this._updateMaterial();
                this.markForRender(!0)
            },
            _syncAspect: function() {
                var a =
                    this._renderSpriteFrame._rect;
                this._aspectRatio = a.width / a.height
            },
            _applySpriteFrame: function() {
                (this._renderSpriteFrame = this._renderSpriteFrame || this._spriteFrame) && (this._renderSpriteFrame.textureLoaded() ? this._onTextureLoaded() : this._renderSpriteFrame.onTextureLoaded(this._onTextureLoaded, this))
            },
            _getTexture: function() {
                return this._renderSpriteFrame && this._renderSpriteFrame.getTexture() || this._texture
            },
            _updateMaterial: function() {
                var a = this.getMaterial(0);
                a && (a.define("CC_USE_MODEL", this._positionType !==
                    n.FREE), a.setProperty("texture", this._getTexture()), l.prototype._updateMaterial.call(this))
            },
            _finishedSimulation: function() {
                !1;
                this.resetSystem();
                this.stopSystem();
                this.disableRender();
                this.autoRemoveOnFinish && this._stopped && this.node.destroy()
            }
        });
        cc.ParticleSystem = q.exports = g
    }, {
        "../compression/ZipUtils": 23,
        "../core/assets/material/CCMaterial": 113,
        "../core/components/CCRenderComponent": 149,
        "../core/platform/CCMacro": 232,
        "../core/renderer/render-flow": 260,
        "../core/utils/blend-func": 304,
        "../core/utils/texture-util": 318,
        "./CCPNGReader": 339,
        "./CCParticleAsset": 340,
        "./CCTIFFReader": 342,
        "./particle-simulator": 344,
        "fire-url": void 0
    }],
    342: [function(g, q, m) {
        var h = g("../core/CCDebug");
        q.exports = {
            _littleEndian: !1,
            _tiffData: null,
            _fileDirectories: [],
            getUint8: function(e) {
                return this._tiffData[e]
            },
            getUint16: function(e) {
                return this._littleEndian ? this._tiffData[e + 1] << 8 | this._tiffData[e] : this._tiffData[e] << 8 | this._tiffData[e + 1]
            },
            getUint32: function(e) {
                var d = this._tiffData;
                return this._littleEndian ? d[e + 3] << 24 | d[e + 2] << 16 | d[e + 1] << 8 |
                    d[e] : d[e] << 24 | d[e + 1] << 16 | d[e + 2] << 8 | d[e + 3]
            },
            checkLittleEndian: function() {
                var e = this.getUint16(0);
                if (18761 === e) this.littleEndian = !0;
                else {
                    if (19789 !== e) throw console.log(e), TypeError(h.getError(6019));
                    this.littleEndian = !1
                }
                return this.littleEndian
            },
            hasTowel: function() {
                if (42 !== this.getUint16(2)) throw RangeError(h.getError(6020));
                return !0
            },
            getFieldTypeName: function(e) {
                var d = this.fieldTypeNames;
                return e in d ? d[e] : null
            },
            getFieldTagName: function(e) {
                var d = this.fieldTagNames;
                if (e in d) return d[e];
                cc.logID(6021,
                    e);
                return "Tag" + e
            },
            getFieldTypeLength: function(e) {
                return -1 !== ["BYTE", "ASCII", "SBYTE", "UNDEFINED"].indexOf(e) ? 1 : -1 !== ["SHORT", "SSHORT"].indexOf(e) ? 2 : -1 !== ["LONG", "SLONG", "FLOAT"].indexOf(e) ? 4 : -1 !== ["RATIONAL", "SRATIONAL", "DOUBLE"].indexOf(e) ? 8 : null
            },
            getFieldValues: function(e, d, k, c) {
                e = [];
                var a = this.getFieldTypeLength(d);
                if (4 >= a * k) !1 === this.littleEndian ? e.push(c >>> 8 * (4 - a)) : e.push(c);
                else
                    for (var b = 0; b < k; b++) {
                        var l = a * b;
                        8 <= a ? -1 !== ["RATIONAL", "SRATIONAL"].indexOf(d) ? (e.push(this.getUint32(c + l)), e.push(this.getUint32(c +
                            l + 4))) : cc.logID(8E3) : e.push(this.getBytes(a, c + l))
                    }
                "ASCII" === d && e.forEach(function(a, b, c) {
                    c[b] = String.fromCharCode(a)
                });
                return e
            },
            getBytes: function(e, d) {
                if (0 >= e) cc.logID(8001);
                else {
                    if (1 >= e) return this.getUint8(d);
                    if (2 >= e) return this.getUint16(d);
                    if (3 >= e) return this.getUint32(d) >>> 8;
                    if (4 >= e) return this.getUint32(d);
                    cc.logID(8002)
                }
            },
            getBits: function(e, d, k) {
                k = k || 0;
                d += Math.floor(k / 8);
                var c = k + e;
                e = 32 - e;
                if (0 >= c) cc.logID(6023);
                else if (8 >= c) {
                    var a = 24 + k;
                    var b = this.getUint8(d)
                } else 16 >= c ? (a = 16 + k, b = this.getUint16(d)) :
                    32 >= c ? (a = k, b = this.getUint32(d)) : cc.logID(6022);
                return {
                    bits: b << a >>> e,
                    byteOffset: d + Math.floor(c / 8),
                    bitOffset: c % 8
                }
            },
            parseFileDirectory: function(e) {
                var d = this.getUint16(e),
                    k = [];
                e += 2;
                for (var c = 0; c < d; e += 12, c++) {
                    var a = this.getUint16(e),
                        b = this.getUint16(e + 2),
                        l = this.getUint32(e + 4),
                        f = this.getUint32(e + 8);
                    a = this.getFieldTagName(a);
                    b = this.getFieldTypeName(b);
                    l = this.getFieldValues(a, b, l, f);
                    k[a] = {
                        type: b,
                        values: l
                    }
                }
                this._fileDirectories.push(k);
                d = this.getUint32(e);
                0 !== d && this.parseFileDirectory(d)
            },
            clampColorSample: function(e,
                d) {
                d = Math.pow(2, 8 - d);
                return Math.floor(e * d + (d - 1))
            },
            parseTIFF: function(e, d) {
                var k, c;
                d = d || document.createElement("canvas");
                this._tiffData = e;
                this.canvas = d;
                this.checkLittleEndian();
                if (this.hasTowel()) {
                    e = this.getUint32(4);
                    this._fileDirectories.length = 0;
                    this.parseFileDirectory(e);
                    var a = this._fileDirectories[0];
                    e = a.ImageWidth.values[0];
                    var b = a.ImageLength.values[0];
                    this.canvas.width = e;
                    this.canvas.height = b;
                    var l = [],
                        f = a.Compression ? a.Compression.values[0] : 1,
                        g = a.SamplesPerPixel.values[0],
                        u = [],
                        v = 0,
                        p = !1;
                    a.BitsPerSample.values.forEach(function(a,
                        b, c) {
                        u[b] = {
                            bitsPerSample: a,
                            hasBytesPerSample: !1,
                            bytesPerSample: void 0
                        };
                        0 === a % 8 && (u[b].hasBytesPerSample = !0, u[b].bytesPerSample = a / 8);
                        v += a
                    }, this);
                    if (0 === v % 8) {
                        p = !0;
                        var t = v / 8
                    }
                    var m = a.StripOffsets.values,
                        z = m.length;
                    if (a.StripByteCounts) var E = a.StripByteCounts.values;
                    else {
                        cc.logID(8003);
                        if (1 !== z) throw Error(h.getError(6024));
                        E = [Math.ceil(e * b * v / 8)]
                    }
                    for (var w = 0; w < z; w++) {
                        var A = m[w];
                        l[w] = [];
                        for (var B = E[w], q = 0, C = 0, F = 1, G = !0, D = [], I = 0, K = 0, L = 0; q < B; q += F) switch (f) {
                            case 1:
                                F = 0;
                                for (D = []; F < g; F++) {
                                    if (!u[F].hasBytesPerSample) {
                                        var R =
                                            this.getBits(u[F].bitsPerSample, A + q, C);
                                        D.push(R.bits);
                                        q = R.byteOffset - A;
                                        C = R.bitOffset;
                                        throw RangeError(h.getError(6025));
                                    }
                                    D.push(this.getBytes(u[F].bytesPerSample, A + q + u[F].bytesPerSample * F))
                                }
                                l[w].push(D);
                                if (!p) throw F = 0, RangeError(h.getError(6026));
                                F = t;
                                break;
                            case 32773:
                                if (G) {
                                    G = !1;
                                    var M = c = 1;
                                    F = this.getInt8(A + q);
                                    0 <= F && 127 >= F ? c = F + 1 : -127 <= F && -1 >= F ? M = 1 - F : G = !0
                                } else {
                                    var S = this.getUint8(A + q);
                                    for (F = 0; F < M; F++) {
                                        if (!u[K].hasBytesPerSample) throw RangeError(h.getError(6025));
                                        L = L << 8 * I | S;
                                        I++;
                                        I === u[K].bytesPerSample &&
                                            (D.push(L), L = I = 0, K++);
                                        K === g && (l[w].push(D), D = [], K = 0)
                                    }
                                    c--;
                                    0 === c && (G = !0)
                                }
                                F = 1
                        }
                    }
                    if (d.getContext) {
                        d = this.canvas.getContext("2d");
                        d.fillStyle = "rgba(255, 255, 255, 0)";
                        w = a.RowsPerStrip ? a.RowsPerStrip.values[0] : b;
                        M = l.length;
                        b %= w;
                        b = 0 === b ? w : b;
                        c = w;
                        D = 0;
                        t = a.PhotometricInterpretation.values[0];
                        A = [];
                        q = 0;
                        a.ExtraSamples && (A = a.ExtraSamples.values, q = A.length);
                        if (a.ColorMap) {
                            var O = a.ColorMap.values;
                            R = Math.pow(2, u[0].bitsPerSample)
                        }
                        for (w = 0; w < M; w++) {
                            w + 1 === M && (c = b);
                            a = l[w].length;
                            D *= w;
                            for (f = E = 0; E < c, f < a; E++)
                                for (g = 0; g < e; g++,
                                    f++) {
                                    m = l[w][f];
                                    C = B = z = 0;
                                    p = 1;
                                    if (0 < q)
                                        for (z = 0; z < q; z++)
                                            if (1 === A[z] || 2 === A[z]) {
                                                p = m[3 + z] / 256;
                                                break
                                            }
                                    switch (t) {
                                        case 0:
                                            u[0].hasBytesPerSample && (k = Math.pow(16, 2 * u[0].bytesPerSample)), m.forEach(function(a, b, c) {
                                                c[b] = k - a
                                            });
                                        case 1:
                                            z = B = C = this.clampColorSample(m[0], u[0].bitsPerSample);
                                            break;
                                        case 2:
                                            z = this.clampColorSample(m[0], u[0].bitsPerSample);
                                            B = this.clampColorSample(m[1], u[1].bitsPerSample);
                                            C = this.clampColorSample(m[2], u[2].bitsPerSample);
                                            break;
                                        case 3:
                                            if (void 0 === O) throw Error(h.getError(6027));
                                            m = m[0];
                                            z = this.clampColorSample(O[m],
                                                16);
                                            B = this.clampColorSample(O[R + m], 16);
                                            C = this.clampColorSample(O[2 * R + m], 16);
                                            break;
                                        default:
                                            throw RangeError(h.getError(6028, t));
                                    }
                                    d.fillStyle = "rgba(" + z + ", " + B + ", " + C + ", " + p + ")";
                                    d.fillRect(g, D + E, 1, 1)
                                }
                            D = c
                        }
                    }
                    return this.canvas
                }
            },
            fieldTagNames: {
                315: "Artist",
                258: "BitsPerSample",
                265: "CellLength",
                264: "CellWidth",
                320: "ColorMap",
                259: "Compression",
                33432: "Copyright",
                306: "DateTime",
                338: "ExtraSamples",
                266: "FillOrder",
                289: "FreeByteCounts",
                288: "FreeOffsets",
                291: "GrayResponseCurve",
                290: "GrayResponseUnit",
                316: "HostComputer",
                270: "ImageDescription",
                257: "ImageLength",
                256: "ImageWidth",
                271: "Make",
                281: "MaxSampleValue",
                280: "MinSampleValue",
                272: "Model",
                254: "NewSubfileType",
                274: "Orientation",
                262: "PhotometricInterpretation",
                284: "PlanarConfiguration",
                296: "ResolutionUnit",
                278: "RowsPerStrip",
                277: "SamplesPerPixel",
                305: "Software",
                279: "StripByteCounts",
                273: "StripOffsets",
                255: "SubfileType",
                263: "Threshholding",
                282: "XResolution",
                283: "YResolution",
                326: "BadFaxLines",
                327: "CleanFaxData",
                343: "ClipPath",
                328: "ConsecutiveBadFaxLines",
                433: "Decode",
                434: "DefaultImageColor",
                269: "DocumentName",
                336: "DotRange",
                321: "HalftoneHints",
                346: "Indexed",
                347: "JPEGTables",
                285: "PageName",
                297: "PageNumber",
                317: "Predictor",
                319: "PrimaryChromaticities",
                532: "ReferenceBlackWhite",
                339: "SampleFormat",
                559: "StripRowCounts",
                330: "SubIFDs",
                292: "T4Options",
                293: "T6Options",
                325: "TileByteCounts",
                323: "TileLength",
                324: "TileOffsets",
                322: "TileWidth",
                301: "TransferFunction",
                318: "WhitePoint",
                344: "XClipPathUnits",
                286: "XPosition",
                529: "YCbCrCoefficients",
                531: "YCbCrPositioning",
                530: "YCbCrSubSampling",
                345: "YClipPathUnits",
                287: "YPosition",
                37378: "ApertureValue",
                40961: "ColorSpace",
                36868: "DateTimeDigitized",
                36867: "DateTimeOriginal",
                34665: "Exif IFD",
                36864: "ExifVersion",
                33434: "ExposureTime",
                41728: "FileSource",
                37385: "Flash",
                40960: "FlashpixVersion",
                33437: "FNumber",
                42016: "ImageUniqueID",
                37384: "LightSource",
                37500: "MakerNote",
                37377: "ShutterSpeedValue",
                37510: "UserComment",
                33723: "IPTC",
                34675: "ICC Profile",
                700: "XMP",
                42112: "GDAL_METADATA",
                42113: "GDAL_NODATA",
                34377: "Photoshop"
            },
            fieldTypeNames: {
                1: "BYTE",
                2: "ASCII",
                3: "SHORT",
                4: "LONG",
                5: "RATIONAL",
                6: "SBYTE",
                7: "UNDEFINED",
                8: "SSHORT",
                9: "SLONG",
                10: "SRATIONAL",
                11: "FLOAT",
                12: "DOUBLE"
            }
        }
    }, {
        "../core/CCDebug": 58
    }],
    343: [function(g, q, m) {
        g("./CCParticleAsset");
        g("./CCParticleSystem");
        g("./particle-simulator");
        g("./particle-system-assembler")
    }, {
        "./CCParticleAsset": 340,
        "./CCParticleSystem": 341,
        "./particle-simulator": 344,
        "./particle-system-assembler": 345
    }],
    344: [function(g, q, m) {
        m = g("../core/platform/js");
        var h = g("../core/utils/misc"),
            e = cc.v2(0, 0),
            d = cc.v2(),
            k = cc.v2(),
            c = cc.v2(),
            a = cc.v2(),
            b = function() {
                this.pos = cc.v2(0, 0);
                this.startPos = cc.v2(0, 0);
                this.color = cc.color(0, 0, 0, 255);
                this.deltaColor = {
                    r: 0,
                    g: 0,
                    b: 0,
                    a: 255
                };
                this.preciseColor = {
                    r: 0,
                    g: 0,
                    b: 0,
                    a: 255
                };
                this.timeToLive = this.deltaRotation = this.rotation = this.deltaSize = this.size = 0;
                this.drawPos = cc.v2(0, 0);
                this.aspectRatio = 1;
                this.dir = cc.v2(0, 0);
                this.deltaRadius = this.radius = this.degreesPerSecond = this.angle = this.tangentialAccel = this.radialAccel = 0
            },
            l = new m.Pool(function(a) {
                a.pos.set(e);
                a.startPos.set(e);
                a.color._val = 4278190080;
                a.deltaColor.r =
                    a.deltaColor.g = a.deltaColor.b = 0;
                a.deltaColor.a = 255;
                a.size = 0;
                a.deltaSize = 0;
                a.rotation = 0;
                a.deltaRotation = 0;
                a.timeToLive = 0;
                a.drawPos.set(e);
                a.aspectRatio = 1;
                a.dir.set(e);
                a.radialAccel = 0;
                a.tangentialAccel = 0;
                a.angle = 0;
                a.degreesPerSecond = 0;
                a.radius = 0;
                a.deltaRadius = 0
            }, 1024);
        l.get = function() {
            return this._get() || new b
        };
        g = function(a) {
            this.sys = a;
            this.particles = [];
            this.active = !1;
            this.readyToPlay = !0;
            this.finished = !1;
            this._worldRotation = this._uvFilled = this.emitCounter = this.elapsed = 0
        };
        g.prototype.stop = function() {
            this.readyToPlay =
                this.active = !1;
            this.elapsed = this.sys.duration;
            this.emitCounter = 0
        };
        g.prototype.reset = function() {
            this.readyToPlay = this.active = !0;
            this.emitCounter = this.elapsed = 0;
            this.finished = !1;
            for (var a = this.particles, b = 0; b < a.length; ++b) l.put(a[b]);
            a.length = 0;
            (a = this.sys._assembler) && a._ia && (a._ia._count = 0)
        };
        g.prototype.emitParticle = function(a) {
            var b = this.sys,
                c = h.clampf,
                d = l.get();
            this.particles.push(d);
            d.timeToLive = b.life + b.lifeVar * (Math.random() - .5) * 2;
            var f = d.timeToLive = Math.max(0, d.timeToLive);
            d.pos.x = b.sourcePos.x +
                b.posVar.x * (Math.random() - .5) * 2;
            d.pos.y = b.sourcePos.y + b.posVar.y * (Math.random() - .5) * 2;
            var e, k, g;
            var m = b._startColor;
            var w = b._startColorVar,
                A = b._endColor,
                B = b._endColorVar;
            d.color.r = e = c(m.r + w.r * (Math.random() - .5) * 2, 0, 255);
            d.color.g = k = c(m.g + w.g * (Math.random() - .5) * 2, 0, 255);
            d.color.b = g = c(m.b + w.b * (Math.random() - .5) * 2, 0, 255);
            d.color.a = m = c(m.a + w.a * (Math.random() - .5) * 2, 0, 255);
            w = d.color;
            var q = d.preciseColor;
            q.r = w.r;
            q.g = w.g;
            q.b = w.b;
            q.a = w.a;
            d.deltaColor.r = (c(A.r + B.r * (Math.random() - .5) * 2, 0, 255) - e) / f;
            d.deltaColor.g =
                (c(A.g + B.g * (Math.random() - .5) * 2, 0, 255) - k) / f;
            d.deltaColor.b = (c(A.b + B.b * (Math.random() - .5) * 2, 0, 255) - g) / f;
            d.deltaColor.a = (c(A.a + B.a * (Math.random() - .5) * 2, 0, 255) - m) / f;
            c = b.startSize + b.startSizeVar * (Math.random() - .5) * 2;
            c = Math.max(0, c);
            d.size = c;
            b.endSize === cc.ParticleSystem.START_SIZE_EQUAL_TO_END_SIZE ? d.deltaSize = 0 : (e = b.endSize + b.endSizeVar * (Math.random() - .5) * 2, e = Math.max(0, e), d.deltaSize = (e - c) / f);
            c = b.startSpin + b.startSpinVar * (Math.random() - .5) * 2;
            e = b.endSpin + b.endSpinVar * (Math.random() - .5) * 2;
            d.rotation =
                c;
            d.deltaRotation = (e - c) / f;
            d.startPos.x = a.x;
            d.startPos.y = a.y;
            d.aspectRatio = b._aspectRatio || 1;
            a = h.degreesToRadians(b.angle + this._worldRotation + b.angleVar * (Math.random() - .5) * 2);
            b.emitterMode === cc.ParticleSystem.EmitterMode.GRAVITY ? (f = b.speed + b.speedVar * (Math.random() - .5) * 2, d.dir.x = Math.cos(a), d.dir.y = Math.sin(a), d.dir.mulSelf(f), d.radialAccel = b.radialAccel + b.radialAccelVar * (Math.random() - .5) * 2, d.tangentialAccel = b.tangentialAccel + b.tangentialAccelVar * (Math.random() - .5) * 2, b.rotationIsDir && (d.rotation = -h.radiansToDegrees(Math.atan2(d.dir.y, d.dir.x)))) : (c = b.startRadius + b.startRadiusVar * (Math.random() - .5) * 2, e = b.endRadius + b.endRadiusVar * (Math.random() - .5) * 2, d.radius = c, d.deltaRadius = b.endRadius === cc.ParticleSystem.START_RADIUS_EQUAL_TO_END_RADIUS ? 0 : (e - c) / f, d.angle = a, d.degreesPerSecond = h.degreesToRadians(b.rotatePerS + b.rotatePerSVar * (Math.random() - .5) * 2))
        };
        g.prototype.updateUVs = function(a) {
            var b = this.sys._assembler;
            if (b) {
                var c = b.getBuffer();
                if (c && this.sys._renderSpriteFrame) {
                    b = 4 * b._vfmt._bytes / 4;
                    c =
                        c._vData;
                    var d = this.sys._renderSpriteFrame.uv,
                        f = this.particles.length;
                    for (a = a ? 0 : this._uvFilled; a < f; a++) {
                        var e = a * b;
                        c[e + 2] = d[0];
                        c[e + 3] = d[1];
                        c[e + 7] = d[2];
                        c[e + 8] = d[3];
                        c[e + 12] = d[4];
                        c[e + 13] = d[5];
                        c[e + 17] = d[6];
                        c[e + 18] = d[7]
                    }
                    this._uvFilled = f
                }
            }
        };
        g.prototype.updateParticleBuffer = function(a, b, c, d) {
            var f = c._vData;
            c = c._uintVData;
            var e = b.x;
            b = b.y;
            var l = a.size,
                k = l,
                g = a.aspectRatio;
            1 < g ? k = l / g : l = k * g;
            l /= 2;
            k /= 2;
            if (a.rotation) {
                g = -l;
                var n = -k,
                    u = -h.degreesToRadians(a.rotation),
                    v = Math.cos(u);
                u = Math.sin(u);
                f[d] = g * v - n * u + e;
                f[d + 1] =
                    g * u + n * v + b;
                f[d + 5] = l * v - n * u + e;
                f[d + 6] = l * u + n * v + b;
                f[d + 10] = g * v - k * u + e;
                f[d + 11] = g * u + k * v + b;
                f[d + 15] = l * v - k * u + e;
                f[d + 16] = l * u + k * v + b
            } else f[d] = e - l, f[d + 1] = b - k, f[d + 5] = e + l, f[d + 6] = b - k, f[d + 10] = e - l, f[d + 11] = b + k, f[d + 15] = e + l, f[d + 16] = b + k;
            c[d + 4] = a.color._val;
            c[d + 9] = a.color._val;
            c[d + 14] = a.color._val;
            c[d + 19] = a.color._val
        };
        g.prototype.step = function(b) {
            b = b > cc.director._maxParticleDeltaTime ? cc.director._maxParticleDeltaTime : b;
            var f = this.sys,
                e = f.node,
                h = this.particles,
                g = 4 * this.sys._assembler._vfmt._bytes / 4,
                t = cc.ParticleSystem.PositionType;
            e._updateWorldMatrix();
            if (f.positionType === t.FREE) {
                for (var m = 0, z = e; z;) m += z.angle, z = z.parent;
                this._worldRotation = m;
                e = e._worldMatrix.m;
                d.x = e[12];
                d.y = e[13]
            } else f.positionType === t.RELATIVE ? (this._worldRotation = e.angle, d.x = e.x, d.y = e.y) : this._worldRotation = 0;
            if (this.active && f.emissionRate) {
                e = 1 / f.emissionRate;
                for (h.length < f.totalParticles && (this.emitCounter += b); h.length < f.totalParticles && this.emitCounter > e;) this.emitParticle(d), this.emitCounter -= e;
                this.elapsed += b; - 1 !== f.duration && f.duration < this.elapsed &&
                    f.stopSystem()
            }
            e = f._assembler.getBuffer();
            m = h.length;
            e.reset();
            e.request(4 * m, 6 * m);
            m > this._uvFilled && this.updateUVs();
            for (m = 0; m < h.length;)
                if (k.x = k.y = c.x = c.y = a.x = a.y = 0, z = h[m], z.timeToLive -= b, 0 < z.timeToLive) {
                    if (f.emitterMode === cc.ParticleSystem.EmitterMode.GRAVITY) {
                        var E = a,
                            w = k,
                            A = c;
                        if (z.pos.x || z.pos.y) w.set(z.pos), w.normalizeSelf();
                        A.set(w);
                        w.mulSelf(z.radialAccel);
                        var B = A.x;
                        A.x = -A.y;
                        A.y = B;
                        A.mulSelf(z.tangentialAccel);
                        E.set(w);
                        E.addSelf(A);
                        E.addSelf(f.gravity);
                        E.mulSelf(b);
                        z.dir.addSelf(E);
                        E.set(z.dir);
                        E.mulSelf(b);
                        z.pos.addSelf(E)
                    } else z.angle += z.degreesPerSecond * b, z.radius += z.deltaRadius * b, z.pos.x = -Math.cos(z.angle) * z.radius, z.pos.y = -Math.sin(z.angle) * z.radius;
                    E = z.preciseColor;
                    w = z.deltaColor;
                    E.r += w.r * b;
                    E.g += w.g * b;
                    E.b += w.b * b;
                    E.a += w.a * b;
                    w = z.color;
                    w.r = E.r;
                    w.g = E.g;
                    w.b = E.b;
                    w.a = E.a;
                    z.size += z.deltaSize * b;
                    0 > z.size && (z.size = 0);
                    z.rotation += z.deltaRotation * b;
                    E = k;
                    E.set(z.pos);
                    f.positionType !== t.GROUPED && E.addSelf(z.startPos);
                    this.updateParticleBuffer(z, E, e, g * m);
                    ++m
                } else z = h[m], m !== h.length - 1 && (h[m] = h[h.length -
                    1]), l.put(z), h.length--;
            f._assembler._ia._count = 6 * h.length;
            0 < h.length ? e.uploadData() : this.active || this.readyToPlay || (this.finished = !0, f._finishedSimulation())
        };
        q.exports = g
    }, {
        "../core/platform/js": 248,
        "../core/utils/misc": 310
    }],
    345: [function(g, q, m) {
        function h(a) {
            return a && a.__esModule ? a : {
                default: a
            }
        }

        function e(a, b) {
            a.prototype = Object.create(b.prototype);
            a.prototype.constructor = a;
            d(a, b)
        }

        function d(a, b) {
            d = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(a, b) {
                a.__proto__ = b;
                return a
            };
            return d(a,
                b)
        }
        m = h(g("../core/renderer/assembler"));
        var k = h(g("../renderer/core/input-assembler")),
            c = g("./CCParticleSystem"),
            a = g("../core/renderer/"),
            b = g("../core/renderer/webgl/quad-buffer"),
            l = g("../core/renderer/webgl/vertex-format").vfmtPosUvColor;
        g = function(c) {
            function d(a) {
                a = c.call(this, a) || this;
                a._buffer = null;
                a._ia = null;
                a._vfmt = l;
                return a
            }
            e(d, c);
            var f = d.prototype;
            f.getBuffer = function() {
                this._buffer || (this._buffer = new b(a._handle, l), this._ia = new k["default"], this._ia._vertexBuffer = this._buffer._vb, this._ia._indexBuffer =
                    this._buffer._ib, this._ia._start = 0, this._ia._count = 0);
                return this._buffer
            };
            f.fillBuffers = function(a, b) {
                this._ia && (a.positionType === cc.ParticleSystem.PositionType.RELATIVE ? b.node = a.node.parent : b.node = a.node, b.material = a._materials[0], b._flushIA(this._ia))
            };
            return d
        }(m["default"]);
        m["default"].register(c, g);
        q.exports = g
    }, {
        "../core/renderer/": 259,
        "../core/renderer/assembler": 256,
        "../core/renderer/webgl/quad-buffer": 296,
        "../core/renderer/webgl/vertex-format": 299,
        "../renderer/core/input-assembler": 348,
        "./CCParticleSystem": 341
    }],
    346: [function(g, q, m) {
        var h;
        (function(a) {
            a[a.COMPRESSED_RGB_S3TC_DXT1_EXT = 33776] = "COMPRESSED_RGB_S3TC_DXT1_EXT";
            a[a.COMPRESSED_RGBA_S3TC_DXT1_EXT = 33777] = "COMPRESSED_RGBA_S3TC_DXT1_EXT";
            a[a.COMPRESSED_RGBA_S3TC_DXT3_EXT = 33778] = "COMPRESSED_RGBA_S3TC_DXT3_EXT";
            a[a.COMPRESSED_RGBA_S3TC_DXT5_EXT = 33779] = "COMPRESSED_RGBA_S3TC_DXT5_EXT";
            a[a.COMPRESSED_SRGB_S3TC_DXT1_EXT = 35916] = "COMPRESSED_SRGB_S3TC_DXT1_EXT";
            a[a.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 35917] = "COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT";
            a[a.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 35918] = "COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT";
            a[a.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 35919] = "COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT";
            a[a.COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 35840] = "COMPRESSED_RGB_PVRTC_4BPPV1_IMG";
            a[a.COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 35841] = "COMPRESSED_RGB_PVRTC_2BPPV1_IMG";
            a[a.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 35842] = "COMPRESSED_RGBA_PVRTC_4BPPV1_IMG";
            a[a.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 35843] = "COMPRESSED_RGBA_PVRTC_2BPPV1_IMG";
            a[a.COMPRESSED_RGB_ETC1_WEBGL =
                36196] = "COMPRESSED_RGB_ETC1_WEBGL"
        })(h || (h = {}));
        var e;
        (function(a) {
            a[a.UNKNOWN = 0] = "UNKNOWN";
            a[a.BUFFER = 1] = "BUFFER";
            a[a.TEXTURE = 2] = "TEXTURE";
            a[a.TEXTURE_VIEW = 3] = "TEXTURE_VIEW";
            a[a.RENDER_PASS = 4] = "RENDER_PASS";
            a[a.FRAMEBUFFER = 5] = "FRAMEBUFFER";
            a[a.SAMPLER = 6] = "SAMPLER";
            a[a.SHADER = 7] = "SHADER";
            a[a.PIPELINE_LAYOUT = 8] = "PIPELINE_LAYOUT";
            a[a.PIPELINE_STATE = 9] = "PIPELINE_STATE";
            a[a.BINDING_LAYOUT = 10] = "BINDING_LAYOUT";
            a[a.INPUT_ASSEMBLER = 11] = "INPUT_ASSEMBLER";
            a[a.COMMAND_ALLOCATOR = 12] = "COMMAND_ALLOCATOR";
            a[a.COMMAND_BUFFER =
                13] = "COMMAND_BUFFER";
            a[a.QUEUE = 14] = "QUEUE";
            a[a.WINDOW = 15] = "WINDOW"
        })(e || (e = {}));
        var d;
        (function(a) {
            a[a.UNREADY = 0] = "UNREADY";
            a[a.FAILED = 1] = "FAILED";
            a[a.SUCCESS = 2] = "SUCCESS"
        })(d || (d = {}));
        (function() {
            function a(a) {
                this._gfxType = e.UNKNOWN;
                this._status = d.UNREADY;
                this._gfxType = a
            }
            Object.defineProperty(a.prototype, "gfxType", {
                get: function() {
                    return this._gfxType
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a.prototype, "status", {
                get: function() {
                    return this._status
                },
                enumerable: !0,
                configurable: !0
            });
            return a
        })();
        var k;
        (function(a) {
            a.ATTR_POSITION = "a_position";
            a.ATTR_NORMAL = "a_normal";
            a.ATTR_TANGENT = "a_tangent";
            a.ATTR_BITANGENT = "a_bitangent";
            a.ATTR_WEIGHTS = "a_weights";
            a.ATTR_JOINTS = "a_joints";
            a.ATTR_COLOR = "a_color";
            a.ATTR_COLOR1 = "a_color1";
            a.ATTR_COLOR2 = "a_color2";
            a.ATTR_TEX_COORD = "a_texCoord";
            a.ATTR_TEX_COORD1 = "a_texCoord1";
            a.ATTR_TEX_COORD2 = "a_texCoord2";
            a.ATTR_TEX_COORD3 = "a_texCoord3";
            a.ATTR_TEX_COORD4 = "a_texCoord4";
            a.ATTR_TEX_COORD5 = "a_texCoord5";
            a.ATTR_TEX_COORD6 = "a_texCoord6";
            a.ATTR_TEX_COORD7 = "a_texCoord7";
            a.ATTR_TEX_COORD8 = "a_texCoord8"
        })(k || (k = {}));
        var c;
        (function(a) {
            a[a.UNKNOWN = 0] = "UNKNOWN";
            a[a.BOOL = 1] = "BOOL";
            a[a.BOOL2 = 2] = "BOOL2";
            a[a.BOOL3 = 3] = "BOOL3";
            a[a.BOOL4 = 4] = "BOOL4";
            a[a.INT = 5] = "INT";
            a[a.INT2 = 6] = "INT2";
            a[a.INT3 = 7] = "INT3";
            a[a.INT4 = 8] = "INT4";
            a[a.UINT = 9] = "UINT";
            a[a.UINT2 = 10] = "UINT2";
            a[a.UINT3 = 11] = "UINT3";
            a[a.UINT4 = 12] = "UINT4";
            a[a.FLOAT = 13] = "FLOAT";
            a[a.FLOAT2 = 14] = "FLOAT2";
            a[a.FLOAT3 = 15] = "FLOAT3";
            a[a.FLOAT4 = 16] = "FLOAT4";
            a[a.COLOR4 = 17] = "COLOR4";
            a[a.MAT2 = 18] = "MAT2";
            a[a.MAT2X3 = 19] = "MAT2X3";
            a[a.MAT2X4 =
                20] = "MAT2X4";
            a[a.MAT3X2 = 21] = "MAT3X2";
            a[a.MAT3 = 22] = "MAT3";
            a[a.MAT3X4 = 23] = "MAT3X4";
            a[a.MAT4X2 = 24] = "MAT4X2";
            a[a.MAT4X3 = 25] = "MAT4X3";
            a[a.MAT4 = 26] = "MAT4";
            a[a.SAMPLER1D = 27] = "SAMPLER1D";
            a[a.SAMPLER1D_ARRAY = 28] = "SAMPLER1D_ARRAY";
            a[a.SAMPLER2D = 29] = "SAMPLER2D";
            a[a.SAMPLER2D_ARRAY = 30] = "SAMPLER2D_ARRAY";
            a[a.SAMPLER3D = 31] = "SAMPLER3D";
            a[a.SAMPLER_CUBE = 32] = "SAMPLER_CUBE";
            a[a.COUNT = 33] = "COUNT"
        })(c || (c = {}));
        var a;
        (function(a) {
            a[a.UNKNOWN = 0] = "UNKNOWN";
            a[a.A8 = 1] = "A8";
            a[a.L8 = 2] = "L8";
            a[a.LA8 = 3] = "LA8";
            a[a.R8 = 4] = "R8";
            a[a.R8SN =
                5] = "R8SN";
            a[a.R8UI = 6] = "R8UI";
            a[a.R8I = 7] = "R8I";
            a[a.R16F = 8] = "R16F";
            a[a.R16UI = 9] = "R16UI";
            a[a.R16I = 10] = "R16I";
            a[a.R32F = 11] = "R32F";
            a[a.R32UI = 12] = "R32UI";
            a[a.R32I = 13] = "R32I";
            a[a.RG8 = 14] = "RG8";
            a[a.RG8SN = 15] = "RG8SN";
            a[a.RG8UI = 16] = "RG8UI";
            a[a.RG8I = 17] = "RG8I";
            a[a.RG16F = 18] = "RG16F";
            a[a.RG16UI = 19] = "RG16UI";
            a[a.RG16I = 20] = "RG16I";
            a[a.RG32F = 21] = "RG32F";
            a[a.RG32UI = 22] = "RG32UI";
            a[a.RG32I = 23] = "RG32I";
            a[a.RGB8 = 24] = "RGB8";
            a[a.SRGB8 = 25] = "SRGB8";
            a[a.RGB8SN = 26] = "RGB8SN";
            a[a.RGB8UI = 27] = "RGB8UI";
            a[a.RGB8I = 28] = "RGB8I";
            a[a.RGB16F =
                29] = "RGB16F";
            a[a.RGB16UI = 30] = "RGB16UI";
            a[a.RGB16I = 31] = "RGB16I";
            a[a.RGB32F = 32] = "RGB32F";
            a[a.RGB32UI = 33] = "RGB32UI";
            a[a.RGB32I = 34] = "RGB32I";
            a[a.RGBA8 = 35] = "RGBA8";
            a[a.SRGB8_A8 = 36] = "SRGB8_A8";
            a[a.RGBA8SN = 37] = "RGBA8SN";
            a[a.RGBA8UI = 38] = "RGBA8UI";
            a[a.RGBA8I = 39] = "RGBA8I";
            a[a.RGBA16F = 40] = "RGBA16F";
            a[a.RGBA16UI = 41] = "RGBA16UI";
            a[a.RGBA16I = 42] = "RGBA16I";
            a[a.RGBA32F = 43] = "RGBA32F";
            a[a.RGBA32UI = 44] = "RGBA32UI";
            a[a.RGBA32I = 45] = "RGBA32I";
            a[a.R5G6B5 = 46] = "R5G6B5";
            a[a.R11G11B10F = 47] = "R11G11B10F";
            a[a.RGB5A1 = 48] = "RGB5A1";
            a[a.RGBA4 = 49] = "RGBA4";
            a[a.RGB10A2 = 50] = "RGB10A2";
            a[a.RGB10A2UI = 51] = "RGB10A2UI";
            a[a.RGB9E5 = 52] = "RGB9E5";
            a[a.D16 = 53] = "D16";
            a[a.D16S8 = 54] = "D16S8";
            a[a.D24 = 55] = "D24";
            a[a.D24S8 = 56] = "D24S8";
            a[a.D32F = 57] = "D32F";
            a[a.D32F_S8 = 58] = "D32F_S8";
            a[a.BC1 = 59] = "BC1";
            a[a.BC1_ALPHA = 60] = "BC1_ALPHA";
            a[a.BC1_SRGB = 61] = "BC1_SRGB";
            a[a.BC1_SRGB_ALPHA = 62] = "BC1_SRGB_ALPHA";
            a[a.BC2 = 63] = "BC2";
            a[a.BC2_SRGB = 64] = "BC2_SRGB";
            a[a.BC3 = 65] = "BC3";
            a[a.BC3_SRGB = 66] = "BC3_SRGB";
            a[a.BC4 = 67] = "BC4";
            a[a.BC4_SNORM = 68] = "BC4_SNORM";
            a[a.BC5 = 69] = "BC5";
            a[a.BC5_SNORM = 70] = "BC5_SNORM";
            a[a.BC6H_UF16 = 71] = "BC6H_UF16";
            a[a.BC6H_SF16 = 72] = "BC6H_SF16";
            a[a.BC7 = 73] = "BC7";
            a[a.BC7_SRGB = 74] = "BC7_SRGB";
            a[a.ETC_RGB8 = 75] = "ETC_RGB8";
            a[a.ETC2_RGB8 = 76] = "ETC2_RGB8";
            a[a.ETC2_SRGB8 = 77] = "ETC2_SRGB8";
            a[a.ETC2_RGB8_A1 = 78] = "ETC2_RGB8_A1";
            a[a.ETC2_SRGB8_A1 = 79] = "ETC2_SRGB8_A1";
            a[a.ETC2_RGBA8 = 80] = "ETC2_RGBA8";
            a[a.ETC2_SRGB8_A8 = 81] = "ETC2_SRGB8_A8";
            a[a.EAC_R11 = 82] = "EAC_R11";
            a[a.EAC_R11SN = 83] = "EAC_R11SN";
            a[a.EAC_RG11 = 84] = "EAC_RG11";
            a[a.EAC_RG11SN = 85] = "EAC_RG11SN";
            a[a.PVRTC_RGB2 =
                86] = "PVRTC_RGB2";
            a[a.PVRTC_RGBA2 = 87] = "PVRTC_RGBA2";
            a[a.PVRTC_RGB4 = 88] = "PVRTC_RGB4";
            a[a.PVRTC_RGBA4 = 89] = "PVRTC_RGBA4";
            a[a.PVRTC2_2BPP = 90] = "PVRTC2_2BPP";
            a[a.PVRTC2_4BPP = 91] = "PVRTC2_4BPP";
            a[a.ASTC_RGBA_4x4 = 92] = "ASTC_RGBA_4x4";
            a[a.ASTC_RGBA_5x4 = 92] = "ASTC_RGBA_5x4";
            a[a.ASTC_RGBA_5x5 = 92] = "ASTC_RGBA_5x5";
            a[a.ASTC_RGBA_6x5 = 92] = "ASTC_RGBA_6x5";
            a[a.ASTC_RGBA_6x6 = 92] = "ASTC_RGBA_6x6";
            a[a.ASTC_RGBA_8x5 = 92] = "ASTC_RGBA_8x5";
            a[a.ASTC_RGBA_8x6 = 92] = "ASTC_RGBA_8x6";
            a[a.ASTC_RGBA_8x8 = 92] = "ASTC_RGBA_8x8";
            a[a.ASTC_RGBA_10x5 =
                92] = "ASTC_RGBA_10x5";
            a[a.ASTC_RGBA_10x6 = 92] = "ASTC_RGBA_10x6";
            a[a.ASTC_RGBA_10x8 = 92] = "ASTC_RGBA_10x8";
            a[a.ASTC_RGBA_10x10 = 92] = "ASTC_RGBA_10x10";
            a[a.ASTC_RGBA_12x10 = 92] = "ASTC_RGBA_12x10";
            a[a.ASTC_RGBA_12x12 = 92] = "ASTC_RGBA_12x12";
            a[a.ASTC_SRGBA_4x4 = 92] = "ASTC_SRGBA_4x4";
            a[a.ASTC_SRGBA_5x4 = 92] = "ASTC_SRGBA_5x4";
            a[a.ASTC_SRGBA_5x5 = 92] = "ASTC_SRGBA_5x5";
            a[a.ASTC_SRGBA_6x5 = 92] = "ASTC_SRGBA_6x5";
            a[a.ASTC_SRGBA_6x6 = 92] = "ASTC_SRGBA_6x6";
            a[a.ASTC_SRGBA_8x5 = 92] = "ASTC_SRGBA_8x5";
            a[a.ASTC_SRGBA_8x6 = 92] = "ASTC_SRGBA_8x6";
            a[a.ASTC_SRGBA_8x8 = 92] = "ASTC_SRGBA_8x8";
            a[a.ASTC_SRGBA_10x5 = 92] = "ASTC_SRGBA_10x5";
            a[a.ASTC_SRGBA_10x6 = 92] = "ASTC_SRGBA_10x6";
            a[a.ASTC_SRGBA_10x8 = 92] = "ASTC_SRGBA_10x8";
            a[a.ASTC_SRGBA_10x10 = 92] = "ASTC_SRGBA_10x10";
            a[a.ASTC_SRGBA_12x10 = 92] = "ASTC_SRGBA_12x10";
            a[a.ASTC_SRGBA_12x12 = 92] = "ASTC_SRGBA_12x12"
        })(a || (a = {}));
        var b;
        (function(a) {
            a[a.NONE = 0] = "NONE";
            a[a.TRANSFER_SRC = 1] = "TRANSFER_SRC";
            a[a.TRANSFER_DST = 2] = "TRANSFER_DST";
            a[a.INDEX = 4] = "INDEX";
            a[a.VERTEX = 8] = "VERTEX";
            a[a.UNIFORM = 16] = "UNIFORM";
            a[a.STORAGE =
                32] = "STORAGE";
            a[a.INDIRECT = 64] = "INDIRECT"
        })(b || (b = {}));
        var l;
        (function(a) {
            a[a.NONE = 0] = "NONE";
            a[a.DEVICE = 1] = "DEVICE";
            a[a.HOST = 2] = "HOST"
        })(l || (l = {}));
        var f;
        (function(a) {
            a[a.NONE = 0] = "NONE";
            a[a.READ = 1] = "READ";
            a[a.WRITE = 2] = "WRITE"
        })(f || (f = {}));
        var n;
        (function(a) {
            a[a.POINT_LIST = 0] = "POINT_LIST";
            a[a.LINE_LIST = 1] = "LINE_LIST";
            a[a.LINE_STRIP = 2] = "LINE_STRIP";
            a[a.LINE_LOOP = 3] = "LINE_LOOP";
            a[a.LINE_LIST_ADJACENCY = 4] = "LINE_LIST_ADJACENCY";
            a[a.LINE_STRIP_ADJACENCY = 5] = "LINE_STRIP_ADJACENCY";
            a[a.ISO_LINE_LIST = 6] = "ISO_LINE_LIST";
            a[a.TRIANGLE_LIST = 7] = "TRIANGLE_LIST";
            a[a.TRIANGLE_STRIP = 8] = "TRIANGLE_STRIP";
            a[a.TRIANGLE_FAN = 9] = "TRIANGLE_FAN";
            a[a.TRIANGLE_LIST_ADJACENCY = 10] = "TRIANGLE_LIST_ADJACENCY";
            a[a.TRIANGLE_STRIP_ADJACENCY = 11] = "TRIANGLE_STRIP_ADJACENCY";
            a[a.TRIANGLE_PATCH_ADJACENCY = 12] = "TRIANGLE_PATCH_ADJACENCY";
            a[a.QUAD_PATCH_LIST = 13] = "QUAD_PATCH_LIST"
        })(n || (n = {}));
        var u;
        (function(a) {
            a[a.FILL = 0] = "FILL";
            a[a.POINT = 1] = "POINT";
            a[a.LINE = 2] = "LINE"
        })(u || (u = {}));
        var v;
        (function(a) {
            a[a.GOURAND = 0] = "GOURAND";
            a[a.FLAT = 1] = "FLAT"
        })(v ||
            (v = {}));
        var p;
        (function(a) {
            a[a.NONE = 0] = "NONE";
            a[a.FRONT = 1] = "FRONT";
            a[a.BACK = 2] = "BACK"
        })(p || (p = {}));
        var t;
        (function(a) {
            a[a.NEVER = 0] = "NEVER";
            a[a.LESS = 1] = "LESS";
            a[a.EQUAL = 2] = "EQUAL";
            a[a.LESS_EQUAL = 3] = "LESS_EQUAL";
            a[a.GREATER = 4] = "GREATER";
            a[a.NOT_EQUAL = 5] = "NOT_EQUAL";
            a[a.GREATER_EQUAL = 6] = "GREATER_EQUAL";
            a[a.ALWAYS = 7] = "ALWAYS"
        })(t || (t = {}));
        var x;
        (function(a) {
            a[a.ZERO = 0] = "ZERO";
            a[a.KEEP = 1] = "KEEP";
            a[a.REPLACE = 2] = "REPLACE";
            a[a.INCR = 3] = "INCR";
            a[a.DECR = 4] = "DECR";
            a[a.INVERT = 5] = "INVERT";
            a[a.INCR_WRAP = 6] = "INCR_WRAP";
            a[a.DECR_WRAP = 7] = "DECR_WRAP"
        })(x || (x = {}));
        var z;
        (function(a) {
            a[a.ADD = 0] = "ADD";
            a[a.SUB = 1] = "SUB";
            a[a.REV_SUB = 2] = "REV_SUB";
            a[a.MIN = 3] = "MIN";
            a[a.MAX = 4] = "MAX"
        })(z || (z = {}));
        var E;
        (function(a) {
            a[a.ZERO = 0] = "ZERO";
            a[a.ONE = 1] = "ONE";
            a[a.SRC_ALPHA = 2] = "SRC_ALPHA";
            a[a.DST_ALPHA = 3] = "DST_ALPHA";
            a[a.ONE_MINUS_SRC_ALPHA = 4] = "ONE_MINUS_SRC_ALPHA";
            a[a.ONE_MINUS_DST_ALPHA = 5] = "ONE_MINUS_DST_ALPHA";
            a[a.SRC_COLOR = 6] = "SRC_COLOR";
            a[a.DST_COLOR = 7] = "DST_COLOR";
            a[a.ONE_MINUS_SRC_COLOR = 8] = "ONE_MINUS_SRC_COLOR";
            a[a.ONE_MINUS_DST_COLOR =
                9] = "ONE_MINUS_DST_COLOR";
            a[a.SRC_ALPHA_SATURATE = 10] = "SRC_ALPHA_SATURATE";
            a[a.CONSTANT_COLOR = 11] = "CONSTANT_COLOR";
            a[a.ONE_MINUS_CONSTANT_COLOR = 12] = "ONE_MINUS_CONSTANT_COLOR";
            a[a.CONSTANT_ALPHA = 13] = "CONSTANT_ALPHA";
            a[a.ONE_MINUS_CONSTANT_ALPHA = 14] = "ONE_MINUS_CONSTANT_ALPHA"
        })(E || (E = {}));
        var w;
        (function(a) {
            a[a.NONE = 0] = "NONE";
            a[a.R = 1] = "R";
            a[a.G = 2] = "G";
            a[a.B = 4] = "B";
            a[a.A = 8] = "A";
            a[a.ALL = 15] = "ALL"
        })(w || (w = {}));
        var A;
        (function(a) {
            a[a.NONE = 0] = "NONE";
            a[a.POINT = 1] = "POINT";
            a[a.LINEAR = 2] = "LINEAR";
            a[a.ANISOTROPIC =
                3] = "ANISOTROPIC"
        })(A || (A = {}));
        var B;
        (function(a) {
            a[a.WRAP = 0] = "WRAP";
            a[a.MIRROR = 1] = "MIRROR";
            a[a.CLAMP = 2] = "CLAMP";
            a[a.BORDER = 3] = "BORDER"
        })(B || (B = {}));
        var y;
        (function(a) {
            a[a.TEX1D = 0] = "TEX1D";
            a[a.TEX2D = 1] = "TEX2D";
            a[a.TEX3D = 2] = "TEX3D"
        })(y || (y = {}));
        var C;
        (function(a) {
            a[a.NONE = 0] = "NONE";
            a[a.TRANSFER_SRC = 1] = "TRANSFER_SRC";
            a[a.TRANSFER_DST = 2] = "TRANSFER_DST";
            a[a.SAMPLED = 4] = "SAMPLED";
            a[a.STORAGE = 8] = "STORAGE";
            a[a.COLOR_ATTACHMENT = 16] = "COLOR_ATTACHMENT";
            a[a.DEPTH_STENCIL_ATTACHMENT = 32] = "DEPTH_STENCIL_ATTACHMENT";
            a[a.TRANSIENT_ATTACHMENT = 64] = "TRANSIENT_ATTACHMENT";
            a[a.INPUT_ATTACHMENT = 128] = "INPUT_ATTACHMENT"
        })(C || (C = {}));
        var F;
        (function(a) {
            a[a.X1 = 0] = "X1";
            a[a.X2 = 1] = "X2";
            a[a.X4 = 2] = "X4";
            a[a.X8 = 3] = "X8";
            a[a.X16 = 4] = "X16";
            a[a.X32 = 5] = "X32";
            a[a.X64 = 6] = "X64"
        })(F || (F = {}));
        var G;
        (function(a) {
            a[a.NONE = 0] = "NONE";
            a[a.GEN_MIPMAP = 1] = "GEN_MIPMAP";
            a[a.CUBEMAP = 2] = "CUBEMAP";
            a[a.BAKUP_BUFFER = 4] = "BAKUP_BUFFER"
        })(G || (G = {}));
        var D;
        (function(a) {
            a[a.TV1D = 0] = "TV1D";
            a[a.TV2D = 1] = "TV2D";
            a[a.TV3D = 2] = "TV3D";
            a[a.CUBE = 3] = "CUBE";
            a[a.TV1D_ARRAY =
                4] = "TV1D_ARRAY";
            a[a.TV2D_ARRAY = 5] = "TV2D_ARRAY"
        })(D || (D = {}));
        var I;
        (function(a) {
            a[a.VERTEX = 0] = "VERTEX";
            a[a.HULL = 1] = "HULL";
            a[a.DOMAIN = 2] = "DOMAIN";
            a[a.GEOMETRY = 3] = "GEOMETRY";
            a[a.FRAGMENT = 4] = "FRAGMENT";
            a[a.COMPUTE = 5] = "COMPUTE";
            a[a.COUNT = 6] = "COUNT"
        })(I || (I = {}));
        var K;
        (function(a) {
            a[a.UNKNOWN = 0] = "UNKNOWN";
            a[a.UNIFORM_BUFFER = 1] = "UNIFORM_BUFFER";
            a[a.SAMPLER = 2] = "SAMPLER";
            a[a.STORAGE_BUFFER = 3] = "STORAGE_BUFFER"
        })(K || (K = {}));
        var L;
        (function(a) {
            a[a.PRIMARY = 0] = "PRIMARY";
            a[a.SECONDARY = 1] = "SECONDARY"
        })(L || (L = {}));
        var R;
        (function(a) {
            a[a.LOAD = 0] = "LOAD";
            a[a.CLEAR = 1] = "CLEAR";
            a[a.DISCARD = 2] = "DISCARD"
        })(R || (R = {}));
        var M;
        (function(a) {
            a[a.STORE = 0] = "STORE";
            a[a.DISCARD = 1] = "DISCARD"
        })(M || (M = {}));
        var S;
        (function(a) {
            a[a.UNDEFINED = 0] = "UNDEFINED";
            a[a.GENERAL = 1] = "GENERAL";
            a[a.COLOR_ATTACHMENT_OPTIMAL = 2] = "COLOR_ATTACHMENT_OPTIMAL";
            a[a.DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3] = "DEPTH_STENCIL_ATTACHMENT_OPTIMAL";
            a[a.DEPTH_STENCIL_READONLY_OPTIMAL = 4] = "DEPTH_STENCIL_READONLY_OPTIMAL";
            a[a.SHADER_READONLY_OPTIMAL = 5] = "SHADER_READONLY_OPTIMAL";
            a[a.TRANSFER_SRC_OPTIMAL = 6] = "TRANSFER_SRC_OPTIMAL";
            a[a.TRANSFER_DST_OPTIMAL = 7] = "TRANSFER_DST_OPTIMAL";
            a[a.PREINITIALIZED = 8] = "PREINITIALIZED";
            a[a.PRESENT_SRC = 9] = "PRESENT_SRC"
        })(S || (S = {}));
        var O;
        (function(a) {
            a[a.GRAPHICS = 0] = "GRAPHICS";
            a[a.COMPUTE = 1] = "COMPUTE";
            a[a.RAY_TRACING = 2] = "RAY_TRACING"
        })(O || (O = {}));
        var Q;
        (function(a) {
            a[a.VIEWPORT = 0] = "VIEWPORT";
            a[a.SCISSOR = 1] = "SCISSOR";
            a[a.LINE_WIDTH = 2] = "LINE_WIDTH";
            a[a.DEPTH_BIAS = 3] = "DEPTH_BIAS";
            a[a.BLEND_CONSTANTS = 4] = "BLEND_CONSTANTS";
            a[a.DEPTH_BOUNDS = 5] = "DEPTH_BOUNDS";
            a[a.STENCIL_WRITE_MASK = 6] = "STENCIL_WRITE_MASK";
            a[a.STENCIL_COMPARE_MASK = 7] = "STENCIL_COMPARE_MASK"
        })(Q || (Q = {}));
        var V;
        (function(a) {
            a[a.FRONT = 0] = "FRONT";
            a[a.BACK = 1] = "BACK";
            a[a.ALL = 2] = "ALL"
        })(V || (V = {}));
        var ba;
        (function(a) {
            a[a.GRAPHICS = 0] = "GRAPHICS";
            a[a.COMPUTE = 1] = "COMPUTE";
            a[a.TRANSFER = 2] = "TRANSFER"
        })(ba || (ba = {}));
        var da;
        (function(a) {
            a[a.NONE = 0] = "NONE";
            a[a.COLOR = 1] = "COLOR";
            a[a.DEPTH = 2] = "DEPTH";
            a[a.STENCIL = 4] = "STENCIL";
            a[a.DEPTH_STENCIL = 6] = "DEPTH_STENCIL";
            a[a.ALL = 7] = "ALL"
        })(da || (da = {}));
        var T;
        (function(a) {
            a[a.DEFAULT =
                100] = "DEFAULT"
        })(T || (T = {}));
        var N;
        (function(a) {
            a[a.MIN = 0] = "MIN";
            a[a.MAX = 255] = "MAX";
            a[a.DEFAULT = 128] = "DEFAULT"
        })(N || (N = {}));
        var fa;
        (function(a) {
            a[a.UBO_GLOBAL = 23] = "UBO_GLOBAL";
            a[a.UBO_SHADOW = 22] = "UBO_SHADOW";
            a[a.UBO_LOCAL = 21] = "UBO_LOCAL";
            a[a.UBO_FORWARD_LIGHTS = 20] = "UBO_FORWARD_LIGHTS";
            a[a.UBO_SKINNING = 19] = "UBO_SKINNING";
            a[a.UBO_SKINNING_TEXTURE = 18] = "UBO_SKINNING_TEXTURE";
            a[a.UBO_UI = 17] = "UBO_UI";
            a[a.SAMPLER_JOINTS = 25] = "SAMPLER_JOINTS";
            a[a.SAMPLER_ENVIRONMENT = 26] = "SAMPLER_ENVIRONMENT";
            a[a.CUSTUM_UBO_BINDING_END_POINT =
                17] = "CUSTUM_UBO_BINDING_END_POINT";
            a[a.CUSTOM_SAMPLER_BINDING_START_POINT = 30] = "CUSTOM_SAMPLER_BINDING_START_POINT"
        })(fa || (fa = {}));
        var Z, W, X;
        (function(a) {
            a[a.minFilter = 0] = "minFilter";
            a[a.magFilter = 1] = "magFilter";
            a[a.mipFilter = 2] = "mipFilter";
            a[a.addressU = 3] = "addressU";
            a[a.addressV = 4] = "addressV";
            a[a.addressW = 5] = "addressW";
            a[a.maxAnisotropy = 6] = "maxAnisotropy";
            a[a.cmpFunc = 7] = "cmpFunc";
            a[a.minLOD = 8] = "minLOD";
            a[a.maxLOD = 9] = "maxLOD";
            a[a.mipLODBias = 10] = "mipLODBias";
            a[a.borderColor = 11] = "borderColor";
            a[a.total =
                15] = "total"
        })(X || (X = {}));
        g = {};
        g[g.bool = c.BOOL] = "bool";
        g[g["int"] = c.INT] = "int";
        g[g.ivec2 = c.INT2] = "ivec2invTypeParams";
        g[g.ivec3 = c.INT3] = "ivec3";
        g[g.ivec4 = c.INT4] = "ivec4";
        g[g["float"] = c.FLOAT] = "float";
        g[g.vec2 = c.FLOAT2] = "vec2";
        g[g.vec3 = c.FLOAT3] = "vec3";
        g[g.vec4 = c.FLOAT4] = "vec4";
        g[g.mat2 = c.MAT2] = "mat2";
        g[g.mat3 = c.MAT3] = "mat3";
        g[g.mat4 = c.MAT4] = "mat4";
        g[g.sampler2D = c.SAMPLER2D] = "sampler2D";
        g[g.samplerCube = c.SAMPLER_CUBE] = "samplerCube";
        m = (Z = {}, Z[c.BOOL] = 4, Z[c.INT] = 4, Z[c.INT2] = 8, Z[c.INT3] = 12, Z[c.INT4] = 16,
            Z[c.FLOAT] = 4, Z[c.FLOAT2] = 8, Z[c.FLOAT3] = 12, Z[c.FLOAT4] = 16, Z[c.MAT2] = 16, Z[c.MAT3] = 36, Z[c.MAT4] = 64, Z[c.SAMPLER2D] = 4, Z[c.SAMPLER_CUBE] = 4, Z);
        a = (W = {}, W[c.BOOL] = a.R32I, W[c.INT] = a.R32I, W[c.INT2] = a.RG32I, W[c.INT3] = a.RGB32I, W[c.INT4] = a.RGBA32I, W[c.FLOAT] = a.R32F, W[c.FLOAT2] = a.RG32F, W[c.FLOAT3] = a.RGB32F, W[c.FLOAT4] = a.RGBA32F, W);
        W = {
            BACK: 1029,
            FRONT: 1028,
            NONE: 0,
            ADD: 32774,
            SUB: 32778,
            REV_SUB: 32779,
            ZERO: 0,
            ONE: 1,
            SRC_COLOR: 768,
            ONE_MINUS_SRC_COLOR: 769,
            DST_COLOR: 774,
            ONE_MINUS_DST_COLOR: 775,
            SRC_ALPHA: 770,
            ONE_MINUS_SRC_ALPHA: 771,
            DST_ALPHA: 772,
            ONE_MINUS_DST_ALPHA: 773,
            CONSTANT_COLOR: 32769,
            ONE_MINUS_CONSTANT_COLOR: 32770,
            CONSTANT_ALPHA: 32771,
            ONE_MINUS_CONSTANT_ALPHA: 32772,
            SRC_ALPHA_SATURATE: 776,
            NEVER: 512,
            LESS: 513,
            EQUAL: 514,
            LEQUAL: 515,
            GREATER: 516,
            NOTEQUAL: 517,
            GEQUAL: 518,
            ALWAYS: 519,
            KEEP: 7680,
            REPLACE: 7681,
            INCR: 7682,
            INCR_WRAP: 34055,
            DECR: 7683,
            DECR_WRAP: 34056,
            INVERT: 5386
        };
        Object.assign(W, T);
        q.exports = {
            murmurhash2_32_gc: function(a, b) {
                var c = a.length;
                b ^= c;
                for (var d = 0, f; 4 <= c;) f = 255 & a.charCodeAt(d) | (255 & a.charCodeAt(++d)) << 8 | (255 & a.charCodeAt(++d)) <<
                    16 | (255 & a.charCodeAt(++d)) << 24, f = 1540483477 * (65535 & f) + ((1540483477 * (f >>> 16) & 65535) << 16), f ^= f >>> 24, f = 1540483477 * (65535 & f) + ((1540483477 * (f >>> 16) & 65535) << 16), b = 1540483477 * (65535 & b) + ((1540483477 * (b >>> 16) & 65535) << 16) ^ f, c -= 4, ++d;
                switch (c) {
                    case 3:
                        b ^= (255 & a.charCodeAt(d + 2)) << 16;
                    case 2:
                        b ^= (255 & a.charCodeAt(d + 1)) << 8;
                    case 1:
                        b ^= 255 & a.charCodeAt(d), b = 1540483477 * (65535 & b) + ((1540483477 * (b >>> 16) & 65535) << 16)
                }
                b ^= b >>> 13;
                b = 1540483477 * (65535 & b) + ((1540483477 * (b >>> 16) & 65535) << 16);
                return (b ^ b >>> 15) >>> 0
            },
            SamplerInfoIndex: X,
            effectStructure: {
                $techniques: [{
                    $passes: [{
                        depthStencilState: {},
                        rasterizerState: {},
                        blendState: {
                            targets: [{}]
                        },
                        properties: {
                            any: {
                                sampler: {},
                                inspector: {}
                            }
                        }
                    }]
                }]
            },
            typeMap: g,
            sizeMap: m,
            formatMap: a,
            passParams: W,
            RenderQueue: {
                OPAQUE: 0,
                TRANSPARENT: 1,
                OVERLAY: 2
            },
            RenderPriority: N,
            GFXGetTypeSize: function(a) {
                switch (a) {
                    case c.BOOL:
                    case c.INT:
                    case c.UINT:
                    case c.FLOAT:
                        return 4;
                    case c.BOOL2:
                    case c.INT2:
                    case c.UINT2:
                    case c.FLOAT2:
                        return 8;
                    case c.BOOL3:
                    case c.INT3:
                    case c.UINT3:
                    case c.FLOAT3:
                        return 12;
                    case c.BOOL4:
                    case c.INT4:
                    case c.UINT4:
                    case c.FLOAT4:
                    case c.MAT2:
                        return 16;
                    case c.MAT2X3:
                        return 24;
                    case c.MAT2X4:
                        return 32;
                    case c.MAT3X2:
                        return 24;
                    case c.MAT3:
                        return 36;
                    case c.MAT3X4:
                        return 48;
                    case c.MAT4X2:
                    case c.MAT4X2:
                        return 32;
                    case c.MAT4:
                        return 64;
                    case c.SAMPLER1D:
                    case c.SAMPLER1D_ARRAY:
                    case c.SAMPLER2D:
                    case c.SAMPLER2D_ARRAY:
                    case c.SAMPLER3D:
                    case c.SAMPLER_CUBE:
                        return 4;
                    default:
                        return 0
                }
            },
            UniformBinding: fa
        }
    }, {}],
    347: [function(g, q, m) {
        function h(a) {
            return a && a.__esModule ? a : {
                default: a
            }
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var e = g("../memop"),
            d = h(g("../enums")),
            k = g("../../core/value-types"),
            c = h(g("./program-lib")),
            a = h(g("./view")),
            b = h(g("../gfx")),
            l = new k.Mat4,
            f = new e.RecyclePool(function() {
                return {
                    stage: null,
                    items: null
                }
            }, 8),
            n = new e.RecyclePool(function() {
                return new Float32Array(2)
            }, 8),
            u = new e.RecyclePool(function() {
                return new Float32Array(3)
            }, 8),
            v = new e.RecyclePool(function() {
                return new Float32Array(4)
            }, 8),
            p = new e.RecyclePool(function() {
                return new Float32Array(9)
            }, 8),
            t = new e.RecyclePool(function() {
                return new Float32Array(16)
            }, 8),
            x = new e.RecyclePool(function() {
                    return new Float32Array(64)
                },
                8),
            z = new e.RecyclePool(function() {
                return new Int32Array(2)
            }, 8),
            E = new e.RecyclePool(function() {
                return new Int32Array(3)
            }, 8),
            w = new e.RecyclePool(function() {
                return new Int32Array(4)
            }, 8),
            A = new e.RecyclePool(function() {
                return new Int32Array(64)
            }, 8);
        g = function() {
            function h(b, f) {
                var l;
                this._device = b;
                this._programLib = new c["default"](b);
                this._opts = f;
                this._type2defaultValue = (l = {}, l[d["default"].PARAM_INT] = 0, l[d["default"].PARAM_INT2] = new k.Vec2(0, 0), l[d["default"].PARAM_INT3] = new k.Vec3(0, 0, 0), l[d["default"].PARAM_INT4] =
                    new k.Vec4(0, 0, 0, 0), l[d["default"].PARAM_FLOAT] = 0, l[d["default"].PARAM_FLOAT2] = new k.Vec2(0, 0), l[d["default"].PARAM_FLOAT3] = new k.Vec3(0, 0, 0), l[d["default"].PARAM_FLOAT4] = new k.Vec4(0, 0, 0, 0), l[d["default"].PARAM_COLOR4] = new k.Color(0, 0, 0, 1), l[d["default"].PARAM_MAT3] = new k.Mat3, l[d["default"].PARAM_MAT4] = new k.Mat4, l[d["default"].PARAM_TEXTURE_2D] = f.defaultTexture, l[d["default"].PARAM_TEXTURE_CUBE] = f.defaultTextureCube, l);
                this._stage2fn = {};
                this._usedTextureUnits = 0;
                this._viewPools = new e.RecyclePool(function() {
                        return new a["default"]
                    },
                    8);
                this._drawItemsPools = new e.RecyclePool(function() {
                    return {
                        model: null,
                        node: null,
                        ia: null,
                        effect: null,
                        defines: null,
                        uniforms: null
                    }
                }, 100);
                this._stageItemsPools = new e.RecyclePool(function() {
                    return new e.RecyclePool(function() {
                        return {
                            model: null,
                            node: null,
                            ia: null,
                            effect: null,
                            defines: null,
                            passes: [],
                            sortKey: -1,
                            uniforms: null
                        }
                    }, 100)
                }, 16);
                this._definesChanged = !1
            }
            var g = h.prototype;
            g._resetTextuerUnit = function() {
                this._usedTextureUnits = 0
            };
            g._allocTextureUnit = function() {
                var a = this._device,
                    b = this._usedTextureUnits;
                b >= a._caps.maxTextureUnits && console.warn("Trying to use " + b + " texture units while this GPU supports only " + a._caps.maxTextureUnits);
                this._usedTextureUnits += 1;
                return b
            };
            g._registerStage = function(a, b) {
                this._stage2fn[a] = b
            };
            g.clear = function() {
                this._programLib.clear();
                this.reset()
            };
            g.reset = function() {
                this._viewPools.reset();
                this._stageItemsPools.reset();
                this._definesChanged = !1
            };
            g._requestView = function() {
                return this._viewPools.add()
            };
            g._render = function(a, b) {
                var c = this._device;
                c.setFrameBuffer(a._framebuffer);
                c.setViewport(a._rect.x, a._rect.y, a._rect.w, a._rect.h);
                var e = {};
                a._clearFlags & d["default"].CLEAR_COLOR && (e.color = k.Vec4.toArray([], a._color));
                a._clearFlags & d["default"].CLEAR_DEPTH && (e.depth = a._depth);
                a._clearFlags & d["default"].CLEAR_STENCIL && (e.stencil = a._stencil);
                c.clear(e);
                this._drawItemsPools.reset();
                for (c = 0; c < b._models.length; ++c)
                    if (e = b._models.data[c], 0 !== (e._cullingMask & a._cullingMask)) {
                        var l = this._drawItemsPools.add();
                        e.extractDrawItem(l)
                    }
                f.reset();
                for (b = 0; b < a._stages.length; ++b) {
                    c = a._stages[b];
                    e = this._stageItemsPools.add();
                    e.reset();
                    for (l = 0; l < this._drawItemsPools.length; ++l) {
                        var h = this._drawItemsPools.data[l],
                            g = h.effect.stagePasses[c];
                        if (g && 0 !== g.length) {
                            var n = e.add();
                            n.passes = g;
                            n.model = h.model;
                            n.node = h.node;
                            n.ia = h.ia;
                            n.effect = h.effect;
                            n.defines = h.defines;
                            n.sortKey = -1;
                            n.uniforms = h.uniforms
                        }
                    }
                    l = f.add();
                    l.stage = c;
                    l.items = e
                }
                for (b = 0; b < f.length; ++b) c = f.data[b], (0, this._stage2fn[c.stage])(a, c.items)
            };
            g._setProperty = function(a) {
                var b = this._device,
                    c = a.value;
                void 0 === c && (c = a.val);
                void 0 === c && (c =
                    this._type2defaultValue[a.type]);
                if (void 0 === c) console.warn("Failed to set technique property " + a.name + ", value not found.");
                else if (a.type === d["default"].PARAM_TEXTURE_2D || a.type === d["default"].PARAM_TEXTURE_CUBE)
                    if (Array.isArray(c))
                        if (c.length > a.count) console.error("Failed to set property [" + a.name + "] : The length of texture array [" + c.length + "] is bigger than [" + a.count + "].");
                        else {
                            for (var f = A.add(), e = 0; e < c.length; ++e) f[e] = this._allocTextureUnit();
                            b.setTextureArray(a.name, c, f)
                        }
                else b.setTexture(a.name,
                    c, this._allocTextureUnit());
                else a.directly ? b.setUniformDirectly(a.name, c) : b.setUniform(a.name, c)
            };
            g._draw = function(a) {
                var c = this._device,
                    d = this._programLib,
                    f = a.node,
                    e = a.ia,
                    h = a.passes;
                a = a.effect;
                n.reset();
                u.reset();
                v.reset();
                p.reset();
                t.reset();
                x.reset();
                z.reset();
                E.reset();
                w.reset();
                A.reset();
                f.getWorldMatrix(l);
                c.setUniform("cc_matWorld", k.Mat4.toArray(t.add(), l));
                k.Mat4.invert(l, l);
                k.Mat4.transpose(l, l);
                c.setUniform("cc_matWorldIT", k.Mat4.toArray(t.add(), l));
                f = this._defines;
                for (var g = 0; g < h.length; ++g) {
                    var m =
                        h[g];
                    this._definesChanged && (m._programKey = null);
                    var B = e.count;
                    e._vertexBuffer && c.setVertexBuffer(0, e._vertexBuffer);
                    e._indexBuffer && c.setIndexBuffer(e._indexBuffer);
                    c.setPrimitiveType(e._primitiveType);
                    Object.setPrototypeOf(f, m._defines);
                    var q = d.getProgram(m, f, a.name);
                    c.setProgram(q);
                    q = q._uniforms;
                    for (var y = m._properties, C = 0; C < q.length; C++) {
                        var V = y[q[C].name];
                        void 0 !== V && this._setProperty(V)
                    }
                    c.setCullMode(m._cullMode);
                    m._blend && (c.enableBlend(), c.setBlendFuncSep(m._blendSrc, m._blendDst, m._blendSrcAlpha,
                        m._blendDstAlpha), c.setBlendEqSep(m._blendEq, m._blendAlphaEq), c.setBlendColor32(m._blendColor));
                    m._depthTest && (c.enableDepthTest(), c.setDepthFunc(m._depthFunc));
                    m._depthWrite && c.enableDepthWrite();
                    c.setStencilTest(m._stencilTest);
                    m._stencilTest === b["default"].STENCIL_ENABLE && (c.setStencilFuncFront(m._stencilFuncFront, m._stencilRefFront, m._stencilMaskFront), c.setStencilOpFront(m._stencilFailOpFront, m._stencilZFailOpFront, m._stencilZPassOpFront, m._stencilWriteMaskFront), c.setStencilFuncBack(m._stencilFuncBack,
                        m._stencilRefBack, m._stencilMaskBack), c.setStencilOpBack(m._stencilFailOpBack, m._stencilZFailOpBack, m._stencilZPassOpBack, m._stencilWriteMaskBack));
                    c.draw(e._start, B);
                    this._resetTextuerUnit()
                }
            };
            return h
        }();
        m["default"] = g;
        q.exports = m["default"]
    }, {
        "../../core/value-types": 325,
        "../enums": 353,
        "../gfx": 358,
        "../memop": 370,
        "./program-lib": 350,
        "./view": 352
    }],
    348: [function(g, q, m) {
        function h(c, a) {
            for (var b = 0; b < a.length; b++) {
                var e = a[b];
                e.enumerable = e.enumerable || !1;
                e.configurable = !0;
                "value" in e && (e.writable = !0);
                Object.defineProperty(c, d(e.key), e)
            }
        }

        function e(c, a, b) {
            a && h(c.prototype, a);
            b && h(c, b);
            Object.defineProperty(c, "prototype", {
                writable: !1
            });
            return c
        }

        function d(c) {
            a: if ("object" === typeof c && null !== c) {
                $jscomp.initSymbol();
                var a = c[Symbol.toPrimitive];
                if (void 0 !== a) {
                    c = a.call(c, "string");
                    if ("object" !== typeof c) break a;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                c = String(c)
            }return "symbol" === typeof c ? c : String(c)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var k = function(c) {
            return c && c.__esModule ?
                c : {
                    default: c
                }
        }(g("../gfx"));
        g = function() {
            function c(a, b, c) {
                void 0 === c && (c = k["default"].PT_TRIANGLES);
                this._vertexBuffer = a;
                this._indexBuffer = b;
                this._primitiveType = c;
                this._start = 0;
                this._count = -1
            }
            e(c, [{
                key: "count",
                get: function() {
                    return -1 !== this._count ? this._count : this._indexBuffer ? this._indexBuffer.count : this._vertexBuffer ? this._vertexBuffer.count : 0
                }
            }]);
            return c
        }();
        m["default"] = g;
        q.exports = m["default"]
    }, {
        "../gfx": 358
    }],
    349: [function(g, q, m) {
        function h(c) {
            return c && c.__esModule ? c : {
                default: c
            }
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var e = h(g("../gfx")),
            d = h(g("../enums")),
            k = h(g("../../core/value-types/value-type"));
        g = function() {
            function c(a, c, d, k, h, g) {
                void 0 === h && (h = {});
                void 0 === g && (g = {});
                this._name = a;
                this._detailName = c;
                this._programName = d;
                this._programKey = null;
                this._stage = k;
                this._properties = h;
                this._defines = g;
                this._propertyNames = Object.keys(h);
                this._defineNames = Object.keys(g);
                this._cullMode = e["default"].CULL_BACK;
                this._blend = !1;
                this._blendEq = e["default"].BLEND_FUNC_ADD;
                this._blendAlphaEq = e["default"].BLEND_FUNC_ADD;
                this._blendSrc = e["default"].BLEND_SRC_ALPHA;
                this._blendDst = e["default"].BLEND_ONE_MINUS_SRC_ALPHA;
                this._blendSrcAlpha = e["default"].BLEND_SRC_ALPHA;
                this._blendDstAlpha = e["default"].BLEND_ONE_MINUS_SRC_ALPHA;
                this._blendColor = 4294967295;
                this._depthWrite = this._depthTest = !1;
                this._depthFunc = e["default"].DS_FUNC_LESS;
                this._stencilTest = e["default"].STENCIL_INHERIT;
                this._stencilFuncFront = e["default"].DS_FUNC_ALWAYS;
                this._stencilRefFront = 0;
                this._stencilMaskFront = 255;
                this._stencilFailOpFront = e["default"].STENCIL_OP_KEEP;
                this._stencilZFailOpFront = e["default"].STENCIL_OP_KEEP;
                this._stencilZPassOpFront = e["default"].STENCIL_OP_KEEP;
                this._stencilWriteMaskFront = 255;
                this._stencilFuncBack = e["default"].DS_FUNC_ALWAYS;
                this._stencilRefBack = 0;
                this._stencilMaskBack = 255;
                this._stencilFailOpBack = e["default"].STENCIL_OP_KEEP;
                this._stencilZFailOpBack = e["default"].STENCIL_OP_KEEP;
                this._stencilZPassOpBack = e["default"].STENCIL_OP_KEEP;
                this._stencilWriteMaskBack = 255
            }
            var a = c.prototype;
            a.setCullMode = function(a) {
                void 0 === a && (a = e["default"].CULL_BACK);
                this._cullMode = a
            };
            a.setBlend = function(a, c, d, k, h, g, p, t) {
                void 0 === a && (a = !1);
                void 0 === c && (c = e["default"].BLEND_FUNC_ADD);
                void 0 === d && (d = e["default"].BLEND_SRC_ALPHA);
                void 0 === k && (k = e["default"].BLEND_ONE_MINUS_SRC_ALPHA);
                void 0 === h && (h = e["default"].BLEND_FUNC_ADD);
                void 0 === g && (g = e["default"].BLEND_SRC_ALPHA);
                void 0 === p && (p = e["default"].BLEND_ONE_MINUS_SRC_ALPHA);
                void 0 === t && (t = 4294967295);
                this._blend = a;
                this._blendEq = c;
                this._blendSrc = d;
                this._blendDst = k;
                this._blendAlphaEq = h;
                this._blendSrcAlpha = g;
                this._blendDstAlpha =
                    p;
                this._blendColor = t
            };
            a.setDepth = function(a, c, d) {
                void 0 === a && (a = !1);
                void 0 === c && (c = !1);
                void 0 === d && (d = e["default"].DS_FUNC_LESS);
                this._depthTest = a;
                this._depthWrite = c;
                this._depthFunc = d
            };
            a.setStencilFront = function(a, c, d, k, h, g, p, t) {
                void 0 === a && (a = e["default"].STENCIL_INHERIT);
                void 0 === c && (c = e["default"].DS_FUNC_ALWAYS);
                void 0 === d && (d = 0);
                void 0 === k && (k = 255);
                void 0 === h && (h = e["default"].STENCIL_OP_KEEP);
                void 0 === g && (g = e["default"].STENCIL_OP_KEEP);
                void 0 === p && (p = e["default"].STENCIL_OP_KEEP);
                void 0 === t &&
                    (t = 255);
                this._stencilTest = a;
                this._stencilFuncFront = c;
                this._stencilRefFront = d;
                this._stencilMaskFront = k;
                this._stencilFailOpFront = h;
                this._stencilZFailOpFront = g;
                this._stencilZPassOpFront = p;
                this._stencilWriteMaskFront = t
            };
            a.setStencilEnabled = function(a) {
                void 0 === a && (a = e["default"].STENCIL_INHERIT);
                this._stencilTest = a
            };
            a.setStencilBack = function(a, c, d, k, h, g, p, t) {
                void 0 === a && (a = e["default"].STENCIL_INHERIT);
                void 0 === c && (c = e["default"].DS_FUNC_ALWAYS);
                void 0 === d && (d = 0);
                void 0 === k && (k = 255);
                void 0 === h && (h = e["default"].STENCIL_OP_KEEP);
                void 0 === g && (g = e["default"].STENCIL_OP_KEEP);
                void 0 === p && (p = e["default"].STENCIL_OP_KEEP);
                void 0 === t && (t = 255);
                this._stencilTest = a;
                this._stencilFuncBack = c;
                this._stencilRefBack = d;
                this._stencilMaskBack = k;
                this._stencilFailOpBack = h;
                this._stencilZFailOpBack = g;
                this._stencilZPassOpBack = p;
                this._stencilWriteMaskBack = t
            };
            a.setStage = function(a) {
                this._stage = a
            };
            a.setProperties = function(a) {
                this._properties = a
            };
            a.getProperty = function(a) {
                if (this._properties[a]) return this._properties[a].value
            };
            a.setProperty = function(a,
                c, f) {
                var b = this._properties[a];
                if (!b) return !1;
                b.directly = f;
                if (Array.isArray(c)) {
                    f = b.value;
                    if (f.length !== c.length) {
                        cc.warnID(9105, this._name, a);
                        return
                    }
                    for (a = 0; a < c.length; a++) f[a] = c[a]
                } else c && !ArrayBuffer.isView(c) ? b.type === d["default"].PARAM_TEXTURE_2D ? b.value = c.getImpl() : c instanceof k["default"] ? c.constructor.toArray(b.value, c) : ("object" === typeof c && cc.warnID(9106, this._name, a), b.value = c) : b.value = c;
                return !0
            };
            a.getDefine = function(a) {
                return this._defines[a]
            };
            a.define = function(a, c, d) {
                var b = this._defines[a];
                if (!d && void 0 === b) return !1;
                b !== c && (this._defines[a] = c, this._programKey = null);
                return !0
            };
            a.clone = function() {
                var a = new c(this._programName);
                Object.assign(a, this);
                var d = {},
                    f = this._properties,
                    e;
                for (e in f) {
                    var k = f[e],
                        h = d[e] = {},
                        g = k.value;
                    Array.isArray(g) ? h.value = g.concat() : ArrayBuffer.isView(g) ? h.value = new g.__proto__.constructor(g) : h.value = g;
                    for (var t in k) "value" !== t && (h[t] = k[t])
                }
                a._properties = d;
                a._defines = Object.assign({}, this._defines);
                a._propertyNames = this._propertyNames;
                a._defineNames = this._defineNames;
                return a
            };
            return c
        }();
        m["default"] = g;
        q.exports = m["default"]
    }, {
        "../../core/value-types/value-type": 333,
        "../enums": 353,
        "../gfx": 358
    }],
    350: [function(g, q, m) {
        function h(a, b) {
            for (var c = [], d = 0; d < a.length; d++) {
                var e = a[d].name,
                    k = b[e];
                "number" !== typeof k && (k = k ? 1 : 0);
                c.push("#define " + e + " " + k)
            }
            return c.join("\n") + "\n"
        }

        function e(a, b, c) {
            for (var d = 0; d < b.length; d++) {
                var e = b[d].name,
                    l = c[e];
                Number.isInteger(l) && (a = a.replace(new RegExp(e, "g"), l))
            }
            return a
        }

        function d(a) {
            return a.replace(/#pragma for (\w+) in range\(\s*(\d+)\s*,\s*(\d+)\s*\)([\s\S]+?)#pragma endFor/g,
                function(a, c, d, e, k) {
                    a = "";
                    d = parseInt(d);
                    e = parseInt(e);
                    for ((d.isNaN || e.isNaN) && console.error("Unroll For Loops Error: begin and end of range must be an int num."); d < e; ++d) a += k.replace(new RegExp("{" + c + "}", "g"), d);
                    return a
                })
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var k = function(a) {
                return a && a.__esModule ? a : {
                    default: a
                }
            }(g("../gfx")),
            c = 0;
        g = function() {
            function a(a) {
                this._device = a;
                this._templates = {};
                this._cache = {};
                this._checkPrecision()
            }
            var b = a.prototype;
            b.clear = function() {
                this._templates = {};
                this._cache = {}
            };
            b.define = function(a) {
                var b = a.name,
                    d = a.defines,
                    e = a.glsl1 || a,
                    l = e.vert;
                e = e.frag;
                if (!this._templates[b]) {
                    for (var k = ++c, h = 0, g = 0; g < d.length; ++g) {
                        var m = d[g],
                            E = 1;
                        "number" === m.type ? (E = m.range || [], m.min = E[0] || 0, m.max = E[1] || 4, E = Math.ceil(Math.log2(m.max - m.min)), m._map = function(a) {
                            return a - this.min << this._offset
                        }.bind(m)) : m._map = function(a) {
                            return a ? 1 << this._offset : 0
                        }.bind(m);
                        m._offset = h;
                        h += E
                    }
                    h = a.uniforms || [];
                    if (a.samplers)
                        for (g = 0; g < a.samplers.length; g++) h.push(a.samplers[g]);
                    if (a.blocks)
                        for (g = 0; g < a.blocks.length; g++) {
                            m =
                                a.blocks[g].defines;
                            E = a.blocks[g].members;
                            for (var w = 0; w < E.length; w++) h.push({
                                defines: m,
                                name: E[w].name,
                                type: E[w].type
                            })
                        }
                    this._templates[b] = {
                        id: k,
                        name: b,
                        vert: l,
                        frag: e,
                        defines: d,
                        attributes: a.attributes,
                        uniforms: h,
                        extensions: a.extensions
                    }
                }
            };
            b.getTemplate = function(a) {
                return this._templates[a]
            };
            b.hasProgram = function(a) {
                return void 0 !== this._templates[a]
            };
            b.getKey = function(a, b) {
                a = this._templates[a];
                for (var c = 0, d = 0; d < a.defines.length; ++d) {
                    var f = a.defines[d],
                        e = b[f.name];
                    void 0 !== e && (c |= f._map(e))
                }
                return a.id +
                    ":" + c
            };
            b.getProgram = function(a, b, c) {
                var f = a._programKey = a._programKey || this.getKey(a._programName, b),
                    l = this._cache[f];
                if (l) return l;
                a = this._templates[a._programName];
                l = h(a.defines, b);
                var g = e(a.vert, a.defines, b);
                g = l + d(g);
                this._highpSupported || (g = g.replace(/\bhighp\b/g, "mediump"));
                b = e(a.frag, a.defines, b);
                b = l + d(b);
                this._highpSupported || (b = b.replace(/\bhighp\b/g, "mediump"));
                l = new k["default"].Program(this._device, {
                    vert: g,
                    frag: b
                });
                var n = l.link();
                if (n) {
                    var m = g.split("\n"),
                        z = b.split("\n"),
                        E = a.defines.length;
                    n.forEach(function(a) {
                        var b = a.line - E,
                            d = ("vs" === a.type ? m : z)[a.line - 1];
                        cc.error(c + " : " + (a.info || "Failed to compile " + a.type + " " + a.fileID + " (ln " + b + "): \n " + a.message + ": \n  " + d))
                    })
                }
                return this._cache[f] = l
            };
            b._checkPrecision = function() {
                var a = this._device._gl,
                    b = !1;
                a.getShaderPrecisionFormat && (b = a.getShaderPrecisionFormat(a.VERTEX_SHADER, a.HIGH_FLOAT), a = a.getShaderPrecisionFormat(a.FRAGMENT_SHADER, a.HIGH_FLOAT), b = b && 0 < b.precision && a && 0 < a.precision);
                b || cc.warnID(9102);
                this._highpSupported = b
            };
            return a
        }();
        m["default"] = g;
        q.exports = m["default"]
    }, {
        "../gfx": 358
    }],
    351: [function(g, q, m) {
        function h(e, c) {
            for (var a = 0; a < c.length; a++) {
                var b = c[a];
                b.enumerable = b.enumerable || !1;
                b.configurable = !0;
                "value" in b && (b.writable = !0);
                Object.defineProperty(e, d(b.key), b)
            }
        }

        function e(d, c, a) {
            c && h(d.prototype, c);
            a && h(d, a);
            Object.defineProperty(d, "prototype", {
                writable: !1
            });
            return d
        }

        function d(d) {
            a: if ("object" === typeof d && null !== d) {
                $jscomp.initSymbol();
                var c = d[Symbol.toPrimitive];
                if (void 0 !== c) {
                    d = c.call(d, "string");
                    if ("object" !==
                        typeof d) break a;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                d = String(d)
            }return "symbol" === typeof d ? d : String(d)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        g = function() {
            function d(c, a) {
                this._name = c;
                this._passes = a
            }
            d.prototype.clone = function() {
                for (var c = [], a = 0; a < this._passes.length; a++) c.push(this._passes[a].clone());
                return new d(this._name, c)
            };
            e(d, [{
                key: "name",
                get: function() {
                    return this._name
                }
            }, {
                key: "passes",
                get: function() {
                    return this._passes
                }
            }]);
            return d
        }();
        m["default"] = g;
        q.exports =
            m["default"]
    }, {}],
    352: [function(g, q, m) {
        m.__esModule = !0;
        m["default"] = void 0;
        var h = g("../../core/value-types"),
            e = function(c) {
                return c && c.__esModule ? c : {
                    default: c
                }
            }(g("../enums")),
            d = new h.Mat4,
            k = 0;
        g = function() {
            function c() {
                this._id = k++;
                this._priority = 0;
                this._rect = {
                    x: 0,
                    y: 0,
                    w: 1,
                    h: 1
                };
                this._color = new h.Vec4(.3, .3, .3, 1);
                this._depth = 1;
                this._stencil = 0;
                this._clearFlags = e["default"].CLEAR_COLOR | e["default"].CLEAR_DEPTH;
                this._clearModel = null;
                this._matView = cc.mat4();
                this._matViewInv = cc.mat4();
                this._matProj = cc.mat4();
                this._matViewProj = cc.mat4();
                this._matInvViewProj = cc.mat4();
                this._stages = [];
                this._cullingByID = !1;
                this._shadowLight = this._framebuffer = null;
                this._cullingMask = 4294967295
            }
            var a = c.prototype;
            a.getForward = function(a) {
                var b = this._matView.m;
                return h.Vec3.set(a, -b[2], -b[6], -b[10])
            };
            a.getPosition = function(a) {
                h.Mat4.invert(d, this._matView);
                return h.Mat4.getTranslation(a, d)
            };
            return c
        }();
        m["default"] = g;
        q.exports = m["default"]
    }, {
        "../../core/value-types": 325,
        "../enums": 353
    }],
    353: [function(g, q, m) {
        m.__esModule = !0;
        m["default"] =
            void 0;
        g = g("./build/mappings");
        m["default"] = {
            PROJ_PERSPECTIVE: 0,
            PROJ_ORTHO: 1,
            LIGHT_DIRECTIONAL: 0,
            LIGHT_POINT: 1,
            LIGHT_SPOT: 2,
            LIGHT_AMBIENT: 3,
            SHADOW_NONE: 0,
            SHADOW_HARD: 1,
            SHADOW_SOFT: 2,
            PARAM_INT: g.typeMap["int"],
            PARAM_INT2: g.typeMap.ivec2,
            PARAM_INT3: g.typeMap.ivec3,
            PARAM_INT4: g.typeMap.ivec4,
            PARAM_FLOAT: g.typeMap["float"],
            PARAM_FLOAT2: g.typeMap.vec2,
            PARAM_FLOAT3: g.typeMap.vec3,
            PARAM_FLOAT4: g.typeMap.vec4,
            PARAM_MAT2: g.typeMap.mat2,
            PARAM_MAT3: g.typeMap.mat3,
            PARAM_MAT4: g.typeMap.mat4,
            PARAM_TEXTURE_2D: g.typeMap.sampler2D,
            PARAM_TEXTURE_CUBE: g.typeMap.samplerCube,
            CLEAR_COLOR: 1,
            CLEAR_DEPTH: 2,
            CLEAR_STENCIL: 4,
            CLEAR_SKYBOX: 8,
            BUFFER_VIEW_INT8: 0,
            BUFFER_VIEW_UINT8: 1,
            BUFFER_VIEW_INT16: 2,
            BUFFER_VIEW_UINT16: 3,
            BUFFER_VIEW_INT32: 4,
            BUFFER_VIEW_UINT32: 5,
            BUFFER_VIEW_FLOAT32: 6
        };
        q.exports = m["default"]
    }, {
        "./build/mappings": 346
    }],
    354: [function(g, q, m) {
        function h(a) {
            return a && a.__esModule ? a : {
                default: a
            }
        }

        function e(a, b) {
            for (var c = 0; c < b.length; c++) {
                var d = b[c];
                d.enumerable = d.enumerable || !1;
                d.configurable = !0;
                "value" in d && (d.writable = !0);
                Object.defineProperty(a,
                    k(d.key), d)
            }
        }

        function d(a, b, c) {
            b && e(a.prototype, b);
            c && e(a, c);
            Object.defineProperty(a, "prototype", {
                writable: !1
            });
            return a
        }

        function k(a) {
            a: if ("object" === typeof a && null !== a) {
                $jscomp.initSymbol();
                var b = a[Symbol.toPrimitive];
                if (void 0 !== b) {
                    a = b.call(a, "string");
                    if ("object" !== typeof a) break a;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                a = String(a)
            }return "symbol" === typeof a ? a : String(a)
        }

        function c(a, b, c, d) {
            void 0 === d && (d = 0);
            c instanceof l["default"] ? a.framebufferTexture2D(a.FRAMEBUFFER,
                b, a.TEXTURE_2D, c._glID, 0) : c instanceof f["default"] ? a.framebufferTexture2D(a.FRAMEBUFFER, b, a.TEXTURE_CUBE_MAP_POSITIVE_X + d, c._glID, 0) : a.framebufferRenderbuffer(a.FRAMEBUFFER, b, a.RENDERBUFFER, c._glID)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var a = h(g("./state")),
            b = g("./enums"),
            l = h(g("./texture-2d")),
            f = h(g("./texture-cube")),
            n, u, v = (n = {}, n[5124] = function(a, b, c) {
                a.uniform1i(b, c)
            }, n[5126] = function(a, b, c) {
                a.uniform1f(b, c)
            }, n[35664] = function(a, b, c) {
                a.uniform2fv(b, c)
            }, n[35665] = function(a, b, c) {
                a.uniform3fv(b,
                    c)
            }, n[35666] = function(a, b, c) {
                a.uniform4fv(b, c)
            }, n[35667] = function(a, b, c) {
                a.uniform2iv(b, c)
            }, n[35668] = function(a, b, c) {
                a.uniform3iv(b, c)
            }, n[35669] = function(a, b, c) {
                a.uniform4iv(b, c)
            }, n[35670] = function(a, b, c) {
                a.uniform1i(b, c)
            }, n[35671] = function(a, b, c) {
                a.uniform2iv(b, c)
            }, n[35672] = function(a, b, c) {
                a.uniform3iv(b, c)
            }, n[35673] = function(a, b, c) {
                a.uniform4iv(b, c)
            }, n[35674] = function(a, b, c) {
                a.uniformMatrix2fv(b, !1, c)
            }, n[35675] = function(a, b, c) {
                a.uniformMatrix3fv(b, !1, c)
            }, n[35676] = function(a, b, c) {
                a.uniformMatrix4fv(b, !1, c)
            }, n[35678] = function(a, b, c) {
                a.uniform1i(b, c)
            }, n[35680] = function(a, b, c) {
                a.uniform1i(b, c)
            }, n),
            p = (u = {}, u[5124] = function(a, b, c) {
                    a.uniform1iv(b, c)
                }, u[5126] = function(a, b, c) {
                    a.uniform1fv(b, c)
                }, u[35664] = function(a, b, c) {
                    a.uniform2fv(b, c)
                }, u[35665] = function(a, b, c) {
                    a.uniform3fv(b, c)
                }, u[35666] = function(a, b, c) {
                    a.uniform4fv(b, c)
                }, u[35667] = function(a, b, c) {
                    a.uniform2iv(b, c)
                }, u[35668] = function(a, b, c) {
                    a.uniform3iv(b, c)
                }, u[35669] = function(a, b, c) {
                    a.uniform4iv(b, c)
                }, u[35670] = function(a, b, c) {
                    a.uniform1iv(b, c)
                }, u[35671] =
                function(a, b, c) {
                    a.uniform2iv(b, c)
                }, u[35672] = function(a, b, c) {
                    a.uniform3iv(b, c)
                }, u[35673] = function(a, b, c) {
                    a.uniform4iv(b, c)
                }, u[35674] = function(a, b, c) {
                    a.uniformMatrix2fv(b, !1, c)
                }, u[35675] = function(a, b, c) {
                    a.uniformMatrix3fv(b, !1, c)
                }, u[35676] = function(a, b, c) {
                    a.uniformMatrix4fv(b, !1, c)
                }, u[35678] = function(a, b, c) {
                    a.uniform1iv(b, c)
                }, u[35680] = function(a, b, c) {
                    a.uniform1iv(b, c)
                }, u);
        g = function() {
            function f(b, c) {
                c = c || {};
                void 0 === c.alpha && (c.alpha = !1);
                void 0 === c.stencil && (c.stencil = !0);
                void 0 === c.depth && (c.depth = !0);
                void 0 === c.antialias && (c.antialias = !1);
                void 0 === c.preserveDrawingBuffer && (c.preserveDrawingBuffer = !1);
                try {
                    var d = b.getContext("webgl", c) || b.getContext("experimental-webgl", c) || b.getContext("webkit-3d", c) || b.getContext("moz-webgl", c)
                } catch (A) {
                    console.error(A);
                    return
                }
                d || console.error("This device does not support webgl");
                this._gl = d;
                this._extensions = {};
                this._caps = {};
                this._stats = {
                    texture: 0,
                    vb: 0,
                    ib: 0,
                    drawcalls: 0
                };
                this._initExtensions("EXT_texture_filter_anisotropic EXT_shader_texture_lod OES_standard_derivatives OES_texture_float OES_texture_float_linear OES_texture_half_float OES_texture_half_float_linear OES_vertex_array_object WEBGL_compressed_texture_astc WEBGL_compressed_texture_etc WEBGL_compressed_texture_etc1 WEBGL_compressed_texture_pvrtc WEBGL_compressed_texture_s3tc WEBGL_depth_texture WEBGL_draw_buffers".split(" "));
                this._initCaps();
                this._initStates();
                a["default"].initDefault(this);
                this._current = new a["default"](this);
                this._next = new a["default"](this);
                this._uniforms = {};
                this._sx = this._sy = this._sw = this._sh = this._vx = this._vy = this._vw = this._vh = 0;
                this._framebuffer = null;
                this._enabledAttributes = Array(this._caps.maxVertexAttribs);
                this._newAttributes = Array(this._caps.maxVertexAttribs);
                for (b = 0; b < this._caps.maxVertexAttribs; ++b) this._enabledAttributes[b] = 0, this._newAttributes[b] = 0
            }
            var e = f.prototype;
            e._initExtensions = function(a) {
                for (var b =
                        this._gl, c = 0; c < a.length; ++c)
                    for (var d = a[c], f = ["", "WEBKIT_", "MOZ_"], e = 0; e < f.length; e++) try {
                        var l = b.getExtension(f[e] + d);
                        if (l) {
                            this._extensions[d] = l;
                            break
                        }
                    } catch (F) {
                        console.error(F)
                    }
            };
            e._initCaps = function() {
                var a = this._gl,
                    b = this.ext("WEBGL_draw_buffers");
                this._caps.maxVertexStreams = 4;
                this._caps.maxVertexTextures = a.getParameter(a.MAX_VERTEX_TEXTURE_IMAGE_UNITS);
                this._caps.maxFragUniforms = a.getParameter(a.MAX_FRAGMENT_UNIFORM_VECTORS);
                this._caps.maxTextureUnits = a.getParameter(a.MAX_TEXTURE_IMAGE_UNITS);
                this._caps.maxVertexAttribs = a.getParameter(a.MAX_VERTEX_ATTRIBS);
                this._caps.maxTextureSize = a.getParameter(a.MAX_TEXTURE_SIZE);
                this._caps.maxDrawBuffers = b ? a.getParameter(b.MAX_DRAW_BUFFERS_WEBGL) : 1;
                this._caps.maxColorAttachments = b ? a.getParameter(b.MAX_COLOR_ATTACHMENTS_WEBGL) : 1
            };
            e._initStates = function() {
                var a = this._gl;
                a.disable(a.BLEND);
                a.blendFunc(a.ONE, a.ZERO);
                a.blendEquation(a.FUNC_ADD);
                a.blendColor(1, 1, 1, 1);
                a.colorMask(!0, !0, !0, !0);
                a.enable(a.CULL_FACE);
                a.cullFace(a.BACK);
                a.disable(a.DEPTH_TEST);
                a.depthFunc(a.LESS);
                a.depthMask(!1);
                a.disable(a.POLYGON_OFFSET_FILL);
                a.depthRange(0, 1);
                a.disable(a.STENCIL_TEST);
                a.stencilFunc(a.ALWAYS, 0, 255);
                a.stencilMask(255);
                a.stencilOp(a.KEEP, a.KEEP, a.KEEP);
                a.clearDepth(1);
                a.clearColor(0, 0, 0, 0);
                a.clearStencil(0);
                a.disable(a.SCISSOR_TEST)
            };
            e._restoreTexture = function(a) {
                var b = this._gl;
                (a = this._current.textureUnits[a]) && -1 !== a._glID ? b.bindTexture(a._target, a._glID) : b.bindTexture(b.TEXTURE_2D, null)
            };
            e._restoreIndexBuffer = function() {
                var a = this._gl,
                    b = this._current.indexBuffer;
                b && -1 !== b._glID ? a.bindBuffer(a.ELEMENT_ARRAY_BUFFER, b._glID) : a.bindBuffer(a.ELEMENT_ARRAY_BUFFER, null)
            };
            e.ext = function(a) {
                return this._extensions[a]
            };
            e.allowFloatTexture = function() {
                return null != this.ext("OES_texture_float")
            };
            e.setFrameBuffer = function(a) {
                if (this._framebuffer !== a) {
                    this._framebuffer = a;
                    var b = this._gl;
                    if (a) {
                        b.bindFramebuffer(b.FRAMEBUFFER, a._glID);
                        for (var d = a._colors.length, f = 0; f < d; ++f) c(b, b.COLOR_ATTACHMENT0 + f, a._colors[f]);
                        for (; d < this._caps.maxColorAttachments; ++d) b.framebufferTexture2D(b.FRAMEBUFFER,
                            b.COLOR_ATTACHMENT0 + d, b.TEXTURE_2D, null, 0);
                        a._depth && c(b, b.DEPTH_ATTACHMENT, a._depth);
                        a._stencil && c(b, b.STENCIL_ATTACHMENT, a._stencil);
                        a._depthStencil && c(b, b.DEPTH_STENCIL_ATTACHMENT, a._depthStencil)
                    } else b.bindFramebuffer(b.FRAMEBUFFER, null)
                }
            };
            e.setViewport = function(a, b, c, d) {
                if (this._vx !== a || this._vy !== b || this._vw !== c || this._vh !== d) this._gl.viewport(a, b, c, d), this._vx = a, this._vy = b, this._vw = c, this._vh = d
            };
            e.setScissor = function(a, b, c, d) {
                if (this._sx !== a || this._sy !== b || this._sw !== c || this._sh !== d) this._gl.scissor(a,
                    b, c, d), this._sx = a, this._sy = b, this._sw = c, this._sh = d
            };
            e.clear = function(a) {
                if (void 0 !== a.color || void 0 !== a.depth || void 0 !== a.stencil) {
                    var c = this._gl,
                        d = 0;
                    void 0 !== a.color && (d |= c.COLOR_BUFFER_BIT, c.clearColor(a.color[0], a.color[1], a.color[2], a.color[3]));
                    void 0 !== a.depth && (d |= c.DEPTH_BUFFER_BIT, c.clearDepth(a.depth), c.enable(c.DEPTH_TEST), c.depthMask(!0), c.depthFunc(c.ALWAYS));
                    void 0 !== a.stencil && (d |= c.STENCIL_BUFFER_BIT, c.clearStencil(a.stencil));
                    c.clear(d);
                    void 0 !== a.depth && (!1 === this._current.depthTest ?
                        c.disable(c.DEPTH_TEST) : (!1 === this._current.depthWrite && c.depthMask(!1), this._current.depthFunc !== b.enums.DS_FUNC_ALWAYS && c.depthFunc(this._current.depthFunc)))
                }
            };
            e.enableBlend = function() {
                this._next.blend = !0
            };
            e.enableDepthTest = function() {
                this._next.depthTest = !0
            };
            e.enableDepthWrite = function() {
                this._next.depthWrite = !0
            };
            e.setStencilTest = function(a) {
                this._next.stencilTest = a
            };
            e.setStencilFunc = function(a, b, c) {
                this._next.stencilSep = !1;
                this._next.stencilFuncFront = this._next.stencilFuncBack = a;
                this._next.stencilRefFront =
                    this._next.stencilRefBack = b;
                this._next.stencilMaskFront = this._next.stencilMaskBack = c
            };
            e.setStencilFuncFront = function(a, b, c) {
                this._next.stencilSep = !0;
                this._next.stencilFuncFront = a;
                this._next.stencilRefFront = b;
                this._next.stencilMaskFront = c
            };
            e.setStencilFuncBack = function(a, b, c) {
                this._next.stencilSep = !0;
                this._next.stencilFuncBack = a;
                this._next.stencilRefBack = b;
                this._next.stencilMaskBack = c
            };
            e.setStencilOp = function(a, b, c, d) {
                this._next.stencilFailOpFront = this._next.stencilFailOpBack = a;
                this._next.stencilZFailOpFront =
                    this._next.stencilZFailOpBack = b;
                this._next.stencilZPassOpFront = this._next.stencilZPassOpBack = c;
                this._next.stencilWriteMaskFront = this._next.stencilWriteMaskBack = d
            };
            e.setStencilOpFront = function(a, b, c, d) {
                this._next.stencilSep = !0;
                this._next.stencilFailOpFront = a;
                this._next.stencilZFailOpFront = b;
                this._next.stencilZPassOpFront = c;
                this._next.stencilWriteMaskFront = d
            };
            e.setStencilOpBack = function(a, b, c, d) {
                this._next.stencilSep = !0;
                this._next.stencilFailOpBack = a;
                this._next.stencilZFailOpBack = b;
                this._next.stencilZPassOpBack =
                    c;
                this._next.stencilWriteMaskBack = d
            };
            e.setDepthFunc = function(a) {
                this._next.depthFunc = a
            };
            e.setBlendColor32 = function(a) {
                this._next.blendColor = a
            };
            e.setBlendColor = function(a, b, c, d) {
                this._next.blendColor = (255 * a << 24 | 255 * b << 16 | 255 * c << 8 | 255 * d) >>> 0
            };
            e.setBlendFunc = function(a, b) {
                this._next.blendSep = !1;
                this._next.blendSrc = a;
                this._next.blendDst = b
            };
            e.setBlendFuncSep = function(a, b, c, d) {
                this._next.blendSep = !0;
                this._next.blendSrc = a;
                this._next.blendDst = b;
                this._next.blendSrcAlpha = c;
                this._next.blendDstAlpha = d
            };
            e.setBlendEq =
                function(a) {
                    this._next.blendSep = !1;
                    this._next.blendEq = a
                };
            e.setBlendEqSep = function(a, b) {
                this._next.blendSep = !0;
                this._next.blendEq = a;
                this._next.blendAlphaEq = b
            };
            e.setCullMode = function(a) {
                this._next.cullMode = a
            };
            e.setVertexBuffer = function(a, b, c) {
                void 0 === c && (c = 0);
                this._next.vertexBuffers[a] = b;
                this._next.vertexBufferOffsets[a] = c;
                this._next.maxStream < a && (this._next.maxStream = a)
            };
            e.setIndexBuffer = function(a) {
                this._next.indexBuffer = a
            };
            e.setProgram = function(a) {
                this._next.program = a
            };
            e.setTexture = function(a,
                b, c) {
                c >= this._caps.maxTextureUnits ? console.warn("Can not set texture " + a + " at stage " + c + ", max texture exceed: " + this._caps.maxTextureUnits) : (this._next.textureUnits[c] = b, this.setUniform(a, c), this._next.maxTextureSlot < c && (this._next.maxTextureSlot = c))
            };
            e.setTextureArray = function(a, b, c) {
                var d = b.length;
                if (d >= this._caps.maxTextureUnits) console.warn("Can not set " + d + " textures for " + a + ", max texture exceed: " + this._caps.maxTextureUnits);
                else {
                    for (var f = 0; f < d; ++f) {
                        var e = c[f];
                        this._next.textureUnits[e] =
                            b[f];
                        this._next.maxTextureSlot < e && (this._next.maxTextureSlot = e)
                    }
                    this.setUniform(a, c)
                }
            };
            e.setUniform = function(a, b) {
                var c = this._uniforms[a],
                    d = !1,
                    f = !1,
                    e = !1,
                    l = !1;
                c && (e = Array.isArray(b) || b instanceof Float32Array, l = b instanceof Int32Array, f = e || l, c.isArray === f && (c.isArray && c.value.length !== b.length || (d = !0)));
                if (d) {
                    f = c.value;
                    e = !1;
                    if (c.isArray)
                        for (l = 0, d = f.length; l < d; l++) f[l] !== b[l] && (e = !0, f[l] = b[l]);
                    else f !== b && (e = !0, c.value = b);
                    e && (c.dirty = !0)
                } else c = b, e ? c = new Float32Array(b) : l && (c = new Int32Array(b)), c = {
                    dirty: !0,
                    value: c,
                    isArray: f
                };
                this._uniforms[a] = c
            };
            e.setUniformDirectly = function(a, b) {
                var c = this._uniforms[a];
                c || (this._uniforms[a] = c = {});
                c.dirty = !0;
                c.value = b
            };
            e.setPrimitiveType = function(a) {
                this._next.primitiveType = a
            };
            e.resetDrawCalls = function() {
                this._stats.drawcalls = 0
            };
            e.getDrawCalls = function() {
                return this._stats.drawcalls
            };
            e.draw = function(a, c) {
                var d = this._gl,
                    f = this._current,
                    e = this._next;
                f.blend !== e.blend ? e.blend ? (d.enable(d.BLEND), e.blendSrc !== b.enums.BLEND_CONSTANT_COLOR && e.blendSrc !== b.enums.BLEND_ONE_MINUS_CONSTANT_COLOR &&
                    e.blendDst !== b.enums.BLEND_CONSTANT_COLOR && e.blendDst !== b.enums.BLEND_ONE_MINUS_CONSTANT_COLOR || d.blendColor((e.blendColor >> 24) / 255, (e.blendColor >> 16 & 255) / 255, (e.blendColor >> 8 & 255) / 255, (255 & e.blendColor) / 255), e.blendSep ? (d.blendFuncSeparate(e.blendSrc, e.blendDst, e.blendSrcAlpha, e.blendDstAlpha), d.blendEquationSeparate(e.blendEq, e.blendAlphaEq)) : (d.blendFunc(e.blendSrc, e.blendDst), d.blendEquation(e.blendEq))) : d.disable(d.BLEND) : !1 !== e.blend && (f.blendColor !== e.blendColor && d.blendColor((e.blendColor >>
                    24) / 255, (e.blendColor >> 16 & 255) / 255, (e.blendColor >> 8 & 255) / 255, (255 & e.blendColor) / 255), f.blendSep !== e.blendSep ? e.blendSep ? (d.blendFuncSeparate(e.blendSrc, e.blendDst, e.blendSrcAlpha, e.blendDstAlpha), d.blendEquationSeparate(e.blendEq, e.blendAlphaEq)) : (d.blendFunc(e.blendSrc, e.blendDst), d.blendEquation(e.blendEq)) : e.blendSep ? (f.blendSrc === e.blendSrc && f.blendDst === e.blendDst && f.blendSrcAlpha === e.blendSrcAlpha && f.blendDstAlpha === e.blendDstAlpha || d.blendFuncSeparate(e.blendSrc, e.blendDst, e.blendSrcAlpha,
                    e.blendDstAlpha), f.blendEq === e.blendEq && f.blendAlphaEq === e.blendAlphaEq || d.blendEquationSeparate(e.blendEq, e.blendAlphaEq)) : (f.blendSrc === e.blendSrc && f.blendDst === e.blendDst || d.blendFunc(e.blendSrc, e.blendDst), f.blendEq !== e.blendEq && d.blendEquation(e.blendEq)));
                f.depthTest !== e.depthTest ? e.depthTest ? (d.enable(d.DEPTH_TEST), d.depthFunc(e.depthFunc), d.depthMask(e.depthWrite)) : d.disable(d.DEPTH_TEST) : (f.depthWrite !== e.depthWrite && d.depthMask(e.depthWrite), !1 === e.depthTest ? e.depthWrite && (e.depthTest = !0,
                    e.depthFunc = b.enums.DS_FUNC_ALWAYS, d.enable(d.DEPTH_TEST), d.depthFunc(e.depthFunc)) : f.depthFunc !== e.depthFunc && d.depthFunc(e.depthFunc));
                e.stencilTest !== b.enums.STENCIL_INHERIT && (e.stencilTest !== f.stencilTest ? e.stencilTest === b.enums.STENCIL_DISABLE ? d.disable(d.STENCIL_TEST) : (d.enable(d.STENCIL_TEST), e.stencilSep ? (d.stencilFuncSeparate(d.FRONT, e.stencilFuncFront, e.stencilRefFront, e.stencilMaskFront), d.stencilMaskSeparate(d.FRONT, e.stencilWriteMaskFront), d.stencilOpSeparate(d.FRONT, e.stencilFailOpFront,
                        e.stencilZFailOpFront, e.stencilZPassOpFront), d.stencilFuncSeparate(d.BACK, e.stencilFuncBack, e.stencilRefBack, e.stencilMaskBack), d.stencilMaskSeparate(d.BACK, e.stencilWriteMaskBack), d.stencilOpSeparate(d.BACK, e.stencilFailOpBack, e.stencilZFailOpBack, e.stencilZPassOpBack)) : (d.stencilFunc(e.stencilFuncFront, e.stencilRefFront, e.stencilMaskFront), d.stencilMask(e.stencilWriteMaskFront), d.stencilOp(e.stencilFailOpFront, e.stencilZFailOpFront, e.stencilZPassOpFront))) : e.stencilTest !== b.enums.STENCIL_DISABLE &&
                    (f.stencilSep !== e.stencilSep ? e.stencilSep ? (d.stencilFuncSeparate(d.FRONT, e.stencilFuncFront, e.stencilRefFront, e.stencilMaskFront), d.stencilMaskSeparate(d.FRONT, e.stencilWriteMaskFront), d.stencilOpSeparate(d.FRONT, e.stencilFailOpFront, e.stencilZFailOpFront, e.stencilZPassOpFront), d.stencilFuncSeparate(d.BACK, e.stencilFuncBack, e.stencilRefBack, e.stencilMaskBack), d.stencilMaskSeparate(d.BACK, e.stencilWriteMaskBack), d.stencilOpSeparate(d.BACK, e.stencilFailOpBack, e.stencilZFailOpBack, e.stencilZPassOpBack)) :
                        (d.stencilFunc(e.stencilFuncFront, e.stencilRefFront, e.stencilMaskFront), d.stencilMask(e.stencilWriteMaskFront), d.stencilOp(e.stencilFailOpFront, e.stencilZFailOpFront, e.stencilZPassOpFront)) : e.stencilSep ? (f.stencilFuncFront === e.stencilFuncFront && f.stencilRefFront === e.stencilRefFront && f.stencilMaskFront === e.stencilMaskFront || d.stencilFuncSeparate(d.FRONT, e.stencilFuncFront, e.stencilRefFront, e.stencilMaskFront), f.stencilWriteMaskFront !== e.stencilWriteMaskFront && d.stencilMaskSeparate(d.FRONT, e.stencilWriteMaskFront),
                            f.stencilFailOpFront === e.stencilFailOpFront && f.stencilZFailOpFront === e.stencilZFailOpFront && f.stencilZPassOpFront === e.stencilZPassOpFront || d.stencilOpSeparate(d.FRONT, e.stencilFailOpFront, e.stencilZFailOpFront, e.stencilZPassOpFront), f.stencilFuncBack === e.stencilFuncBack && f.stencilRefBack === e.stencilRefBack && f.stencilMaskBack === e.stencilMaskBack || d.stencilFuncSeparate(d.BACK, e.stencilFuncBack, e.stencilRefBack, e.stencilMaskBack), f.stencilWriteMaskBack !== e.stencilWriteMaskBack && d.stencilMaskSeparate(d.BACK,
                                e.stencilWriteMaskBack), f.stencilFailOpBack === e.stencilFailOpBack && f.stencilZFailOpBack === e.stencilZFailOpBack && f.stencilZPassOpBack === e.stencilZPassOpBack || d.stencilOpSeparate(d.BACK, e.stencilFailOpBack, e.stencilZFailOpBack, e.stencilZPassOpBack)) : (f.stencilFuncFront === e.stencilFuncFront && f.stencilRefFront === e.stencilRefFront && f.stencilMaskFront === e.stencilMaskFront || d.stencilFunc(e.stencilFuncFront, e.stencilRefFront, e.stencilMaskFront), f.stencilWriteMaskFront !== e.stencilWriteMaskFront && d.stencilMask(e.stencilWriteMaskFront),
                            f.stencilFailOpFront === e.stencilFailOpFront && f.stencilZFailOpFront === e.stencilZFailOpFront && f.stencilZPassOpFront === e.stencilZPassOpFront || d.stencilOp(e.stencilFailOpFront, e.stencilZFailOpFront, e.stencilZPassOpFront))));
                f.cullMode !== e.cullMode && (e.cullMode === b.enums.CULL_NONE ? d.disable(d.CULL_FACE) : (d.enable(d.CULL_FACE), d.cullFace(e.cullMode)));
                var l = !1;
                if (-1 !== e.maxStream) {
                    if (f.maxStream !== e.maxStream) l = !0;
                    else if (f.program !== e.program) l = !0;
                    else
                        for (var k = 0; k < e.maxStream + 1; ++k)
                            if (f.vertexBuffers[k] !==
                                e.vertexBuffers[k] || f.vertexBufferOffsets[k] !== e.vertexBufferOffsets[k]) {
                                l = !0;
                                break
                            } if (l) {
                        for (l = 0; l < this._caps.maxVertexAttribs; ++l) this._newAttributes[l] = 0;
                        for (l = 0; l < e.maxStream + 1; ++l) {
                            k = e.vertexBuffers[l];
                            var h = e.vertexBufferOffsets[l];
                            if (k && -1 !== k._glID) {
                                d.bindBuffer(d.ARRAY_BUFFER, k._glID);
                                for (var g = 0; g < e.program._attributes.length; ++g) {
                                    var n = e.program._attributes[g],
                                        t = k._format.element(n.name);
                                    t ? (0 === this._enabledAttributes[n.location] && (d.enableVertexAttribArray(n.location), this._enabledAttributes[n.location] =
                                        1), this._newAttributes[n.location] = 1, d.vertexAttribPointer(n.location, t.num, t.type, t.normalize, t.stride, t.offset + h * t.stride)) : console.warn("Can not find vertex attribute: " + n.name)
                                }
                            }
                        }
                        for (l = 0; l < this._caps.maxVertexAttribs; ++l) this._enabledAttributes[l] !== this._newAttributes[l] && (d.disableVertexAttribArray(l), this._enabledAttributes[l] = 0)
                    }
                }
                f.indexBuffer !== e.indexBuffer && d.bindBuffer(d.ELEMENT_ARRAY_BUFFER, e.indexBuffer && -1 !== e.indexBuffer._glID ? e.indexBuffer._glID : null);
                l = !1;
                f.program !== e.program &&
                    (e.program._linked ? d.useProgram(e.program._glID) : console.warn("Failed to use program: has not linked yet."), l = !0);
                for (k = 0; k < e.maxTextureSlot + 1; ++k) f.textureUnits[k] !== e.textureUnits[k] && (h = e.textureUnits[k]) && -1 !== h._glID && (d.activeTexture(d.TEXTURE0 + k), d.bindTexture(h._target, h._glID));
                for (k = 0; k < e.program._uniforms.length; ++k) h = e.program._uniforms[k], (g = this._uniforms[h.name]) && (l || g.dirty) && (g.dirty = !1, (n = void 0 === h.size ? v[h.type] : p[h.type]) ? n(d, h.location, g.value) : console.warn("Can not find commit function for uniform " +
                    h.name));
                c && (e.indexBuffer ? d.drawElements(this._next.primitiveType, c, e.indexBuffer._format, a * e.indexBuffer._bytesPerIndex) : d.drawArrays(this._next.primitiveType, a, c), this._stats.drawcalls++);
                f.set(e);
                e.reset()
            };
            d(f, [{
                key: "caps",
                get: function() {
                    return this._caps
                }
            }]);
            return f
        }();
        m["default"] = g;
        q.exports = m["default"]
    }, {
        "./enums": 355,
        "./state": 362,
        "./texture-2d": 363,
        "./texture-cube": 364
    }],
    355: [function(g, q, m) {
        m.__esModule = !0;
        m.attrTypeBytes = function(e) {
            if (e === d.ATTR_TYPE_INT8 || e === d.ATTR_TYPE_UINT8) return 1;
            if (e === d.ATTR_TYPE_INT16 || e === d.ATTR_TYPE_UINT16) return 2;
            if (e === d.ATTR_TYPE_INT32 || e === d.ATTR_TYPE_UINT32 || e === d.ATTR_TYPE_FLOAT32) return 4;
            console.warn("Unknown ATTR_TYPE: " + e);
            return 0
        };
        m.enums = void 0;
        m.glFilter = function(d, c, a) {
            void 0 === a && (a = -1);
            var b = h[c][a + 1];
            return void 0 === b ? (console.warn("Unknown FILTER: " + c), -1 === a ? d.LINEAR : d.LINEAR_MIPMAP_LINEAR) : b
        };
        m.glTextureFmt = function(k) {
            var c = e[k];
            return void 0 === c ? (console.warn("Unknown TEXTURE_FMT: " + k), e[d.TEXTURE_FMT_RGBA8]) : c
        };
        var h = [
                [9728, 9984,
                    9986
                ],
                [9729, 9985, 9987]
            ],
            e = [{
                    format: 6407,
                    internalFormat: 33776,
                    pixelType: null
                }, {
                    format: 6408,
                    internalFormat: 33777,
                    pixelType: null
                }, {
                    format: 6408,
                    internalFormat: 33778,
                    pixelType: null
                }, {
                    format: 6408,
                    internalFormat: 33779,
                    pixelType: null
                }, {
                    format: 6407,
                    internalFormat: 36196,
                    pixelType: null
                }, {
                    format: 6407,
                    internalFormat: 35841,
                    pixelType: null
                }, {
                    format: 6408,
                    internalFormat: 35843,
                    pixelType: null
                }, {
                    format: 6407,
                    internalFormat: 35840,
                    pixelType: null
                }, {
                    format: 6408,
                    internalFormat: 35842,
                    pixelType: null
                }, {
                    format: 6406,
                    internalFormat: 6406,
                    pixelType: 5121
                }, {
                    format: 6409,
                    internalFormat: 6409,
                    pixelType: 5121
                }, {
                    format: 6410,
                    internalFormat: 6410,
                    pixelType: 5121
                }, {
                    format: 6407,
                    internalFormat: 6407,
                    pixelType: 33635
                }, {
                    format: 6408,
                    internalFormat: 6408,
                    pixelType: 32820
                }, {
                    format: 6408,
                    internalFormat: 6408,
                    pixelType: 32819
                }, {
                    format: 6407,
                    internalFormat: 6407,
                    pixelType: 5121
                }, {
                    format: 6408,
                    internalFormat: 6408,
                    pixelType: 5121
                }, {
                    format: 6407,
                    internalFormat: 6407,
                    pixelType: 36193
                }, {
                    format: 6408,
                    internalFormat: 6408,
                    pixelType: 36193
                }, {
                    format: 6407,
                    internalFormat: 6407,
                    pixelType: 5126
                },
                {
                    format: 6408,
                    internalFormat: 6408,
                    pixelType: 5126
                }, {
                    format: null,
                    internalFormat: null,
                    pixelType: null
                }, {
                    format: null,
                    internalFormat: null,
                    pixelType: null
                }, {
                    format: null,
                    internalFormat: null,
                    pixelType: null
                }, {
                    format: null,
                    internalFormat: null,
                    pixelType: null
                }, {
                    format: 6402,
                    internalFormat: 6402,
                    pixelType: 5123
                }, {
                    format: 6402,
                    internalFormat: 6402,
                    pixelType: 5125
                }, {
                    format: 6402,
                    internalFormat: 6402,
                    pixelType: 5125
                }, {
                    format: 6407,
                    internalFormat: 37492,
                    pixelType: null
                }, {
                    format: 6408,
                    internalFormat: 37496,
                    pixelType: null
                }, {
                    format: 6408,
                    internalFormat: 37808,
                    pixelType: null
                }, {
                    format: 6408,
                    internalFormat: 37809,
                    pixelType: null
                }, {
                    format: 6408,
                    internalFormat: 37810,
                    pixelType: null
                }, {
                    format: 6408,
                    internalFormat: 37811,
                    pixelType: null
                }, {
                    format: 6408,
                    internalFormat: 37812,
                    pixelType: null
                }, {
                    format: 6408,
                    internalFormat: 37813,
                    pixelType: null
                }, {
                    format: 6408,
                    internalFormat: 37814,
                    pixelType: null
                }, {
                    format: 6408,
                    internalFormat: 37815,
                    pixelType: null
                }, {
                    format: 6408,
                    internalFormat: 37816,
                    pixelType: null
                }, {
                    format: 6408,
                    internalFormat: 37817,
                    pixelType: null
                }, {
                    format: 6408,
                    internalFormat: 37818,
                    pixelType: null
                }, {
                    format: 6408,
                    internalFormat: 37819,
                    pixelType: null
                }, {
                    format: 6408,
                    internalFormat: 37820,
                    pixelType: null
                }, {
                    format: 6408,
                    internalFormat: 37821,
                    pixelType: null
                }, {
                    format: 6408,
                    internalFormat: 37840,
                    pixelType: null
                }, {
                    format: 6408,
                    internalFormat: 37841,
                    pixelType: null
                }, {
                    format: 6408,
                    internalFormat: 37842,
                    pixelType: null
                }, {
                    format: 6408,
                    internalFormat: 37843,
                    pixelType: null
                }, {
                    format: 6408,
                    internalFormat: 37844,
                    pixelType: null
                }, {
                    format: 6408,
                    internalFormat: 37845,
                    pixelType: null
                }, {
                    format: 6408,
                    internalFormat: 37846,
                    pixelType: null
                },
                {
                    format: 6408,
                    internalFormat: 37847,
                    pixelType: null
                }, {
                    format: 6408,
                    internalFormat: 37848,
                    pixelType: null
                }, {
                    format: 6408,
                    internalFormat: 37849,
                    pixelType: null
                }, {
                    format: 6408,
                    internalFormat: 37850,
                    pixelType: null
                }, {
                    format: 6408,
                    internalFormat: 37851,
                    pixelType: null
                }, {
                    format: 6408,
                    internalFormat: 37852,
                    pixelType: null
                }, {
                    format: 6408,
                    internalFormat: 37853,
                    pixelType: null
                }
            ],
            d = {
                USAGE_STATIC: 35044,
                USAGE_DYNAMIC: 35048,
                USAGE_STREAM: 35040,
                INDEX_FMT_UINT8: 5121,
                INDEX_FMT_UINT16: 5123,
                INDEX_FMT_UINT32: 5125,
                ATTR_POSITION: "a_position",
                ATTR_NORMAL: "a_normal",
                ATTR_TANGENT: "a_tangent",
                ATTR_BITANGENT: "a_bitangent",
                ATTR_WEIGHTS: "a_weights",
                ATTR_JOINTS: "a_joints",
                ATTR_COLOR: "a_color",
                ATTR_COLOR0: "a_color0",
                ATTR_COLOR1: "a_color1",
                ATTR_UV: "a_uv",
                ATTR_UV0: "a_uv0",
                ATTR_UV1: "a_uv1",
                ATTR_UV2: "a_uv2",
                ATTR_UV3: "a_uv3",
                ATTR_UV4: "a_uv4",
                ATTR_UV5: "a_uv5",
                ATTR_UV6: "a_uv6",
                ATTR_UV7: "a_uv7",
                ATTR_TEX_COORD: "a_texCoord",
                ATTR_TEX_COORD1: "a_texCoord1",
                ATTR_TEX_COORD2: "a_texCoord2",
                ATTR_TEX_COORD3: "a_texCoord3",
                ATTR_TEX_COORD4: "a_texCoord4",
                ATTR_TEX_COORD5: "a_texCoord5",
                ATTR_TEX_COORD6: "a_texCoord6",
                ATTR_TEX_COORD7: "a_texCoord7",
                ATTR_TEX_COORD8: "a_texCoord8",
                ATTR_TYPE_INT8: 5120,
                ATTR_TYPE_UINT8: 5121,
                ATTR_TYPE_INT16: 5122,
                ATTR_TYPE_UINT16: 5123,
                ATTR_TYPE_INT32: 5124,
                ATTR_TYPE_UINT32: 5125,
                ATTR_TYPE_FLOAT32: 5126,
                FILTER_NEAREST: 0,
                FILTER_LINEAR: 1,
                WRAP_REPEAT: 10497,
                WRAP_CLAMP: 33071,
                WRAP_MIRROR: 33648,
                TEXTURE_FMT_RGB_DXT1: 0,
                TEXTURE_FMT_RGBA_DXT1: 1,
                TEXTURE_FMT_RGBA_DXT3: 2,
                TEXTURE_FMT_RGBA_DXT5: 3,
                TEXTURE_FMT_RGB_ETC1: 4,
                TEXTURE_FMT_RGB_PVRTC_2BPPV1: 5,
                TEXTURE_FMT_RGBA_PVRTC_2BPPV1: 6,
                TEXTURE_FMT_RGB_PVRTC_4BPPV1: 7,
                TEXTURE_FMT_RGBA_PVRTC_4BPPV1: 8,
                TEXTURE_FMT_A8: 9,
                TEXTURE_FMT_L8: 10,
                TEXTURE_FMT_L8_A8: 11,
                TEXTURE_FMT_R5_G6_B5: 12,
                TEXTURE_FMT_R5_G5_B5_A1: 13,
                TEXTURE_FMT_R4_G4_B4_A4: 14,
                TEXTURE_FMT_RGB8: 15,
                TEXTURE_FMT_RGBA8: 16,
                TEXTURE_FMT_RGB16F: 17,
                TEXTURE_FMT_RGBA16F: 18,
                TEXTURE_FMT_RGB32F: 19,
                TEXTURE_FMT_RGBA32F: 20,
                TEXTURE_FMT_R32F: 21,
                TEXTURE_FMT_111110F: 22,
                TEXTURE_FMT_SRGB: 23,
                TEXTURE_FMT_SRGBA: 24,
                TEXTURE_FMT_D16: 25,
                TEXTURE_FMT_D32: 26,
                TEXTURE_FMT_D24S8: 27,
                TEXTURE_FMT_RGB_ETC2: 28,
                TEXTURE_FMT_RGBA_ETC2: 29,
                TEXTURE_FMT_RGBA_ASTC_4X4: 30,
                TEXTURE_FMT_RGBA_ASTC_5X4: 31,
                TEXTURE_FMT_RGBA_ASTC_5X5: 32,
                TEXTURE_FMT_RGBA_ASTC_6X5: 33,
                TEXTURE_FMT_RGBA_ASTC_6X6: 34,
                TEXTURE_FMT_RGBA_ASTC_8X5: 35,
                TEXTURE_FMT_RGBA_ASTC_8X6: 36,
                TEXTURE_FMT_RGBA_ASTC_8X8: 37,
                TEXTURE_FMT_RGBA_ASTC_10X5: 38,
                TEXTURE_FMT_RGBA_ASTC_10X6: 39,
                TEXTURE_FMT_RGBA_ASTC_10X8: 40,
                TEXTURE_FMT_RGBA_ASTC_10X10: 41,
                TEXTURE_FMT_RGBA_ASTC_12X10: 42,
                TEXTURE_FMT_RGBA_ASTC_12X12: 43,
                TEXTURE_FMT_SRGBA_ASTC_4X4: 44,
                TEXTURE_FMT_SRGBA_ASTC_5X4: 45,
                TEXTURE_FMT_SRGBA_ASTC_5X5: 46,
                TEXTURE_FMT_SRGBA_ASTC_6X5: 47,
                TEXTURE_FMT_SRGBA_ASTC_6X6: 48,
                TEXTURE_FMT_SRGBA_ASTC_8X5: 49,
                TEXTURE_FMT_SRGBA_ASTC_8X6: 50,
                TEXTURE_FMT_SRGBA_ASTC_8X8: 51,
                TEXTURE_FMT_SRGBA_ASTC_10X5: 52,
                TEXTURE_FMT_SRGBA_ASTC_10X6: 53,
                TEXTURE_FMT_SRGBA_ASTC_10X8: 54,
                TEXTURE_FMT_SRGBA_ASTC_10X10: 55,
                TEXTURE_FMT_SRGBA_ASTC_12X10: 56,
                TEXTURE_FMT_SRGBA_ASTC_12X12: 57,
                DS_FUNC_NEVER: 512,
                DS_FUNC_LESS: 513,
                DS_FUNC_EQUAL: 514,
                DS_FUNC_LEQUAL: 515,
                DS_FUNC_GREATER: 516,
                DS_FUNC_NOTEQUAL: 517,
                DS_FUNC_GEQUAL: 518,
                DS_FUNC_ALWAYS: 519,
                RB_FMT_RGBA4: 32854,
                RB_FMT_RGB5_A1: 32855,
                RB_FMT_RGB565: 36194,
                RB_FMT_D16: 33189,
                RB_FMT_S8: 36168,
                RB_FMT_D24S8: 34041,
                BLEND_FUNC_ADD: 32774,
                BLEND_FUNC_SUBTRACT: 32778,
                BLEND_FUNC_REVERSE_SUBTRACT: 32779,
                BLEND_ZERO: 0,
                BLEND_ONE: 1,
                BLEND_SRC_COLOR: 768,
                BLEND_ONE_MINUS_SRC_COLOR: 769,
                BLEND_DST_COLOR: 774,
                BLEND_ONE_MINUS_DST_COLOR: 775,
                BLEND_SRC_ALPHA: 770,
                BLEND_ONE_MINUS_SRC_ALPHA: 771,
                BLEND_DST_ALPHA: 772,
                BLEND_ONE_MINUS_DST_ALPHA: 773,
                BLEND_CONSTANT_COLOR: 32769,
                BLEND_ONE_MINUS_CONSTANT_COLOR: 32770,
                BLEND_CONSTANT_ALPHA: 32771,
                BLEND_ONE_MINUS_CONSTANT_ALPHA: 32772,
                BLEND_SRC_ALPHA_SATURATE: 776,
                STENCIL_DISABLE: 0,
                STENCIL_ENABLE: 1,
                STENCIL_INHERIT: 2,
                STENCIL_OP_KEEP: 7680,
                STENCIL_OP_ZERO: 0,
                STENCIL_OP_REPLACE: 7681,
                STENCIL_OP_INCR: 7682,
                STENCIL_OP_INCR_WRAP: 34055,
                STENCIL_OP_DECR: 7683,
                STENCIL_OP_DECR_WRAP: 34056,
                STENCIL_OP_INVERT: 5386,
                CULL_NONE: 0,
                CULL_FRONT: 1028,
                CULL_BACK: 1029,
                CULL_FRONT_AND_BACK: 1032,
                PT_POINTS: 0,
                PT_LINES: 1,
                PT_LINE_LOOP: 2,
                PT_LINE_STRIP: 3,
                PT_TRIANGLES: 4,
                PT_TRIANGLE_STRIP: 5,
                PT_TRIANGLE_FAN: 6
            };
        m.enums = d
    }, {}],
    356: [function(g, q, m) {
            m.__esModule = !0;
            m["default"] =
                void 0;
            g = function() {
                function h(d, e, c, a) {
                    this._device = d;
                    this._width = e;
                    this._height = c;
                    this._colors = a.colors || [];
                    this._depth = a.depth || null;
                    this._stencil = a.stencil || null;
                    this._depthStencil = a.depthStencil || null;
                    this._glID = d._gl.createFramebuffer()
                }
                var e = h.prototype;
                e.destroy = function() {
                    null === this._glID ? console.error("The frame-buffer already destroyed") : (this._device._gl.deleteFramebuffer(this._glID), this._glID = null)
                };
                e.getHandle = function() {
                    return this._glID
                };
                return h
            }();
            m["default"] = g;
            q.exports = m["default"]
        },
        {}
    ],
    357: [function(g, q, m) {
        function h(a, b) {
            for (var c = 0; c < b.length; c++) {
                var f = b[c];
                f.enumerable = f.enumerable || !1;
                f.configurable = !0;
                "value" in f && (f.writable = !0);
                Object.defineProperty(a, d(f.key), f)
            }
        }

        function e(a, b, c) {
            b && h(a.prototype, b);
            c && h(a, c);
            Object.defineProperty(a, "prototype", {
                writable: !1
            });
            return a
        }

        function d(a) {
            a: if ("object" === typeof a && null !== a) {
                $jscomp.initSymbol();
                var b = a[Symbol.toPrimitive];
                if (void 0 !== b) {
                    a = b.call(a, "string");
                    if ("object" !== typeof a) break a;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                a = String(a)
            }return "symbol" === typeof a ? a : String(a)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        g = g("./enums");
        var k, c = (k = {}, k[g.enums.INDEX_FMT_UINT8] = 1, k[g.enums.INDEX_FMT_UINT16] = 2, k[g.enums.INDEX_FMT_UINT32] = 4, k);
        k = function() {
            function a(a, b, d, e) {
                this._device = a;
                this._format = b;
                this._usage = d;
                this._bytesPerIndex = c[b];
                this._bytes = e.byteLength;
                this._numIndices = this._bytes / this._bytesPerIndex;
                this._needExpandDataStore = !0;
                this._glID = a._gl.createBuffer();
                this.update(0, e);
                a._stats.ib += this._bytes
            }
            var b = a.prototype;
            b.destroy = function() {
                -1 === this._glID ? console.error("The buffer already destroyed") : (this._device._gl.deleteBuffer(this._glID), this._device._stats.ib -= this.bytes, this._glID = -1)
            };
            b.update = function(a, b) {
                if (-1 === this._glID) console.error("The buffer is destroyed");
                else if (0 !== b.byteLength) {
                    if (a + b.byteLength > this._bytes) {
                        if (a) {
                            console.error("Failed to update data, bytes exceed.");
                            return
                        }
                        this._needExpandDataStore = !0;
                        this._bytes = a + b.byteLength;
                        this._numIndices = this._bytes / this._bytesPerIndex
                    }
                    var c = this._device._gl,
                        d = this._usage;
                    c.bindBuffer(c.ELEMENT_ARRAY_BUFFER, this._glID);
                    this._needExpandDataStore ? (c.bufferData(c.ELEMENT_ARRAY_BUFFER, b, d), this._needExpandDataStore = !1) : c.bufferSubData(c.ELEMENT_ARRAY_BUFFER, a, b);
                    this._device._restoreIndexBuffer()
                }
            };
            b.setUsage = function(a) {
                this._usage = a
            };
            e(a, [{
                key: "count",
                get: function() {
                    return this._numIndices
                }
            }]);
            return a
        }();
        k.BYTES_PER_INDEX = c;
        m["default"] = k;
        q.exports = m["default"]
    }, {
        "./enums": 355
    }],
    358: [function(g, q, m) {
        m.__esModule = !0;
        m["default"] = void 0;
        var h = g("./enums");
        !1;
        var e = g("./vertex-format");
        var d = g("./index-buffer"),
            k = g("./vertex-buffer"),
            c = g("./program"),
            a = g("./texture"),
            b = g("./texture-2d"),
            l = g("./texture-cube"),
            f = g("./render-buffer"),
            n = g("./frame-buffer");
        g = g("./device");
        e = {
            VertexFormat: e,
            IndexBuffer: d,
            VertexBuffer: k,
            Program: c,
            Texture: a,
            Texture2D: b,
            TextureCube: l,
            RenderBuffer: f,
            FrameBuffer: n,
            Device: g,
            attrTypeBytes: h.attrTypeBytes,
            glFilter: h.glFilter,
            glTextureFmt: h.glTextureFmt
        };
        Object.assign(e, h.enums);
        m["default"] = e;
        cc.gfx = e;
        q.exports = m["default"]
    }, {
        "./device": 354,
        "./enums": 355,
        "./frame-buffer": 356,
        "./index-buffer": 357,
        "./program": 360,
        "./render-buffer": 361,
        "./texture": 365,
        "./texture-2d": 363,
        "./texture-cube": 364,
        "./vertex-buffer": 366,
        "./vertex-format": 367
    }],
    359: [function(g, q, m) {
        m.__esModule = !0;
        m.isPow2 = function(h) {
            return !(h & h - 1) && !!h
        }
    }, {}],
    360: [function(g, q, m) {
        function h(a, c) {
            for (var b = 0; b < c.length; b++) {
                var e = c[b];
                e.enumerable = e.enumerable || !1;
                e.configurable = !0;
                "value" in e && (e.writable = !0);
                Object.defineProperty(a, d(e.key), e)
            }
        }

        function e(a, c, d) {
            c && h(a.prototype,
                c);
            d && h(a, d);
            Object.defineProperty(a, "prototype", {
                writable: !1
            });
            return a
        }

        function d(a) {
            a: if ("object" === typeof a && null !== a) {
                $jscomp.initSymbol();
                var b = a[Symbol.toPrimitive];
                if (void 0 !== b) {
                    a = b.call(a, "string");
                    if ("object" !== typeof a) break a;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                a = String(a)
            }return "symbol" === typeof a ? a : String(a)
        }

        function k(a, c, d) {
            d && d.split("\n").forEach(function(b) {
                if (!(5 > b.length)) {
                    var d = /^ERROR:\s+(\d+):(\d+):\s*(.*)$/.exec(b);
                    d ? a.push({
                        type: c,
                        fileID: 0 |
                            d[1],
                        line: 0 | d[2],
                        message: d[3].trim()
                    }) : 0 < b.length && a.push({
                        type: c,
                        fileID: -1,
                        line: 0,
                        message: b
                    })
                }
            })
        }

        function c(a, c, d) {
            c = a.createShader(c);
            a.shaderSource(c, d);
            a.compileShader(c);
            return c
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var a = 0;
        g = function() {
            function b(b, c) {
                this._device = b;
                this._attributes = [];
                this._uniforms = [];
                this._samplers = [];
                this._errors = [];
                this._linked = !1;
                this._vertSource = c.vert;
                this._fragSource = c.frag;
                this._glID = null;
                this._id = a++
            }
            var d = b.prototype;
            d.link = function() {
                if (!this._linked) {
                    var a = this._device._gl,
                        b = c(a, a.VERTEX_SHADER, this._vertSource),
                        d = c(a, a.FRAGMENT_SHADER, this._fragSource),
                        e = a.createProgram();
                    a.attachShader(e, b);
                    a.attachShader(e, d);
                    a.linkProgram(e);
                    var l = !1,
                        h = this._errors;
                    a.getShaderParameter(b, a.COMPILE_STATUS) || (k(h, "vs", a.getShaderInfoLog(b)), l = !0);
                    a.getShaderParameter(d, a.COMPILE_STATUS) || (k(h, "fs", a.getShaderInfoLog(d)), l = !0);
                    a.deleteShader(b);
                    a.deleteShader(d);
                    if (l) return h;
                    if (!a.getProgramParameter(e, a.LINK_STATUS)) return h.push({
                            info: "Failed to link shader program: " + a.getProgramInfoLog(e)
                        }),
                        h;
                    this._glID = e;
                    b = a.getProgramParameter(e, a.ACTIVE_ATTRIBUTES);
                    for (d = 0; d < b; ++d) l = a.getActiveAttrib(e, d), h = a.getAttribLocation(e, l.name), this._attributes.push({
                        name: l.name,
                        location: h,
                        type: l.type
                    });
                    b = a.getProgramParameter(e, a.ACTIVE_UNIFORMS);
                    for (d = 0; d < b; ++d) {
                        l = a.getActiveUniform(e, d);
                        h = l.name;
                        var g = a.getUniformLocation(e, h),
                            m = "[0]" === h.substr(h.length - 3);
                        m && (h = h.substr(0, h.length - 3));
                        this._uniforms.push({
                            name: h,
                            location: g,
                            type: l.type,
                            size: m ? l.size : void 0
                        })
                    }
                    this._linked = !0
                }
            };
            d.destroy = function() {
                this._device._gl.deleteProgram(this._glID);
                this._linked = !1;
                this._glID = null;
                this._attributes = [];
                this._uniforms = [];
                this._samplers = []
            };
            e(b, [{
                key: "id",
                get: function() {
                    return this._id
                }
            }]);
            return b
        }();
        m["default"] = g;
        q.exports = m["default"]
    }, {}],
    361: [function(g, q, m) {
        m.__esModule = !0;
        m["default"] = void 0;
        g = function() {
            function h(d, e, c, a) {
                this._device = d;
                this._format = e;
                this._glID = d._gl.createRenderbuffer();
                this.update(c, a)
            }
            var e = h.prototype;
            e.update = function(d, e) {
                this._width = d;
                this._height = e;
                var c = this._device._gl;
                c.bindRenderbuffer(c.RENDERBUFFER, this._glID);
                c.renderbufferStorage(c.RENDERBUFFER, this._format, d, e);
                c.bindRenderbuffer(c.RENDERBUFFER, null)
            };
            e.destroy = function() {
                if (null === this._glID) console.error("The render-buffer already destroyed");
                else {
                    var d = this._device._gl;
                    d.bindRenderbuffer(d.RENDERBUFFER, null);
                    d.deleteRenderbuffer(this._glID);
                    this._glID = null
                }
            };
            return h
        }();
        m["default"] = g;
        q.exports = m["default"]
    }, {}],
    362: [function(g, q, m) {
        m.__esModule = !0;
        m["default"] = void 0;
        g = g("./enums");
        var h = {
            blend: !1,
            blendSep: !1,
            blendColor: 4294967295,
            blendEq: g.enums.BLEND_FUNC_ADD,
            blendAlphaEq: g.enums.BLEND_FUNC_ADD,
            blendSrc: g.enums.BLEND_ONE,
            blendDst: g.enums.BLEND_ZERO,
            blendSrcAlpha: g.enums.BLEND_ONE,
            blendDstAlpha: g.enums.BLEND_ZERO,
            depthTest: !1,
            depthWrite: !1,
            depthFunc: g.enums.DS_FUNC_LESS,
            stencilTest: !1,
            stencilSep: !1,
            stencilFuncFront: g.enums.DS_FUNC_ALWAYS,
            stencilRefFront: 0,
            stencilMaskFront: 255,
            stencilFailOpFront: g.enums.STENCIL_OP_KEEP,
            stencilZFailOpFront: g.enums.STENCIL_OP_KEEP,
            stencilZPassOpFront: g.enums.STENCIL_OP_KEEP,
            stencilWriteMaskFront: 255,
            stencilFuncBack: g.enums.DS_FUNC_ALWAYS,
            stencilRefBack: 0,
            stencilMaskBack: 255,
            stencilFailOpBack: g.enums.STENCIL_OP_KEEP,
            stencilZFailOpBack: g.enums.STENCIL_OP_KEEP,
            stencilZPassOpBack: g.enums.STENCIL_OP_KEEP,
            stencilWriteMaskBack: 255,
            cullMode: g.enums.CULL_BACK,
            primitiveType: g.enums.PT_TRIANGLES,
            maxStream: -1,
            vertexBuffers: [],
            vertexBufferOffsets: [],
            indexBuffer: null,
            maxTextureSlot: -1,
            textureUnits: [],
            program: null
        };
        g = function() {
            function e(d) {
                this.vertexBuffers = Array(d._caps.maxVertexStreams);
                this.vertexBufferOffsets = Array(d._caps.maxVertexStreams);
                this.textureUnits = Array(d._caps.maxTextureUnits);
                this.set(h)
            }
            e.initDefault = function(d) {
                h.vertexBuffers = Array(d._caps.maxVertexStreams);
                h.vertexBufferOffsets = Array(d._caps.maxVertexStreams);
                h.textureUnits = Array(d._caps.maxTextureUnits)
            };
            var d = e.prototype;
            d.reset = function() {
                this.set(h)
            };
            d.set = function(d) {
                this.blend = d.blend;
                this.blendSep = d.blendSep;
                this.blendColor = d.blendColor;
                this.blendEq = d.blendEq;
                this.blendAlphaEq = d.blendAlphaEq;
                this.blendSrc = d.blendSrc;
                this.blendDst = d.blendDst;
                this.blendSrcAlpha =
                    d.blendSrcAlpha;
                this.blendDstAlpha = d.blendDstAlpha;
                this.depthTest = d.depthTest;
                this.depthWrite = d.depthWrite;
                this.depthFunc = d.depthFunc;
                this.stencilTest = d.stencilTest;
                this.stencilSep = d.stencilSep;
                this.stencilFuncFront = d.stencilFuncFront;
                this.stencilRefFront = d.stencilRefFront;
                this.stencilMaskFront = d.stencilMaskFront;
                this.stencilFailOpFront = d.stencilFailOpFront;
                this.stencilZFailOpFront = d.stencilZFailOpFront;
                this.stencilZPassOpFront = d.stencilZPassOpFront;
                this.stencilWriteMaskFront = d.stencilWriteMaskFront;
                this.stencilFuncBack = d.stencilFuncBack;
                this.stencilRefBack = d.stencilRefBack;
                this.stencilMaskBack = d.stencilMaskBack;
                this.stencilFailOpBack = d.stencilFailOpBack;
                this.stencilZFailOpBack = d.stencilZFailOpBack;
                this.stencilZPassOpBack = d.stencilZPassOpBack;
                this.stencilWriteMaskBack = d.stencilWriteMaskBack;
                this.cullMode = d.cullMode;
                this.primitiveType = d.primitiveType;
                this.maxStream = d.maxStream;
                for (var c = 0; c < d.vertexBuffers.length; ++c) this.vertexBuffers[c] = d.vertexBuffers[c];
                for (c = 0; c < d.vertexBufferOffsets.length; ++c) this.vertexBufferOffsets[c] =
                    d.vertexBufferOffsets[c];
                this.indexBuffer = d.indexBuffer;
                this.maxTextureSlot = d.maxTextureSlot;
                for (c = 0; c < d.textureUnits.length; ++c) this.textureUnits[c] = d.textureUnits[c];
                this.program = d.program
            };
            return e
        }();
        m["default"] = g;
        q.exports = m["default"]
    }, {
        "./enums": 355
    }],
    363: [function(g, q, m) {
        function h(a, b) {
            a.prototype = Object.create(b.prototype);
            a.prototype.constructor = a;
            e(a, b)
        }

        function e(a, b) {
            e = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(a, b) {
                a.__proto__ = b;
                return a
            };
            return e(a, b)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var d = function(a) {
                return a && a.__esModule ? a : {
                    default: a
                }
            }(g("./texture")),
            k = g("./enums"),
            c = g("./misc");
        g = function(a) {
            function b(b, c) {
                b = a.call(this, b) || this;
                var d = b._device._gl;
                b._target = d.TEXTURE_2D;
                b._glID = d.createTexture();
                c.images = c.images || [null];
                b.update(c);
                return b
            }
            h(b, a);
            var d = b.prototype;
            d.update = function(a) {
                var b = this._device._gl,
                    d = this._genMipmap;
                if (a) {
                    void 0 !== a.width && (this._width = a.width);
                    void 0 !== a.height && (this._height = a.height);
                    void 0 !== a.anisotropy && (this._anisotropy =
                        a.anisotropy);
                    void 0 !== a.minFilter && (this._minFilter = a.minFilter);
                    void 0 !== a.magFilter && (this._magFilter = a.magFilter);
                    void 0 !== a.mipFilter && (this._mipFilter = a.mipFilter);
                    void 0 !== a.wrapS && (this._wrapS = a.wrapS);
                    void 0 !== a.wrapT && (this._wrapT = a.wrapT);
                    void 0 !== a.format && (this._format = a.format, this._compressed = this._format >= k.enums.TEXTURE_FMT_RGB_DXT1 && this._format <= k.enums.TEXTURE_FMT_RGBA_PVRTC_4BPPV1 || this._format >= k.enums.TEXTURE_FMT_RGB_ETC2 && this._format <= k.enums.TEXTURE_FMT_RGBA_ETC2 || this._format >=
                        k.enums.TEXTURE_FMT_RGBA_ASTC_4X4 && this._format <= k.enums.TEXTURE_FMT_SRGBA_ASTC_12X12);
                    void 0 !== a.genMipmaps && (d = this._genMipmap = a.genMipmaps);
                    var f = this._device.caps.maxTextureSize || Number.MAX_VALUE,
                        e = Math.max(a.width || 0, a.height || 0);
                    f < e && console.warn("The current texture size " + e + " exceeds the maximum size [" + f + "] supported on the device.");
                    void 0 !== a.images && 1 < a.images.length && (d = !1, 1 !== (a.width > a.height ? a.width : a.height) >> a.images.length - 1 && console.error("texture-2d mipmap is invalid, should have a 1x1 mipmap."))
                }(0,
                    c.isPow2)(this._width) && (0, c.isPow2)(this._height) || (d = !1);
                b.activeTexture(b.TEXTURE0);
                b.bindTexture(b.TEXTURE_2D, this._glID);
                void 0 !== a.images && 0 < a.images.length && (this._setMipmap(a.images, a.flipY, a.premultiplyAlpha), 1 < a.images.length && (this._genMipmap = !0));
                d && (b.hint(b.GENERATE_MIPMAP_HINT, b.NICEST), b.generateMipmap(b.TEXTURE_2D), this._genMipmap = !0);
                this._setTexInfo();
                this._device._restoreTexture(0)
            };
            d.updateSubImage = function(a) {
                var b = this._device._gl,
                    c = (0, k.glTextureFmt)(this._format);
                b.activeTexture(b.TEXTURE0);
                b.bindTexture(b.TEXTURE_2D, this._glID);
                this._setSubImage(c, a);
                this._device._restoreTexture(0)
            };
            d.updateImage = function(a) {
                var b = this._device._gl,
                    c = (0, k.glTextureFmt)(this._format);
                b.activeTexture(b.TEXTURE0);
                b.bindTexture(b.TEXTURE_2D, this._glID);
                this._setImage(c, a);
                this._device._restoreTexture(0)
            };
            d._setSubImage = function(a, b) {
                var c = this._device._gl,
                    d = b.flipY,
                    f = b.premultiplyAlpha,
                    e = b.image;
                !e || ArrayBuffer.isView(e) || e instanceof ArrayBuffer ? (void 0 === d ? c.pixelStorei(c.UNPACK_FLIP_Y_WEBGL, !1) : c.pixelStorei(c.UNPACK_FLIP_Y_WEBGL,
                    d), void 0 === f ? c.pixelStorei(c.UNPACK_PREMULTIPLY_ALPHA_WEBGL, !1) : c.pixelStorei(c.UNPACK_PREMULTIPLY_ALPHA_WEBGL, f), this._compressed ? c.compressedTexSubImage2D(c.TEXTURE_2D, b.level, b.x, b.y, b.width, b.height, a.format, e) : c.texSubImage2D(c.TEXTURE_2D, b.level, b.x, b.y, b.width, b.height, a.format, a.pixelType, e)) : (void 0 === d ? c.pixelStorei(c.UNPACK_FLIP_Y_WEBGL, !0) : c.pixelStorei(c.UNPACK_FLIP_Y_WEBGL, d), void 0 === f ? c.pixelStorei(c.UNPACK_PREMULTIPLY_ALPHA_WEBGL, !1) : c.pixelStorei(c.UNPACK_PREMULTIPLY_ALPHA_WEBGL,
                    f), c.texSubImage2D(c.TEXTURE_2D, b.level, b.x, b.y, a.format, a.pixelType, e))
            };
            d._setImage = function(a, b) {
                var c = this._device._gl,
                    d = b.flipY,
                    f = b.premultiplyAlpha,
                    e = b.image;
                !e || ArrayBuffer.isView(e) || e instanceof ArrayBuffer ? (void 0 === d ? c.pixelStorei(c.UNPACK_FLIP_Y_WEBGL, !1) : c.pixelStorei(c.UNPACK_FLIP_Y_WEBGL, d), void 0 === f ? c.pixelStorei(c.UNPACK_PREMULTIPLY_ALPHA_WEBGL, !1) : c.pixelStorei(c.UNPACK_PREMULTIPLY_ALPHA_WEBGL, f), this._compressed ? c.compressedTexImage2D(c.TEXTURE_2D, b.level, a.internalFormat, b.width,
                    b.height, 0, e) : c.texImage2D(c.TEXTURE_2D, b.level, a.internalFormat, b.width, b.height, 0, a.format, a.pixelType, e)) : (void 0 === d ? c.pixelStorei(c.UNPACK_FLIP_Y_WEBGL, !0) : c.pixelStorei(c.UNPACK_FLIP_Y_WEBGL, d), void 0 === f ? c.pixelStorei(c.UNPACK_PREMULTIPLY_ALPHA_WEBGL, !1) : c.pixelStorei(c.UNPACK_PREMULTIPLY_ALPHA_WEBGL, f), c.texImage2D(c.TEXTURE_2D, b.level, a.internalFormat, a.format, a.pixelType, e))
            };
            d._setMipmap = function(a, b, c) {
                var d = (0, k.glTextureFmt)(this._format);
                b = {
                    width: this._width,
                    height: this._height,
                    flipY: b,
                    premultiplyAlpha: c,
                    level: 0,
                    image: null
                };
                for (c = 0; c < a.length; ++c) b.level = c, b.width = this._width >> c, b.height = this._height >> c, b.image = a[c], this._setImage(d, b)
            };
            d._setTexInfo = function() {
                var a = this._device._gl,
                    b = (0, c.isPow2)(this._width) && (0, c.isPow2)(this._height);
                b || this._wrapS === k.enums.WRAP_CLAMP && this._wrapT === k.enums.WRAP_CLAMP || (console.warn("WebGL1 doesn't support all wrap modes with NPOT textures"), this._wrapT = this._wrapS = k.enums.WRAP_CLAMP);
                var d = this._genMipmap ? this._mipFilter : -1;
                b || -1 === d || (console.warn("NPOT textures do not support mipmap filter"),
                    d = -1);
                a.texParameteri(a.TEXTURE_2D, a.TEXTURE_MIN_FILTER, (0, k.glFilter)(a, this._minFilter, d));
                a.texParameteri(a.TEXTURE_2D, a.TEXTURE_MAG_FILTER, (0, k.glFilter)(a, this._magFilter, -1));
                a.texParameteri(a.TEXTURE_2D, a.TEXTURE_WRAP_S, this._wrapS);
                a.texParameteri(a.TEXTURE_2D, a.TEXTURE_WRAP_T, this._wrapT);
                (b = this._device.ext("EXT_texture_filter_anisotropic")) && a.texParameteri(a.TEXTURE_2D, b.TEXTURE_MAX_ANISOTROPY_EXT, this._anisotropy)
            };
            return b
        }(d["default"]);
        m["default"] = g;
        q.exports = m["default"]
    }, {
        "./enums": 355,
        "./misc": 359,
        "./texture": 365
    }],
    364: [function(g, q, m) {
        function h(a, b) {
            a.prototype = Object.create(b.prototype);
            a.prototype.constructor = a;
            e(a, b)
        }

        function e(a, b) {
            e = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(a, b) {
                a.__proto__ = b;
                return a
            };
            return e(a, b)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var d = function(a) {
                return a && a.__esModule ? a : {
                    default: a
                }
            }(g("./texture")),
            k = g("./enums"),
            c = g("./misc");
        g = function(a) {
            function b(b, c) {
                b = a.call(this, b) || this;
                var d = b._device._gl;
                b._target = d.TEXTURE_CUBE_MAP;
                b._glID =
                    d.createTexture();
                b.update(c);
                return b
            }
            h(b, a);
            var d = b.prototype;
            d.update = function(a) {
                var b = this._device._gl,
                    d = this._genMipmaps;
                a && (void 0 !== a.width && (this._width = a.width), void 0 !== a.height && (this._height = a.height), void 0 !== a.anisotropy && (this._anisotropy = a.anisotropy), void 0 !== a.minFilter && (this._minFilter = a.minFilter), void 0 !== a.magFilter && (this._magFilter = a.magFilter), void 0 !== a.mipFilter && (this._mipFilter = a.mipFilter), void 0 !== a.wrapS && (this._wrapS = a.wrapS), void 0 !== a.wrapT && (this._wrapT = a.wrapT),
                    void 0 !== a.format && (this._format = a.format, this._compressed = this._format >= k.enums.TEXTURE_FMT_RGB_DXT1 && this._format <= k.enums.TEXTURE_FMT_RGBA_PVRTC_4BPPV1 || this._format >= k.enums.TEXTURE_FMT_RGB_ETC2 && this._format <= k.enums.TEXTURE_FMT_RGBA_ETC2 || this._format >= k.enums.TEXTURE_FMT_RGBA_ASTC_4X4 && this._format <= k.enums.TEXTURE_FMT_SRGBA_ASTC_12X12), void 0 !== a.genMipmaps && (d = this._genMipmaps = a.genMipmaps), void 0 !== a.images && 1 < a.images.length && (d = !1, a.width !== a.height && console.warn("texture-cube width and height should be identical."),
                        1 !== a.width >> a.images.length - 1 && console.error("texture-cube mipmap is invalid. please set mipmap as 1x1, 2x2, 4x4 ... nxn")));
                (0, c.isPow2)(this._width) && (0, c.isPow2)(this._height) || (d = !1);
                b.activeTexture(b.TEXTURE0);
                b.bindTexture(b.TEXTURE_CUBE_MAP, this._glID);
                void 0 !== a.images && 0 < a.images.length && (this._setMipmap(a.images, a.flipY, a.premultiplyAlpha), 1 < a.images.length && (this._genMipmaps = !0));
                d && (b.hint(b.GENERATE_MIPMAP_HINT, b.NICEST), b.generateMipmap(b.TEXTURE_CUBE_MAP), this._genMipmaps = !0);
                this._setTexInfo();
                this._device._restoreTexture(0)
            };
            d.updateSubImage = function(a) {
                var b = this._device._gl,
                    c = (0, k.glTextureFmt)(this._format);
                b.activeTexture(b.TEXTURE0);
                b.bindTexture(b.TEXTURE_CUBE_MAP, this._glID);
                this._setSubImage(c, a);
                this._device._restoreTexture(0)
            };
            d.updateImage = function(a) {
                var b = this._device._gl,
                    c = (0, k.glTextureFmt)(this._format);
                b.activeTexture(b.TEXTURE0);
                b.bindTexture(b.TEXTURE_CUBE_MAP, this._glID);
                this._setImage(c, a);
                this._device._restoreTexture(0)
            };
            d._setSubImage = function(a, b) {
                var c = this._device._gl,
                    d = b.flipY,
                    f = b.premultiplyAlpha,
                    e = b.faceIndex,
                    l = b.image;
                void 0 === d ? c.pixelStorei(c.UNPACK_FLIP_Y_WEBGL, !1) : c.pixelStorei(c.UNPACK_FLIP_Y_WEBGL, d);
                void 0 === f ? c.pixelStorei(c.UNPACK_PREMULTIPLY_ALPHA_WEBGL, !1) : c.pixelStorei(c.UNPACK_PREMULTIPLY_ALPHA_WEBGL, f);
                !l || ArrayBuffer.isView(l) || l instanceof ArrayBuffer ? this._compressed ? c.compressedTexSubImage2D(c.TEXTURE_CUBE_MAP_POSITIVE_X + e, b.level, b.x, b.y, b.width, b.height, a.format, l) : c.texSubImage2D(c.TEXTURE_CUBE_MAP_POSITIVE_X + e, b.level, b.x, b.y, b.width,
                    b.height, a.format, a.pixelType, l) : c.texSubImage2D(c.TEXTURE_CUBE_MAP_POSITIVE_X + e, b.level, b.x, b.y, a.format, a.pixelType, l)
            };
            d._setImage = function(a, b) {
                var c = this._device._gl,
                    d = b.flipY,
                    f = b.premultiplyAlpha,
                    e = b.faceIndex,
                    l = b.image;
                void 0 === d ? c.pixelStorei(c.UNPACK_FLIP_Y_WEBGL, !1) : c.pixelStorei(c.UNPACK_FLIP_Y_WEBGL, d);
                void 0 === f ? c.pixelStorei(c.UNPACK_PREMULTIPLY_ALPHA_WEBGL, !1) : c.pixelStorei(c.UNPACK_PREMULTIPLY_ALPHA_WEBGL, f);
                !l || ArrayBuffer.isView(l) || l instanceof ArrayBuffer ? this._compressed ? c.compressedTexImage2D(c.TEXTURE_CUBE_MAP_POSITIVE_X +
                    e, b.level, a.internalFormat, b.width, b.height, 0, l) : c.texImage2D(c.TEXTURE_CUBE_MAP_POSITIVE_X + e, b.level, a.internalFormat, b.width, b.height, 0, a.format, a.pixelType, l) : c.texImage2D(c.TEXTURE_CUBE_MAP_POSITIVE_X + e, b.level, a.internalFormat, a.format, a.pixelType, l)
            };
            d._setMipmap = function(a, b, c) {
                var d = (0, k.glTextureFmt)(this._format);
                b = {
                    width: this._width,
                    height: this._height,
                    faceIndex: 0,
                    flipY: b,
                    premultiplyAlpha: c,
                    level: 0,
                    image: null
                };
                for (c = 0; c < a.length; ++c) {
                    var f = a[c];
                    b.level = c;
                    b.width = this._width >> c;
                    b.height =
                        this._height >> c;
                    for (var e = 0; 6 > e; ++e) b.faceIndex = e, b.image = f[e], this._setImage(d, b)
                }
            };
            d._setTexInfo = function() {
                var a = this._device._gl,
                    b = (0, c.isPow2)(this._width) && (0, c.isPow2)(this._height);
                b || this._wrapS === k.enums.WRAP_CLAMP && this._wrapT === k.enums.WRAP_CLAMP || (console.warn("WebGL1 doesn't support all wrap modes with NPOT textures"), this._wrapT = this._wrapS = k.enums.WRAP_CLAMP);
                var d = this._genMipmaps ? this._mipFilter : -1;
                b || -1 === d || (console.warn("NPOT textures do not support mipmap filter"), d = -1);
                a.texParameteri(a.TEXTURE_CUBE_MAP,
                    a.TEXTURE_MIN_FILTER, (0, k.glFilter)(a, this._minFilter, d));
                a.texParameteri(a.TEXTURE_CUBE_MAP, a.TEXTURE_MAG_FILTER, (0, k.glFilter)(a, this._magFilter, -1));
                a.texParameteri(a.TEXTURE_CUBE_MAP, a.TEXTURE_WRAP_S, this._wrapS);
                a.texParameteri(a.TEXTURE_CUBE_MAP, a.TEXTURE_WRAP_T, this._wrapT);
                (b = this._device.ext("EXT_texture_filter_anisotropic")) && a.texParameteri(a.TEXTURE_CUBE_MAP, b.TEXTURE_MAX_ANISOTROPY_EXT, this._anisotropy)
            };
            return b
        }(d["default"]);
        m["default"] = g;
        q.exports = m["default"]
    }, {
        "./enums": 355,
        "./misc": 359,
        "./texture": 365
    }],
    365: [function(g, q, m) {
        m.__esModule = !0;
        m["default"] = void 0;
        var h = g("./enums"),
            e = 0;
        g = function() {
            function d(d) {
                this._device = d;
                this._height = this._width = 4;
                this._compressed = this._genMipmaps = !1;
                this._anisotropy = 1;
                this._mipFilter = this._magFilter = this._minFilter = h.enums.FILTER_LINEAR;
                this._wrapT = this._wrapS = h.enums.WRAP_REPEAT;
                this._format = h.enums.TEXTURE_FMT_RGBA8;
                this._target = -1;
                this._id = e++
            }
            d.prototype.destroy = function() {
                null === this._glID ? console.error("The texture already destroyed") :
                    (this._device._gl.deleteTexture(this._glID), this._device._stats.tex -= this.bytes, this._glID = null)
            };
            return d
        }();
        m["default"] = g;
        q.exports = m["default"]
    }, {
        "./enums": 355
    }],
    366: [function(g, q, m) {
        function h(e, c) {
            for (var a = 0; a < c.length; a++) {
                var b = c[a];
                b.enumerable = b.enumerable || !1;
                b.configurable = !0;
                "value" in b && (b.writable = !0);
                Object.defineProperty(e, d(b.key), b)
            }
        }

        function e(d, c, a) {
            c && h(d.prototype, c);
            a && h(d, a);
            Object.defineProperty(d, "prototype", {
                writable: !1
            });
            return d
        }

        function d(d) {
            a: if ("object" === typeof d &&
                null !== d) {
                $jscomp.initSymbol();
                var c = d[Symbol.toPrimitive];
                if (void 0 !== c) {
                    d = c.call(d, "string");
                    if ("object" !== typeof d) break a;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                d = String(d)
            }return "symbol" === typeof d ? d : String(d)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        g("./enums");
        g = function() {
            function d(a, b, c, d) {
                this._device = a;
                this._format = b;
                this._usage = c;
                this._bytesPerVertex = this._format._bytes;
                this._bytes = d.byteLength;
                this._numVertices = this._bytes / this._bytesPerVertex;
                this._needExpandDataStore = !0;
                this._glID = a._gl.createBuffer();
                this.update(0, d);
                a._stats.vb += this._bytes
            }
            var c = d.prototype;
            c.destroy = function() {
                -1 === this._glID ? console.error("The buffer already destroyed") : (this._device._gl.deleteBuffer(this._glID), this._device._stats.vb -= this.bytes, this._glID = -1)
            };
            c.update = function(a, b) {
                if (-1 === this._glID) console.error("The buffer is destroyed");
                else if (0 !== b.byteLength) {
                    if (a + b.byteLength > this._bytes) {
                        if (a) {
                            console.error("Failed to update data, bytes exceed.");
                            return
                        }
                        this._needExpandDataStore = !0;
                        this._bytes = a + b.byteLength;
                        this._numVertices = this._bytes / this._bytesPerVertex
                    }
                    var c = this._device._gl,
                        d = this._usage;
                    c.bindBuffer(c.ARRAY_BUFFER, this._glID);
                    this._needExpandDataStore ? (c.bufferData(c.ARRAY_BUFFER, b, d), this._needExpandDataStore = !1) : c.bufferSubData(c.ARRAY_BUFFER, a, b);
                    c.bindBuffer(c.ARRAY_BUFFER, null)
                }
            };
            c.getFormat = function(a) {
                return this._format.element(a)
            };
            c.setUsage = function(a) {
                this._usage = a
            };
            e(d, [{
                key: "count",
                get: function() {
                    return this._numVertices
                }
            }]);
            return d
        }();
        m["default"] =
            g;
        q.exports = m["default"]
    }, {
        "./enums": 355
    }],
    367: [function(g, q, m) {
        m.__esModule = !0;
        m["default"] = void 0;
        var h = g("./enums"),
            e = function(d) {
                return d && d.__esModule ? d : {
                    default: d
                }
            }(g("../murmurhash2_gc"));
        g = function() {
            function d(c) {
                this._attr2el = {};
                this._elements = [];
                this._bytes = 0;
                for (var a = "", b = 0, d = c.length; b < d; ++b) {
                    var f = c[b];
                    f = {
                        name: f.name,
                        offset: this._bytes,
                        stride: 0,
                        stream: -1,
                        type: f.type,
                        num: f.num,
                        normalize: void 0 !== f.normalize && f.normalize,
                        bytes: f.num * (0, h.attrTypeBytes)(f.type)
                    };
                    this._attr2el[f.name] =
                        f;
                    this._elements.push(f);
                    this._bytes += f.bytes;
                    a += f.name + ":" + f.num + ":" + f.type + ":" + f.normalize
                }
                c = 0;
                for (b = this._elements.length; c < b; ++c) this._elements[c].stride = this._bytes;
                this._hash = (0, e["default"])(a, 666)
            }
            var k = d.prototype;
            k.element = function(c) {
                return this._attr2el[c]
            };
            k.getHash = function() {
                return this._hash
            };
            return d
        }();
        m["default"] = g;
        q.exports = m["default"]
    }, {
        "../murmurhash2_gc": 376,
        "./enums": 355
    }],
    368: [function(g, q, m) {
        m.__esModule = !0;
        m["default"] = void 0;
        g = function() {
            function h(e, d) {
                this._cursor =
                    0;
                this._data = Array(d);
                for (var k = 0; k < d; ++k) this._data[k] = e()
            }
            h.prototype.request = function() {
                var e = this._data[this._cursor];
                this._cursor = (this._cursor + 1) % this._data.length;
                return e
            };
            return h
        }();
        m["default"] = g;
        q.exports = m["default"]
    }, {}],
    369: [function(g, q, m) {
        function h(c, a) {
            for (var b = 0; b < a.length; b++) {
                var e = a[b];
                e.enumerable = e.enumerable || !1;
                e.configurable = !0;
                "value" in e && (e.writable = !0);
                Object.defineProperty(c, d(e.key), e)
            }
        }

        function e(c, a, b) {
            a && h(c.prototype, a);
            b && h(c, b);
            Object.defineProperty(c, "prototype", {
                writable: !1
            });
            return c
        }

        function d(c) {
            a: if ("object" === typeof c && null !== c) {
                $jscomp.initSymbol();
                var a = c[Symbol.toPrimitive];
                if (void 0 !== a) {
                    c = a.call(c, "string");
                    if ("object" !== typeof c) break a;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                c = String(c)
            }return "symbol" === typeof c ? c : String(c)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var k = function(c) {
            return c && c.__esModule ? c : {
                default: c
            }
        }(g("./timsort"));
        g = function() {
            function c(a) {
                this._count = 0;
                this._data = Array(a)
            }
            var a = c.prototype;
            a._resize =
                function(a) {
                    if (a > this._data.length)
                        for (var b = this._data.length; b < a; ++b) this._data[b] = void 0
                };
            a.reset = function() {
                for (var a = 0; a < this._count; ++a) this._data[a] = void 0;
                this._count = 0
            };
            a.push = function(a) {
                this._count >= this._data.length && this._resize(2 * this._data.length);
                this._data[this._count] = a;
                ++this._count
            };
            a.pop = function() {
                --this._count;
                0 > this._count && (this._count = 0);
                var a = this._data[this._count];
                this._data[this._count] = void 0;
                return a
            };
            a.fastRemove = function(a) {
                if (!(a >= this._count || 0 > a)) {
                    var b = this._count -
                        1;
                    this._data[a] = this._data[b];
                    this._data[b] = void 0;
                    --this._count
                }
            };
            a.indexOf = function(a) {
                return this._data.indexOf(a)
            };
            a.sort = function(a) {
                return (0, k["default"])(this._data, 0, this._count, a)
            };
            e(c, [{
                key: "length",
                get: function() {
                    return this._count
                }
            }, {
                key: "data",
                get: function() {
                    return this._data
                }
            }]);
            return c
        }();
        m["default"] = g;
        q.exports = m["default"]
    }, {
        "./timsort": 374
    }],
    370: [function(g, q, m) {
        function h(e) {
            return e && e.__esModule ? e : {
                default: e
            }
        }
        m.__esModule = !0;
        m.TypedArrayPool = m.RecyclePool = m.Pool = m.LinkedArray =
            m.FixedArray = m.CircularPool = void 0;
        q = h(g("./circular-pool"));
        m.CircularPool = q["default"];
        q = h(g("./fixed-array"));
        m.FixedArray = q["default"];
        q = h(g("./linked-array"));
        m.LinkedArray = q["default"];
        q = h(g("./pool"));
        m.Pool = q["default"];
        q = h(g("./recycle-pool"));
        m.RecyclePool = q["default"];
        g = h(g("./typed-array-pool"));
        m.TypedArrayPool = g["default"]
    }, {
        "./circular-pool": 368,
        "./fixed-array": 369,
        "./linked-array": 371,
        "./pool": 372,
        "./recycle-pool": 373,
        "./typed-array-pool": 375
    }],
    371: [function(g, q, m) {
        function h(c, a) {
            for (var b =
                    0; b < a.length; b++) {
                var e = a[b];
                e.enumerable = e.enumerable || !1;
                e.configurable = !0;
                "value" in e && (e.writable = !0);
                Object.defineProperty(c, d(e.key), e)
            }
        }

        function e(c, a, b) {
            a && h(c.prototype, a);
            b && h(c, b);
            Object.defineProperty(c, "prototype", {
                writable: !1
            });
            return c
        }

        function d(c) {
            a: if ("object" === typeof c && null !== c) {
                $jscomp.initSymbol();
                var a = c[Symbol.toPrimitive];
                if (void 0 !== a) {
                    c = a.call(c, "string");
                    if ("object" !== typeof c) break a;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                c = String(c)
            }return "symbol" ===
                typeof c ? c : String(c)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var k = function(c) {
            return c && c.__esModule ? c : {
                default: c
            }
        }(g("./pool"));
        g = function() {
            function c(a, c) {
                this._fn = a;
                this._count = 0;
                this._tail = this._head = null;
                this._pool = new k["default"](a, c)
            }
            var a = c.prototype;
            a.add = function() {
                var a = this._pool.alloc();
                this._tail ? (this._tail._next = a, a._prev = this._tail) : this._head = a;
                this._tail = a;
                this._count += 1;
                return a
            };
            a.remove = function(a) {
                a._prev ? a._prev._next = a._next : this._head = a._next;
                a._next ? a._next._prev = a._prev :
                    this._tail = a._prev;
                a._next = null;
                a._prev = null;
                this._pool.free(a);
                --this._count
            };
            a.forEach = function(a, c) {
                var b = this._head;
                if (b) {
                    c && (a = a.bind(c));
                    c = 0;
                    for (var d; b;) d = b._next, a(b, c, this), b = d, ++c
                }
            };
            e(c, [{
                key: "head",
                get: function() {
                    return this._head
                }
            }, {
                key: "tail",
                get: function() {
                    return this._tail
                }
            }, {
                key: "length",
                get: function() {
                    return this._count
                }
            }]);
            return c
        }();
        m["default"] = g;
        q.exports = m["default"]
    }, {
        "./pool": 372
    }],
    372: [function(g, q, m) {
        m.__esModule = !0;
        m["default"] = void 0;
        g = function() {
            function h(d, e) {
                this._fn =
                    d;
                this._idx = e - 1;
                this._frees = Array(e);
                for (var c = 0; c < e; ++c) this._frees[c] = d()
            }
            var e = h.prototype;
            e._expand = function(d) {
                var e = this._frees;
                this._frees = Array(d);
                for (var c = d - e.length, a = 0; a < c; ++a) this._frees[a] = this._fn();
                a = c;
                for (var b = 0; a < d; ++a, ++b) this._frees[a] = e[b];
                this._idx += c
            };
            e.alloc = function() {
                0 > this._idx && this._expand(Math.round(1.2 * this._frees.length) + 1);
                var d = this._frees[this._idx];
                this._frees[this._idx] = null;
                --this._idx;
                return d
            };
            e.free = function(d) {
                ++this._idx;
                this._frees[this._idx] = d
            };
            e.clear =
                function(d) {
                    for (var e = 0; e <= this._idx; e++) d && d(this._frees[e]);
                    this._frees.length = 0;
                    this._idx = -1
                };
            return h
        }();
        m["default"] = g;
        q.exports = m["default"]
    }, {}],
    373: [function(g, q, m) {
        function h(c, a) {
            for (var b = 0; b < a.length; b++) {
                var e = a[b];
                e.enumerable = e.enumerable || !1;
                e.configurable = !0;
                "value" in e && (e.writable = !0);
                Object.defineProperty(c, d(e.key), e)
            }
        }

        function e(c, a, b) {
            a && h(c.prototype, a);
            b && h(c, b);
            Object.defineProperty(c, "prototype", {
                writable: !1
            });
            return c
        }

        function d(c) {
            a: if ("object" === typeof c && null !== c) {
                $jscomp.initSymbol();
                var a = c[Symbol.toPrimitive];
                if (void 0 !== a) {
                    c = a.call(c, "string");
                    if ("object" !== typeof c) break a;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                c = String(c)
            }return "symbol" === typeof c ? c : String(c)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var k = function(c) {
            return c && c.__esModule ? c : {
                default: c
            }
        }(g("./timsort"));
        g = function() {
            function c(a, c) {
                this._fn = a;
                this._count = 0;
                this._data = Array(c);
                for (var b = 0; b < c; ++b) this._data[b] = a()
            }
            var a = c.prototype;
            a.reset = function() {
                this._count = 0
            };
            a.resize = function(a) {
                if (a >
                    this._data.length)
                    for (var b = this._data.length; b < a; ++b) this._data[b] = this._fn()
            };
            a.add = function() {
                this._count >= this._data.length && this.resize(2 * this._data.length);
                return this._data[this._count++]
            };
            a.remove = function(a) {
                if (!(a >= this._count)) {
                    var b = this._count - 1,
                        c = this._data[a];
                    this._data[a] = this._data[b];
                    this._data[b] = c;
                    --this._count
                }
            };
            a.sort = function(a) {
                return (0, k["default"])(this._data, 0, this._count, a)
            };
            e(c, [{
                key: "length",
                get: function() {
                    return this._count
                }
            }, {
                key: "data",
                get: function() {
                    return this._data
                }
            }]);
            return c
        }();
        m["default"] = g;
        cc.RecyclePool = g;
        q.exports = m["default"]
    }, {
        "./timsort": 374
    }],
    374: [function(g, q, m) {
        function h(a) {
            return 1E5 > a ? 100 > a ? 10 > a ? 0 : 1 : 1E4 > a ? 1E3 > a ? 2 : 3 : 4 : 1E7 > a ? 1E6 > a ? 5 : 6 : 1E9 > a ? 1E8 > a ? 7 : 8 : 9
        }

        function e(a, b) {
            if (a === b) return 0;
            if (~~a === a && ~~b === b) {
                if (0 === a || 0 === b) return a < b ? -1 : 1;
                if (0 > a || 0 > b) {
                    if (0 <= b) return -1;
                    if (0 <= a) return 1;
                    a = -a;
                    b = -b
                }
                var c = h(a),
                    d = h(b),
                    f = 0;
                c < d ? (a *= l[d - c - 1], b /= 10, f = -1) : c > d && (b *= l[c - d - 1], a /= 10, f = 1);
                return a === b ? f : a < b ? -1 : 1
            }
            a = String(a);
            b = String(b);
            return a === b ? 0 : a < b ? -1 : 1
        }

        function d(a,
            b, c, d) {
            var f = b + 1;
            if (f === c) return 1;
            if (0 > d(a[f++], a[b])) {
                for (; f < c && 0 > d(a[f], a[f - 1]);) f++;
                c = b;
                d = f;
                for (d--; c < d;) {
                    var e = a[c];
                    a[c++] = a[d];
                    a[d--] = e
                }
            } else
                for (; f < c && 0 <= d(a[f], a[f - 1]);) f++;
            return f - b
        }

        function k(a, b, c, d, f) {
            for (d === b && d++; d < c; d++) {
                for (var e = a[d], l = b, k = d; l < k;) {
                    var h = l + k >>> 1;
                    0 > f(e, a[h]) ? k = h : l = h + 1
                }
                k = d - l;
                switch (k) {
                    case 3:
                        a[l + 3] = a[l + 2];
                    case 2:
                        a[l + 2] = a[l + 1];
                    case 1:
                        a[l + 1] = a[l];
                        break;
                    default:
                        for (; 0 < k;) a[l + k] = a[l + k - 1], k--
                }
                a[l] = e
            }
        }

        function c(a, b, c, d, f, e) {
            var l = 0,
                k = 1;
            if (0 < e(a, b[c + f])) {
                for (d -= f; k < d && 0 <
                    e(a, b[c + f + k]);) l = k, k = 1 + (k << 1), 0 >= k && (k = d);
                k > d && (k = d);
                l += f;
                k += f
            } else {
                for (d = f + 1; k < d && 0 >= e(a, b[c + f - k]);) l = k, k = 1 + (k << 1), 0 >= k && (k = d);
                k > d && (k = d);
                d = l;
                l = f - k;
                k = f - d
            }
            for (l++; l < k;) f = l + (k - l >>> 1), 0 < e(a, b[c + f]) ? l = f + 1 : k = f;
            return k
        }

        function a(a, b, c, d, f, e) {
            var l = 0,
                k = 1;
            if (0 > e(a, b[c + f])) {
                for (d = f + 1; k < d && 0 > e(a, b[c + f - k]);) l = k, k = 1 + (k << 1), 0 >= k && (k = d);
                k > d && (k = d);
                d = l;
                l = f - k;
                k = f - d
            } else {
                for (d -= f; k < d && 0 <= e(a, b[c + f + k]);) l = k, k = 1 + (k << 1), 0 >= k && (k = d);
                k > d && (k = d);
                l += f;
                k += f
            }
            for (l++; l < k;) f = l + (k - l >>> 1), 0 > e(a, b[c + f]) ? k = f : l = f + 1;
            return k
        }
        m.__esModule = !0;
        m["default"] = function(a, c, l, h) {
            if (!Array.isArray(a)) throw new TypeError("Can only sort arrays");
            void 0 === c && (c = 0);
            void 0 === l && (l = a.length);
            void 0 === h && (h = e);
            var g = l - c;
            if (!(2 > g))
                if (g < b) {
                    var n = d(a, c, l, h);
                    k(a, c, l, c + n, h)
                } else {
                    var p = new f(a, h),
                        m;
                    n = g;
                    for (m = 0; n >= b;) m |= 1 & n, n >>= 1;
                    m = n + m;
                    do {
                        n = d(a, c, l, h);
                        if (n < m) {
                            var v = g;
                            v > m && (v = m);
                            k(a, c, c + v, c + n, h);
                            n = v
                        }
                        p.pushRun(c, n);
                        p.mergeRuns();
                        g -= n;
                        c += n
                    } while (0 !== g);
                    p.forceMergeRuns()
                }
        };
        var b = 32,
            l = [1, 10, 100, 1E3, 1E4, 1E5, 1E6, 1E7, 1E8, 1E9],
            f = function() {
                function b(a, b) {
                    this.array =
                        a;
                    this.compare = b;
                    this.minGallop = 7;
                    this.length = a.length;
                    this.tmpStorageLength = 256;
                    512 > this.length && (this.tmpStorageLength = this.length >>> 1);
                    this.tmp = Array(this.tmpStorageLength);
                    this.stackLength = 120 > this.length ? 5 : 1542 > this.length ? 10 : 119151 > this.length ? 19 : 40;
                    this.runStart = Array(this.stackLength);
                    this.runLength = Array(this.stackLength);
                    this.stackSize = 0
                }
                var d = b.prototype;
                d.pushRun = function(a, b) {
                    this.runStart[this.stackSize] = a;
                    this.runLength[this.stackSize] = b;
                    this.stackSize += 1
                };
                d.mergeRuns = function() {
                    for (; 1 <
                        this.stackSize;) {
                        var a = this.stackSize - 2;
                        if (1 <= a && this.runLength[a - 1] <= this.runLength[a] + this.runLength[a + 1] || 2 <= a && this.runLength[a - 2] <= this.runLength[a] + this.runLength[a - 1]) this.runLength[a - 1] < this.runLength[a + 1] && a--;
                        else if (this.runLength[a] > this.runLength[a + 1]) break;
                        this.mergeAt(a)
                    }
                };
                d.forceMergeRuns = function() {
                    for (; 1 < this.stackSize;) {
                        var a = this.stackSize - 2;
                        0 < a && this.runLength[a - 1] < this.runLength[a + 1] && a--;
                        this.mergeAt(a)
                    }
                };
                d.mergeAt = function(b) {
                    var d = this.compare,
                        f = this.array,
                        e = this.runStart[b],
                        l = this.runLength[b],
                        k = this.runStart[b + 1],
                        h = this.runLength[b + 1];
                    this.runLength[b] = l + h;
                    b === this.stackSize - 3 && (this.runStart[b + 1] = this.runStart[b + 2], this.runLength[b + 1] = this.runLength[b + 2]);
                    this.stackSize--;
                    b = a(f[k], f, e, l, 0, d);
                    e += b;
                    l -= b;
                    0 !== l && (h = c(f[e + l - 1], f, k, h, h - 1, d), 0 !== h && (l <= h ? this.mergeLow(e, l, k, h) : this.mergeHigh(e, l, k, h)))
                };
                d.mergeLow = function(b, d, f, e) {
                    var l = this.compare,
                        k = this.array,
                        h = this.tmp,
                        g;
                    for (g = 0; g < d; g++) h[g] = k[b + g];
                    var n = 0;
                    k[b++] = k[f++];
                    if (0 === --e)
                        for (g = 0; g < d; g++) k[b + g] = h[n + g];
                    else if (1 ===
                        d) {
                        for (g = 0; g < e; g++) k[b + g] = k[f + g];
                        k[b + e] = h[n]
                    } else {
                        for (var p = this.minGallop;;) {
                            var t = 0,
                                m = 0,
                                v = !1;
                            do
                                if (0 > l(k[f], h[n])) {
                                    if (k[b++] = k[f++], m++, t = 0, 0 === --e) {
                                        v = !0;
                                        break
                                    }
                                } else if (k[b++] = h[n++], t++, m = 0, 1 === --d) {
                                v = !0;
                                break
                            } while ((t | m) < p);
                            if (v) break;
                            do {
                                t = a(k[f], h, n, d, 0, l);
                                if (0 !== t) {
                                    for (g = 0; g < t; g++) k[b + g] = h[n + g];
                                    b += t;
                                    n += t;
                                    d -= t;
                                    if (1 >= d) {
                                        v = !0;
                                        break
                                    }
                                }
                                k[b++] = k[f++];
                                if (0 === --e) {
                                    v = !0;
                                    break
                                }
                                m = c(h[n], k, f, e, 0, l);
                                if (0 !== m) {
                                    for (g = 0; g < m; g++) k[b + g] = k[f + g];
                                    b += m;
                                    f += m;
                                    e -= m;
                                    if (0 === e) {
                                        v = !0;
                                        break
                                    }
                                }
                                k[b++] = h[n++];
                                if (1 === --d) {
                                    v = !0;
                                    break
                                }
                                p--
                            } while (7 <= t || 7 <= m);
                            if (v) break;
                            0 > p && (p = 0);
                            p += 2
                        }
                        this.minGallop = p;
                        1 > p && (this.minGallop = 1);
                        if (1 === d) {
                            for (g = 0; g < e; g++) k[b + g] = k[f + g];
                            k[b + e] = h[n]
                        } else {
                            if (0 === d) throw Error("mergeLow preconditions were not respected");
                            for (g = 0; g < d; g++) k[b + g] = h[n + g]
                        }
                    }
                };
                d.mergeHigh = function(b, d, f, e) {
                    var l = this.compare,
                        k = this.array,
                        h = this.tmp,
                        g;
                    for (g = 0; g < e; g++) h[g] = k[f + g];
                    var n = b + d - 1,
                        p = e - 1;
                    f = f + e - 1;
                    k[f--] = k[n--];
                    if (0 === --d) {
                        var t = f - (e - 1);
                        for (g = 0; g < e; g++) k[t + g] = h[g]
                    } else if (1 === e) {
                        f -= d;
                        var m = f + 1;
                        t = n - d + 1;
                        for (g = d - 1; 0 <= g; g--) k[m +
                            g] = k[t + g];
                        k[f] = h[p]
                    } else {
                        for (var v = this.minGallop;;) {
                            var u = 0,
                                x = 0,
                                q = !1;
                            do
                                if (0 > l(h[p], k[n])) {
                                    if (k[f--] = k[n--], u++, x = 0, 0 === --d) {
                                        q = !0;
                                        break
                                    }
                                } else if (k[f--] = h[p--], x++, u = 0, 1 === --e) {
                                q = !0;
                                break
                            } while ((u | x) < v);
                            if (q) break;
                            do {
                                u = d - a(h[p], k, b, d, d - 1, l);
                                if (0 !== u) {
                                    f -= u;
                                    n -= u;
                                    d -= u;
                                    m = f + 1;
                                    t = n + 1;
                                    for (g = u - 1; 0 <= g; g--) k[m + g] = k[t + g];
                                    if (0 === d) {
                                        q = !0;
                                        break
                                    }
                                }
                                k[f--] = h[p--];
                                if (1 === --e) {
                                    q = !0;
                                    break
                                }
                                x = e - c(k[n], h, 0, e, e - 1, l);
                                if (0 !== x) {
                                    f -= x;
                                    p -= x;
                                    e -= x;
                                    m = f + 1;
                                    t = p + 1;
                                    for (g = 0; g < x; g++) k[m + g] = h[t + g];
                                    if (1 >= e) {
                                        q = !0;
                                        break
                                    }
                                }
                                k[f--] = k[n--];
                                if (0 ===
                                    --d) {
                                    q = !0;
                                    break
                                }
                                v--
                            } while (7 <= u || 7 <= x);
                            if (q) break;
                            0 > v && (v = 0);
                            v += 2
                        }
                        this.minGallop = v;
                        1 > v && (this.minGallop = 1);
                        if (1 === e) {
                            f -= d;
                            m = f + 1;
                            t = n - d + 1;
                            for (g = d - 1; 0 <= g; g--) k[m + g] = k[t + g];
                            k[f] = h[p]
                        } else {
                            if (0 === e) throw Error("mergeHigh preconditions were not respected");
                            t = f - (e - 1);
                            for (g = 0; g < e; g++) k[t + g] = h[g]
                        }
                    }
                };
                return b
            }();
        q.exports = m["default"]
    }, {}],
    375: [function(g, q, m) {
        function h(d) {
            var c = (65535 < d) << 4;
            d >>>= c;
            var a = (255 < d) << 3;
            d >>>= a;
            c |= a;
            a = (15 < d) << 2;
            d >>>= a;
            c |= a;
            a = (3 < d) << 1;
            return c | a | d >>> a >> 1
        }

        function e(e) {
            a: {
                for (var c =
                        16; 268435456 >= c; c *= 16)
                    if (e <= c) {
                        e = c;
                        break a
                    }
                e = 0
            }
            c = d[h(e) >> 2];
            return 0 < c.length ? c.pop() : new ArrayBuffer(e)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var d = Array(8);
        for (g = 0; 8 > g; ++g) d[g] = [];
        m["default"] = {
            alloc_int8: function(d) {
                var c = new Int8Array(e(d), 0, d);
                return c.length !== d ? c.subarray(0, d) : c
            },
            alloc_uint8: function(d) {
                var c = new Uint8Array(e(d), 0, d);
                return c.length !== d ? c.subarray(0, d) : c
            },
            alloc_int16: function(d) {
                var c = new Int16Array(e(2 * d), 0, d);
                return c.length !== d ? c.subarray(0, d) : c
            },
            alloc_uint16: function(d) {
                var c =
                    new Uint16Array(e(2 * d), 0, d);
                return c.length !== d ? c.subarray(0, d) : c
            },
            alloc_int32: function(d) {
                var c = new Int32Array(e(4 * d), 0, d);
                return c.length !== d ? c.subarray(0, d) : c
            },
            alloc_uint32: function(d) {
                var c = new Uint32Array(e(4 * d), 0, d);
                return c.length !== d ? c.subarray(0, d) : c
            },
            alloc_float32: function(d) {
                var c = new Float32Array(e(4 * d), 0, d);
                return c.length !== d ? c.subarray(0, d) : c
            },
            alloc_float64: function(d) {
                var c = new Float64Array(e(8 * d), 0, d);
                return c.length !== d ? c.subarray(0, d) : c
            },
            alloc_dataview: function(d) {
                var c = new DataView(e(d),
                    0, d);
                return c.length !== d ? c.subarray(0, d) : c
            },
            free: function(e) {
                e = e.buffer;
                d[h(e.byteLength) >> 2].push(e)
            },
            reset: function() {
                for (var d = Array(8), c = 0; 8 > c; ++c) d[c] = []
            }
        };
        q.exports = m["default"]
    }, {}],
    376: [function(g, q, m) {
        m.__esModule = !0;
        m["default"] = function(h, e) {
            var d = h.length;
            e ^= d;
            for (var k = 0, c; 4 <= d;) c = 255 & h.charCodeAt(k) | (255 & h.charCodeAt(++k)) << 8 | (255 & h.charCodeAt(++k)) << 16 | (255 & h.charCodeAt(++k)) << 24, c = 1540483477 * (65535 & c) + ((1540483477 * (c >>> 16) & 65535) << 16), c ^= c >>> 24, c = 1540483477 * (65535 & c) + ((1540483477 *
                (c >>> 16) & 65535) << 16), e = 1540483477 * (65535 & e) + ((1540483477 * (e >>> 16) & 65535) << 16) ^ c, d -= 4, ++k;
            switch (d) {
                case 3:
                    e ^= (255 & h.charCodeAt(k + 2)) << 16;
                case 2:
                    e ^= (255 & h.charCodeAt(k + 1)) << 8;
                case 1:
                    e ^= 255 & h.charCodeAt(k), e = 1540483477 * (65535 & e) + ((1540483477 * (e >>> 16) & 65535) << 16)
            }
            e ^= e >>> 13;
            e = 1540483477 * (65535 & e) + ((1540483477 * (e >>> 16) & 65535) << 16);
            return (e ^ e >>> 15) >>> 0
        };
        q.exports = m["default"]
    }, {}],
    377: [function(g, q, m) {
        function h(a) {
            return a && a.__esModule ? a : {
                default: a
            }
        }

        function e(a) {
            if (void 0 === a) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return a
        }

        function d(a, b) {
            a.prototype = Object.create(b.prototype);
            a.prototype.constructor = a;
            k(a, b)
        }

        function k(a, b) {
            k = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(a, b) {
                a.__proto__ = b;
                return a
            };
            return k(a, b)
        }

        function c(a, b) {
            return a._priority - b._priority
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var a = g("../../core/value-types"),
            b = h(g("../core/base-renderer")),
            l = h(g("../enums"));
        g = g("../memop");
        var f = new Float32Array(16),
            n = new Float32Array(16),
            u = new Float32Array(16),
            v = new Float32Array(16),
            p = new Float32Array(4),
            t = new Float32Array(64),
            x = [],
            z = new Float32Array(4),
            E = new a.Vec4(0, 0, 0, 0),
            w = new a.Vec3(0, 0, 0),
            A = new a.Vec3(0, 0, 0),
            B = new g.RecyclePool(function() {
                return new Float32Array(16)
            }, 8);
        b = function(b) {
            function k(a, c) {
                a = b.call(this, a, c) || this;
                a._time = new Float32Array(4);
                a._lights = [];
                a._shadowLights = [];
                a._numLights = 0;
                a._defines = {};
                a._registerStage("shadowcast", a._shadowStage.bind(e(a)));
                a._registerStage("opaque", a._opaqueStage.bind(e(a)));
                a._registerStage("transparent", a._transparentStage.bind(e(a)));
                return a
            }
            d(k, b);
            var h = k.prototype;
            h.reset = function() {
                B.reset();
                b.prototype.reset.call(this)
            };
            h.render = function(a, b) {
                this.reset();
                !0;
                b && (this._time[0] += b, this._time[1] = b, this._time[2]++);
                this._device.setUniform("cc_time", this._time);
                this._updateLights(a);
                b = this._device._gl.canvas;
                for (var d = 0; d < a._cameras.length; ++d) {
                    var f = this._requestView();
                    a._cameras.data[d].extractView(f, b.width, b.height)
                }
                this._viewPools.sort(c);
                for (b = 0; b < this._viewPools.length; ++b) this._render(this._viewPools.data[b], a)
            };
            h.renderCamera =
                function(a, b) {
                    this.reset();
                    this._updateLights(b);
                    var d = this._device._gl.canvas,
                        f = d.width;
                    d = d.height;
                    var e = this._requestView();
                    a.extractView(e, f, d);
                    this._viewPools.sort(c);
                    for (a = 0; a < this._viewPools.length; ++a) this._render(this._viewPools.data[a], b)
                };
            h._updateLights = function(a) {
                this._lights.length = 0;
                this._shadowLights.length = 0;
                a = a._lights;
                for (var b = 0; b < a.length; ++b) {
                    var c = a.data[b];
                    c.update(this._device);
                    if (c.shadowType !== l["default"].SHADOW_NONE) {
                        2 > this._shadowLights.length && this._shadowLights.unshift(c);
                        var d = this._requestView();
                        c.extractView(d, ["shadowcast"]);
                        this._lights.splice(0, 0, c)
                    } else this._lights.push(c)
                }
                this._updateLightDefines();
                this._numLights = a._count
            };
            h._updateLightDefines = function() {
                for (var a = this._defines, b = 0; b < this._lights.length; ++b) {
                    var c = this._lights[b],
                        d = "CC_LIGHT_" + b + "_TYPE",
                        f = "CC_SHADOW_" + b + "_TYPE";
                    a[d] !== c._type && (a[d] = c._type, this._definesChanged = !0);
                    a[f] !== c._shadowType && (a[f] = c._shadowType, this._definesChanged = !0)
                }
                b = Math.min(4, this._lights.length);
                a.CC_NUM_LIGHTS !== b && (a.CC_NUM_LIGHTS =
                    b, this._definesChanged = !0);
                b = Math.min(4, this._shadowLights.length);
                a.CC_NUM_SHADOW_LIGHTS !== b && (a.CC_NUM_SHADOW_LIGHTS = b, this._definesChanged = !0)
            };
            h._submitLightsUniforms = function() {
                var a = this._device;
                if (0 < this._lights.length) {
                    for (var b = B.add(), c = B.add(), d = B.add(), f = Math.min(4, this._lights.length), e = 0; e < f; ++e) {
                        var k = this._lights[e],
                            h = 4 * e;
                        d.set(k._colorUniform, h);
                        c.set(k._directionUniform, h);
                        b.set(k._positionUniform, h);
                        b[h + 3] = k._range;
                        k._type === l["default"].LIGHT_SPOT ? (c[h + 3] = k._spotUniform[0], d[h +
                            3] = k._spotUniform[1]) : (c[h + 3] = 0, d[h + 3] = 0)
                    }
                    a.setUniform("cc_lightDirection", c);
                    a.setUniform("cc_lightColor", d);
                    a.setUniform("cc_lightPositionAndRange", b)
                }
            };
            h._submitShadowStageUniforms = function(b) {
                var c = b._shadowLight;
                z[0] = c.shadowMinDepth;
                z[1] = c.shadowMaxDepth;
                z[2] = c.shadowDepthScale;
                z[3] = c.shadowDarkness;
                this._device.setUniform("cc_shadow_map_lightViewProjMatrix", a.Mat4.toArray(v, b._matViewProj));
                this._device.setUniform("cc_shadow_map_info", z);
                this._device.setUniform("cc_shadow_map_bias", c.shadowBias);
                this._defines.CC_SHADOW_TYPE = c._shadowType
            };
            h._submitOtherStagesUniforms = function() {
                for (var b = B.add(), c = 0; c < this._shadowLights.length; ++c) {
                    var d = this._shadowLights[c],
                        f = x[c];
                    f || (f = x[c] = new Float32Array(t.buffer, 64 * c, 16));
                    a.Mat4.toArray(f, d.viewProjMatrix);
                    f = 4 * c;
                    b[f] = d.shadowMinDepth;
                    b[f + 1] = d.shadowMaxDepth;
                    b[f + 2] = d._shadowResolution;
                    b[f + 3] = d.shadowDarkness
                }
                this._device.setUniform("cc_shadow_lightViewProjMatrix", t);
                this._device.setUniform("cc_shadow_info", b)
            };
            h._sortItems = function(a) {
                a.sort(function(a,
                    b) {
                    return a.passes.length !== b.passes.length ? a.passes.length - b.passes.length : a.sortKey - b.sortKey
                })
            };
            h._shadowStage = function(a, b) {
                this._submitShadowStageUniforms(a);
                for (a = 0; a < b.length; ++a) {
                    var c = b.data[a];
                    c.effect.getDefine("CC_CASTING_SHADOW") && this._draw(c)
                }
            };
            h._drawItems = function(a, b) {
                a = this._shadowLights;
                if (0 === a.length && 0 === this._numLights)
                    for (a = 0; a < b.length; ++a) this._draw(b.data[a]);
                else
                    for (var c = 0; c < b.length; ++c) {
                        for (var d = b.data[c], f = 0; f < a.length; ++f) this._device.setTexture("cc_shadow_map_" +
                            f, a[f].shadowMap, this._allocTextureUnit());
                        this._draw(d)
                    }
            };
            h._opaqueStage = function(b, c) {
                b.getPosition(E);
                this._device.setUniform("cc_matView", a.Mat4.toArray(f, b._matView));
                this._device.setUniform("cc_matViewInv", a.Mat4.toArray(n, b._matViewInv));
                this._device.setUniform("cc_matProj", a.Mat4.toArray(u, b._matProj));
                this._device.setUniform("cc_matViewProj", a.Mat4.toArray(v, b._matViewProj));
                this._device.setUniform("cc_cameraPos", a.Vec4.toArray(p, E));
                this._submitLightsUniforms();
                this._submitOtherStagesUniforms();
                this._drawItems(b, c)
            };
            h._transparentStage = function(b, c) {
                b.getPosition(E);
                b.getForward(w);
                this._device.setUniform("cc_matView", a.Mat4.toArray(f, b._matView));
                this._device.setUniform("cc_matViewInv", a.Mat4.toArray(n, b._matViewInv));
                this._device.setUniform("cc_matProj", a.Mat4.toArray(u, b._matProj));
                this._device.setUniform("cc_matViewProj", a.Mat4.toArray(v, b._matViewProj));
                this._device.setUniform("cc_cameraPos", a.Vec4.toArray(p, E));
                this._submitLightsUniforms();
                this._submitOtherStagesUniforms();
                for (var d =
                        0; d < c.length; ++d) {
                    var e = c.data[d];
                    e.node.getWorldPosition(A);
                    a.Vec3.sub(A, A, E);
                    e.sortKey = -a.Vec3.dot(A, w)
                }
                this._sortItems(c);
                this._drawItems(b, c)
            };
            return k
        }(b["default"]);
        m["default"] = b;
        q.exports = m["default"]
    }, {
        "../../core/value-types": 325,
        "../core/base-renderer": 347,
        "../enums": 353,
        "../memop": 370
    }],
    378: [function(g, q, m) {
        function h(a, b) {
            for (var c = 0; c < b.length; c++) {
                var f = b[c];
                f.enumerable = f.enumerable || !1;
                f.configurable = !0;
                "value" in f && (f.writable = !0);
                Object.defineProperty(a, d(f.key), f)
            }
        }

        function e(a,
            b, c) {
            b && h(a.prototype, b);
            c && h(a, c);
            Object.defineProperty(a, "prototype", {
                writable: !1
            });
            return a
        }

        function d(a) {
            a: if ("object" === typeof a && null !== a) {
                $jscomp.initSymbol();
                var b = a[Symbol.toPrimitive];
                if (void 0 !== b) {
                    a = b.call(a, "string");
                    if ("object" !== typeof a) break a;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                a = String(a)
            }return "symbol" === typeof a ? a : String(a)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var k = g("../../core/value-types"),
            c = g("../../core/geom-utils"),
            a = function(a) {
                return a &&
                    a.__esModule ? a : {
                        default: a
                    }
            }(g("../enums")),
            b = new k.Mat4,
            l = new k.Mat4,
            f = new k.Mat4,
            n = new k.Mat4,
            u = new k.Mat4,
            v = new k.Mat4,
            p = new k.Vec3,
            t = new k.Vec3;
        g = function() {
            function d() {
                this._poolID = -1;
                this._node = null;
                this._projection = a["default"].PROJ_PERSPECTIVE;
                this._priority = 0;
                this._color = new k.Vec4(.2, .3, .47, 1);
                this._depth = 1;
                this._stencil = 0;
                this._clearFlags = a["default"].CLEAR_COLOR | a["default"].CLEAR_DEPTH;
                this._clearModel = null;
                this._stages = [];
                this._framebuffer = null;
                this._near = .01;
                this._far = 1E3;
                this._fov =
                    Math.PI / 4;
                this._rect = {
                    x: 0,
                    y: 0,
                    w: 1,
                    h: 1
                };
                this._orthoHeight = 10;
                this._cullingMask = 4294967295
            }
            var h = d.prototype;
            h.setCullingMask = function(a) {
                this._cullingMask = a
            };
            h.getNode = function() {
                return this._node
            };
            h.setNode = function(a) {
                this._node = a
            };
            h.getType = function() {
                return this._projection
            };
            h.setType = function(a) {
                this._projection = a
            };
            h.getPriority = function() {
                return this._priority
            };
            h.setPriority = function(a) {
                this._priority = a
            };
            h.getOrthoHeight = function() {
                return this._orthoHeight
            };
            h.setOrthoHeight = function(a) {
                this._orthoHeight =
                    a
            };
            h.getFov = function() {
                return this._fov
            };
            h.setFov = function(a) {
                this._fov = a
            };
            h.getNear = function() {
                return this._near
            };
            h.setNear = function(a) {
                this._near = a
            };
            h.getFar = function() {
                return this._far
            };
            h.setFar = function(a) {
                this._far = a
            };
            h.getColor = function(a) {
                return k.Vec4.copy(a, this._color)
            };
            h.setColor = function(a, b, c, d) {
                k.Vec4.set(this._color, a, b, c, d)
            };
            h.getDepth = function() {
                return this._depth
            };
            h.setDepth = function(a) {
                this._depth = a
            };
            h.getStencil = function() {
                return this._stencil
            };
            h.setStencil = function(a) {
                this._stencil =
                    a
            };
            h.getClearFlags = function() {
                return this._clearFlags
            };
            h.setClearFlags = function(a) {
                this._clearFlags = a
            };
            h.getRect = function(a) {
                a.x = this._rect.x;
                a.y = this._rect.y;
                a.w = this._rect.w;
                a.h = this._rect.h;
                return a
            };
            h.setRect = function(a, b, c, d) {
                this._rect.x = a;
                this._rect.y = b;
                this._rect.w = c;
                this._rect.h = d
            };
            h.getStages = function() {
                return this._stages
            };
            h.setStages = function(a) {
                this._stages = a
            };
            h.getFramebuffer = function() {
                return this._framebuffer
            };
            h.setFrameBuffer = function(a) {
                this._framebuffer = a
            };
            h._calcMatrices = function(b,
                c) {
                this._node.getWorldRT(f);
                k.Mat4.invert(l, f);
                b /= c;
                this._projection === a["default"].PROJ_PERSPECTIVE ? k.Mat4.perspective(n, this._fov, b, this._near, this._far) : (b *= this._orthoHeight, c = this._orthoHeight, k.Mat4.ortho(n, -b, b, -c, c, this._near, this._far));
                k.Mat4.mul(u, n, l);
                k.Mat4.invert(v, u)
            };
            h.extractView = function(a, b, c) {
                this._framebuffer && (b = this._framebuffer._width, c = this._framebuffer._height);
                a._priority = this._priority;
                a._rect.x = this._rect.x * b;
                a._rect.y = this._rect.y * c;
                a._rect.w = this._rect.w * b;
                a._rect.h =
                    this._rect.h * c;
                this.getColor(a._color);
                a._depth = this._depth;
                a._stencil = this._stencil;
                a._clearFlags = this._clearFlags;
                a._clearModel = this._clearModel;
                a._stages = this._stages;
                a._framebuffer = this._framebuffer;
                this._calcMatrices(b, c);
                k.Mat4.copy(a._matView, l);
                k.Mat4.copy(a._matViewInv, f);
                k.Mat4.copy(a._matProj, n);
                k.Mat4.copy(a._matViewProj, u);
                k.Mat4.copy(a._matInvViewProj, v);
                a._cullingMask = this._cullingMask
            };
            h.screenPointToRay = function(b, d, f, e, l) {
                if (!cc.geomUtils) return l;
                l = l || new c.Ray;
                this._calcMatrices(f,
                    e);
                var h = this._rect.x * f,
                    g = this._rect.y * e;
                f *= this._rect.w;
                e *= this._rect.h;
                k.Vec3.set(t, (b - h) / f * 2 - 1, (d - g) / e * 2 - 1, 1);
                k.Vec3.transformMat4(t, t, v);
                this._projection === a["default"].PROJ_PERSPECTIVE ? this._node.getWorldPosition(p) : (k.Vec3.set(p, (b - h) / f * 2 - 1, (d - g) / e * 2 - 1, -1), k.Vec3.transformMat4(p, p, v));
                return c.Ray.fromPoints(l, p, t)
            };
            h.screenToWorld = function(b, c, d, f) {
                this._calcMatrices(d, f);
                var e = this._rect.x * d,
                    l = this._rect.y * f;
                d *= this._rect.w;
                f *= this._rect.h;
                this._projection === a["default"].PROJ_PERSPECTIVE ?
                    (k.Vec3.set(b, (c.x - e) / d * 2 - 1, (c.y - l) / f * 2 - 1, .9999), k.Vec3.transformMat4(b, b, v), this._node.getWorldPosition(p), k.Vec3.lerp(b, p, b, (0, k.lerp)(this._near / this._far, 1, c.z))) : (k.Vec3.set(b, (c.x - e) / d * 2 - 1, (c.y - l) / f * 2 - 1, 2 * c.z - 1), k.Vec3.transformMat4(b, b, v));
                return b
            };
            h.worldToScreen = function(a, b, c, d) {
                this._calcMatrices(c, d);
                var f = this._rect.x * c,
                    e = this._rect.y * d;
                c *= this._rect.w;
                d *= this._rect.h;
                k.Vec3.transformMat4(a, b, u);
                a.x = f + .5 * (a.x + 1) * c;
                a.y = e + .5 * (a.y + 1) * d;
                a.z = .5 * a.z + .5;
                return a
            };
            h.worldMatrixToScreen = function(a,
                c, d, f) {
                this._calcMatrices(d, f);
                k.Mat4.mul(a, u, c);
                c = d / 2;
                f /= 2;
                k.Mat4.identity(b);
                k.Mat4.transform(b, b, k.Vec3.set(p, c, f, 0));
                k.Mat4.scale(b, b, k.Vec3.set(p, c, f, 1));
                k.Mat4.mul(a, b, a);
                return a
            };
            e(d, [{
                key: "cullingMask",
                get: function() {
                    return this._cullingMask
                },
                set: function(a) {
                    this._cullingMask = a
                }
            }]);
            return d
        }();
        m["default"] = g;
        q.exports = m["default"]
    }, {
        "../../core/geom-utils": 182,
        "../../core/value-types": 325,
        "../enums": 353
    }],
    379: [function(g, q, m) {
        function h(a) {
            return a && a.__esModule ? a : {
                default: a
            }
        }

        function e(a,
            b) {
            for (var c = 0; c < b.length; c++) {
                var d = b[c];
                d.enumerable = d.enumerable || !1;
                d.configurable = !0;
                "value" in d && (d.writable = !0);
                Object.defineProperty(a, k(d.key), d)
            }
        }

        function d(a, b, c) {
            b && e(a.prototype, b);
            c && e(a, c);
            Object.defineProperty(a, "prototype", {
                writable: !1
            });
            return a
        }

        function k(a) {
            a: if ("object" === typeof a && null !== a) {
                $jscomp.initSymbol();
                var b = a[Symbol.toPrimitive];
                if (void 0 !== b) {
                    a = b.call(a, "string");
                    if ("object" !== typeof a) break a;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                a =
                    String(a)
            }return "symbol" === typeof a ? a : String(a)
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var c = g("../../core/value-types"),
            a = h(g("../gfx")),
            b = h(g("../enums")),
            l = cc.v3(0, 0, -1),
            f = cc.mat4(),
            n = c.Mat3.create(),
            u = cc.v3(0, 0, 0);
        g = function() {
            function e() {
                this._poolID = -1;
                this._node = null;
                this._type = b["default"].LIGHT_DIRECTIONAL;
                this._color = new c.Vec3(1, 1, 1);
                this._range = this._intensity = 1;
                this._spotAngle = (0, c.toRadian)(60);
                this._spotExp = 1;
                this._directionUniform = new Float32Array(3);
                this._positionUniform = new Float32Array(3);
                this._colorUniform = new Float32Array([this._color.x * this._intensity, this._color.y * this._intensity, this._color.z * this._intensity]);
                this._spotUniform = new Float32Array([Math.cos(.5 * this._spotAngle), this._spotExp]);
                this._shadowType = b["default"].SHADOW_NONE;
                this._shadowMap = this._shadowFrameBuffer = null;
                this._shadowMapDirty = !1;
                this._shadowDepthBuffer = null;
                this._shadowResolution = 1024;
                this._shadowBias = 5E-4;
                this._shadowMinDepth = this._shadowDarkness = 1;
                this._shadowMaxDepth = 1E3;
                this._frustumEdgeFalloff = 0;
                this._viewProjMatrix =
                    cc.mat4();
                this._spotAngleScale = 1;
                this._shadowFrustumSize = 50
            }
            var k = e.prototype;
            k.getNode = function() {
                return this._node
            };
            k.setNode = function(a) {
                this._node = a
            };
            k.setColor = function(a, b, d) {
                c.Vec3.set(this._color, a, b, d);
                this._colorUniform[0] = a * this._intensity;
                this._colorUniform[1] = b * this._intensity;
                this._colorUniform[2] = d * this._intensity
            };
            k.setIntensity = function(a) {
                this._intensity = a;
                this._colorUniform[0] = a * this._color.x;
                this._colorUniform[1] = a * this._color.y;
                this._colorUniform[2] = a * this._color.z
            };
            k.setType =
                function(a) {
                    this._type = a
                };
            k.setSpotAngle = function(a) {
                this._spotAngle = a;
                this._spotUniform[0] = Math.cos(.5 * this._spotAngle)
            };
            k.setSpotExp = function(a) {
                this._spotExp = a;
                this._spotUniform[1] = a
            };
            k.setRange = function(a) {
                this._range = a
            };
            k.setShadowType = function(a) {
                this._shadowType === b["default"].SHADOW_NONE && a !== b["default"].SHADOW_NONE && (this._shadowMapDirty = !0);
                this._shadowType = a
            };
            k.setShadowResolution = function(a) {
                this._shadowResolution !== a && (this._shadowMapDirty = !0);
                this._shadowResolution = a
            };
            k.setShadowBias =
                function(a) {
                    this._shadowBias = a
                };
            k.setShadowDarkness = function(a) {
                this._shadowDarkness = a
            };
            k.setShadowMinDepth = function(a) {
                this._shadowMinDepth = a
            };
            k.setShadowMaxDepth = function(a) {
                this._shadowMaxDepth = a
            };
            k.setFrustumEdgeFalloff = function(a) {
                this._frustumEdgeFalloff = a
            };
            k.setShadowFrustumSize = function(a) {
                this._shadowFrustumSize = a
            };
            k.extractView = function(a, d) {
                a._shadowLight = this;
                a._priority = -1;
                a._rect.x = 0;
                a._rect.y = 0;
                a._rect.w = this._shadowResolution;
                a._rect.h = this._shadowResolution;
                c.Vec3.set(a._color, 1,
                    1, 1);
                a._depth = 1;
                a._stencil = 1;
                a._clearFlags = b["default"].CLEAR_COLOR | b["default"].CLEAR_DEPTH;
                a._stages = d;
                a._framebuffer = this._shadowFrameBuffer;
                switch (this._type) {
                    case b["default"].LIGHT_SPOT:
                        d = a._matView;
                        var f = a._matProj;
                        this._node.getWorldRT(d);
                        c.Mat4.invert(d, d);
                        c.Mat4.perspective(f, this._spotAngle * this._spotAngleScale, 1, this._shadowMinDepth, this._shadowMaxDepth);
                        break;
                    case b["default"].LIGHT_DIRECTIONAL:
                        f = a._matView;
                        d = a._matProj;
                        this._node.getWorldRT(f);
                        c.Mat4.invert(f, f);
                        f = this._shadowFrustumSize /
                            2;
                        c.Mat4.ortho(d, -f, f, -f, f, this._shadowMinDepth, this._shadowMaxDepth);
                        break;
                    case b["default"].LIGHT_POINT:
                        d = a._matView;
                        f = a._matProj;
                        this._node.getWorldRT(d);
                        c.Mat4.invert(d, d);
                        c.Mat4.perspective(f, (0, c.toRadian)(179), 1, this._shadowMinDepth, this._shadowMaxDepth);
                        break;
                    case b["default"].LIGHT_AMBIENT:
                        break;
                    default:
                        console.warn("shadow of this light type is not supported")
                }
                c.Mat4.mul(a._matViewProj, a._matProj, a._matView);
                this._viewProjMatrix = a._matViewProj;
                c.Mat4.invert(a._matInvViewProj, a._matViewProj);
                a._cullingMask = 4294967295
            };
            k._updateLightPositionAndDirection = function() {
                this._node.getWorldMatrix(f);
                c.Mat3.fromMat4(n, f);
                c.Vec3.transformMat3(u, l, n);
                c.Vec3.toArray(this._directionUniform, u);
                var a = this._positionUniform,
                    b = f.m;
                a[0] = b[12];
                a[1] = b[13];
                a[2] = b[14]
            };
            k._generateShadowMap = function(b) {
                this._shadowMap = new a["default"].Texture2D(b, {
                    width: this._shadowResolution,
                    height: this._shadowResolution,
                    format: a["default"].TEXTURE_FMT_RGBA8,
                    wrapS: a["default"].WRAP_CLAMP,
                    wrapT: a["default"].WRAP_CLAMP
                });
                this._shadowDepthBuffer =
                    new a["default"].RenderBuffer(b, a["default"].RB_FMT_D16, this._shadowResolution, this._shadowResolution);
                this._shadowFrameBuffer = new a["default"].FrameBuffer(b, this._shadowResolution, this._shadowResolution, {
                    colors: [this._shadowMap],
                    depth: this._shadowDepthBuffer
                })
            };
            k._destroyShadowMap = function() {
                this._shadowMap && (this._shadowMap.destroy(), this._shadowDepthBuffer.destroy(), this._shadowFrameBuffer.destroy(), this._shadowFrameBuffer = this._shadowDepthBuffer = this._shadowMap = null)
            };
            k.update = function(a) {
                this._updateLightPositionAndDirection();
                this._shadowType === b["default"].SHADOW_NONE ? this._destroyShadowMap() : this._shadowMapDirty && (this._destroyShadowMap(), this._generateShadowMap(a), this._shadowMapDirty = !1)
            };
            d(e, [{
                key: "color",
                get: function() {
                    return this._color
                }
            }, {
                key: "intensity",
                get: function() {
                    return this._intensity
                }
            }, {
                key: "type",
                get: function() {
                    return this._type
                }
            }, {
                key: "spotAngle",
                get: function() {
                    return this._spotAngle
                }
            }, {
                key: "spotExp",
                get: function() {
                    return this._spotExp
                }
            }, {
                key: "range",
                get: function() {
                    return this._range
                }
            }, {
                key: "shadowType",
                get: function() {
                    return this._shadowType
                }
            }, {
                key: "shadowMap",
                get: function() {
                    return this._shadowMap
                }
            }, {
                key: "viewProjMatrix",
                get: function() {
                    return this._viewProjMatrix
                }
            }, {
                key: "shadowResolution",
                get: function() {
                    return this._shadowResolution
                }
            }, {
                key: "shadowBias",
                get: function() {
                    return this._shadowBias
                }
            }, {
                key: "shadowDarkness",
                get: function() {
                    return this._shadowDarkness
                }
            }, {
                key: "shadowMinDepth",
                get: function() {
                    return this._type === b["default"].LIGHT_DIRECTIONAL ? 1 : this._shadowMinDepth
                }
            }, {
                key: "shadowMaxDepth",
                get: function() {
                    return this._type ===
                        b["default"].LIGHT_DIRECTIONAL ? 1 : this._shadowMaxDepth
                }
            }, {
                key: "frustumEdgeFalloff",
                get: function() {
                    return this._frustumEdgeFalloff
                }
            }, {
                key: "shadowFrustumSize",
                get: function() {
                    return this._shadowFrustumSize
                }
            }]);
            return e
        }();
        m["default"] = g;
        q.exports = m["default"]
    }, {
        "../../core/value-types": 325,
        "../enums": 353,
        "../gfx": 358
    }],
    380: [function(g, q, m) {
        m.__esModule = !0;
        m["default"] = void 0;
        g = function() {
            function h() {
                this._type = "default";
                this._poolID = -1;
                this._effect = this._inputAssembler = this._node = null;
                this._userKey =
                    this._cameraID = this._viewID = -1;
                this._castShadow = !1;
                this._boundingShape = null
            }
            var e = h.prototype;
            e.setNode = function(d) {
                this._node = d
            };
            e.setInputAssembler = function(d) {
                this._inputAssembler = d
            };
            e.setEffect = function(d) {
                this._effect = d
            };
            e.setUserKey = function(d) {
                this._userKey = d
            };
            e.extractDrawItem = function(d) {
                d.model = this;
                d.node = this._node;
                d.ia = this._inputAssembler;
                d.effect = this._effect
            };
            return h
        }();
        m["default"] = g;
        q.exports = m["default"]
    }, {}],
    381: [function(g, q, m) {
        m.__esModule = !0;
        m["default"] = void 0;
        var h = g("../memop");
        g = function() {
            function e(d) {
                this._lights = new h.FixedArray(16);
                this._models = new h.FixedArray(16);
                this._cameras = new h.FixedArray(16);
                this._debugCamera = null;
                this._app = d;
                this._views = []
            }
            var d = e.prototype;
            d._add = function(d, c) {
                -1 === c._poolID && (d.push(c), c._poolID = d.length - 1)
            };
            d._remove = function(d, c) {
                -1 !== c._poolID && (d.data[d.length - 1]._poolID = c._poolID, d.fastRemove(c._poolID), c._poolID = -1)
            };
            d.reset = function() {
                for (var d = 0; d < this._models.length; ++d) this._models.data[d]._viewID = -1
            };
            d.setDebugCamera = function(d) {
                this._debugCamera =
                    d
            };
            d.getCameraCount = function() {
                return this._cameras.length
            };
            d.getCamera = function(d) {
                return this._cameras.data[d]
            };
            d.addCamera = function(d) {
                this._add(this._cameras, d)
            };
            d.removeCamera = function(d) {
                this._remove(this._cameras, d)
            };
            d.getModelCount = function() {
                return this._models.length
            };
            d.getModel = function(d) {
                return this._models.data[d]
            };
            d.addModel = function(d) {
                this._add(this._models, d)
            };
            d.removeModel = function(d) {
                this._remove(this._models, d)
            };
            d.getLightCount = function() {
                return this._lights.length
            };
            d.getLight =
                function(d) {
                    return this._lights.data[d]
                };
            d.addLight = function(d) {
                this._add(this._lights, d)
            };
            d.removeLight = function(d) {
                this._remove(this._lights, d)
            };
            d.addView = function(d) {
                -1 === this._views.indexOf(d) && this._views.push(d)
            };
            d.removeView = function(d) {
                d = this._views.indexOf(d); - 1 !== d && this._views.splice(d, 1)
            };
            return e
        }();
        m["default"] = g;
        q.exports = m["default"]
    }, {
        "../memop": 370
    }],
    382: [function(g, q, m) {
        function h(a) {
            return a && a.__esModule ? a : {
                default: a
            }
        }
        m.__esModule = !0;
        m.getClassName = m.enums2default = m.ctor2enums =
            void 0;
        m.getInspectorProps = function(a) {
            var b = {
                type: a.type
            };
            Object.assign(b, a.editor || a.inspector);
            b.defines = a.defines;
            b.value = v(b.type)(a.value);
            a.range && (b.range = a.range);
            a = p(b.type);
            b.typeName = t[a] || a;
            b.valueCtor = n[b.type];
            "cc.Texture2D" == b.typeName && (b.typeName = "cc.Asset", b.assetType = "cc.Texture2D");
            return b
        };
        m.getInstanceType = m.getInstanceCtor = void 0;
        q = h(g("./enums"));
        var e = g("../core/value-types"),
            d = h(g("../core/assets/CCTexture2D")),
            k, c, a, b, l = null;
        !1;
        l = g("./gfx/texture-2d");
        g = cc.Object;
        var f =
            (k = {}, k[Boolean] = function(a) {
                return a || !1
            }, k[Number] = function(a) {
                return a ? ArrayBuffer.isView(a) ? a[0] : a : 0
            }, k[e.Vec2] = function(a) {
                return a ? cc.v2(a[0], a[1]) : cc.v2()
            }, k[e.Vec3] = function(a) {
                return a ? cc.v3(a[0], a[1], a[2]) : cc.v3()
            }, k[e.Vec4] = function(a) {
                return a ? cc.v4(a[0], a[1], a[2], a[3]) : cc.v4()
            }, k[e.Color] = function(a) {
                return a ? cc.color(255 * a[0], 255 * a[1], 255 * a[2], 255 * (a[3] || 1)) : cc.color()
            }, k[e.Mat4] = function(a) {
                return a ? cc.mat4(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14],
                    a[15]) : cc.mat4()
            }, k[d["default"]] = function() {
                return null
            }, k[g] = function() {
                return null
            }, k),
            n = (c = {}, c[q["default"].PARAM_INT] = Number, c[q["default"].PARAM_INT2] = e.Vec2, c[q["default"].PARAM_INT3] = e.Vec3, c[q["default"].PARAM_INT4] = e.Vec4, c[q["default"].PARAM_FLOAT] = Number, c[q["default"].PARAM_FLOAT2] = e.Vec2, c[q["default"].PARAM_FLOAT3] = e.Vec3, c[q["default"].PARAM_FLOAT4] = e.Vec4, c[q["default"].PARAM_MAT4] = e.Mat4, c[q["default"].PARAM_TEXTURE_2D] = d["default"], c.color = e.Color, c.number = Number, c["boolean"] =
                Boolean, c["default"] = g, c);
        k = (a = {}, a[Number] = q["default"].PARAM_FLOAT, a[e.Vec2] = q["default"].PARAM_FLOAT2, a[e.Vec3] = q["default"].PARAM_FLOAT3, a[e.Vec4] = q["default"].PARAM_FLOAT4, a[e.Color] = q["default"].PARAM_COLOR3, a[e.Color] = q["default"].PARAM_COLOR4, a[e.Mat4] = q["default"].PARAM_MAT4, a[d["default"]] = q["default"].PARAM_TEXTURE_2D, a[l] = q["default"].PARAM_TEXTURE_2D, a);
        m.ctor2enums = k;
        a = (b = {}, b[q["default"].PARAM_INT] = new Uint32Array([0]), b[q["default"].PARAM_INT2] = new Uint32Array([0, 0]), b[q["default"].PARAM_INT3] =
            new Uint32Array([0, 0, 0]), b[q["default"].PARAM_INT4] = new Uint32Array([0, 0, 0, 0]), b[q["default"].PARAM_FLOAT] = new Float32Array([0]), b[q["default"].PARAM_FLOAT2] = new Float32Array([0, 0]), b[q["default"].PARAM_FLOAT3] = new Float32Array([0, 0, 0]), b[q["default"].PARAM_FLOAT4] = new Float32Array([0, 0, 0, 0]), b[q["default"].PARAM_MAT4] = new Float32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), b[q["default"].PARAM_TEXTURE_2D] = null, b.number = 0, b["boolean"] = !1, b);
        m.enums2default = a;
        var u = function(a) {
            return n[a] || n["default"]
        };
        m.getInstanceType = u;
        var v = function(a) {
            return f[u(a)]
        };
        m.getInstanceCtor = v;
        var p = function(a) {
            return cc.js.getClassName(u(a))
        };
        m.getClassName = p;
        var t = {
            Number: "number",
            Boolean: "boolean"
        }
    }, {
        "../core/assets/CCTexture2D": 109,
        "../core/value-types": 325,
        "./enums": 353,
        "./gfx/texture-2d": 363
    }],
    383: [function(g, q, m) {
        g = cc.Class({
            name: "cc.TiledMapAsset",
            extends: cc.Asset,
            properties: {
                tmxXmlStr: "",
                textures: {
                    default: [],
                    type: [cc.Texture2D]
                },
                textureNames: [cc.String],
                textureSizes: {
                    default: [],
                    type: [cc.Size]
                },
                imageLayerTextures: {
                    default: [],
                    type: [cc.Texture2D]
                },
                imageLayerTextureNames: [cc.String],
                tsxFiles: [cc.TextAsset],
                tsxFileNames: [cc.String]
            },
            statics: {
                preventDeferredLoadDependents: !0
            },
            createNode: !1
        });
        cc.TiledMapAsset = g;
        q.exports = g
    }, {}],
    384: [function(g, q, m) {
        var h = g("./video-player-impl"),
            e = h.EventType,
            d = cc.Enum({
                REMOTE: 0,
                LOCAL: 1
            });
        g = cc.Class({
            name: "cc.VideoPlayer",
            extends: cc.Component,
            editor: !1,
            properties: {
                _resourceType: d.REMOTE,
                resourceType: {
                    tooltip: !1,
                    type: d,
                    set: function(d) {
                        this._resourceType = d;
                        this._updateVideoSource()
                    },
                    get: function() {
                        return this._resourceType
                    }
                },
                _remoteURL: "",
                remoteURL: {
                    tooltip: !1,
                    type: cc.String,
                    set: function(d) {
                        this._remoteURL = d;
                        this._updateVideoSource()
                    },
                    get: function() {
                        return this._remoteURL
                    }
                },
                _clip: {
                    default: null,
                    type: cc.VideoClip
                },
                clip: {
                    tooltip: !1,
                    get: function() {
                        return this._clip
                    },
                    set: function(d) {
                        this._clip = d;
                        this._updateVideoSource()
                    },
                    type: cc.VideoClip
                },
                currentTime: {
                    tooltip: !1,
                    type: cc.Float,
                    set: function(d) {
                        this._impl && this._impl.seekTo(d)
                    },
                    get: function() {
                        return this._impl ? this._currentStatus === e.NONE || this._currentStatus === e.STOPPED ||
                            this._currentStatus === e.META_LOADED || this._currentStatus === e.READY_TO_PLAY ? 0 : this._currentStatus === e.COMPLETED ? this._impl.duration() : this._impl.currentTime() : -1
                    }
                },
                _volume: 1,
                volume: {
                    get: function() {
                        return this._volume
                    },
                    set: function(d) {
                        this._volume = d;
                        this.isPlaying() && !this._mute && this._syncVolume()
                    },
                    range: [0, 1],
                    type: cc.Float,
                    tooltip: !1
                },
                _mute: !1,
                mute: {
                    get: function() {
                        return this._mute
                    },
                    set: function(d) {
                        this._mute = d;
                        this._syncVolume()
                    },
                    tooltip: !1
                },
                keepAspectRatio: {
                    tooltip: !1,
                    default: !0,
                    type: cc.Boolean,
                    notify: function() {
                        this._impl && this._impl.setKeepAspectRatioEnabled(this.keepAspectRatio)
                    }
                },
                _isFullscreen: {
                    default: !1,
                    formerlySerializedAs: "_N$isFullscreen"
                },
                isFullscreen: {
                    get: function() {
                        !0;
                        return this._isFullscreen = this._impl && this._impl.isFullScreenEnabled()
                    },
                    set: function(d) {
                        this._isFullscreen = d;
                        !0;
                        this._impl && this._impl.setFullScreenEnabled(d)
                    },
                    animatable: !1,
                    tooltip: !1
                },
                _stayOnBottom: !1,
                stayOnBottom: {
                    get: function() {
                        return this._stayOnBottom
                    },
                    set: function(d) {
                        this._stayOnBottom = d;
                        this._impl && this._impl.setStayOnBottom(d)
                    },
                    animatable: !1,
                    tooltip: !1
                },
                videoPlayerEvent: {
                    default: [],
                    type: cc.Component.EventHandler
                }
            },
            statics: {
                EventType: e,
                ResourceType: d,
                Impl: h
            },
            ctor: function() {
                this._impl = new h;
                this._currentStatus = e.NONE
            },
            _syncVolume: function() {
                var d = this._impl;
                d && d.setVolume(this._mute ? 0 : this._volume)
            },
            _updateVideoSource: function() {
                var e = "";
                this.resourceType === d.REMOTE ? e = this.remoteURL : this._clip && (e = this._clip.nativeUrl);
                this._impl.setURL(e, this._mute || 0 === this._volume);
                this._impl.setKeepAspectRatioEnabled(this.keepAspectRatio)
            },
            onLoad: function() {
                var d = this._impl;
                d && (d.createDomElementIfNeeded(this._mute || 0 === this._volume), d.setStayOnBottom(this._stayOnBottom), this._updateVideoSource(), !0, d.seekTo(this.currentTime), d.setFullScreenEnabled(this._isFullscreen), this.pause(), d.setEventListener(e.PLAYING, this.onPlaying.bind(this)), d.setEventListener(e.PAUSED, this.onPasued.bind(this)), d.setEventListener(e.STOPPED, this.onStopped.bind(this)), d.setEventListener(e.COMPLETED, this.onCompleted.bind(this)), d.setEventListener(e.META_LOADED,
                    this.onMetaLoaded.bind(this)), d.setEventListener(e.CLICKED, this.onClicked.bind(this)), d.setEventListener(e.READY_TO_PLAY, this.onReadyToPlay.bind(this)))
            },
            onRestore: function() {
                this._impl || (this._impl = new h)
            },
            onEnable: function() {
                this._impl && this._impl.enable()
            },
            onDisable: function() {
                this._impl && this._impl.disable()
            },
            onDestroy: function() {
                this._impl && (this._impl.destroy(), this._impl = null)
            },
            update: function(d) {
                this._impl && this._impl.updateMatrix(this.node)
            },
            onReadyToPlay: function() {
                this._currentStatus = e.READY_TO_PLAY;
                cc.Component.EventHandler.emitEvents(this.videoPlayerEvent, this, e.READY_TO_PLAY);
                this.node.emit("ready-to-play", this)
            },
            onMetaLoaded: function() {
                this._currentStatus = e.META_LOADED;
                cc.Component.EventHandler.emitEvents(this.videoPlayerEvent, this, e.META_LOADED);
                this.node.emit("meta-loaded", this)
            },
            onClicked: function() {
                this._currentStatus = e.CLICKED;
                cc.Component.EventHandler.emitEvents(this.videoPlayerEvent, this, e.CLICKED);
                this.node.emit("clicked", this)
            },
            onPlaying: function() {
                this._currentStatus = e.PLAYING;
                cc.Component.EventHandler.emitEvents(this.videoPlayerEvent, this, e.PLAYING);
                this.node.emit("playing", this)
            },
            onPasued: function() {
                this._currentStatus = e.PAUSED;
                cc.Component.EventHandler.emitEvents(this.videoPlayerEvent, this, e.PAUSED);
                this.node.emit("paused", this)
            },
            onStopped: function() {
                this._currentStatus = e.STOPPED;
                cc.Component.EventHandler.emitEvents(this.videoPlayerEvent, this, e.STOPPED);
                this.node.emit("stopped", this)
            },
            onCompleted: function() {
                this._currentStatus = e.COMPLETED;
                cc.Component.EventHandler.emitEvents(this.videoPlayerEvent,
                    this, e.COMPLETED);
                this.node.emit("completed", this)
            },
            play: function() {
                this._impl && (this._syncVolume(), this._impl.play())
            },
            resume: function() {
                this._impl && (this._syncVolume(), this._impl.resume())
            },
            pause: function() {
                this._impl && this._impl.pause()
            },
            stop: function() {
                this._impl && this._impl.stop()
            },
            getDuration: function() {
                return this._impl ? this._impl.duration() : -1
            },
            isPlaying: function() {
                return this._impl ? this._impl.isPlaying() : !1
            }
        });
        cc.VideoPlayer = q.exports = g
    }, {
        "./video-player-impl": 385
    }],
    385: [function(g, q, m) {
        var h =
            g("../core/platform/utils"),
            e = g("../core/platform/CCSys"),
            d = g("../core/platform/CCMacro"),
            k = cc.mat4(),
            c = cc.Class({
                name: "VideoPlayerImpl",
                ctor: function() {
                    this._EventList = {};
                    this._video = null;
                    this._url = "";
                    this._forceUpdate = this._ignorePause = this._playing = this._visible = this._loaded = this._loadedmeta = this._stayOnBottom = this._fullScreenEnabled = this._waitingFullscreen = !1;
                    this._h = this._w = this._m13 = this._m12 = this._m05 = this._m04 = this._m01 = this._m00 = 0;
                    this.__eventListeners = {}
                },
                _bindEvent: function() {
                    var a = this._video,
                        b = this,
                        d = this.__eventListeners;
                    d.loadedmetadata = function() {
                        b._loadedmeta = !0;
                        b._forceUpdate = !0;
                        b._waitingFullscreen && (b._waitingFullscreen = !1, b._toggleFullscreen(!0));
                        b._dispatchEvent(c.EventType.META_LOADED)
                    };
                    d.ended = function() {
                        b._video === a && (b._playing = !1, b._dispatchEvent(c.EventType.COMPLETED))
                    };
                    d.play = function() {
                        b._video === a && (b._playing = !0, b._updateVisibility(), b._dispatchEvent(c.EventType.PLAYING))
                    };
                    d.pause = function() {
                        b._video === a && (b._playing = !1, b._ignorePause || b._dispatchEvent(c.EventType.PAUSED))
                    };
                    d.click = function() {
                        b._dispatchEvent(c.EventType.CLICKED)
                    };
                    a.addEventListener("loadedmetadata", d.loadedmetadata);
                    a.addEventListener("ended", d.ended);
                    a.addEventListener("play", d.play);
                    a.addEventListener("pause", d.pause);
                    a.addEventListener("click", d.click);
                    d.onCanPlay = function() {
                        var a = b._video;
                        b._loaded || !a || 4 !== a.readyState && 1 !== a.readyState || (a.currentTime = 0, b._loaded = !0, b._forceUpdate = !0, b._dispatchEvent(c.EventType.READY_TO_PLAY), b._updateVisibility())
                    };
                    a.addEventListener("canplay", d.onCanPlay);
                    a.addEventListener("canplaythrough", d.onCanPlay);
                    a.addEventListener("suspend", d.onCanPlay)
                },
                _updateVisibility: function() {
                    var a = this._video;
                    a && (this._visible ? a.style.visibility = "visible" : (a.style.visibility = "hidden", a.pause(), this._playing = !1))
                },
                _updateSize: function(a, b) {
                    var c = this._video;
                    c && (c.style.width = a + "px", c.style.height = b + "px")
                },
                _createDom: function(a) {
                    var b = document.createElement("video");
                    b.style.position = "absolute";
                    b.style.bottom = "0px";
                    b.style.left = "0px";
                    b.style["z-index"] = this._stayOnBottom ?
                        d.MIN_ZINDEX : 0;
                    b.className = "cocosVideo";
                    b.setAttribute("preload", "auto");
                    b.setAttribute("webkit-playsinline", "");
                    b.setAttribute("x5-playsinline", "");
                    b.setAttribute("playsinline", "");
                    a && b.setAttribute("muted", "");
                    this._video = b;
                    cc.game.container.appendChild(b)
                },
                createDomElementIfNeeded: function(a) {
                    this._video || this._createDom(a)
                },
                removeDom: function() {
                    var a = this._video;
                    if (a) {
                        h.contains(cc.game.container, a) && cc.game.container.removeChild(a);
                        var b = this.__eventListeners;
                        a.removeEventListener("loadedmetadata",
                            b.loadedmetadata);
                        a.removeEventListener("ended", b.ended);
                        a.removeEventListener("play", b.play);
                        a.removeEventListener("pause", b.pause);
                        a.removeEventListener("click", b.click);
                        a.removeEventListener("canplay", b.onCanPlay);
                        a.removeEventListener("canplaythrough", b.onCanPlay);
                        a.removeEventListener("suspend", b.onCanPlay);
                        b.loadedmetadata = null;
                        b.ended = null;
                        b.play = null;
                        b.pause = null;
                        b.click = null;
                        b.onCanPlay = null
                    }
                    this._video = null;
                    this._url = ""
                },
                setURL: function(a, b) {
                    if (this._url !== a) {
                        this.removeDom();
                        this._url =
                            a;
                        this.createDomElementIfNeeded(b);
                        this._bindEvent();
                        var d = this._video;
                        d.style.visibility = "hidden";
                        this._loadedmeta = this._playing = this._loaded = !1;
                        b = document.createElement("source");
                        b.src = a;
                        d.appendChild(b);
                        var f = cc.path.extname(a);
                        for (var e = c._polyfill, k = 0; k < e.canPlayType.length; k++) f !== e.canPlayType[k] && (b = document.createElement("source"), b.src = a.replace(f, e.canPlayType[k]), d.appendChild(b))
                    }
                },
                getURL: function() {
                    return this._url
                },
                play: function() {
                    var a = this._video;
                    a && this._visible && !this._playing &&
                        a.play()
                },
                pause: function() {
                    var a = this._video;
                    this._playing && a && a.pause()
                },
                resume: function() {
                    this.play()
                },
                stop: function() {
                    var a = this._video;
                    a && this._visible && (this._ignorePause = !0, a.currentTime = 0, a.pause(), setTimeout(function() {
                        this._dispatchEvent(c.EventType.STOPPED);
                        this._ignorePause = !1
                    }.bind(this), 0))
                },
                setVolume: function(a) {
                    var b = this._video;
                    b && (b.volume = a)
                },
                seekTo: function(a) {
                    var b = this._video;
                    b && (this._loaded ? b.currentTime = a : b.addEventListener(c._polyfill.event, function f() {
                        b.currentTime = a;
                        b.removeEventListener(c._polyfill.event,
                            f)
                    }))
                },
                isPlaying: function() {
                    return this._playing
                },
                duration: function() {
                    var a = this._video,
                        b = -1;
                    if (!a) return b;
                    b = a.duration;
                    0 >= b && cc.logID(7702);
                    return b
                },
                currentTime: function() {
                    var a = this._video;
                    return a ? a.currentTime : -1
                },
                setKeepAspectRatioEnabled: function() {
                    !1;
                    cc.logID(7700)
                },
                isKeepAspectRatioEnabled: function() {
                    return !0
                },
                _toggleFullscreen: function(a) {
                    function b(a) {
                        d._fullScreenEnabled = (e.browserType === e.BROWSER_TYPE_IE ? document.msFullscreenElement : document.fullscreenElement) === k
                    }

                    function c(a) {
                        d._fullScreenEnabled = !1
                    }
                    var d = this,
                        k = this._video;
                    k && (a ? (e.browserType === e.BROWSER_TYPE_IE && (k.style.transform = ""), cc.screen.requestFullScreen(k, b, c)) : cc.screen.fullScreen() && cc.screen.exitFullScreen(k))
                },
                setStayOnBottom: function(a) {
                    this._stayOnBottom = a;
                    this._video && (this._video.style["z-index"] = a ? d.MIN_ZINDEX : 0)
                },
                setFullScreenEnabled: function(a) {
                    !this._loadedmeta && a ? this._waitingFullscreen = !0 : this._toggleFullscreen(a)
                },
                isFullScreenEnabled: function() {
                    return this._fullScreenEnabled
                },
                setEventListener: function(a, b) {
                    this._EventList[a] =
                        b
                },
                removeEventListener: function(a) {
                    this._EventList[a] = null
                },
                _dispatchEvent: function(a) {
                    (a = this._EventList[a]) && a.call(this, this, this._video.src)
                },
                onPlayEvent: function() {
                    this._EventList[c.EventType.PLAYING].call(this, this, this._video.src)
                },
                enable: function() {
                    var a = c.elements; - 1 === a.indexOf(this) && a.push(this);
                    this.setVisible(!0)
                },
                disable: function() {
                    var a = c.elements,
                        b = a.indexOf(this); - 1 !== b && a.splice(b, 1);
                    this.setVisible(!1)
                },
                destroy: function() {
                    this.disable();
                    this.removeDom()
                },
                setVisible: function(a) {
                    this._visible !==
                        a && (this._visible = !!a, this._updateVisibility())
                },
                updateMatrix: function(a) {
                    if (this._video && this._visible && !this._fullScreenEnabled) {
                        a.getWorldMatrix(k);
                        var b = cc.Camera._findRendererCamera(a);
                        b && b.worldMatrixToScreen(k, k, cc.game.canvas.width, cc.game.canvas.height);
                        b = k.m;
                        if (this._forceUpdate || this._m00 !== b[0] || this._m01 !== b[1] || this._m04 !== b[4] || this._m05 !== b[5] || this._m12 !== b[12] || this._m13 !== b[13] || this._w !== a._contentSize.width || this._h !== a._contentSize.height) {
                            this._m00 = b[0];
                            this._m01 = b[1];
                            this._m04 =
                                b[4];
                            this._m05 = b[5];
                            this._m12 = b[12];
                            this._m13 = b[13];
                            this._w = a._contentSize.width;
                            this._h = a._contentSize.height;
                            var d = cc.view._devicePixelRatio,
                                f = 1 / d;
                            d = 1 / d;
                            var h = cc.game.container,
                                g = b[0] * f,
                                m = b[1],
                                p = b[4],
                                t = b[5] * d,
                                x = h && h.style.paddingLeft ? parseInt(h.style.paddingLeft) : 0;
                            h = h && h.style.paddingBottom ? parseInt(h.style.paddingBottom) : 0;
                            if (c._polyfill.zoomInvalid) {
                                this._updateSize(this._w * g, this._h * t);
                                t = g = 1;
                                var z = this._w * f;
                                var q = this._h * d
                            } else z = this._w * f, q = this._h * d, this._updateSize(this._w, this._h);
                            a = "matrix(" +
                                g + "," + -m + "," + -p + "," + t + "," + (b[12] * f - z * b[0] * a._anchorPoint.x + x) + "," + -(b[13] * d - q * b[5] * a._anchorPoint.y + h) + ")";
                            this._video.style.transform = a;
                            this._video.style["-webkit-transform"] = a;
                            this._video.style["transform-origin"] = "0px 100% 0px";
                            this._video.style["-webkit-transform-origin"] = "0px 100% 0px";
                            e.browserType !== e.BROWSER_TYPE_IE && (this._forceUpdate = !1)
                        }
                    }
                }
            });
        c.EventType = {
            NONE: -1,
            PLAYING: 0,
            PAUSED: 1,
            STOPPED: 2,
            COMPLETED: 3,
            META_LOADED: 4,
            CLICKED: 5,
            READY_TO_PLAY: 6
        };
        c.elements = [];
        c.pauseElements = [];
        cc.game.on(cc.game.EVENT_HIDE,
            function() {
                for (var a = c.elements, b, d = 0; d < a.length; d++) b = a[d], b.isPlaying() && (b.pause(), c.pauseElements.push(b))
            });
        cc.game.on(cc.game.EVENT_SHOW, function() {
            for (var a = c.pauseElements, b = a.pop(); b;) b.play(), b = a.pop()
        });
        c._polyfill = {
            devicePixelRatio: !1,
            event: "canplay",
            canPlayType: []
        };
        g = document.createElement("video");
        g.canPlayType && (g.canPlayType("video/ogg") && (c._polyfill.canPlayType.push(".ogg"), c._polyfill.canPlayType.push(".ogv")), g.canPlayType("video/mp4") && c._polyfill.canPlayType.push(".mp4"), g.canPlayType("video/webm") &&
            c._polyfill.canPlayType.push(".webm"));
        e.OS_ANDROID !== e.os || e.browserType !== e.BROWSER_TYPE_SOUGOU && e.browserType !== e.BROWSER_TYPE_360 || (c._polyfill.zoomInvalid = !0);
        g = document.createElement("style");
        g.innerHTML = ".cocosVideo:-moz-full-screen{transform:matrix(1,0,0,1,0,0) !important;}.cocosVideo:full-screen{transform:matrix(1,0,0,1,0,0) !important;}.cocosVideo:-webkit-full-screen{transform:matrix(1,0,0,1,0,0) !important;}";
        document.head.appendChild(g);
        q.exports = c
    }, {
        "../core/platform/CCMacro": 232,
        "../core/platform/CCSys": 236,
        "../core/platform/utils": 251
    }],
    386: [function(g, q, m) {
        function h() {}
        g = g("./webview-impl");
        var e = g.EventType,
            d = cc.Class({
                name: "cc.WebView",
                extends: cc.Component,
                editor: !1,
                properties: {
                    _url: "",
                    url: {
                        type: cc.String,
                        tooltip: !1,
                        get: function() {
                            return this._url
                        },
                        set: function(d) {
                            this._url = d;
                            var c = this._impl;
                            c && c.loadURL(d)
                        }
                    },
                    webviewEvents: {
                        default: [],
                        type: cc.Component.EventHandler
                    }
                },
                statics: {
                    EventType: e,
                    Impl: g
                },
                ctor: function() {
                    this._impl = new d.Impl
                },
                onRestore: function() {
                    this._impl || (this._impl = new d.Impl)
                },
                onEnable: function() {
                    var d =
                        this._impl;
                    d.createDomElementIfNeeded(this.node.width, this.node.height);
                    !0;
                    d.setEventListener(e.LOADED, this._onWebViewLoaded.bind(this));
                    d.setEventListener(e.LOADING, this._onWebViewLoading.bind(this));
                    d.setEventListener(e.ERROR, this._onWebViewLoadError.bind(this));
                    d.loadURL(this._url);
                    d.setVisible(!0)
                },
                onDisable: function() {
                    var d = this._impl;
                    d.setVisible(!1);
                    !0;
                    d.setEventListener(e.LOADED, h);
                    d.setEventListener(e.LOADING, h);
                    d.setEventListener(e.ERROR, h)
                },
                onDestroy: function() {
                    this._impl && (this._impl.destroy(),
                        this._impl = null)
                },
                update: function(d) {
                    this._impl && this._impl.updateMatrix(this.node)
                },
                _onWebViewLoaded: function() {
                    cc.Component.EventHandler.emitEvents(this.webviewEvents, this, e.LOADED);
                    this.node.emit("loaded", this)
                },
                _onWebViewLoading: function() {
                    cc.Component.EventHandler.emitEvents(this.webviewEvents, this, e.LOADING);
                    this.node.emit("loading", this);
                    return !0
                },
                _onWebViewLoadError: function() {
                    cc.Component.EventHandler.emitEvents(this.webviewEvents, this, e.ERROR);
                    this.node.emit("error", this)
                },
                setJavascriptInterfaceScheme: function(d) {
                    this._impl &&
                        this._impl.setJavascriptInterfaceScheme(d)
                },
                setOnJSCallback: function(d) {
                    this._impl && this._impl.setOnJSCallback(d)
                },
                evaluateJS: function(d) {
                    this._impl && this._impl.evaluateJS(d)
                }
            });
        cc.WebView = q.exports = d
    }, {
        "./webview-impl": 387
    }],
    387: [function(g, q, m) {
        var h = g("../core/platform/utils");
        g = g("../core/platform/CCSys");
        var e = cc.mat4(),
            d = cc.Class({
                name: "WebViewImpl",
                ctor: function() {
                    this._EventList = {};
                    this._visible = !1;
                    this._listener = this._iframe = this._div = this._parent = null;
                    this._forceUpdate = !1;
                    this._h = this._w =
                        this._m13 = this._m12 = this._m05 = this._m04 = this._m01 = this._m00 = 0;
                    this.__eventListeners = {}
                },
                _updateVisibility: function() {
                    if (this._div) {
                        var d = this._div;
                        this._visible ? d.style.visibility = "visible" : d.style.visibility = "hidden"
                    }
                },
                _updateSize: function(d, c) {
                    var a = this._div;
                    a && (a.style.width = d + "px", a.style.height = c + "px")
                },
                _initEvent: function() {
                    var e = this._iframe;
                    if (e) {
                        var c = this.__eventListeners,
                            a = this;
                        c.load = function() {
                            a._forceUpdate = !0;
                            a._dispatchEvent(d.EventType.LOADED)
                        };
                        c.error = function() {
                            a._dispatchEvent(d.EventType.ERROR)
                        };
                        e.addEventListener("load", c.load);
                        e.addEventListener("error", c.error)
                    }
                },
                _initStyle: function() {
                    if (this._div) {
                        var d = this._div;
                        d.style.position = "absolute";
                        d.style.bottom = "0px";
                        d.style.left = "0px"
                    }
                },
                _setOpacity: function(d) {
                    var c = this._iframe;
                    c && c.style && (c.style.opacity = d / 255)
                },
                _createDom: function(e, c) {
                    d._polyfill.enableDiv ? (this._div = document.createElement("div"), this._div.style["-webkit-overflow"] = "auto", this._div.style["-webkit-overflow-scrolling"] = "touch", this._iframe = document.createElement("iframe"),
                        this._div.appendChild(this._iframe), this._iframe.style.width = "100%", this._iframe.style.height = "100%") : this._div = this._iframe = document.createElement("iframe");
                    d._polyfill.enableBG && (this._div.style.background = "#FFF");
                    this._div.style.height = c + "px";
                    this._div.style.width = e + "px";
                    this._div.style.overflow = "scroll";
                    this._iframe.style.border = "none";
                    cc.game.container.appendChild(this._div);
                    this._updateVisibility()
                },
                _createNativeControl: function(d, c) {
                    this._createDom(d, c);
                    this._initStyle();
                    this._initEvent()
                },
                createDomElementIfNeeded: function(d, c) {
                    this._div ? this._updateSize(d, c) : this._createNativeControl(d, c)
                },
                removeDom: function() {
                    var d = this._div;
                    d && (h.contains(cc.game.container, d) && cc.game.container.removeChild(d), this._div = null);
                    if (d = this._iframe) {
                        var c = this.__eventListeners;
                        d.removeEventListener("load", c.load);
                        d.removeEventListener("error", c.error);
                        c.load = null;
                        this._iframe = c.error = null
                    }
                },
                setOnJSCallback: function(d) {},
                setJavascriptInterfaceScheme: function(d) {},
                loadData: function(d, c, a, b) {},
                loadHTMLString: function(d,
                    c) {},
                loadURL: function(e) {
                    var c = this._iframe;
                    if (c) {
                        c.src = e;
                        var a = this;
                        c.addEventListener("load", function l() {
                            a._loaded = !0;
                            a._updateVisibility();
                            c.removeEventListener("load", l)
                        });
                        this._dispatchEvent(d.EventType.LOADING)
                    }
                },
                stopLoading: function() {
                    cc.logID(7800)
                },
                reload: function() {
                    var d = this._iframe;
                    d && (d = d.contentWindow) && d.location && d.location.reload()
                },
                canGoBack: function() {
                    cc.logID(7801);
                    return !0
                },
                canGoForward: function() {
                    cc.logID(7802);
                    return !0
                },
                goBack: function() {
                    try {
                        if (d._polyfill.closeHistory) return cc.logID(7803);
                        var e = this._iframe;
                        if (e) {
                            var c = e.contentWindow;
                            c && c.location && c.history.back.call(c)
                        }
                    } catch (a) {
                        cc.log(a)
                    }
                },
                goForward: function() {
                    try {
                        if (d._polyfill.closeHistory) return cc.logID(7804);
                        var e = this._iframe;
                        if (e) {
                            var c = e.contentWindow;
                            c && c.location && c.history.forward.call(c)
                        }
                    } catch (a) {
                        cc.log(a)
                    }
                },
                evaluateJS: function(e) {
                    var c = this._iframe;
                    if (c) {
                        c = c.contentWindow;
                        try {
                            c.eval(e), this._dispatchEvent(d.EventType.JS_EVALUATED)
                        } catch (a) {
                            console.error(a)
                        }
                    }
                },
                setScalesPageToFit: function() {
                    cc.logID(7805)
                },
                setEventListener: function(d,
                    c) {
                    this._EventList[d] = c
                },
                removeEventListener: function(d) {
                    this._EventList[d] = null
                },
                _dispatchEvent: function(d) {
                    (d = this._EventList[d]) && d.call(this, this, this._iframe.src)
                },
                _createRenderCmd: function() {
                    return new d.RenderCmd(this)
                },
                destroy: function() {
                    this.removeDom()
                },
                setVisible: function(d) {
                    this._visible !== d && (this._visible = !!d, this._updateVisibility())
                },
                updateMatrix: function(d) {
                    if (this._div && this._visible) {
                        d.getWorldMatrix(e);
                        var c = cc.Camera._findRendererCamera(d);
                        c && c.worldMatrixToScreen(e, e, cc.game.canvas.width,
                            cc.game.canvas.height);
                        c = e.m;
                        if (this._forceUpdate || this._m00 !== c[0] || this._m01 !== c[1] || this._m04 !== c[4] || this._m05 !== c[5] || this._m12 !== c[12] || this._m13 !== c[13] || this._w !== d._contentSize.width || this._h !== d._contentSize.height) {
                            this._m00 = c[0];
                            this._m01 = c[1];
                            this._m04 = c[4];
                            this._m05 = c[5];
                            this._m12 = c[12];
                            this._m13 = c[13];
                            this._w = d._contentSize.width;
                            this._h = d._contentSize.height;
                            var a = cc.view._devicePixelRatio,
                                b = 1 / a;
                            a = 1 / a;
                            var l = cc.game.container,
                                f = c[0] * b,
                                h = c[1],
                                k = c[4],
                                g = c[5] * a,
                                p = l && l.style.paddingLeft ?
                                parseInt(l.style.paddingLeft) : 0;
                            l = l && l.style.paddingBottom ? parseInt(l.style.paddingBottom) : 0;
                            this._updateSize(this._w, this._h);
                            c = "matrix(" + f + "," + -h + "," + -k + "," + g + "," + (c[12] * b - this._w * b * c[0] * d._anchorPoint.x + p) + "," + -(c[13] * a - this._h * a * c[5] * d._anchorPoint.y + l) + ")";
                            this._div.style.transform = c;
                            this._div.style["-webkit-transform"] = c;
                            this._div.style["transform-origin"] = "0px 100% 0px";
                            this._div.style["-webkit-transform-origin"] = "0px 100% 0px";
                            this._setOpacity(d.opacity);
                            this._forceUpdate = !1
                        }
                    }
                }
            });
        d.EventType = {
            LOADING: 0,
            LOADED: 1,
            ERROR: 2,
            JS_EVALUATED: 3
        };
        m = d._polyfill = {
            devicePixelRatio: !1,
            enableDiv: !1
        };
        g.os === g.OS_IOS && (m.enableDiv = !0);
        g.isMobile ? g.browserType === g.BROWSER_TYPE_FIREFOX && (m.enableBG = !0) : g.browserType === g.BROWSER_TYPE_IE && (m.closeHistory = !0);
        q.exports = d
    }, {
        "../core/platform/CCSys": 236,
        "../core/platform/utils": 251
    }],
    388: [function(g, q, m) {
        g("./cocos2d/core");
        g("./cocos2d/animation");
        !1;
        g("./cocos2d/particle");
        g("./cocos2d/tilemap");
        g("./cocos2d/videoplayer/CCVideoPlayer");
        g("./cocos2d/webview/CCWebView");
        g("./cocos2d/core/components/CCStudioComponent");
        g("./extensions/ccpool/CCNodePool");
        g("./cocos2d/actions");
        g("./extensions/spine");
        g("./extensions/dragonbones");
        !0;
        g("./cocos2d/deprecated")
    }, {
        "./cocos2d/actions": 8,
        "./cocos2d/animation": 17,
        "./cocos2d/core": 194,
        "./cocos2d/core/components/CCStudioComponent": void 0,
        "./cocos2d/deprecated": 337,
        "./cocos2d/particle": 343,
        "./cocos2d/particle/CCParticleAsset": 340,
        "./cocos2d/tilemap": void 0,
        "./cocos2d/tilemap/CCTiledMapAsset": 383,
        "./cocos2d/videoplayer/CCVideoPlayer": 384,
        "./cocos2d/webview/CCWebView": 386,
        "./extensions/ccpool/CCNodePool": 389,
        "./extensions/dragonbones": void 0,
        "./extensions/spine": 392
    }],
    389: [function(g, q, m) {
        cc.NodePool = function(h) {
            this.poolHandlerComp = h;
            this._pool = []
        };
        cc.NodePool.prototype = {
            constructor: cc.NodePool,
            size: function() {
                return this._pool.length
            },
            clear: function() {
                for (var h = this._pool.length, e = 0; e < h; ++e) this._pool[e].destroy();
                this._pool.length = 0
            },
            put: function(h) {
                if (h && -1 === this._pool.indexOf(h)) {
                    h.removeFromParent(!1);
                    var e = this.poolHandlerComp ?
                        h.getComponent(this.poolHandlerComp) : null;
                    e && e.unuse && e.unuse();
                    this._pool.push(h)
                }
            },
            get: function() {
                var h = this._pool.length - 1;
                if (0 > h) return null;
                var e = this._pool[h];
                this._pool.length = h;
                (h = this.poolHandlerComp ? e.getComponent(this.poolHandlerComp) : null) && h.reuse && h.reuse.apply(h, arguments);
                return e
            }
        };
        q.exports = cc.NodePool
    }, {}],
    390: [function(g, q, m) {
        var h = function(a) {
                return a && a.__esModule ? a : {
                    default: a
                }
            }(g("../../cocos2d/core/value-types/mat4")),
            e = g("../../cocos2d/core/renderer/render-flow").FLAG_TRANSFORM,
            d = function() {},
            k = function(a) {
                Object.defineProperty(a, "_worldMatDirty", {
                    get: function() {
                        return !0
                    },
                    set: function(a) {}
                });
                a._calculWorldMatrix = d;
                a._mulMat = d
            },
            c = new h["default"];
        g = cc.Class({
            name: "sp.AttachUtil",
            ctor: function() {
                this._inited = !1;
                this._attachedRootNode = this._skeletonComp = this._skeletonNode = this._skeleton = null;
                this._attachedNodeArray = [];
                this._boneIndexToNode = {}
            },
            init: function(a) {
                this._inited = !0;
                this._skeleton = a._skeleton;
                this._skeletonNode = a.node;
                this._skeletonComp = a
            },
            reset: function() {
                this._inited = !1;
                this._skeletonComp = this._skeletonNode = this._skeleton = null
            },
            _prepareAttachNode: function() {
                if (this._skeleton) {
                    var a = this._skeletonNode.getChildByName("ATTACHED_NODE_TREE");
                    a && a.isValid || (a = new cc.Node("ATTACHED_NODE_TREE"), k(a), this._skeletonNode.addChild(a));
                    this._skeletonComp.isAnimationCached() && this._skeletonComp._frameCache && this._skeletonComp._frameCache.enableCacheAttachedInfo();
                    return this._attachedRootNode = a
                }
            },
            _buildBoneAttachedNode: function(a, b) {
                var c = new cc.Node("ATTACHED_NODE:" + a.data.name);
                this._buildBoneRelation(c, a, b);
                return c
            },
            _buildBoneRelation: function(a, b, c) {
                k(a);
                a._bone = b;
                a._boneIndex = c;
                this._attachedNodeArray.push(a);
                this._boneIndexToNode[c] = a
            },
            getAttachedRootNode: function() {
                return this._attachedRootNode
            },
            getAttachedNodes: function(a) {
                var b = this._attachedNodeArray,
                    c = [];
                if (!this._inited) return c;
                for (var d = 0, e = b.length; d < e; d++) {
                    var h = b[d];
                    h && h.isValid && h.name === "ATTACHED_NODE:" + a && c.push(h)
                }
                return c
            },
            _rebuildNodeArray: function() {
                for (var a = this._boneIndexToNode = {}, b = this._attachedNodeArray,
                        c = this._attachedNodeArray = [], d = 0, e = b.length; d < e; d++) {
                    var h = b[d];
                    h && h.isValid && !h._toRemove && (c.push(h), a[h._boneIndex] = h)
                }
            },
            _sortNodeArray: function() {
                this._attachedNodeArray.sort(function(a, b) {
                    return a._boneIndex < b._boneIndex ? -1 : 1
                })
            },
            _getNodeByBoneIndex: function(a) {
                return (a = this._boneIndexToNode[a]) && a.isValid ? a : null
            },
            destroyAttachedNodes: function(a) {
                if (this._inited) {
                    for (var b = this._attachedNodeArray, c = function p(a) {
                                for (var b = a.children, c = 0, d = b.length; c < d; c++) {
                                    var f = b[c];
                                    f && p(f)
                                }
                                a._toRemove = !0
                            }, d =
                            0, e = b.length; d < e; d++) {
                        var h = b[d];
                        h && h.isValid && h.name.split("ATTACHED_NODE:")[1] === a && (c(h), h.removeFromParent(!0), h.destroy(), b[d] = null)
                    }
                    this._rebuildNodeArray()
                }
            },
            generateAttachedNodes: function(a) {
                var b = [];
                if (!this._inited) return b;
                var c = this._prepareAttachNode();
                if (!c) return b;
                for (var d = [], e = this._skeleton.bones, h = 0, k = e.length; h < k; h++) {
                    var g = e[h];
                    g.data.name == a && d.push(g)
                }
                var t = function(a) {
                    if (a) {
                        var b = a.data,
                            d = this._getNodeByBoneIndex(b.index);
                        if (d) return d;
                        d = this._buildBoneAttachedNode(a, b.index);
                        a = t(a.parent) || c;
                        d.parent = a;
                        return d
                    }
                }.bind(this);
                a = 0;
                for (e = d.length; a < e; a++) h = t(d[a]), b.push(h);
                this._sortNodeArray();
                return b
            },
            destroyAllAttachedNodes: function() {
                this._attachedRootNode = null;
                this._attachedNodeArray.length = 0;
                this._boneIndexToNode = {};
                if (this._inited) {
                    var a = this._skeletonNode.getChildByName("ATTACHED_NODE_TREE");
                    a && (a.removeFromParent(!0), a.destroy())
                }
            },
            generateAllAttachedNodes: function() {
                if (this._inited) {
                    this._boneIndexToNode = {};
                    this._attachedNodeArray.length = 0;
                    var a = this._prepareAttachNode();
                    if (a) {
                        for (var b = this._skeleton.bones, c = 0, d = b.length; c < d; c++) {
                            var e = b[c],
                                h = e.data,
                                k;
                            if (k = e.parent ? this._boneIndexToNode[e.parent.data.index] : a) {
                                var g = k.getChildByName("ATTACHED_NODE:" + h.name);
                                g && g.isValid ? this._buildBoneRelation(g, e, h.index) : (g = this._buildBoneAttachedNode(e, h.index), k.addChild(g))
                            }
                        }
                        return a
                    }
                }
            },
            _hasAttachedNode: function() {
                return this._inited ? !!this._skeletonNode.getChildByName("ATTACHED_NODE_TREE") : !1
            },
            _associateAttachedNode: function() {
                if (this._inited) {
                    var a = this._skeletonNode.getChildByName("ATTACHED_NODE_TREE");
                    if (a && a.isValid) {
                        this._attachedRootNode = a;
                        this._boneIndexToNode = {};
                        this._attachedNodeArray.length = 0;
                        k(a);
                        !0;
                        this._skeletonComp.isAnimationCached() && this._skeletonComp._frameCache && this._skeletonComp._frameCache.enableCacheAttachedInfo();
                        for (var b = this._skeleton.bones, c = 0, d = b.length; c < d; c++) {
                            var e = b[c],
                                h = e.data,
                                g;
                            (g = e.parent ? this._boneIndexToNode[e.parent.data.index] : a) && (g = g.getChildByName("ATTACHED_NODE:" + h.name)) && g.isValid && this._buildBoneRelation(g, e, h.index)
                        }
                    }
                }
            },
            _syncAttachedNode: function() {
                if (this._inited) {
                    var a =
                        this._attachedRootNode,
                        b = this._attachedNodeArray;
                    if (a && a.isValid) {
                        h["default"].copy(a._worldMatrix, this._skeletonNode._worldMatrix);
                        a._renderFlag &= ~e;
                        var d;
                        if (d = this._skeletonComp.isAnimationCached() ? this._skeletonComp._curFrame && this._skeletonComp._curFrame.boneInfos : this._skeleton.bones) {
                            for (var f = this._skeletonNode._mulMat, k = !1, g = 0, m = b.length; g < m; g++) {
                                var p = b[g];
                                if (p && p.isValid) {
                                    var t = d[p._boneIndex];
                                    if (t) {
                                        var x = p._worldMatrix,
                                            z = a._worldMatrix,
                                            q = c.m;
                                        q[0] = t.a;
                                        q[1] = t.c;
                                        q[4] = t.b;
                                        q[5] = t.d;
                                        q[12] = t.worldX;
                                        q[13] = t.worldY;
                                        f(x, z, c);
                                        p._renderFlag &= ~e
                                    } else p.removeFromParent(!0), p.destroy(), b[g] = null, k = !0
                                } else b[g] = null, k = !0
                            }
                            k && this._rebuildNodeArray()
                        }
                    } else this._attachedRootNode = null, b.length = 0
                }
            }
        });
        q.exports = sp.AttachUtil = g
    }, {
        "../../cocos2d/core/renderer/render-flow": 260,
        "../../cocos2d/core/value-types/mat4": 327
    }],
    391: [function(g, q, m) {
        var h = g("./track-entry-listeners");
        m = g("../../cocos2d/core/components/CCRenderComponent");
        var e = g("./lib/spine"),
            d = g("../../cocos2d/core/graphics/graphics"),
            k = g("../../cocos2d/core/renderer/render-flow").FLAG_POST_RENDER,
            c = g("./skeleton-cache"),
            a = g("./AttachUtil");
        g = cc.Enum({
            default: -1
        });
        var b = cc.Enum({
                "<None>": 0
            }),
            l = cc.Enum({
                REALTIME: 0,
                SHARED_CACHE: 1,
                PRIVATE_CACHE: 2
            });
        sp.Skeleton = cc.Class({
            name: "sp.Skeleton",
            extends: m,
            editor: !1,
            statics: {
                AnimationCacheMode: l
            },
            properties: {
                paused: {
                    default: !1,
                    visible: !1
                },
                skeletonData: {
                    default: null,
                    type: sp.SkeletonData,
                    notify: function() {
                        !1;
                        this.defaultAnimation = this.defaultSkin = "";
                        this._updateSkeletonData()
                    },
                    tooltip: !1
                },
                defaultSkin: {
                    default: "",
                    visible: !1
                },
                defaultAnimation: {
                    default: "",
                    visible: !1
                },
                animation: {
                    get: function() {
                        if (this.isAnimationCached()) return this._animationName;
                        var a = this.getCurrent(0);
                        return a && a.animation.name || ""
                    },
                    set: function(a) {
                        (this.defaultAnimation = a) ? this.setAnimation(0, a, this.loop): this.isAnimationCached() || (this.clearTrack(0), this.setToSetupPose())
                    },
                    visible: !1
                },
                _defaultSkinIndex: {
                    get: function() {
                        if (this.skeletonData) {
                            var a = this.skeletonData.getSkinsEnum();
                            if (a)
                                if ("" === this.defaultSkin) a.hasOwnProperty(0) && (this._defaultSkinIndex = 0);
                                else if (a = a[this.defaultSkin],
                                void 0 !== a) return a
                        }
                        return 0
                    },
                    set: function(a) {
                        var b;
                        this.skeletonData && (b = this.skeletonData.getSkinsEnum());
                        if (!b) return cc.errorID("", this.name);
                        a = b[a];
                        void 0 !== a ? (this.defaultSkin = a, this.setSkin(this.defaultSkin), !1) : cc.errorID(7501, this.name)
                    },
                    type: g,
                    visible: !0,
                    animatable: !1,
                    displayName: "Default Skin",
                    tooltip: !1
                },
                _animationIndex: {
                    get: function() {
                        var a = this.animation;
                        if (this.skeletonData && a) {
                            var b = this.skeletonData.getAnimsEnum();
                            if (b && (a = b[a], void 0 !== a)) return a
                        }
                        return 0
                    },
                    set: function(a) {
                        if (0 ===
                            a) this.animation = "";
                        else {
                            var b;
                            this.skeletonData && (b = this.skeletonData.getAnimsEnum());
                            if (!b) return cc.errorID(7502, this.name);
                            a = b[a];
                            void 0 !== a ? this.animation = a : cc.errorID(7503, this.name)
                        }
                    },
                    type: b,
                    visible: !0,
                    animatable: !1,
                    displayName: "Animation",
                    tooltip: !1
                },
                _preCacheMode: -1,
                _cacheMode: l.REALTIME,
                _defaultCacheMode: {
                    default: 0,
                    type: l,
                    notify: function() {
                        this.setAnimationCacheMode(this._defaultCacheMode)
                    },
                    editorOnly: !0,
                    visible: !0,
                    animatable: !1,
                    displayName: "Animation Cache Mode",
                    tooltip: !1
                },
                loop: {
                    default: !0,
                    tooltip: !1
                },
                premultipliedAlpha: {
                    default: !0,
                    tooltip: !1
                },
                timeScale: {
                    default: 1,
                    tooltip: !1
                },
                debugSlots: {
                    default: !1,
                    editorOnly: !0,
                    tooltip: !1,
                    notify: function() {
                        this._updateDebugDraw()
                    }
                },
                debugBones: {
                    default: !1,
                    editorOnly: !0,
                    tooltip: !1,
                    notify: function() {
                        this._updateDebugDraw()
                    }
                },
                debugMesh: {
                    default: !1,
                    editorOnly: !0,
                    tooltip: !1,
                    notify: function() {
                        this._updateDebugDraw()
                    }
                },
                useTint: {
                    default: !1,
                    tooltip: !1,
                    notify: function() {
                        this._updateUseTint()
                    }
                },
                enableBatch: {
                    default: !1,
                    notify: function() {
                        this._updateBatch()
                    },
                    tooltip: !1
                },
                _accTime: 0,
                _playCount: 0,
                _frameCache: null,
                _curFrame: null,
                _skeletonCache: null,
                _animationName: "",
                _animationQueue: [],
                _headAniInfo: null,
                _playTimes: 0,
                _isAniComplete: !0
            },
            ctor: function() {
                this._listener = this._rootBone = this._skeleton = this._effectDelegate = null;
                this._materialCache = {};
                this._debugRenderer = null;
                this._endSlotIndex = this._startSlotIndex = -1;
                this._startEntry = {
                    animation: {
                        name: ""
                    },
                    trackIndex: 0
                };
                this._endEntry = {
                    animation: {
                        name: ""
                    },
                    trackIndex: 0
                };
                this.attachUtil = new a
            },
            _getDefaultMaterial: function() {
                return cc.Material.getBuiltinMaterial("2d-spine")
            },
            _updateMaterial: function() {
                var a = this.useTint || this.isAnimationCached() && !0,
                    b = this.getMaterial(0);
                if (b) {
                    b.define("USE_TINT", a);
                    b.define("CC_USE_MODEL", !this.enableBatch);
                    a = this.premultipliedAlpha ? cc.gfx.BLEND_ONE : cc.gfx.BLEND_SRC_ALPHA;
                    var c = cc.gfx.BLEND_ONE_MINUS_SRC_ALPHA;
                    b.setBlend(!0, cc.gfx.BLEND_FUNC_ADD, a, a, cc.gfx.BLEND_FUNC_ADD, c, c)
                }
                this._materialCache = {}
            },
            disableRender: function() {
                this._super();
                this.node._renderFlag &= ~k
            },
            markForRender: function(a) {
                this._super(a);
                a ? this.node._renderFlag |= k : this.node._renderFlag &=
                    ~k
            },
            _updateUseTint: function() {
                var a = this.getMaterial(0);
                if (a) {
                    var b = this.useTint || this.isAnimationCached() && !0;
                    a.define("USE_TINT", b)
                }
                this._materialCache = {}
            },
            _updateBatch: function() {
                var a = this.getMaterial(0);
                a && a.define("CC_USE_MODEL", !this.enableBatch);
                this._materialCache = {}
            },
            _validateRender: function() {
                var a = this.skeletonData;
                a && a.isTexturesLoaded() ? this._super() : this.disableRender()
            },
            setSkeletonData: function(a) {
                null != a.width && null != a.height && this.node.setContentSize(a.width, a.height);
                !0;
                this._cacheMode ===
                    l.SHARED_CACHE ? this._skeletonCache = c.sharedCache : this._cacheMode === l.PRIVATE_CACHE && (this._skeletonCache = new c, this._skeletonCache.enablePrivateMode());
                this.isAnimationCached() ? ((this.debugBones || this.debugSlots) && cc.warn("Debug bones or slots is invalid in cached mode"), a = this._skeletonCache.getSkeletonCache(this.skeletonData._uuid, a), this._skeleton = a.skeleton, this._clipper = a.clipper) : (this._skeleton = new e.Skeleton(a), this._clipper = new e.SkeletonClipping);
                this._rootBone = this._skeleton.getRootBone();
                this.markForRender(!0)
            },
            setSlotsRange: function(a, b) {
                this.isAnimationCached() ? cc.warn("Slots visible range can not be modified in cached mode.") : (this._startSlotIndex = a, this._endSlotIndex = b)
            },
            setAnimationStateData: function(a) {
                this.isAnimationCached() ? cc.warn("'setAnimationStateData' interface can not be invoked in cached mode.") : (a = new e.AnimationState(a), this._listener && (this._state && this._state.removeListener(this._listener), a.addListener(this._listener)), this._state = a)
            },
            __preload: function() {
                this._super();
                !1;
                for (var a = this.node.children, b = 0, c = a.length; b < c; b++) {
                    var d = a[b];
                    d && "DEBUG_DRAW_NODE" === d._name && d.destroy()
                }
                this._updateSkeletonData();
                this._updateDebugDraw();
                this._updateUseTint();
                this._updateBatch()
            },
            setAnimationCacheMode: function(a) {
                this._preCacheMode !== a && (this._cacheMode = a, this._updateSkeletonData(), this._updateUseTint())
            },
            isAnimationCached: function() {
                !1;
                return this._cacheMode !== l.REALTIME
            },
            update: function(a) {
                !1;
                this.paused || (a *= this.timeScale * sp.timeScale, this.isAnimationCached() ? this._isAniComplete ?
                    0 !== this._animationQueue.length || this._headAniInfo ? (this._headAniInfo || (this._headAniInfo = this._animationQueue.shift()), this._accTime += a, this._accTime > this._headAniInfo.delay && (a = this._headAniInfo, this._headAniInfo = null, this.setAnimation(0, a.animationName, a.loop))) : (a = this._frameCache) && a.isInvalid() && (a.updateToFrame(), a = a.frames, this._curFrame = a[a.length - 1]) : this._updateCache(a) : this._updateRealtime(a))
            },
            _emitCacheCompleteEvent: function() {
                this._listener && (this._endEntry.animation.name = this._animationName,
                    this._listener.complete && this._listener.complete(this._endEntry), this._listener.end && this._listener.end(this._endEntry))
            },
            _updateCache: function(a) {
                var b = this._frameCache;
                if (b.isInited()) {
                    var d = b.frames,
                        f = c.FrameTime;
                    0 == this._accTime && 0 == this._playCount && (this._startEntry.animation.name = this._animationName, this._listener && this._listener.start && this._listener.start(this._startEntry));
                    this._accTime += a;
                    a = Math.floor(this._accTime / f);
                    b.isCompleted || b.updateToFrame(a);
                    if (b.isCompleted && a >= d.length) {
                        this._playCount++;
                        if (0 < this._playTimes && this._playCount >= this._playTimes) {
                            this._curFrame = d[d.length - 1];
                            this._playCount = this._accTime = 0;
                            this._isAniComplete = !0;
                            this._emitCacheCompleteEvent();
                            return
                        }
                        a = this._accTime = 0;
                        this._emitCacheCompleteEvent()
                    }
                    this._curFrame = d[a]
                }
            },
            _updateRealtime: function(a) {
                var b = this._skeleton,
                    c = this._state;
                b && (b.update(a), c && (c.update(a), c.apply(b)))
            },
            setVertexEffectDelegate: function(a) {
                this._effectDelegate = a
            },
            updateWorldTransform: function() {
                this.isAnimationCached() && this._skeleton && this._skeleton.updateWorldTransform()
            },
            setToSetupPose: function() {
                this._skeleton && this._skeleton.setToSetupPose()
            },
            setBonesToSetupPose: function() {
                this._skeleton && this._skeleton.setBonesToSetupPose()
            },
            setSlotsToSetupPose: function() {
                this._skeleton && this._skeleton.setSlotsToSetupPose()
            },
            updateAnimationCache: function(a) {
                if (this.isAnimationCached()) {
                    var b = this.skeletonData._uuid;
                    this._skeletonCache && this._skeletonCache.updateAnimationCache(b, a)
                }
            },
            invalidAnimationCache: function() {
                this.isAnimationCached() && this._skeletonCache && this._skeletonCache.invalidAnimationCache(this.skeletonData._uuid)
            },
            findBone: function(a) {
                return this._skeleton ? this._skeleton.findBone(a) : null
            },
            findSlot: function(a) {
                return this._skeleton ? this._skeleton.findSlot(a) : null
            },
            setSkin: function(a) {
                this._skeleton && (this._skeleton.setSkinByName(a), this._skeleton.setSlotsToSetupPose());
                this.invalidAnimationCache()
            },
            getAttachment: function(a, b) {
                return this._skeleton ? this._skeleton.getAttachmentByName(a, b) : null
            },
            setAttachment: function(a, b) {
                this._skeleton && this._skeleton.setAttachment(a, b);
                this.invalidAnimationCache()
            },
            getTextureAtlas: function(a) {
                return a.region
            },
            setMix: function(a, b, c) {
                this._state && this._state.data.setMix(a, b, c)
            },
            setAnimation: function(a, b, c) {
                this._playTimes = c ? 0 : 1;
                this._animationName = b;
                if (this.isAnimationCached()) {
                    0 !== a && cc.warn("Track index can not greater than 0 in cached mode.");
                    if (!this._skeletonCache) return null;
                    (a = this._skeletonCache.getAnimationCache(this.skeletonData._uuid, b)) || (a = this._skeletonCache.initAnimationCache(this.skeletonData._uuid, b));
                    a && (this._isAniComplete = !1, this._playCount = this._accTime = 0, this._frameCache = a, this.attachUtil._hasAttachedNode() &&
                        this._frameCache.enableCacheAttachedInfo(), this._frameCache.updateToFrame(0), this._curFrame = this._frameCache.frames[0])
                } else if (this._skeleton) {
                    var d = this._skeleton.data.findAnimation(b);
                    if (!d) return cc.logID(7509, b), null;
                    b = this._state.setAnimationWith(a, d, c);
                    this._state.apply(this._skeleton);
                    return b
                }
                return null
            },
            addAnimation: function(a, b, c, d) {
                d = d || 0;
                if (this.isAnimationCached()) 0 !== a && cc.warn("Track index can not greater than 0 in cached mode."), this._animationQueue.push({
                    animationName: b,
                    loop: c,
                    delay: d
                });
                else if (this._skeleton) {
                    var f = this._skeleton.data.findAnimation(b);
                    return f ? this._state.addAnimationWith(a, f, c, d) : (cc.logID(7510, b), null)
                }
                return null
            },
            findAnimation: function(a) {
                return this._skeleton ? this._skeleton.data.findAnimation(a) : null
            },
            getCurrent: function(a) {
                if (this.isAnimationCached()) cc.warn("'getCurrent' interface can not be invoked in cached mode.");
                else if (this._state) return this._state.getCurrent(a);
                return null
            },
            clearTracks: function() {
                this.isAnimationCached() ? cc.warn("'clearTracks' interface can not be invoked in cached mode.") :
                    this._state && this._state.clearTracks()
            },
            clearTrack: function(a) {
                this.isAnimationCached() ? cc.warn("'clearTrack' interface can not be invoked in cached mode.") : this._state && (this._state.clearTrack(a), !1)
            },
            setStartListener: function(a) {
                this._ensureListener();
                this._listener.start = a
            },
            setInterruptListener: function(a) {
                this._ensureListener();
                this._listener.interrupt = a
            },
            setEndListener: function(a) {
                this._ensureListener();
                this._listener.end = a
            },
            setDisposeListener: function(a) {
                this._ensureListener();
                this._listener.dispose =
                    a
            },
            setCompleteListener: function(a) {
                this._ensureListener();
                this._listener.complete = a
            },
            setEventListener: function(a) {
                this._ensureListener();
                this._listener.event = a
            },
            setTrackStartListener: function(a, b) {
                h.getListeners(a).start = b
            },
            setTrackInterruptListener: function(a, b) {
                h.getListeners(a).interrupt = b
            },
            setTrackEndListener: function(a, b) {
                h.getListeners(a).end = b
            },
            setTrackDisposeListener: function(a, b) {
                h.getListeners(a).dispose = b
            },
            setTrackCompleteListener: function(a, b) {
                h.getListeners(a).complete = function(a) {
                    b(a,
                        Math.floor(a.trackTime / a.animationEnd))
                }
            },
            setTrackEventListener: function(a, b) {
                h.getListeners(a).event = b
            },
            getState: function() {
                return this._state
            },
            _resetDefaultAnim: !1,
            _resetDefaultSkin: !1,
            _updateAnimEnum: !1,
            _updateSkinEnum: !1,
            _ensureListener: function() {
                this._listener || (this._listener = new h, this._state && this._state.addListener(this._listener))
            },
            _updateSkeletonData: function() {
                if (this.skeletonData) {
                    var a = this.skeletonData.getRuntimeData();
                    if (a) {
                        try {
                            this.setSkeletonData(a), this.isAnimationCached() || this.setAnimationStateData(new e.AnimationStateData(this._skeleton.data)),
                                this.defaultSkin && this.setSkin(this.defaultSkin)
                        } catch (n) {
                            cc.warn(n)
                        }
                        this.attachUtil.init(this);
                        this.attachUtil._associateAttachedNode();
                        this._preCacheMode = this._cacheMode;
                        this.animation = this.defaultAnimation
                    } else this.disableRender()
                } else this.disableRender()
            },
            _refreshInspector: function() {
                this._updateAnimEnum();
                this._updateSkinEnum();
                Editor.Utils.refreshSelectedInspector("node", this.node.uuid)
            },
            _updateDebugDraw: function() {
                if (this.debugBones || this.debugSlots) {
                    if (!this._debugRenderer) {
                        var a = new cc.PrivateNode;
                        a.name = "DEBUG_DRAW_NODE";
                        a = a.addComponent(d);
                        a.lineWidth = 1;
                        a.strokeColor = cc.color(255, 0, 0, 255);
                        this._debugRenderer = a
                    }
                    this._debugRenderer.node.parent = this.node;
                    this.isAnimationCached() && cc.warn("Debug bones or slots is invalid in cached mode")
                } else this._debugRenderer && (this._debugRenderer.node.parent = null)
            }
        });
        q.exports = sp.Skeleton
    }, {
        "../../cocos2d/core/components/CCRenderComponent": 149,
        "../../cocos2d/core/graphics/graphics": 190,
        "../../cocos2d/core/renderer/render-flow": 260,
        "./AttachUtil": 390,
        "./lib/spine": 393,
        "./skeleton-cache": 394,
        "./track-entry-listeners": 398
    }],
    392: [function(g, q, m) {
        q = "undefined" === typeof window ? global : window;
        !0;
        q.spine = g("./lib/spine");
        q.sp = q.sp || {};
        sp._timeScale = 1;
        Object.defineProperty(sp, "timeScale", {
            get: function() {
                return this._timeScale
            },
            set: function(h) {
                this._timeScale = h
            },
            configurable: !0
        });
        sp.ATTACHMENT_TYPE = {
            REGION: 0,
            BOUNDING_BOX: 1,
            MESH: 2,
            SKINNED_MESH: 3
        };
        sp.AnimationEventType = cc.Enum({
            START: 0,
            INTERRUPT: 1,
            END: 2,
            DISPOSE: 3,
            COMPLETE: 4,
            EVENT: 5
        });
        !0;
        sp.spine = q.spine;
        !0;
        g("./skeleton-texture");
        g("./skeleton-data");
        g("./vertex-effect-delegate");
        g("./Skeleton");
        g("./spine-assembler")
    }, {
        "./Skeleton": 391,
        "./lib/spine": 393,
        "./skeleton-data": 395,
        "./skeleton-texture": 396,
        "./spine-assembler": 397,
        "./vertex-effect-delegate": 399
    }],
    393: [function(g, q, m) {
        var h = (void 0, function() {
                var d = function(e, c) {
                    d = Object.setPrototypeOf || {
                        __proto__: []
                    }
                    instanceof Array && function(a, b) {
                        a.__proto__ = b
                    } || function(a, b) {
                        for (var c in b) b.hasOwnProperty(c) && (a[c] = b[c])
                    };
                    return d(e, c)
                };
                return function(e, c) {
                    function a() {
                        this.constructor =
                            e
                    }
                    d(e, c);
                    e.prototype = null === c ? Object.create(c) : (a.prototype = c.prototype, new a)
                }
            }()),
            e;
        (function(d) {
            var e = function() {
                function a(a, b, c) {
                    if (null == a) throw Error("name cannot be null.");
                    if (null == b) throw Error("timelines cannot be null.");
                    this.name = a;
                    this.timelines = b;
                    this.timelineIds = [];
                    for (a = 0; a < b.length; a++) this.timelineIds[b[a].getPropertyId()] = !0;
                    this.duration = c
                }
                a.prototype.hasTimeline = function(a) {
                    return 1 == this.timelineIds[a]
                };
                a.prototype.apply = function(a, b, c, d, f, e, l, h) {
                    if (null == a) throw Error("skeleton cannot be null.");
                    d && 0 != this.duration && (c %= this.duration, 0 < b && (b %= this.duration));
                    d = this.timelines;
                    for (var k = 0, g = d.length; k < g; k++) d[k].apply(a, b, c, f, e, l, h)
                };
                a.binarySearch = function(a, b, c) {
                    void 0 === c && (c = 1);
                    var d = 0,
                        f = a.length / c - 2;
                    if (0 == f) return c;
                    for (var e = f >>> 1;;) {
                        a[(e + 1) * c] <= b ? d = e + 1 : f = e;
                        if (d == f) return (d + 1) * c;
                        e = d + f >>> 1
                    }
                };
                a.linearSearch = function(a, b, c) {
                    for (var d = 0, f = a.length - c; d <= f; d += c)
                        if (a[d] > b) return d;
                    return -1
                };
                return a
            }();
            d.Animation = e;
            var c;
            (function(a) {
                a[a.setup = 0] = "setup";
                a[a.first = 1] = "first";
                a[a.replace = 2] =
                    "replace";
                a[a.add = 3] = "add"
            })(c = d.MixBlend || (d.MixBlend = {}));
            var a;
            (function(a) {
                a[a.mixIn = 0] = "mixIn";
                a[a.mixOut = 1] = "mixOut"
            })(a = d.MixDirection || (d.MixDirection = {}));
            var b;
            (function(a) {
                a[a.rotate = 0] = "rotate";
                a[a.translate = 1] = "translate";
                a[a.scale = 2] = "scale";
                a[a.shear = 3] = "shear";
                a[a.attachment = 4] = "attachment";
                a[a.color = 5] = "color";
                a[a.deform = 6] = "deform";
                a[a.event = 7] = "event";
                a[a.drawOrder = 8] = "drawOrder";
                a[a.ikConstraint = 9] = "ikConstraint";
                a[a.transformConstraint = 10] = "transformConstraint";
                a[a.pathConstraintPosition =
                    11] = "pathConstraintPosition";
                a[a.pathConstraintSpacing = 12] = "pathConstraintSpacing";
                a[a.pathConstraintMix = 13] = "pathConstraintMix";
                a[a.twoColor = 14] = "twoColor"
            })(b = d.TimelineType || (d.TimelineType = {}));
            var l = function() {
                function a(b) {
                    if (0 >= b) throw Error("frameCount must be > 0: " + b);
                    this.curves = d.Utils.newFloatArray((b - 1) * a.BEZIER_SIZE)
                }
                a.prototype.getFrameCount = function() {
                    return this.curves.length / a.BEZIER_SIZE + 1
                };
                a.prototype.setLinear = function(b) {
                    this.curves[b * a.BEZIER_SIZE] = a.LINEAR
                };
                a.prototype.setStepped =
                    function(b) {
                        this.curves[b * a.BEZIER_SIZE] = a.STEPPED
                    };
                a.prototype.getCurveType = function(b) {
                    b *= a.BEZIER_SIZE;
                    if (b == this.curves.length) return a.LINEAR;
                    b = this.curves[b];
                    return b == a.LINEAR ? a.LINEAR : b == a.STEPPED ? a.STEPPED : a.BEZIER
                };
                a.prototype.setCurve = function(b, c, d, f, e) {
                    var l = .03 * (2 * -c + f),
                        h = .03 * (2 * -d + e);
                    f = .006 * (3 * (c - f) + 1);
                    e = .006 * (3 * (d - e) + 1);
                    var k = 2 * l + f,
                        g = 2 * h + e;
                    c = .3 * c + l + .16666667 * f;
                    d = .3 * d + h + .16666667 * e;
                    b *= a.BEZIER_SIZE;
                    h = this.curves;
                    h[b++] = a.BEZIER;
                    l = c;
                    for (var n = d, p = b + a.BEZIER_SIZE - 1; b < p; b += 2) h[b] = l, h[b +
                        1] = n, c += k, d += g, k += f, g += e, l += c, n += d
                };
                a.prototype.getCurvePercent = function(b, c) {
                    c = d.MathUtils.clamp(c, 0, 1);
                    var f = this.curves;
                    b *= a.BEZIER_SIZE;
                    var e = f[b];
                    if (e == a.LINEAR) return c;
                    if (e == a.STEPPED) return 0;
                    b++;
                    e = 0;
                    for (var l = b, h = b + a.BEZIER_SIZE - 1; b < h; b += 2)
                        if (e = f[b], e >= c) return b == l ? h = l = 0 : (l = f[b - 2], h = f[b - 1]), h + (f[b + 1] - h) * (c - l) / (e - l);
                    f = f[b - 1];
                    return f + (1 - f) * (c - e) / (1 - e)
                };
                a.LINEAR = 0;
                a.STEPPED = 1;
                a.BEZIER = 2;
                a.BEZIER_SIZE = 19;
                return a
            }();
            d.CurveTimeline = l;
            var f = function(a) {
                function f(b) {
                    var c = a.call(this, b) || this;
                    c.frames = d.Utils.newFloatArray(b << 1);
                    return c
                }
                h(f, a);
                f.prototype.getPropertyId = function() {
                    return (b.rotate << 24) + this.boneIndex
                };
                f.prototype.setFrame = function(a, b, c) {
                    a <<= 1;
                    this.frames[a] = b;
                    this.frames[a + f.ROTATION] = c
                };
                f.prototype.apply = function(a, b, d, l, h, k, g) {
                    b = this.frames;
                    a = a.bones[this.boneIndex];
                    if (a.active)
                        if (d < b[0]) switch (k) {
                            case c.setup:
                                a.rotation = a.data.rotation;
                                break;
                            case c.first:
                                k = a.data.rotation - a.rotation, a.rotation += (k - 360 * (16384 - (16384.499999999996 - k / 360 | 0))) * h
                        } else if (d >= b[b.length - f.ENTRIES]) switch (d =
                            b[b.length + f.PREV_ROTATION], k) {
                            case c.setup:
                                a.rotation = a.data.rotation + d * h;
                                break;
                            case c.first:
                            case c.replace:
                                d += a.data.rotation - a.rotation, d -= 360 * (16384 - (16384.499999999996 - d / 360 | 0));
                            case c.add:
                                a.rotation += d * h
                        } else {
                            g = e.binarySearch(b, d, f.ENTRIES);
                            l = b[g + f.PREV_ROTATION];
                            var n = b[g];
                            d = this.getCurvePercent((g >> 1) - 1, 1 - (d - n) / (b[g + f.PREV_TIME] - n));
                            b = b[g + f.ROTATION] - l;
                            b = l + (b - 360 * (16384 - (16384.499999999996 - b / 360 | 0))) * d;
                            switch (k) {
                                case c.setup:
                                    a.rotation = a.data.rotation + (b - 360 * (16384 - (16384.499999999996 - b / 360 |
                                        0))) * h;
                                    break;
                                case c.first:
                                case c.replace:
                                    b += a.data.rotation - a.rotation;
                                case c.add:
                                    a.rotation += (b - 360 * (16384 - (16384.499999999996 - b / 360 | 0))) * h
                            }
                        }
                };
                f.ENTRIES = 2;
                f.PREV_TIME = -2;
                f.PREV_ROTATION = -1;
                f.ROTATION = 1;
                return f
            }(l);
            d.RotateTimeline = f;
            f = function(a) {
                function f(b) {
                    var c = a.call(this, b) || this;
                    c.frames = d.Utils.newFloatArray(b * f.ENTRIES);
                    return c
                }
                h(f, a);
                f.prototype.getPropertyId = function() {
                    return (b.translate << 24) + this.boneIndex
                };
                f.prototype.setFrame = function(a, b, c, d) {
                    a *= f.ENTRIES;
                    this.frames[a] = b;
                    this.frames[a +
                        f.X] = c;
                    this.frames[a + f.Y] = d
                };
                f.prototype.apply = function(a, b, d, l, h, k, g) {
                    b = this.frames;
                    a = a.bones[this.boneIndex];
                    if (a.active)
                        if (d < b[0]) switch (k) {
                            case c.setup:
                                a.x = a.data.x;
                                a.y = a.data.y;
                                break;
                            case c.first:
                                a.x += (a.data.x - a.x) * h, a.y += (a.data.y - a.y) * h
                        } else {
                            if (d >= b[b.length - f.ENTRIES]) l = b[b.length + f.PREV_X], g = b[b.length + f.PREV_Y];
                            else {
                                var n = e.binarySearch(b, d, f.ENTRIES);
                                l = b[n + f.PREV_X];
                                g = b[n + f.PREV_Y];
                                var p = b[n];
                                d = this.getCurvePercent(n / f.ENTRIES - 1, 1 - (d - p) / (b[n + f.PREV_TIME] - p));
                                l += (b[n + f.X] - l) * d;
                                g += (b[n +
                                    f.Y] - g) * d
                            }
                            switch (k) {
                                case c.setup:
                                    a.x = a.data.x + l * h;
                                    a.y = a.data.y + g * h;
                                    break;
                                case c.first:
                                case c.replace:
                                    a.x += (a.data.x + l - a.x) * h;
                                    a.y += (a.data.y + g - a.y) * h;
                                    break;
                                case c.add:
                                    a.x += l * h, a.y += g * h
                            }
                        }
                };
                f.ENTRIES = 3;
                f.PREV_TIME = -3;
                f.PREV_X = -2;
                f.PREV_Y = -1;
                f.X = 1;
                f.Y = 2;
                return f
            }(l);
            d.TranslateTimeline = f;
            var g = function(f) {
                function l(a) {
                    return f.call(this, a) || this
                }
                h(l, f);
                l.prototype.getPropertyId = function() {
                    return (b.scale << 24) + this.boneIndex
                };
                l.prototype.apply = function(b, f, h, k, g, n, p) {
                    var m = this.frames;
                    b = b.bones[this.boneIndex];
                    if (b.active)
                        if (h < m[0]) switch (n) {
                            case c.setup:
                                b.scaleX = b.data.scaleX;
                                b.scaleY = b.data.scaleY;
                                break;
                            case c.first:
                                b.scaleX += (b.data.scaleX - b.scaleX) * g, b.scaleY += (b.data.scaleY - b.scaleY) * g
                        } else {
                            if (h >= m[m.length - l.ENTRIES]) f = m[m.length + l.PREV_X] * b.data.scaleX, k = m[m.length + l.PREV_Y] * b.data.scaleY;
                            else {
                                var t = e.binarySearch(m, h, l.ENTRIES);
                                f = m[t + l.PREV_X];
                                k = m[t + l.PREV_Y];
                                var u = m[t];
                                h = this.getCurvePercent(t / l.ENTRIES - 1, 1 - (h - u) / (m[t + l.PREV_TIME] - u));
                                f = (f + (m[t + l.X] - f) * h) * b.data.scaleX;
                                k = (k + (m[t + l.Y] - k) * h) * b.data.scaleY
                            }
                            if (1 ==
                                g) n == c.add ? (b.scaleX += f - b.data.scaleX, b.scaleY += k - b.data.scaleY) : (b.scaleX = f, b.scaleY = k);
                            else if (p == a.mixOut) switch (n) {
                                case c.setup:
                                    n = b.data.scaleX;
                                    p = b.data.scaleY;
                                    b.scaleX = n + (Math.abs(f) * d.MathUtils.signum(n) - n) * g;
                                    b.scaleY = p + (Math.abs(k) * d.MathUtils.signum(p) - p) * g;
                                    break;
                                case c.first:
                                case c.replace:
                                    n = b.scaleX;
                                    p = b.scaleY;
                                    b.scaleX = n + (Math.abs(f) * d.MathUtils.signum(n) - n) * g;
                                    b.scaleY = p + (Math.abs(k) * d.MathUtils.signum(p) - p) * g;
                                    break;
                                case c.add:
                                    n = b.scaleX, p = b.scaleY, b.scaleX = n + (Math.abs(f) * d.MathUtils.signum(n) -
                                        b.data.scaleX) * g, b.scaleY = p + (Math.abs(k) * d.MathUtils.signum(p) - b.data.scaleY) * g
                            } else switch (n) {
                                case c.setup:
                                    n = Math.abs(b.data.scaleX) * d.MathUtils.signum(f);
                                    p = Math.abs(b.data.scaleY) * d.MathUtils.signum(k);
                                    b.scaleX = n + (f - n) * g;
                                    b.scaleY = p + (k - p) * g;
                                    break;
                                case c.first:
                                case c.replace:
                                    n = Math.abs(b.scaleX) * d.MathUtils.signum(f);
                                    p = Math.abs(b.scaleY) * d.MathUtils.signum(k);
                                    b.scaleX = n + (f - n) * g;
                                    b.scaleY = p + (k - p) * g;
                                    break;
                                case c.add:
                                    n = d.MathUtils.signum(f), p = d.MathUtils.signum(k), b.scaleX = Math.abs(b.scaleX) * n + (f - Math.abs(b.data.scaleX) *
                                        n) * g, b.scaleY = Math.abs(b.scaleY) * p + (k - Math.abs(b.data.scaleY) * p) * g
                            }
                        }
                };
                return l
            }(f);
            d.ScaleTimeline = g;
            f = function(a) {
                function d(b) {
                    return a.call(this, b) || this
                }
                h(d, a);
                d.prototype.getPropertyId = function() {
                    return (b.shear << 24) + this.boneIndex
                };
                d.prototype.apply = function(a, b, f, l, h, k, g) {
                    b = this.frames;
                    a = a.bones[this.boneIndex];
                    if (a.active)
                        if (f < b[0]) switch (k) {
                            case c.setup:
                                a.shearX = a.data.shearX;
                                a.shearY = a.data.shearY;
                                break;
                            case c.first:
                                a.shearX += (a.data.shearX - a.shearX) * h, a.shearY += (a.data.shearY - a.shearY) *
                                    h
                        } else {
                            if (f >= b[b.length - d.ENTRIES]) l = b[b.length + d.PREV_X], g = b[b.length + d.PREV_Y];
                            else {
                                var n = e.binarySearch(b, f, d.ENTRIES);
                                l = b[n + d.PREV_X];
                                g = b[n + d.PREV_Y];
                                var p = b[n];
                                f = this.getCurvePercent(n / d.ENTRIES - 1, 1 - (f - p) / (b[n + d.PREV_TIME] - p));
                                l += (b[n + d.X] - l) * f;
                                g += (b[n + d.Y] - g) * f
                            }
                            switch (k) {
                                case c.setup:
                                    a.shearX = a.data.shearX + l * h;
                                    a.shearY = a.data.shearY + g * h;
                                    break;
                                case c.first:
                                case c.replace:
                                    a.shearX += (a.data.shearX + l - a.shearX) * h;
                                    a.shearY += (a.data.shearY + g - a.shearY) * h;
                                    break;
                                case c.add:
                                    a.shearX += l * h, a.shearY += g * h
                            }
                        }
                };
                return d
            }(f);
            d.ShearTimeline = f;
            f = function(a) {
                function f(b) {
                    var c = a.call(this, b) || this;
                    c.frames = d.Utils.newFloatArray(b * f.ENTRIES);
                    return c
                }
                h(f, a);
                f.prototype.getPropertyId = function() {
                    return (b.color << 24) + this.slotIndex
                };
                f.prototype.setFrame = function(a, b, c, d, e, l) {
                    a *= f.ENTRIES;
                    this.frames[a] = b;
                    this.frames[a + f.R] = c;
                    this.frames[a + f.G] = d;
                    this.frames[a + f.B] = e;
                    this.frames[a + f.A] = l
                };
                f.prototype.apply = function(a, b, d, l, h, k, g) {
                    a = a.slots[this.slotIndex];
                    if (a.bone.active) {
                        var n = this.frames;
                        if (d < n[0]) switch (k) {
                            case c.setup:
                                a.color.setFromColor(a.data.color);
                                break;
                            case c.first:
                                d = a.color, k = a.data.color, d.add((k.r - d.r) * h, (k.g - d.g) * h, (k.b - d.b) * h, (k.a - d.a) * h)
                        } else {
                            if (d >= n[n.length - f.ENTRIES]) {
                                d = n.length;
                                b = n[d + f.PREV_R];
                                l = n[d + f.PREV_G];
                                g = n[d + f.PREV_B];
                                var p = n[d + f.PREV_A]
                            } else {
                                var m = e.binarySearch(n, d, f.ENTRIES);
                                b = n[m + f.PREV_R];
                                l = n[m + f.PREV_G];
                                g = n[m + f.PREV_B];
                                p = n[m + f.PREV_A];
                                var t = n[m];
                                d = this.getCurvePercent(m / f.ENTRIES - 1, 1 - (d - t) / (n[m + f.PREV_TIME] - t));
                                b += (n[m + f.R] - b) * d;
                                l += (n[m + f.G] - l) * d;
                                g += (n[m + f.B] - g) * d;
                                p += (n[m + f.A] - p) * d
                            }
                            1 == h ? a.color.set(b, l, g, p) : (d = a.color,
                                k == c.setup && d.setFromColor(a.data.color), d.add((b - d.r) * h, (l - d.g) * h, (g - d.b) * h, (p - d.a) * h))
                        }
                    }
                };
                f.ENTRIES = 5;
                f.PREV_TIME = -5;
                f.PREV_R = -4;
                f.PREV_G = -3;
                f.PREV_B = -2;
                f.PREV_A = -1;
                f.R = 1;
                f.G = 2;
                f.B = 3;
                f.A = 4;
                return f
            }(l);
            d.ColorTimeline = f;
            f = function(a) {
                function f(b) {
                    var c = a.call(this, b) || this;
                    c.frames = d.Utils.newFloatArray(b * f.ENTRIES);
                    return c
                }
                h(f, a);
                f.prototype.getPropertyId = function() {
                    return (b.twoColor << 24) + this.slotIndex
                };
                f.prototype.setFrame = function(a, b, c, d, e, l, h, k, g) {
                    a *= f.ENTRIES;
                    this.frames[a] = b;
                    this.frames[a +
                        f.R] = c;
                    this.frames[a + f.G] = d;
                    this.frames[a + f.B] = e;
                    this.frames[a + f.A] = l;
                    this.frames[a + f.R2] = h;
                    this.frames[a + f.G2] = k;
                    this.frames[a + f.B2] = g
                };
                f.prototype.apply = function(a, b, d, l, h, k, g) {
                    a = a.slots[this.slotIndex];
                    if (a.bone.active) {
                        var n = this.frames;
                        if (d < n[0]) switch (k) {
                            case c.setup:
                                a.color.setFromColor(a.data.color);
                                a.darkColor.setFromColor(a.data.darkColor);
                                break;
                            case c.first:
                                n = a.color, d = a.darkColor, k = a.data.color, a = a.data.darkColor, n.add((k.r - n.r) * h, (k.g - n.g) * h, (k.b - n.b) * h, (k.a - n.a) * h), d.add((a.r - d.r) * h,
                                    (a.g - d.g) * h, (a.b - d.b) * h, 0)
                        } else {
                            if (d >= n[n.length - f.ENTRIES]) {
                                d = n.length;
                                b = n[d + f.PREV_R];
                                l = n[d + f.PREV_G];
                                g = n[d + f.PREV_B];
                                var p = n[d + f.PREV_A];
                                var m = n[d + f.PREV_R2];
                                var t = n[d + f.PREV_G2];
                                var u = n[d + f.PREV_B2]
                            } else {
                                var v = e.binarySearch(n, d, f.ENTRIES);
                                b = n[v + f.PREV_R];
                                l = n[v + f.PREV_G];
                                g = n[v + f.PREV_B];
                                p = n[v + f.PREV_A];
                                m = n[v + f.PREV_R2];
                                t = n[v + f.PREV_G2];
                                u = n[v + f.PREV_B2];
                                var x = n[v];
                                d = this.getCurvePercent(v / f.ENTRIES - 1, 1 - (d - x) / (n[v + f.PREV_TIME] - x));
                                b += (n[v + f.R] - b) * d;
                                l += (n[v + f.G] - l) * d;
                                g += (n[v + f.B] - g) * d;
                                p += (n[v + f.A] -
                                    p) * d;
                                m += (n[v + f.R2] - m) * d;
                                t += (n[v + f.G2] - t) * d;
                                u += (n[v + f.B2] - u) * d
                            }
                            1 == h ? (a.color.set(b, l, g, p), a.darkColor.set(m, t, u, 1)) : (n = a.color, d = a.darkColor, k == c.setup && (n.setFromColor(a.data.color), d.setFromColor(a.data.darkColor)), n.add((b - n.r) * h, (l - n.g) * h, (g - n.b) * h, (p - n.a) * h), d.add((m - d.r) * h, (t - d.g) * h, (u - d.b) * h, 0))
                        }
                    }
                };
                f.ENTRIES = 8;
                f.PREV_TIME = -8;
                f.PREV_R = -7;
                f.PREV_G = -6;
                f.PREV_B = -5;
                f.PREV_A = -4;
                f.PREV_R2 = -3;
                f.PREV_G2 = -2;
                f.PREV_B2 = -1;
                f.R = 1;
                f.G = 2;
                f.B = 3;
                f.A = 4;
                f.R2 = 5;
                f.G2 = 6;
                f.B2 = 7;
                return f
            }(l);
            d.TwoColorTimeline = f;
            f =
                function() {
                    function f(a) {
                        this.frames = d.Utils.newFloatArray(a);
                        this.attachmentNames = Array(a)
                    }
                    f.prototype.getPropertyId = function() {
                        return (b.attachment << 24) + this.slotIndex
                    };
                    f.prototype.getFrameCount = function() {
                        return this.frames.length
                    };
                    f.prototype.setFrame = function(a, b, c) {
                        this.frames[a] = b;
                        this.attachmentNames[a] = c
                    };
                    f.prototype.apply = function(b, d, f, l, h, k, g) {
                        d = b.slots[this.slotIndex];
                        if (d.bone.active)
                            if (g == a.mixOut && k == c.setup) f = d.data.attachmentName, d.setAttachment(null == f ? null : b.getAttachment(this.slotIndex,
                                f));
                            else if (g = this.frames, f < g[0]) {
                            if (k == c.setup || k == c.first) f = d.data.attachmentName, d.setAttachment(null == f ? null : b.getAttachment(this.slotIndex, f))
                        } else f = f >= g[g.length - 1] ? g.length - 1 : e.binarySearch(g, f, 1) - 1, f = this.attachmentNames[f], b.slots[this.slotIndex].setAttachment(null == f ? null : b.getAttachment(this.slotIndex, f))
                    };
                    return f
                }();
            d.AttachmentTimeline = f;
            var m = null;
            f = function(a) {
                function f(b) {
                    var c = a.call(this, b) || this;
                    c.frames = d.Utils.newFloatArray(b);
                    c.frameVertices = Array(b);
                    null == m && (m = d.Utils.newFloatArray(64));
                    return c
                }
                h(f, a);
                f.prototype.getPropertyId = function() {
                    return (b.deform << 27) + +this.attachment.id + this.slotIndex
                };
                f.prototype.setFrame = function(a, b, c) {
                    this.frames[a] = b;
                    this.frameVertices[a] = c
                };
                f.prototype.apply = function(a, b, f, l, h, k, g) {
                    a = a.slots[this.slotIndex];
                    if (a.bone.active) {
                        var n = a.getAttachment();
                        if (n instanceof d.VertexAttachment && n.deformAttachment == this.attachment) {
                            b = a.deform;
                            0 == b.length && (k = c.setup);
                            g = this.frameVertices;
                            a = g[0].length;
                            var p = this.frames;
                            if (f < p[0]) switch (k) {
                                case c.setup:
                                    b.length =
                                        0;
                                    break;
                                case c.first:
                                    if (1 == h) b.length = 0;
                                    else if (b = d.Utils.setArraySize(b, a), null == n.bones)
                                        for (k = n.vertices, l = 0; l < a; l++) b[l] += (k[l] - b[l]) * h;
                                    else
                                        for (h = 1 - h, l = 0; l < a; l++) b[l] *= h
                            } else if (b = d.Utils.setArraySize(b, a), f >= p[p.length - 1])
                                if (l = g[p.length - 1], 1 == h)
                                    if (k == c.add)
                                        if (null == n.bones)
                                            for (k = n.vertices, h = 0; h < a; h++) b[h] += l[h] - k[h];
                                        else
                                            for (h = 0; h < a; h++) b[h] += l[h];
                            else d.Utils.arrayCopy(l, 0, b, 0, a);
                            else switch (k) {
                                case c.setup:
                                    if (null == n.bones)
                                        for (k = n.vertices, g = 0; g < a; g++) p = k[g], b[g] = p + (l[g] - p) * h;
                                    else
                                        for (g =
                                            0; g < a; g++) b[g] = l[g] * h;
                                    break;
                                case c.first:
                                case c.replace:
                                    for (g = 0; g < a; g++) b[g] += (l[g] - b[g]) * h;
                                case c.add:
                                    if (null == n.bones)
                                        for (k = n.vertices, g = 0; g < a; g++) b[g] += (l[g] - k[g]) * h;
                                    else
                                        for (g = 0; g < a; g++) b[g] += l[g] * h
                            } else {
                                var m = e.binarySearch(p, f);
                                l = g[m - 1];
                                g = g[m];
                                var t = p[m];
                                f = this.getCurvePercent(m - 1, 1 - (f - t) / (p[m - 1] - t));
                                if (1 == h)
                                    if (k == c.add)
                                        if (null == n.bones)
                                            for (k = n.vertices, h = 0; h < a; h++) n = l[h], b[h] += n + (g[h] - n) * f - k[h];
                                        else
                                            for (h = 0; h < a; h++) n = l[h], b[h] += n + (g[h] - n) * f;
                                else
                                    for (h = 0; h < a; h++) n = l[h], b[h] = n + (g[h] - n) * f;
                                else switch (k) {
                                    case c.setup:
                                        if (null ==
                                            n.bones)
                                            for (k = n.vertices, m = 0; m < a; m++) n = l[m], p = k[m], b[m] = p + (n + (g[m] - n) * f - p) * h;
                                        else
                                            for (k = 0; k < a; k++) n = l[k], b[k] = (n + (g[k] - n) * f) * h;
                                        break;
                                    case c.first:
                                    case c.replace:
                                        for (k = 0; k < a; k++) n = l[k], b[k] += (n + (g[k] - n) * f - b[k]) * h;
                                        break;
                                    case c.add:
                                        if (null == n.bones)
                                            for (k = n.vertices, p = 0; p < a; p++) n = l[p], b[p] += (n + (g[p] - n) * f - k[p]) * h;
                                        else
                                            for (k = 0; k < a; k++) n = l[k], b[k] += (n + (g[k] - n) * f) * h
                                }
                            }
                        }
                    }
                };
                return f
            }(l);
            d.DeformTimeline = f;
            f = function() {
                function a(a) {
                    this.frames = d.Utils.newFloatArray(a);
                    this.events = Array(a)
                }
                a.prototype.getPropertyId =
                    function() {
                        return b.event << 24
                    };
                a.prototype.getFrameCount = function() {
                    return this.frames.length
                };
                a.prototype.setFrame = function(a, b) {
                    this.frames[a] = b.time;
                    this.events[a] = b
                };
                a.prototype.apply = function(a, b, c, d, f, l, h) {
                    if (null != d) {
                        var k = this.frames,
                            g = this.frames.length;
                        if (b > c) this.apply(a, b, Number.MAX_VALUE, d, f, l, h), b = -1;
                        else if (b >= k[g - 1]) return;
                        if (!(c < k[0])) {
                            if (b < k[0]) a = 0;
                            else
                                for (a = e.binarySearch(k, b), b = k[a]; 0 < a && k[a - 1] == b;) a--;
                            for (; a < g && c >= k[a]; a++) d.push(this.events[a])
                        }
                    }
                };
                return a
            }();
            d.EventTimeline =
                f;
            f = function() {
                function f(a) {
                    this.frames = d.Utils.newFloatArray(a);
                    this.drawOrders = Array(a)
                }
                f.prototype.getPropertyId = function() {
                    return b.drawOrder << 24
                };
                f.prototype.getFrameCount = function() {
                    return this.frames.length
                };
                f.prototype.setFrame = function(a, b, c) {
                    this.frames[a] = b;
                    this.drawOrders[a] = c
                };
                f.prototype.apply = function(b, f, l, h, k, g, n) {
                    f = b.drawOrder;
                    h = b.slots;
                    if (n == a.mixOut && g == c.setup) d.Utils.arrayCopy(b.slots, 0, b.drawOrder, 0, b.slots.length);
                    else if (n = this.frames, l < n[0]) g != c.setup && g != c.first || d.Utils.arrayCopy(b.slots,
                        0, b.drawOrder, 0, b.slots.length);
                    else if (b = l >= n[n.length - 1] ? n.length - 1 : e.binarySearch(n, l) - 1, b = this.drawOrders[b], null == b) d.Utils.arrayCopy(h, 0, f, 0, h.length);
                    else
                        for (l = 0, g = b.length; l < g; l++) f[l] = h[b[l]]
                };
                return f
            }();
            d.DrawOrderTimeline = f;
            f = function(f) {
                function l(a) {
                    var b = f.call(this, a) || this;
                    b.frames = d.Utils.newFloatArray(a * l.ENTRIES);
                    return b
                }
                h(l, f);
                l.prototype.getPropertyId = function() {
                    return (b.ikConstraint << 24) + this.ikConstraintIndex
                };
                l.prototype.setFrame = function(a, b, c, d, f, e, h) {
                    a *= l.ENTRIES;
                    this.frames[a] =
                        b;
                    this.frames[a + l.MIX] = c;
                    this.frames[a + l.SOFTNESS] = d;
                    this.frames[a + l.BEND_DIRECTION] = f;
                    this.frames[a + l.COMPRESS] = e ? 1 : 0;
                    this.frames[a + l.STRETCH] = h ? 1 : 0
                };
                l.prototype.apply = function(b, d, f, h, k, g, n) {
                    d = this.frames;
                    b = b.ikConstraints[this.ikConstraintIndex];
                    if (b.active)
                        if (f < d[0]) switch (g) {
                                case c.setup:
                                    b.mix = b.data.mix;
                                    b.softness = b.data.softness;
                                    b.bendDirection = b.data.bendDirection;
                                    b.compress = b.data.compress;
                                    b.stretch = b.data.stretch;
                                    break;
                                case c.first:
                                    b.mix += (b.data.mix - b.mix) * k, b.softness += (b.data.softness -
                                        b.softness) * k, b.bendDirection = b.data.bendDirection, b.compress = b.data.compress, b.stretch = b.data.stretch
                            } else if (f >= d[d.length - l.ENTRIES]) g == c.setup ? (b.mix = b.data.mix + (d[d.length + l.PREV_MIX] - b.data.mix) * k, b.softness = b.data.softness + (d[d.length + l.PREV_SOFTNESS] - b.data.softness) * k, n == a.mixOut ? (b.bendDirection = b.data.bendDirection, b.compress = b.data.compress, b.stretch = b.data.stretch) : (b.bendDirection = d[d.length + l.PREV_BEND_DIRECTION], b.compress = 0 != d[d.length + l.PREV_COMPRESS], b.stretch = 0 != d[d.length + l.PREV_STRETCH])) :
                                (b.mix += (d[d.length + l.PREV_MIX] - b.mix) * k, b.softness += (d[d.length + l.PREV_SOFTNESS] - b.softness) * k, n == a.mixIn && (b.bendDirection = d[d.length + l.PREV_BEND_DIRECTION], b.compress = 0 != d[d.length + l.PREV_COMPRESS], b.stretch = 0 != d[d.length + l.PREV_STRETCH]));
                            else {
                                h = e.binarySearch(d, f, l.ENTRIES);
                                var p = d[h + l.PREV_MIX],
                                    m = d[h + l.PREV_SOFTNESS],
                                    t = d[h];
                                f = this.getCurvePercent(h / l.ENTRIES - 1, 1 - (f - t) / (d[h + l.PREV_TIME] - t));
                                g == c.setup ? (b.mix = b.data.mix + (p + (d[h + l.MIX] - p) * f - b.data.mix) * k, b.softness = b.data.softness + (m + (d[h + l.SOFTNESS] -
                                    m) * f - b.data.softness) * k, n == a.mixOut ? (b.bendDirection = b.data.bendDirection, b.compress = b.data.compress, b.stretch = b.data.stretch) : (b.bendDirection = d[h + l.PREV_BEND_DIRECTION], b.compress = 0 != d[h + l.PREV_COMPRESS], b.stretch = 0 != d[h + l.PREV_STRETCH])) : (b.mix += (p + (d[h + l.MIX] - p) * f - b.mix) * k, b.softness += (m + (d[h + l.SOFTNESS] - m) * f - b.softness) * k, n == a.mixIn && (b.bendDirection = d[h + l.PREV_BEND_DIRECTION], b.compress = 0 != d[h + l.PREV_COMPRESS], b.stretch = 0 != d[h + l.PREV_STRETCH]))
                            }
                };
                l.ENTRIES = 6;
                l.PREV_TIME = -6;
                l.PREV_MIX = -5;
                l.PREV_SOFTNESS = -4;
                l.PREV_BEND_DIRECTION = -3;
                l.PREV_COMPRESS = -2;
                l.PREV_STRETCH = -1;
                l.MIX = 1;
                l.SOFTNESS = 2;
                l.BEND_DIRECTION = 3;
                l.COMPRESS = 4;
                l.STRETCH = 5;
                return l
            }(l);
            d.IkConstraintTimeline = f;
            f = function(a) {
                function f(b) {
                    var c = a.call(this, b) || this;
                    c.frames = d.Utils.newFloatArray(b * f.ENTRIES);
                    return c
                }
                h(f, a);
                f.prototype.getPropertyId = function() {
                    return (b.transformConstraint << 24) + this.transformConstraintIndex
                };
                f.prototype.setFrame = function(a, b, c, d, e, l) {
                    a *= f.ENTRIES;
                    this.frames[a] = b;
                    this.frames[a + f.ROTATE] = c;
                    this.frames[a + f.TRANSLATE] =
                        d;
                    this.frames[a + f.SCALE] = e;
                    this.frames[a + f.SHEAR] = l
                };
                f.prototype.apply = function(a, b, d, l, h, k, g) {
                    b = this.frames;
                    a = a.transformConstraints[this.transformConstraintIndex];
                    if (a.active)
                        if (d < b[0]) switch (d = a.data, k) {
                            case c.setup:
                                a.rotateMix = d.rotateMix;
                                a.translateMix = d.translateMix;
                                a.scaleMix = d.scaleMix;
                                a.shearMix = d.shearMix;
                                break;
                            case c.first:
                                a.rotateMix += (d.rotateMix - a.rotateMix) * h, a.translateMix += (d.translateMix - a.translateMix) * h, a.scaleMix += (d.scaleMix - a.scaleMix) * h, a.shearMix += (d.shearMix - a.shearMix) *
                                    h
                        } else {
                            if (d >= b[b.length - f.ENTRIES]) {
                                d = b.length;
                                l = b[d + f.PREV_ROTATE];
                                g = b[d + f.PREV_TRANSLATE];
                                var n = b[d + f.PREV_SCALE];
                                var p = b[d + f.PREV_SHEAR]
                            } else {
                                var m = e.binarySearch(b, d, f.ENTRIES);
                                l = b[m + f.PREV_ROTATE];
                                g = b[m + f.PREV_TRANSLATE];
                                n = b[m + f.PREV_SCALE];
                                p = b[m + f.PREV_SHEAR];
                                var u = b[m];
                                d = this.getCurvePercent(m / f.ENTRIES - 1, 1 - (d - u) / (b[m + f.PREV_TIME] - u));
                                l += (b[m + f.ROTATE] - l) * d;
                                g += (b[m + f.TRANSLATE] - g) * d;
                                n += (b[m + f.SCALE] - n) * d;
                                p += (b[m + f.SHEAR] - p) * d
                            }
                            k == c.setup ? (d = a.data, a.rotateMix = d.rotateMix + (l - d.rotateMix) * h, a.translateMix =
                                d.translateMix + (g - d.translateMix) * h, a.scaleMix = d.scaleMix + (n - d.scaleMix) * h, a.shearMix = d.shearMix + (p - d.shearMix) * h) : (a.rotateMix += (l - a.rotateMix) * h, a.translateMix += (g - a.translateMix) * h, a.scaleMix += (n - a.scaleMix) * h, a.shearMix += (p - a.shearMix) * h)
                        }
                };
                f.ENTRIES = 5;
                f.PREV_TIME = -5;
                f.PREV_ROTATE = -4;
                f.PREV_TRANSLATE = -3;
                f.PREV_SCALE = -2;
                f.PREV_SHEAR = -1;
                f.ROTATE = 1;
                f.TRANSLATE = 2;
                f.SCALE = 3;
                f.SHEAR = 4;
                return f
            }(l);
            d.TransformConstraintTimeline = f;
            f = function(a) {
                function f(b) {
                    var c = a.call(this, b) || this;
                    c.frames = d.Utils.newFloatArray(b *
                        f.ENTRIES);
                    return c
                }
                h(f, a);
                f.prototype.getPropertyId = function() {
                    return (b.pathConstraintPosition << 24) + this.pathConstraintIndex
                };
                f.prototype.setFrame = function(a, b, c) {
                    a *= f.ENTRIES;
                    this.frames[a] = b;
                    this.frames[a + f.VALUE] = c
                };
                f.prototype.apply = function(a, b, d, l, h, k, g) {
                    b = this.frames;
                    a = a.pathConstraints[this.pathConstraintIndex];
                    if (a.active)
                        if (d < b[0]) switch (k) {
                            case c.setup:
                                a.position = a.data.position;
                                break;
                            case c.first:
                                a.position += (a.data.position - a.position) * h
                        } else {
                            if (d >= b[b.length - f.ENTRIES]) l = b[b.length +
                                f.PREV_VALUE];
                            else {
                                g = e.binarySearch(b, d, f.ENTRIES);
                                l = b[g + f.PREV_VALUE];
                                var n = b[g];
                                d = this.getCurvePercent(g / f.ENTRIES - 1, 1 - (d - n) / (b[g + f.PREV_TIME] - n));
                                l += (b[g + f.VALUE] - l) * d
                            }
                            k == c.setup ? a.position = a.data.position + (l - a.data.position) * h : a.position += (l - a.position) * h
                        }
                };
                f.ENTRIES = 2;
                f.PREV_TIME = -2;
                f.PREV_VALUE = -1;
                f.VALUE = 1;
                return f
            }(l);
            d.PathConstraintPositionTimeline = f;
            f = function(a) {
                function d(b) {
                    return a.call(this, b) || this
                }
                h(d, a);
                d.prototype.getPropertyId = function() {
                    return (b.pathConstraintSpacing << 24) + this.pathConstraintIndex
                };
                d.prototype.apply = function(a, b, f, l, h, k, g) {
                    b = this.frames;
                    a = a.pathConstraints[this.pathConstraintIndex];
                    if (a.active)
                        if (f < b[0]) switch (k) {
                            case c.setup:
                                a.spacing = a.data.spacing;
                                break;
                            case c.first:
                                a.spacing += (a.data.spacing - a.spacing) * h
                        } else {
                            if (f >= b[b.length - d.ENTRIES]) l = b[b.length + d.PREV_VALUE];
                            else {
                                g = e.binarySearch(b, f, d.ENTRIES);
                                l = b[g + d.PREV_VALUE];
                                var n = b[g];
                                f = this.getCurvePercent(g / d.ENTRIES - 1, 1 - (f - n) / (b[g + d.PREV_TIME] - n));
                                l += (b[g + d.VALUE] - l) * f
                            }
                            k == c.setup ? a.spacing = a.data.spacing + (l - a.data.spacing) *
                                h : a.spacing += (l - a.spacing) * h
                        }
                };
                return d
            }(f);
            d.PathConstraintSpacingTimeline = f;
            l = function(a) {
                function f(b) {
                    var c = a.call(this, b) || this;
                    c.frames = d.Utils.newFloatArray(b * f.ENTRIES);
                    return c
                }
                h(f, a);
                f.prototype.getPropertyId = function() {
                    return (b.pathConstraintMix << 24) + this.pathConstraintIndex
                };
                f.prototype.setFrame = function(a, b, c, d) {
                    a *= f.ENTRIES;
                    this.frames[a] = b;
                    this.frames[a + f.ROTATE] = c;
                    this.frames[a + f.TRANSLATE] = d
                };
                f.prototype.apply = function(a, b, d, l, h, k, g) {
                    b = this.frames;
                    a = a.pathConstraints[this.pathConstraintIndex];
                    if (a.active)
                        if (d < b[0]) switch (k) {
                            case c.setup:
                                a.rotateMix = a.data.rotateMix;
                                a.translateMix = a.data.translateMix;
                                break;
                            case c.first:
                                a.rotateMix += (a.data.rotateMix - a.rotateMix) * h, a.translateMix += (a.data.translateMix - a.translateMix) * h
                        } else {
                            if (d >= b[b.length - f.ENTRIES]) l = b[b.length + f.PREV_ROTATE], g = b[b.length + f.PREV_TRANSLATE];
                            else {
                                var n = e.binarySearch(b, d, f.ENTRIES);
                                l = b[n + f.PREV_ROTATE];
                                g = b[n + f.PREV_TRANSLATE];
                                var m = b[n];
                                d = this.getCurvePercent(n / f.ENTRIES - 1, 1 - (d - m) / (b[n + f.PREV_TIME] - m));
                                l += (b[n + f.ROTATE] -
                                    l) * d;
                                g += (b[n + f.TRANSLATE] - g) * d
                            }
                            k == c.setup ? (a.rotateMix = a.data.rotateMix + (l - a.data.rotateMix) * h, a.translateMix = a.data.translateMix + (g - a.data.translateMix) * h) : (a.rotateMix += (l - a.rotateMix) * h, a.translateMix += (g - a.translateMix) * h)
                        }
                };
                f.ENTRIES = 3;
                f.PREV_TIME = -3;
                f.PREV_ROTATE = -2;
                f.PREV_TRANSLATE = -1;
                f.ROTATE = 1;
                f.TRANSLATE = 2;
                return f
            }(l);
            d.PathConstraintMixTimeline = l
        })(e || (e = {}));
        (function(d) {
            var e = function() {
                function b(b) {
                    this.tracks = [];
                    this.timeScale = 1;
                    this.events = [];
                    this.listeners = [];
                    this.queue = new a(this);
                    this.propertyIDs = new d.IntSet;
                    this.animationsChanged = !1;
                    this.trackEntryPool = new d.Pool(function() {
                        return new c
                    });
                    this.data = b
                }
                b.prototype.update = function(a) {
                    a *= this.timeScale;
                    for (var b = this.tracks, c = 0, d = b.length; c < d; c++) {
                        var f = b[c];
                        if (null != f) {
                            f.animationLast = f.nextAnimationLast;
                            f.trackLast = f.nextTrackLast;
                            var e = a * f.timeScale;
                            if (0 < f.delay) {
                                f.delay -= e;
                                if (0 < f.delay) continue;
                                e = -f.delay;
                                f.delay = 0
                            }
                            var l = f.next;
                            if (null != l) {
                                var h = f.trackLast - l.delay;
                                if (0 <= h) {
                                    l.delay = 0;
                                    l.trackTime += 0 == f.timeScale ? 0 : (h / f.timeScale +
                                        a) * l.timeScale;
                                    f.trackTime += e;
                                    for (this.setCurrent(c, l, !0); null != l.mixingFrom;) l.mixTime += a, l = l.mixingFrom;
                                    continue
                                }
                            } else if (f.trackLast >= f.trackEnd && null == f.mixingFrom) {
                                b[c] = null;
                                this.queue.end(f);
                                this.disposeNext(f);
                                continue
                            }
                            if (null != f.mixingFrom && this.updateMixingFrom(f, a))
                                for (l = f.mixingFrom, f.mixingFrom = null, null != l && (l.mixingTo = null); null != l;) this.queue.end(l), l = l.mixingFrom;
                            f.trackTime += e
                        }
                    }
                    this.queue.drain()
                };
                b.prototype.updateMixingFrom = function(a, b) {
                    var c = a.mixingFrom;
                    if (null == c) return !0;
                    var d =
                        this.updateMixingFrom(c, b);
                    c.animationLast = c.nextAnimationLast;
                    c.trackLast = c.nextTrackLast;
                    if (0 < a.mixTime && a.mixTime >= a.mixDuration) {
                        if (0 == c.totalAlpha || 0 == a.mixDuration) a.mixingFrom = c.mixingFrom, null != c.mixingFrom && (c.mixingFrom.mixingTo = a), a.interruptAlpha = c.interruptAlpha, this.queue.end(c);
                        return d
                    }
                    c.trackTime += b * c.timeScale;
                    a.mixTime += b;
                    return !1
                };
                b.prototype.apply = function(a) {
                    if (null == a) throw Error("skeleton cannot be null.");
                    this.animationsChanged && this._animationsChanged();
                    for (var c = this.events,
                            f = this.tracks, e = !1, l = 0, h = f.length; l < h; l++) {
                        var k = f[l];
                        if (!(null == k || 0 < k.delay)) {
                            e = !0;
                            var g = 0 == l ? d.MixBlend.first : k.mixBlend,
                                m = k.alpha;
                            null != k.mixingFrom ? m *= this.applyMixingFrom(k, a, g) : k.trackTime >= k.trackEnd && null == k.next && (m = 0);
                            var q = k.animationLast,
                                A = k.getAnimationTime(),
                                B = k.animation.timelines.length,
                                y = k.animation.timelines;
                            if (0 == l && 1 == m || g == d.MixBlend.add)
                                for (var C = 0; C < B; C++) d.Utils.webkit602BugfixHelper(m, g), y[C].apply(a, q, A, c, m, g, d.MixDirection.mixIn);
                            else {
                                var F = k.timelineMode,
                                    G = 0 == k.timelinesRotation.length;
                                G && d.Utils.setArraySize(k.timelinesRotation, B << 1, null);
                                var D = k.timelinesRotation;
                                for (C = 0; C < B; C++) {
                                    var I = y[C],
                                        K = (F[C] & b.NOT_LAST - 1) == b.SUBSEQUENT ? g : d.MixBlend.setup;
                                    I instanceof d.RotateTimeline ? this.applyRotateTimeline(I, a, A, m, K, D, C << 1, G) : (d.Utils.webkit602BugfixHelper(m, g), I.apply(a, q, A, c, m, K, d.MixDirection.mixIn))
                                }
                            }
                            this.queueEvents(k, A);
                            c.length = 0;
                            k.nextAnimationLast = A;
                            k.nextTrackLast = k.trackTime
                        }
                    }
                    this.queue.drain();
                    return e
                };
                b.prototype.applyMixingFrom = function(a, c, e) {
                    var f = a.mixingFrom;
                    null !=
                        f.mixingFrom && this.applyMixingFrom(f, c, e);
                    if (0 == a.mixDuration) {
                        var l = 1;
                        e == d.MixBlend.first && (e = d.MixBlend.setup)
                    } else l = a.mixTime / a.mixDuration, 1 < l && (l = 1), e != d.MixBlend.first && (e = f.mixBlend);
                    var h = l < f.eventThreshold ? this.events : null,
                        k = l < f.attachmentThreshold,
                        g = l < f.drawOrderThreshold,
                        n = f.animationLast,
                        m = f.getAnimationTime(),
                        u = f.animation.timelines.length,
                        q = f.animation.timelines,
                        y = f.alpha * a.interruptAlpha,
                        C = y * (1 - l);
                    if (e == d.MixBlend.add)
                        for (var F = 0; F < u; F++) q[F].apply(c, n, m, h, C, e, d.MixDirection.mixOut);
                    else {
                        var G = f.timelineMode,
                            D = f.timelineHoldMix,
                            I = 0 == f.timelinesRotation.length;
                        I && d.Utils.setArraySize(f.timelinesRotation, u << 1, null);
                        var K = f.timelinesRotation;
                        for (F = f.totalAlpha = 0; F < u; F++) {
                            var L = q[F],
                                R = d.MixDirection.mixOut;
                            switch (G[F] & b.NOT_LAST - 1) {
                                case b.SUBSEQUENT:
                                    var M = e;
                                    if (!k && L instanceof d.AttachmentTimeline) {
                                        if ((G[F] & b.NOT_LAST) == b.NOT_LAST) continue;
                                        M = d.MixBlend.setup
                                    }
                                    if (!g && L instanceof d.DrawOrderTimeline) continue;
                                    var S = C;
                                    break;
                                case b.FIRST:
                                    M = d.MixBlend.setup;
                                    S = C;
                                    break;
                                case b.HOLD:
                                    M = d.MixBlend.setup;
                                    S = y;
                                    break;
                                default:
                                    M = d.MixBlend.setup, S = D[F], S = y * Math.max(0, 1 - S.mixTime / S.mixDuration)
                            }
                            f.totalAlpha += S;
                            L instanceof d.RotateTimeline ? this.applyRotateTimeline(L, c, m, S, M, K, F << 1, I) : (d.Utils.webkit602BugfixHelper(S, e), M == d.MixBlend.setup && (L instanceof d.AttachmentTimeline ? (k || (G[F] & b.NOT_LAST) == b.NOT_LAST) && (R = d.MixDirection.mixIn) : L instanceof d.DrawOrderTimeline && g && (R = d.MixDirection.mixIn)), L.apply(c, n, m, h, S, M, R))
                        }
                    }
                    0 < a.mixDuration && this.queueEvents(f, m);
                    this.events.length = 0;
                    f.nextAnimationLast = m;
                    f.nextTrackLast =
                        f.trackTime;
                    return l
                };
                b.prototype.applyRotateTimeline = function(a, b, c, e, l, h, k, g) {
                    g && (h[k] = 0);
                    if (1 == e) a.apply(b, 0, c, null, 1, l, d.MixDirection.mixIn);
                    else {
                        var f = a.frames;
                        b = b.bones[a.boneIndex];
                        if (b.active) {
                            if (c < f[0]) switch (l) {
                                    case d.MixBlend.setup:
                                        b.rotation = b.data.rotation;
                                    default:
                                        return;
                                    case d.MixBlend.first:
                                        l = b.rotation, f = b.data.rotation
                                } else if (l = l == d.MixBlend.setup ? b.data.rotation : b.rotation, c >= f[f.length - d.RotateTimeline.ENTRIES]) f = b.data.rotation + f[f.length + d.RotateTimeline.PREV_ROTATION];
                                else {
                                    var n =
                                        d.Animation.binarySearch(f, c, d.RotateTimeline.ENTRIES),
                                        m = f[n + d.RotateTimeline.PREV_ROTATION],
                                        p = f[n];
                                    a = a.getCurvePercent((n >> 1) - 1, 1 - (c - p) / (f[n + d.RotateTimeline.PREV_TIME] - p));
                                    f = f[n + d.RotateTimeline.ROTATION] - m;
                                    f = m + (f - 360 * (16384 - (16384.499999999996 - f / 360 | 0))) * a + b.data.rotation;
                                    f -= 360 * (16384 - (16384.499999999996 - f / 360 | 0))
                                }
                            f -= l;
                            f -= 360 * (16384 - (16384.499999999996 - f / 360 | 0));
                            0 == f ? m = h[k] : (g ? (g = 0, m = f) : (g = h[k], m = h[k + 1]), a = 0 < f, c = 0 <= g, d.MathUtils.signum(m) != d.MathUtils.signum(f) && 90 >= Math.abs(m) && (180 < Math.abs(g) &&
                                (g += 360 * d.MathUtils.signum(g)), c = a), m = f + g - g % 360, c != a && (m += 360 * d.MathUtils.signum(g)), h[k] = m);
                            h[k + 1] = f;
                            l += m * e;
                            b.rotation = l - 360 * (16384 - (16384.499999999996 - l / 360 | 0))
                        }
                    }
                };
                b.prototype.queueEvents = function(a, b) {
                    for (var c = a.animationStart, d = a.animationEnd, f = d - c, e = a.trackLast % f, l = this.events, h = 0, k = l.length; h < k; h++) {
                        var g = l[h];
                        if (g.time < e) break;
                        g.time > d || this.queue.event(a, g)
                    }
                    for ((a.loop ? 0 == f || e > a.trackTime % f : b >= d && a.animationLast < d) && this.queue.complete(a); h < k; h++) l[h].time < c || this.queue.event(a, l[h])
                };
                b.prototype.clearTracks =
                    function() {
                        var a = this.queue.drainDisabled;
                        this.queue.drainDisabled = !0;
                        for (var b = 0, c = this.tracks.length; b < c; b++) this.clearTrack(b);
                        this.tracks.length = 0;
                        this.queue.drainDisabled = a;
                        this.queue.drain()
                    };
                b.prototype.clearTrack = function(a) {
                    if (!(a >= this.tracks.length) && (a = this.tracks[a], null != a)) {
                        this.queue.end(a);
                        this.disposeNext(a);
                        for (var b = a;;) {
                            var c = b.mixingFrom;
                            if (null == c) break;
                            this.queue.end(c);
                            b.mixingFrom = null;
                            b.mixingTo = null;
                            b = c
                        }
                        this.tracks[a.trackIndex] = null;
                        this.queue.drain()
                    }
                };
                b.prototype.setCurrent =
                    function(a, b, c) {
                        var d = this.expandToIndex(a);
                        this.tracks[a] = b;
                        null != d && (c && this.queue.interrupt(d), b.mixingFrom = d, d.mixingTo = b, b.mixTime = 0, null != d.mixingFrom && 0 < d.mixDuration && (b.interruptAlpha *= Math.min(1, d.mixTime / d.mixDuration)), d.timelinesRotation.length = 0);
                        this.queue.start(b)
                    };
                b.prototype.setAnimation = function(a, b, c) {
                    var d = this.data.skeletonData.findAnimation(b);
                    if (null == d) throw Error("Animation not found: " + b);
                    return this.setAnimationWith(a, d, c)
                };
                b.prototype.setAnimationWith = function(a, b, c) {
                    if (null ==
                        b) throw Error("animation cannot be null.");
                    var d = !0,
                        f = this.expandToIndex(a);
                    null != f && (-1 == f.nextTrackLast ? (this.tracks[a] = f.mixingFrom, this.queue.interrupt(f), this.queue.end(f), this.disposeNext(f), f = f.mixingFrom, d = !1) : this.disposeNext(f));
                    b = this.trackEntry(a, b, c, f);
                    this.setCurrent(a, b, d);
                    this.queue.drain();
                    return b
                };
                b.prototype.addAnimation = function(a, b, c, d) {
                    var f = this.data.skeletonData.findAnimation(b);
                    if (null == f) throw Error("Animation not found: " + b);
                    return this.addAnimationWith(a, f, c, d)
                };
                b.prototype.addAnimationWith =
                    function(a, b, c, d) {
                        if (null == b) throw Error("animation cannot be null.");
                        var f = this.expandToIndex(a);
                        if (null != f)
                            for (; null != f.next;) f = f.next;
                        c = this.trackEntry(a, b, c, f);
                        null == f ? (this.setCurrent(a, c, !0), this.queue.drain()) : (f.next = c, 0 >= d && (a = f.animationEnd - f.animationStart, 0 != a ? (f.loop ? d += a * (1 + (f.trackTime / a | 0)) : d += Math.max(a, f.trackTime), d -= this.data.getMix(f.animation, b)) : d = f.trackTime));
                        c.delay = d;
                        return c
                    };
                b.prototype.setEmptyAnimation = function(a, c) {
                    a = this.setAnimationWith(a, b.emptyAnimation, !1);
                    a.mixDuration =
                        c;
                    a.trackEnd = c;
                    return a
                };
                b.prototype.addEmptyAnimation = function(a, c, d) {
                    0 >= d && (d -= c);
                    a = this.addAnimationWith(a, b.emptyAnimation, !1, d);
                    a.mixDuration = c;
                    a.trackEnd = c;
                    return a
                };
                b.prototype.setEmptyAnimations = function(a) {
                    var b = this.queue.drainDisabled;
                    this.queue.drainDisabled = !0;
                    for (var c = 0, d = this.tracks.length; c < d; c++) {
                        var f = this.tracks[c];
                        null != f && this.setEmptyAnimation(f.trackIndex, a)
                    }
                    this.queue.drainDisabled = b;
                    this.queue.drain()
                };
                b.prototype.expandToIndex = function(a) {
                    if (a < this.tracks.length) return this.tracks[a];
                    d.Utils.ensureArrayCapacity(this.tracks, a + 1, null);
                    this.tracks.length = a + 1;
                    return null
                };
                b.prototype.trackEntry = function(a, b, c, d) {
                    var f = this.trackEntryPool.obtain();
                    f.trackIndex = a;
                    f.animation = b;
                    f.loop = c;
                    f.holdPrevious = !1;
                    f.eventThreshold = 0;
                    f.attachmentThreshold = 0;
                    f.drawOrderThreshold = 0;
                    f.animationStart = 0;
                    f.animationEnd = b.duration;
                    f.animationLast = -1;
                    f.nextAnimationLast = -1;
                    f.delay = 0;
                    f.trackTime = 0;
                    f.trackLast = -1;
                    f.nextTrackLast = -1;
                    f.trackEnd = Number.MAX_VALUE;
                    f.timeScale = 1;
                    f.alpha = 1;
                    f.interruptAlpha = 1;
                    f.mixTime =
                        0;
                    f.mixDuration = null == d ? 0 : this.data.getMix(d.animation, b);
                    return f
                };
                b.prototype.disposeNext = function(a) {
                    for (var b = a.next; null != b;) this.queue.dispose(b), b = b.next;
                    a.next = null
                };
                b.prototype._animationsChanged = function() {
                    this.animationsChanged = !1;
                    this.propertyIDs.clear();
                    for (var a = 0, b = this.tracks.length; a < b; a++) {
                        var c = this.tracks[a];
                        if (null != c) {
                            for (; null != c.mixingFrom;) c = c.mixingFrom;
                            do null != c.mixingFrom && c.mixBlend == d.MixBlend.add || this.computeHold(c), c = c.mixingTo; while (null != c)
                        }
                    }
                    this.propertyIDs.clear();
                    for (a = this.tracks.length - 1; 0 <= a; a--)
                        for (c = this.tracks[a]; null != c;) this.computeNotLast(c), c = c.mixingFrom
                };
                b.prototype.computeHold = function(a) {
                    var c = a.mixingTo,
                        f = a.animation.timelines,
                        e = a.animation.timelines.length,
                        l = d.Utils.setArraySize(a.timelineMode, e);
                    a.timelineHoldMix.length = 0;
                    var h = d.Utils.setArraySize(a.timelineHoldMix, e),
                        k = this.propertyIDs;
                    if (null != c && c.holdPrevious)
                        for (var g = 0; g < e; g++) k.add(f[g].getPropertyId()), l[g] = b.HOLD;
                    else a: for (g = 0; g < e; g++) {
                        var m = f[g],
                            q = m.getPropertyId();
                        if (k.add(q))
                            if (null ==
                                c || m instanceof d.AttachmentTimeline || m instanceof d.DrawOrderTimeline || m instanceof d.EventTimeline || !c.animation.hasTimeline(q)) l[g] = b.FIRST;
                            else {
                                for (m = c.mixingTo; null != m; m = m.mixingTo)
                                    if (!m.animation.hasTimeline(q)) {
                                        if (0 < a.mixDuration) {
                                            l[g] = b.HOLD_MIX;
                                            h[g] = m;
                                            continue a
                                        }
                                        break
                                    }
                                l[g] = b.HOLD
                            }
                        else l[g] = b.SUBSEQUENT
                    }
                };
                b.prototype.computeNotLast = function(a) {
                    var c = a.animation.timelines,
                        f = a.animation.timelines.length;
                    a = a.timelineMode;
                    for (var e = this.propertyIDs, l = 0; l < f; l++) c[l] instanceof d.AttachmentTimeline &&
                        (e.add(c[l].slotIndex) || (a[l] |= b.NOT_LAST))
                };
                b.prototype.getCurrent = function(a) {
                    return a >= this.tracks.length ? null : this.tracks[a]
                };
                b.prototype.addListener = function(a) {
                    if (null == a) throw Error("listener cannot be null.");
                    this.listeners.push(a)
                };
                b.prototype.removeListener = function(a) {
                    a = this.listeners.indexOf(a);
                    0 <= a && this.listeners.splice(a, 1)
                };
                b.prototype.clearListeners = function() {
                    this.listeners.length = 0
                };
                b.prototype.clearListenerNotifications = function() {
                    this.queue.clear()
                };
                b.emptyAnimation = new d.Animation("<empty>", [], 0);
                b.SUBSEQUENT = 0;
                b.FIRST = 1;
                b.HOLD = 2;
                b.HOLD_MIX = 3;
                b.NOT_LAST = 4;
                return b
            }();
            d.AnimationState = e;
            var c = function() {
                function a() {
                    this.mixBlend = d.MixBlend.replace;
                    this.timelineMode = [];
                    this.timelineHoldMix = [];
                    this.timelinesRotation = []
                }
                a.prototype.reset = function() {
                    this.listener = this.animation = this.mixingTo = this.mixingFrom = this.next = null;
                    this.timelineMode.length = 0;
                    this.timelineHoldMix.length = 0;
                    this.timelinesRotation.length = 0
                };
                a.prototype.getAnimationTime = function() {
                    if (this.loop) {
                        var a = this.animationEnd -
                            this.animationStart;
                        return 0 == a ? this.animationStart : this.trackTime % a + this.animationStart
                    }
                    return Math.min(this.trackTime + this.animationStart, this.animationEnd)
                };
                a.prototype.setAnimationLast = function(a) {
                    this.nextAnimationLast = this.animationLast = a
                };
                a.prototype.isComplete = function() {
                    return this.trackTime >= this.animationEnd - this.animationStart
                };
                a.prototype.resetRotationDirections = function() {
                    this.timelinesRotation.length = 0
                };
                return a
            }();
            d.TrackEntry = c;
            var a = function() {
                function a(a) {
                    this.objects = [];
                    this.drainDisabled = !1;
                    this.animState = a
                }
                a.prototype.start = function(a) {
                    this.objects.push(b.start);
                    this.objects.push(a);
                    this.animState.animationsChanged = !0
                };
                a.prototype.interrupt = function(a) {
                    this.objects.push(b.interrupt);
                    this.objects.push(a)
                };
                a.prototype.end = function(a) {
                    this.objects.push(b.end);
                    this.objects.push(a);
                    this.animState.animationsChanged = !0
                };
                a.prototype.dispose = function(a) {
                    this.objects.push(b.dispose);
                    this.objects.push(a)
                };
                a.prototype.complete = function(a) {
                    this.objects.push(b.complete);
                    this.objects.push(a)
                };
                a.prototype.event = function(a, c) {
                    this.objects.push(b.event);
                    this.objects.push(a);
                    this.objects.push(c)
                };
                a.prototype.drain = function() {
                    if (!this.drainDisabled) {
                        this.drainDisabled = !0;
                        for (var a = this.objects, c = this.animState.listeners, d = 0; d < a.length; d += 2) {
                            var e = a[d + 1];
                            switch (a[d]) {
                                case b.start:
                                    null != e.listener && e.listener.start && e.listener.start(e);
                                    for (var l = 0; l < c.length; l++) c[l].start && c[l].start(e);
                                    break;
                                case b.interrupt:
                                    null != e.listener && e.listener.interrupt && e.listener.interrupt(e);
                                    for (l = 0; l < c.length; l++) c[l].interrupt &&
                                        c[l].interrupt(e);
                                    break;
                                case b.end:
                                    for (null != e.listener && e.listener.end && e.listener.end(e), l = 0; l < c.length; l++) c[l].end && c[l].end(e);
                                case b.dispose:
                                    null != e.listener && e.listener.dispose && e.listener.dispose(e);
                                    for (l = 0; l < c.length; l++) c[l].dispose && c[l].dispose(e);
                                    this.animState.trackEntryPool.free(e);
                                    break;
                                case b.complete:
                                    null != e.listener && e.listener.complete && e.listener.complete(e);
                                    for (l = 0; l < c.length; l++) c[l].complete && c[l].complete(e);
                                    break;
                                case b.event:
                                    var h = a[2 + d++];
                                    null != e.listener && e.listener.event &&
                                        e.listener.event(e, h);
                                    for (l = 0; l < c.length; l++) c[l].event && c[l].event(e, h)
                            }
                        }
                        this.clear();
                        this.drainDisabled = !1
                    }
                };
                a.prototype.clear = function() {
                    this.objects.length = 0
                };
                return a
            }();
            d.EventQueue = a;
            var b;
            (function(a) {
                a[a.start = 0] = "start";
                a[a.interrupt = 1] = "interrupt";
                a[a.end = 2] = "end";
                a[a.dispose = 3] = "dispose";
                a[a.complete = 4] = "complete";
                a[a.event = 5] = "event"
            })(b = d.EventType || (d.EventType = {}));
            e = function() {
                function a() {}
                a.prototype.start = function(a) {};
                a.prototype.interrupt = function(a) {};
                a.prototype.end = function(a) {};
                a.prototype.dispose = function(a) {};
                a.prototype.complete = function(a) {};
                a.prototype.event = function(a, b) {};
                return a
            }();
            d.AnimationStateAdapter = e
        })(e || (e = {}));
        (function(d) {
            var e = function() {
                function c(a) {
                    this.animationToMixTime = {};
                    this.defaultMix = 0;
                    if (null == a) throw Error("skeletonData cannot be null.");
                    this.skeletonData = a
                }
                c.prototype.setMix = function(a, b, c) {
                    var d = this.skeletonData.findAnimation(a);
                    if (null == d) throw Error("Animation not found: " + a);
                    a = this.skeletonData.findAnimation(b);
                    if (null == a) throw Error("Animation not found: " +
                        b);
                    this.setMixWith(d, a, c)
                };
                c.prototype.setMixWith = function(a, b, c) {
                    if (null == a) throw Error("from cannot be null.");
                    if (null == b) throw Error("to cannot be null.");
                    this.animationToMixTime[a.name + "." + b.name] = c
                };
                c.prototype.getMix = function(a, b) {
                    a = this.animationToMixTime[a.name + "." + b.name];
                    return void 0 === a ? this.defaultMix : a
                };
                return c
            }();
            d.AnimationStateData = e
        })(e || (e = {}));
        (function(d) {
            var e = function() {
                function c(a, b) {
                    void 0 === b && (b = "");
                    this.assets = {};
                    this.errors = {};
                    this.loaded = this.toLoad = 0;
                    this.textureLoader =
                        a;
                    this.pathPrefix = b
                }
                c.downloadText = function(a, b, c) {
                    var d = new XMLHttpRequest;
                    d.open("GET", a, !0);
                    d.onload = function() {
                        200 == d.status ? b(d.responseText) : c(d.status, d.responseText)
                    };
                    d.onerror = function() {
                        c(d.status, d.responseText)
                    };
                    d.send()
                };
                c.downloadBinary = function(a, b, c) {
                    var d = new XMLHttpRequest;
                    d.open("GET", a, !0);
                    d.responseType = "arraybuffer";
                    d.onload = function() {
                        200 == d.status ? b(new Uint8Array(d.response)) : c(d.status, d.responseText)
                    };
                    d.onerror = function() {
                        c(d.status, d.responseText)
                    };
                    d.send()
                };
                c.prototype.loadBinary =
                    function(a, b, d) {
                        var f = this;
                        void 0 === b && (b = null);
                        void 0 === d && (d = null);
                        a = this.pathPrefix + a;
                        this.toLoad++;
                        c.downloadBinary(a, function(c) {
                            f.assets[a] = c;
                            b && b(a, c);
                            f.toLoad--;
                            f.loaded++
                        }, function(b, c) {
                            f.errors[a] = "Couldn't load binary " + a + ": status " + status + ", " + c;
                            d && d(a, "Couldn't load binary " + a + ": status " + status + ", " + c);
                            f.toLoad--;
                            f.loaded++
                        })
                    };
                c.prototype.loadText = function(a, b, d) {
                    var f = this;
                    void 0 === b && (b = null);
                    void 0 === d && (d = null);
                    a = this.pathPrefix + a;
                    this.toLoad++;
                    c.downloadText(a, function(c) {
                        f.assets[a] =
                            c;
                        b && b(a, c);
                        f.toLoad--;
                        f.loaded++
                    }, function(b, c) {
                        f.errors[a] = "Couldn't load text " + a + ": status " + status + ", " + c;
                        d && d(a, "Couldn't load text " + a + ": status " + status + ", " + c);
                        f.toLoad--;
                        f.loaded++
                    })
                };
                c.prototype.loadTexture = function(a, b, c) {
                    var d = this;
                    void 0 === b && (b = null);
                    void 0 === c && (c = null);
                    a = this.pathPrefix + a;
                    this.toLoad++;
                    var e = new Image;
                    e.crossOrigin = "anonymous";
                    e.onload = function(c) {
                        c = d.textureLoader(e);
                        d.assets[a] = c;
                        d.toLoad--;
                        d.loaded++;
                        b && b(a, e)
                    };
                    e.onerror = function(b) {
                        d.errors[a] = "Couldn't load image " +
                            a;
                        d.toLoad--;
                        d.loaded++;
                        c && c(a, "Couldn't load image " + a)
                    };
                    e.src = a
                };
                c.prototype.loadTextureData = function(a, b, c, d) {
                    var f = this;
                    void 0 === c && (c = null);
                    void 0 === d && (d = null);
                    a = this.pathPrefix + a;
                    this.toLoad++;
                    var e = new Image;
                    e.onload = function(b) {
                        b = f.textureLoader(e);
                        f.assets[a] = b;
                        f.toLoad--;
                        f.loaded++;
                        c && c(a, e)
                    };
                    e.onerror = function(b) {
                        f.errors[a] = "Couldn't load image " + a;
                        f.toLoad--;
                        f.loaded++;
                        d && d(a, "Couldn't load image " + a)
                    };
                    e.src = b
                };
                c.prototype.loadTextureAtlas = function(a, b, e) {
                    var f = this;
                    void 0 === b && (b = null);
                    void 0 === e && (e = null);
                    var l = 0 <= a.lastIndexOf("/") ? a.substring(0, a.lastIndexOf("/")) : "";
                    a = this.pathPrefix + a;
                    this.toLoad++;
                    c.downloadText(a, function(c) {
                        var h = 0,
                            k = [];
                        try {
                            new d.TextureAtlas(c, function(a) {
                                k.push(l + "/" + a);
                                a = document.createElement("img");
                                a.width = 16;
                                a.height = 16;
                                return new d.FakeTexture(a)
                            })
                        } catch (z) {
                            var g = z;
                            f.errors[a] = "Couldn't load texture atlas " + a + ": " + g.message;
                            e && e(a, "Couldn't load texture atlas " + a + ": " + g.message);
                            f.toLoad--;
                            f.loaded++;
                            return
                        }
                        g = function(g) {
                            var n = !1;
                            f.loadTexture(g,
                                function(g, m) {
                                    h++;
                                    if (h == k.length)
                                        if (n) f.errors[a] = "Couldn't load texture atlas page " + g + "} of atlas " + a, e && e(a, "Couldn't load texture atlas page " + g + " of atlas " + a), f.toLoad--, f.loaded++;
                                        else try {
                                            var p = new d.TextureAtlas(c, function(a) {
                                                return f.get(l + "/" + a)
                                            });
                                            f.assets[a] = p;
                                            b && b(a, p);
                                            f.toLoad--;
                                            f.loaded++
                                        } catch (y) {
                                            g = y, f.errors[a] = "Couldn't load texture atlas " + a + ": " + g.message, e && e(a, "Couldn't load texture atlas " + a + ": " + g.message), f.toLoad--, f.loaded++
                                        }
                                },
                                function(b, c) {
                                    n = !0;
                                    h++;
                                    h == k.length && (f.errors[a] =
                                        "Couldn't load texture atlas page " + b + "} of atlas " + a, e && e(a, "Couldn't load texture atlas page " + b + " of atlas " + a), f.toLoad--, f.loaded++)
                                })
                        };
                        for (var n = 0; n < k.length; n++) g(k[n])
                    }, function(b, c) {
                        f.errors[a] = "Couldn't load texture atlas " + a + ": status " + status + ", " + c;
                        e && e(a, "Couldn't load texture atlas " + a + ": status " + status + ", " + c);
                        f.toLoad--;
                        f.loaded++
                    })
                };
                c.prototype.get = function(a) {
                    a = this.pathPrefix + a;
                    return this.assets[a]
                };
                c.prototype.remove = function(a) {
                    a = this.pathPrefix + a;
                    var b = this.assets[a];
                    b.dispose &&
                        b.dispose();
                    this.assets[a] = null
                };
                c.prototype.removeAll = function() {
                    for (var a in this.assets) {
                        var b = this.assets[a];
                        b.dispose && b.dispose()
                    }
                    this.assets = {}
                };
                c.prototype.isLoadingComplete = function() {
                    return 0 == this.toLoad
                };
                c.prototype.getToLoad = function() {
                    return this.toLoad
                };
                c.prototype.getLoaded = function() {
                    return this.loaded
                };
                c.prototype.dispose = function() {
                    this.removeAll()
                };
                c.prototype.hasErrors = function() {
                    return 0 < Object.keys(this.errors).length
                };
                c.prototype.getErrors = function() {
                    return this.errors
                };
                return c
            }();
            d.AssetManager = e
        })(e || (e = {}));
        (function(d) {
            var e = function() {
                function c(a) {
                    this.atlas = a
                }
                c.prototype.newRegionAttachment = function(a, b, c) {
                    a = this.atlas.findRegion(c);
                    if (null == a) return null;
                    a.renderObject = a;
                    b = new d.RegionAttachment(b);
                    b.setRegion(a);
                    return b
                };
                c.prototype.newMeshAttachment = function(a, b, c) {
                    a = this.atlas.findRegion(c);
                    if (null == a) return null;
                    a.renderObject = a;
                    b = new d.MeshAttachment(b);
                    b.region = a;
                    return b
                };
                c.prototype.newBoundingBoxAttachment = function(a, b) {
                    return new d.BoundingBoxAttachment(b)
                };
                c.prototype.newPathAttachment = function(a, b) {
                    return new d.PathAttachment(b)
                };
                c.prototype.newPointAttachment = function(a, b) {
                    return new d.PointAttachment(b)
                };
                c.prototype.newClippingAttachment = function(a, b) {
                    return new d.ClippingAttachment(b)
                };
                return c
            }();
            d.AtlasAttachmentLoader = e
        })(e || (e = {}));
        (function(d) {
            d = d.BlendMode || (d.BlendMode = {});
            d[d.Normal = 0] = "Normal";
            d[d.Additive = 1] = "Additive";
            d[d.Multiply = 2] = "Multiply";
            d[d.Screen = 3] = "Screen"
        })(e || (e = {}));
        (function(d) {
            var e = function() {
                function c(a, b, c) {
                    this.children = [];
                    this.ashearY = this.ashearX = this.ascaleY = this.ascaleX = this.arotation = this.ay = this.ax = this.shearY = this.shearX = this.scaleY = this.scaleX = this.rotation = this.y = this.x = 0;
                    this.appliedValid = !1;
                    this.worldX = this.worldY = this.d = this.c = this.b = this.a = 0;
                    this.active = this.sorted = !1;
                    if (null == a) throw Error("data cannot be null.");
                    if (null == b) throw Error("skeleton cannot be null.");
                    this.data = a;
                    this.skeleton = b;
                    this.parent = c;
                    this.setToSetupPose()
                }
                c.prototype.isActive = function() {
                    return this.active
                };
                c.prototype.update = function() {
                    this.updateWorldTransformWith(this.x,
                        this.y, this.rotation, this.scaleX, this.scaleY, this.shearX, this.shearY)
                };
                c.prototype.updateWorldTransform = function() {
                    this.updateWorldTransformWith(this.x, this.y, this.rotation, this.scaleX, this.scaleY, this.shearX, this.shearY)
                };
                c.prototype.updateWorldTransformWith = function(a, b, c, f, e, h, k) {
                    this.ax = a;
                    this.ay = b;
                    this.arotation = c;
                    this.ascaleX = f;
                    this.ascaleY = e;
                    this.ashearX = h;
                    this.ashearY = k;
                    this.appliedValid = !0;
                    var l = this.parent;
                    if (null == l) {
                        var g = this.skeleton;
                        k = c + 90 + k;
                        var n = g.scaleX,
                            m = g.scaleY;
                        this.a = d.MathUtils.cosDeg(c +
                            h) * f * n;
                        this.b = d.MathUtils.cosDeg(k) * e * n;
                        this.c = d.MathUtils.sinDeg(c + h) * f * m;
                        this.d = d.MathUtils.sinDeg(k) * e * m;
                        this.worldX = a * n + g.x;
                        this.worldY = b * m + g.y
                    } else {
                        g = l.a;
                        n = l.b;
                        m = l.c;
                        var u = l.d;
                        this.worldX = g * a + n * b + l.worldX;
                        this.worldY = m * a + u * b + l.worldY;
                        switch (this.data.transformMode) {
                            case d.TransformMode.Normal:
                                k = c + 90 + k;
                                a = d.MathUtils.cosDeg(c + h) * f;
                                b = d.MathUtils.cosDeg(k) * e;
                                f *= d.MathUtils.sinDeg(c + h);
                                e *= d.MathUtils.sinDeg(k);
                                this.a = g * a + n * f;
                                this.b = g * b + n * e;
                                this.c = m * a + u * f;
                                this.d = m * b + u * e;
                                return;
                            case d.TransformMode.OnlyTranslation:
                                k =
                                    c + 90 + k;
                                this.a = d.MathUtils.cosDeg(c + h) * f;
                                this.b = d.MathUtils.cosDeg(k) * e;
                                this.c = d.MathUtils.sinDeg(c + h) * f;
                                this.d = d.MathUtils.sinDeg(k) * e;
                                break;
                            case d.TransformMode.NoRotationOrReflection:
                                a = g * g + m * m;
                                1E-4 < a ? (a = Math.abs(g * u - n * m) / a, n = m * a, u = g * a, a = Math.atan2(m, g) * d.MathUtils.radDeg) : (m = g = 0, a = 90 - Math.atan2(u, n) * d.MathUtils.radDeg);
                                h = c + h - a;
                                k = c + k - a + 90;
                                a = d.MathUtils.cosDeg(h) * f;
                                b = d.MathUtils.cosDeg(k) * e;
                                f *= d.MathUtils.sinDeg(h);
                                e *= d.MathUtils.sinDeg(k);
                                this.a = g * a - n * f;
                                this.b = g * b - n * e;
                                this.c = m * a + u * f;
                                this.d = m * b + u *
                                    e;
                                break;
                            case d.TransformMode.NoScale:
                            case d.TransformMode.NoScaleOrReflection:
                                a = d.MathUtils.cosDeg(c), b = d.MathUtils.sinDeg(c), c = (g * a + n * b) / this.skeleton.scaleX, l = (m * a + u * b) / this.skeleton.scaleY, a = Math.sqrt(c * c + l * l), 1E-5 < a && (a = 1 / a), c *= a, l *= a, a = Math.sqrt(c * c + l * l), this.data.transformMode == d.TransformMode.NoScale && 0 > g * u - n * m != (0 > this.skeleton.scaleX != 0 > this.skeleton.scaleY) && (a = -a), n = Math.PI / 2 + Math.atan2(l, c), g = Math.cos(n) * a, n = Math.sin(n) * a, a = d.MathUtils.cosDeg(h) * f, b = d.MathUtils.cosDeg(90 + k) * e, f *= d.MathUtils.sinDeg(h),
                                    e *= d.MathUtils.sinDeg(90 + k), this.a = c * a + g * f, this.b = c * b + g * e, this.c = l * a + n * f, this.d = l * b + n * e
                        }
                        this.a *= this.skeleton.scaleX;
                        this.b *= this.skeleton.scaleX;
                        this.c *= this.skeleton.scaleY;
                        this.d *= this.skeleton.scaleY
                    }
                };
                c.prototype.setToSetupPose = function() {
                    var a = this.data;
                    this.x = a.x;
                    this.y = a.y;
                    this.rotation = a.rotation;
                    this.scaleX = a.scaleX;
                    this.scaleY = a.scaleY;
                    this.shearX = a.shearX;
                    this.shearY = a.shearY
                };
                c.prototype.getWorldRotationX = function() {
                    return Math.atan2(this.c, this.a) * d.MathUtils.radDeg
                };
                c.prototype.getWorldRotationY =
                    function() {
                        return Math.atan2(this.d, this.b) * d.MathUtils.radDeg
                    };
                c.prototype.getWorldScaleX = function() {
                    return Math.sqrt(this.a * this.a + this.c * this.c)
                };
                c.prototype.getWorldScaleY = function() {
                    return Math.sqrt(this.b * this.b + this.d * this.d)
                };
                c.prototype.updateAppliedTransform = function() {
                    this.appliedValid = !0;
                    var a = this.parent;
                    if (null == a) this.ax = this.worldX, this.ay = this.worldY, this.arotation = Math.atan2(this.c, this.a) * d.MathUtils.radDeg, this.ascaleX = Math.sqrt(this.a * this.a + this.c * this.c), this.ascaleY = Math.sqrt(this.b *
                        this.b + this.d * this.d), this.ashearX = 0, this.ashearY = Math.atan2(this.a * this.b + this.c * this.d, this.a * this.d - this.b * this.c) * d.MathUtils.radDeg;
                    else {
                        var b = a.a,
                            c = a.b,
                            f = a.c,
                            e = a.d,
                            h = 1 / (b * e - c * f),
                            k = this.worldX - a.worldX;
                        a = this.worldY - a.worldY;
                        this.ax = k * e * h - a * c * h;
                        this.ay = a * b * h - k * f * h;
                        e *= h;
                        b *= h;
                        c *= h;
                        h *= f;
                        f = e * this.a - c * this.c;
                        c = e * this.b - c * this.d;
                        e = b * this.c - h * this.a;
                        h = b * this.d - h * this.b;
                        this.ashearX = 0;
                        this.ascaleX = Math.sqrt(f * f + e * e);
                        1E-4 < this.ascaleX ? (b = f * h - c * e, this.ascaleY = b / this.ascaleX, this.ashearY = Math.atan2(f * c +
                            e * h, b) * d.MathUtils.radDeg, this.arotation = Math.atan2(e, f) * d.MathUtils.radDeg) : (this.ascaleX = 0, this.ascaleY = Math.sqrt(c * c + h * h), this.ashearY = 0, this.arotation = 90 - Math.atan2(h, c) * d.MathUtils.radDeg)
                    }
                };
                c.prototype.worldToLocal = function(a) {
                    var b = this.a,
                        c = this.b,
                        d = this.c,
                        e = this.d,
                        h = 1 / (b * e - c * d),
                        k = a.x - this.worldX,
                        g = a.y - this.worldY;
                    a.x = k * e * h - g * c * h;
                    a.y = g * b * h - k * d * h;
                    return a
                };
                c.prototype.localToWorld = function(a) {
                    var b = a.x,
                        c = a.y;
                    a.x = b * this.a + c * this.b + this.worldX;
                    a.y = b * this.c + c * this.d + this.worldY;
                    return a
                };
                c.prototype.worldToLocalRotation =
                    function(a) {
                        var b = d.MathUtils.sinDeg(a);
                        a = d.MathUtils.cosDeg(a);
                        return Math.atan2(this.a * b - this.c * a, this.d * a - this.b * b) * d.MathUtils.radDeg + this.rotation - this.shearX
                    };
                c.prototype.localToWorldRotation = function(a) {
                    a -= this.rotation - this.shearX;
                    var b = d.MathUtils.sinDeg(a);
                    a = d.MathUtils.cosDeg(a);
                    return Math.atan2(a * this.c + b * this.d, a * this.a + b * this.b) * d.MathUtils.radDeg
                };
                c.prototype.rotateWorld = function(a) {
                    var b = this.a,
                        c = this.b,
                        f = this.c,
                        e = this.d,
                        h = d.MathUtils.cosDeg(a);
                    a = d.MathUtils.sinDeg(a);
                    this.a = h * b -
                        a * f;
                    this.b = h * c - a * e;
                    this.c = a * b + h * f;
                    this.d = a * c + h * e;
                    this.appliedValid = !1
                };
                return c
            }();
            d.Bone = e
        })(e || (e = {}));
        (function(d) {
            var e = function() {
                return function(a, b, e) {
                    this.rotation = this.y = this.x = 0;
                    this.scaleY = this.scaleX = 1;
                    this.shearY = this.shearX = 0;
                    this.transformMode = c.Normal;
                    this.skinRequired = !1;
                    this.color = new d.Color;
                    if (0 > a) throw Error("index must be >= 0.");
                    if (null == b) throw Error("name cannot be null.");
                    this.index = a;
                    this.name = b;
                    this.parent = e
                }
            }();
            d.BoneData = e;
            var c;
            (function(a) {
                a[a.Normal = 0] = "Normal";
                a[a.OnlyTranslation =
                    1] = "OnlyTranslation";
                a[a.NoRotationOrReflection = 2] = "NoRotationOrReflection";
                a[a.NoScale = 3] = "NoScale";
                a[a.NoScaleOrReflection = 4] = "NoScaleOrReflection"
            })(c = d.TransformMode || (d.TransformMode = {}))
        })(e || (e = {}));
        (function(d) {
            var e = function() {
                return function(c, a, b) {
                    this.name = c;
                    this.order = a;
                    this.skinRequired = b
                }
            }();
            d.ConstraintData = e
        })(e || (e = {}));
        (function(d) {
            var e = function() {
                return function(c, a) {
                    if (null == a) throw Error("data cannot be null.");
                    this.time = c;
                    this.data = a
                }
            }();
            d.Event = e
        })(e || (e = {}));
        (function(d) {
            var e =
                function() {
                    return function(c) {
                        this.name = c
                    }
                }();
            d.EventData = e
        })(e || (e = {}));
        (function(d) {
            var e = function() {
                function c(a, b) {
                    this.bendDirection = 0;
                    this.stretch = this.compress = !1;
                    this.mix = 1;
                    this.softness = 0;
                    this.active = !1;
                    if (null == a) throw Error("data cannot be null.");
                    if (null == b) throw Error("skeleton cannot be null.");
                    this.data = a;
                    this.mix = a.mix;
                    this.softness = a.softness;
                    this.bendDirection = a.bendDirection;
                    this.compress = a.compress;
                    this.stretch = a.stretch;
                    this.bones = [];
                    for (var c = 0; c < a.bones.length; c++) this.bones.push(b.findBone(a.bones[c].name));
                    this.target = b.findBone(a.target.name)
                }
                c.prototype.isActive = function() {
                    return this.active
                };
                c.prototype.apply = function() {
                    this.update()
                };
                c.prototype.update = function() {
                    var a = this.target,
                        b = this.bones;
                    switch (b.length) {
                        case 1:
                            this.apply1(b[0], a.worldX, a.worldY, this.compress, this.stretch, this.data.uniform, this.mix);
                            break;
                        case 2:
                            this.apply2(b[0], b[1], a.worldX, a.worldY, this.bendDirection, this.stretch, this.softness, this.mix)
                    }
                };
                c.prototype.apply1 = function(a, b, c, f, e, h, k) {
                    a.appliedValid || a.updateAppliedTransform();
                    var l = a.parent,
                        g = 1 / (l.a * l.d - l.b * l.c);
                    b -= l.worldX;
                    var n = c - l.worldY;
                    c = (b * l.d - n * l.b) * g - a.ax;
                    var m = (n * l.a - b * l.c) * g - a.ay;
                    l = Math.atan2(m, c) * d.MathUtils.radDeg - a.ashearX - a.arotation;
                    0 > a.ascaleX && (l += 180);
                    180 < l ? l -= 360 : -180 > l && (l += 360);
                    g = a.ascaleX;
                    b = a.ascaleY;
                    if (f || e)
                        if (n = a.data.length * g, c = Math.sqrt(c * c + m * m), f && c < n || e && c > n && 1E-4 < n) f = (c / n - 1) * k + 1, g *= f, h && (b *= f);
                    a.updateWorldTransformWith(a.ax, a.ay, a.arotation + l * k, g, b, a.ashearX, a.ashearY)
                };
                c.prototype.apply2 = function(a, b, c, f, e, h, k, g) {
                    if (0 == g) b.updateWorldTransform();
                    else {
                        a.appliedValid || a.updateAppliedTransform();
                        b.appliedValid || b.updateAppliedTransform();
                        var l = a.ax,
                            n = a.ay,
                            m = a.ascaleX,
                            p = m,
                            u = a.ascaleY,
                            v = b.ascaleX;
                        if (0 > m) {
                            m = -m;
                            var q = 180;
                            var y = -1
                        } else q = 0, y = 1;
                        0 > u && (u = -u, y = -y);
                        if (0 > v) {
                            v = -v;
                            var C = 180
                        } else C = 0;
                        var F = b.ax,
                            G = a.a,
                            D = a.b,
                            I = a.c,
                            K = a.d,
                            L = 1E-4 >= Math.abs(m - u);
                        if (L) {
                            var R = b.ay;
                            var M = G * F + D * R + a.worldX;
                            var S = I * F + K * R + a.worldY
                        } else R = 0, M = G * F + a.worldX, S = I * F + a.worldY;
                        var O = a.parent;
                        G = O.a;
                        D = O.b;
                        I = O.c;
                        K = O.d;
                        var Q = 1 / (G * K - D * I),
                            V = M - O.worldX;
                        M = S - O.worldY;
                        S = (V * K - M * D) * Q - l;
                        M = (M * G - V * I) * Q - n;
                        S = Math.sqrt(S * S + M * M);
                        var ba = b.data.length * v;
                        if (1E-4 > S) this.apply1(a, c, f, !1, h, !1, g), b.updateWorldTransformWith(F, R, 0, b.ascaleX, b.ascaleY, b.ashearX, b.ashearY);
                        else {
                            V = c - O.worldX;
                            M = f - O.worldY;
                            K = (V * K - M * D) * Q - l;
                            I = (M * G - V * I) * Q - n;
                            Q = K * K + I * I;
                            0 != k && (k *= m * (v + 1) / 2, G = Math.sqrt(Q), D = G - S - ba * m + k, 0 < D && (Q = Math.min(1, D / (2 * k)) - 1, Q = (D - k * (1 - Q * Q)) / G, K -= Q * K, I -= Q * I, Q = K * K + I * I));
                            a: if (L) ba *= m, G = (Q - S * S - ba * ba) / (2 * S * ba), -1 > G ? G = -1 : 1 < G && (G = 1, h && (p *= (Math.sqrt(Q) / (S + ba) - 1) * g + 1)), e *= Math.acos(G), G = S + ba * G, D = ba * Math.sin(e),
                                    G = Math.atan2(I * G - K * D, K * G + I * D);
                                else {
                                    G = m * ba;
                                    D = u * ba;
                                    M = G * G;
                                    V = D * D;
                                    h = Math.atan2(I, K);
                                    I = V * S * S + M * Q - M * V;
                                    k = -2 * V * S;
                                    L = V - M;
                                    K = k * k - 4 * L * I;
                                    if (0 <= K && (K = Math.sqrt(K), 0 > k && (K = -K), K = -(k + K) / 2, k = K / L, I /= K, I = Math.abs(k) < Math.abs(I) ? k : I, I * I <= Q)) {
                                        M = Math.sqrt(Q - I * I) * e;
                                        G = h - Math.atan2(M, I);
                                        e = Math.atan2(M / u, (I - S) / m);
                                        break a
                                    }
                                    m = d.MathUtils.PI;
                                    k = S - G;
                                    L = k * k;
                                    u = ba = 0;
                                    v = S + G;
                                    c = v * v;
                                    f = 0;
                                    I = -G * S / (M - V); - 1 <= I && 1 >= I && (I = Math.acos(I), V = G * Math.cos(I) + S, M = D * Math.sin(I), K = V * V + M * M, K < L && (m = I, L = K, k = V, ba = M), K > c && (u = I, c = K, v = V, f = M));
                                    Q <= (L + c) / 2 ? (G = h - Math.atan2(ba *
                                        e, k), e *= m) : (G = h - Math.atan2(f * e, v), e *= u)
                                }
                            S = Math.atan2(R, F) * y;
                            D = a.arotation;
                            G = (G - S) * d.MathUtils.radDeg + q - D;
                            180 < G ? G -= 360 : -180 > G && (G += 360);
                            a.updateWorldTransformWith(l, n, D + G * g, p, a.ascaleY, 0, 0);
                            D = b.arotation;
                            e = ((e + S) * d.MathUtils.radDeg - b.ashearX) * y + C - D;
                            180 < e ? e -= 360 : -180 > e && (e += 360);
                            b.updateWorldTransformWith(F, R, D + e * g, b.ascaleX, b.ascaleY, b.ashearX, b.ashearY)
                        }
                    }
                };
                return c
            }();
            d.IkConstraint = e
        })(e || (e = {}));
        (function(d) {
            var e = function(c) {
                function a(a) {
                    a = c.call(this, a, 0, !1) || this;
                    a.bones = [];
                    a.bendDirection =
                        1;
                    a.compress = !1;
                    a.stretch = !1;
                    a.uniform = !1;
                    a.mix = 1;
                    a.softness = 0;
                    return a
                }
                h(a, c);
                return a
            }(d.ConstraintData);
            d.IkConstraintData = e
        })(e || (e = {}));
        (function(d) {
            var e = function() {
                function c(a, b) {
                    this.translateMix = this.rotateMix = this.spacing = this.position = 0;
                    this.spaces = [];
                    this.positions = [];
                    this.world = [];
                    this.curves = [];
                    this.lengths = [];
                    this.segments = [];
                    this.active = !1;
                    if (null == a) throw Error("data cannot be null.");
                    if (null == b) throw Error("skeleton cannot be null.");
                    this.data = a;
                    this.bones = [];
                    for (var c = 0, d = a.bones.length; c <
                        d; c++) this.bones.push(b.findBone(a.bones[c].name));
                    this.target = b.findSlot(a.target.name);
                    this.position = a.position;
                    this.spacing = a.spacing;
                    this.rotateMix = a.rotateMix;
                    this.translateMix = a.translateMix
                }
                c.prototype.isActive = function() {
                    return this.active
                };
                c.prototype.apply = function() {
                    this.update()
                };
                c.prototype.update = function() {
                    var a = this.target.getAttachment();
                    if (a instanceof d.PathAttachment) {
                        var b = this.rotateMix,
                            e = this.translateMix,
                            f = 0 < b;
                        if (0 < e || f) {
                            var h = this.data,
                                k = h.spacingMode == d.SpacingMode.Percent;
                            var g = h.rotateMode;
                            var m = g == d.RotateMode.Tangent,
                                t = g == d.RotateMode.ChainScale,
                                q = this.bones.length,
                                z = m ? q : q + 1,
                                E = this.bones,
                                w = d.Utils.setArraySize(this.spaces, z),
                                A = null,
                                B = this.spacing;
                            if (t || !k) {
                                t && (A = d.Utils.setArraySize(this.lengths, q));
                                for (var y = h.spacingMode == d.SpacingMode.Length, C = 0, F = z - 1; C < F;) {
                                    var G = E[C];
                                    var D = G.data.length;
                                    if (D < c.epsilon) t && (A[C] = 0), w[++C] = 0;
                                    else if (k) {
                                        if (t) {
                                            var I = D * G.a;
                                            var K = D * G.c;
                                            A[C] = Math.sqrt(I * I + K * K)
                                        }
                                        w[++C] = B
                                    } else I = D * G.a, K = D * G.c, G = Math.sqrt(I * I + K * K), t && (A[C] = G), w[++C] = (y ?
                                        D + B : B) * G / D
                                }
                            } else
                                for (C = 1; C < z; C++) w[C] = B;
                            a = this.computeWorldPositions(a, z, m, h.positionMode == d.PositionMode.Percent, k);
                            k = a[0];
                            z = a[1];
                            h = h.offsetRotation;
                            0 == h ? B = g == d.RotateMode.Chain : (B = !1, g = this.target.bone, h *= 0 < g.a * g.d - g.b * g.c ? d.MathUtils.degRad : -d.MathUtils.degRad);
                            C = 0;
                            for (g = 3; C < q; C++, g += 3) {
                                G = E[C];
                                G.worldX += (k - G.worldX) * e;
                                G.worldY += (z - G.worldY) * e;
                                I = a[g];
                                K = a[g + 1];
                                y = I - k;
                                F = K - z;
                                t && (k = A[C], 0 != k && (k = (Math.sqrt(y * y + F * F) / k - 1) * b + 1, G.a *= k, G.c *= k));
                                k = I;
                                z = K;
                                if (f) {
                                    K = G.a;
                                    I = G.b;
                                    D = G.c;
                                    var L = G.d;
                                    var R = m ? a[g - 1] : 0 ==
                                        w[C + 1] ? a[g + 2] : Math.atan2(F, y);
                                    R -= Math.atan2(D, K);
                                    if (B) {
                                        var M = Math.cos(R);
                                        var S = Math.sin(R);
                                        var O = G.data.length;
                                        k += (O * (M * K - S * D) - y) * b;
                                        z += (O * (S * K + M * D) - F) * b
                                    } else R += h;
                                    R > d.MathUtils.PI ? R -= d.MathUtils.PI2 : R < -d.MathUtils.PI && (R += d.MathUtils.PI2);
                                    R *= b;
                                    M = Math.cos(R);
                                    S = Math.sin(R);
                                    G.a = M * K - S * D;
                                    G.b = M * I - S * L;
                                    G.c = S * K + M * D;
                                    G.d = S * I + M * L
                                }
                                G.appliedValid = !1
                            }
                        }
                    }
                };
                c.prototype.computeWorldPositions = function(a, b, e, f, h) {
                    var l = this.target,
                        k = this.position,
                        g = this.spaces,
                        n = d.Utils.setArraySize(this.positions, 3 * b + 2),
                        m = a.closed,
                        q =
                        a.worldVerticesLength,
                        E = q / 6,
                        w = c.NONE;
                    if (!a.constantSpeed) {
                        var A = a.lengths;
                        E -= m ? 1 : 2;
                        var B = A[E];
                        f && (k *= B);
                        if (h)
                            for (var y = 1; y < b; y++) g[y] *= B;
                        var C = d.Utils.setArraySize(this.world, 8);
                        for (var F = y = 0, G = 0; y < b; y++, F += 3) {
                            h = g[y];
                            f = k += h;
                            if (m) f %= B, 0 > f && (f += B), G = 0;
                            else {
                                if (0 > f) {
                                    w != c.BEFORE && (w = c.BEFORE, a.computeWorldVertices(l, 2, 4, C, 0, 2));
                                    this.addBeforePosition(f, C, 0, n, F);
                                    continue
                                }
                                if (f > B) {
                                    w != c.AFTER && (w = c.AFTER, a.computeWorldVertices(l, q - 6, 4, C, 0, 2));
                                    this.addAfterPosition(f - B, C, 0, n, F);
                                    continue
                                }
                            }
                            for (;; G++) {
                                var D = A[G];
                                if (!(f > D)) {
                                    if (0 == G) f /= D;
                                    else {
                                        var I = A[G - 1];
                                        f = (f - I) / (D - I)
                                    }
                                    break
                                }
                            }
                            G != w && (w = G, m && G == E ? (a.computeWorldVertices(l, q - 4, 4, C, 0, 2), a.computeWorldVertices(l, 0, 4, C, 4, 2)) : a.computeWorldVertices(l, 6 * G + 2, 8, C, 0, 2));
                            this.addCurvePosition(f, C[0], C[1], C[2], C[3], C[4], C[5], C[6], C[7], n, F, e || 0 < y && 0 == h)
                        }
                        return n
                    }
                    m ? (q += 2, C = d.Utils.setArraySize(this.world, q), a.computeWorldVertices(l, 2, q - 4, C, 0, 2), a.computeWorldVertices(l, 0, 2, C, q - 4, 2), C[q - 2] = C[0], C[q - 1] = C[1]) : (E--, q -= 4, C = d.Utils.setArraySize(this.world, q), a.computeWorldVertices(l,
                        2, q, C, 0, 2));
                    l = d.Utils.setArraySize(this.curves, E);
                    A = 0;
                    B = C[0];
                    D = C[1];
                    var K = 0,
                        L = 0,
                        R = 0,
                        M = 0,
                        S = 0,
                        O = 0;
                    y = 0;
                    for (F = 2; y < E; y++, F += 6) {
                        K = C[F];
                        L = C[F + 1];
                        R = C[F + 2];
                        M = C[F + 3];
                        S = C[F + 4];
                        O = C[F + 5];
                        var Q = .1875 * (B - 2 * K + R);
                        var V = .1875 * (D - 2 * L + M);
                        I = .09375 * (3 * (K - R) - B + S);
                        var ba = .09375 * (3 * (L - M) - D + O);
                        var da = 2 * Q + I;
                        var T = 2 * V + ba;
                        Q = .75 * (K - B) + Q + .16666667 * I;
                        V = .75 * (L - D) + V + .16666667 * ba;
                        A += Math.sqrt(Q * Q + V * V);
                        Q += da;
                        V += T;
                        da += I;
                        T += ba;
                        A += Math.sqrt(Q * Q + V * V);
                        Q += da;
                        V += T;
                        A += Math.sqrt(Q * Q + V * V);
                        Q += da + I;
                        V += T + ba;
                        A += Math.sqrt(Q * Q + V * V);
                        l[y] = A;
                        B = S;
                        D = O
                    }
                    k *=
                        f ? A : A / a.lengths[E - 1];
                    if (h)
                        for (y = 1; y < b; y++) g[y] *= A;
                    a = this.segments;
                    for (ba = G = F = y = E = 0; y < b; y++, F += 3) {
                        h = g[y];
                        f = k += h;
                        if (m) f %= A, 0 > f && (f += A), G = 0;
                        else {
                            if (0 > f) {
                                this.addBeforePosition(f, C, 0, n, F);
                                continue
                            }
                            if (f > A) {
                                this.addAfterPosition(f - A, C, q - 4, n, F);
                                continue
                            }
                        }
                        for (;; G++)
                            if (da = l[G], !(f > da)) {
                                0 == G ? f /= da : (I = l[G - 1], f = (f - I) / (da - I));
                                break
                            }
                        if (G != w) {
                            w = G;
                            var N = 6 * G;
                            B = C[N];
                            D = C[N + 1];
                            K = C[N + 2];
                            L = C[N + 3];
                            R = C[N + 4];
                            M = C[N + 5];
                            S = C[N + 6];
                            O = C[N + 7];
                            Q = .03 * (B - 2 * K + R);
                            V = .03 * (D - 2 * L + M);
                            I = .006 * (3 * (K - R) - B + S);
                            ba = .006 * (3 * (L - M) - D + O);
                            da = 2 * Q + I;
                            T = 2 *
                                V + ba;
                            Q = .3 * (K - B) + Q + .16666667 * I;
                            V = .3 * (L - D) + V + .16666667 * ba;
                            E = Math.sqrt(Q * Q + V * V);
                            a[0] = E;
                            for (N = 1; 8 > N; N++) Q += da, V += T, da += I, T += ba, E += Math.sqrt(Q * Q + V * V), a[N] = E;
                            Q += da;
                            V += T;
                            E += Math.sqrt(Q * Q + V * V);
                            a[8] = E;
                            Q += da + I;
                            V += T + ba;
                            E += Math.sqrt(Q * Q + V * V);
                            a[9] = E;
                            ba = 0
                        }
                        for (f *= E;; ba++)
                            if (da = a[ba], !(f > da)) {
                                0 == ba ? f /= da : (I = a[ba - 1], f = ba + (f - I) / (da - I));
                                break
                            }
                        this.addCurvePosition(.1 * f, B, D, K, L, R, M, S, O, n, F, e || 0 < y && 0 == h)
                    }
                    return n
                };
                c.prototype.addBeforePosition = function(a, b, c, d, e) {
                    var f = b[c],
                        l = b[c + 1];
                    b = Math.atan2(b[c + 3] - l, b[c + 2] - f);
                    d[e] =
                        f + a * Math.cos(b);
                    d[e + 1] = l + a * Math.sin(b);
                    d[e + 2] = b
                };
                c.prototype.addAfterPosition = function(a, b, c, d, e) {
                    var f = b[c + 2],
                        l = b[c + 3];
                    b = Math.atan2(l - b[c + 1], f - b[c]);
                    d[e] = f + a * Math.cos(b);
                    d[e + 1] = l + a * Math.sin(b);
                    d[e + 2] = b
                };
                c.prototype.addCurvePosition = function(a, b, c, d, e, h, k, g, m, q, z, E) {
                    if (0 == a || isNaN(a)) q[z] = b, q[z + 1] = c, q[z + 2] = Math.atan2(e - c, d - b);
                    else {
                        var f = a * a,
                            l = f * a,
                            n = 1 - a,
                            p = n * n,
                            u = p * n,
                            t = n * a,
                            v = 3 * t;
                        n *= v;
                        v *= a;
                        g = b * u + d * n + h * v + g * l;
                        m = c * u + e * n + k * v + m * l;
                        q[z] = g;
                        q[z + 1] = m;
                        E && (q[z + 2] = .001 > a ? Math.atan2(e - c, d - b) : Math.atan2(m - (c * p + e * t *
                            2 + k * f), g - (b * p + d * t * 2 + h * f)))
                    }
                };
                c.NONE = -1;
                c.BEFORE = -2;
                c.AFTER = -3;
                c.epsilon = 1E-5;
                return c
            }();
            d.PathConstraint = e
        })(e || (e = {}));
        (function(d) {
            var e = function(c) {
                function a(a) {
                    a = c.call(this, a, 0, !1) || this;
                    a.bones = [];
                    return a
                }
                h(a, c);
                return a
            }(d.ConstraintData);
            d.PathConstraintData = e;
            (function(c) {
                c[c.Fixed = 0] = "Fixed";
                c[c.Percent = 1] = "Percent"
            })(d.PositionMode || (d.PositionMode = {}));
            (function(c) {
                c[c.Length = 0] = "Length";
                c[c.Fixed = 1] = "Fixed";
                c[c.Percent = 2] = "Percent"
            })(d.SpacingMode || (d.SpacingMode = {}));
            (function(c) {
                c[c.Tangent =
                    0] = "Tangent";
                c[c.Chain = 1] = "Chain";
                c[c.ChainScale = 2] = "ChainScale"
            })(d.RotateMode || (d.RotateMode = {}))
        })(e || (e = {}));
        (function(d) {
            var e = function() {
                    function a(a) {
                        this.toLoad = [];
                        this.assets = {};
                        this.clientId = a
                    }
                    a.prototype.loaded = function() {
                        var a = 0,
                            c;
                        for (c in this.assets) a++;
                        return a
                    };
                    return a
                }(),
                c = function() {
                    function a(a) {
                        void 0 === a && (a = "");
                        this.clientAssets = {};
                        this.queuedAssets = {};
                        this.rawAssets = {};
                        this.errors = {};
                        this.pathPrefix = a
                    }
                    a.prototype.queueAsset = function(a, c, d) {
                        var b = this.clientAssets[a];
                        if (null ===
                            b || void 0 === b) b = new e(a), this.clientAssets[a] = b;
                        null !== c && (b.textureLoader = c);
                        b.toLoad.push(d);
                        if (this.queuedAssets[d] === d) return !1;
                        this.queuedAssets[d] = d;
                        return !0
                    };
                    a.prototype.loadText = function(a, c) {
                        var b = this;
                        c = this.pathPrefix + c;
                        if (this.queueAsset(a, null, c)) {
                            var d = new XMLHttpRequest;
                            d.onreadystatechange = function() {
                                d.readyState == XMLHttpRequest.DONE && (200 <= d.status && 300 > d.status ? b.rawAssets[c] = d.responseText : b.errors[c] = "Couldn't load text " + c + ": status " + d.status + ", " + d.responseText)
                            };
                            d.open("GET",
                                c, !0);
                            d.send()
                        }
                    };
                    a.prototype.loadJson = function(a, c) {
                        var b = this;
                        c = this.pathPrefix + c;
                        if (this.queueAsset(a, null, c)) {
                            var d = new XMLHttpRequest;
                            d.onreadystatechange = function() {
                                d.readyState == XMLHttpRequest.DONE && (200 <= d.status && 300 > d.status ? b.rawAssets[c] = JSON.parse(d.responseText) : b.errors[c] = "Couldn't load text " + c + ": status " + d.status + ", " + d.responseText)
                            };
                            d.open("GET", c, !0);
                            d.send()
                        }
                    };
                    a.prototype.loadTexture = function(a, c, d) {
                        var b = this;
                        d = this.pathPrefix + d;
                        if (this.queueAsset(a, c, d)) {
                            var f = new Image;
                            f.src =
                                d;
                            f.crossOrigin = "anonymous";
                            f.onload = function(a) {
                                b.rawAssets[d] = f
                            };
                            f.onerror = function(a) {
                                b.errors[d] = "Couldn't load image " + d
                            }
                        }
                    };
                    a.prototype.get = function(a, c) {
                        c = this.pathPrefix + c;
                        a = this.clientAssets[a];
                        return null === a || void 0 === a ? !0 : a.assets[c]
                    };
                    a.prototype.updateClientAssets = function(a) {
                        for (var b = 0; b < a.toLoad.length; b++) {
                            var c = a.toLoad[b],
                                d = a.assets[c];
                            if (null === d || void 0 === d) d = this.rawAssets[c], null !== d && void 0 !== d && (d instanceof HTMLImageElement ? a.assets[c] = a.textureLoader(d) : a.assets[c] = d)
                        }
                    };
                    a.prototype.isLoadingComplete = function(a) {
                        a = this.clientAssets[a];
                        if (null === a || void 0 === a) return !0;
                        this.updateClientAssets(a);
                        return a.toLoad.length == a.loaded()
                    };
                    a.prototype.dispose = function() {};
                    a.prototype.hasErrors = function() {
                        return 0 < Object.keys(this.errors).length
                    };
                    a.prototype.getErrors = function() {
                        return this.errors
                    };
                    return a
                }();
            d.SharedAssetManager = c
        })(e || (e = {}));
        (function(d) {
            var e = function() {
                function c(a) {
                    this._updateCache = [];
                    this.updateCacheReset = [];
                    this.time = 0;
                    this.scaleY = this.scaleX = 1;
                    this.y =
                        this.x = 0;
                    if (null == a) throw Error("data cannot be null.");
                    this.data = a;
                    this.bones = [];
                    for (var b = 0; b < a.bones.length; b++) {
                        var c = a.bones[b];
                        if (null == c.parent) c = new d.Bone(c, this, null);
                        else {
                            var f = this.bones[c.parent.index];
                            c = new d.Bone(c, this, f);
                            f.children.push(c)
                        }
                        this.bones.push(c)
                    }
                    this.slots = [];
                    this.drawOrder = [];
                    for (b = 0; b < a.slots.length; b++) f = a.slots[b], c = this.bones[f.boneData.index], c = new d.Slot(f, c), this.slots.push(c), this.drawOrder.push(c);
                    this.ikConstraints = [];
                    for (b = 0; b < a.ikConstraints.length; b++) this.ikConstraints.push(new d.IkConstraint(a.ikConstraints[b],
                        this));
                    this.transformConstraints = [];
                    for (b = 0; b < a.transformConstraints.length; b++) this.transformConstraints.push(new d.TransformConstraint(a.transformConstraints[b], this));
                    this.pathConstraints = [];
                    for (b = 0; b < a.pathConstraints.length; b++) this.pathConstraints.push(new d.PathConstraint(a.pathConstraints[b], this));
                    this.color = new d.Color(1, 1, 1, 1);
                    this.updateCache()
                }
                c.prototype.updateCache = function() {
                    this._updateCache.length = 0;
                    this.updateCacheReset.length = 0;
                    for (var a = this.bones, b = 0, c = a.length; b < c; b++) {
                        var d =
                            a[b];
                        d.sorted = d.data.skinRequired;
                        d.active = !d.sorted
                    }
                    if (null != this.skin) {
                        var e = this.skin.bones;
                        b = 0;
                        for (c = this.skin.bones.length; b < c; b++) {
                            d = this.bones[e[b].index];
                            do d.sorted = !1, d.active = !0, d = d.parent; while (null != d)
                        }
                    }
                    c = this.ikConstraints;
                    e = this.transformConstraints;
                    var h = this.pathConstraints,
                        k = c.length,
                        g = e.length,
                        m = h.length,
                        q = k + g + m;
                    b = 0;
                    a: for (; b < q; b++) {
                        for (var z = 0; z < k; z++)
                            if (d = c[z], d.data.order == b) {
                                this.sortIkConstraint(d);
                                continue a
                            }
                        for (z = 0; z < g; z++)
                            if (d = e[z], d.data.order == b) {
                                this.sortTransformConstraint(d);
                                continue a
                            }
                        for (z = 0; z < m; z++)
                            if (d = h[z], d.data.order == b) {
                                this.sortPathConstraint(d);
                                continue a
                            }
                    }
                    b = 0;
                    for (c = a.length; b < c; b++) this.sortBone(a[b])
                };
                c.prototype.sortIkConstraint = function(a) {
                    a.active = a.target.isActive() && (!a.data.skinRequired || null != this.skin && d.Utils.contains(this.skin.constraints, a.data, !0));
                    if (a.active) {
                        this.sortBone(a.target);
                        var b = a.bones,
                            c = b[0];
                        this.sortBone(c);
                        if (1 < b.length) {
                            var f = b[b.length - 1]; - 1 < this._updateCache.indexOf(f) || this.updateCacheReset.push(f)
                        }
                        this._updateCache.push(a);
                        this.sortReset(c.children);
                        b[b.length - 1].sorted = !0
                    }
                };
                c.prototype.sortPathConstraint = function(a) {
                    a.active = a.target.bone.isActive() && (!a.data.skinRequired || null != this.skin && d.Utils.contains(this.skin.constraints, a.data, !0));
                    if (a.active) {
                        var b = a.target,
                            c = b.data.index,
                            f = b.bone;
                        null != this.skin && this.sortPathConstraintAttachment(this.skin, c, f);
                        null != this.data.defaultSkin && this.data.defaultSkin != this.skin && this.sortPathConstraintAttachment(this.data.defaultSkin, c, f);
                        for (var e = 0, h = this.data.skins.length; e <
                            h; e++) this.sortPathConstraintAttachment(this.data.skins[e], c, f);
                        e = b.getAttachment();
                        e instanceof d.PathAttachment && this.sortPathConstraintAttachmentWith(e, f);
                        f = a.bones;
                        b = f.length;
                        for (e = 0; e < b; e++) this.sortBone(f[e]);
                        this._updateCache.push(a);
                        for (e = 0; e < b; e++) this.sortReset(f[e].children);
                        for (e = 0; e < b; e++) f[e].sorted = !0
                    }
                };
                c.prototype.sortTransformConstraint = function(a) {
                    a.active = a.target.isActive() && (!a.data.skinRequired || null != this.skin && d.Utils.contains(this.skin.constraints, a.data, !0));
                    if (a.active) {
                        this.sortBone(a.target);
                        var b = a.bones,
                            c = b.length;
                        if (a.data.local)
                            for (var f = 0; f < c; f++) {
                                var e = b[f];
                                this.sortBone(e.parent); - 1 < this._updateCache.indexOf(e) || this.updateCacheReset.push(e)
                            } else
                                for (f = 0; f < c; f++) this.sortBone(b[f]);
                        this._updateCache.push(a);
                        for (a = 0; a < c; a++) this.sortReset(b[a].children);
                        for (a = 0; a < c; a++) b[a].sorted = !0
                    }
                };
                c.prototype.sortPathConstraintAttachment = function(a, b, c) {
                    if (a = a.attachments[b])
                        for (var d in a) this.sortPathConstraintAttachmentWith(a[d], c)
                };
                c.prototype.sortPathConstraintAttachmentWith = function(a,
                    b) {
                    if (a instanceof d.PathAttachment)
                        if (a = a.bones, null == a) this.sortBone(b);
                        else {
                            b = this.bones;
                            for (var c = 0; c < a.length;) {
                                var f = a[c++];
                                for (f = c + f; c < f; c++) this.sortBone(b[a[c]])
                            }
                        }
                };
                c.prototype.sortBone = function(a) {
                    if (!a.sorted) {
                        var b = a.parent;
                        null != b && this.sortBone(b);
                        a.sorted = !0;
                        this._updateCache.push(a)
                    }
                };
                c.prototype.sortReset = function(a) {
                    for (var b = 0, c = a.length; b < c; b++) {
                        var d = a[b];
                        d.active && (d.sorted && this.sortReset(d.children), d.sorted = !1)
                    }
                };
                c.prototype.updateWorldTransform = function() {
                    for (var a = this.updateCacheReset,
                            b = 0, c = a.length; b < c; b++) {
                        var d = a[b];
                        d.ax = d.x;
                        d.ay = d.y;
                        d.arotation = d.rotation;
                        d.ascaleX = d.scaleX;
                        d.ascaleY = d.scaleY;
                        d.ashearX = d.shearX;
                        d.ashearY = d.shearY;
                        d.appliedValid = !0
                    }
                    a = this._updateCache;
                    b = 0;
                    for (c = a.length; b < c; b++) a[b].update()
                };
                c.prototype.setToSetupPose = function() {
                    this.setBonesToSetupPose();
                    this.setSlotsToSetupPose()
                };
                c.prototype.setBonesToSetupPose = function() {
                    var a = this.bones;
                    for (var b = 0, c = a.length; b < c; b++) a[b].setToSetupPose();
                    var d = this.ikConstraints;
                    b = 0;
                    for (c = d.length; b < c; b++) a = d[b], a.mix =
                        a.data.mix, a.softness = a.data.softness, a.bendDirection = a.data.bendDirection, a.compress = a.data.compress, a.stretch = a.data.stretch;
                    var e = this.transformConstraints;
                    b = 0;
                    for (c = e.length; b < c; b++) a = e[b], d = a.data, a.rotateMix = d.rotateMix, a.translateMix = d.translateMix, a.scaleMix = d.scaleMix, a.shearMix = d.shearMix;
                    e = this.pathConstraints;
                    b = 0;
                    for (c = e.length; b < c; b++) a = e[b], d = a.data, a.position = d.position, a.spacing = d.spacing, a.rotateMix = d.rotateMix, a.translateMix = d.translateMix
                };
                c.prototype.setSlotsToSetupPose = function() {
                    var a =
                        this.slots;
                    d.Utils.arrayCopy(a, 0, this.drawOrder, 0, a.length);
                    for (var b = 0, c = a.length; b < c; b++) a[b].setToSetupPose()
                };
                c.prototype.getRootBone = function() {
                    return 0 == this.bones.length ? null : this.bones[0]
                };
                c.prototype.findBone = function(a) {
                    if (null == a) throw Error("boneName cannot be null.");
                    for (var b = this.bones, c = 0, d = b.length; c < d; c++) {
                        var e = b[c];
                        if (e.data.name == a) return e
                    }
                    return null
                };
                c.prototype.findBoneIndex = function(a) {
                    if (null == a) throw Error("boneName cannot be null.");
                    for (var b = this.bones, c = 0, d = b.length; c <
                        d; c++)
                        if (b[c].data.name == a) return c;
                    return -1
                };
                c.prototype.findSlot = function(a) {
                    if (null == a) throw Error("slotName cannot be null.");
                    for (var b = this.slots, c = 0, d = b.length; c < d; c++) {
                        var e = b[c];
                        if (e.data.name == a) return e
                    }
                    return null
                };
                c.prototype.findSlotIndex = function(a) {
                    if (null == a) throw Error("slotName cannot be null.");
                    for (var b = this.slots, c = 0, d = b.length; c < d; c++)
                        if (b[c].data.name == a) return c;
                    return -1
                };
                c.prototype.setSkinByName = function(a) {
                    var b = this.data.findSkin(a);
                    if (null == b) throw Error("Skin not found: " +
                        a);
                    this.setSkin(b)
                };
                c.prototype.setSkin = function(a) {
                    if (a != this.skin) {
                        if (null != a)
                            if (null != this.skin) a.attachAll(this, this.skin);
                            else
                                for (var b = this.slots, c = 0, d = b.length; c < d; c++) {
                                    var e = b[c],
                                        h = e.data.attachmentName;
                                    null != h && (h = a.getAttachment(c, h), null != h && e.setAttachment(h))
                                }
                        this.skin = a;
                        this.updateCache()
                    }
                };
                c.prototype.getAttachmentByName = function(a, b) {
                    return this.getAttachment(this.data.findSlotIndex(a), b)
                };
                c.prototype.getAttachment = function(a, b) {
                    if (null == b) throw Error("attachmentName cannot be null.");
                    if (null != this.skin) {
                        var c = this.skin.getAttachment(a, b);
                        if (null != c) return c
                    }
                    return null != this.data.defaultSkin ? this.data.defaultSkin.getAttachment(a, b) : null
                };
                c.prototype.setAttachment = function(a, b) {
                    if (null == a) throw Error("slotName cannot be null.");
                    for (var c = this.slots, d = 0, e = c.length; d < e; d++) {
                        var h = c[d];
                        if (h.data.name == a) {
                            c = null;
                            if (null != b && (c = this.getAttachment(d, b), null == c)) throw Error("Attachment not found: " + b + ", for slot: " + a);
                            h.setAttachment(c);
                            return
                        }
                    }
                    throw Error("Slot not found: " + a);
                };
                c.prototype.findIkConstraint =
                    function(a) {
                        if (null == a) throw Error("constraintName cannot be null.");
                        for (var b = this.ikConstraints, c = 0, d = b.length; c < d; c++) {
                            var e = b[c];
                            if (e.data.name == a) return e
                        }
                        return null
                    };
                c.prototype.findTransformConstraint = function(a) {
                    if (null == a) throw Error("constraintName cannot be null.");
                    for (var b = this.transformConstraints, c = 0, d = b.length; c < d; c++) {
                        var e = b[c];
                        if (e.data.name == a) return e
                    }
                    return null
                };
                c.prototype.findPathConstraint = function(a) {
                    if (null == a) throw Error("constraintName cannot be null.");
                    for (var b = this.pathConstraints,
                            c = 0, d = b.length; c < d; c++) {
                        var e = b[c];
                        if (e.data.name == a) return e
                    }
                    return null
                };
                c.prototype.getBounds = function(a, b, c) {
                    void 0 === c && (c = Array(2));
                    if (null == a) throw Error("offset cannot be null.");
                    if (null == b) throw Error("size cannot be null.");
                    for (var f = this.drawOrder, e = Number.POSITIVE_INFINITY, h = Number.POSITIVE_INFINITY, l = Number.NEGATIVE_INFINITY, k = Number.NEGATIVE_INFINITY, g = 0, m = f.length; g < m; g++) {
                        var q = f[g];
                        if (q.bone.active) {
                            var E = null,
                                w = q.getAttachment();
                            if (w instanceof d.RegionAttachment) {
                                var A = 8;
                                E = d.Utils.setArraySize(c,
                                    A, 0);
                                w.computeWorldVertices(q.bone, E, 0, 2)
                            } else w instanceof d.MeshAttachment && (A = w.worldVerticesLength, E = d.Utils.setArraySize(c, A, 0), w.computeWorldVertices(q, 0, A, E, 0, 2));
                            if (null != E)
                                for (q = 0, A = E.length; q < A; q += 2) {
                                    w = E[q];
                                    var B = E[q + 1];
                                    e = Math.min(e, w);
                                    h = Math.min(h, B);
                                    l = Math.max(l, w);
                                    k = Math.max(k, B)
                                }
                        }
                    }
                    a.set(e, h);
                    b.set(l - e, k - h)
                };
                c.prototype.update = function(a) {
                    this.time += a
                };
                return c
            }();
            d.Skeleton = e
        })(e || (e = {}));
        (function(d) {
            var e = function() {
                function e(a) {
                    this.scale = 1;
                    this.linkedMeshes = [];
                    this.attachmentLoader =
                        a
                }
                e.prototype.readSkeletonData = function(a) {
                    var b = this.scale,
                        f = new d.SkeletonData;
                    f.name = "";
                    a = new c(a);
                    f.hash = a.readString();
                    f.version = a.readString();
                    f.x = a.readFloat();
                    f.y = a.readFloat();
                    f.width = a.readFloat();
                    f.height = a.readFloat();
                    var h = a.readBoolean();
                    h && (f.fps = a.readFloat(), f.imagesPath = a.readString(), f.audioPath = a.readString());
                    var l = a.readInt(!0);
                    for (var k = 0; k < l; k++) a.strings.push(a.readString());
                    l = a.readInt(!0);
                    for (k = 0; k < l; k++) {
                        var g = a.readString();
                        var m = 0 == k ? null : f.bones[a.readInt(!0)];
                        g = new d.BoneData(k,
                            g, m);
                        g.rotation = a.readFloat();
                        g.x = a.readFloat() * b;
                        g.y = a.readFloat() * b;
                        g.scaleX = a.readFloat();
                        g.scaleY = a.readFloat();
                        g.shearX = a.readFloat();
                        g.shearY = a.readFloat();
                        g.length = a.readFloat() * b;
                        g.transformMode = e.TransformModeValues[a.readInt(!0)];
                        g.skinRequired = a.readBoolean();
                        h && d.Color.rgba8888ToColor(g.color, a.readInt32());
                        f.bones.push(g)
                    }
                    l = a.readInt(!0);
                    for (k = 0; k < l; k++) g = a.readString(), m = f.bones[a.readInt(!0)], g = new d.SlotData(k, g, m), d.Color.rgba8888ToColor(g.color, a.readInt32()), m = a.readInt32(), -1 !=
                        m && d.Color.rgb888ToColor(g.darkColor = new d.Color, m), g.attachmentName = a.readStringRef(), g.blendMode = e.BlendModeValues[a.readInt(!0)], f.slots.push(g);
                    l = a.readInt(!0);
                    for (k = 0; k < l; k++) {
                        g = new d.IkConstraintData(a.readString());
                        g.order = a.readInt(!0);
                        g.skinRequired = a.readBoolean();
                        m = a.readInt(!0);
                        for (var q = 0; q < m; q++) g.bones.push(f.bones[a.readInt(!0)]);
                        g.target = f.bones[a.readInt(!0)];
                        g.mix = a.readFloat();
                        g.softness = a.readFloat() * b;
                        g.bendDirection = a.readByte();
                        g.compress = a.readBoolean();
                        g.stretch = a.readBoolean();
                        g.uniform = a.readBoolean();
                        f.ikConstraints.push(g)
                    }
                    l = a.readInt(!0);
                    for (k = 0; k < l; k++) {
                        g = new d.TransformConstraintData(a.readString());
                        g.order = a.readInt(!0);
                        g.skinRequired = a.readBoolean();
                        m = a.readInt(!0);
                        for (q = 0; q < m; q++) g.bones.push(f.bones[a.readInt(!0)]);
                        g.target = f.bones[a.readInt(!0)];
                        g.local = a.readBoolean();
                        g.relative = a.readBoolean();
                        g.offsetRotation = a.readFloat();
                        g.offsetX = a.readFloat() * b;
                        g.offsetY = a.readFloat() * b;
                        g.offsetScaleX = a.readFloat();
                        g.offsetScaleY = a.readFloat();
                        g.offsetShearY = a.readFloat();
                        g.rotateMix = a.readFloat();
                        g.translateMix = a.readFloat();
                        g.scaleMix = a.readFloat();
                        g.shearMix = a.readFloat();
                        f.transformConstraints.push(g)
                    }
                    l = a.readInt(!0);
                    for (k = 0; k < l; k++) {
                        g = new d.PathConstraintData(a.readString());
                        g.order = a.readInt(!0);
                        g.skinRequired = a.readBoolean();
                        m = a.readInt(!0);
                        for (q = 0; q < m; q++) g.bones.push(f.bones[a.readInt(!0)]);
                        g.target = f.slots[a.readInt(!0)];
                        g.positionMode = e.PositionModeValues[a.readInt(!0)];
                        g.spacingMode = e.SpacingModeValues[a.readInt(!0)];
                        g.rotateMode = e.RotateModeValues[a.readInt(!0)];
                        g.offsetRotation = a.readFloat();
                        g.position = a.readFloat();
                        g.positionMode == d.PositionMode.Fixed && (g.position *= b);
                        g.spacing = a.readFloat();
                        g.spacingMode != d.SpacingMode.Length && g.spacingMode != d.SpacingMode.Fixed || (g.spacing *= b);
                        g.rotateMix = a.readFloat();
                        g.translateMix = a.readFloat();
                        f.pathConstraints.push(g)
                    }
                    l = this.readSkin(a, f, !0, h);
                    null != l && (f.defaultSkin = l, f.skins.push(l));
                    k = f.skins.length;
                    for (d.Utils.setArraySize(f.skins, l = k + a.readInt(!0)); k < l; k++) f.skins[k] = this.readSkin(a, f, !1, h);
                    l = this.linkedMeshes.length;
                    for (k = 0; k < l; k++) {
                        b = this.linkedMeshes[k];
                        h = null == b.skin ? f.defaultSkin : f.findSkin(b.skin);
                        if (null == h) throw Error("Skin not found: " + b.skin);
                        h = h.getAttachment(b.slotIndex, b.parent);
                        if (null == h) throw Error("Parent mesh not found: " + b.parent);
                        b.mesh.deformAttachment = b.inheritDeform ? h : b.mesh;
                        b.mesh.setParentMesh(h);
                        b.mesh.updateUVs()
                    }
                    this.linkedMeshes.length = 0;
                    l = a.readInt(!0);
                    for (k = 0; k < l; k++) g = new d.EventData(a.readStringRef()), g.intValue = a.readInt(!1), g.floatValue = a.readFloat(), g.stringValue = a.readString(),
                        g.audioPath = a.readString(), null != g.audioPath && (g.volume = a.readFloat(), g.balance = a.readFloat()), f.events.push(g);
                    l = a.readInt(!0);
                    for (k = 0; k < l; k++) f.animations.push(this.readAnimation(a, a.readString(), f));
                    return f
                };
                e.prototype.readSkin = function(a, b, c, e) {
                    if (c) {
                        var f = a.readInt(!0);
                        if (0 == f) return null;
                        c = new d.Skin("default")
                    } else {
                        c = new d.Skin(a.readStringRef());
                        c.bones.length = a.readInt(!0);
                        var h = 0;
                        for (f = c.bones.length; h < f; h++) c.bones[h] = b.bones[a.readInt(!0)];
                        h = 0;
                        for (f = a.readInt(!0); h < f; h++) c.constraints.push(b.ikConstraints[a.readInt(!0)]);
                        h = 0;
                        for (f = a.readInt(!0); h < f; h++) c.constraints.push(b.transformConstraints[a.readInt(!0)]);
                        h = 0;
                        for (f = a.readInt(!0); h < f; h++) c.constraints.push(b.pathConstraints[a.readInt(!0)]);
                        f = a.readInt(!0)
                    }
                    for (h = 0; h < f; h++)
                        for (var l = a.readInt(!0), k = 0, g = a.readInt(!0); k < g; k++) {
                            var n = a.readStringRef(),
                                m = this.readAttachment(a, b, c, l, n, e);
                            null != m && c.setAttachment(l, n, m)
                        }
                    return c
                };
                e.prototype.readAttachment = function(b, c, h, l, k, g) {
                    var f = this.scale,
                        n = b.readStringRef();
                    null == n && (n = k);
                    k = b.readByte();
                    switch (e.AttachmentTypeValues[k]) {
                        case d.AttachmentType.Region:
                            c =
                                b.readStringRef();
                            l = b.readFloat();
                            var m = b.readFloat(),
                                p = b.readFloat();
                            g = b.readFloat();
                            var u = b.readFloat(),
                                t = b.readFloat(),
                                v = b.readFloat();
                            k = b.readInt32();
                            null == c && (c = n);
                            b = this.attachmentLoader.newRegionAttachment(h, n, c);
                            if (null == b) break;
                            b.path = c;
                            b.x = m * f;
                            b.y = p * f;
                            b.scaleX = g;
                            b.scaleY = u;
                            b.rotation = l;
                            b.width = t * f;
                            b.height = v * f;
                            d.Color.rgba8888ToColor(b.color, k);
                            b.updateOffset();
                            return b;
                        case d.AttachmentType.BoundingBox:
                            l = b.readInt(!0);
                            m = this.readVertices(b, l);
                            k = g ? b.readInt32() : 0;
                            f = this.attachmentLoader.newBoundingBoxAttachment(h,
                                n);
                            if (null == f) break;
                            f.worldVerticesLength = l << 1;
                            f.vertices = m.vertices;
                            f.bones = m.bones;
                            g && d.Color.rgba8888ToColor(f.color, k);
                            return f;
                        case d.AttachmentType.Mesh:
                            c = b.readStringRef();
                            k = b.readInt32();
                            l = b.readInt(!0);
                            p = this.readFloatArray(b, l << 1, 1);
                            u = this.readShortArray(b);
                            m = this.readVertices(b, l);
                            var q = b.readInt(!0),
                                F = null;
                            v = t = 0;
                            g && (F = this.readShortArray(b), t = b.readFloat(), v = b.readFloat());
                            null == c && (c = n);
                            b = this.attachmentLoader.newMeshAttachment(h, n, c);
                            if (null == b) break;
                            b.path = c;
                            d.Color.rgba8888ToColor(b.color,
                                k);
                            b.bones = m.bones;
                            b.vertices = m.vertices;
                            b.worldVerticesLength = l << 1;
                            b.triangles = u;
                            b.regionUVs = p;
                            b.updateUVs();
                            b.hullLength = q << 1;
                            g && (b.edges = F, b.width = t * f, b.height = v * f);
                            return b;
                        case d.AttachmentType.LinkedMesh:
                            c = b.readStringRef();
                            k = b.readInt32();
                            m = b.readStringRef();
                            p = b.readStringRef();
                            u = b.readBoolean();
                            v = t = 0;
                            g && (t = b.readFloat(), v = b.readFloat());
                            null == c && (c = n);
                            b = this.attachmentLoader.newMeshAttachment(h, n, c);
                            if (null == b) break;
                            b.path = c;
                            d.Color.rgba8888ToColor(b.color, k);
                            g && (b.width = t * f, b.height = v * f);
                            this.linkedMeshes.push(new a(b, m, l, p, u));
                            return b;
                        case d.AttachmentType.Path:
                            t = b.readBoolean();
                            v = b.readBoolean();
                            l = b.readInt(!0);
                            m = this.readVertices(b, l);
                            p = d.Utils.newArray(l / 3, 0);
                            k = 0;
                            for (c = p.length; k < c; k++) p[k] = b.readFloat() * f;
                            k = g ? b.readInt32() : 0;
                            c = this.attachmentLoader.newPathAttachment(h, n);
                            if (null == c) break;
                            c.closed = t;
                            c.constantSpeed = v;
                            c.worldVerticesLength = l << 1;
                            c.vertices = m.vertices;
                            c.bones = m.bones;
                            c.lengths = p;
                            g && d.Color.rgba8888ToColor(c.color, k);
                            return c;
                        case d.AttachmentType.Point:
                            l = b.readFloat();
                            m = b.readFloat();
                            p = b.readFloat();
                            k = g ? b.readInt32() : 0;
                            b = this.attachmentLoader.newPointAttachment(h, n);
                            if (null == b) break;
                            b.x = m * f;
                            b.y = p * f;
                            b.rotation = l;
                            g && d.Color.rgba8888ToColor(b.color, k);
                            return b;
                        case d.AttachmentType.Clipping:
                            if (f = b.readInt(!0), l = b.readInt(!0), m = this.readVertices(b, l), k = g ? b.readInt32() : 0, b = this.attachmentLoader.newClippingAttachment(h, n), null != b) return b.endSlot = c.slots[f], b.worldVerticesLength = l << 1, b.vertices = m.vertices, b.bones = m.bones, g && d.Color.rgba8888ToColor(b.color, k), b
                    }
                    return null
                };
                e.prototype.readVertices = function(a, c) {
                    var e = c << 1,
                        f = new b,
                        h = this.scale;
                    if (!a.readBoolean()) return f.vertices = this.readFloatArray(a, e, h), f;
                    e = [];
                    for (var l = [], k = 0; k < c; k++) {
                        var g = a.readInt(!0);
                        l.push(g);
                        for (var n = 0; n < g; n++) l.push(a.readInt(!0)), e.push(a.readFloat() * h), e.push(a.readFloat() * h), e.push(a.readFloat())
                    }
                    f.vertices = d.Utils.toFloatArray(e);
                    f.bones = l;
                    return f
                };
                e.prototype.readFloatArray = function(a, b, c) {
                    var d = Array(b);
                    if (1 == c)
                        for (var e = 0; e < b; e++) d[e] = a.readFloat();
                    else
                        for (e = 0; e < b; e++) d[e] = a.readFloat() *
                            c;
                    return d
                };
                e.prototype.readShortArray = function(a) {
                    for (var b = a.readInt(!0), c = Array(b), d = 0; d < b; d++) c[d] = a.readShort();
                    return c
                };
                e.prototype.readAnimation = function(a, b, c) {
                    for (var f, h, l, k, g = [], n = this.scale, m = 0, u = new d.Color, q = new d.Color, y = 0, C = a.readInt(!0); y < C; y++) {
                        l = a.readInt(!0);
                        for (var F = 0, G = a.readInt(!0); F < G; F++) switch (h = a.readByte(), k = a.readInt(!0), h) {
                            case e.SLOT_ATTACHMENT:
                                h = new d.AttachmentTimeline(k);
                                h.slotIndex = l;
                                for (var D = 0; D < k; D++) h.setFrame(D, a.readFloat(), a.readStringRef());
                                g.push(h);
                                m =
                                    Math.max(m, h.frames[k - 1]);
                                break;
                            case e.SLOT_COLOR:
                                h = new d.ColorTimeline(k);
                                h.slotIndex = l;
                                for (D = 0; D < k; D++) f = a.readFloat(), d.Color.rgba8888ToColor(u, a.readInt32()), h.setFrame(D, f, u.r, u.g, u.b, u.a), D < k - 1 && this.readCurve(a, D, h);
                                g.push(h);
                                m = Math.max(m, h.frames[(k - 1) * d.ColorTimeline.ENTRIES]);
                                break;
                            case e.SLOT_TWO_COLOR:
                                h = new d.TwoColorTimeline(k);
                                h.slotIndex = l;
                                for (D = 0; D < k; D++) f = a.readFloat(), d.Color.rgba8888ToColor(u, a.readInt32()), d.Color.rgb888ToColor(q, a.readInt32()), h.setFrame(D, f, u.r, u.g, u.b, u.a, q.r,
                                    q.g, q.b), D < k - 1 && this.readCurve(a, D, h);
                                g.push(h);
                                m = Math.max(m, h.frames[(k - 1) * d.TwoColorTimeline.ENTRIES])
                        }
                    }
                    y = 0;
                    for (C = a.readInt(!0); y < C; y++)
                        for (l = a.readInt(!0), F = 0, G = a.readInt(!0); F < G; F++) switch (h = a.readByte(), k = a.readInt(!0), h) {
                            case e.BONE_ROTATE:
                                h = new d.RotateTimeline(k);
                                h.boneIndex = l;
                                for (D = 0; D < k; D++) h.setFrame(D, a.readFloat(), a.readFloat()), D < k - 1 && this.readCurve(a, D, h);
                                g.push(h);
                                m = Math.max(m, h.frames[(k - 1) * d.RotateTimeline.ENTRIES]);
                                break;
                            case e.BONE_TRANSLATE:
                            case e.BONE_SCALE:
                            case e.BONE_SHEAR:
                                f =
                                    1;
                                h == e.BONE_SCALE ? h = new d.ScaleTimeline(k) : h == e.BONE_SHEAR ? h = new d.ShearTimeline(k) : (h = new d.TranslateTimeline(k), f = n);
                                h.boneIndex = l;
                                for (D = 0; D < k; D++) h.setFrame(D, a.readFloat(), a.readFloat() * f, a.readFloat() * f), D < k - 1 && this.readCurve(a, D, h);
                                g.push(h);
                                m = Math.max(m, h.frames[(k - 1) * d.TranslateTimeline.ENTRIES])
                        }
                    y = 0;
                    for (C = a.readInt(!0); y < C; y++) {
                        l = a.readInt(!0);
                        k = a.readInt(!0);
                        h = new d.IkConstraintTimeline(k);
                        h.ikConstraintIndex = l;
                        for (D = 0; D < k; D++) h.setFrame(D, a.readFloat(), a.readFloat(), a.readFloat() * n, a.readByte(),
                            a.readBoolean(), a.readBoolean()), D < k - 1 && this.readCurve(a, D, h);
                        g.push(h);
                        m = Math.max(m, h.frames[(k - 1) * d.IkConstraintTimeline.ENTRIES])
                    }
                    y = 0;
                    for (C = a.readInt(!0); y < C; y++) {
                        l = a.readInt(!0);
                        k = a.readInt(!0);
                        h = new d.TransformConstraintTimeline(k);
                        h.transformConstraintIndex = l;
                        for (D = 0; D < k; D++) h.setFrame(D, a.readFloat(), a.readFloat(), a.readFloat(), a.readFloat(), a.readFloat()), D < k - 1 && this.readCurve(a, D, h);
                        g.push(h);
                        m = Math.max(m, h.frames[(k - 1) * d.TransformConstraintTimeline.ENTRIES])
                    }
                    y = 0;
                    for (C = a.readInt(!0); y < C; y++)
                        for (l =
                            a.readInt(!0), u = c.pathConstraints[l], F = 0, G = a.readInt(!0); F < G; F++) switch (h = a.readByte(), k = a.readInt(!0), h) {
                            case e.PATH_POSITION:
                            case e.PATH_SPACING:
                                f = 1;
                                h == e.PATH_SPACING ? (h = new d.PathConstraintSpacingTimeline(k), u.spacingMode != d.SpacingMode.Length && u.spacingMode != d.SpacingMode.Fixed || (f = n)) : (h = new d.PathConstraintPositionTimeline(k), u.positionMode == d.PositionMode.Fixed && (f = n));
                                h.pathConstraintIndex = l;
                                for (D = 0; D < k; D++) h.setFrame(D, a.readFloat(), a.readFloat() * f), D < k - 1 && this.readCurve(a, D, h);
                                g.push(h);
                                m = Math.max(m, h.frames[(k - 1) * d.PathConstraintPositionTimeline.ENTRIES]);
                                break;
                            case e.PATH_MIX:
                                h = new d.PathConstraintMixTimeline(k);
                                h.pathConstraintIndex = l;
                                for (D = 0; D < k; D++) h.setFrame(D, a.readFloat(), a.readFloat(), a.readFloat()), D < k - 1 && this.readCurve(a, D, h);
                                g.push(h);
                                m = Math.max(m, h.frames[(k - 1) * d.PathConstraintMixTimeline.ENTRIES])
                        }
                    y = 0;
                    for (C = a.readInt(!0); y < C; y++)
                        for (u = c.skins[a.readInt(!0)], F = 0, G = a.readInt(!0); F < G; F++) {
                            l = a.readInt(!0);
                            q = 0;
                            for (var I = a.readInt(!0); q < I; q++) {
                                f = u.getAttachment(l, a.readStringRef());
                                var K = null != f.bones,
                                    L = f.vertices,
                                    R = K ? L.length / 3 * 2 : L.length;
                                k = a.readInt(!0);
                                h = new d.DeformTimeline(k);
                                h.slotIndex = l;
                                h.attachment = f;
                                for (D = 0; D < k; D++) {
                                    f = a.readFloat();
                                    var M = a.readInt(!0);
                                    if (0 == M) var S = K ? d.Utils.newFloatArray(R) : L;
                                    else {
                                        S = d.Utils.newFloatArray(R);
                                        var O = a.readInt(!0);
                                        M += O;
                                        if (1 == n)
                                            for (; O < M; O++) S[O] = a.readFloat();
                                        else
                                            for (; O < M; O++) S[O] = a.readFloat() * n;
                                        if (!K)
                                            for (O = 0, M = S.length; O < M; O++) S[O] += L[O]
                                    }
                                    h.setFrame(D, f, S);
                                    D < k - 1 && this.readCurve(a, D, h)
                                }
                                g.push(h);
                                m = Math.max(m, h.frames[k - 1])
                            }
                        }
                    k = a.readInt(!0);
                    if (0 < k) {
                        h = new d.DrawOrderTimeline(k);
                        n = c.slots.length;
                        for (y = 0; y < k; y++) {
                            f = a.readFloat();
                            C = a.readInt(!0);
                            G = d.Utils.newArray(n, 0);
                            for (F = n - 1; 0 <= F; F--) G[F] = -1;
                            D = d.Utils.newArray(n - C, 0);
                            for (F = q = u = 0; F < C; F++) {
                                for (l = a.readInt(!0); u != l;) D[q++] = u++;
                                G[u + a.readInt(!0)] = u++
                            }
                            for (; u < n;) D[q++] = u++;
                            for (F = n - 1; 0 <= F; F--) - 1 == G[F] && (G[F] = D[--q]);
                            h.setFrame(y, f, G)
                        }
                        g.push(h);
                        m = Math.max(m, h.frames[k - 1])
                    }
                    F = a.readInt(!0);
                    if (0 < F) {
                        h = new d.EventTimeline(F);
                        for (y = 0; y < F; y++) f = a.readFloat(), l = c.events[a.readInt(!0)], f = new d.Event(f,
                            l), f.intValue = a.readInt(!1), f.floatValue = a.readFloat(), f.stringValue = a.readBoolean() ? a.readString() : l.stringValue, null != f.data.audioPath && (f.volume = a.readFloat(), f.balance = a.readFloat()), h.setFrame(y, f);
                        g.push(h);
                        m = Math.max(m, h.frames[F - 1])
                    }
                    return new d.Animation(b, g, m)
                };
                e.prototype.readCurve = function(a, b, c) {
                    switch (a.readByte()) {
                        case e.CURVE_STEPPED:
                            c.setStepped(b);
                            break;
                        case e.CURVE_BEZIER:
                            this.setCurve(c, b, a.readFloat(), a.readFloat(), a.readFloat(), a.readFloat())
                    }
                };
                e.prototype.setCurve = function(a,
                    b, c, d, e, h) {
                    a.setCurve(b, c, d, e, h)
                };
                e.AttachmentTypeValues = [0, 1, 2, 3, 4, 5, 6];
                e.TransformModeValues = [d.TransformMode.Normal, d.TransformMode.OnlyTranslation, d.TransformMode.NoRotationOrReflection, d.TransformMode.NoScale, d.TransformMode.NoScaleOrReflection];
                e.PositionModeValues = [d.PositionMode.Fixed, d.PositionMode.Percent];
                e.SpacingModeValues = [d.SpacingMode.Length, d.SpacingMode.Fixed, d.SpacingMode.Percent];
                e.RotateModeValues = [d.RotateMode.Tangent, d.RotateMode.Chain, d.RotateMode.ChainScale];
                e.BlendModeValues = [d.BlendMode.Normal, d.BlendMode.Additive, d.BlendMode.Multiply, d.BlendMode.Screen];
                e.BONE_ROTATE = 0;
                e.BONE_TRANSLATE = 1;
                e.BONE_SCALE = 2;
                e.BONE_SHEAR = 3;
                e.SLOT_ATTACHMENT = 0;
                e.SLOT_COLOR = 1;
                e.SLOT_TWO_COLOR = 2;
                e.PATH_POSITION = 0;
                e.PATH_SPACING = 1;
                e.PATH_MIX = 2;
                e.CURVE_LINEAR = 0;
                e.CURVE_STEPPED = 1;
                e.CURVE_BEZIER = 2;
                return e
            }();
            d.SkeletonBinary = e;
            var c = function() {
                    function a(a, b, c, d) {
                        void 0 === b && (b = []);
                        void 0 === c && (c = 0);
                        void 0 === d && (d = new DataView(a.buffer));
                        this.strings = b;
                        this.index = c;
                        this.buffer = d
                    }
                    a.prototype.readByte =
                        function() {
                            return this.buffer.getInt8(this.index++)
                        };
                    a.prototype.readShort = function() {
                        var a = this.buffer.getInt16(this.index);
                        this.index += 2;
                        return a
                    };
                    a.prototype.readInt32 = function() {
                        var a = this.buffer.getInt32(this.index);
                        this.index += 4;
                        return a
                    };
                    a.prototype.readInt = function(a) {
                        var b = this.readByte(),
                            c = 127 & b;
                        0 != (128 & b) && (b = this.readByte(), c |= (127 & b) << 7, 0 != (128 & b) && (b = this.readByte(), c |= (127 & b) << 14, 0 != (128 & b) && (b = this.readByte(), c |= (127 & b) << 21, 0 != (128 & b) && (b = this.readByte(), c |= (127 & b) << 28))));
                        return a ?
                            c : c >>> 1 ^ -(1 & c)
                    };
                    a.prototype.readStringRef = function() {
                        var a = this.readInt(!0);
                        return 0 == a ? null : this.strings[a - 1]
                    };
                    a.prototype.readString = function() {
                        var a = this.readInt(!0);
                        switch (a) {
                            case 0:
                                return null;
                            case 1:
                                return ""
                        }
                        a--;
                        for (var b = "", c = 0; c < a;) {
                            var d = this.readByte();
                            switch (d >> 4) {
                                case 12:
                                case 13:
                                    b += String.fromCharCode((31 & d) << 6 | 63 & this.readByte());
                                    c += 2;
                                    break;
                                case 14:
                                    b += String.fromCharCode((15 & d) << 12 | (63 & this.readByte()) << 6 | 63 & this.readByte());
                                    c += 3;
                                    break;
                                default:
                                    b += String.fromCharCode(d), c++
                            }
                        }
                        return b
                    };
                    a.prototype.readFloat = function() {
                        var a = this.buffer.getFloat32(this.index);
                        this.index += 4;
                        return a
                    };
                    a.prototype.readBoolean = function() {
                        return 0 != this.readByte()
                    };
                    return a
                }(),
                a = function() {
                    return function(a, b, c, d, e) {
                        this.mesh = a;
                        this.skin = b;
                        this.slotIndex = c;
                        this.parent = d;
                        this.inheritDeform = e
                    }
                }(),
                b = function() {
                    return function(a, b) {
                        void 0 === a && (a = null);
                        void 0 === b && (b = null);
                        this.bones = a;
                        this.vertices = b
                    }
                }()
        })(e || (e = {}));
        (function(d) {
            var e = function() {
                function c() {
                    this.maxY = this.maxX = this.minY = this.minX = 0;
                    this.boundingBoxes = [];
                    this.polygons = [];
                    this.polygonPool = new d.Pool(function() {
                        return d.Utils.newFloatArray(16)
                    })
                }
                c.prototype.update = function(a, b) {
                    if (null == a) throw Error("skeleton cannot be null.");
                    var c = this.boundingBoxes,
                        e = this.polygons,
                        h = this.polygonPool;
                    a = a.slots;
                    var k = a.length;
                    c.length = 0;
                    h.freeAll(e);
                    for (var g = e.length = 0; g < k; g++) {
                        var m = a[g];
                        if (m.bone.active) {
                            var t = m.getAttachment();
                            if (t instanceof d.BoundingBoxAttachment) {
                                c.push(t);
                                var q = h.obtain();
                                q.length != t.worldVerticesLength && (q = d.Utils.newFloatArray(t.worldVerticesLength));
                                e.push(q);
                                t.computeWorldVertices(m, 0, t.worldVerticesLength, q, 0, 2)
                            }
                        }
                    }
                    b ? this.aabbCompute() : (this.minY = this.minX = Number.POSITIVE_INFINITY, this.maxY = this.maxX = Number.NEGATIVE_INFINITY)
                };
                c.prototype.aabbCompute = function() {
                    for (var a = Number.POSITIVE_INFINITY, b = Number.POSITIVE_INFINITY, c = Number.NEGATIVE_INFINITY, d = Number.NEGATIVE_INFINITY, e = this.polygons, h = 0, k = e.length; h < k; h++) {
                        var g = e[h],
                            m = g,
                            q = 0;
                        for (g = g.length; q < g; q += 2) {
                            var z = m[q],
                                E = m[q + 1];
                            a = Math.min(a, z);
                            b = Math.min(b, E);
                            c = Math.max(c, z);
                            d = Math.max(d, E)
                        }
                    }
                    this.minX =
                        a;
                    this.minY = b;
                    this.maxX = c;
                    this.maxY = d
                };
                c.prototype.aabbContainsPoint = function(a, b) {
                    return a >= this.minX && a <= this.maxX && b >= this.minY && b <= this.maxY
                };
                c.prototype.aabbIntersectsSegment = function(a, b, c, d) {
                    var e = this.minX,
                        f = this.minY,
                        h = this.maxX,
                        l = this.maxY;
                    if (a <= e && c <= e || b <= f && d <= f || a >= h && c >= h || b >= l && d >= l) return !1;
                    c = (d - b) / (c - a);
                    d = c * (e - a) + b;
                    if (d > f && d < l) return !0;
                    d = c * (h - a) + b;
                    if (d > f && d < l) return !0;
                    f = (f - b) / c + a;
                    if (f > e && f < h) return !0;
                    f = (l - b) / c + a;
                    return f > e && f < h ? !0 : !1
                };
                c.prototype.aabbIntersectsSkeleton = function(a) {
                    return this.minX <
                        a.maxX && this.maxX > a.minX && this.minY < a.maxY && this.maxY > a.minY
                };
                c.prototype.containsPoint = function(a, b) {
                    for (var c = this.polygons, d = 0, e = c.length; d < e; d++)
                        if (this.containsPointPolygon(c[d], a, b)) return this.boundingBoxes[d];
                    return null
                };
                c.prototype.containsPointPolygon = function(a, b, c) {
                    for (var d = a.length, e = d - 2, h = !1, l = 0; l < d; l += 2) {
                        var k = a[l + 1],
                            g = a[e + 1];
                        if (k < c && g >= c || g < c && k >= c) {
                            var m = a[l];
                            m + (c - k) / (g - k) * (a[e] - m) < b && (h = !h)
                        }
                        e = l
                    }
                    return h
                };
                c.prototype.intersectsSegment = function(a, b, c, d) {
                    for (var e = this.polygons, f =
                            0, h = e.length; f < h; f++)
                        if (this.intersectsSegmentPolygon(e[f], a, b, c, d)) return this.boundingBoxes[f];
                    return null
                };
                c.prototype.intersectsSegmentPolygon = function(a, b, c, d, e) {
                    for (var f = a.length, h = b - d, l = c - e, k = b * e - c * d, g = a[f - 2], n = a[f - 1], m = 0; m < f; m += 2) {
                        var q = a[m],
                            A = a[m + 1],
                            B = g * A - n * q,
                            y = g - q,
                            C = n - A,
                            F = h * C - l * y;
                        y = (k * y - h * B) / F;
                        if ((y >= g && y <= q || y >= q && y <= g) && (y >= b && y <= d || y >= d && y <= b) && (g = (k * C - l * B) / F, (g >= n && g <= A || g >= A && g <= n) && (g >= c && g <= e || g >= e && g <= c))) return !0;
                        g = q;
                        n = A
                    }
                    return !1
                };
                c.prototype.getPolygon = function(a) {
                    if (null == a) throw Error("boundingBox cannot be null.");
                    a = this.boundingBoxes.indexOf(a);
                    return -1 == a ? null : this.polygons[a]
                };
                c.prototype.getWidth = function() {
                    return this.maxX - this.minX
                };
                c.prototype.getHeight = function() {
                    return this.maxY - this.minY
                };
                return c
            }();
            d.SkeletonBounds = e
        })(e || (e = {}));
        (function(d) {
            var e = function() {
                function c() {
                    this.triangulator = new d.Triangulator;
                    this.clippingPolygon = [];
                    this.clipOutput = [];
                    this.clippedVertices = [];
                    this.clippedTriangles = [];
                    this.scratch = []
                }
                c.prototype.clipStart = function(a, b) {
                    if (null != this.clipAttachment) return 0;
                    this.clipAttachment =
                        b;
                    var e = b.worldVerticesLength,
                        f = d.Utils.setArraySize(this.clippingPolygon, e);
                    b.computeWorldVertices(a, 0, e, f, 0, 2);
                    a = this.clippingPolygon;
                    c.makeClockwise(a);
                    a = this.clippingPolygons = this.triangulator.decompose(a, this.triangulator.triangulate(a));
                    b = 0;
                    for (e = a.length; b < e; b++) f = a[b], c.makeClockwise(f), f.push(f[0]), f.push(f[1]);
                    return a.length
                };
                c.prototype.clipEndWithSlot = function(a) {
                    null != this.clipAttachment && this.clipAttachment.endSlot == a.data && this.clipEnd()
                };
                c.prototype.clipEnd = function() {
                    null != this.clipAttachment &&
                        (this.clippingPolygons = this.clipAttachment = null, this.clippedVertices.length = 0, this.clippedTriangles.length = 0, this.clippingPolygon.length = 0)
                };
                c.prototype.isClipping = function() {
                    return null != this.clipAttachment
                };
                c.prototype.clipTriangles = function(a, b, c, e, h, k, g, m, t, q, z, E) {
                    b = this.clipOutput;
                    var f = this.clippedVertices,
                        l = this.clippedTriangles,
                        n = this.clippingPolygons,
                        p = this.clippingPolygons.length,
                        u = m ? 12 : 8,
                        v = 0;
                    q = q || 0;
                    z = z || 0;
                    E = E || 0;
                    f.length = 0;
                    l.length = 0;
                    var x = q;
                    e = q + e;
                    a: for (; x < e; x += 3) {
                        var D = c[x] * t,
                            I = D + z,
                            K =
                            D + E;
                        q = a[I];
                        var L = a[I + 1],
                            R = h[K],
                            M = h[K + 1];
                        D = c[x + 1] * t;
                        I = D + z;
                        K = D + E;
                        var S = a[I],
                            O = a[I + 1],
                            Q = h[K],
                            V = h[K + 1];
                        D = c[x + 2] * t;
                        I = D + z;
                        K = D + E;
                        D = a[I];
                        I = a[I + 1];
                        var ba = h[K];
                        K = h[K + 1];
                        for (var da = 0; da < p; da++) {
                            var T = f.length;
                            if (!this.clip(q, L, S, O, D, I, n[da], b)) {
                                var N = d.Utils.setArraySize(f, T + 3 * u);
                                N[T] = q;
                                N[T + 1] = L;
                                N[T + 2] = k.r;
                                N[T + 3] = k.g;
                                N[T + 4] = k.b;
                                N[T + 5] = k.a;
                                m ? (N[T + 6] = R, N[T + 7] = M, N[T + 8] = g.r, N[T + 9] = g.g, N[T + 10] = g.b, N[T + 11] = g.a, N[T + 12] = S, N[T + 13] = O, N[T + 14] = k.r, N[T + 15] = k.g, N[T + 16] = k.b, N[T + 17] = k.a, N[T + 18] = Q, N[T + 19] = V, N[T + 20] = g.r, N[T +
                                    21] = g.g, N[T + 22] = g.b, N[T + 23] = g.a, N[T + 24] = D, N[T + 25] = I, N[T + 26] = k.r, N[T + 27] = k.g, N[T + 28] = k.b, N[T + 29] = k.a, N[T + 30] = ba, N[T + 31] = K, N[T + 32] = g.r, N[T + 33] = g.g, N[T + 34] = g.b, N[T + 35] = g.a) : (N[T + 6] = R, N[T + 7] = M, N[T + 8] = S, N[T + 9] = O, N[T + 10] = k.r, N[T + 11] = k.g, N[T + 12] = k.b, N[T + 13] = k.a, N[T + 14] = Q, N[T + 15] = V, N[T + 16] = D, N[T + 17] = I, N[T + 18] = k.r, N[T + 19] = k.g, N[T + 20] = k.b, N[T + 21] = k.a, N[T + 22] = ba, N[T + 23] = K);
                                T = l.length;
                                N = d.Utils.setArraySize(l, T + 3);
                                N[T] = v;
                                N[T + 1] = v + 1;
                                N[T + 2] = v + 2;
                                v += 3;
                                continue a
                            }
                            var fa = b.length;
                            if (0 != fa) {
                                var Z = O - I,
                                    W = D - S,
                                    X = q - D,
                                    la =
                                    I - L,
                                    ea = 1 / (Z * X + W * (L - I)),
                                    ja = fa >> 1,
                                    oa = this.clipOutput;
                                N = d.Utils.setArraySize(f, T + ja * u);
                                for (var sa = 0; sa < fa; sa += 2) {
                                    var ia = oa[sa],
                                        ca = oa[sa + 1];
                                    N[T] = ia;
                                    N[T + 1] = ca;
                                    N[T + 2] = k.r;
                                    N[T + 3] = k.g;
                                    N[T + 4] = k.b;
                                    N[T + 5] = k.a;
                                    ia -= D;
                                    var ra = ca - I;
                                    ca = (Z * ia + W * ra) * ea;
                                    ia = (la * ia + X * ra) * ea;
                                    ra = 1 - ca - ia;
                                    N[T + 6] = R * ca + Q * ia + ba * ra;
                                    N[T + 7] = M * ca + V * ia + K * ra;
                                    m && (N[T + 8] = g.r, N[T + 9] = g.g, N[T + 10] = g.b, N[T + 11] = g.a);
                                    T += u
                                }
                                T = l.length;
                                N = d.Utils.setArraySize(l, T + 3 * (ja - 2));
                                ja--;
                                for (sa = 1; sa < ja; sa++) N[T] = v, N[T + 1] = v + sa, N[T + 2] = v + sa + 1, T += 3;
                                v += ja + 1
                            }
                        }
                    }
                };
                c.prototype.clip =
                    function(a, b, c, d, e, h, k, g) {
                        var f = g;
                        var l = !1;
                        if (2 <= k.length % 4) {
                            var n = g;
                            g = this.scratch
                        } else n = this.scratch;
                        n.length = 0;
                        n.push(a);
                        n.push(b);
                        n.push(c);
                        n.push(d);
                        n.push(e);
                        n.push(h);
                        n.push(a);
                        n.push(b);
                        g.length = 0;
                        b = k.length - 4;
                        for (a = 0;; a += 2) {
                            c = k[a];
                            d = k[a + 1];
                            e = k[a + 2];
                            h = k[a + 3];
                            for (var m = c - e, p = d - h, u = n, v = n.length - 2, q = g.length, C = 0; C < v; C += 2) {
                                var F = u[C],
                                    G = u[C + 1],
                                    D = u[C + 2],
                                    I = u[C + 3];
                                var K = 0 < m * (I - h) - p * (D - e);
                                if (0 < m * (G - h) - p * (F - e)) {
                                    if (K) {
                                        g.push(D);
                                        g.push(I);
                                        continue
                                    }
                                    var L = I - G;
                                    K = D - F;
                                    l = L * (e - c) - K * (h - d);
                                    1E-6 < Math.abs(l) ? (l =
                                        (K * (d - G) - L * (c - F)) / l, g.push(c + (e - c) * l), g.push(d + (h - d) * l)) : (g.push(c), g.push(d))
                                } else K && (L = I - G, K = D - F, l = L * (e - c) - K * (h - d), 1E-6 < Math.abs(l) ? (l = (K * (d - G) - L * (c - F)) / l, g.push(c + (e - c) * l), g.push(d + (h - d) * l)) : (g.push(c), g.push(d)), g.push(D), g.push(I));
                                l = !0
                            }
                            if (q == g.length) return f.length = 0, !0;
                            g.push(g[0]);
                            g.push(g[1]);
                            if (a == b) break;
                            c = g;
                            g = n;
                            g.length = 0;
                            n = c
                        }
                        if (f != g)
                            for (a = f.length = 0, k = g.length - 2; a < k; a++) f[a] = g[a];
                        else f.length -= 2;
                        return l
                    };
                c.makeClockwise = function(a) {
                    for (var b = a.length, c = a[b - 2] * a[1] - a[0] * a[b - 1], d, e,
                            h, k, g = 0, m = b - 3; g < m; g += 2) d = a[g], e = a[g + 1], h = a[g + 2], k = a[g + 3], c += d * k - h * e;
                    if (!(0 > c))
                        for (g = 0, c = b - 2, m = b >> 1; g < m; g += 2) b = a[g], d = a[g + 1], e = c - g, a[g] = a[e], a[g + 1] = a[e + 1], a[e] = b, a[e + 1] = d
                };
                return c
            }();
            d.SkeletonClipping = e
        })(e || (e = {}));
        (function(d) {
            var e = function() {
                function c() {
                    this.bones = [];
                    this.slots = [];
                    this.skins = [];
                    this.events = [];
                    this.animations = [];
                    this.ikConstraints = [];
                    this.transformConstraints = [];
                    this.pathConstraints = [];
                    this.fps = 0
                }
                c.prototype.findBone = function(a) {
                    if (null == a) throw Error("boneName cannot be null.");
                    for (var b = this.bones, c = 0, d = b.length; c < d; c++) {
                        var e = b[c];
                        if (e.name == a) return e
                    }
                    return null
                };
                c.prototype.findBoneIndex = function(a) {
                    if (null == a) throw Error("boneName cannot be null.");
                    for (var b = this.bones, c = 0, d = b.length; c < d; c++)
                        if (b[c].name == a) return c;
                    return -1
                };
                c.prototype.findSlot = function(a) {
                    if (null == a) throw Error("slotName cannot be null.");
                    for (var b = this.slots, c = 0, d = b.length; c < d; c++) {
                        var e = b[c];
                        if (e.name == a) return e
                    }
                    return null
                };
                c.prototype.findSlotIndex = function(a) {
                    if (null == a) throw Error("slotName cannot be null.");
                    for (var b = this.slots, c = 0, d = b.length; c < d; c++)
                        if (b[c].name == a) return c;
                    return -1
                };
                c.prototype.findSkin = function(a) {
                    if (null == a) throw Error("skinName cannot be null.");
                    for (var b = this.skins, c = 0, d = b.length; c < d; c++) {
                        var e = b[c];
                        if (e.name == a) return e
                    }
                    return null
                };
                c.prototype.findEvent = function(a) {
                    if (null == a) throw Error("eventDataName cannot be null.");
                    for (var b = this.events, c = 0, d = b.length; c < d; c++) {
                        var e = b[c];
                        if (e.name == a) return e
                    }
                    return null
                };
                c.prototype.findAnimation = function(a) {
                    if (null == a) throw Error("animationName cannot be null.");
                    for (var b = this.animations, c = 0, d = b.length; c < d; c++) {
                        var e = b[c];
                        if (e.name == a) return e
                    }
                    return null
                };
                c.prototype.findIkConstraint = function(a) {
                    if (null == a) throw Error("constraintName cannot be null.");
                    for (var b = this.ikConstraints, c = 0, d = b.length; c < d; c++) {
                        var e = b[c];
                        if (e.name == a) return e
                    }
                    return null
                };
                c.prototype.findTransformConstraint = function(a) {
                    if (null == a) throw Error("constraintName cannot be null.");
                    for (var b = this.transformConstraints, c = 0, d = b.length; c < d; c++) {
                        var e = b[c];
                        if (e.name == a) return e
                    }
                    return null
                };
                c.prototype.findPathConstraint = function(a) {
                    if (null == a) throw Error("constraintName cannot be null.");
                    for (var b = this.pathConstraints, c = 0, d = b.length; c < d; c++) {
                        var e = b[c];
                        if (e.name == a) return e
                    }
                    return null
                };
                c.prototype.findPathConstraintIndex = function(a) {
                    if (null == a) throw Error("pathConstraintName cannot be null.");
                    for (var b = this.pathConstraints, c = 0, d = b.length; c < d; c++)
                        if (b[c].name == a) return c;
                    return -1
                };
                return c
            }();
            d.SkeletonData = e
        })(e || (e = {}));
        (function(d) {
            var e = function() {
                function a(a) {
                    this.scale = 1;
                    this.linkedMeshes = [];
                    this.attachmentLoader = a
                }
                a.prototype.readSkeletonData = function(b) {
                    var c = this.scale,
                        e = new d.SkeletonData;
                    b = "string" === typeof b ? JSON.parse(b) : b;
                    var h = b.skeleton;
                    null != h && (e.hash = h.hash, e.version = h.spine, e.x = h.x, e.y = h.y, e.width = h.width, e.height = h.height, e.fps = h.fps, e.imagesPath = h.images);
                    if (b.bones)
                        for (h = 0; h < b.bones.length; h++) {
                            var k = b.bones[h];
                            var g = null;
                            var m = this.getValue(k, "parent", null);
                            if (null != m && (g = e.findBone(m), null == g)) throw Error("Parent bone not found: " + m);
                            g = new d.BoneData(e.bones.length,
                                k.name, g);
                            g.length = this.getValue(k, "length", 0) * c;
                            g.x = this.getValue(k, "x", 0) * c;
                            g.y = this.getValue(k, "y", 0) * c;
                            g.rotation = this.getValue(k, "rotation", 0);
                            g.scaleX = this.getValue(k, "scaleX", 1);
                            g.scaleY = this.getValue(k, "scaleY", 1);
                            g.shearX = this.getValue(k, "shearX", 0);
                            g.shearY = this.getValue(k, "shearY", 0);
                            g.transformMode = a.transformModeFromString(this.getValue(k, "transform", "normal"));
                            g.skinRequired = this.getValue(k, "skin", !1);
                            e.bones.push(g)
                        }
                    if (b.slots)
                        for (h = 0; h < b.slots.length; h++) {
                            k = b.slots[h];
                            var t = k.name;
                            m = k.bone;
                            g = e.findBone(m);
                            if (null == g) throw Error("Slot bone not found: " + m);
                            g = new d.SlotData(e.slots.length, t, g);
                            m = this.getValue(k, "color", null);
                            null != m && g.color.setFromString(m);
                            m = this.getValue(k, "dark", null);
                            null != m && (g.darkColor = new d.Color(1, 1, 1, 1), g.darkColor.setFromString(m));
                            g.attachmentName = this.getValue(k, "attachment", null);
                            g.blendMode = a.blendModeFromString(this.getValue(k, "blend", "normal"));
                            e.slots.push(g)
                        }
                    if (b.ik)
                        for (h = 0; h < b.ik.length; h++) {
                            var q = b.ik[h];
                            g = new d.IkConstraintData(q.name);
                            g.order = this.getValue(q, "order", 0);
                            g.skinRequired = this.getValue(q, "skin", !1);
                            for (var z = 0; z < q.bones.length; z++) {
                                m = q.bones[z];
                                k = e.findBone(m);
                                if (null == k) throw Error("IK bone not found: " + m);
                                g.bones.push(k)
                            }
                            k = q.target;
                            g.target = e.findBone(k);
                            if (null == g.target) throw Error("IK target bone not found: " + k);
                            g.mix = this.getValue(q, "mix", 1);
                            g.softness = this.getValue(q, "softness", 0) * c;
                            g.bendDirection = this.getValue(q, "bendPositive", !0) ? 1 : -1;
                            g.compress = this.getValue(q, "compress", !1);
                            g.stretch = this.getValue(q, "stretch", !1);
                            g.uniform = this.getValue(q, "uniform", !1);
                            e.ikConstraints.push(g)
                        }
                    if (b.transform)
                        for (h = 0; h < b.transform.length; h++) {
                            q = b.transform[h];
                            g = new d.TransformConstraintData(q.name);
                            g.order = this.getValue(q, "order", 0);
                            g.skinRequired = this.getValue(q, "skin", !1);
                            for (z = 0; z < q.bones.length; z++) {
                                m = q.bones[z];
                                k = e.findBone(m);
                                if (null == k) throw Error("Transform constraint bone not found: " + m);
                                g.bones.push(k)
                            }
                            k = q.target;
                            g.target = e.findBone(k);
                            if (null == g.target) throw Error("Transform constraint target bone not found: " +
                                k);
                            g.local = this.getValue(q, "local", !1);
                            g.relative = this.getValue(q, "relative", !1);
                            g.offsetRotation = this.getValue(q, "rotation", 0);
                            g.offsetX = this.getValue(q, "x", 0) * c;
                            g.offsetY = this.getValue(q, "y", 0) * c;
                            g.offsetScaleX = this.getValue(q, "scaleX", 0);
                            g.offsetScaleY = this.getValue(q, "scaleY", 0);
                            g.offsetShearY = this.getValue(q, "shearY", 0);
                            g.rotateMix = this.getValue(q, "rotateMix", 1);
                            g.translateMix = this.getValue(q, "translateMix", 1);
                            g.scaleMix = this.getValue(q, "scaleMix", 1);
                            g.shearMix = this.getValue(q, "shearMix", 1);
                            e.transformConstraints.push(g)
                        }
                    if (b.path)
                        for (h = 0; h < b.path.length; h++) {
                            q = b.path[h];
                            g = new d.PathConstraintData(q.name);
                            g.order = this.getValue(q, "order", 0);
                            g.skinRequired = this.getValue(q, "skin", !1);
                            for (z = 0; z < q.bones.length; z++) {
                                m = q.bones[z];
                                k = e.findBone(m);
                                if (null == k) throw Error("Transform constraint bone not found: " + m);
                                g.bones.push(k)
                            }
                            k = q.target;
                            g.target = e.findSlot(k);
                            if (null == g.target) throw Error("Path target slot not found: " + k);
                            g.positionMode = a.positionModeFromString(this.getValue(q, "positionMode",
                                "percent"));
                            g.spacingMode = a.spacingModeFromString(this.getValue(q, "spacingMode", "length"));
                            g.rotateMode = a.rotateModeFromString(this.getValue(q, "rotateMode", "tangent"));
                            g.offsetRotation = this.getValue(q, "rotation", 0);
                            g.position = this.getValue(q, "position", 0);
                            g.positionMode == d.PositionMode.Fixed && (g.position *= c);
                            g.spacing = this.getValue(q, "spacing", 0);
                            g.spacingMode != d.SpacingMode.Length && g.spacingMode != d.SpacingMode.Fixed || (g.spacing *= c);
                            g.rotateMix = this.getValue(q, "rotateMix", 1);
                            g.translateMix = this.getValue(q,
                                "translateMix", 1);
                            e.pathConstraints.push(g)
                        }
                    if (b.skins) {
                        c = b.skins;
                        if (!(c instanceof Array)) {
                            h = [];
                            for (E in c) h.push({
                                name: E,
                                attachments: c[E]
                            });
                            c = h
                        }
                        for (h = 0; h < c.length; h++) {
                            g = c[h];
                            var E = new d.Skin(g.name);
                            if (g.bones)
                                for (m = 0; m < g.bones.length; m++) {
                                    k = e.findBone(g.bones[m]);
                                    if (null == k) throw Error("Skin bone not found: " + g.bones[h]);
                                    E.bones.push(k)
                                }
                            if (g.ik)
                                for (m = 0; m < g.ik.length; m++) {
                                    k = e.findIkConstraint(g.ik[m]);
                                    if (null == k) throw Error("Skin IK constraint not found: " + g.ik[h]);
                                    E.constraints.push(k)
                                }
                            if (g.transform)
                                for (m =
                                    0; m < g.transform.length; m++) {
                                    k = e.findTransformConstraint(g.transform[m]);
                                    if (null == k) throw Error("Skin transform constraint not found: " + g.transform[h]);
                                    E.constraints.push(k)
                                }
                            if (g.path)
                                for (m = 0; m < g.path.length; m++) {
                                    k = e.findPathConstraint(g.path[m]);
                                    if (null == k) throw Error("Skin path constraint not found: " + g.path[h]);
                                    E.constraints.push(k)
                                }
                            for (t in g.attachments) {
                                m = e.findSlot(t);
                                if (null == m) throw Error("Slot not found: " + t);
                                k = g.attachments[t];
                                for (var w in k) q = this.readAttachment(k[w], E, m.index, w, e), null !=
                                    q && E.setAttachment(m.index, w, q)
                            }
                            e.skins.push(E);
                            "default" == E.name && (e.defaultSkin = E)
                        }
                    }
                    h = 0;
                    for (t = this.linkedMeshes.length; h < t; h++) {
                        w = this.linkedMeshes[h];
                        E = null == w.skin ? e.defaultSkin : e.findSkin(w.skin);
                        if (null == E) throw Error("Skin not found: " + w.skin);
                        E = E.getAttachment(w.slotIndex, w.parent);
                        if (null == E) throw Error("Parent mesh not found: " + w.parent);
                        w.mesh.deformAttachment = w.inheritDeform ? E : w.mesh;
                        w.mesh.setParentMesh(E);
                        w.mesh.updateUVs()
                    }
                    this.linkedMeshes.length = 0;
                    if (b.events)
                        for (var A in b.events) t =
                            b.events[A], g = new d.EventData(A), g.intValue = this.getValue(t, "int", 0), g.floatValue = this.getValue(t, "float", 0), g.stringValue = this.getValue(t, "string", ""), g.audioPath = this.getValue(t, "audio", null), null != g.audioPath && (g.volume = this.getValue(t, "volume", 1), g.balance = this.getValue(t, "balance", 0)), e.events.push(g);
                    if (b.animations)
                        for (var B in b.animations) this.readAnimation(b.animations[B], B, e);
                    return e
                };
                a.prototype.readAttachment = function(a, e, f, h, g) {
                    var b = this.scale;
                    h = this.getValue(a, "name", h);
                    switch (this.getValue(a,
                        "type", "region")) {
                        case "region":
                            g = this.getValue(a, "path", h);
                            f = this.attachmentLoader.newRegionAttachment(e, h, g);
                            if (null == f) break;
                            f.path = g;
                            f.x = this.getValue(a, "x", 0) * b;
                            f.y = this.getValue(a, "y", 0) * b;
                            f.scaleX = this.getValue(a, "scaleX", 1);
                            f.scaleY = this.getValue(a, "scaleY", 1);
                            f.rotation = this.getValue(a, "rotation", 0);
                            f.width = a.width * b;
                            f.height = a.height * b;
                            e = this.getValue(a, "color", null);
                            null != e && f.color.setFromString(e);
                            f.updateOffset();
                            return f;
                        case "boundingbox":
                            b = this.attachmentLoader.newBoundingBoxAttachment(e,
                                h);
                            if (null == b) break;
                            this.readVertices(a, b, a.vertexCount << 1);
                            e = this.getValue(a, "color", null);
                            null != e && b.color.setFromString(e);
                            return b;
                        case "mesh":
                        case "linkedmesh":
                            g = this.getValue(a, "path", h);
                            h = this.attachmentLoader.newMeshAttachment(e, h, g);
                            if (null == h) break;
                            h.path = g;
                            e = this.getValue(a, "color", null);
                            null != e && h.color.setFromString(e);
                            h.width = this.getValue(a, "width", 0) * b;
                            h.height = this.getValue(a, "height", 0) * b;
                            b = this.getValue(a, "parent", null);
                            if (null != b) return this.linkedMeshes.push(new c(h, this.getValue(a,
                                "skin", null), f, b, this.getValue(a, "deform", !0))), h;
                            b = a.uvs;
                            this.readVertices(a, h, b.length);
                            h.triangles = a.triangles;
                            h.regionUVs = b;
                            h.updateUVs();
                            h.edges = this.getValue(a, "edges", null);
                            h.hullLength = 2 * this.getValue(a, "hull", 0);
                            return h;
                        case "path":
                            g = this.attachmentLoader.newPathAttachment(e, h);
                            if (null == g) break;
                            g.closed = this.getValue(a, "closed", !1);
                            g.constantSpeed = this.getValue(a, "constantSpeed", !0);
                            f = a.vertexCount;
                            this.readVertices(a, g, f << 1);
                            f = d.Utils.newArray(f / 3, 0);
                            for (e = 0; e < a.lengths.length; e++) f[e] =
                                a.lengths[e] * b;
                            g.lengths = f;
                            e = this.getValue(a, "color", null);
                            null != e && g.color.setFromString(e);
                            return g;
                        case "point":
                            g = this.attachmentLoader.newPointAttachment(e, h);
                            if (null == g) break;
                            g.x = this.getValue(a, "x", 0) * b;
                            g.y = this.getValue(a, "y", 0) * b;
                            g.rotation = this.getValue(a, "rotation", 0);
                            e = this.getValue(a, "color", null);
                            null != e && g.color.setFromString(e);
                            return g;
                        case "clipping":
                            if (b = this.attachmentLoader.newClippingAttachment(e, h), null != b) {
                                f = this.getValue(a, "end", null);
                                if (null != f) {
                                    g = g.findSlot(f);
                                    if (null == g) throw Error("Clipping end slot not found: " +
                                        f);
                                    b.endSlot = g
                                }
                                f = a.vertexCount;
                                this.readVertices(a, b, f << 1);
                                e = this.getValue(a, "color", null);
                                null != e && b.color.setFromString(e);
                                return b
                            }
                    }
                    return null
                };
                a.prototype.readVertices = function(a, c, e) {
                    var b = this.scale;
                    c.worldVerticesLength = e;
                    a = a.vertices;
                    if (e == a.length) {
                        var f = d.Utils.toFloatArray(a);
                        if (1 != b) {
                            e = 0;
                            for (var h = a.length; e < h; e++) f[e] *= b
                        }
                        c.vertices = f
                    } else {
                        f = [];
                        var g = [];
                        e = 0;
                        for (h = a.length; e < h;) {
                            var k = a[e++];
                            g.push(k);
                            for (k = e + 4 * k; e < k; e += 4) g.push(a[e]), f.push(a[e + 1] * b), f.push(a[e + 2] * b), f.push(a[e + 3])
                        }
                        c.bones =
                            g;
                        c.vertices = d.Utils.toFloatArray(f)
                    }
                };
                a.prototype.readAnimation = function(a, c, e) {
                    var b, f = this.scale,
                        h = [],
                        g = 0;
                    if (a.slots)
                        for (var k in a.slots) {
                            var l = a.slots[k];
                            var m = e.findSlotIndex(k);
                            if (-1 == m) throw Error("Slot not found: " + k);
                            for (var q in l) {
                                var w = l[q];
                                if ("attachment" == q) {
                                    var A = new d.AttachmentTimeline(w.length);
                                    A.slotIndex = m;
                                    for (var B = b = 0; B < w.length; B++) {
                                        var y = w[B];
                                        A.setFrame(b++, this.getValue(y, "time", 0), y.name)
                                    }
                                    h.push(A);
                                    g = Math.max(g, A.frames[A.getFrameCount() - 1])
                                } else if ("color" == q) {
                                    A = new d.ColorTimeline(w.length);
                                    A.slotIndex = m;
                                    for (B = b = 0; B < w.length; B++) {
                                        y = w[B];
                                        var C = new d.Color;
                                        C.setFromString(y.color);
                                        A.setFrame(b, this.getValue(y, "time", 0), C.r, C.g, C.b, C.a);
                                        this.readCurve(y, A, b);
                                        b++
                                    }
                                    h.push(A);
                                    g = Math.max(g, A.frames[(A.getFrameCount() - 1) * d.ColorTimeline.ENTRIES])
                                } else {
                                    if ("twoColor" != q) throw Error("Invalid timeline type for a slot: " + q + " (" + k + ")");
                                    A = new d.TwoColorTimeline(w.length);
                                    A.slotIndex = m;
                                    for (B = b = 0; B < w.length; B++) {
                                        y = w[B];
                                        C = new d.Color;
                                        var F = new d.Color;
                                        C.setFromString(y.light);
                                        F.setFromString(y.dark);
                                        A.setFrame(b,
                                            this.getValue(y, "time", 0), C.r, C.g, C.b, C.a, F.r, F.g, F.b);
                                        this.readCurve(y, A, b);
                                        b++
                                    }
                                    h.push(A);
                                    g = Math.max(g, A.frames[(A.getFrameCount() - 1) * d.TwoColorTimeline.ENTRIES])
                                }
                            }
                        }
                    if (a.bones)
                        for (var G in a.bones) {
                            l = a.bones[G];
                            C = e.findBoneIndex(G);
                            if (-1 == C) throw Error("Bone not found: " + G);
                            for (q in l)
                                if (w = l[q], "rotate" === q) {
                                    A = new d.RotateTimeline(w.length);
                                    A.boneIndex = C;
                                    for (B = b = 0; B < w.length; B++) y = w[B], A.setFrame(b, this.getValue(y, "time", 0), this.getValue(y, "angle", 0)), this.readCurve(y, A, b), b++;
                                    h.push(A);
                                    g = Math.max(g,
                                        A.frames[(A.getFrameCount() - 1) * d.RotateTimeline.ENTRIES])
                                } else {
                                    if ("translate" !== q && "scale" !== q && "shear" !== q) throw Error("Invalid timeline type for a bone: " + q + " (" + G + ")");
                                    m = 1;
                                    F = 0;
                                    "scale" === q ? (A = new d.ScaleTimeline(w.length), F = 1) : "shear" === q ? A = new d.ShearTimeline(w.length) : (A = new d.TranslateTimeline(w.length), m = f);
                                    A.boneIndex = C;
                                    for (B = b = 0; B < w.length; B++) {
                                        y = w[B];
                                        var D = this.getValue(y, "x", F),
                                            I = this.getValue(y, "y", F);
                                        A.setFrame(b, this.getValue(y, "time", 0), D * m, I * m);
                                        this.readCurve(y, A, b);
                                        b++
                                    }
                                    h.push(A);
                                    g =
                                        Math.max(g, A.frames[(A.getFrameCount() - 1) * d.TranslateTimeline.ENTRIES])
                                }
                        }
                    if (a.ik)
                        for (var K in a.ik) {
                            l = a.ik[K];
                            b = e.findIkConstraint(K);
                            A = new d.IkConstraintTimeline(l.length);
                            A.ikConstraintIndex = e.ikConstraints.indexOf(b);
                            for (B = b = 0; B < l.length; B++) y = l[B], A.setFrame(b, this.getValue(y, "time", 0), this.getValue(y, "mix", 1), this.getValue(y, "softness", 0) * f, this.getValue(y, "bendPositive", !0) ? 1 : -1, this.getValue(y, "compress", !1), this.getValue(y, "stretch", !1)), this.readCurve(y, A, b), b++;
                            h.push(A);
                            g = Math.max(g, A.frames[(A.getFrameCount() -
                                1) * d.IkConstraintTimeline.ENTRIES])
                        }
                    if (a.transform)
                        for (K in a.transform) {
                            l = a.transform[K];
                            b = e.findTransformConstraint(K);
                            A = new d.TransformConstraintTimeline(l.length);
                            A.transformConstraintIndex = e.transformConstraints.indexOf(b);
                            for (B = b = 0; B < l.length; B++) y = l[B], A.setFrame(b, this.getValue(y, "time", 0), this.getValue(y, "rotateMix", 1), this.getValue(y, "translateMix", 1), this.getValue(y, "scaleMix", 1), this.getValue(y, "shearMix", 1)), this.readCurve(y, A, b), b++;
                            h.push(A);
                            g = Math.max(g, A.frames[(A.getFrameCount() -
                                1) * d.TransformConstraintTimeline.ENTRIES])
                        }
                    if (G = a.path || a.paths)
                        for (K in G) {
                            l = G[K];
                            C = e.findPathConstraintIndex(K);
                            if (-1 == C) throw Error("Path constraint not found: " + K);
                            F = e.pathConstraints[C];
                            for (q in l)
                                if (w = l[q], "position" === q || "spacing" === q) {
                                    m = 1;
                                    "spacing" === q ? (A = new d.PathConstraintSpacingTimeline(w.length), F.spacingMode != d.SpacingMode.Length && F.spacingMode != d.SpacingMode.Fixed || (m = f)) : (A = new d.PathConstraintPositionTimeline(w.length), F.positionMode == d.PositionMode.Fixed && (m = f));
                                    A.pathConstraintIndex =
                                        C;
                                    for (B = b = 0; B < w.length; B++) y = w[B], A.setFrame(b, this.getValue(y, "time", 0), this.getValue(y, q, 0) * m), this.readCurve(y, A, b), b++;
                                    h.push(A);
                                    g = Math.max(g, A.frames[(A.getFrameCount() - 1) * d.PathConstraintPositionTimeline.ENTRIES])
                                } else if ("mix" === q) {
                                A = new d.PathConstraintMixTimeline(w.length);
                                A.pathConstraintIndex = C;
                                for (B = b = 0; B < w.length; B++) y = w[B], A.setFrame(b, this.getValue(y, "time", 0), this.getValue(y, "rotateMix", 1), this.getValue(y, "translateMix", 1)), this.readCurve(y, A, b), b++;
                                h.push(A);
                                g = Math.max(g, A.frames[(A.getFrameCount() -
                                    1) * d.PathConstraintMixTimeline.ENTRIES])
                            }
                        }
                    if (a.deform)
                        for (var L in a.deform) {
                            G = a.deform[L];
                            C = e.findSkin(L);
                            if (null == C) throw Error("Skin not found: " + L);
                            for (k in G) {
                                l = G[k];
                                m = e.findSlotIndex(k);
                                if (-1 == m) throw Error("Slot not found: " + l.name);
                                for (q in l)
                                    if (w = l[q], b = C.getAttachment(m, q), null != b) {
                                        F = null != b.bones;
                                        D = b.vertices;
                                        I = F ? D.length / 3 * 2 : D.length;
                                        A = new d.DeformTimeline(w.length);
                                        A.slotIndex = m;
                                        A.attachment = b;
                                        for (K = b = 0; K < w.length; K++) {
                                            y = w[K];
                                            var R = this.getValue(y, "vertices", null);
                                            if (null == R) var M = F ?
                                                d.Utils.newFloatArray(I) : D;
                                            else {
                                                M = d.Utils.newFloatArray(I);
                                                B = this.getValue(y, "offset", 0);
                                                d.Utils.arrayCopy(R, 0, M, B, R.length);
                                                if (1 != f)
                                                    for (R = B + R.length; B < R; B++) M[B] *= f;
                                                if (!F)
                                                    for (B = 0; B < I; B++) M[B] += D[B]
                                            }
                                            A.setFrame(b, this.getValue(y, "time", 0), M);
                                            this.readCurve(y, A, b);
                                            b++
                                        }
                                        h.push(A);
                                        g = Math.max(g, A.frames[A.getFrameCount() - 1])
                                    }
                            }
                        }
                    f = a.drawOrder;
                    null == f && (f = a.draworder);
                    if (null != f) {
                        A = new d.DrawOrderTimeline(f.length);
                        k = e.slots.length;
                        for (K = b = 0; K < f.length; K++) {
                            q = f[K];
                            L = null;
                            w = this.getValue(q, "offsets", null);
                            if (null != w) {
                                L = d.Utils.newArray(k, -1);
                                y = d.Utils.newArray(k - w.length, 0);
                                for (B = G = l = 0; B < w.length; B++) {
                                    C = w[B];
                                    m = e.findSlotIndex(C.slot);
                                    if (-1 == m) throw Error("Slot not found: " + C.slot);
                                    for (; l != m;) y[G++] = l++;
                                    L[l + C.offset] = l++
                                }
                                for (; l < k;) y[G++] = l++;
                                for (B = k - 1; 0 <= B; B--) - 1 == L[B] && (L[B] = y[--G])
                            }
                            A.setFrame(b++, this.getValue(q, "time", 0), L)
                        }
                        h.push(A);
                        g = Math.max(g, A.frames[A.getFrameCount() - 1])
                    }
                    if (a.events) {
                        A = new d.EventTimeline(a.events.length);
                        for (B = b = 0; B < a.events.length; B++) {
                            f = a.events[B];
                            k = e.findEvent(f.name);
                            if (null == k) throw Error("Event not found: " + f.name);
                            q = new d.Event(d.Utils.toSinglePrecision(this.getValue(f, "time", 0)), k);
                            q.intValue = this.getValue(f, "int", k.intValue);
                            q.floatValue = this.getValue(f, "float", k.floatValue);
                            q.stringValue = this.getValue(f, "string", k.stringValue);
                            null != q.data.audioPath && (q.volume = this.getValue(f, "volume", 1), q.balance = this.getValue(f, "balance", 0));
                            A.setFrame(b++, q)
                        }
                        h.push(A);
                        g = Math.max(g, A.frames[A.getFrameCount() - 1])
                    }
                    if (isNaN(g)) throw Error("Error while parsing animation, duration is NaN");
                    e.animations.push(new d.Animation(c, h, g))
                };
                a.prototype.readCurve = function(a, c, d) {
                    var b = a.curve;
                    b && ("stepped" == b ? c.setStepped(d) : "[object Array]" === Object.prototype.toString.call(b) ? c.setCurve(d, b[0], b[1], b[2], b[3]) : c.setCurve(d, b, this.getValue(a, "c2", 0), this.getValue(a, "c3", 1), this.getValue(a, "c4", 1)))
                };
                a.prototype.getValue = function(a, c, d) {
                    return void 0 !== a[c] ? a[c] : d
                };
                a.blendModeFromString = function(a) {
                    a = a.toLowerCase();
                    if ("normal" == a) return d.BlendMode.Normal;
                    if ("additive" == a) return d.BlendMode.Additive;
                    if ("multiply" == a) return d.BlendMode.Multiply;
                    if ("screen" == a) return d.BlendMode.Screen;
                    throw Error("Unknown blend mode: " + a);
                };
                a.positionModeFromString = function(a) {
                    a = a.toLowerCase();
                    if ("fixed" == a) return d.PositionMode.Fixed;
                    if ("percent" == a) return d.PositionMode.Percent;
                    throw Error("Unknown position mode: " + a);
                };
                a.spacingModeFromString = function(a) {
                    a = a.toLowerCase();
                    if ("length" == a) return d.SpacingMode.Length;
                    if ("fixed" == a) return d.SpacingMode.Fixed;
                    if ("percent" == a) return d.SpacingMode.Percent;
                    throw Error("Unknown position mode: " +
                        a);
                };
                a.rotateModeFromString = function(a) {
                    a = a.toLowerCase();
                    if ("tangent" == a) return d.RotateMode.Tangent;
                    if ("chain" == a) return d.RotateMode.Chain;
                    if ("chainscale" == a) return d.RotateMode.ChainScale;
                    throw Error("Unknown rotate mode: " + a);
                };
                a.transformModeFromString = function(a) {
                    a = a.toLowerCase();
                    if ("normal" == a) return d.TransformMode.Normal;
                    if ("onlytranslation" == a) return d.TransformMode.OnlyTranslation;
                    if ("norotationorreflection" == a) return d.TransformMode.NoRotationOrReflection;
                    if ("noscale" == a) return d.TransformMode.NoScale;
                    if ("noscaleorreflection" == a) return d.TransformMode.NoScaleOrReflection;
                    throw Error("Unknown transform mode: " + a);
                };
                return a
            }();
            d.SkeletonJson = e;
            var c = function() {
                return function(a, b, c, d, e) {
                    this.mesh = a;
                    this.skin = b;
                    this.slotIndex = c;
                    this.parent = d;
                    this.inheritDeform = e
                }
            }()
        })(e || (e = {}));
        (function(d) {
            var e = function() {
                return function(a, b, c) {
                    this.slotIndex = a;
                    this.name = b;
                    this.attachment = c
                }
            }();
            d.SkinEntry = e;
            var c = function() {
                function a(a) {
                    this.attachments = [];
                    this.bones = [];
                    this.constraints = [];
                    if (null == a) throw Error("name cannot be null.");
                    this.name = a
                }
                a.prototype.setAttachment = function(a, c, d) {
                    if (null == d) throw Error("attachment cannot be null.");
                    var b = this.attachments;
                    a >= b.length && (b.length = a + 1);
                    b[a] || (b[a] = {});
                    b[a][c] = d
                };
                a.prototype.addSkin = function(a) {
                    for (var b, c = 0; c < a.bones.length; c++) {
                        var d = a.bones[c];
                        b = !1;
                        for (var e = 0; e < this.bones.length; e++)
                            if (this.bones[e] == d) {
                                b = !0;
                                break
                            }
                        b || this.bones.push(d)
                    }
                    for (c = 0; c < a.constraints.length; c++) {
                        d = a.constraints[c];
                        b = !1;
                        for (e = 0; e < this.constraints.length; e++)
                            if (this.constraints[e] == d) {
                                b = !0;
                                break
                            }
                        b ||
                            this.constraints.push(d)
                    }
                    a = a.getAttachments();
                    for (c = 0; c < a.length; c++) b = a[c], this.setAttachment(b.slotIndex, b.name, b.attachment)
                };
                a.prototype.copySkin = function(a) {
                    for (var b, c = 0; c < a.bones.length; c++) {
                        var e = a.bones[c];
                        b = !1;
                        for (var h = 0; h < this.bones.length; h++)
                            if (this.bones[h] == e) {
                                b = !0;
                                break
                            }
                        b || this.bones.push(e)
                    }
                    for (c = 0; c < a.constraints.length; c++) {
                        e = a.constraints[c];
                        b = !1;
                        for (h = 0; h < this.constraints.length; h++)
                            if (this.constraints[h] == e) {
                                b = !0;
                                break
                            }
                        b || this.constraints.push(e)
                    }
                    a = a.getAttachments();
                    for (c =
                        0; c < a.length; c++) b = a[c], null != b.attachment && (b.attachment = b.attachment instanceof d.MeshAttachment ? b.attachment.newLinkedMesh() : b.attachment.copy(), this.setAttachment(b.slotIndex, b.name, b.attachment))
                };
                a.prototype.getAttachment = function(a, c) {
                    return (a = this.attachments[a]) ? a[c] : null
                };
                a.prototype.removeAttachment = function(a, c) {
                    (a = this.attachments[a]) && (a[c] = null)
                };
                a.prototype.getAttachments = function() {
                    for (var a = [], c = 0; c < this.attachments.length; c++) {
                        var d = this.attachments[c];
                        if (d)
                            for (var h in d) {
                                var g =
                                    d[h];
                                g && a.push(new e(c, h, g))
                            }
                    }
                    return a
                };
                a.prototype.getAttachmentsForSlot = function(a, c) {
                    var b = this.attachments[a];
                    if (b)
                        for (var d in b) {
                            var h = b[d];
                            h && c.push(new e(a, d, h))
                        }
                };
                a.prototype.clear = function() {
                    this.attachments.length = 0;
                    this.bones.length = 0;
                    this.constraints.length = 0
                };
                a.prototype.attachAll = function(a, c) {
                    for (var b = 0, d = 0; d < a.slots.length; d++) {
                        var e = a.slots[d],
                            h = e.getAttachment();
                        if (h && b < c.attachments.length) {
                            var g = c.attachments[b],
                                k;
                            for (k in g)
                                if (h == g[k]) {
                                    h = this.getAttachment(b, k);
                                    null != h && e.setAttachment(h);
                                    break
                                }
                        }
                        b++
                    }
                };
                return a
            }();
            d.Skin = c
        })(e || (e = {}));
        (function(d) {
            var e = function() {
                function c(a, b) {
                    this.deform = [];
                    if (null == a) throw Error("data cannot be null.");
                    if (null == b) throw Error("bone cannot be null.");
                    this.data = a;
                    this.bone = b;
                    this.color = new d.Color;
                    this.darkColor = null == a.darkColor ? null : new d.Color;
                    this.setToSetupPose()
                }
                c.prototype.getSkeleton = function() {
                    return this.bone.skeleton
                };
                c.prototype.getAttachment = function() {
                    return this.attachment
                };
                c.prototype.setAttachment = function(a) {
                    this.attachment != a &&
                        (this.attachment = a, this.attachmentTime = this.bone.skeleton.time, this.deform.length = 0)
                };
                c.prototype.setAttachmentTime = function(a) {
                    this.attachmentTime = this.bone.skeleton.time - a
                };
                c.prototype.getAttachmentTime = function() {
                    return this.bone.skeleton.time - this.attachmentTime
                };
                c.prototype.setToSetupPose = function() {
                    this.color.setFromColor(this.data.color);
                    null != this.darkColor && this.darkColor.setFromColor(this.data.darkColor);
                    null == this.data.attachmentName ? this.attachment = null : (this.attachment = null, this.setAttachment(this.bone.skeleton.getAttachment(this.data.index,
                        this.data.attachmentName)))
                };
                return c
            }();
            d.Slot = e
        })(e || (e = {}));
        (function(d) {
            var e = function() {
                return function(c, a, b) {
                    this.color = new d.Color(1, 1, 1, 1);
                    if (0 > c) throw Error("index must be >= 0.");
                    if (null == a) throw Error("name cannot be null.");
                    if (null == b) throw Error("boneData cannot be null.");
                    this.index = c;
                    this.name = a;
                    this.boneData = b
                }
            }();
            d.SlotData = e
        })(e || (e = {}));
        (function(d) {
            var e = function() {
                function b(a) {
                    this._image = a
                }
                b.prototype.getImage = function() {
                    return this._image
                };
                b.filterFromString = function(a) {
                    switch (a.toLowerCase()) {
                        case "nearest":
                            return c.Nearest;
                        case "linear":
                            return c.Linear;
                        case "mipmap":
                            return c.MipMap;
                        case "mipmapnearestnearest":
                            return c.MipMapNearestNearest;
                        case "mipmaplinearnearest":
                            return c.MipMapLinearNearest;
                        case "mipmapnearestlinear":
                            return c.MipMapNearestLinear;
                        case "mipmaplinearlinear":
                            return c.MipMapLinearLinear;
                        default:
                            throw Error("Unknown texture filter " + a);
                    }
                };
                b.wrapFromString = function(b) {
                    switch (b.toLowerCase()) {
                        case "mirroredtepeat":
                            return a.MirroredRepeat;
                        case "clamptoedge":
                            return a.ClampToEdge;
                        case "repeat":
                            return a.Repeat;
                        default:
                            throw Error("Unknown texture wrap " + b);
                    }
                };
                return b
            }();
            d.Texture = e;
            var c;
            (function(a) {
                a[a.Nearest = 9728] = "Nearest";
                a[a.Linear = 9729] = "Linear";
                a[a.MipMap = 9987] = "MipMap";
                a[a.MipMapNearestNearest = 9984] = "MipMapNearestNearest";
                a[a.MipMapLinearNearest = 9985] = "MipMapLinearNearest";
                a[a.MipMapNearestLinear = 9986] = "MipMapNearestLinear";
                a[a.MipMapLinearLinear = 9987] = "MipMapLinearLinear"
            })(c = d.TextureFilter || (d.TextureFilter = {}));
            var a;
            (function(a) {
                a[a.MirroredRepeat = 33648] = "MirroredRepeat";
                a[a.ClampToEdge =
                    33071] = "ClampToEdge";
                a[a.Repeat = 10497] = "Repeat"
            })(a = d.TextureWrap || (d.TextureWrap = {}));
            var b = function() {
                return function() {
                    this.height = this.width = this.v2 = this.u2 = this.v = this.u = 0;
                    this.rotate = !1;
                    this.originalHeight = this.originalWidth = this.offsetY = this.offsetX = 0
                }
            }();
            d.TextureRegion = b;
            e = function(a) {
                function b() {
                    return null !== a && a.apply(this, arguments) || this
                }
                h(b, a);
                b.prototype.setFilters = function(a, b) {};
                b.prototype.setWraps = function(a, b) {};
                b.prototype.dispose = function() {};
                return b
            }(e);
            d.FakeTexture = e
        })(e ||
            (e = {}));
        (function(d) {
            var e = function() {
                function e(a, b) {
                    this.pages = [];
                    this.regions = [];
                    this.load(a, b)
                }
                e.prototype.load = function(e, h) {
                    if (null == h) throw Error("textureLoader cannot be null.");
                    e = new c(e);
                    for (var f = Array(4), g = null;;) {
                        var k = e.readLine();
                        if (null == k) break;
                        k = k.trim();
                        if (0 == k.length) g = null;
                        else if (g) {
                            var l = new b;
                            l.name = k;
                            l.page = g;
                            k = e.readValue();
                            "true" == k.toLocaleLowerCase() ? l.degrees = 90 : "false" == k.toLocaleLowerCase() ? l.degrees = 0 : l.degrees = parseFloat(k);
                            l.rotate = 90 == l.degrees;
                            e.readTuple(f);
                            k =
                                parseInt(f[0]);
                            var n = parseInt(f[1]);
                            e.readTuple(f);
                            var m = parseInt(f[0]),
                                q = parseInt(f[1]);
                            l.u = k / g.width;
                            l.v = n / g.height;
                            l.rotate ? (l.u2 = (k + q) / g.width, l.v2 = (n + m) / g.height) : (l.u2 = (k + m) / g.width, l.v2 = (n + q) / g.height);
                            l.x = k;
                            l.y = n;
                            l.width = Math.abs(m);
                            l.height = Math.abs(q);
                            4 == e.readTuple(f) && 4 == e.readTuple(f) && e.readTuple(f);
                            l.originalWidth = parseInt(f[0]);
                            l.originalHeight = parseInt(f[1]);
                            e.readTuple(f);
                            l.offsetX = parseInt(f[0]);
                            l.offsetY = parseInt(f[1]);
                            l.index = parseInt(e.readValue());
                            l.texture = g.texture;
                            this.regions.push(l)
                        } else g =
                            new a, g.name = k, 2 == e.readTuple(f) && (g.width = parseInt(f[0]), g.height = parseInt(f[1]), e.readTuple(f)), e.readTuple(f), g.minFilter = d.Texture.filterFromString(f[0]), g.magFilter = d.Texture.filterFromString(f[1]), l = e.readValue(), g.uWrap = d.TextureWrap.ClampToEdge, g.vWrap = d.TextureWrap.ClampToEdge, "x" == l ? g.uWrap = d.TextureWrap.Repeat : "y" == l ? g.vWrap = d.TextureWrap.Repeat : "xy" == l && (g.uWrap = g.vWrap = d.TextureWrap.Repeat), g.texture = h(k), g.texture.setFilters(g.minFilter, g.magFilter), g.texture.setWraps(g.uWrap, g.vWrap),
                            g.width = g.texture.getImage().width, g.height = g.texture.getImage().height, this.pages.push(g)
                    }
                };
                e.prototype.findRegion = function(a) {
                    for (var b = 0; b < this.regions.length; b++)
                        if (this.regions[b].name == a) return this.regions[b];
                    return null
                };
                e.prototype.dispose = function() {
                    for (var a = 0; a < this.pages.length; a++) this.pages[a].texture.dispose()
                };
                return e
            }();
            d.TextureAtlas = e;
            var c = function() {
                    function a(a) {
                        this.index = 0;
                        this.lines = a.split(/\r\n|\r|\n/)
                    }
                    a.prototype.readLine = function() {
                        return this.index >= this.lines.length ?
                            null : this.lines[this.index++]
                    };
                    a.prototype.readValue = function() {
                        var a = this.readLine(),
                            b = a.indexOf(":");
                        if (-1 == b) throw Error("Invalid line: " + a);
                        return a.substring(b + 1).trim()
                    };
                    a.prototype.readTuple = function(a) {
                        var b = this.readLine(),
                            c = b.indexOf(":");
                        if (-1 == c) throw Error("Invalid line: " + b);
                        var d = 0;
                        for (c += 1; 3 > d; d++) {
                            var e = b.indexOf(",", c);
                            if (-1 == e) break;
                            a[d] = b.substr(c, e - c).trim();
                            c = e + 1
                        }
                        a[d] = b.substring(c).trim();
                        return d + 1
                    };
                    return a
                }(),
                a = function() {
                    return function() {}
                }();
            d.TextureAtlasPage = a;
            var b =
                function(a) {
                    function b() {
                        return null !== a && a.apply(this, arguments) || this
                    }
                    h(b, a);
                    return b
                }(d.TextureRegion);
            d.TextureAtlasRegion = b
        })(e || (e = {}));
        (function(d) {
            var e = function() {
                function c(a, b) {
                    this.shearMix = this.scaleMix = this.translateMix = this.rotateMix = 0;
                    this.temp = new d.Vector2;
                    this.active = !1;
                    if (null == a) throw Error("data cannot be null.");
                    if (null == b) throw Error("skeleton cannot be null.");
                    this.data = a;
                    this.rotateMix = a.rotateMix;
                    this.translateMix = a.translateMix;
                    this.scaleMix = a.scaleMix;
                    this.shearMix = a.shearMix;
                    this.bones = [];
                    for (var c = 0; c < a.bones.length; c++) this.bones.push(b.findBone(a.bones[c].name));
                    this.target = b.findBone(a.target.name)
                }
                c.prototype.isActive = function() {
                    return this.active
                };
                c.prototype.apply = function() {
                    this.update()
                };
                c.prototype.update = function() {
                    this.data.local ? this.data.relative ? this.applyRelativeLocal() : this.applyAbsoluteLocal() : this.data.relative ? this.applyRelativeWorld() : this.applyAbsoluteWorld()
                };
                c.prototype.applyAbsoluteWorld = function() {
                    var a = this.rotateMix,
                        b = this.translateMix,
                        c = this.scaleMix,
                        e = this.shearMix,
                        h = this.target,
                        g = h.a,
                        k = h.b,
                        m = h.c,
                        t = h.d,
                        q = 0 < g * t - k * m ? d.MathUtils.degRad : -d.MathUtils.degRad,
                        z = this.data.offsetRotation * q;
                    q *= this.data.offsetShearY;
                    for (var E = this.bones, w = 0, A = E.length; w < A; w++) {
                        var B = E[w];
                        var y = !1;
                        if (0 != a) {
                            var C = B.a;
                            var F = B.b;
                            var G = B.c;
                            var D = B.d;
                            y = Math.atan2(m, g) - Math.atan2(G, C) + z;
                            y > d.MathUtils.PI ? y -= d.MathUtils.PI2 : y < -d.MathUtils.PI && (y += d.MathUtils.PI2);
                            y *= a;
                            var I = Math.cos(y);
                            y = Math.sin(y);
                            B.a = I * C - y * G;
                            B.b = I * F - y * D;
                            B.c = y * C + I * G;
                            B.d = y * F + I * D;
                            y = !0
                        }
                        0 != b && (y = this.temp, h.localToWorld(y.set(this.data.offsetX,
                            this.data.offsetY)), B.worldX += (y.x - B.worldX) * b, B.worldY += (y.y - B.worldY) * b, y = !0);
                        0 < c && (D = Math.sqrt(B.a * B.a + B.c * B.c), y = Math.sqrt(g * g + m * m), 1E-5 < D && (D = (D + (y - D + this.data.offsetScaleX) * c) / D), B.a *= D, B.c *= D, D = Math.sqrt(B.b * B.b + B.d * B.d), y = Math.sqrt(k * k + t * t), 1E-5 < D && (D = (D + (y - D + this.data.offsetScaleY) * c) / D), B.b *= D, B.d *= D, y = !0);
                        0 < e && (F = B.b, D = B.d, C = Math.atan2(D, F), y = Math.atan2(t, k) - Math.atan2(m, g) - (C - Math.atan2(B.c, B.a)), y > d.MathUtils.PI ? y -= d.MathUtils.PI2 : y < -d.MathUtils.PI && (y += d.MathUtils.PI2), y = C + (y + q) * e, D =
                            Math.sqrt(F * F + D * D), B.b = Math.cos(y) * D, B.d = Math.sin(y) * D, y = !0);
                        y && (B.appliedValid = !1)
                    }
                };
                c.prototype.applyRelativeWorld = function() {
                    var a = this.rotateMix,
                        b = this.translateMix,
                        c = this.scaleMix,
                        e = this.shearMix,
                        h = this.target,
                        g = h.a,
                        k = h.b,
                        m = h.c,
                        t = h.d,
                        q = 0 < g * t - k * m ? d.MathUtils.degRad : -d.MathUtils.degRad,
                        z = this.data.offsetRotation * q;
                    q *= this.data.offsetShearY;
                    for (var E = this.bones, w = 0, A = E.length; w < A; w++) {
                        var B = E[w];
                        var y = !1;
                        if (0 != a) {
                            var C = B.a;
                            var F = B.b;
                            var G = B.c;
                            y = B.d;
                            var D = Math.atan2(m, g) + z;
                            D > d.MathUtils.PI ? D -= d.MathUtils.PI2 :
                                D < -d.MathUtils.PI && (D += d.MathUtils.PI2);
                            D *= a;
                            var I = Math.cos(D);
                            D = Math.sin(D);
                            B.a = I * C - D * G;
                            B.b = I * F - D * y;
                            B.c = D * C + I * G;
                            B.d = D * F + I * y;
                            y = !0
                        }
                        0 != b && (y = this.temp, h.localToWorld(y.set(this.data.offsetX, this.data.offsetY)), B.worldX += y.x * b, B.worldY += y.y * b, y = !0);
                        0 < c && (y = (Math.sqrt(g * g + m * m) - 1 + this.data.offsetScaleX) * c + 1, B.a *= y, B.c *= y, y = (Math.sqrt(k * k + t * t) - 1 + this.data.offsetScaleY) * c + 1, B.b *= y, B.d *= y, y = !0);
                        0 < e && (D = Math.atan2(t, k) - Math.atan2(m, g), D > d.MathUtils.PI ? D -= d.MathUtils.PI2 : D < -d.MathUtils.PI && (D += d.MathUtils.PI2),
                            F = B.b, y = B.d, D = Math.atan2(y, F) + (D - d.MathUtils.PI / 2 + q) * e, y = Math.sqrt(F * F + y * y), B.b = Math.cos(D) * y, B.d = Math.sin(D) * y, y = !0);
                        y && (B.appliedValid = !1)
                    }
                };
                c.prototype.applyAbsoluteLocal = function() {
                    var a = this.rotateMix,
                        b = this.translateMix,
                        c = this.scaleMix,
                        d = this.shearMix,
                        e = this.target;
                    e.appliedValid || e.updateAppliedTransform();
                    for (var h = this.bones, g = 0, k = h.length; g < k; g++) {
                        var m = h[g];
                        m.appliedValid || m.updateAppliedTransform();
                        var q = m.arotation;
                        if (0 != a) {
                            var z = e.arotation - q + this.data.offsetRotation;
                            z -= 360 * (16384 - (16384.499999999996 -
                                z / 360 | 0));
                            q += z * a
                        }
                        var E = m.ax,
                            w = m.ay;
                        0 != b && (E += (e.ax - E + this.data.offsetX) * b, w += (e.ay - w + this.data.offsetY) * b);
                        var A = m.ascaleX,
                            B = m.ascaleY;
                        0 != c && (1E-5 < A && (A = (A + (e.ascaleX - A + this.data.offsetScaleX) * c) / A), 1E-5 < B && (B = (B + (e.ascaleY - B + this.data.offsetScaleY) * c) / B));
                        var y = m.ashearY;
                        0 != d && (z = e.ashearY - y + this.data.offsetShearY, z -= 360 * (16384 - (16384.499999999996 - z / 360 | 0)), m.shearY += z * d);
                        m.updateWorldTransformWith(E, w, q, A, B, m.ashearX, y)
                    }
                };
                c.prototype.applyRelativeLocal = function() {
                    var a = this.rotateMix,
                        b = this.translateMix,
                        c = this.scaleMix,
                        d = this.shearMix,
                        e = this.target;
                    e.appliedValid || e.updateAppliedTransform();
                    for (var h = this.bones, g = 0, k = h.length; g < k; g++) {
                        var m = h[g];
                        m.appliedValid || m.updateAppliedTransform();
                        var q = m.arotation;
                        0 != a && (q += (e.arotation + this.data.offsetRotation) * a);
                        var z = m.ax,
                            E = m.ay;
                        0 != b && (z += (e.ax + this.data.offsetX) * b, E += (e.ay + this.data.offsetY) * b);
                        var w = m.ascaleX,
                            A = m.ascaleY;
                        0 != c && (1E-5 < w && (w *= (e.ascaleX - 1 + this.data.offsetScaleX) * c + 1), 1E-5 < A && (A *= (e.ascaleY - 1 + this.data.offsetScaleY) * c + 1));
                        var B = m.ashearY;
                        0 != d && (B += (e.ashearY + this.data.offsetShearY) * d);
                        m.updateWorldTransformWith(z, E, q, w, A, m.ashearX, B)
                    }
                };
                return c
            }();
            d.TransformConstraint = e
        })(e || (e = {}));
        (function(d) {
            var e = function(c) {
                function a(a) {
                    a = c.call(this, a, 0, !1) || this;
                    a.bones = [];
                    a.rotateMix = 0;
                    a.translateMix = 0;
                    a.scaleMix = 0;
                    a.shearMix = 0;
                    a.offsetRotation = 0;
                    a.offsetX = 0;
                    a.offsetY = 0;
                    a.offsetScaleX = 0;
                    a.offsetScaleY = 0;
                    a.offsetShearY = 0;
                    a.relative = !1;
                    a.local = !1;
                    return a
                }
                h(a, c);
                return a
            }(d.ConstraintData);
            d.TransformConstraintData = e
        })(e || (e = {}));
        (function(d) {
            var e =
                function() {
                    function c() {
                        this.convexPolygons = [];
                        this.convexPolygonsIndices = [];
                        this.indicesArray = [];
                        this.isConcaveArray = [];
                        this.triangles = [];
                        this.polygonPool = new d.Pool(function() {
                            return []
                        });
                        this.polygonIndicesPool = new d.Pool(function() {
                            return []
                        })
                    }
                    c.prototype.triangulate = function(a) {
                        var b, d = a.length >> 1,
                            e = this.indicesArray;
                        for (b = e.length = 0; b < d; b++) e[b] = b;
                        var h = this.isConcaveArray;
                        b = h.length = 0;
                        for (var g = d; b < g; ++b) h[b] = c.isConcave(b, d, a, e);
                        g = this.triangles;
                        for (g.length = 0; 3 < d;) {
                            var k = d - 1;
                            b = 0;
                            for (var m =
                                    1;;) {
                                a: if (!h[b]) {
                                    var q = e[k] << 1,
                                        x = e[b] << 1,
                                        z = e[m] << 1,
                                        E = a[q];
                                    q = a[q + 1];
                                    var w = a[x];
                                    x = a[x + 1];
                                    var A = a[z];
                                    z = a[z + 1];
                                    for (var B = (m + 1) % d; B != k; B = (B + 1) % d)
                                        if (h[B]) {
                                            var y = e[B] << 1,
                                                C = a[y];
                                            y = a[y + 1];
                                            if (c.positiveArea(A, z, E, q, C, y) && c.positiveArea(E, q, w, x, C, y) && c.positiveArea(w, x, A, z, C, y)) break a
                                        }
                                    break
                                }if (0 == m) {
                                    do {
                                        if (!h[b]) break;
                                        b--
                                    } while (0 < b);
                                    break
                                }
                                k = b;b = m;m = (m + 1) % d
                            }
                            g.push(e[(d + b - 1) % d]);
                            g.push(e[b]);
                            g.push(e[(b + 1) % d]);
                            e.splice(b, 1);
                            h.splice(b, 1);
                            d--;
                            k = (d + b - 1) % d;
                            b = b == d ? 0 : b;
                            h[k] = c.isConcave(k, d, a, e);
                            h[b] = c.isConcave(b,
                                d, a, e)
                        }
                        3 == d && (g.push(e[2]), g.push(e[0]), g.push(e[1]));
                        return g
                    };
                    c.prototype.decompose = function(a, b) {
                        var d = this.convexPolygons;
                        this.polygonPool.freeAll(d);
                        d.length = 0;
                        var e = this.convexPolygonsIndices;
                        this.polygonIndicesPool.freeAll(e);
                        e.length = 0;
                        var h = this.polygonIndicesPool.obtain();
                        h.length = 0;
                        var g = this.polygonPool.obtain();
                        g.length = 0;
                        for (var k = -1, m = 0, q = 0, x = b.length; q < x; q += 3) {
                            var z = b[q] << 1,
                                E = b[q + 1] << 1,
                                w = b[q + 2] << 1,
                                A = a[z],
                                B = a[z + 1],
                                y = a[E],
                                C = a[E + 1];
                            var F = a[w];
                            var G = a[w + 1];
                            var D = !1;
                            if (k == z) {
                                var I = g.length -
                                    4;
                                var K = c.winding(g[I], g[I + 1], g[I + 2], g[I + 3], F, G);
                                I = c.winding(F, G, g[0], g[1], g[2], g[3]);
                                K == m && I == m && (g.push(F), g.push(G), h.push(w), D = !0)
                            }
                            D || (0 < g.length ? (d.push(g), e.push(h)) : (this.polygonPool.free(g), this.polygonIndicesPool.free(h)), g = this.polygonPool.obtain(), g.length = 0, g.push(A), g.push(B), g.push(y), g.push(C), g.push(F), g.push(G), h = this.polygonIndicesPool.obtain(), h.length = 0, h.push(z), h.push(E), h.push(w), m = c.winding(A, B, y, C, F, G), k = z)
                        }
                        0 < g.length && (d.push(g), e.push(h));
                        q = 0;
                        for (x = d.length; q < x; q++)
                            if (h =
                                e[q], 0 != h.length)
                                for (a = h[0], b = h[h.length - 1], g = d[q], I = g.length - 4, k = g[I], m = g[I + 1], z = g[I + 2], E = g[I + 3], w = g[0], A = g[1], B = g[2], y = g[3], C = c.winding(k, m, z, E, w, A), D = 0; D < x; D++)
                                    if (D != q) {
                                        var L = e[D];
                                        if (3 == L.length) {
                                            I = L[0];
                                            K = L[1];
                                            var R = L[2],
                                                M = d[D];
                                            F = M[M.length - 2];
                                            G = M[M.length - 1];
                                            I == a && K == b && (K = c.winding(k, m, z, E, F, G), I = c.winding(F, G, w, A, B, y), K == C && I == C && (M.length = 0, L.length = 0, g.push(F), g.push(G), h.push(R), k = z, m = E, z = F, E = G, D = 0))
                                        }
                                    }
                        for (q = d.length - 1; 0 <= q; q--) g = d[q], 0 == g.length && (d.splice(q, 1), this.polygonPool.free(g), h =
                            e[q], e.splice(q, 1), this.polygonIndicesPool.free(h));
                        return d
                    };
                    c.isConcave = function(a, b, c, d) {
                        var e = d[(b + a - 1) % b] << 1,
                            f = d[a] << 1;
                        a = d[(a + 1) % b] << 1;
                        return !this.positiveArea(c[e], c[e + 1], c[f], c[f + 1], c[a], c[a + 1])
                    };
                    c.positiveArea = function(a, b, c, d, e, h) {
                        return 0 <= a * (h - d) + c * (b - h) + e * (d - b)
                    };
                    c.winding = function(a, b, c, d, e, h) {
                        c -= a;
                        d -= b;
                        return 0 <= e * d - h * c + c * b - a * d ? 1 : -1
                    };
                    return c
                }();
            d.Triangulator = e
        })(e || (e = {}));
        (function(d) {
            var e = function() {
                function c() {
                    this.array = []
                }
                c.prototype.add = function(a) {
                    var b = this.contains(a);
                    this.array[0 |
                        a] = 0 | a;
                    return !b
                };
                c.prototype.contains = function(a) {
                    return void 0 != this.array[0 | a]
                };
                c.prototype.remove = function(a) {
                    this.array[0 | a] = void 0
                };
                c.prototype.clear = function() {
                    this.array.length = 0
                };
                return c
            }();
            d.IntSet = e;
            e = function() {
                function c(a, b, c, d) {
                    void 0 === a && (a = 0);
                    void 0 === b && (b = 0);
                    void 0 === c && (c = 0);
                    void 0 === d && (d = 0);
                    this.r = a;
                    this.g = b;
                    this.b = c;
                    this.a = d
                }
                c.prototype.set = function(a, b, c, d) {
                    this.r = a;
                    this.g = b;
                    this.b = c;
                    this.a = d;
                    this.clamp();
                    return this
                };
                c.prototype.setFromColor = function(a) {
                    this.r = a.r;
                    this.g =
                        a.g;
                    this.b = a.b;
                    this.a = a.a;
                    return this
                };
                c.prototype.setFromString = function(a) {
                    a = "#" == a.charAt(0) ? a.substr(1) : a;
                    this.r = parseInt(a.substr(0, 2), 16) / 255;
                    this.g = parseInt(a.substr(2, 2), 16) / 255;
                    this.b = parseInt(a.substr(4, 2), 16) / 255;
                    this.a = (8 != a.length ? 255 : parseInt(a.substr(6, 2), 16)) / 255;
                    return this
                };
                c.prototype.add = function(a, b, c, d) {
                    this.r += a;
                    this.g += b;
                    this.b += c;
                    this.a += d;
                    this.clamp();
                    return this
                };
                c.prototype.clamp = function() {
                    0 > this.r ? this.r = 0 : 1 < this.r && (this.r = 1);
                    0 > this.g ? this.g = 0 : 1 < this.g && (this.g = 1);
                    0 >
                        this.b ? this.b = 0 : 1 < this.b && (this.b = 1);
                    0 > this.a ? this.a = 0 : 1 < this.a && (this.a = 1);
                    return this
                };
                c.rgba8888ToColor = function(a, b) {
                    a.r = ((4278190080 & b) >>> 24) / 255;
                    a.g = ((16711680 & b) >>> 16) / 255;
                    a.b = ((65280 & b) >>> 8) / 255;
                    a.a = (255 & b) / 255
                };
                c.rgb888ToColor = function(a, b) {
                    a.r = ((16711680 & b) >>> 16) / 255;
                    a.g = ((65280 & b) >>> 8) / 255;
                    a.b = (255 & b) / 255
                };
                c.WHITE = new c(1, 1, 1, 1);
                c.RED = new c(1, 0, 0, 1);
                c.GREEN = new c(0, 1, 0, 1);
                c.BLUE = new c(0, 0, 1, 1);
                c.MAGENTA = new c(1, 0, 1, 1);
                return c
            }();
            d.Color = e;
            e = function() {
                function c() {}
                c.clamp = function(a,
                    b, c) {
                    return a < b ? b : a > c ? c : a
                };
                c.cosDeg = function(a) {
                    return Math.cos(a * c.degRad)
                };
                c.sinDeg = function(a) {
                    return Math.sin(a * c.degRad)
                };
                c.signum = function(a) {
                    return 0 < a ? 1 : 0 > a ? -1 : 0
                };
                c.toInt = function(a) {
                    return 0 < a ? Math.floor(a) : Math.ceil(a)
                };
                c.cbrt = function(a) {
                    var b = Math.pow(Math.abs(a), 1 / 3);
                    return 0 > a ? -b : b
                };
                c.randomTriangular = function(a, b) {
                    return c.randomTriangularWith(a, b, .5 * (a + b))
                };
                c.randomTriangularWith = function(a, b, c) {
                    var d = Math.random(),
                        e = b - a;
                    return d <= (c - a) / e ? a + Math.sqrt(d * e * (c - a)) : b - Math.sqrt((1 - d) * e *
                        (b - c))
                };
                c.PI = 3.1415927;
                c.PI2 = 2 * c.PI;
                c.radiansToDegrees = 180 / c.PI;
                c.radDeg = c.radiansToDegrees;
                c.degreesToRadians = c.PI / 180;
                c.degRad = c.degreesToRadians;
                return c
            }();
            d.MathUtils = e;
            e = function() {
                function c() {}
                c.prototype.apply = function(a, b, c) {
                    return a + (b - a) * this.applyInternal(c)
                };
                return c
            }();
            d.Interpolation = e;
            e = function(c) {
                function a(a) {
                    var b = c.call(this) || this;
                    b.power = 2;
                    b.power = a;
                    return b
                }
                h(a, c);
                a.prototype.applyInternal = function(a) {
                    return .5 >= a ? Math.pow(2 * a, this.power) / 2 : Math.pow(2 * (a - 1), this.power) / (0 ==
                        this.power % 2 ? -2 : 2) + 1
                };
                return a
            }(e);
            d.Pow = e;
            e = function(c) {
                function a(a) {
                    return c.call(this, a) || this
                }
                h(a, c);
                a.prototype.applyInternal = function(a) {
                    return Math.pow(a - 1, this.power) * (0 == this.power % 2 ? -1 : 1) + 1
                };
                return a
            }(e);
            d.PowOut = e;
            e = function() {
                function c() {}
                c.arrayCopy = function(a, b, c, d, e) {
                    for (var f = b; f < b + e; f++, d++) c[d] = a[f]
                };
                c.setArraySize = function(a, b, c) {
                    void 0 === c && (c = 0);
                    var d = a.length;
                    if (d == b) return a;
                    a.length = b;
                    if (d < b)
                        for (; d < b; d++) a[d] = c;
                    return a
                };
                c.ensureArrayCapacity = function(a, b, d) {
                    void 0 === d &&
                        (d = 0);
                    return a.length >= b ? a : c.setArraySize(a, b, d)
                };
                c.newArray = function(a, b) {
                    for (var c = Array(a), d = 0; d < a; d++) c[d] = b;
                    return c
                };
                c.newFloatArray = function(a) {
                    if (c.SUPPORTS_TYPED_ARRAYS) return new Float32Array(a);
                    a = Array(a);
                    for (var b = 0; b < a.length; b++) a[b] = 0;
                    return a
                };
                c.newShortArray = function(a) {
                    if (c.SUPPORTS_TYPED_ARRAYS) return new Int16Array(a);
                    a = Array(a);
                    for (var b = 0; b < a.length; b++) a[b] = 0;
                    return a
                };
                c.toFloatArray = function(a) {
                    return c.SUPPORTS_TYPED_ARRAYS ? new Float32Array(a) : a
                };
                c.toSinglePrecision = function(a) {
                    return c.SUPPORTS_TYPED_ARRAYS ?
                        Math.fround(a) : a
                };
                c.webkit602BugfixHelper = function(a, b) {};
                c.contains = function(a, b, c) {
                    for (c = 0; c < a.length; c++)
                        if (a[c] == b) return !0;
                    return !1
                };
                c.SUPPORTS_TYPED_ARRAYS = "undefined" !== typeof Float32Array;
                return c
            }();
            d.Utils = e;
            e = function() {
                function c() {}
                c.logBones = function(a) {
                    for (var b = 0; b < a.bones.length; b++) {
                        var c = a.bones[b];
                        console.log(c.data.name + ", " + c.a + ", " + c.b + ", " + c.c + ", " + c.d + ", " + c.worldX + ", " + c.worldY)
                    }
                };
                return c
            }();
            d.DebugUtils = e;
            e = function() {
                function c(a) {
                    this.items = [];
                    this.instantiator = a
                }
                c.prototype.obtain =
                    function() {
                        return 0 < this.items.length ? this.items.pop() : this.instantiator()
                    };
                c.prototype.free = function(a) {
                    a.reset && a.reset();
                    this.items.push(a)
                };
                c.prototype.freeAll = function(a) {
                    for (var b = 0; b < a.length; b++) a[b].reset && a[b].reset(), this.items[b] = a[b]
                };
                c.prototype.clear = function() {
                    this.items.length = 0
                };
                return c
            }();
            d.Pool = e;
            e = function() {
                function c(a, b) {
                    void 0 === a && (a = 0);
                    void 0 === b && (b = 0);
                    this.x = a;
                    this.y = b
                }
                c.prototype.set = function(a, b) {
                    this.x = a;
                    this.y = b;
                    return this
                };
                c.prototype.length = function() {
                    var a = this.x,
                        b = this.y;
                    return Math.sqrt(a * a + b * b)
                };
                c.prototype.normalize = function() {
                    var a = this.length();
                    0 != a && (this.x /= a, this.y /= a);
                    return this
                };
                return c
            }();
            d.Vector2 = e;
            e = function() {
                function c() {
                    this.maxDelta = .064;
                    this.totalTime = this.delta = this.framesPerSecond = 0;
                    this.lastTime = Date.now() / 1E3;
                    this.frameTime = this.frameCount = 0
                }
                c.prototype.update = function() {
                    var a = Date.now() / 1E3;
                    this.delta = a - this.lastTime;
                    this.frameTime += this.delta;
                    this.totalTime += this.delta;
                    this.delta > this.maxDelta && (this.delta = this.maxDelta);
                    this.lastTime =
                        a;
                    this.frameCount++;
                    1 < this.frameTime && (this.framesPerSecond = this.frameCount / this.frameTime, this.frameCount = this.frameTime = 0)
                };
                return c
            }();
            d.TimeKeeper = e;
            e = function() {
                function c(a) {
                    void 0 === a && (a = 32);
                    this.mean = this.lastValue = this.addedValues = 0;
                    this.dirty = !0;
                    this.values = Array(a)
                }
                c.prototype.hasEnoughData = function() {
                    return this.addedValues >= this.values.length
                };
                c.prototype.addValue = function(a) {
                    this.addedValues < this.values.length && this.addedValues++;
                    this.values[this.lastValue++] = a;
                    this.lastValue > this.values.length -
                        1 && (this.lastValue = 0);
                    this.dirty = !0
                };
                c.prototype.getMean = function() {
                    if (this.hasEnoughData()) {
                        if (this.dirty) {
                            for (var a = 0, b = 0; b < this.values.length; b++) a += this.values[b];
                            this.mean = a / this.values.length;
                            this.dirty = !1
                        }
                        return this.mean
                    }
                    return 0
                };
                return c
            }();
            d.WindowedMean = e
        })(e || (e = {}));
        (function() {
            Math.fround || (Math.fround = function(d) {
                return function(e) {
                    return d[0] = e, d[0]
                }
            }(new Float32Array(1)))
        })();
        (function(d) {
            var e = function() {
                return function(c) {
                    if (null == c) throw Error("name cannot be null.");
                    this.name =
                        c
                }
            }();
            d.Attachment = e;
            e = function(c) {
                function a(b) {
                    b = c.call(this, b) || this;
                    b.id = (65535 & a.nextID++) << 11;
                    b.worldVerticesLength = 0;
                    return b.deformAttachment = b
                }
                h(a, c);
                a.prototype.computeWorldVertices = function(a, c, d, e, h, g) {
                    var b;
                    d = h + (d >> 1) * g;
                    var f = a.bone.skeleton;
                    var k = a.deform,
                        l = this.vertices,
                        m = this.bones;
                    if (null == m) {
                        0 < k.length && (l = k);
                        var n = a.bone;
                        k = n.worldX;
                        m = n.worldY;
                        var q = n.a;
                        f = n.b;
                        var u = n.c;
                        n = n.d;
                        for (var v = c; h < d; v += 2, h += g) a = l[v], c = l[v + 1], e[h] = a * q + c * f + k, e[h + 1] = a * u + c * n + m
                    } else {
                        for (n = a = u = 0; n < c; n += 2) q = m[u],
                            u += q + 1, a += q;
                        v = f.bones;
                        if (0 == k.length)
                            for (f = 3 * a; h < d; h += g) {
                                var C = b = 0;
                                q = m[u++];
                                for (q += u; u < q; u++, f += 3) {
                                    n = v[m[u]];
                                    a = l[f];
                                    c = l[f + 1];
                                    var F = l[f + 2];
                                    b += (a * n.a + c * n.b + n.worldX) * F;
                                    C += (a * n.c + c * n.d + n.worldY) * F
                                }
                                e[h] = b;
                                e[h + 1] = C
                            } else {
                                f = 3 * a;
                                for (var G = a << 1; h < d; h += g) {
                                    C = b = 0;
                                    q = m[u++];
                                    for (q += u; u < q; u++, f += 3, G += 2) n = v[m[u]], a = l[f] + k[G], c = l[f + 1] + k[G + 1], F = l[f + 2], b += (a * n.a + c * n.b + n.worldX) * F, C += (a * n.c + c * n.d + n.worldY) * F;
                                    e[h] = b;
                                    e[h + 1] = C
                                }
                            }
                    }
                };
                a.prototype.copyTo = function(a) {
                    null != this.bones ? (a.bones = Array(this.bones.length), d.Utils.arrayCopy(this.bones,
                        0, a.bones, 0, this.bones.length)) : a.bones = null;
                    null != this.vertices ? (a.vertices = d.Utils.newFloatArray(this.vertices.length), d.Utils.arrayCopy(this.vertices, 0, a.vertices, 0, this.vertices.length)) : a.vertices = null;
                    a.worldVerticesLength = this.worldVerticesLength;
                    a.deformAttachment = this.deformAttachment
                };
                a.nextID = 0;
                return a
            }(e);
            d.VertexAttachment = e
        })(e || (e = {}));
        (function(d) {
            d = d.AttachmentType || (d.AttachmentType = {});
            d[d.Region = 0] = "Region";
            d[d.BoundingBox = 1] = "BoundingBox";
            d[d.Mesh = 2] = "Mesh";
            d[d.LinkedMesh = 3] =
                "LinkedMesh";
            d[d.Path = 4] = "Path";
            d[d.Point = 5] = "Point";
            d[d.Clipping = 6] = "Clipping"
        })(e || (e = {}));
        (function(d) {
            var e = function(c) {
                function a(a) {
                    a = c.call(this, a) || this;
                    a.color = new d.Color(1, 1, 1, 1);
                    return a
                }
                h(a, c);
                a.prototype.copy = function() {
                    var b = new a(name);
                    this.copyTo(b);
                    b.color.setFromColor(this.color);
                    return b
                };
                return a
            }(d.VertexAttachment);
            d.BoundingBoxAttachment = e
        })(e || (e = {}));
        (function(d) {
            var e = function(c) {
                function a(a) {
                    a = c.call(this, a) || this;
                    a.color = new d.Color(.2275, .2275, .8078, 1);
                    return a
                }
                h(a,
                    c);
                a.prototype.copy = function() {
                    var b = new a(name);
                    this.copyTo(b);
                    b.endSlot = this.endSlot;
                    b.color.setFromColor(this.color);
                    return b
                };
                return a
            }(d.VertexAttachment);
            d.ClippingAttachment = e
        })(e || (e = {}));
        (function(d) {
            var e = function(c) {
                function a(a) {
                    a = c.call(this, a) || this;
                    a.color = new d.Color(1, 1, 1, 1);
                    a.tempColor = new d.Color(0, 0, 0, 0);
                    return a
                }
                h(a, c);
                a.prototype.updateUVs = function() {
                    var a = this.regionUVs;
                    null != this.uvs && this.uvs.length == a.length || (this.uvs = d.Utils.newFloatArray(a.length));
                    var c = this.uvs,
                        e = this.uvs.length,
                        h = this.region.u,
                        g = this.region.v;
                    if (this.region instanceof d.TextureAtlasRegion) {
                        var k = this.region;
                        var m = k.texture.getImage().width;
                        var q = k.texture.getImage().height;
                        switch (k.degrees) {
                            case 90:
                                h -= (k.originalHeight - k.offsetY - k.height) / m;
                                g -= (k.originalWidth - k.offsetX - k.width) / q;
                                m = k.originalHeight / m;
                                k = k.originalWidth / q;
                                for (q = 0; q < e; q += 2) c[q] = h + a[q + 1] * m, c[q + 1] = g + (1 - a[q]) * k;
                                return;
                            case 180:
                                h -= (k.originalWidth - k.offsetX - k.width) / m;
                                g -= k.offsetY / q;
                                m = k.originalWidth / m;
                                k = k.originalHeight / q;
                                for (q = 0; q < e; q += 2) c[q] =
                                    h + (1 - a[q]) * m, c[q + 1] = g + (1 - a[q + 1]) * k;
                                return;
                            case 270:
                                h -= k.offsetY / m;
                                g -= k.offsetX / q;
                                m = k.originalHeight / m;
                                k = k.originalWidth / q;
                                for (q = 0; q < e; q += 2) c[q] = h + (1 - a[q + 1]) * m, c[q + 1] = g + a[q] * k;
                                return
                        }
                        h -= k.offsetX / m;
                        g -= (k.originalHeight - k.offsetY - k.height) / q;
                        m = k.originalWidth / m;
                        k = k.originalHeight / q
                    } else null == this.region ? (h = g = 0, m = k = 1) : (m = this.region.u2 - h, k = this.region.v2 - g);
                    for (q = 0; q < e; q += 2) c[q] = h + a[q] * m, c[q + 1] = g + a[q + 1] * k
                };
                a.prototype.getParentMesh = function() {
                    return this.parentMesh
                };
                a.prototype.setParentMesh = function(a) {
                    this.parentMesh =
                        a;
                    null != a && (this.bones = a.bones, this.vertices = a.vertices, this.worldVerticesLength = a.worldVerticesLength, this.regionUVs = a.regionUVs, this.triangles = a.triangles, this.hullLength = a.hullLength, this.worldVerticesLength = a.worldVerticesLength)
                };
                a.prototype.copy = function() {
                    if (null != this.parentMesh) return this.newLinkedMesh();
                    var b = new a(this.name);
                    b.region = this.region;
                    b.path = this.path;
                    b.color.setFromColor(this.color);
                    this.copyTo(b);
                    b.regionUVs = Array(this.regionUVs.length);
                    d.Utils.arrayCopy(this.regionUVs, 0,
                        b.regionUVs, 0, this.regionUVs.length);
                    b.uvs = Array(this.uvs.length);
                    d.Utils.arrayCopy(this.uvs, 0, b.uvs, 0, this.uvs.length);
                    b.triangles = Array(this.triangles.length);
                    d.Utils.arrayCopy(this.triangles, 0, b.triangles, 0, this.triangles.length);
                    b.hullLength = this.hullLength;
                    null != this.edges && (b.edges = Array(this.edges.length), d.Utils.arrayCopy(this.edges, 0, b.edges, 0, this.edges.length));
                    b.width = this.width;
                    b.height = this.height;
                    return b
                };
                a.prototype.newLinkedMesh = function() {
                    var b = new a(this.name);
                    b.region = this.region;
                    b.path = this.path;
                    b.color.setFromColor(this.color);
                    b.deformAttachment = this.deformAttachment;
                    b.setParentMesh(null != this.parentMesh ? this.parentMesh : this);
                    b.updateUVs();
                    return b
                };
                return a
            }(d.VertexAttachment);
            d.MeshAttachment = e
        })(e || (e = {}));
        (function(d) {
            var e = function(c) {
                function a(a) {
                    a = c.call(this, a) || this;
                    a.closed = !1;
                    a.constantSpeed = !1;
                    a.color = new d.Color(1, 1, 1, 1);
                    return a
                }
                h(a, c);
                a.prototype.copy = function() {
                    var b = new a(name);
                    this.copyTo(b);
                    b.lengths = Array(this.lengths.length);
                    d.Utils.arrayCopy(this.lengths,
                        0, b.lengths, 0, this.lengths.length);
                    b.closed = closed;
                    b.constantSpeed = this.constantSpeed;
                    b.color.setFromColor(this.color);
                    return b
                };
                return a
            }(d.VertexAttachment);
            d.PathAttachment = e
        })(e || (e = {}));
        (function(d) {
            var e = function(c) {
                function a(a) {
                    a = c.call(this, a) || this;
                    a.color = new d.Color(.38, .94, 0, 1);
                    return a
                }
                h(a, c);
                a.prototype.computeWorldPosition = function(a, c) {
                    c.x = this.x * a.a + this.y * a.b + a.worldX;
                    c.y = this.x * a.c + this.y * a.d + a.worldY;
                    return c
                };
                a.prototype.computeWorldRotation = function(a) {
                    var b = d.MathUtils.cosDeg(this.rotation),
                        c = d.MathUtils.sinDeg(this.rotation);
                    return Math.atan2(b * a.c + c * a.d, b * a.a + c * a.b) * d.MathUtils.radDeg
                };
                a.prototype.copy = function() {
                    var b = new a(name);
                    b.x = this.x;
                    b.y = this.y;
                    b.rotation = this.rotation;
                    b.color.setFromColor(this.color);
                    return b
                };
                return a
            }(d.VertexAttachment);
            d.PointAttachment = e
        })(e || (e = {}));
        (function(d) {
            var e = function(c) {
                function a(a) {
                    a = c.call(this, a) || this;
                    a.x = 0;
                    a.y = 0;
                    a.scaleX = 1;
                    a.scaleY = 1;
                    a.rotation = 0;
                    a.width = 0;
                    a.height = 0;
                    a.color = new d.Color(1, 1, 1, 1);
                    a.offset = d.Utils.newFloatArray(8);
                    a.uvs =
                        d.Utils.newFloatArray(8);
                    a.tempColor = new d.Color(1, 1, 1, 1);
                    return a
                }
                h(a, c);
                a.prototype.updateOffset = function() {
                    var b = this.width / this.region.originalWidth * this.scaleX,
                        c = this.height / this.region.originalHeight * this.scaleY,
                        d = -this.width / 2 * this.scaleX + this.region.offsetX * b,
                        e = -this.height / 2 * this.scaleY + this.region.offsetY * c,
                        h = d + this.region.width * b;
                    b = e + this.region.height * c;
                    c = this.rotation * Math.PI / 180;
                    var g = Math.cos(c),
                        k = Math.sin(c);
                    c = d * g + this.x;
                    d *= k;
                    var m = e * g + this.y;
                    e *= k;
                    var q = h * g + this.x;
                    h *= k;
                    g = b * g + this.y;
                    b *= k;
                    k = this.offset;
                    k[a.OX1] = c - e;
                    k[a.OY1] = m + d;
                    k[a.OX2] = c - b;
                    k[a.OY2] = g + d;
                    k[a.OX3] = q - b;
                    k[a.OY3] = g + h;
                    k[a.OX4] = q - e;
                    k[a.OY4] = m + h
                };
                a.prototype.setRegion = function(a) {
                    this.region = a;
                    var b = this.uvs;
                    a.rotate ? (b[2] = a.u, b[3] = a.v2, b[4] = a.u, b[5] = a.v, b[6] = a.u2, b[7] = a.v, b[0] = a.u2, b[1] = a.v2) : (b[0] = a.u, b[1] = a.v2, b[2] = a.u, b[3] = a.v, b[4] = a.u2, b[5] = a.v, b[6] = a.u2, b[7] = a.v2)
                };
                a.prototype.computeWorldVertices = function(b, c, d, e) {
                    var f = this.offset,
                        h = b.worldX,
                        g = b.worldY,
                        k = b.a,
                        l = b.b,
                        m = b.c;
                    b = b.d;
                    var n = f[a.OX1];
                    var q = f[a.OY1];
                    c[d] =
                        n * k + q * l + h;
                    c[d + 1] = n * m + q * b + g;
                    d += e;
                    n = f[a.OX2];
                    q = f[a.OY2];
                    c[d] = n * k + q * l + h;
                    c[d + 1] = n * m + q * b + g;
                    d += e;
                    n = f[a.OX3];
                    q = f[a.OY3];
                    c[d] = n * k + q * l + h;
                    c[d + 1] = n * m + q * b + g;
                    d += e;
                    n = f[a.OX4];
                    q = f[a.OY4];
                    c[d] = n * k + q * l + h;
                    c[d + 1] = n * m + q * b + g
                };
                a.prototype.copy = function() {
                    var b = new a(name);
                    b.region = this.region;
                    b.rendererObject = this.rendererObject;
                    b.path = this.path;
                    b.x = this.x;
                    b.y = this.y;
                    b.scaleX = this.scaleX;
                    b.scaleY = this.scaleY;
                    b.rotation = this.rotation;
                    b.width = this.width;
                    b.height = this.height;
                    d.Utils.arrayCopy(this.uvs, 0, b.uvs, 0, 8);
                    d.Utils.arrayCopy(this.offset,
                        0, b.offset, 0, 8);
                    b.color.setFromColor(this.color);
                    return b
                };
                a.OX1 = 0;
                a.OY1 = 1;
                a.OX2 = 2;
                a.OY2 = 3;
                a.OX3 = 4;
                a.OY3 = 5;
                a.OX4 = 6;
                a.OY4 = 7;
                a.X1 = 0;
                a.Y1 = 1;
                a.C1R = 2;
                a.C1G = 3;
                a.C1B = 4;
                a.C1A = 5;
                a.U1 = 6;
                a.V1 = 7;
                a.X2 = 8;
                a.Y2 = 9;
                a.C2R = 10;
                a.C2G = 11;
                a.C2B = 12;
                a.C2A = 13;
                a.U2 = 14;
                a.V2 = 15;
                a.X3 = 16;
                a.Y3 = 17;
                a.C3R = 18;
                a.C3G = 19;
                a.C3B = 20;
                a.C3A = 21;
                a.U3 = 22;
                a.V3 = 23;
                a.X4 = 24;
                a.Y4 = 25;
                a.C4R = 26;
                a.C4G = 27;
                a.C4B = 28;
                a.C4A = 29;
                a.U4 = 30;
                a.V4 = 31;
                return a
            }(d.Attachment);
            d.RegionAttachment = e
        })(e || (e = {}));
        (function(d) {
            var e = function() {
                function c(a, b) {
                    this.jitterY =
                        this.jitterX = 0;
                    this.jitterX = a;
                    this.jitterY = b
                }
                c.prototype.begin = function(a) {};
                c.prototype.transform = function(a, b, c, e) {
                    a.x += d.MathUtils.randomTriangular(-this.jitterX, this.jitterY);
                    a.y += d.MathUtils.randomTriangular(-this.jitterX, this.jitterY)
                };
                c.prototype.end = function() {};
                return c
            }();
            d.JitterEffect = e
        })(e || (e = {}));
        (function(d) {
            var e = function() {
                function c(a, b) {
                    this.worldY = this.worldX = this.angle = this.radius = this.centerY = this.centerX = 0;
                    this.radius = a;
                    this.interpolation = b
                }
                c.prototype.begin = function(a) {
                    this.worldX =
                        a.x + this.centerX;
                    this.worldY = a.y + this.centerY
                };
                c.prototype.transform = function(a, b, c, e) {
                    e = this.angle * d.MathUtils.degreesToRadians;
                    b = a.x - this.worldX;
                    c = a.y - this.worldY;
                    var f = Math.sqrt(b * b + c * c);
                    f < this.radius && (f = this.interpolation.apply(0, e, (this.radius - f) / this.radius), e = Math.cos(f), f = Math.sin(f), a.x = e * b - f * c + this.worldX, a.y = f * b + e * c + this.worldY)
                };
                c.prototype.end = function() {};
                c.interpolation = new d.PowOut(2);
                return c
            }();
            d.SwirlEffect = e
        })(e || (e = {}));
        q.exports = e
    }, {}],
    394: [function(g, q, m) {
        var h = g("./track-entry-listeners"),
            e = g("./lib/spine"),
            d = 1 / 60,
            k = [],
            c = [],
            a = 0,
            b = 0,
            l = 0,
            f = null,
            n = null,
            u = 0,
            v = 0,
            p = 0,
            t = 0,
            x = null,
            z = null,
            E = 0,
            w = 0,
            A, B, y, C, F, G, D = new e.Color(1, 1, 1, 1),
            I = new e.Color(1, 1, 1, 1),
            K = [0, 1, 2, 2, 3, 0],
            L = cc.Class({
                ctor: function() {
                    this._inited = this._privateMode = !1;
                    this._invalid = !0;
                    this._enableCacheAttachedInfo = !1;
                    this.frames = [];
                    this.totalTime = 0;
                    this._frameIdx = -1;
                    this.isCompleted = !1;
                    this._tempBoneInfos = this._tempColors = this._tempSegments = this._animationName = this._skeletonInfo = null
                },
                init: function(a, b) {
                    this._inited = !0;
                    this._animationName =
                        b;
                    this._skeletonInfo = a
                },
                clear: function() {
                    this._inited = !1;
                    for (var a = 0, b = this.frames.length; a < b; a++) this.frames[a].segments.length = 0;
                    this.invalidAllFrame()
                },
                bind: function(a) {
                    var b = function(a) {
                        a && a.animation.name === this._animationName && (this.isCompleted = !0)
                    }.bind(this);
                    a.complete = b
                },
                unbind: function(a) {
                    a.complete = null
                },
                begin: function() {
                    if (this._invalid) {
                        var a = this._skeletonInfo,
                            b = a.curAnimationCache;
                        b && b !== this && (this._privateMode ? b.invalidAllFrame() : b.updateToFrame());
                        b = a.listener;
                        var c = a.state,
                            d = a.skeleton.data.findAnimation(this._animationName);
                        c.setAnimationWith(0, d, !1);
                        this.bind(b);
                        a.curAnimationCache = this;
                        this._frameIdx = -1;
                        this.isCompleted = !1;
                        this.totalTime = 0;
                        this._invalid = !1
                    }
                },
                end: function() {
                    this._needToUpdate() || (this._skeletonInfo.curAnimationCache = null, this.frames.length = this._frameIdx + 1, this.isCompleted = !0, this.unbind(this._skeletonInfo.listener))
                },
                _needToUpdate: function(a) {
                    return !this.isCompleted && 30 > this.totalTime && (void 0 == a || this._frameIdx < a)
                },
                updateToFrame: function(a) {
                    if (this._inited && (this.begin(), this._needToUpdate(a))) {
                        var b =
                            this._skeletonInfo,
                            c = b.skeleton,
                            e = b.clipper;
                        b = b.state;
                        do c.update(d), b.update(d), b.apply(c), c.updateWorldTransform(), this._frameIdx++, this._updateFrame(c, e, this._frameIdx), this.totalTime += d; while (this._needToUpdate(a));
                        this.end()
                    }
                },
                isInited: function() {
                    return this._inited
                },
                isInvalid: function() {
                    return this._invalid
                },
                invalidAllFrame: function() {
                    this.isCompleted = !1;
                    this._invalid = !0
                },
                updateAllFrame: function() {
                    this.invalidAllFrame();
                    this.updateToFrame()
                },
                enableCacheAttachedInfo: function() {
                    this._enableCacheAttachedInfo ||
                        (this._enableCacheAttachedInfo = !0, this.invalidAllFrame())
                },
                _updateFrame: function(d, e, h) {
                    b = a = l = 0;
                    n = f = null;
                    t = p = v = u = 0;
                    z = x = null;
                    this.frames[h] = this.frames[h] || {
                        segments: [],
                        colors: [],
                        boneInfos: [],
                        vertices: null,
                        uintVert: null,
                        indices: null
                    };
                    h = this.frames[h];
                    var g = this._tempSegments = h.segments,
                        m = this._tempColors = h.colors,
                        q = this._tempBoneInfos = h.boneInfos;
                    this._traverseSkeleton(d, e);
                    0 < t && (m[t - 1].vfOffset = l);
                    m.length = t;
                    q.length = a;
                    d = p - 1;
                    0 <= d && (0 < v ? (d = g[d], d.indexCount = v, d.vfCount = 6 * u, d.vertexCount = u, g.length =
                        p) : g.length = p - 1);
                    if (0 != g.length) {
                        g = h.vertices;
                        d = h.uintVert;
                        if (!g || g.length < l) g = h.vertices = new Float32Array(l), d = h.uintVert = new Uint32Array(g.buffer);
                        for (m = e = 0; e < l;) g[e++] = k[m++], g[e++] = k[m++], g[e++] = k[m++], g[e++] = k[m++], d[e++] = k[m++], d[e++] = k[m++];
                        e = h.indices;
                        (!e || e.length < b) && (e = h.indices = new Uint16Array(b));
                        for (m = 0; m < b; m++) e[m] = c[m];
                        h.vertices = g;
                        h.uintVert = d;
                        h.indices = e
                    }
                },
                fillVertices: function(a, d, e, f, h) {
                    C = e.a * d.a * a.a * 255;
                    A = d.r * a.r * 255;
                    B = d.g * a.g * 255;
                    y = d.b * a.b * 255;
                    D.r = A * e.r;
                    D.g = B * e.g;
                    D.b = y * e.b;
                    D.a =
                        C;
                    null == h.darkColor ? I.set(0, 0, 0, 1) : (I.r = h.darkColor.r * A, I.g = h.darkColor.g * B, I.b = h.darkColor.b * y);
                    I.a = 0;
                    F = (D.a << 24 >>> 0) + (D.b << 16) + (D.g << 8) + D.r;
                    G = (I.a << 24 >>> 0) + (I.b << 16) + (I.g << 8) + I.r;
                    if (x !== F || z !== G) a = this._tempColors, x = F, z = G, 0 < t && (a[t - 1].vfOffset = l), a[t++] = {
                        fr: D.r,
                        fg: D.g,
                        fb: D.b,
                        fa: D.a,
                        dr: I.r,
                        dg: I.g,
                        db: I.b,
                        da: I.a,
                        vfOffset: 0
                    };
                    if (f.isClipping()) {
                        f.clipTriangles(k, E, c, w, k, D, I, !0, 6, b, l, l + 2);
                        a = f.clippedVertices;
                        f = f.clippedTriangles;
                        w = f.length;
                        E = a.length / 12 * 6;
                        d = 0;
                        e = b;
                        for (h = f.length; d < h;) c[e++] = f[d++];
                        f = 0;
                        d = a.length;
                        for (e = l; f < d; f += 12, e += 6) k[e] = a[f], k[e + 1] = a[f + 1], k[e + 2] = a[f + 6], k[e + 3] = a[f + 7], k[e + 4] = F, k[e + 5] = G
                    } else
                        for (a = l, f = l + E; a < f; a += 6) k[a + 4] = F, k[a + 5] = G
                },
                _traverseSkeleton: function(d, h) {
                    var g = this._tempSegments,
                        m = this._tempBoneInfos,
                        q = d.color,
                        t, x, z, y = d.bones;
                    if (this._enableCacheAttachedInfo) {
                        var A = 0;
                        for (t = y.length; A < t; A++, a++) {
                            var B = y[A];
                            (x = m[a]) || (x = m[a] = {});
                            x.a = B.a;
                            x.b = B.b;
                            x.c = B.c;
                            x.d = B.d;
                            x.worldX = B.worldX;
                            x.worldY = B.worldY
                        }
                    }
                    y = 0;
                    for (A = d.drawOrder.length; y < A; y++)
                        if (m = d.drawOrder[y], m.bone.active)
                            if (w =
                                E = 0, t = m.getAttachment())
                                if (B = t instanceof e.RegionAttachment, x = t instanceof e.MeshAttachment, z = t instanceof e.ClippingAttachment) h.clipStart(m, t);
                                else {
                                    if (B || x)
                                        if (z = t.region.texture._texture) {
                                            var C = m.data.blendMode;
                                            if (f !== z.nativeUrl || n !== C) {
                                                f = z.nativeUrl;
                                                n = C;
                                                var D = p - 1;
                                                0 <= D && (0 < v ? (D = g[D], D.indexCount = v, D.vertexCount = u, D.vfCount = 6 * u) : p--);
                                                g[p] = {
                                                    tex: z,
                                                    blendMode: C,
                                                    indexCount: 0,
                                                    vertexCount: 0,
                                                    vfCount: 0
                                                };
                                                p++;
                                                u = v = 0
                                            }
                                            if (B) {
                                                var F = K;
                                                E = 24;
                                                w = 6;
                                                t.computeWorldVertices(m.bone, k, l, 6)
                                            } else x && (F = t.triangles, E = 6 * (t.worldVerticesLength >>
                                                1), w = F.length, t.computeWorldVertices(m, 0, t.worldVerticesLength, k, l, 6));
                                            if (0 != E && 0 != w) {
                                                B = 0;
                                                x = b;
                                                for (z = F.length; B < z;) c[x++] = F[B++];
                                                B = t.uvs;
                                                x = l;
                                                z = l + E;
                                                for (C = 0; x < z; x += 6, C += 2) k[x + 2] = B[C], k[x + 3] = B[C + 1];
                                                t = t.color;
                                                B = m.color;
                                                this.fillVertices(q, t, B, h, m);
                                                if (0 < w) {
                                                    t = b;
                                                    for (B = b + w; t < B; t++) c[t] += u;
                                                    b += w;
                                                    l += E;
                                                    v += w;
                                                    u += E / 6
                                                }
                                            }
                                        }
                                    h.clipEndWithSlot(m)
                                }
                    else h.clipEndWithSlot(m);
                    h.clipEnd()
                }
            });
        g = cc.Class({
            ctor: function() {
                this._privateMode = !1;
                this._animationPool = {};
                this._skeletonCache = {}
            },
            enablePrivateMode: function() {
                this._privateMode = !0
            },
            clear: function() {
                this._animationPool = {};
                this._skeletonCache = {}
            },
            removeSkeleton: function(a) {
                var b = this._skeletonCache[a];
                if (b) {
                    b = b.animationsCache;
                    for (var c in b) {
                        var d = b[c];
                        d && (this._animationPool[a + "#" + c] = d, d.clear())
                    }
                    delete this._skeletonCache[a]
                }
            },
            getSkeletonCache: function(a, b) {
                var c = this._skeletonCache[a];
                if (!c) {
                    b = new e.Skeleton(b);
                    c = new e.SkeletonClipping;
                    var d = new e.AnimationStateData(b.data);
                    d = new e.AnimationState(d);
                    var f = new h;
                    d.addListener(f);
                    this._skeletonCache[a] = c = {
                        skeleton: b,
                        clipper: c,
                        state: d,
                        listener: f,
                        animationsCache: {},
                        curAnimationCache: null
                    }
                }
                return c
            },
            getAnimationCache: function(a, b) {
                return (a = this._skeletonCache[a]) ? a.animationsCache[b] : null
            },
            invalidAnimationCache: function(a) {
                if ((a = this._skeletonCache[a]) && a.skeleton) {
                    a = a.animationsCache;
                    for (var b in a) a[b].invalidAllFrame()
                }
            },
            initAnimationCache: function(a, b) {
                if (!b) return null;
                var c = this._skeletonCache[a],
                    d = c && c.skeleton;
                if (!d || !d.data.findAnimation(b)) return null;
                d = c.animationsCache;
                var e = d[b];
                e || (a = a + "#" + b, (e = this._animationPool[a]) ?
                    delete this._animationPool[a] : (e = new L, e._privateMode = this._privateMode), e.init(c, b), d[b] = e);
                return e
            },
            updateAnimationCache: function(a, b) {
                if (b) {
                    var c = this.initAnimationCache(a, b);
                    if (!c) return null;
                    c.updateAllFrame()
                } else if ((a = this._skeletonCache[a]) && a.skeleton)
                    for (c in a = a.animationsCache, a) a[c].updateAllFrame()
            }
        });
        g.FrameTime = d;
        g.sharedCache = new g;
        q.exports = g
    }, {
        "./lib/spine": 393,
        "./track-entry-listeners": 398
    }],
    395: [function(g, q, m) {
        var h = (!0, g("./skeleton-cache").sharedCache);
        g = cc.Class({
            name: "sp.SkeletonData",
            extends: cc.Asset,
            ctor: function() {
                this.reset()
            },
            properties: {
                _skeletonJson: null,
                skeletonJsonStr: {
                    get: function() {
                        return this._skeletonJson ? JSON.stringify(this._skeletonJson) : ""
                    }
                },
                skeletonJson: {
                    get: function() {
                        return this._skeletonJson
                    },
                    set: function(e) {
                        this.reset();
                        this._skeletonJson = "string" == typeof e ? JSON.parse(e) : e;
                        !this._uuid && e.skeleton && (this._uuid = e.skeleton.hash)
                    }
                },
                _atlasText: "",
                atlasText: {
                    get: function() {
                        return this._atlasText
                    },
                    set: function(e) {
                        this._atlasText = e;
                        this.reset()
                    }
                },
                textures: {
                    default: [],
                    type: [cc.Texture2D]
                },
                textureNames: {
                    default: [],
                    type: [cc.String]
                },
                scale: 1,
                _nativeAsset: {
                    get: function() {
                        return this._buffer
                    },
                    set: function(e) {
                        this._buffer = e.buffer || e;
                        this.reset()
                    },
                    override: !0
                }
            },
            statics: {
                preventDeferredLoadDependents: !0
            },
            createNode: !1,
            reset: function() {
                this._atlasCache = this._skeletonCache = null;
                !1
            },
            ensureTexturesLoaded: function(e, d) {
                var h = this.textures,
                    c = h.length;
                if (0 == c) e.call(d, !1);
                else
                    for (var a = 0, b = function() {
                            a++;
                            a >= c && (e && e.call(d, !0), e = null)
                        }, g = 0; g < c; g++) {
                        var f = h[g];
                        f.loaded ? b() :
                            f.once("load", b)
                    }
            },
            isTexturesLoaded: function() {
                for (var e = this.textures, d = e.length, h = 0; h < d; h++)
                    if (!e[h].loaded) return !1;
                return !0
            },
            getRuntimeData: function(e) {
                if (this._skeletonCache) return this._skeletonCache;
                if (!(this.textures && 0 < this.textures.length) && this.textureNames && 0 < this.textureNames.length) return e || cc.errorID(7507, this.name), null;
                e = this._getAtlas(e);
                if (!e) return null;
                var d = new sp.spine.AtlasAttachmentLoader(e);
                if (this.skeletonJson) {
                    var h = new sp.spine.SkeletonJson(d);
                    d = this.skeletonJson
                } else h =
                    new sp.spine.SkeletonBinary(d), d = new Uint8Array(this._nativeAsset);
                h.scale = this.scale;
                this._skeletonCache = h.readSkeletonData(d);
                e.dispose();
                return this._skeletonCache
            },
            getSkinsEnum: !1,
            getAnimsEnum: !1,
            _getTexture: function(e) {
                for (var d = this.textureNames, h = 0; h < d.length; h++)
                    if (d[h] === e) return e = this.textures[h], d = new sp.SkeletonTexture({
                        width: e.width,
                        height: e.height
                    }), d.setRealTexture(e), d;
                cc.errorID(7506, e);
                return null
            },
            _getAtlas: function(e) {
                return this._atlasCache ? this._atlasCache : this.atlasText ? this._atlasCache =
                    new sp.spine.TextureAtlas(this.atlasText, this._getTexture.bind(this)) : (e || cc.errorID(7508, this.name), null)
            },
            destroy: function() {
                h.removeSkeleton(this._uuid);
                this._super()
            }
        });
        sp.SkeletonData = q.exports = g
    }, {
        "./skeleton-cache": 394
    }],
    396: [function(g, q, m) {
        sp.SkeletonTexture = cc.Class({
            name: "sp.SkeletonTexture",
            extends: sp.spine.Texture,
            _texture: null,
            _material: null,
            setRealTexture: function(h) {
                this._texture = h
            },
            getRealTexture: function() {
                return this._texture
            },
            setFilters: function(h, e) {
                this._texture && this._texture.setFilters(h,
                    e)
            },
            setWraps: function(h, e) {
                this._texture && this._texture.setWrapMode(h, e)
            },
            dispose: function() {}
        })
    }, {}],
    397: [function(g, q, m) {
        function h(a, b) {
            a.prototype = Object.create(b.prototype);
            a.prototype.constructor = a;
            e(a, b)
        }

        function e(a, b) {
            e = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(a, b) {
                a.__proto__ = b;
                return a
            };
            return e(a, b)
        }

        function d(a, b) {
            switch (b) {
                case l.BlendMode.Additive:
                    b = F ? cc.macro.ONE : cc.macro.SRC_ALPHA;
                    var c = cc.macro.ONE;
                    break;
                case l.BlendMode.Multiply:
                    b = cc.macro.DST_COLOR;
                    c = cc.macro.ONE_MINUS_SRC_ALPHA;
                    break;
                case l.BlendMode.Screen:
                    b = cc.macro.ONE;
                    c = cc.macro.ONE_MINUS_SRC_COLOR;
                    break;
                default:
                    b = F ? cc.macro.ONE : cc.macro.SRC_ALPHA, c = cc.macro.ONE_MINUS_SRC_ALPHA
            }
            var d = !wa.enableBatch,
                e = wa._materials[0];
            if (!e) return null;
            var f = a.getId() + b + c + K + d,
                h = wa._materialCache,
                g = h[f];
            g || (h.baseMaterial ? g = cc.MaterialVariant.create(e) : (g = e, h.baseMaterial = e), g.define("CC_USE_MODEL", d), g.define("USE_TINT", K), g.setProperty("texture", a), g.setBlend(!0, v.BLEND_FUNC_ADD, b, c, v.BLEND_FUNC_ADD, b, c), h[f] = g);
            return g
        }

        function k(a) {
            ta =
                a.fa * V;
            G = F ? ta / 255 : 1;
            Ha = S * G;
            za = O * G;
            Ia = Q * G;
            Ja = a.fr * Ha;
            Fa = a.fg * za;
            Sa = a.fb * Ia;
            ba = (ta << 24 >>> 0) + (Sa << 16) + (Fa << 8) + Ja;
            Y = a.dr * Ha;
            Ma = a.dg * za;
            Na = a.db * Ia;
            Ta = F ? 255 : 0;
            da = (Ta << 24 >>> 0) + (Na << 16) + (Ma << 8) + Y
        }

        function c(a) {
            return (a.a << 24 >>> 0) + (a.b << 16) + (a.g << 8) + a.r
        }
        m.__esModule = !0;
        m["default"] = void 0;
        var a = function(a) {
                return a && a.__esModule ? a : {
                    default: a
                }
            }(g("../../cocos2d/core/renderer/assembler")),
            b = g("./Skeleton"),
            l = g("./lib/spine"),
            f = g("../../cocos2d/core/renderer/render-flow");
        g = g("../../cocos2d/core/renderer/webgl/vertex-format");
        var n = g.vfmtPosUvColor,
            u = g.vfmtPosUvTwoColor,
            v = cc.gfx,
            p = 0,
            t = [0, 1, 2, 2, 3, 0],
            x = cc.color(0, 0, 255, 255),
            z = cc.color(255, 0, 0, 255),
            E = cc.color(0, 255, 0, 255),
            w = cc.color(255, 255, 0, 255),
            A = null,
            B = null,
            y = null,
            C = null;
        !0;
        A = new l.Color(1, 1, 1, 1);
        B = new l.Color(1, 1, 1, 1);
        y = new l.Vector2;
        C = new l.Vector2;
        var F, G, D, I, K, L, R, M, S, O, Q, V, ba, da, T, N, fa, Z = 0,
            W = 0,
            X = 0,
            la = 0,
            ea = 0,
            ja = 0,
            oa = 0,
            sa, ia, ca, ra, r, Ca, na, ka, xa, P, U, ua, pa, Ha, za, Ia, Ja, Fa, Sa, ta, Y, Ma, Na, Ta, wa, ma, ya, Ka, Pa, Aa;
        g = function(a) {
            function b() {
                return a.apply(this, arguments) || this
            }
            h(b, a);
            var e = b.prototype;
            e.updateRenderData = function(a) {
                a.isAnimationCached() || (a = a._skeleton) && a.updateWorldTransform()
            };
            e.fillVertices = function(a, b, d, e, f) {
                var h = ma._vData,
                    g = ma._iData,
                    k = ma._uintVData;
                A.a = d.a * b.a * a.a * V * 255;
                G = F ? A.a : 255;
                sa = S * b.r * a.r * G;
                ia = O * b.g * a.g * G;
                ca = Q * b.b * a.b * G;
                A.r = sa * d.r;
                A.g = ia * d.g;
                A.b = ca * d.b;
                null == f.darkColor ? B.set(0, 0, 0, 1) : (B.r = f.darkColor.r * sa, B.g = f.darkColor.g * ia, B.b = f.darkColor.b * ca);
                B.a = F ? 255 : 0;
                if (e.isClipping())
                    if (k = h.subarray(X + 2), e.clipTriangles(h.subarray(X), Z, g.subarray(ja),
                            ea, k, A, B, K, N), a = new Float32Array(e.clippedVertices), e = e.clippedTriangles, ea = e.length, Z = a.length / fa * N, k = ma.request(Z / N, ea), ja = k.indiceOffset, la = k.vertexOffset, X = k.byteOffset >> 2, h = ma._vData, g = ma._iData, k = ma._uintVData, g.set(e, ja), Aa)
                        for (g = 0, e = a.length, b = X; g < e; g += fa, b += N) y.x = a[g], y.y = a[g + 1], A.set(a[g + 2], a[g + 3], a[g + 4], a[g + 5]), C.x = a[g + 6], C.y = a[g + 7], K ? B.set(a[g + 8], a[g + 9], a[g + 10], a[g + 11]) : B.set(0, 0, 0, 0), Aa.transform(y, C, A, B), h[b] = y.x, h[b + 1] = y.y, h[b + 2] = C.x, h[b + 3] = C.y, k[b + 4] = c(A), K && (k[b + 5] = c(B));
                    else
                        for (g =
                            0, e = a.length, b = X; g < e; g += fa, b += N) h[b] = a[g], h[b + 1] = a[g + 1], h[b + 2] = a[g + 6], h[b + 3] = a[g + 7], ba = (a[g + 5] << 24 >>> 0) + (a[g + 4] << 16) + (a[g + 3] << 8) + a[g + 2], k[b + 4] = ba, K && (da = (a[g + 11] << 24 >>> 0) + (a[g + 10] << 16) + (a[g + 9] << 8) + a[g + 8], k[b + 5] = da);
                else if (Aa)
                    for (a = X, g = X + Z; a < g; a += N) y.x = h[a], y.y = h[a + 1], C.x = h[a + 2], C.y = h[a + 3], Aa.transform(y, C, A, B), h[a] = y.x, h[a + 1] = y.y, h[a + 2] = C.x, h[a + 3] = C.y, k[a + 4] = c(A), K && (k[a + 5] = c(B));
                else
                    for (ba = c(A), da = c(B), h = X, a = X + Z; h < a; h += N) k[h + 4] = ba, K && (k[h + 5] = da)
            };
            e.realTimeTraverse = function(a) {
                var b = wa._skeleton,
                    c = b.color,
                    e = wa._debugRenderer,
                    f = wa._clipper,
                    h, g;
                D = wa._startSlotIndex;
                I = wa._endSlotIndex;
                ra = !1; - 1 == D && (ra = !0);
                L = wa.debugSlots;
                R = wa.debugBones;
                M = wa.debugMesh;
                e && (R || L || M) && (e.clear(), e.lineWidth = 2);
                fa = K ? 12 : 8;
                for (var k = ja = ea = la = X = Z = 0, m = b.drawOrder.length; k < m; k++) {
                    var n = b.drawOrder[k];
                    if (void 0 != n && n.bone.active)
                        if (0 <= D && D == n.data.index && (ra = !0), ra)
                            if (0 <= I && I == n.data.index && (ra = !1), ea = Z = 0, g = n.getAttachment()) {
                                var p = g instanceof l.RegionAttachment;
                                var q = g instanceof l.MeshAttachment;
                                if (h = g instanceof l.ClippingAttachment) f.clipStart(n,
                                    g);
                                else {
                                    if (p || q)
                                        if (h = d(g.region.texture._texture, n.data.blendMode)) {
                                            if (r || h.getHash() !== ya.material.getHash()) r = !1, ya._flush(), ya.node = Ka, ya.material = h;
                                            if (p) {
                                                var u = t;
                                                Z = 4 * N;
                                                ea = 6;
                                                var v = ma.request(4, 6);
                                                ja = v.indiceOffset;
                                                la = v.vertexOffset;
                                                X = v.byteOffset >> 2;
                                                v = ma._vData;
                                                var y = ma._iData;
                                                g.computeWorldVertices(n.bone, v, X, N);
                                                if (e && L) {
                                                    e.strokeColor = x;
                                                    e.moveTo(v[X], v[X + 1]);
                                                    p = X + N;
                                                    for (q = X + Z; p < q; p += N) e.lineTo(v[p], v[p + 1]);
                                                    e.close();
                                                    e.stroke()
                                                }
                                            } else if (q && (u = g.triangles, Z = (g.worldVerticesLength >> 1) * N, ea = u.length,
                                                    v = ma.request(Z / N, ea), ja = v.indiceOffset, la = v.vertexOffset, X = v.byteOffset >> 2, v = ma._vData, y = ma._iData, g.computeWorldVertices(n, 0, g.worldVerticesLength, v, X, N), e && M))
                                                for (e.strokeColor = w, p = 0, q = u.length; p < q; p += 3) {
                                                    h = u[p] * N + X;
                                                    var A = u[p + 1] * N + X,
                                                        B = u[p + 2] * N + X;
                                                    e.moveTo(v[h], v[h + 1]);
                                                    e.lineTo(v[A], v[A + 1]);
                                                    e.lineTo(v[B], v[B + 1]);
                                                    e.close();
                                                    e.stroke()
                                                }
                                            if (0 != Z && 0 != ea) {
                                                y.set(u, ja);
                                                y = g.uvs;
                                                p = X;
                                                q = X + Z;
                                                for (h = 0; p < q; p += N, h += 2) v[p + 2] = y[h], v[p + 3] = y[h + 1];
                                                v = g.color;
                                                y = n.color;
                                                this.fillVertices(c, v, y, f, n);
                                                v = ma._vData;
                                                y = ma._iData;
                                                if (0 < ea) {
                                                    g = ja;
                                                    for (p = ja + ea; g < p; g++) y[g] += la;
                                                    if (a)
                                                        for (g = a.m, ka = g[0], xa = g[4], P = g[12], U = g[1], ua = g[5], pa = g[13], g = X, p = X + Z; g < p; g += N) Ca = v[g], na = v[g + 1], v[g] = Ca * ka + na * xa + P, v[g + 1] = Ca * U + na * ua + pa;
                                                    ma.adjust(Z / N, ea)
                                                }
                                            }
                                        }
                                    f.clipEndWithSlot(n)
                                }
                            } else f.clipEndWithSlot(n);
                    else f.clipEndWithSlot(n)
                }
                f.clipEnd();
                if (e && R)
                    for (e.strokeColor = z, e.fillColor = x, c = 0, f = b.bones.length; c < f; c++) a = b.bones[c], u = a.data.length * a.a + a.worldX, n = a.data.length * a.c + a.worldY, e.moveTo(a.worldX, a.worldY), e.lineTo(u, n), e.stroke(), e.circle(a.worldX,
                        a.worldY, 1.5 * Math.PI), e.fill(), 0 === c && (e.fillColor = E)
            };
            e.cacheTraverse = function(a) {
                var b = wa._curFrame;
                if (b) {
                    var c = b.segments;
                    if (0 != c.length) {
                        var e, f = b.vertices,
                            h = b.indices,
                            g = 0,
                            l = 0;
                        a && (a = a.m, ka = a[0], U = a[1], xa = a[4], ua = a[5], P = a[12], pa = a[13]);
                        var m = 1 === ka && 0 === U && 0 === xa && 1 === ua;
                        m = (a = p & 16) && m;
                        var n = 0;
                        b = b.colors;
                        var q = b[n++];
                        var t = q.vfOffset;
                        k(q);
                        for (var u = 0, v = c.length; u < v; u++)
                            if (q = c[u], e = d(q.tex, q.blendMode)) {
                                if (r || e.getHash() !== ya.material.getHash()) r = !1, ya._flush(), ya.node = Ka, ya.material = e;
                                W = q.vertexCount;
                                ea = q.indexCount;
                                e = ma.request(W, ea);
                                ja = e.indiceOffset;
                                la = e.vertexOffset;
                                oa = e.byteOffset >> 2;
                                var w = ma._vData;
                                var x = ma._iData;
                                e = ma._uintVData;
                                for (var y = ja, z = ja + ea; y < z; y++) x[y] = la + h[l++];
                                q = q.vfCount;
                                w.set(f.subarray(g, g + q), oa);
                                g += q;
                                if (m)
                                    for (x = oa, y = oa + q; x < y; x += 6) w[x] += P, w[x + 1] += pa;
                                else if (a)
                                    for (x = oa, y = oa + q; x < y; x += 6) Ca = w[x], na = w[x + 1], w[x] = Ca * ka + na * xa + P, w[x + 1] = Ca * U + na * ua + pa;
                                ma.adjust(W, ea);
                                if (Pa)
                                    for (w = g - q, x = oa + 4, y = oa + 4 + q; x < y; x += 6, w += 6) w >= t && (q = b[n++], k(q), t = q.vfOffset), e[x] = ba, e[x + 1] = da
                            }
                    }
                }
            };
            e.fillBuffers =
                function(a, b) {
                    var c = a.node;
                    c._renderFlag |= f.FLAG_UPDATE_RENDER_DATA;
                    a._skeleton && (c = c._color, S = c.r / 255, O = c.g / 255, Q = c.b / 255, V = c.a / 255, T = (K = a.useTint || a.isAnimationCached()) ? u : n, N = K ? 6 : 5, Ka = a.node, ma = b.getBuffer("spine", T), ya = b, wa = a, r = !0, F = a.premultipliedAlpha, G = 1, p = 0, Pa = !1, Aa = a._effectDelegate && a._effectDelegate._vertexEffect, (4294967295 !== c._val || F) && (Pa = !0), K && (p |= 1), c = void 0, wa.enableBatch && (c = Ka._worldMatrix, r = !1, p |= 16), a.isAnimationCached() ? this.cacheTraverse(c) : (Aa && Aa.begin(a._skeleton), this.realTimeTraverse(c),
                        Aa && Aa.end()), b.worldMatDirty++, a.attachUtil._syncAttachedNode(), wa = ya = ma = Ka = void 0, Aa = null)
                };
            e.postFillBuffers = function(a, b) {
                b.worldMatDirty--
            };
            return b
        }(a["default"]);
        m["default"] = g;
        a["default"].register(b, g);
        q.exports = m["default"]
    }, {
        "../../cocos2d/core/renderer/assembler": 256,
        "../../cocos2d/core/renderer/render-flow": 260,
        "../../cocos2d/core/renderer/webgl/vertex-format": 299,
        "./Skeleton": 391,
        "./lib/spine": 393
    }],
    398: [function(g, q, m) {
        var h = function() {
            this.dispose = this.interrupt = this.event = this.complete =
                this.end = this.start = null
        };
        h.getListeners = function(e) {
            e.listener || (e.listener = new h);
            return e.listener
        };
        q.exports = h
    }, {}],
    399: [function(g, q, m) {
        var h = g("./lib/spine");
        sp.VertexEffectDelegate = cc.Class({
            name: "sp.VertexEffectDelegate",
            ctor: function() {
                this._interpolation = this._vertexEffect = null;
                this._effectType = "none"
            },
            clear: function() {
                this._interpolation = this._vertexEffect = null;
                this._effectType = "none"
            },
            initJitter: function(e, d) {
                this._effectType = "jitter";
                return this._vertexEffect = new h.JitterEffect(e, d)
            },
            initSwirlWithPow: function(e, d) {
                this._interpolation = new h.Pow(d);
                return this._vertexEffect = new h.SwirlEffect(e, this._interpolation)
            },
            initSwirlWithPowOut: function(e, d) {
                this._interpolation = new h.PowOut(d);
                return this._vertexEffect = new h.SwirlEffect(e, this._interpolation)
            },
            getJitterVertexEffect: function() {
                return this._vertexEffect
            },
            getSwirlVertexEffect: function() {
                return this._vertexEffect
            },
            getVertexEffect: function() {
                return this._vertexEffect
            },
            getEffectType: function() {
                return this._effectType
            }
        });
        q.exports =
            sp.VertexEffectDelegate
    }, {
        "./lib/spine": 393
    }],
    400: [function(g, q, m) {
        (function(h, e) {
            "object" === typeof m && "undefined" !== typeof q ? e(m) : "function" === typeof define && define.amd ? define(["exports"], e) : e(h.box2d = {})
        })(void 0, function(h) {
            function e(a, b) {
                return void 0 !== a ? a : b
            }

            function d(a, b) {
                for (var c = [], d = 0; d < a; ++d) c.push(b(d));
                return c
            }

            function g(a, b) {
                void 0 === b && (b = 0);
                for (var c = [], d = 0; d < a; ++d) c.push(b);
                return c
            }

            function c(a, b, c) {
                return a < b ? b : a > c ? c : a
            }

            function a(a) {
                return a * a
            }

            function b(a) {
                return 1 / Math.sqrt(a)
            }

            function l(a, b, c) {
                ++h.b2_gjkCalls;
                var d = c.proxyA,
                    e = c.proxyB,
                    f = c.transformA,
                    g = c.transformB,
                    k = Ka;
                k.ReadCache(b, d, f, e, g);
                for (var l = k.m_vertices, H = Pa, J = Aa, m, n = 0; 20 > n;) {
                    m = k.m_count;
                    for (var aa = 0; aa < m; ++aa) H[aa] = l[aa].indexA, J[aa] = l[aa].indexB;
                    switch (k.m_count) {
                        case 2:
                            k.Solve2();
                            break;
                        case 3:
                            k.Solve3()
                    }
                    if (3 === k.m_count) break;
                    aa = k.GetSearchDirection(nb);
                    if (aa.LengthSquared() < Q) break;
                    var p = l[k.m_count];
                    p.indexA = d.GetSupport(P.MulTRV(f.q, r.NegV(aa, r.s_t0), pb));
                    U.MulXV(f, d.GetVertex(p.indexA), p.wA);
                    p.indexB =
                        e.GetSupport(P.MulTRV(g.q, aa, qb));
                    U.MulXV(g, e.GetVertex(p.indexB), p.wB);
                    r.SubVV(p.wB, p.wA, p.w);
                    ++n;
                    ++h.b2_gjkIters;
                    var q = !1;
                    for (aa = 0; aa < m; ++aa)
                        if (p.indexA === H[aa] && p.indexB === J[aa]) {
                            q = !0;
                            break
                        }
                    if (q) break;
                    ++k.m_count
                }
                h.b2_gjkMaxIters = X(h.b2_gjkMaxIters, n);
                k.GetWitnessPoints(a.pointA, a.pointB);
                a.distance = r.DistanceVV(a.pointA, a.pointB);
                a.iterations = n;
                k.WriteCache(b);
                c.useRadii && (b = d.m_radius, e = e.m_radius, a.distance > b + e && 1E-5 < a.distance ? (a.distance -= b + e, c = r.SubVV(a.pointB, a.pointA, ob), c.Normalize(),
                    a.pointA.SelfMulAdd(b, c), a.pointB.SelfMulSub(e, c)) : (e = r.MidVV(a.pointA, a.pointB, mb), a.pointA.Copy(e), a.pointB.Copy(e), a.distance = 0))
            }

            function f(a, b) {
                var c = b.lowerBound.y - a.upperBound.y,
                    d = a.lowerBound.y - b.upperBound.y;
                return 0 < b.lowerBound.x - a.upperBound.x || 0 < c || 0 < a.lowerBound.x - b.upperBound.x || 0 < d ? !1 : !0
            }

            function m(a, b, c, d, e) {
                var f = 0,
                    g = b[0];
                b = b[1];
                var k = r.DotVV(c, g.v) - d;
                c = r.DotVV(c, b.v) - d;
                0 >= k && a[f++].Copy(g);
                0 >= c && a[f++].Copy(b);
                0 > k * c && (c = k / (k - c), d = a[f].v, d.x = g.v.x + c * (b.v.x - g.v.x), d.y = g.v.y + c * (b.v.y -
                    g.v.y), a = a[f].id, a.cf.indexA = e, a.cf.indexB = g.id.cf.indexB, a.cf.typeA = h.b2ContactFeatureType.e_vertex, a.cf.typeB = h.b2ContactFeatureType.e_face, ++f);
                return f
            }

            function q(a, b, c, d, e, f) {
                var h = Qa.Reset();
                h.proxyA.SetShape(a, b);
                h.proxyB.SetShape(c, d);
                h.transformA.Copy(e);
                h.transformB.Copy(f);
                h.useRadii = !0;
                a = Db.Reset();
                a.count = 0;
                b = Eb.Reset();
                l(b, a, h);
                return 1E-4 > b.distance
            }

            function v(a) {
                if (null === a) throw Error();
                return a
            }

            function p(a, b) {
                return a.proxyA.m_id === b.proxyA.m_id ? a.proxyB.m_id - b.proxyB.m_id : a.proxyA.m_id -
                    b.proxyA.m_id
            }

            function t(a, b) {
                var c = Nc.Reset();
                ++h.b2_toiCalls;
                a.state = h.b2TOIOutputState.e_unknown;
                a.t = b.tMax;
                var d = b.proxyA,
                    e = b.proxyB,
                    f = Pc.Copy(b.sweepA),
                    g = Qc.Copy(b.sweepB);
                f.Normalize();
                g.Normalize();
                var k = b.tMax,
                    H = X(.008, d.m_radius + e.m_radius - .024),
                    m = 0,
                    n = 0,
                    aa = Oc;
                aa.count = 0;
                var r = Rc;
                r.proxyA.Copy(b.proxyA);
                r.proxyB.Copy(b.proxyB);
                for (r.useRadii = !1;;) {
                    b = cb;
                    var p = Wa;
                    f.GetTransform(b, m);
                    g.GetTransform(p, m);
                    r.transformA.Copy(b);
                    r.transformB.Copy(p);
                    b = Sc;
                    l(b, aa, r);
                    if (0 >= b.distance) {
                        a.state = h.b2TOIOutputState.e_overlapped;
                        a.t = 0;
                        break
                    }
                    if (b.distance < H + .002) {
                        a.state = h.b2TOIOutputState.e_touching;
                        a.t = m;
                        break
                    }
                    b = Tc;
                    b.Initialize(aa, d, f, e, g, m);
                    p = !1;
                    for (var q = k, t = 0;;) {
                        var u = Uc,
                            v = Vc,
                            w = b.FindMinSeparation(u, v, q);
                        if (w > H + .002) {
                            a.state = h.b2TOIOutputState.e_separated;
                            a.t = k;
                            p = !0;
                            break
                        }
                        if (w > H - .002) {
                            m = q;
                            break
                        }
                        var x = b.Evaluate(u[0], v[0], m);
                        if (x < H - .002) {
                            a.state = h.b2TOIOutputState.e_failed;
                            a.t = m;
                            p = !0;
                            break
                        }
                        if (x <= H + .002) {
                            a.state = h.b2TOIOutputState.e_touching;
                            a.t = m;
                            p = !0;
                            break
                        }
                        for (var y = 0, z = m, A = q;;) {
                            var B = 1 & y ? z + (H - x) * (A - z) / (w - x) : .5 * (z + A);
                            ++y;
                            ++h.b2_toiRootIters;
                            var C = b.Evaluate(u[0], v[0], B);
                            if (.002 > Z(C - H)) {
                                q = B;
                                break
                            }
                            C > H ? (z = B, x = C) : (A = B, w = C);
                            if (50 === y) break
                        }
                        h.b2_toiMaxRootIters = X(h.b2_toiMaxRootIters, y);
                        ++t;
                        if (8 === t) break
                    }++n;
                    ++h.b2_toiIters;
                    if (p) break;
                    if (20 === n) {
                        a.state = h.b2TOIOutputState.e_failed;
                        a.t = m;
                        break
                    }
                }
                h.b2_toiMaxIters = X(h.b2_toiMaxIters, n);
                a = c.GetMilliseconds();
                h.b2_toiMaxTime = X(h.b2_toiMaxTime, a);
                h.b2_toiTime += a
            }

            function x(a, b, c, d, e) {
                a.pointCount = 0;
                c = U.MulXV(c, b.m_p, Wc);
                e = U.MulXV(e, d.m_p, Xc);
                e = r.DistanceSquaredVV(c, e);
                c =
                    b.m_radius + d.m_radius;
                e > c * c || (a.type = h.b2ManifoldType.e_circles, a.localPoint.Copy(b.m_p), a.localNormal.SetZero(), a.pointCount = 1, a.points[0].localPoint.Copy(d.m_p), a.points[0].id.key = 0)
            }

            function z(a, b, c, d, e) {
                a.pointCount = 0;
                e = U.MulXV(e, d.m_p, Yc);
                c = U.MulTXV(c, e, Zc);
                var f = 0,
                    g = -1E37;
                e = b.m_radius + d.m_radius;
                var k = b.m_count,
                    l = b.m_vertices;
                b = b.m_normals;
                for (var H = 0; H < k; ++H) {
                    var J = r.DotVV(b[H], r.SubVV(c, l[H], r.s_t0));
                    if (J > e) return;
                    J > g && (g = J, f = H)
                }
                H = f;
                J = l[H];
                k = l[(H + 1) % k];
                if (1E-5 > g) a.pointCount = 1, a.type = h.b2ManifoldType.e_faceA,
                    a.localNormal.Copy(b[f]), r.MidVV(J, k, a.localPoint);
                else if (f = r.DotVV(r.SubVV(c, J, r.s_t0), r.SubVV(k, J, r.s_t1)), g = r.DotVV(r.SubVV(c, k, r.s_t0), r.SubVV(J, k, r.s_t1)), 0 >= f) {
                    if (r.DistanceSquaredVV(c, J) > e * e) return;
                    a.pointCount = 1;
                    a.type = h.b2ManifoldType.e_faceA;
                    r.SubVV(c, J, a.localNormal).SelfNormalize();
                    a.localPoint.Copy(J)
                } else if (0 >= g) {
                    if (r.DistanceSquaredVV(c, k) > e * e) return;
                    a.pointCount = 1;
                    a.type = h.b2ManifoldType.e_faceA;
                    r.SubVV(c, k, a.localNormal).SelfNormalize();
                    a.localPoint.Copy(k)
                } else {
                    f = r.MidVV(J, k, $c);
                    if (r.DotVV(r.SubVV(c, f, r.s_t1), b[H]) > e) return;
                    a.pointCount = 1;
                    a.type = h.b2ManifoldType.e_faceA;
                    a.localNormal.Copy(b[H]).SelfNormalize();
                    a.localPoint.Copy(f)
                }
                a.points[0].localPoint.Copy(d.m_p);
                a.points[0].id.key = 0
            }

            function E(a, b, c, d, e) {
                var f = a.m_vertices,
                    h = d.m_count;
                d = d.m_vertices;
                a = P.MulRV(b.q, a.m_normals[c], ad);
                for (var g = P.MulTRV(e.q, a, bd), k = 0, l = 1E37, H = 0; H < h; ++H) {
                    var J = r.DotVV(d[H], g);
                    J < l && (l = J, k = H)
                }
                b = U.MulXV(b, f[c], cd);
                e = U.MulXV(e, d[k], dd);
                return r.DotVV(r.SubVV(e, b, r.s_t0), a)
            }

            function w(a, b, c, d,
                e) {
                var f = b.m_count,
                    h = b.m_normals,
                    g = r.SubVV(U.MulXV(e, d.m_centroid, r.s_t0), U.MulXV(c, b.m_centroid, r.s_t1), ed),
                    k = P.MulTRV(c.q, g, fd);
                g = 0;
                for (var l = -1E37, H = 0; H < f; ++H) {
                    var J = r.DotVV(h[H], k);
                    J > l && (l = J, g = H)
                }
                h = E(b, c, g, d, e);
                J = (g + f - 1) % f;
                l = E(b, c, J, d, e);
                var qa = (g + 1) % f;
                H = E(b, c, qa, d, e);
                if (l > h && l > H) k = -1;
                else {
                    if (!(H > h)) return a[0] = g, h;
                    k = 1;
                    J = qa;
                    l = H
                }
                for (;;) {
                    g = -1 === k ? (J + f - 1) % f : (J + 1) % f;
                    h = E(b, c, g, d, e);
                    if (!(h > l)) break;
                    J = g;
                    l = h
                }
                a[0] = J;
                return l
            }

            function A(a, b, c, d, e) {
                a.pointCount = 0;
                var f = b.m_radius + d.m_radius,
                    g = gd;
                g[0] = 0;
                var k = w(g, b, c, d, e);
                if (!(k > f)) {
                    var l = hd;
                    l[0] = 0;
                    var H = w(l, d, e, b, c);
                    if (!(H > f)) {
                        if (H > .98 * k + .001) {
                            k = d;
                            var J = b;
                            b = e;
                            e = l[0];
                            a.type = h.b2ManifoldType.e_faceB;
                            g = 1
                        } else k = b, J = d, b = c, c = e, e = g[0], a.type = h.b2ManifoldType.e_faceA, g = 0;
                        l = id;
                        d = e;
                        H = c;
                        var qa = J.m_count,
                            n = J.m_vertices;
                        J = J.m_normals;
                        for (var aa = P.MulTRV(H.q, P.MulRV(b.q, k.m_normals[d], r.s_t0), jd), p = 0, lb = 1E37, q = 0; q < qa; ++q) {
                            var t = r.DotVV(aa, J[q]);
                            t < lb && (lb = t, p = q)
                        }
                        J = p;
                        qa = (J + 1) % qa;
                        aa = l[0];
                        U.MulXV(H, n[J], aa.v);
                        aa = aa.id.cf;
                        aa.indexA = d;
                        aa.indexB = J;
                        aa.typeA = h.b2ContactFeatureType.e_face;
                        aa.typeB = h.b2ContactFeatureType.e_vertex;
                        J = l[1];
                        U.MulXV(H, n[qa], J.v);
                        H = J.id.cf;
                        H.indexA = d;
                        H.indexB = qa;
                        H.typeA = h.b2ContactFeatureType.e_face;
                        H.typeB = h.b2ContactFeatureType.e_vertex;
                        H = k.m_vertices;
                        d = e;
                        e = (e + 1) % k.m_count;
                        J = H[d];
                        aa = H[e];
                        k = r.SubVV(aa, J, kd);
                        k.Normalize();
                        H = r.CrossVOne(k, ld);
                        n = r.MidVV(J, aa, md);
                        qa = P.MulRV(b.q, k, nd);
                        k = r.CrossVOne(qa, od);
                        J = U.MulXV(b, J, pd);
                        p = U.MulXV(b, aa, qd);
                        b = r.DotVV(k, J);
                        aa = -r.DotVV(qa, J) + f;
                        p = r.DotVV(qa, p) + f;
                        lb = rd;
                        J = sd;
                        q = r.NegV(qa, td);
                        l = m(lb, l, q, aa, d);
                        if (!(2 > l || (l = m(J, lb, qa,
                                p, e), 2 > l))) {
                            a.localNormal.Copy(H);
                            a.localPoint.Copy(n);
                            for (e = l = 0; 2 > e; ++e) H = J[e], r.DotVV(k, H.v) - b <= f && (d = a.points[l], U.MulTXV(c, H.v, d.localPoint), d.id.Copy(H.id), g && (H = d.id.cf, d.id.cf.indexA = H.indexB, d.id.cf.indexB = H.indexA, d.id.cf.typeA = H.typeB, d.id.cf.typeB = H.typeA), ++l);
                            a.pointCount = l
                        }
                    }
                }
            }

            function B(a, b, c, d, e) {
                a.pointCount = 0;
                c = U.MulTXV(c, U.MulXV(e, d.m_p, r.s_t0), ud);
                var f = b.m_vertex1,
                    g = b.m_vertex2,
                    k = r.SubVV(g, f, vd),
                    l = r.DotVV(k, r.SubVV(g, c, r.s_t0)),
                    H = r.DotVV(k, r.SubVV(c, f, r.s_t0)),
                    J = b.m_radius + d.m_radius;
                e = wd;
                e.cf.indexB = 0;
                e.cf.typeB = h.b2ContactFeatureType.e_vertex;
                if (0 >= H) {
                    if (g = r.SubVV(c, f, Fb), !(r.DotVV(g, g) > J * J)) {
                        if (b.m_hasVertex0 && (J = r.SubVV(f, b.m_vertex0, xd), 0 < r.DotVV(J, r.SubVV(f, c, r.s_t0)))) return;
                        e.cf.indexA = 0;
                        e.cf.typeA = h.b2ContactFeatureType.e_vertex;
                        a.pointCount = 1;
                        a.type = h.b2ManifoldType.e_circles;
                        a.localNormal.SetZero();
                        a.localPoint.Copy(f);
                        a.points[0].id.Copy(e);
                        a.points[0].localPoint.Copy(d.m_p)
                    }
                } else if (0 >= l) {
                    if (f = r.SubVV(c, g, Fb), !(r.DotVV(f, f) > J * J)) {
                        if (b.m_hasVertex3 && (f = r.SubVV(b.m_vertex3,
                                g, yd), 0 < r.DotVV(f, r.SubVV(c, g, r.s_t0)))) return;
                        e.cf.indexA = 1;
                        e.cf.typeA = h.b2ContactFeatureType.e_vertex;
                        a.pointCount = 1;
                        a.type = h.b2ManifoldType.e_circles;
                        a.localNormal.SetZero();
                        a.localPoint.Copy(g);
                        a.points[0].id.Copy(e);
                        a.points[0].localPoint.Copy(d.m_p)
                    }
                } else {
                    b = r.DotVV(k, k);
                    var qa = zd;
                    qa.x = 1 / b * (l * f.x + H * g.x);
                    qa.y = 1 / b * (l * f.y + H * g.y);
                    b = r.SubVV(c, qa, Fb);
                    r.DotVV(b, b) > J * J || (J = Ad.Set(-k.y, k.x), 0 > r.DotVV(J, r.SubVV(c, f, r.s_t0)) && J.Set(-J.x, -J.y), J.Normalize(), e.cf.indexA = 0, e.cf.typeA = h.b2ContactFeatureType.e_face,
                        a.pointCount = 1, a.type = h.b2ManifoldType.e_faceA, a.localNormal.Copy(J), a.localPoint.Copy(f), a.points[0].id.Copy(e), a.points[0].localPoint.Copy(d.m_p))
                }
            }

            function y(a, b, c, d, e) {
                Bd.Collide(a, b, c, d, e)
            }

            function C(a, b) {
                function c() {
                    this.constructor = a
                }
                Cd(a, b);
                a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c)
            }

            function F(a, b) {
                return a > b ? a : b
            }

            function G(a, b, d) {
                return c(Math.ceil(Math.sqrt(a / (.01 * b)) * d), 1, 8)
            }

            function D(a, b, c) {
                var d = a[b];
                a[b] = a[c];
                a[c] = d
            }

            function I(a, b) {
                return a < b
            }

            function K(a,
                b, c, d) {
                void 0 === b && (b = 0);
                void 0 === c && (c = a.length - b);
                void 0 === d && (d = I);
                for (var e = [], f = 0;;) {
                    for (; b + 1 < c; c++) {
                        var h = a[b + Math.floor(Math.random() * (c - b))];
                        e[f++] = c;
                        for (var g = b - 1;;) {
                            for (; d(a[++g], h););
                            for (; d(h, a[--c]););
                            if (g >= c) break;
                            D(a, g, c)
                        }
                    }
                    if (0 === f) break;
                    b = c;
                    c = e[--f]
                }
                return a
            }

            function L(a, b, c, d) {
                void 0 === b && (b = 0);
                void 0 === c && (c = a.length - b);
                void 0 === d && (d = I);
                return K(a, b, c, d)
            }

            function R(a, b, c) {
                void 0 === c && (c = a.length);
                for (var d = 0, e = 0; e < c; ++e) b(a[e]) || (e === d ? ++d : D(a, d++, e));
                return d
            }

            function M(a, b, c, d,
                e) {
                void 0 === e && (e = I);
                for (c -= b; 0 < c;) {
                    var f = Math.floor(c / 2),
                        h = b + f;
                    e(a[h], d) ? (b = ++h, c -= f + 1) : c = f
                }
                return b
            }

            function S(a, b, c, d, e) {
                void 0 === e && (e = I);
                for (c -= b; 0 < c;) {
                    var f = Math.floor(c / 2),
                        h = b + f;
                    e(d, a[h]) ? c = f : (b = ++h, c -= f + 1)
                }
                return b
            }

            function O(a, b, c, d) {
                for (var e = c; b !== e;) D(a, b++, e++), e === d ? e = c : b === c && (c = e)
            }
            var Q = 1E-5 * 1E-5,
                V = 2 / 180 * 3.14159265359,
                ba = 8 / 180 * 3.14159265359,
                da = 2 / 180 * 3.14159265359,
                T = function() {
                    function a(a, b, c) {
                        void 0 === a && (a = 0);
                        void 0 === b && (b = 0);
                        void 0 === c && (c = 0);
                        this.revision = this.minor = this.major =
                            0;
                        this.major = a;
                        this.minor = b;
                        this.revision = c
                    }
                    a.prototype.toString = function() {
                        return this.major + "." + this.minor + "." + this.revision
                    };
                    return a
                }(),
                N = new T(2, 3, 2),
                fa = 3.14159265359 / 180,
                Z = Math.abs,
                W = Math.min,
                X = Math.max,
                la = isFinite,
                ea = Math.sqrt,
                ja = Math.pow,
                oa = Math.cos,
                sa = Math.sin,
                ia = Math.acos,
                ca = Math.asin,
                ra = Math.atan2,
                r = function() {
                    function a(a, b) {
                        void 0 === a && (a = 0);
                        void 0 === b && (b = 0);
                        this.x = a;
                        this.y = b
                    }
                    a.prototype.Clone = function() {
                        return new a(this.x, this.y)
                    };
                    a.prototype.SetZero = function() {
                        this.y = this.x = 0;
                        return this
                    };
                    a.prototype.Set = function(a, b) {
                        this.x = a;
                        this.y = b;
                        return this
                    };
                    a.prototype.Copy = function(a) {
                        this.x = a.x;
                        this.y = a.y;
                        return this
                    };
                    a.prototype.SelfAdd = function(a) {
                        this.x += a.x;
                        this.y += a.y;
                        return this
                    };
                    a.prototype.SelfAddXY = function(a, b) {
                        this.x += a;
                        this.y += b;
                        return this
                    };
                    a.prototype.SelfSub = function(a) {
                        this.x -= a.x;
                        this.y -= a.y;
                        return this
                    };
                    a.prototype.SelfSubXY = function(a, b) {
                        this.x -= a;
                        this.y -= b;
                        return this
                    };
                    a.prototype.SelfMul = function(a) {
                        this.x *= a;
                        this.y *= a;
                        return this
                    };
                    a.prototype.SelfMulAdd = function(a, b) {
                        this.x +=
                            a * b.x;
                        this.y += a * b.y;
                        return this
                    };
                    a.prototype.SelfMulSub = function(a, b) {
                        this.x -= a * b.x;
                        this.y -= a * b.y;
                        return this
                    };
                    a.prototype.Dot = function(a) {
                        return this.x * a.x + this.y * a.y
                    };
                    a.prototype.Cross = function(a) {
                        return this.x * a.y - this.y * a.x
                    };
                    a.prototype.Length = function() {
                        var a = this.x,
                            b = this.y;
                        return Math.sqrt(a * a + b * b)
                    };
                    a.prototype.LengthSquared = function() {
                        var a = this.x,
                            b = this.y;
                        return a * a + b * b
                    };
                    a.prototype.Normalize = function() {
                        var a = this.Length();
                        if (1E-5 <= a) {
                            var b = 1 / a;
                            this.x *= b;
                            this.y *= b
                        }
                        return a
                    };
                    a.prototype.SelfNormalize =
                        function() {
                            var a = this.Length();
                            1E-5 <= a && (a = 1 / a, this.x *= a, this.y *= a);
                            return this
                        };
                    a.prototype.SelfRotate = function(a) {
                        var b = Math.cos(a);
                        a = Math.sin(a);
                        var c = this.x;
                        this.x = b * c - a * this.y;
                        this.y = a * c + b * this.y;
                        return this
                    };
                    a.prototype.IsValid = function() {
                        return isFinite(this.x) && isFinite(this.y)
                    };
                    a.prototype.SelfCrossVS = function(a) {
                        var b = this.x;
                        this.x = a * this.y;
                        this.y = -a * b;
                        return this
                    };
                    a.prototype.SelfCrossSV = function(a) {
                        var b = this.x;
                        this.x = -a * this.y;
                        this.y = a * b;
                        return this
                    };
                    a.prototype.SelfMinV = function(a) {
                        this.x =
                            W(this.x, a.x);
                        this.y = W(this.y, a.y);
                        return this
                    };
                    a.prototype.SelfMaxV = function(a) {
                        this.x = X(this.x, a.x);
                        this.y = X(this.y, a.y);
                        return this
                    };
                    a.prototype.SelfAbs = function() {
                        this.x = Z(this.x);
                        this.y = Z(this.y);
                        return this
                    };
                    a.prototype.SelfNeg = function() {
                        this.x = -this.x;
                        this.y = -this.y;
                        return this
                    };
                    a.prototype.SelfSkew = function() {
                        var a = this.x;
                        this.x = -this.y;
                        this.y = a;
                        return this
                    };
                    a.MakeArray = function(b) {
                        return d(b, function(b) {
                            return new a
                        })
                    };
                    a.AbsV = function(a, b) {
                        b.x = Z(a.x);
                        b.y = Z(a.y);
                        return b
                    };
                    a.MinV = function(a,
                        b, c) {
                        c.x = W(a.x, b.x);
                        c.y = W(a.y, b.y);
                        return c
                    };
                    a.MaxV = function(a, b, c) {
                        c.x = X(a.x, b.x);
                        c.y = X(a.y, b.y);
                        return c
                    };
                    a.ClampV = function(a, b, d, e) {
                        e.x = c(a.x, b.x, d.x);
                        e.y = c(a.y, b.y, d.y);
                        return e
                    };
                    a.RotateV = function(a, b, c) {
                        var d = a.x;
                        a = a.y;
                        var e = Math.cos(b);
                        b = Math.sin(b);
                        c.x = e * d - b * a;
                        c.y = b * d + e * a;
                        return c
                    };
                    a.DotVV = function(a, b) {
                        return a.x * b.x + a.y * b.y
                    };
                    a.CrossVV = function(a, b) {
                        return a.x * b.y - a.y * b.x
                    };
                    a.CrossVS = function(a, b, c) {
                        var d = a.x;
                        c.x = b * a.y;
                        c.y = -b * d;
                        return c
                    };
                    a.CrossVOne = function(a, b) {
                        var c = a.x;
                        b.x = a.y;
                        b.y = -c;
                        return b
                    };
                    a.CrossSV = function(a, b, c) {
                        var d = b.x;
                        c.x = -a * b.y;
                        c.y = a * d;
                        return c
                    };
                    a.CrossOneV = function(a, b) {
                        var c = a.x;
                        b.x = -a.y;
                        b.y = c;
                        return b
                    };
                    a.AddVV = function(a, b, c) {
                        c.x = a.x + b.x;
                        c.y = a.y + b.y;
                        return c
                    };
                    a.SubVV = function(a, b, c) {
                        c.x = a.x - b.x;
                        c.y = a.y - b.y;
                        return c
                    };
                    a.MulSV = function(a, b, c) {
                        c.x = b.x * a;
                        c.y = b.y * a;
                        return c
                    };
                    a.MulVS = function(a, b, c) {
                        c.x = a.x * b;
                        c.y = a.y * b;
                        return c
                    };
                    a.AddVMulSV = function(a, b, c, d) {
                        d.x = a.x + b * c.x;
                        d.y = a.y + b * c.y;
                        return d
                    };
                    a.SubVMulSV = function(a, b, c, d) {
                        d.x = a.x - b * c.x;
                        d.y = a.y - b * c.y;
                        return d
                    };
                    a.AddVCrossSV =
                        function(a, b, c, d) {
                            var e = c.x;
                            d.x = a.x - b * c.y;
                            d.y = a.y + b * e;
                            return d
                        };
                    a.MidVV = function(a, b, c) {
                        c.x = .5 * (a.x + b.x);
                        c.y = .5 * (a.y + b.y);
                        return c
                    };
                    a.ExtVV = function(a, b, c) {
                        c.x = .5 * (b.x - a.x);
                        c.y = .5 * (b.y - a.y);
                        return c
                    };
                    a.IsEqualToV = function(a, b) {
                        return a.x === b.x && a.y === b.y
                    };
                    a.DistanceVV = function(a, b) {
                        var c = a.x - b.x;
                        a = a.y - b.y;
                        return Math.sqrt(c * c + a * a)
                    };
                    a.DistanceSquaredVV = function(a, b) {
                        var c = a.x - b.x;
                        a = a.y - b.y;
                        return c * c + a * a
                    };
                    a.NegV = function(a, b) {
                        b.x = -a.x;
                        b.y = -a.y;
                        return b
                    };
                    a.ZERO = new a(0, 0);
                    a.UNITX = new a(1, 0);
                    a.UNITY =
                        new a(0, 1);
                    a.s_t0 = new a;
                    a.s_t1 = new a;
                    a.s_t2 = new a;
                    a.s_t3 = new a;
                    return a
                }(),
                Ca = new r(0, 0),
                na = function() {
                    function a(a, b, c) {
                        void 0 === a && (a = 0);
                        void 0 === b && (b = 0);
                        void 0 === c && (c = 0);
                        this.x = a;
                        this.y = b;
                        this.z = c
                    }
                    a.prototype.Clone = function() {
                        return new a(this.x, this.y, this.z)
                    };
                    a.prototype.SetZero = function() {
                        this.z = this.y = this.x = 0;
                        return this
                    };
                    a.prototype.SetXYZ = function(a, b, c) {
                        this.x = a;
                        this.y = b;
                        this.z = c;
                        return this
                    };
                    a.prototype.Copy = function(a) {
                        this.x = a.x;
                        this.y = a.y;
                        this.z = a.z;
                        return this
                    };
                    a.prototype.SelfNeg =
                        function() {
                            this.x = -this.x;
                            this.y = -this.y;
                            this.z = -this.z;
                            return this
                        };
                    a.prototype.SelfAdd = function(a) {
                        this.x += a.x;
                        this.y += a.y;
                        this.z += a.z;
                        return this
                    };
                    a.prototype.SelfAddXYZ = function(a, b, c) {
                        this.x += a;
                        this.y += b;
                        this.z += c;
                        return this
                    };
                    a.prototype.SelfSub = function(a) {
                        this.x -= a.x;
                        this.y -= a.y;
                        this.z -= a.z;
                        return this
                    };
                    a.prototype.SelfSubXYZ = function(a, b, c) {
                        this.x -= a;
                        this.y -= b;
                        this.z -= c;
                        return this
                    };
                    a.prototype.SelfMul = function(a) {
                        this.x *= a;
                        this.y *= a;
                        this.z *= a;
                        return this
                    };
                    a.DotV3V3 = function(a, b) {
                        return a.x *
                            b.x + a.y * b.y + a.z * b.z
                    };
                    a.CrossV3V3 = function(a, b, c) {
                        var d = a.x,
                            e = a.y;
                        a = a.z;
                        var f = b.x,
                            h = b.y;
                        b = b.z;
                        c.x = e * b - a * h;
                        c.y = a * f - d * b;
                        c.z = d * h - e * f;
                        return c
                    };
                    a.ZERO = new a(0, 0, 0);
                    a.s_t0 = new a;
                    return a
                }(),
                ka = function() {
                    function a() {
                        this.ex = new r(1, 0);
                        this.ey = new r(0, 1)
                    }
                    a.prototype.Clone = function() {
                        return (new a).Copy(this)
                    };
                    a.FromVV = function(b, c) {
                        return (new a).SetVV(b, c)
                    };
                    a.FromSSSS = function(b, c, d, e) {
                        return (new a).SetSSSS(b, c, d, e)
                    };
                    a.FromAngle = function(b) {
                        return (new a).SetAngle(b)
                    };
                    a.prototype.SetSSSS = function(a, b, c, d) {
                        this.ex.Set(a,
                            c);
                        this.ey.Set(b, d);
                        return this
                    };
                    a.prototype.SetVV = function(a, b) {
                        this.ex.Copy(a);
                        this.ey.Copy(b);
                        return this
                    };
                    a.prototype.SetAngle = function(a) {
                        var b = Math.cos(a);
                        a = Math.sin(a);
                        this.ex.Set(b, a);
                        this.ey.Set(-a, b);
                        return this
                    };
                    a.prototype.Copy = function(a) {
                        this.ex.Copy(a.ex);
                        this.ey.Copy(a.ey);
                        return this
                    };
                    a.prototype.SetIdentity = function() {
                        this.ex.Set(1, 0);
                        this.ey.Set(0, 1);
                        return this
                    };
                    a.prototype.SetZero = function() {
                        this.ex.SetZero();
                        this.ey.SetZero();
                        return this
                    };
                    a.prototype.GetAngle = function() {
                        return Math.atan2(this.ex.y,
                            this.ex.x)
                    };
                    a.prototype.GetInverse = function(a) {
                        var b = this.ex.x,
                            c = this.ey.x,
                            d = this.ex.y,
                            e = this.ey.y,
                            f = b * e - c * d;
                        0 !== f && (f = 1 / f);
                        a.ex.x = f * e;
                        a.ey.x = -f * c;
                        a.ex.y = -f * d;
                        a.ey.y = f * b;
                        return a
                    };
                    a.prototype.Solve = function(a, b, c) {
                        var d = this.ex.x,
                            e = this.ey.x,
                            f = this.ex.y,
                            h = this.ey.y,
                            g = d * h - e * f;
                        0 !== g && (g = 1 / g);
                        c.x = g * (h * a - e * b);
                        c.y = g * (d * b - f * a);
                        return c
                    };
                    a.prototype.SelfAbs = function() {
                        this.ex.SelfAbs();
                        this.ey.SelfAbs();
                        return this
                    };
                    a.prototype.SelfInv = function() {
                        this.GetInverse(this);
                        return this
                    };
                    a.prototype.SelfAddM = function(a) {
                        this.ex.SelfAdd(a.ex);
                        this.ey.SelfAdd(a.ey);
                        return this
                    };
                    a.prototype.SelfSubM = function(a) {
                        this.ex.SelfSub(a.ex);
                        this.ey.SelfSub(a.ey);
                        return this
                    };
                    a.AbsM = function(a, b) {
                        var c = a.ex;
                        a = a.ey;
                        b.ex.x = Z(c.x);
                        b.ex.y = Z(c.y);
                        b.ey.x = Z(a.x);
                        b.ey.y = Z(a.y);
                        return b
                    };
                    a.MulMV = function(a, b, c) {
                        var d = a.ex;
                        a = a.ey;
                        var e = b.x;
                        b = b.y;
                        c.x = d.x * e + a.x * b;
                        c.y = d.y * e + a.y * b;
                        return c
                    };
                    a.MulTMV = function(a, b, c) {
                        var d = a.ex;
                        a = a.ey;
                        var e = b.x;
                        b = b.y;
                        c.x = d.x * e + d.y * b;
                        c.y = a.x * e + a.y * b;
                        return c
                    };
                    a.AddMM = function(a, b, c) {
                        var d = a.ex;
                        a = a.ey;
                        var e = b.ex;
                        b = b.ey;
                        c.ex.x = d.x +
                            e.x;
                        c.ex.y = d.y + e.y;
                        c.ey.x = a.x + b.x;
                        c.ey.y = a.y + b.y;
                        return c
                    };
                    a.MulMM = function(a, b, c) {
                        var d = a.ex.x,
                            e = a.ex.y,
                            f = a.ey.x;
                        a = a.ey.y;
                        var h = b.ex.x,
                            g = b.ex.y,
                            k = b.ey.x;
                        b = b.ey.y;
                        c.ex.x = d * h + f * g;
                        c.ex.y = e * h + a * g;
                        c.ey.x = d * k + f * b;
                        c.ey.y = e * k + a * b;
                        return c
                    };
                    a.MulTMM = function(a, b, c) {
                        var d = a.ex.x,
                            e = a.ex.y,
                            f = a.ey.x;
                        a = a.ey.y;
                        var h = b.ex.x,
                            g = b.ex.y,
                            k = b.ey.x;
                        b = b.ey.y;
                        c.ex.x = d * h + e * g;
                        c.ex.y = f * h + a * g;
                        c.ey.x = d * k + e * b;
                        c.ey.y = f * k + a * b;
                        return c
                    };
                    a.IDENTITY = new a;
                    return a
                }(),
                xa = function() {
                    function a() {
                        this.ex = new na(1, 0, 0);
                        this.ey = new na(0,
                            1, 0);
                        this.ez = new na(0, 0, 1)
                    }
                    a.prototype.Clone = function() {
                        return (new a).Copy(this)
                    };
                    a.prototype.SetVVV = function(a, b, c) {
                        this.ex.Copy(a);
                        this.ey.Copy(b);
                        this.ez.Copy(c);
                        return this
                    };
                    a.prototype.Copy = function(a) {
                        this.ex.Copy(a.ex);
                        this.ey.Copy(a.ey);
                        this.ez.Copy(a.ez);
                        return this
                    };
                    a.prototype.SetIdentity = function() {
                        this.ex.SetXYZ(1, 0, 0);
                        this.ey.SetXYZ(0, 1, 0);
                        this.ez.SetXYZ(0, 0, 1);
                        return this
                    };
                    a.prototype.SetZero = function() {
                        this.ex.SetZero();
                        this.ey.SetZero();
                        this.ez.SetZero();
                        return this
                    };
                    a.prototype.SelfAddM =
                        function(a) {
                            this.ex.SelfAdd(a.ex);
                            this.ey.SelfAdd(a.ey);
                            this.ez.SelfAdd(a.ez);
                            return this
                        };
                    a.prototype.Solve33 = function(a, b, c, d) {
                        var e = this.ex.x,
                            f = this.ex.y,
                            h = this.ex.z,
                            g = this.ey.x,
                            k = this.ey.y,
                            l = this.ey.z,
                            H = this.ez.x,
                            J = this.ez.y,
                            m = this.ez.z,
                            qa = e * (k * m - l * J) + f * (l * H - g * m) + h * (g * J - k * H);
                        0 !== qa && (qa = 1 / qa);
                        d.x = qa * (a * (k * m - l * J) + b * (l * H - g * m) + c * (g * J - k * H));
                        d.y = qa * (e * (b * m - c * J) + f * (c * H - a * m) + h * (a * J - b * H));
                        d.z = qa * (e * (k * c - l * b) + f * (l * a - g * c) + h * (g * b - k * a));
                        return d
                    };
                    a.prototype.Solve22 = function(a, b, c) {
                        var d = this.ex.x,
                            e = this.ey.x,
                            f = this.ex.y,
                            h = this.ey.y,
                            g = d * h - e * f;
                        0 !== g && (g = 1 / g);
                        c.x = g * (h * a - e * b);
                        c.y = g * (d * b - f * a);
                        return c
                    };
                    a.prototype.GetInverse22 = function(a) {
                        var b = this.ex.x,
                            c = this.ey.x,
                            d = this.ex.y,
                            e = this.ey.y,
                            f = b * e - c * d;
                        0 !== f && (f = 1 / f);
                        a.ex.x = f * e;
                        a.ey.x = -f * c;
                        a.ex.z = 0;
                        a.ex.y = -f * d;
                        a.ey.y = f * b;
                        a.ey.z = 0;
                        a.ez.x = 0;
                        a.ez.y = 0;
                        a.ez.z = 0
                    };
                    a.prototype.GetSymInverse33 = function(a) {
                        var b = na.DotV3V3(this.ex, na.CrossV3V3(this.ey, this.ez, na.s_t0));
                        0 !== b && (b = 1 / b);
                        var c = this.ex.x,
                            d = this.ey.x,
                            e = this.ez.x,
                            f = this.ey.y,
                            h = this.ez.y,
                            g = this.ez.z;
                        a.ex.x = b *
                            (f * g - h * h);
                        a.ex.y = b * (e * h - d * g);
                        a.ex.z = b * (d * h - e * f);
                        a.ey.x = a.ex.y;
                        a.ey.y = b * (c * g - e * e);
                        a.ey.z = b * (e * d - c * h);
                        a.ez.x = a.ex.z;
                        a.ez.y = a.ey.z;
                        a.ez.z = b * (c * f - d * d)
                    };
                    a.MulM33V3 = function(a, b, c) {
                        var d = b.x,
                            e = b.y;
                        b = b.z;
                        c.x = a.ex.x * d + a.ey.x * e + a.ez.x * b;
                        c.y = a.ex.y * d + a.ey.y * e + a.ez.y * b;
                        c.z = a.ex.z * d + a.ey.z * e + a.ez.z * b;
                        return c
                    };
                    a.MulM33XYZ = function(a, b, c, d, e) {
                        e.x = a.ex.x * b + a.ey.x * c + a.ez.x * d;
                        e.y = a.ex.y * b + a.ey.y * c + a.ez.y * d;
                        e.z = a.ex.z * b + a.ey.z * c + a.ez.z * d;
                        return e
                    };
                    a.MulM33V2 = function(a, b, c) {
                        var d = b.x;
                        b = b.y;
                        c.x = a.ex.x * d + a.ey.x * b;
                        c.y =
                            a.ex.y * d + a.ey.y * b;
                        return c
                    };
                    a.MulM33XY = function(a, b, c, d) {
                        d.x = a.ex.x * b + a.ey.x * c;
                        d.y = a.ex.y * b + a.ey.y * c;
                        return d
                    };
                    a.IDENTITY = new a;
                    return a
                }(),
                P = function() {
                    function a(a) {
                        void 0 === a && (a = 0);
                        this.s = 0;
                        this.c = 1;
                        a && (this.s = Math.sin(a), this.c = Math.cos(a))
                    }
                    a.prototype.Clone = function() {
                        return (new a).Copy(this)
                    };
                    a.prototype.Copy = function(a) {
                        this.s = a.s;
                        this.c = a.c;
                        return this
                    };
                    a.prototype.SetAngle = function(a) {
                        this.s = Math.sin(a);
                        this.c = Math.cos(a);
                        return this
                    };
                    a.prototype.SetIdentity = function() {
                        this.s = 0;
                        this.c = 1;
                        return this
                    };
                    a.prototype.GetAngle = function() {
                        return Math.atan2(this.s, this.c)
                    };
                    a.prototype.GetXAxis = function(a) {
                        a.x = this.c;
                        a.y = this.s;
                        return a
                    };
                    a.prototype.GetYAxis = function(a) {
                        a.x = -this.s;
                        a.y = this.c;
                        return a
                    };
                    a.MulRR = function(a, b, c) {
                        var d = a.c;
                        a = a.s;
                        var e = b.c;
                        b = b.s;
                        c.s = a * e + d * b;
                        c.c = d * e - a * b;
                        return c
                    };
                    a.MulTRR = function(a, b, c) {
                        var d = a.c;
                        a = a.s;
                        var e = b.c;
                        b = b.s;
                        c.s = d * b - a * e;
                        c.c = d * e + a * b;
                        return c
                    };
                    a.MulRV = function(a, b, c) {
                        var d = a.c;
                        a = a.s;
                        var e = b.x;
                        b = b.y;
                        c.x = d * e - a * b;
                        c.y = a * e + d * b;
                        return c
                    };
                    a.MulTRV = function(a,
                        b, c) {
                        var d = a.c;
                        a = a.s;
                        var e = b.x;
                        b = b.y;
                        c.x = d * e + a * b;
                        c.y = -a * e + d * b;
                        return c
                    };
                    a.IDENTITY = new a;
                    return a
                }(),
                U = function() {
                    function a() {
                        this.p = new r;
                        this.q = new P
                    }
                    a.prototype.Clone = function() {
                        return (new a).Copy(this)
                    };
                    a.prototype.Copy = function(a) {
                        this.p.Copy(a.p);
                        this.q.Copy(a.q);
                        return this
                    };
                    a.prototype.SetIdentity = function() {
                        this.p.SetZero();
                        this.q.SetIdentity();
                        return this
                    };
                    a.prototype.SetPositionRotation = function(a, b) {
                        this.p.Copy(a);
                        this.q.Copy(b);
                        return this
                    };
                    a.prototype.SetPositionAngle = function(a, b) {
                        this.p.Copy(a);
                        this.q.SetAngle(b);
                        return this
                    };
                    a.prototype.SetPosition = function(a) {
                        this.p.Copy(a);
                        return this
                    };
                    a.prototype.SetPositionXY = function(a, b) {
                        this.p.Set(a, b);
                        return this
                    };
                    a.prototype.SetRotation = function(a) {
                        this.q.Copy(a);
                        return this
                    };
                    a.prototype.SetRotationAngle = function(a) {
                        this.q.SetAngle(a);
                        return this
                    };
                    a.prototype.GetPosition = function() {
                        return this.p
                    };
                    a.prototype.GetRotation = function() {
                        return this.q
                    };
                    a.prototype.GetRotationAngle = function() {
                        return this.q.GetAngle()
                    };
                    a.prototype.GetAngle = function() {
                        return this.q.GetAngle()
                    };
                    a.MulXV = function(a, b, c) {
                        var d = a.q.c,
                            e = a.q.s,
                            f = b.x;
                        b = b.y;
                        c.x = d * f - e * b + a.p.x;
                        c.y = e * f + d * b + a.p.y;
                        return c
                    };
                    a.MulTXV = function(a, b, c) {
                        var d = a.q.c,
                            e = a.q.s,
                            f = b.x - a.p.x;
                        a = b.y - a.p.y;
                        c.x = d * f + e * a;
                        c.y = -e * f + d * a;
                        return c
                    };
                    a.MulXX = function(a, b, c) {
                        P.MulRR(a.q, b.q, c.q);
                        r.AddVV(P.MulRV(a.q, b.p, c.p), a.p, c.p);
                        return c
                    };
                    a.MulTXX = function(a, b, c) {
                        P.MulTRR(a.q, b.q, c.q);
                        P.MulTRV(a.q, r.SubVV(b.p, a.p, c.p), c.p);
                        return c
                    };
                    a.IDENTITY = new a;
                    return a
                }(),
                ua = function() {
                    function a() {
                        this.localCenter = new r;
                        this.c0 = new r;
                        this.c = new r;
                        this.alpha0 = this.a = this.a0 = 0
                    }
                    a.prototype.Clone = function() {
                        return (new a).Copy(this)
                    };
                    a.prototype.Copy = function(a) {
                        this.localCenter.Copy(a.localCenter);
                        this.c0.Copy(a.c0);
                        this.c.Copy(a.c);
                        this.a0 = a.a0;
                        this.a = a.a;
                        this.alpha0 = a.alpha0;
                        return this
                    };
                    a.prototype.GetTransform = function(a, b) {
                        var c = 1 - b;
                        a.p.x = c * this.c0.x + b * this.c.x;
                        a.p.y = c * this.c0.y + b * this.c.y;
                        a.q.SetAngle(c * this.a0 + b * this.a);
                        a.p.SelfSub(P.MulRV(a.q, this.localCenter, r.s_t0));
                        return a
                    };
                    a.prototype.Advance = function(a) {
                        var b = (a - this.alpha0) / (1 -
                                this.alpha0),
                            c = 1 - b;
                        this.c0.x = c * this.c0.x + b * this.c.x;
                        this.c0.y = c * this.c0.y + b * this.c.y;
                        this.a0 = c * this.a0 + b * this.a;
                        this.alpha0 = a
                    };
                    a.prototype.Normalize = function() {
                        var a = 6.28318530718 * Math.floor(this.a0 / 6.28318530718);
                        this.a0 -= a;
                        this.a -= a
                    };
                    return a
                }(),
                pa = function() {
                    function a(a, b, c, d) {
                        void 0 === a && (a = .5);
                        void 0 === b && (b = .5);
                        void 0 === c && (c = .5);
                        void 0 === d && (d = 1);
                        this.r = a;
                        this.g = b;
                        this.b = c;
                        this.a = d
                    }
                    a.prototype.Clone = function() {
                        return (new a).Copy(this)
                    };
                    a.prototype.Copy = function(a) {
                        this.r = a.r;
                        this.g = a.g;
                        this.b =
                            a.b;
                        this.a = a.a;
                        return this
                    };
                    a.prototype.IsEqual = function(a) {
                        return this.r === a.r && this.g === a.g && this.b === a.b && this.a === a.a
                    };
                    a.prototype.IsZero = function() {
                        return 0 === this.r && 0 === this.g && 0 === this.b && 0 === this.a
                    };
                    a.prototype.Set = function(a, b, c, d) {
                        void 0 === d && (d = this.a);
                        this.SetRGBA(a, b, c, d)
                    };
                    a.prototype.SetByteRGB = function(a, b, c) {
                        this.r = a / 255;
                        this.g = b / 255;
                        this.b = c / 255;
                        return this
                    };
                    a.prototype.SetByteRGBA = function(a, b, c, d) {
                        this.r = a / 255;
                        this.g = b / 255;
                        this.b = c / 255;
                        this.a = d / 255;
                        return this
                    };
                    a.prototype.SetRGB =
                        function(a, b, c) {
                            this.r = a;
                            this.g = b;
                            this.b = c;
                            return this
                        };
                    a.prototype.SetRGBA = function(a, b, c, d) {
                        this.r = a;
                        this.g = b;
                        this.b = c;
                        this.a = d;
                        return this
                    };
                    a.prototype.SelfAdd = function(a) {
                        this.r += a.r;
                        this.g += a.g;
                        this.b += a.b;
                        this.a += a.a;
                        return this
                    };
                    a.prototype.Add = function(a, b) {
                        b.r = this.r + a.r;
                        b.g = this.g + a.g;
                        b.b = this.b + a.b;
                        b.a = this.a + a.a;
                        return b
                    };
                    a.prototype.SelfSub = function(a) {
                        this.r -= a.r;
                        this.g -= a.g;
                        this.b -= a.b;
                        this.a -= a.a;
                        return this
                    };
                    a.prototype.Sub = function(a, b) {
                        b.r = this.r - a.r;
                        b.g = this.g - a.g;
                        b.b = this.b - a.b;
                        b.a = this.a - a.a;
                        return b
                    };
                    a.prototype.SelfMul = function(a) {
                        this.r *= a;
                        this.g *= a;
                        this.b *= a;
                        this.a *= a;
                        return this
                    };
                    a.prototype.Mul = function(a, b) {
                        b.r = this.r * a;
                        b.g = this.g * a;
                        b.b = this.b * a;
                        b.a = this.a * a;
                        return b
                    };
                    a.prototype.Mix = function(b, c) {
                        a.MixColors(this, b, c)
                    };
                    a.MixColors = function(a, b, c) {
                        var d = c * (b.r - a.r),
                            e = c * (b.g - a.g),
                            f = c * (b.b - a.b);
                        c *= b.a - a.a;
                        a.r += d;
                        a.g += e;
                        a.b += f;
                        a.a += c;
                        b.r -= d;
                        b.g -= e;
                        b.b -= f;
                        b.a -= c
                    };
                    a.prototype.MakeStyleString = function(b) {
                        void 0 === b && (b = this.a);
                        return a.MakeStyleString(this.r, this.g, this.b,
                            b)
                    };
                    a.MakeStyleString = function(a, b, c, d) {
                        void 0 === d && (d = 1);
                        a *= 255;
                        b *= 255;
                        c *= 255;
                        return 1 > d ? "rgba(" + a + "," + b + "," + c + "," + d + ")" : "rgb(" + a + "," + b + "," + c + ")"
                    };
                    a.ZERO = new a(0, 0, 0, 0);
                    a.RED = new a(1, 0, 0);
                    a.GREEN = new a(0, 1, 0);
                    a.BLUE = new a(0, 0, 1);
                    return a
                }();
            (function(a) {
                a[a.e_none = 0] = "e_none";
                a[a.e_shapeBit = 1] = "e_shapeBit";
                a[a.e_jointBit = 2] = "e_jointBit";
                a[a.e_aabbBit = 4] = "e_aabbBit";
                a[a.e_pairBit = 8] = "e_pairBit";
                a[a.e_centerOfMassBit = 16] = "e_centerOfMassBit";
                a[a.e_particleBit = 32] = "e_particleBit";
                a[a.e_controllerBit =
                    64] = "e_controllerBit";
                a[a.e_all = 63] = "e_all"
            })(h.b2DrawFlags || (h.b2DrawFlags = {}));
            var Ha = function() {
                    function a() {
                        this.m_drawFlags = 0
                    }
                    a.prototype.SetFlags = function(a) {
                        this.m_drawFlags = a
                    };
                    a.prototype.GetFlags = function() {
                        return this.m_drawFlags
                    };
                    a.prototype.AppendFlags = function(a) {
                        this.m_drawFlags |= a
                    };
                    a.prototype.ClearFlags = function(a) {
                        this.m_drawFlags &= ~a
                    };
                    return a
                }(),
                za = function() {
                    function a() {
                        this.m_start = Date.now()
                    }
                    a.prototype.Reset = function() {
                        this.m_start = Date.now();
                        return this
                    };
                    a.prototype.GetMilliseconds =
                        function() {
                            return Date.now() - this.m_start
                        };
                    return a
                }(),
                Ia = function() {
                    function a() {
                        this.m_max_count = this.m_min_count = this.m_count = 0
                    }
                    a.prototype.GetCount = function() {
                        return this.m_count
                    };
                    a.prototype.GetMinCount = function() {
                        return this.m_min_count
                    };
                    a.prototype.GetMaxCount = function() {
                        return this.m_max_count
                    };
                    a.prototype.ResetCount = function() {
                        var a = this.m_count;
                        this.m_count = 0;
                        return a
                    };
                    a.prototype.ResetMinCount = function() {
                        this.m_min_count = 0
                    };
                    a.prototype.ResetMaxCount = function() {
                        this.m_max_count = 0
                    };
                    a.prototype.Increment =
                        function() {
                            this.m_count++;
                            this.m_max_count < this.m_count && (this.m_max_count = this.m_count)
                        };
                    a.prototype.Decrement = function() {
                        this.m_count--;
                        this.m_min_count > this.m_count && (this.m_min_count = this.m_count)
                    };
                    return a
                }(),
                Ja = function() {
                    function a(a) {
                        this.m_stack = [];
                        this.m_count = 0;
                        this.m_stack = d(a, function(a) {
                            return null
                        });
                        this.m_count = 0
                    }
                    a.prototype.Reset = function() {
                        this.m_count = 0;
                        return this
                    };
                    a.prototype.Push = function(a) {
                        this.m_stack[this.m_count] = a;
                        this.m_count++
                    };
                    a.prototype.Pop = function() {
                        this.m_count--;
                        var a = this.m_stack[this.m_count];
                        this.m_stack[this.m_count] = null;
                        if (null === a) throw Error();
                        return a
                    };
                    a.prototype.GetCount = function() {
                        return this.m_count
                    };
                    return a
                }(),
                Fa = function() {
                    return function() {}
                }(),
                Sa = function() {
                    return function() {}
                }(),
                ta = function() {
                    function a() {
                        this.m_vertices = this.m_buffer = r.MakeArray(2);
                        this.m_radius = this.m_count = 0
                    }
                    a.prototype.Copy = function(a) {
                        a.m_vertices === a.m_buffer ? (this.m_vertices = this.m_buffer, this.m_buffer[0].Copy(a.m_buffer[0]), this.m_buffer[1].Copy(a.m_buffer[1])) :
                            this.m_vertices = a.m_vertices;
                        this.m_count = a.m_count;
                        this.m_radius = a.m_radius;
                        return this
                    };
                    a.prototype.Reset = function() {
                        this.m_vertices = this.m_buffer;
                        this.m_radius = this.m_count = 0;
                        return this
                    };
                    a.prototype.SetShape = function(a, b) {
                        a.SetupDistanceProxy(this, b)
                    };
                    a.prototype.SetVerticesRadius = function(a, b, c) {
                        this.m_vertices = a;
                        this.m_count = b;
                        this.m_radius = c
                    };
                    a.prototype.GetSupport = function(a) {
                        for (var b = 0, c = r.DotVV(this.m_vertices[0], a), d = 1; d < this.m_count; ++d) {
                            var e = r.DotVV(this.m_vertices[d], a);
                            e > c && (b = d,
                                c = e)
                        }
                        return b
                    };
                    a.prototype.GetSupportVertex = function(a) {
                        for (var b = 0, c = r.DotVV(this.m_vertices[0], a), d = 1; d < this.m_count; ++d) {
                            var e = r.DotVV(this.m_vertices[d], a);
                            e > c && (b = d, c = e)
                        }
                        return this.m_vertices[b]
                    };
                    a.prototype.GetVertexCount = function() {
                        return this.m_count
                    };
                    a.prototype.GetVertex = function(a) {
                        return this.m_vertices[a]
                    };
                    return a
                }(),
                Y = function() {
                    function a() {
                        this.count = this.metric = 0;
                        this.indexA = [0, 0, 0];
                        this.indexB = [0, 0, 0]
                    }
                    a.prototype.Reset = function() {
                        this.count = this.metric = 0;
                        return this
                    };
                    return a
                }(),
                Ma = function() {
                    function a() {
                        this.proxyA = new ta;
                        this.proxyB = new ta;
                        this.transformA = new U;
                        this.transformB = new U;
                        this.useRadii = !1
                    }
                    a.prototype.Reset = function() {
                        this.proxyA.Reset();
                        this.proxyB.Reset();
                        this.transformA.SetIdentity();
                        this.transformB.SetIdentity();
                        this.useRadii = !1;
                        return this
                    };
                    return a
                }(),
                Na = function() {
                    function a() {
                        this.pointA = new r;
                        this.pointB = new r;
                        this.iterations = this.distance = 0
                    }
                    a.prototype.Reset = function() {
                        this.pointA.SetZero();
                        this.pointB.SetZero();
                        this.iterations = this.distance = 0;
                        return this
                    };
                    return a
                }(),
                Ta = function() {
                    return function() {
                        this.proxyA = new ta;
                        this.proxyB = new ta;
                        this.transformA = new U;
                        this.transformB = new U;
                        this.translationB = new r
                    }
                }(),
                wa = function() {
                    return function() {
                        this.point = new r;
                        this.normal = new r;
                        this.iterations = this.lambda = 0
                    }
                }();
            h.b2_gjkCalls = 0;
            h.b2_gjkIters = 0;
            h.b2_gjkMaxIters = 0;
            var ma = function() {
                    function a() {
                        this.wA = new r;
                        this.wB = new r;
                        this.w = new r;
                        this.indexB = this.indexA = this.a = 0
                    }
                    a.prototype.Copy = function(a) {
                        this.wA.Copy(a.wA);
                        this.wB.Copy(a.wB);
                        this.w.Copy(a.w);
                        this.a =
                            a.a;
                        this.indexA = a.indexA;
                        this.indexB = a.indexB;
                        return this
                    };
                    return a
                }(),
                ya = function() {
                    function a() {
                        this.m_v1 = new ma;
                        this.m_v2 = new ma;
                        this.m_v3 = new ma;
                        this.m_vertices = [];
                        this.m_count = 0;
                        this.m_vertices[0] = this.m_v1;
                        this.m_vertices[1] = this.m_v2;
                        this.m_vertices[2] = this.m_v3
                    }
                    a.prototype.ReadCache = function(a, b, c, d, e) {
                        this.m_count = a.count;
                        for (var f = this.m_vertices, h = 0; h < this.m_count; ++h) {
                            var g = f[h];
                            g.indexA = a.indexA[h];
                            g.indexB = a.indexB[h];
                            var k = b.GetVertex(g.indexA);
                            var l = d.GetVertex(g.indexB);
                            U.MulXV(c,
                                k, g.wA);
                            U.MulXV(e, l, g.wB);
                            r.SubVV(g.wB, g.wA, g.w);
                            g.a = 0
                        }
                        1 < this.m_count && (a = a.metric, l = this.GetMetric(), (l < .5 * a || 2 * a < l || 1E-5 > l) && (this.m_count = 0));
                        0 === this.m_count && (g = f[0], g.indexA = 0, g.indexB = 0, k = b.GetVertex(0), l = d.GetVertex(0), U.MulXV(c, k, g.wA), U.MulXV(e, l, g.wB), r.SubVV(g.wB, g.wA, g.w), this.m_count = g.a = 1)
                    };
                    a.prototype.WriteCache = function(a) {
                        a.metric = this.GetMetric();
                        a.count = this.m_count;
                        for (var b = this.m_vertices, c = 0; c < this.m_count; ++c) a.indexA[c] = b[c].indexA, a.indexB[c] = b[c].indexB
                    };
                    a.prototype.GetSearchDirection =
                        function(a) {
                            switch (this.m_count) {
                                case 1:
                                    return r.NegV(this.m_v1.w, a);
                                case 2:
                                    var b = r.SubVV(this.m_v2.w, this.m_v1.w, a);
                                    return 0 < r.CrossVV(b, r.NegV(this.m_v1.w, r.s_t0)) ? r.CrossOneV(b, a) : r.CrossVOne(b, a);
                                default:
                                    return a.SetZero()
                            }
                        };
                    a.prototype.GetClosestPoint = function(a) {
                        switch (this.m_count) {
                            case 0:
                                return a.SetZero();
                            case 1:
                                return a.Copy(this.m_v1.w);
                            case 2:
                                return a.Set(this.m_v1.a * this.m_v1.w.x + this.m_v2.a * this.m_v2.w.x, this.m_v1.a * this.m_v1.w.y + this.m_v2.a * this.m_v2.w.y);
                            default:
                                return a.SetZero()
                        }
                    };
                    a.prototype.GetWitnessPoints = function(a, b) {
                        switch (this.m_count) {
                            case 1:
                                a.Copy(this.m_v1.wA);
                                b.Copy(this.m_v1.wB);
                                break;
                            case 2:
                                a.x = this.m_v1.a * this.m_v1.wA.x + this.m_v2.a * this.m_v2.wA.x;
                                a.y = this.m_v1.a * this.m_v1.wA.y + this.m_v2.a * this.m_v2.wA.y;
                                b.x = this.m_v1.a * this.m_v1.wB.x + this.m_v2.a * this.m_v2.wB.x;
                                b.y = this.m_v1.a * this.m_v1.wB.y + this.m_v2.a * this.m_v2.wB.y;
                                break;
                            case 3:
                                b.x = a.x = this.m_v1.a * this.m_v1.wA.x + this.m_v2.a * this.m_v2.wA.x + this.m_v3.a * this.m_v3.wA.x, b.y = a.y = this.m_v1.a * this.m_v1.wA.y + this.m_v2.a *
                                    this.m_v2.wA.y + this.m_v3.a * this.m_v3.wA.y
                        }
                    };
                    a.prototype.GetMetric = function() {
                        switch (this.m_count) {
                            case 0:
                            case 1:
                                return 0;
                            case 2:
                                return r.DistanceVV(this.m_v1.w, this.m_v2.w);
                            case 3:
                                return r.CrossVV(r.SubVV(this.m_v2.w, this.m_v1.w, r.s_t0), r.SubVV(this.m_v3.w, this.m_v1.w, r.s_t1));
                            default:
                                return 0
                        }
                    };
                    a.prototype.Solve2 = function() {
                        var b = this.m_v1.w,
                            c = this.m_v2.w,
                            d = r.SubVV(c, b, a.s_e12);
                        b = -r.DotVV(b, d);
                        0 >= b ? this.m_count = this.m_v1.a = 1 : (c = r.DotVV(c, d), 0 >= c ? (this.m_count = this.m_v2.a = 1, this.m_v1.Copy(this.m_v2)) :
                            (d = 1 / (c + b), this.m_v1.a = c * d, this.m_v2.a = b * d, this.m_count = 2))
                    };
                    a.prototype.Solve3 = function() {
                        var b = this.m_v1.w,
                            c = this.m_v2.w,
                            d = this.m_v3.w,
                            e = r.SubVV(c, b, a.s_e12),
                            f = r.DotVV(b, e),
                            h = r.DotVV(c, e);
                        f = -f;
                        var g = r.SubVV(d, b, a.s_e13),
                            k = r.DotVV(b, g),
                            l = r.DotVV(d, g);
                        k = -k;
                        var m = r.SubVV(d, c, a.s_e23),
                            n = r.DotVV(c, m);
                        m = r.DotVV(d, m);
                        n = -n;
                        g = r.CrossVV(e, g);
                        e = g * r.CrossVV(c, d);
                        d = g * r.CrossVV(d, b);
                        b = g * r.CrossVV(b, c);
                        0 >= f && 0 >= k ? this.m_count = this.m_v1.a = 1 : 0 < h && 0 < f && 0 >= b ? (l = 1 / (h + f), this.m_v1.a = h * l, this.m_v2.a = f * l, this.m_count =
                            2) : 0 < l && 0 < k && 0 >= d ? (h = 1 / (l + k), this.m_v1.a = l * h, this.m_v3.a = k * h, this.m_count = 2, this.m_v2.Copy(this.m_v3)) : 0 >= h && 0 >= n ? (this.m_count = this.m_v2.a = 1, this.m_v1.Copy(this.m_v2)) : 0 >= l && 0 >= m ? (this.m_count = this.m_v3.a = 1, this.m_v1.Copy(this.m_v3)) : 0 < m && 0 < n && 0 >= e ? (h = 1 / (m + n), this.m_v2.a = m * h, this.m_v3.a = n * h, this.m_count = 2, this.m_v1.Copy(this.m_v3)) : (h = 1 / (e + d + b), this.m_v1.a = e * h, this.m_v2.a = d * h, this.m_v3.a = b * h, this.m_count = 3)
                    };
                    a.s_e12 = new r;
                    a.s_e13 = new r;
                    a.s_e23 = new r;
                    return a
                }(),
                Ka = new ya,
                Pa = [0, 0, 0],
                Aa = [0, 0, 0],
                mb =
                new r,
                nb = new r,
                ob = new r,
                pb = new r,
                qb = new r,
                rb = new r,
                Ba = new ya,
                gb = new r,
                hb = new r,
                sb = new r,
                tb = new r,
                ub = new r,
                vb = new r;
            (function(a) {
                a[a.e_vertex = 0] = "e_vertex";
                a[a.e_face = 1] = "e_face"
            })(h.b2ContactFeatureType || (h.b2ContactFeatureType = {}));
            var ib = function() {
                    function a() {
                        this._key = 0;
                        this._key_invalid = !1;
                        this._typeB = this._typeA = this._indexB = this._indexA = 0
                    }
                    Object.defineProperty(a.prototype, "key", {
                        get: function() {
                            this._key_invalid && (this._key_invalid = !1, this._key = this._indexA | this._indexB << 8 | this._typeA << 16 |
                                this._typeB << 24);
                            return this._key
                        },
                        set: function(a) {
                            this._key = a;
                            this._key_invalid = !1;
                            this._indexA = 255 & this._key;
                            this._indexB = this._key >> 8 & 255;
                            this._typeA = this._key >> 16 & 255;
                            this._typeB = this._key >> 24 & 255
                        },
                        enumerable: !0,
                        configurable: !0
                    });
                    Object.defineProperty(a.prototype, "indexA", {
                        get: function() {
                            return this._indexA
                        },
                        set: function(a) {
                            this._indexA = a;
                            this._key_invalid = !0
                        },
                        enumerable: !0,
                        configurable: !0
                    });
                    Object.defineProperty(a.prototype, "indexB", {
                        get: function() {
                            return this._indexB
                        },
                        set: function(a) {
                            this._indexB =
                                a;
                            this._key_invalid = !0
                        },
                        enumerable: !0,
                        configurable: !0
                    });
                    Object.defineProperty(a.prototype, "typeA", {
                        get: function() {
                            return this._typeA
                        },
                        set: function(a) {
                            this._typeA = a;
                            this._key_invalid = !0
                        },
                        enumerable: !0,
                        configurable: !0
                    });
                    Object.defineProperty(a.prototype, "typeB", {
                        get: function() {
                            return this._typeB
                        },
                        set: function(a) {
                            this._typeB = a;
                            this._key_invalid = !0
                        },
                        enumerable: !0,
                        configurable: !0
                    });
                    return a
                }(),
                Ua = function() {
                    function a() {
                        this.cf = new ib
                    }
                    a.prototype.Copy = function(a) {
                        this.key = a.key;
                        return this
                    };
                    a.prototype.Clone =
                        function() {
                            return (new a).Copy(this)
                        };
                    Object.defineProperty(a.prototype, "key", {
                        get: function() {
                            return this.cf.key
                        },
                        set: function(a) {
                            this.cf.key = a
                        },
                        enumerable: !0,
                        configurable: !0
                    });
                    return a
                }(),
                jb = function() {
                    function a() {
                        this.localPoint = new r;
                        this.tangentImpulse = this.normalImpulse = 0;
                        this.id = new Ua
                    }
                    a.MakeArray = function(b) {
                        return d(b, function(b) {
                            return new a
                        })
                    };
                    a.prototype.Reset = function() {
                        this.localPoint.SetZero();
                        this.tangentImpulse = this.normalImpulse = 0;
                        this.id.key = 0
                    };
                    a.prototype.Copy = function(a) {
                        this.localPoint.Copy(a.localPoint);
                        this.normalImpulse = a.normalImpulse;
                        this.tangentImpulse = a.tangentImpulse;
                        this.id.Copy(a.id);
                        return this
                    };
                    return a
                }();
            (function(a) {
                a[a.e_unknown = -1] = "e_unknown";
                a[a.e_circles = 0] = "e_circles";
                a[a.e_faceA = 1] = "e_faceA";
                a[a.e_faceB = 2] = "e_faceB"
            })(h.b2ManifoldType || (h.b2ManifoldType = {}));
            var ab = function() {
                    function a() {
                        this.points = jb.MakeArray(2);
                        this.localNormal = new r;
                        this.localPoint = new r;
                        this.type = h.b2ManifoldType.e_unknown;
                        this.pointCount = 0
                    }
                    a.prototype.Reset = function() {
                        for (var a = 0; 2 > a; ++a) this.points[a].Reset();
                        this.localNormal.SetZero();
                        this.localPoint.SetZero();
                        this.type = h.b2ManifoldType.e_unknown;
                        this.pointCount = 0
                    };
                    a.prototype.Copy = function(a) {
                        this.pointCount = a.pointCount;
                        for (var b = 0; 2 > b; ++b) this.points[b].Copy(a.points[b]);
                        this.localNormal.Copy(a.localNormal);
                        this.localPoint.Copy(a.localPoint);
                        this.type = a.type;
                        return this
                    };
                    a.prototype.Clone = function() {
                        return (new a).Copy(this)
                    };
                    return a
                }(),
                kb = function() {
                    function a() {
                        this.normal = new r;
                        this.points = r.MakeArray(2);
                        this.separations = g(2)
                    }
                    a.prototype.Initialize =
                        function(b, c, d, e, f) {
                            if (0 !== b.pointCount) switch (b.type) {
                                case h.b2ManifoldType.e_circles:
                                    this.normal.Set(1, 0);
                                    c = U.MulXV(c, b.localPoint, a.Initialize_s_pointA);
                                    b = U.MulXV(e, b.points[0].localPoint, a.Initialize_s_pointB);
                                    r.DistanceSquaredVV(c, b) > Q && r.SubVV(b, c, this.normal).SelfNormalize();
                                    var g = r.AddVMulSV(c, d, this.normal, a.Initialize_s_cA);
                                    var k = r.SubVMulSV(b, f, this.normal, a.Initialize_s_cB);
                                    r.MidVV(g, k, this.points[0]);
                                    this.separations[0] = r.DotVV(r.SubVV(k, g, r.s_t0), this.normal);
                                    break;
                                case h.b2ManifoldType.e_faceA:
                                    P.MulRV(c.q,
                                        b.localNormal, this.normal);
                                    for (var l = U.MulXV(c, b.localPoint, a.Initialize_s_planePoint), H = 0; H < b.pointCount; ++H) {
                                        var J = U.MulXV(e, b.points[H].localPoint, a.Initialize_s_clipPoint);
                                        g = d - r.DotVV(r.SubVV(J, l, r.s_t0), this.normal);
                                        g = r.AddVMulSV(J, g, this.normal, a.Initialize_s_cA);
                                        k = r.SubVMulSV(J, f, this.normal, a.Initialize_s_cB);
                                        r.MidVV(g, k, this.points[H]);
                                        this.separations[H] = r.DotVV(r.SubVV(k, g, r.s_t0), this.normal)
                                    }
                                    break;
                                case h.b2ManifoldType.e_faceB:
                                    P.MulRV(e.q, b.localNormal, this.normal);
                                    l = U.MulXV(e, b.localPoint,
                                        a.Initialize_s_planePoint);
                                    for (H = 0; H < b.pointCount; ++H) J = U.MulXV(c, b.points[H].localPoint, a.Initialize_s_clipPoint), g = f - r.DotVV(r.SubVV(J, l, r.s_t0), this.normal), k = r.AddVMulSV(J, g, this.normal, a.Initialize_s_cB), g = r.SubVMulSV(J, d, this.normal, a.Initialize_s_cA), r.MidVV(g, k, this.points[H]), this.separations[H] = r.DotVV(r.SubVV(g, k, r.s_t0), this.normal);
                                    this.normal.SelfNeg()
                            }
                        };
                    a.Initialize_s_pointA = new r;
                    a.Initialize_s_pointB = new r;
                    a.Initialize_s_cA = new r;
                    a.Initialize_s_cB = new r;
                    a.Initialize_s_planePoint =
                        new r;
                    a.Initialize_s_clipPoint = new r;
                    return a
                }();
            (function(a) {
                a[a.b2_nullState = 0] = "b2_nullState";
                a[a.b2_addState = 1] = "b2_addState";
                a[a.b2_persistState = 2] = "b2_persistState";
                a[a.b2_removeState = 3] = "b2_removeState"
            })(h.b2PointState || (h.b2PointState = {}));
            var La = function() {
                    function a() {
                        this.v = new r;
                        this.id = new Ua
                    }
                    a.MakeArray = function(b) {
                        return d(b, function(b) {
                            return new a
                        })
                    };
                    a.prototype.Copy = function(a) {
                        this.v.Copy(a.v);
                        this.id.Copy(a.id);
                        return this
                    };
                    return a
                }(),
                Va = function() {
                    function a() {
                        this.p1 = new r;
                        this.p2 = new r;
                        this.maxFraction = 1
                    }
                    a.prototype.Copy = function(a) {
                        this.p1.Copy(a.p1);
                        this.p2.Copy(a.p2);
                        this.maxFraction = a.maxFraction;
                        return this
                    };
                    return a
                }(),
                bb = function() {
                    function a() {
                        this.normal = new r;
                        this.fraction = 0
                    }
                    a.prototype.Copy = function(a) {
                        this.normal.Copy(a.normal);
                        this.fraction = a.fraction;
                        return this
                    };
                    return a
                }(),
                va = function() {
                    function a() {
                        this.lowerBound = new r;
                        this.upperBound = new r;
                        this.m_cache_center = new r;
                        this.m_cache_extent = new r
                    }
                    a.prototype.Copy = function(a) {
                        this.lowerBound.Copy(a.lowerBound);
                        this.upperBound.Copy(a.upperBound);
                        return this
                    };
                    a.prototype.IsValid = function() {
                        var a = this.upperBound.y - this.lowerBound.y;
                        return 0 <= this.upperBound.x - this.lowerBound.x && 0 <= a && this.lowerBound.IsValid() && this.upperBound.IsValid()
                    };
                    a.prototype.GetCenter = function() {
                        return r.MidVV(this.lowerBound, this.upperBound, this.m_cache_center)
                    };
                    a.prototype.GetExtents = function() {
                        return r.ExtVV(this.lowerBound, this.upperBound, this.m_cache_extent)
                    };
                    a.prototype.GetPerimeter = function() {
                        return 2 * (this.upperBound.x - this.lowerBound.x +
                            (this.upperBound.y - this.lowerBound.y))
                    };
                    a.prototype.Combine1 = function(a) {
                        this.lowerBound.x = W(this.lowerBound.x, a.lowerBound.x);
                        this.lowerBound.y = W(this.lowerBound.y, a.lowerBound.y);
                        this.upperBound.x = X(this.upperBound.x, a.upperBound.x);
                        this.upperBound.y = X(this.upperBound.y, a.upperBound.y);
                        return this
                    };
                    a.prototype.Combine2 = function(a, b) {
                        this.lowerBound.x = W(a.lowerBound.x, b.lowerBound.x);
                        this.lowerBound.y = W(a.lowerBound.y, b.lowerBound.y);
                        this.upperBound.x = X(a.upperBound.x, b.upperBound.x);
                        this.upperBound.y =
                            X(a.upperBound.y, b.upperBound.y);
                        return this
                    };
                    a.Combine = function(a, b, c) {
                        c.Combine2(a, b);
                        return c
                    };
                    a.prototype.Contains = function(a) {
                        var b;
                        return b = (b = (b = (b = this.lowerBound.x <= a.lowerBound.x) && this.lowerBound.y <= a.lowerBound.y) && a.upperBound.x <= this.upperBound.x) && a.upperBound.y <= this.upperBound.y
                    };
                    a.prototype.RayCast = function(a, b) {
                        var c = -1E37,
                            d = 1E37;
                        var e = b.p1.x;
                        var f = b.p1.y;
                        var h = b.p2.x - b.p1.x;
                        var g = b.p2.y - b.p1.y;
                        var k = Z(h);
                        var l = Z(g),
                            H = a.normal;
                        if (1E-5 > k) {
                            if (e < this.lowerBound.x || this.upperBound.x <
                                e) return !1
                        } else if (k = 1 / h, h = (this.lowerBound.x - e) * k, e = (this.upperBound.x - e) * k, k = -1, h > e && (k = h, h = e, e = k, k = 1), h > c && (H.x = k, H.y = 0, c = h), d = W(d, e), c > d) return !1;
                        if (1E-5 > l) {
                            if (f < this.lowerBound.y || this.upperBound.y < f) return !1
                        } else if (k = 1 / g, h = (this.lowerBound.y - f) * k, e = (this.upperBound.y - f) * k, k = -1, h > e && (k = h, h = e, e = k, k = 1), h > c && (H.x = 0, H.y = k, c = h), d = W(d, e), c > d) return !1;
                        if (0 > c || b.maxFraction < c) return !1;
                        a.fraction = c;
                        return !0
                    };
                    a.prototype.TestContain = function(a) {
                        return a.x < this.lowerBound.x || this.upperBound.x < a.x || a.y <
                            this.lowerBound.y || this.upperBound.y < a.y ? !1 : !0
                    };
                    a.prototype.TestOverlap = function(a) {
                        var b = a.lowerBound.y - this.upperBound.y,
                            c = this.lowerBound.y - a.upperBound.y;
                        return 0 < a.lowerBound.x - this.upperBound.x || 0 < b || 0 < this.lowerBound.x - a.upperBound.x || 0 < c ? !1 : !0
                    };
                    return a
                }(),
                Qa = new Ma,
                Db = new Y,
                Eb = new Na,
                ha = function() {
                    function a(a) {
                        void 0 === a && (a = 0);
                        this.m_id = 0;
                        this.aabb = new va;
                        this.child2 = this.child1 = this.parent = null;
                        this.height = 0;
                        this.m_id = a
                    }
                    a.prototype.IsLeaf = function() {
                        return null === this.child1
                    };
                    return a
                }(),
                wb = function() {
                    function a() {
                        this.m_freeList = this.m_root = null;
                        this.m_insertionCount = this.m_path = 0;
                        this.m_stack = new Ja(256)
                    }
                    a.prototype.Query = function(a, b) {
                        if (null !== this.m_root) {
                            var c = this.m_stack.Reset();
                            for (c.Push(this.m_root); 0 < c.GetCount();) {
                                var d = c.Pop();
                                if (d.aabb.TestOverlap(a))
                                    if (d.IsLeaf()) {
                                        if (!b(d)) break
                                    } else c.Push(v(d.child1)), c.Push(v(d.child2))
                            }
                        }
                    };
                    a.prototype.QueryPoint = function(a, b) {
                        if (null !== this.m_root) {
                            var c = this.m_stack.Reset();
                            for (c.Push(this.m_root); 0 < c.GetCount();) {
                                var d = c.Pop();
                                if (d.aabb.TestContain(a))
                                    if (d.IsLeaf()) {
                                        if (!b(d)) break
                                    } else c.Push(v(d.child1)), c.Push(v(d.child2))
                            }
                        }
                    };
                    a.prototype.RayCast = function(b, c) {
                        if (null !== this.m_root) {
                            var d = b.p1,
                                e = b.p2,
                                h = r.SubVV(e, d, a.s_r);
                            h.Normalize();
                            h = r.CrossOneV(h, a.s_v);
                            var g = r.AbsV(h, a.s_abs_v),
                                k = b.maxFraction,
                                l = a.s_segmentAABB,
                                H = d.x + k * (e.x - d.x),
                                J = d.y + k * (e.y - d.y);
                            l.lowerBound.x = W(d.x, H);
                            l.lowerBound.y = W(d.y, J);
                            l.upperBound.x = X(d.x, H);
                            l.upperBound.y = X(d.y, J);
                            var m = this.m_stack.Reset();
                            for (m.Push(this.m_root); 0 < m.GetCount();)
                                if (H = m.Pop(),
                                    f(H.aabb, l)) {
                                    J = H.aabb.GetCenter();
                                    var n = H.aabb.GetExtents();
                                    if (!(0 < Z(r.DotVV(h, r.SubVV(d, J, r.s_t0))) - r.DotVV(g, n)))
                                        if (H.IsLeaf()) {
                                            J = a.s_subInput;
                                            J.p1.Copy(b.p1);
                                            J.p2.Copy(b.p2);
                                            J.maxFraction = k;
                                            H = c(J, H);
                                            if (0 === H) break;
                                            0 < H && (k = H, H = d.x + k * (e.x - d.x), J = d.y + k * (e.y - d.y), l.lowerBound.x = W(d.x, H), l.lowerBound.y = W(d.y, J), l.upperBound.x = X(d.x, H), l.upperBound.y = X(d.y, J))
                                        } else m.Push(v(H.child1)), m.Push(v(H.child2))
                                }
                        }
                    };
                    a.prototype.AllocateNode = function() {
                        if (this.m_freeList) {
                            var b = this.m_freeList;
                            this.m_freeList =
                                b.parent;
                            b.parent = null;
                            b.child1 = null;
                            b.child2 = null;
                            b.height = 0;
                            delete b.userData;
                            return b
                        }
                        return new ha(a.s_node_id++)
                    };
                    a.prototype.FreeNode = function(a) {
                        a.parent = this.m_freeList;
                        a.child1 = null;
                        a.child2 = null;
                        a.height = -1;
                        delete a.userData;
                        this.m_freeList = a
                    };
                    a.prototype.CreateProxy = function(a, b) {
                        var c = this.AllocateNode();
                        c.aabb.lowerBound.x = a.lowerBound.x - .1;
                        c.aabb.lowerBound.y = a.lowerBound.y - .1;
                        c.aabb.upperBound.x = a.upperBound.x + .1;
                        c.aabb.upperBound.y = a.upperBound.y + .1;
                        c.userData = b;
                        c.height = 0;
                        this.InsertLeaf(c);
                        return c
                    };
                    a.prototype.DestroyProxy = function(a) {
                        this.RemoveLeaf(a);
                        this.FreeNode(a)
                    };
                    a.prototype.MoveProxy = function(a, b, c) {
                        if (a.aabb.Contains(b)) return !1;
                        this.RemoveLeaf(a);
                        var d = .1 + 2 * (0 < c.x ? c.x : -c.x);
                        c = .1 + 2 * (0 < c.y ? c.y : -c.y);
                        a.aabb.lowerBound.x = b.lowerBound.x - d;
                        a.aabb.lowerBound.y = b.lowerBound.y - c;
                        a.aabb.upperBound.x = b.upperBound.x + d;
                        a.aabb.upperBound.y = b.upperBound.y + c;
                        this.InsertLeaf(a);
                        return !0
                    };
                    a.prototype.InsertLeaf = function(b) {
                        ++this.m_insertionCount;
                        if (null === this.m_root) this.m_root = b, this.m_root.parent =
                            null;
                        else {
                            for (var c = b.aabb, d = this.m_root; !d.IsLeaf();) {
                                var e = v(d.child1);
                                var f = v(d.child2);
                                var h = d.aabb.GetPerimeter(),
                                    g = a.s_combinedAABB;
                                g.Combine2(d.aabb, c);
                                var k = g.GetPerimeter();
                                g = 2 * k;
                                k = 2 * (k - h);
                                var l = a.s_aabb;
                                if (e.IsLeaf()) l.Combine2(c, e.aabb), h = l.GetPerimeter() + k;
                                else {
                                    l.Combine2(c, e.aabb);
                                    var H = e.aabb.GetPerimeter();
                                    var m = l.GetPerimeter();
                                    h = m - H + k
                                }
                                f.IsLeaf() ? (l.Combine2(c, f.aabb), k = l.GetPerimeter() + k) : (l.Combine2(c, f.aabb), H = f.aabb.GetPerimeter(), m = l.GetPerimeter(), k = m - H + k);
                                if (g < h && g < k) break;
                                d = h < k ? e : f
                            }
                            f = d;
                            e = f.parent;
                            d = this.AllocateNode();
                            d.parent = e;
                            delete d.userData;
                            d.aabb.Combine2(c, f.aabb);
                            d.height = f.height + 1;
                            e ? (e.child1 === f ? e.child1 = d : e.child2 = d, d.child1 = f, d.child2 = b, f.parent = d, b.parent = d) : (d.child1 = f, d.child2 = b, f.parent = d, this.m_root = b.parent = d);
                            for (b = b.parent; null !== b;) b = this.Balance(b), e = v(b.child1), f = v(b.child2), b.height = 1 + X(e.height, f.height), b.aabb.Combine2(e.aabb, f.aabb), b = b.parent
                        }
                    };
                    a.prototype.RemoveLeaf = function(a) {
                        if (a === this.m_root) this.m_root = null;
                        else {
                            var b = v(a.parent),
                                c = b && b.parent;
                            a = b.child1 === a ? v(b.child2) : v(b.child1);
                            if (c)
                                for (c.child1 === b ? c.child1 = a : c.child2 = a, a.parent = c, this.FreeNode(b), b = c; b;) b = this.Balance(b), c = v(b.child1), a = v(b.child2), b.aabb.Combine2(c.aabb, a.aabb), b.height = 1 + X(c.height, a.height), b = b.parent;
                            else this.m_root = a, a.parent = null, this.FreeNode(b)
                        }
                    };
                    a.prototype.Balance = function(a) {
                        if (a.IsLeaf() || 2 > a.height) return a;
                        var b = v(a.child1),
                            c = v(a.child2),
                            d = c.height - b.height;
                        if (1 < d) {
                            d = v(c.child1);
                            var e = v(c.child2);
                            c.child1 = a;
                            c.parent = a.parent;
                            a.parent =
                                c;
                            null !== c.parent ? c.parent.child1 === a ? c.parent.child1 = c : c.parent.child2 = c : this.m_root = c;
                            d.height > e.height ? (c.child2 = d, a.child2 = e, e.parent = a, a.aabb.Combine2(b.aabb, e.aabb), c.aabb.Combine2(a.aabb, d.aabb), a.height = 1 + X(b.height, e.height), c.height = 1 + X(a.height, d.height)) : (c.child2 = e, a.child2 = d, d.parent = a, a.aabb.Combine2(b.aabb, d.aabb), c.aabb.Combine2(a.aabb, e.aabb), a.height = 1 + X(b.height, d.height), c.height = 1 + X(a.height, e.height));
                            return c
                        }
                        return -1 > d ? (d = v(b.child1), e = v(b.child2), b.child1 = a, b.parent = a.parent,
                            a.parent = b, null !== b.parent ? b.parent.child1 === a ? b.parent.child1 = b : b.parent.child2 = b : this.m_root = b, d.height > e.height ? (b.child2 = d, a.child1 = e, e.parent = a, a.aabb.Combine2(c.aabb, e.aabb), b.aabb.Combine2(a.aabb, d.aabb), a.height = 1 + X(c.height, e.height), b.height = 1 + X(a.height, d.height)) : (b.child2 = e, a.child1 = d, d.parent = a, a.aabb.Combine2(c.aabb, d.aabb), b.aabb.Combine2(a.aabb, e.aabb), a.height = 1 + X(c.height, d.height), b.height = 1 + X(a.height, e.height)), b) : a
                    };
                    a.prototype.GetHeight = function() {
                        return null === this.m_root ?
                            0 : this.m_root.height
                    };
                    a.GetAreaNode = function(b) {
                        if (null === b || b.IsLeaf()) return 0;
                        var c = b.aabb.GetPerimeter();
                        c += a.GetAreaNode(b.child1);
                        return c += a.GetAreaNode(b.child2)
                    };
                    a.prototype.GetAreaRatio = function() {
                        if (null === this.m_root) return 0;
                        var b = this.m_root.aabb.GetPerimeter();
                        return a.GetAreaNode(this.m_root) / b
                    };
                    a.prototype.ComputeHeightNode = function(a) {
                        if (!a || a.IsLeaf()) return 0;
                        var b = this.ComputeHeightNode(a.child1);
                        a = this.ComputeHeightNode(a.child2);
                        return 1 + X(b, a)
                    };
                    a.prototype.ComputeHeight = function() {
                        return this.ComputeHeightNode(this.m_root)
                    };
                    a.prototype.ValidateStructure = function(a) {
                        if (null !== a && (a === this.m_root, !a.IsLeaf())) {
                            var b = v(a.child1);
                            a = v(a.child2);
                            this.ValidateStructure(b);
                            this.ValidateStructure(a)
                        }
                    };
                    a.prototype.ValidateMetrics = function(b) {
                        if (null !== b && !b.IsLeaf()) {
                            var c = v(b.child1);
                            b = v(b.child2);
                            a.s_aabb.Combine2(c.aabb, b.aabb);
                            this.ValidateMetrics(c);
                            this.ValidateMetrics(b)
                        }
                    };
                    a.prototype.Validate = function() {};
                    a.GetMaxBalanceNode = function(a, b) {
                        if (null === a || 1 >= a.height) return b;
                        var c = v(a.child1);
                        a = v(a.child2);
                        c = Z(a.height - c.height);
                        return X(b, c)
                    };
                    a.prototype.GetMaxBalance = function() {
                        return a.GetMaxBalanceNode(this.m_root, 0)
                    };
                    a.prototype.RebuildBottomUp = function() {
                        this.Validate()
                    };
                    a.ShiftOriginNode = function(b, c) {
                        if (null !== b && !(1 >= b.height)) {
                            var d = b.child2;
                            a.ShiftOriginNode(b.child1, c);
                            a.ShiftOriginNode(d, c);
                            b.aabb.lowerBound.SelfSub(c);
                            b.aabb.upperBound.SelfSub(c)
                        }
                    };
                    a.prototype.ShiftOrigin = function(b) {
                        a.ShiftOriginNode(this.m_root, b)
                    };
                    a.s_r = new r;
                    a.s_v = new r;
                    a.s_abs_v = new r;
                    a.s_segmentAABB = new va;
                    a.s_subInput = new Va;
                    a.s_combinedAABB =
                        new va;
                    a.s_aabb = new va;
                    a.s_node_id = 0;
                    return a
                }(),
                xb = function() {
                    return function(a, b) {
                        this.proxyA = a;
                        this.proxyB = b
                    }
                }(),
                yb = function() {
                    function a() {
                        this.m_tree = new wb;
                        this.m_moveCount = this.m_proxyCount = 0;
                        this.m_moveBuffer = [];
                        this.m_pairCount = 0;
                        this.m_pairBuffer = []
                    }
                    a.prototype.CreateProxy = function(a, b) {
                        a = this.m_tree.CreateProxy(a, b);
                        ++this.m_proxyCount;
                        this.BufferMove(a);
                        return a
                    };
                    a.prototype.DestroyProxy = function(a) {
                        this.UnBufferMove(a);
                        --this.m_proxyCount;
                        this.m_tree.DestroyProxy(a)
                    };
                    a.prototype.MoveProxy =
                        function(a, b, c) {
                            this.m_tree.MoveProxy(a, b, c) && this.BufferMove(a)
                        };
                    a.prototype.TouchProxy = function(a) {
                        this.BufferMove(a)
                    };
                    a.prototype.GetProxyCount = function() {
                        return this.m_proxyCount
                    };
                    a.prototype.UpdatePairs = function(a) {
                        var b = this;
                        this.m_pairCount = 0;
                        for (var c = function(a) {
                                var c = d.m_moveBuffer[a];
                                if (null === c) return "continue";
                                d.m_tree.Query(c.aabb, function(a) {
                                    if (a.m_id === c.m_id) return !0;
                                    if (a.m_id < c.m_id) {
                                        var d = a;
                                        a = c
                                    } else d = c;
                                    if (b.m_pairCount === b.m_pairBuffer.length) b.m_pairBuffer[b.m_pairCount] = new xb(d,
                                        a);
                                    else {
                                        var e = b.m_pairBuffer[b.m_pairCount];
                                        e.proxyA = d;
                                        e.proxyB = a
                                    }++b.m_pairCount;
                                    return !0
                                })
                            }, d = this, e = 0; e < this.m_moveCount; ++e) c(e);
                        this.m_moveCount = 0;
                        this.m_pairBuffer.length = this.m_pairCount;
                        this.m_pairBuffer.sort(p);
                        for (c = 0; c < this.m_pairCount;) {
                            e = this.m_pairBuffer[c];
                            var f = e.proxyA.userData,
                                h = e.proxyB.userData;
                            f && h && a(f, h);
                            for (++c; c < this.m_pairCount;) {
                                f = this.m_pairBuffer[c];
                                if (f.proxyA.m_id !== e.proxyA.m_id || f.proxyB.m_id !== e.proxyB.m_id) break;
                                ++c
                            }
                        }
                    };
                    a.prototype.Query = function(a, b) {
                        this.m_tree.Query(a,
                            b)
                    };
                    a.prototype.QueryPoint = function(a, b) {
                        this.m_tree.QueryPoint(a, b)
                    };
                    a.prototype.RayCast = function(a, b) {
                        this.m_tree.RayCast(a, b)
                    };
                    a.prototype.GetTreeHeight = function() {
                        return this.m_tree.GetHeight()
                    };
                    a.prototype.GetTreeBalance = function() {
                        return this.m_tree.GetMaxBalance()
                    };
                    a.prototype.GetTreeQuality = function() {
                        return this.m_tree.GetAreaRatio()
                    };
                    a.prototype.ShiftOrigin = function(a) {
                        this.m_tree.ShiftOrigin(a)
                    };
                    a.prototype.BufferMove = function(a) {
                        this.m_moveBuffer[this.m_moveCount] = a;
                        ++this.m_moveCount
                    };
                    a.prototype.UnBufferMove = function(a) {
                        a = this.m_moveBuffer.indexOf(a);
                        this.m_moveBuffer[a] = null
                    };
                    return a
                }();
            h.b2_toiTime = 0;
            h.b2_toiMaxTime = 0;
            h.b2_toiCalls = 0;
            h.b2_toiIters = 0;
            h.b2_toiMaxIters = 0;
            h.b2_toiRootIters = 0;
            h.b2_toiMaxRootIters = 0;
            var cb = new U,
                Wa = new U,
                Ga = new r,
                Oa = new r,
                $a = new r,
                Zb = new r,
                $b = new r,
                Bb = function() {
                    return function() {
                        this.proxyA = new ta;
                        this.proxyB = new ta;
                        this.sweepA = new ua;
                        this.sweepB = new ua;
                        this.tMax = 0
                    }
                }();
            (function(a) {
                a[a.e_unknown = 0] = "e_unknown";
                a[a.e_failed = 1] = "e_failed";
                a[a.e_overlapped =
                    2] = "e_overlapped";
                a[a.e_touching = 3] = "e_touching";
                a[a.e_separated = 4] = "e_separated"
            })(h.b2TOIOutputState || (h.b2TOIOutputState = {}));
            var Cb = function() {
                return function() {
                    this.state = h.b2TOIOutputState.e_unknown;
                    this.t = 0
                }
            }();
            (function(a) {
                a[a.e_unknown = -1] = "e_unknown";
                a[a.e_points = 0] = "e_points";
                a[a.e_faceA = 1] = "e_faceA";
                a[a.e_faceB = 2] = "e_faceB"
            })(h.b2SeparationFunctionType || (h.b2SeparationFunctionType = {}));
            var ac = function() {
                    function a() {
                        this.m_sweepA = new ua;
                        this.m_sweepB = new ua;
                        this.m_type = h.b2SeparationFunctionType.e_unknown;
                        this.m_localPoint = new r;
                        this.m_axis = new r
                    }
                    a.prototype.Initialize = function(a, b, c, d, e, f) {
                        this.m_proxyA = b;
                        this.m_proxyB = d;
                        b = a.count;
                        this.m_sweepA.Copy(c);
                        this.m_sweepB.Copy(e);
                        c = cb;
                        e = Wa;
                        this.m_sweepA.GetTransform(c, f);
                        this.m_sweepB.GetTransform(e, f);
                        if (1 === b) return this.m_type = h.b2SeparationFunctionType.e_points, b = this.m_proxyA.GetVertex(a.indexA[0]), a = this.m_proxyB.GetVertex(a.indexB[0]), c = U.MulXV(c, b, Ga), e = U.MulXV(e, a, Oa), r.SubVV(e, c, this.m_axis), a = this.m_axis.Normalize(), this.m_localPoint.SetZero(),
                            a;
                        if (a.indexA[0] === a.indexA[1]) return this.m_type = h.b2SeparationFunctionType.e_faceB, b = this.m_proxyB.GetVertex(a.indexB[0]), d = this.m_proxyB.GetVertex(a.indexB[1]), r.CrossVOne(r.SubVV(d, b, r.s_t0), this.m_axis).SelfNormalize(), f = P.MulRV(e.q, this.m_axis, $a), r.MidVV(b, d, this.m_localPoint), e = U.MulXV(e, this.m_localPoint, Oa), b = this.m_proxyA.GetVertex(a.indexA[0]), c = U.MulXV(c, b, Ga), a = r.DotVV(r.SubVV(c, e, r.s_t0), f), 0 > a && (this.m_axis.SelfNeg(), a = -a), a;
                        this.m_type = h.b2SeparationFunctionType.e_faceA;
                        b = this.m_proxyA.GetVertex(a.indexA[0]);
                        d = this.m_proxyA.GetVertex(a.indexA[1]);
                        r.CrossVOne(r.SubVV(d, b, r.s_t0), this.m_axis).SelfNormalize();
                        f = P.MulRV(c.q, this.m_axis, $a);
                        r.MidVV(b, d, this.m_localPoint);
                        c = U.MulXV(c, this.m_localPoint, Ga);
                        a = this.m_proxyB.GetVertex(a.indexB[0]);
                        e = U.MulXV(e, a, Oa);
                        a = r.DotVV(r.SubVV(e, c, r.s_t0), f);
                        0 > a && (this.m_axis.SelfNeg(), a = -a);
                        return a
                    };
                    a.prototype.FindMinSeparation = function(a, b, c) {
                        var d = cb,
                            e = Wa;
                        this.m_sweepA.GetTransform(d, c);
                        this.m_sweepB.GetTransform(e, c);
                        switch (this.m_type) {
                            case h.b2SeparationFunctionType.e_points:
                                var f =
                                    P.MulTRV(d.q, this.m_axis, Zb),
                                    g = P.MulTRV(e.q, r.NegV(this.m_axis, r.s_t0), $b);
                                a[0] = this.m_proxyA.GetSupport(f);
                                b[0] = this.m_proxyB.GetSupport(g);
                                a = this.m_proxyA.GetVertex(a[0]);
                                b = this.m_proxyB.GetVertex(b[0]);
                                d = U.MulXV(d, a, Ga);
                                e = U.MulXV(e, b, Oa);
                                return b = r.DotVV(r.SubVV(e, d, r.s_t0), this.m_axis);
                            case h.b2SeparationFunctionType.e_faceA:
                                return c = P.MulRV(d.q, this.m_axis, $a), d = U.MulXV(d, this.m_localPoint, Ga), g = P.MulTRV(e.q, r.NegV(c, r.s_t0), $b), a[0] = -1, b[0] = this.m_proxyB.GetSupport(g), b = this.m_proxyB.GetVertex(b[0]),
                                    e = U.MulXV(e, b, Oa), b = r.DotVV(r.SubVV(e, d, r.s_t0), c);
                            case h.b2SeparationFunctionType.e_faceB:
                                return c = P.MulRV(e.q, this.m_axis, $a), e = U.MulXV(e, this.m_localPoint, Oa), f = P.MulTRV(d.q, r.NegV(c, r.s_t0), Zb), b[0] = -1, a[0] = this.m_proxyA.GetSupport(f), a = this.m_proxyA.GetVertex(a[0]), d = U.MulXV(d, a, Ga), b = r.DotVV(r.SubVV(d, e, r.s_t0), c);
                            default:
                                return a[0] = -1, b[0] = -1, 0
                        }
                    };
                    a.prototype.Evaluate = function(a, b, c) {
                        var d = cb,
                            e = Wa;
                        this.m_sweepA.GetTransform(d, c);
                        this.m_sweepB.GetTransform(e, c);
                        switch (this.m_type) {
                            case h.b2SeparationFunctionType.e_points:
                                return a =
                                    this.m_proxyA.GetVertex(a), b = this.m_proxyB.GetVertex(b), d = U.MulXV(d, a, Ga), e = U.MulXV(e, b, Oa), d = r.DotVV(r.SubVV(e, d, r.s_t0), this.m_axis);
                            case h.b2SeparationFunctionType.e_faceA:
                                return c = P.MulRV(d.q, this.m_axis, $a), d = U.MulXV(d, this.m_localPoint, Ga), b = this.m_proxyB.GetVertex(b), e = U.MulXV(e, b, Oa), d = r.DotVV(r.SubVV(e, d, r.s_t0), c);
                            case h.b2SeparationFunctionType.e_faceB:
                                return c = P.MulRV(e.q, this.m_axis, $a), e = U.MulXV(e, this.m_localPoint, Oa), a = this.m_proxyA.GetVertex(a), d = U.MulXV(d, a, Ga), d = r.DotVV(r.SubVV(d,
                                    e, r.s_t0), c);
                            default:
                                return 0
                        }
                    };
                    return a
                }(),
                Nc = new za,
                Oc = new Y,
                Rc = new Ma,
                Sc = new Na,
                Tc = new ac,
                Uc = [0],
                Vc = [0],
                Pc = new ua,
                Qc = new ua,
                Wc = new r,
                Xc = new r,
                Yc = new r,
                Zc = new r,
                $c = new r,
                ad = new r,
                bd = new r,
                cd = new r,
                dd = new r,
                ed = new r,
                fd = new r,
                jd = new r,
                id = La.MakeArray(2),
                rd = La.MakeArray(2),
                sd = La.MakeArray(2),
                gd = [0],
                hd = [0],
                kd = new r,
                ld = new r,
                md = new r,
                od = new r,
                nd = new r,
                td = new r,
                pd = new r,
                qd = new r,
                ud = new r,
                vd = new r,
                Fb = new r,
                xd = new r,
                yd = new r,
                zd = new r,
                Ad = new r,
                wd = new Ua,
                bc = function() {
                    return function() {
                        this.separation = this.index =
                            this.type = 0
                    }
                }(),
                Dd = function() {
                    return function() {
                        this.vertices = r.MakeArray(8);
                        this.normals = r.MakeArray(8);
                        this.count = 0
                    }
                }(),
                Ed = function() {
                    return function() {
                        this.i2 = this.i1 = 0;
                        this.v1 = new r;
                        this.v2 = new r;
                        this.normal = new r;
                        this.sideNormal1 = new r;
                        this.sideOffset1 = 0;
                        this.sideNormal2 = new r;
                        this.sideOffset2 = 0
                    }
                }(),
                Bd = new(function() {
                    function a() {
                        this.m_polygonB = new Dd;
                        this.m_xf = new U;
                        this.m_centroidB = new r;
                        this.m_v0 = new r;
                        this.m_v1 = new r;
                        this.m_v2 = new r;
                        this.m_v3 = new r;
                        this.m_normal0 = new r;
                        this.m_normal1 = new r;
                        this.m_normal2 = new r;
                        this.m_normal = new r;
                        this.m_type2 = this.m_type1 = 0;
                        this.m_lowerLimit = new r;
                        this.m_upperLimit = new r;
                        this.m_radius = 0;
                        this.m_front = !1
                    }
                    a.prototype.Collide = function(b, c, d, e, f) {
                        U.MulTXX(d, f, this.m_xf);
                        U.MulXV(this.m_xf, e.m_centroid, this.m_centroidB);
                        this.m_v0.Copy(c.m_vertex0);
                        this.m_v1.Copy(c.m_vertex1);
                        this.m_v2.Copy(c.m_vertex2);
                        this.m_v3.Copy(c.m_vertex3);
                        d = c.m_hasVertex0;
                        f = c.m_hasVertex3;
                        var g = r.SubVV(this.m_v2, this.m_v1, a.s_edge1);
                        g.Normalize();
                        this.m_normal1.Set(g.y, -g.x);
                        var k =
                            r.DotVV(this.m_normal1, r.SubVV(this.m_centroidB, this.m_v1, r.s_t0));
                        var l = 0,
                            H = 0,
                            J = !1,
                            n = !1;
                        d && (l = r.SubVV(this.m_v1, this.m_v0, a.s_edge0), l.Normalize(), this.m_normal0.Set(l.y, -l.x), J = 0 <= r.CrossVV(l, g), l = r.DotVV(this.m_normal0, r.SubVV(this.m_centroidB, this.m_v0, r.s_t0)));
                        f && (H = r.SubVV(this.m_v3, this.m_v2, a.s_edge2), H.Normalize(), this.m_normal2.Set(H.y, -H.x), n = 0 < r.CrossVV(g, H), H = r.DotVV(this.m_normal2, r.SubVV(this.m_centroidB, this.m_v2, r.s_t0)));
                        d && f ? J && n ? (this.m_front = 0 <= l || 0 <= k || 0 <= H) ? (this.m_normal.Copy(this.m_normal1),
                                this.m_lowerLimit.Copy(this.m_normal0), this.m_upperLimit.Copy(this.m_normal2)) : (this.m_normal.Copy(this.m_normal1).SelfNeg(), this.m_lowerLimit.Copy(this.m_normal1).SelfNeg(), this.m_upperLimit.Copy(this.m_normal1).SelfNeg()) : J ? (this.m_front = 0 <= l || 0 <= k && 0 <= H) ? (this.m_normal.Copy(this.m_normal1), this.m_lowerLimit.Copy(this.m_normal0), this.m_upperLimit.Copy(this.m_normal1)) : (this.m_normal.Copy(this.m_normal1).SelfNeg(), this.m_lowerLimit.Copy(this.m_normal2).SelfNeg(), this.m_upperLimit.Copy(this.m_normal1).SelfNeg()) :
                            n ? (this.m_front = 0 <= H || 0 <= l && 0 <= k) ? (this.m_normal.Copy(this.m_normal1), this.m_lowerLimit.Copy(this.m_normal1), this.m_upperLimit.Copy(this.m_normal2)) : (this.m_normal.Copy(this.m_normal1).SelfNeg(), this.m_lowerLimit.Copy(this.m_normal1).SelfNeg(), this.m_upperLimit.Copy(this.m_normal0).SelfNeg()) : (this.m_front = 0 <= l && 0 <= k && 0 <= H) ? (this.m_normal.Copy(this.m_normal1), this.m_lowerLimit.Copy(this.m_normal1), this.m_upperLimit.Copy(this.m_normal1)) : (this.m_normal.Copy(this.m_normal1).SelfNeg(), this.m_lowerLimit.Copy(this.m_normal2).SelfNeg(),
                                this.m_upperLimit.Copy(this.m_normal0).SelfNeg()) : d ? J ? ((this.m_front = 0 <= l || 0 <= k) ? (this.m_normal.Copy(this.m_normal1), this.m_lowerLimit.Copy(this.m_normal0)) : (this.m_normal.Copy(this.m_normal1).SelfNeg(), this.m_lowerLimit.Copy(this.m_normal1)), this.m_upperLimit.Copy(this.m_normal1).SelfNeg()) : (this.m_front = 0 <= l && 0 <= k) ? (this.m_normal.Copy(this.m_normal1), this.m_lowerLimit.Copy(this.m_normal1), this.m_upperLimit.Copy(this.m_normal1).SelfNeg()) : (this.m_normal.Copy(this.m_normal1).SelfNeg(), this.m_lowerLimit.Copy(this.m_normal1),
                                this.m_upperLimit.Copy(this.m_normal0).SelfNeg()) : f ? n ? (this.m_front = 0 <= k || 0 <= H) ? (this.m_normal.Copy(this.m_normal1), this.m_lowerLimit.Copy(this.m_normal1).SelfNeg(), this.m_upperLimit.Copy(this.m_normal2)) : (this.m_normal.Copy(this.m_normal1).SelfNeg(), this.m_lowerLimit.Copy(this.m_normal1).SelfNeg(), this.m_upperLimit.Copy(this.m_normal1)) : ((this.m_front = 0 <= k && 0 <= H) ? (this.m_normal.Copy(this.m_normal1), this.m_lowerLimit.Copy(this.m_normal1).SelfNeg()) : (this.m_normal.Copy(this.m_normal1).SelfNeg(), this.m_lowerLimit.Copy(this.m_normal2).SelfNeg()),
                                this.m_upperLimit.Copy(this.m_normal1)) : (this.m_front = 0 <= k) ? (this.m_normal.Copy(this.m_normal1), this.m_lowerLimit.Copy(this.m_normal1).SelfNeg(), this.m_upperLimit.Copy(this.m_normal1).SelfNeg()) : (this.m_normal.Copy(this.m_normal1).SelfNeg(), this.m_lowerLimit.Copy(this.m_normal1), this.m_upperLimit.Copy(this.m_normal1));
                        this.m_polygonB.count = e.m_count;
                        for (g = 0; g < e.m_count; ++g) U.MulXV(this.m_xf, e.m_vertices[g], this.m_polygonB.vertices[g]), P.MulRV(this.m_xf.q, e.m_normals[g], this.m_polygonB.normals[g]);
                        this.m_radius = e.m_radius + c.m_radius;
                        b.pointCount = 0;
                        c = this.ComputeEdgeSeparation(a.s_edgeAxis);
                        if (!(0 === c.type || c.separation > this.m_radius || (d = this.ComputePolygonSeparation(a.s_polygonAxis), 0 !== d.type && d.separation > this.m_radius))) {
                            c = 0 === d.type ? c : d.separation > .98 * c.separation + .001 ? d : c;
                            f = a.s_ie;
                            d = a.s_rf;
                            if (1 === c.type) {
                                b.type = h.b2ManifoldType.e_faceA;
                                k = 0;
                                l = r.DotVV(this.m_normal, this.m_polygonB.normals[0]);
                                for (g = 1; g < this.m_polygonB.count; ++g) H = r.DotVV(this.m_normal, this.m_polygonB.normals[g]), H < l && (l =
                                    H, k = g);
                                l = k;
                                g = (l + 1) % this.m_polygonB.count;
                                k = f[0];
                                k.v.Copy(this.m_polygonB.vertices[l]);
                                k.id.cf.indexA = 0;
                                k.id.cf.indexB = l;
                                k.id.cf.typeA = h.b2ContactFeatureType.e_face;
                                k.id.cf.typeB = h.b2ContactFeatureType.e_vertex;
                                k = f[1];
                                k.v.Copy(this.m_polygonB.vertices[g]);
                                k.id.cf.indexA = 0;
                                k.id.cf.indexB = g;
                                k.id.cf.typeA = h.b2ContactFeatureType.e_face;
                                k.id.cf.typeB = h.b2ContactFeatureType.e_vertex;
                                this.m_front ? (d.i1 = 0, d.i2 = 1, d.v1.Copy(this.m_v1), d.v2.Copy(this.m_v2), d.normal.Copy(this.m_normal1)) : (d.i1 = 1, d.i2 = 0, d.v1.Copy(this.m_v2),
                                    d.v2.Copy(this.m_v1), d.normal.Copy(this.m_normal1).SelfNeg())
                            } else b.type = h.b2ManifoldType.e_faceB, k = f[0], k.v.Copy(this.m_v1), k.id.cf.indexA = 0, k.id.cf.indexB = c.index, k.id.cf.typeA = h.b2ContactFeatureType.e_vertex, k.id.cf.typeB = h.b2ContactFeatureType.e_face, k = f[1], k.v.Copy(this.m_v2), k.id.cf.indexA = 0, k.id.cf.indexB = c.index, k.id.cf.typeA = h.b2ContactFeatureType.e_vertex, k.id.cf.typeB = h.b2ContactFeatureType.e_face, d.i1 = c.index, d.i2 = (d.i1 + 1) % this.m_polygonB.count, d.v1.Copy(this.m_polygonB.vertices[d.i1]),
                                d.v2.Copy(this.m_polygonB.vertices[d.i2]), d.normal.Copy(this.m_polygonB.normals[d.i1]);
                            d.sideNormal1.Set(d.normal.y, -d.normal.x);
                            d.sideNormal2.Copy(d.sideNormal1).SelfNeg();
                            d.sideOffset1 = r.DotVV(d.sideNormal1, d.v1);
                            d.sideOffset2 = r.DotVV(d.sideNormal2, d.v2);
                            g = a.s_clipPoints1;
                            k = a.s_clipPoints2;
                            f = m(g, f, d.sideNormal1, d.sideOffset1, d.i1);
                            if (!(2 > f || (f = m(k, g, d.sideNormal2, d.sideOffset2, d.i2), 2 > f))) {
                                1 === c.type ? (b.localNormal.Copy(d.normal), b.localPoint.Copy(d.v1)) : (b.localNormal.Copy(e.m_normals[d.i1]), b.localPoint.Copy(e.m_vertices[d.i1]));
                                for (g = e = 0; 2 > g; ++g) r.DotVV(d.normal, r.SubVV(k[g].v, d.v1, r.s_t0)) <= this.m_radius && (f = b.points[e], 1 === c.type ? (U.MulTXV(this.m_xf, k[g].v, f.localPoint), f.id = k[g].id) : (f.localPoint.Copy(k[g].v), f.id.cf.typeA = k[g].id.cf.typeB, f.id.cf.typeB = k[g].id.cf.typeA, f.id.cf.indexA = k[g].id.cf.indexB, f.id.cf.indexB = k[g].id.cf.indexA), ++e);
                                b.pointCount = e
                            }
                        }
                    };
                    a.prototype.ComputeEdgeSeparation = function(a) {
                        a.type = 1;
                        a.index = this.m_front ? 0 : 1;
                        a.separation = 1E37;
                        for (var b = 0; b < this.m_polygonB.count; ++b) {
                            var c = r.DotVV(this.m_normal,
                                r.SubVV(this.m_polygonB.vertices[b], this.m_v1, r.s_t0));
                            c < a.separation && (a.separation = c)
                        }
                        return a
                    };
                    a.prototype.ComputePolygonSeparation = function(b) {
                        b.type = 0;
                        b.index = -1;
                        b.separation = -1E37;
                        for (var c = a.s_perp.Set(-this.m_normal.y, this.m_normal.x), d = 0; d < this.m_polygonB.count; ++d) {
                            var e = r.NegV(this.m_polygonB.normals[d], a.s_n),
                                f = r.DotVV(e, r.SubVV(this.m_polygonB.vertices[d], this.m_v1, r.s_t0)),
                                g = r.DotVV(e, r.SubVV(this.m_polygonB.vertices[d], this.m_v2, r.s_t0));
                            f = W(f, g);
                            if (f > this.m_radius) {
                                b.type = 2;
                                b.index =
                                    d;
                                b.separation = f;
                                break
                            }
                            if (0 <= r.DotVV(e, c)) {
                                if (r.DotVV(r.SubVV(e, this.m_upperLimit, r.s_t0), this.m_normal) < -V) continue
                            } else if (r.DotVV(r.SubVV(e, this.m_lowerLimit, r.s_t0), this.m_normal) < -V) continue;
                            f > b.separation && (b.type = 2, b.index = d, b.separation = f)
                        }
                        return b
                    };
                    a.s_edge1 = new r;
                    a.s_edge0 = new r;
                    a.s_edge2 = new r;
                    a.s_ie = La.MakeArray(2);
                    a.s_rf = new Ed;
                    a.s_clipPoints1 = La.MakeArray(2);
                    a.s_clipPoints2 = La.MakeArray(2);
                    a.s_edgeAxis = new bc;
                    a.s_polygonAxis = new bc;
                    a.s_n = new r;
                    a.s_perp = new r;
                    return a
                }()),
                zb = function() {
                    return function() {
                        this.mass =
                            0;
                        this.center = new r(0, 0);
                        this.I = 0
                    }
                }();
            (function(a) {
                a[a.e_unknown = -1] = "e_unknown";
                a[a.e_circleShape = 0] = "e_circleShape";
                a[a.e_edgeShape = 1] = "e_edgeShape";
                a[a.e_polygonShape = 2] = "e_polygonShape";
                a[a.e_chainShape = 3] = "e_chainShape";
                a[a.e_shapeTypeCount = 4] = "e_shapeTypeCount"
            })(h.b2ShapeType || (h.b2ShapeType = {}));
            var Xa = function() {
                    function a(a, b) {
                        this.m_type = h.b2ShapeType.e_unknown;
                        this.m_radius = 0;
                        this.m_type = a;
                        this.m_radius = b
                    }
                    a.prototype.Copy = function(a) {
                        this.m_radius = a.m_radius;
                        return this
                    };
                    a.prototype.GetType =
                        function() {
                            return this.m_type
                        };
                    return a
                }(),
                Cd = Object.setPrototypeOf || {
                    __proto__: []
                }
            instanceof Array && function(a, b) {
                a.__proto__ = b
            } || function(a, b) {
                for (var c in b) b.hasOwnProperty(c) && (a[c] = b[c])
            }, Fd = function(b) {
                function c(a) {
                    void 0 === a && (a = 0);
                    a = b.call(this, h.b2ShapeType.e_circleShape, a) || this;
                    a.m_p = new r;
                    return a
                }
                C(c, b);
                c.prototype.Set = function(a, b) {
                    void 0 === b && (b = this.m_radius);
                    this.m_p.Copy(a);
                    this.m_radius = b;
                    return this
                };
                c.prototype.Clone = function() {
                    return (new c).Copy(this)
                };
                c.prototype.Copy = function(a) {
                    b.prototype.Copy.call(this,
                        a);
                    this.m_p.Copy(a.m_p);
                    return this
                };
                c.prototype.GetChildCount = function() {
                    return 1
                };
                c.prototype.TestPoint = function(b, d) {
                    b = U.MulXV(b, this.m_p, c.TestPoint_s_center);
                    d = r.SubVV(d, b, c.TestPoint_s_d);
                    return r.DotVV(d, d) <= a(this.m_radius)
                };
                c.prototype.ComputeDistance = function(a, b, d, e) {
                    a = U.MulXV(a, this.m_p, c.ComputeDistance_s_center);
                    r.SubVV(b, a, d);
                    return d.Normalize() - this.m_radius
                };
                c.prototype.RayCast = function(b, d, e, f) {
                    e = U.MulXV(e, this.m_p, c.RayCast_s_position);
                    e = r.SubVV(d.p1, e, c.RayCast_s_s);
                    var g = r.DotVV(e,
                        e) - a(this.m_radius);
                    f = r.SubVV(d.p2, d.p1, c.RayCast_s_r);
                    var h = r.DotVV(e, f),
                        k = r.DotVV(f, f);
                    g = h * h - k * g;
                    if (0 > g || 1E-5 > k) return !1;
                    h = -(h + ea(g));
                    return 0 <= h && h <= d.maxFraction * k ? (h /= k, b.fraction = h, r.AddVMulSV(e, h, f, b.normal).SelfNormalize(), !0) : !1
                };
                c.prototype.ComputeAABB = function(a, b, d) {
                    b = U.MulXV(b, this.m_p, c.ComputeAABB_s_p);
                    a.lowerBound.Set(b.x - this.m_radius, b.y - this.m_radius);
                    a.upperBound.Set(b.x + this.m_radius, b.y + this.m_radius)
                };
                c.prototype.ComputeMass = function(b, c) {
                    var d = a(this.m_radius);
                    b.mass = 3.14159265359 *
                        c * d;
                    b.center.Copy(this.m_p);
                    b.I = b.mass * (.5 * d + r.DotVV(this.m_p, this.m_p))
                };
                c.prototype.SetupDistanceProxy = function(a, b) {
                    a.m_vertices = a.m_buffer;
                    a.m_vertices[0].Copy(this.m_p);
                    a.m_count = 1;
                    a.m_radius = this.m_radius
                };
                c.prototype.ComputeSubmergedArea = function(a, b, c, d) {
                    c = U.MulXV(c, this.m_p, new r);
                    var e = -(r.DotVV(a, c) - b);
                    if (e < -this.m_radius + 1E-5) return 0;
                    if (e > this.m_radius) return d.Copy(c), 3.14159265359 * this.m_radius * this.m_radius;
                    b = this.m_radius * this.m_radius;
                    var f = e * e;
                    e = b * (ca(e / this.m_radius) + 1.570796326795) +
                        e * ea(b - f);
                    b = -2 / 3 * ja(b - f, 1.5) / e;
                    d.x = c.x + a.x * b;
                    d.y = c.y + a.y * b;
                    return e
                };
                c.prototype.Dump = function(a) {
                    a("    const shape: b2CircleShape = new b2CircleShape();\n");
                    a("    shape.m_radius = %.15f;\n", this.m_radius);
                    a("    shape.m_p.Set(%.15f, %.15f);\n", this.m_p.x, this.m_p.y)
                };
                c.TestPoint_s_center = new r;
                c.TestPoint_s_d = new r;
                c.ComputeDistance_s_center = new r;
                c.RayCast_s_position = new r;
                c.RayCast_s_s = new r;
                c.RayCast_s_r = new r;
                c.ComputeAABB_s_p = new r;
                return c
            }(Xa), Gd = function(a) {
                function b() {
                    var b = a.call(this,
                        h.b2ShapeType.e_polygonShape, .016) || this;
                    b.m_centroid = new r(0, 0);
                    b.m_vertices = [];
                    b.m_normals = [];
                    b.m_count = 0;
                    return b
                }
                C(b, a);
                b.prototype.Clone = function() {
                    return (new b).Copy(this)
                };
                b.prototype.Copy = function(b) {
                    a.prototype.Copy.call(this, b);
                    this.m_centroid.Copy(b.m_centroid);
                    this.m_count = b.m_count;
                    this.m_vertices = r.MakeArray(this.m_count);
                    this.m_normals = r.MakeArray(this.m_count);
                    for (var c = 0; c < this.m_count; ++c) this.m_vertices[c].Copy(b.m_vertices[c]), this.m_normals[c].Copy(b.m_normals[c]);
                    return this
                };
                b.prototype.GetChildCount = function() {
                    return 1
                };
                b.prototype.Set = function(a, c, d) {
                    void 0 === c && (c = a.length);
                    void 0 === d && (d = 0);
                    if (3 > c) return this.SetAsBox(1, 1);
                    c = W(c, 8);
                    for (var e = b.Set_s_ps, f = 0, g = 0; g < c; ++g) {
                        var h = a[d + g];
                        for (var k = !0, l = 0; l < f; ++l)
                            if (1.6E-5 > r.DistanceSquaredVV(h, e[l])) {
                                k = !1;
                                break
                            }
                        k && e[f++].Copy(h)
                    }
                    c = f;
                    if (3 > c) return this.SetAsBox(1, 1);
                    a = 0;
                    h = e[0].x;
                    for (g = 1; g < c; ++g)
                        if (l = e[g].x, l > h || l === h && e[g].y < e[a].y) a = g, h = l;
                    f = b.Set_s_hull;
                    d = 0;
                    for (g = a;;) {
                        f[d] = g;
                        k = 0;
                        for (l = 1; l < c; ++l)
                            if (k === g) k = l;
                            else {
                                var H =
                                    r.SubVV(e[k], e[f[d]], b.Set_s_r);
                                h = r.SubVV(e[l], e[f[d]], b.Set_s_v);
                                var J = r.CrossVV(H, h);
                                0 > J && (k = l);
                                0 === J && h.LengthSquared() > H.LengthSquared() && (k = l)
                            }++d;
                        g = k;
                        if (k === a) break
                    }
                    this.m_count = d;
                    this.m_vertices = r.MakeArray(this.m_count);
                    this.m_normals = r.MakeArray(this.m_count);
                    for (g = 0; g < d; ++g) this.m_vertices[g].Copy(e[f[g]]);
                    for (g = 0; g < d; ++g) c = r.SubVV(this.m_vertices[(g + 1) % d], this.m_vertices[g], r.s_t0), r.CrossVOne(c, this.m_normals[g]).SelfNormalize();
                    b.ComputeCentroid(this.m_vertices, d, this.m_centroid);
                    return this
                };
                b.prototype.SetAsArray = function(a, b) {
                    void 0 === b && (b = a.length);
                    return this.Set(a, b)
                };
                b.prototype.SetAsBox = function(a, b, c, d) {
                    void 0 === d && (d = 0);
                    this.m_count = 4;
                    this.m_vertices = r.MakeArray(this.m_count);
                    this.m_normals = r.MakeArray(this.m_count);
                    this.m_vertices[0].Set(-a, -b);
                    this.m_vertices[1].Set(a, -b);
                    this.m_vertices[2].Set(a, b);
                    this.m_vertices[3].Set(-a, b);
                    this.m_normals[0].Set(0, -1);
                    this.m_normals[1].Set(1, 0);
                    this.m_normals[2].Set(0, 1);
                    this.m_normals[3].Set(-1, 0);
                    this.m_centroid.SetZero();
                    if (c)
                        for (this.m_centroid.Copy(c),
                            a = new U, a.SetPosition(c), a.SetRotationAngle(d), c = 0; c < this.m_count; ++c) U.MulXV(a, this.m_vertices[c], this.m_vertices[c]), P.MulRV(a.q, this.m_normals[c], this.m_normals[c]);
                    return this
                };
                b.prototype.TestPoint = function(a, c) {
                    a = U.MulTXV(a, c, b.TestPoint_s_pLocal);
                    for (c = 0; c < this.m_count; ++c)
                        if (0 < r.DotVV(this.m_normals[c], r.SubVV(a, this.m_vertices[c], r.s_t0))) return !1;
                    return !0
                };
                b.prototype.ComputeDistance = function(a, c, d, e) {
                    c = U.MulTXV(a, c, b.ComputeDistance_s_pLocal);
                    var f = -1E37,
                        g = b.ComputeDistance_s_normalForMaxDistance.Copy(c);
                    for (e = 0; e < this.m_count; ++e) {
                        var h = r.DotVV(this.m_normals[e], r.SubVV(c, this.m_vertices[e], r.s_t0));
                        h > f && (f = h, g.Copy(this.m_normals[e]))
                    }
                    if (0 < f) {
                        g = b.ComputeDistance_s_minDistance.Copy(g);
                        f *= f;
                        for (e = 0; e < this.m_count; ++e) {
                            h = r.SubVV(c, this.m_vertices[e], b.ComputeDistance_s_distance);
                            var k = h.LengthSquared();
                            f > k && (g.Copy(h), f = k)
                        }
                        P.MulRV(a.q, g, d);
                        d.Normalize();
                        return Math.sqrt(f)
                    }
                    P.MulRV(a.q, g, d);
                    return f
                };
                b.prototype.RayCast = function(a, c, d, e) {
                    e = U.MulTXV(d, c.p1, b.RayCast_s_p1);
                    var f = U.MulTXV(d, c.p2, b.RayCast_s_p2);
                    f = r.SubVV(f, e, b.RayCast_s_d);
                    var g = 0;
                    c = c.maxFraction;
                    for (var h = -1, k = 0; k < this.m_count; ++k) {
                        var l = r.DotVV(this.m_normals[k], r.SubVV(this.m_vertices[k], e, r.s_t0)),
                            H = r.DotVV(this.m_normals[k], f);
                        if (0 === H) {
                            if (0 > l) return !1
                        } else 0 > H && l < g * H ? (g = l / H, h = k) : 0 < H && l < c * H && (c = l / H);
                        if (c < g) return !1
                    }
                    return 0 <= h ? (a.fraction = g, P.MulRV(d.q, this.m_normals[h], a.normal), !0) : !1
                };
                b.prototype.ComputeAABB = function(a, c, d) {
                    d = U.MulXV(c, this.m_vertices[0], a.lowerBound);
                    a = a.upperBound.Copy(d);
                    for (var e = 0; e < this.m_count; ++e) {
                        var f =
                            U.MulXV(c, this.m_vertices[e], b.ComputeAABB_s_v);
                        r.MinV(f, d, d);
                        r.MaxV(f, a, a)
                    }
                    c = this.m_radius;
                    d.SelfSubXY(c, c);
                    a.SelfAddXY(c, c)
                };
                b.prototype.ComputeMass = function(a, c) {
                    for (var d = b.ComputeMass_s_center.SetZero(), e = 0, f = 0, g = b.ComputeMass_s_s.SetZero(), h = 0; h < this.m_count; ++h) g.SelfAdd(this.m_vertices[h]);
                    g.SelfMul(1 / this.m_count);
                    var k = 1 / 3;
                    for (h = 0; h < this.m_count; ++h) {
                        var l = r.SubVV(this.m_vertices[h], g, b.ComputeMass_s_e1),
                            H = r.SubVV(this.m_vertices[(h + 1) % this.m_count], g, b.ComputeMass_s_e2),
                            m = r.CrossVV(l, H),
                            J = .5 * m;
                        e += J;
                        d.SelfAdd(r.MulSV(J * k, r.AddVV(l, H, r.s_t0), r.s_t1));
                        J = l.x;
                        l = l.y;
                        var n = H.x;
                        H = H.y;
                        f += .25 * k * m * (J * J + n * J + n * n + (l * l + H * l + H * H))
                    }
                    a.mass = c * e;
                    d.SelfMul(1 / e);
                    r.AddVV(d, g, a.center);
                    a.I = c * f;
                    a.I += a.mass * (r.DotVV(a.center, a.center) - r.DotVV(d, d))
                };
                b.prototype.Validate = function() {
                    for (var a = 0; a < this.m_count; ++a)
                        for (var c = a, d = (a + 1) % this.m_count, e = this.m_vertices[c], f = r.SubVV(this.m_vertices[d], e, b.Validate_s_e), g = 0; g < this.m_count; ++g)
                            if (g !== c && g !== d) {
                                var h = r.SubVV(this.m_vertices[g], e, b.Validate_s_v);
                                if (0 >
                                    r.CrossVV(f, h)) return !1
                            }
                    return !0
                };
                b.prototype.SetupDistanceProxy = function(a, b) {
                    a.m_vertices = this.m_vertices;
                    a.m_count = this.m_count;
                    a.m_radius = this.m_radius
                };
                b.prototype.ComputeSubmergedArea = function(a, c, d, e) {
                    var f = P.MulTRV(d.q, a, b.ComputeSubmergedArea_s_normalL),
                        g = c - r.DotVV(a, d.p),
                        h = b.ComputeSubmergedArea_s_depths,
                        k = 0;
                    a = c = -1;
                    for (var l = !1, H = 0; H < this.m_count; ++H) {
                        h[H] = r.DotVV(f, this.m_vertices[H]) - g;
                        var m = -1E-5 > h[H];
                        0 < H && (m ? l || (c = H - 1, k++) : l && (a = H - 1, k++));
                        l = m
                    }
                    switch (k) {
                        case 0:
                            return l ? (f = b.ComputeSubmergedArea_s_md,
                                this.ComputeMass(f, 1), U.MulXV(d, f.center, e), f.mass) : 0;
                        case 1:
                            -1 === c ? c = this.m_count - 1 : a = this.m_count - 1
                    }
                    g = (c + 1) % this.m_count;
                    f = (a + 1) % this.m_count;
                    k = (0 - h[c]) / (h[g] - h[c]);
                    h = (0 - h[a]) / (h[f] - h[a]);
                    c = b.ComputeSubmergedArea_s_intoVec.Set(this.m_vertices[c].x * (1 - k) + this.m_vertices[g].x * k, this.m_vertices[c].y * (1 - k) + this.m_vertices[g].y * k);
                    a = b.ComputeSubmergedArea_s_outoVec.Set(this.m_vertices[a].x * (1 - h) + this.m_vertices[f].x * h, this.m_vertices[a].y * (1 - h) + this.m_vertices[f].y * h);
                    h = 0;
                    k = b.ComputeSubmergedArea_s_center.SetZero();
                    l = this.m_vertices[g];
                    for (H = g; H !== f;) H = (H + 1) % this.m_count, g = H === f ? a : this.m_vertices[H], m = .5 * ((l.x - c.x) * (g.y - c.y) - (l.y - c.y) * (g.x - c.x)), h += m, k.x += m * (c.x + l.x + g.x) / 3, k.y += m * (c.y + l.y + g.y) / 3, l = g;
                    k.SelfMul(1 / h);
                    U.MulXV(d, k, e);
                    return h
                };
                b.prototype.Dump = function(a) {
                    a("    const shape: b2PolygonShape = new b2PolygonShape();\n");
                    a("    const vs: b2Vec2[] = b2Vec2.MakeArray(%d);\n", 8);
                    for (var b = 0; b < this.m_count; ++b) a("    vs[%d].Set(%.15f, %.15f);\n", b, this.m_vertices[b].x, this.m_vertices[b].y);
                    a("    shape.Set(vs, %d);\n",
                        this.m_count)
                };
                b.ComputeCentroid = function(a, c, d) {
                    d.SetZero();
                    for (var e = 0, f = b.ComputeCentroid_s_pRef.SetZero(), g = 1 / 3, h = 0; h < c; ++h) {
                        var k = f,
                            l = a[h],
                            H = a[(h + 1) % c],
                            m = r.SubVV(l, k, b.ComputeCentroid_s_e1),
                            J = r.SubVV(H, k, b.ComputeCentroid_s_e2);
                        m = .5 * r.CrossVV(m, J);
                        e += m;
                        d.x += m * g * (k.x + l.x + H.x);
                        d.y += m * g * (k.y + l.y + H.y)
                    }
                    d.SelfMul(1 / e);
                    return d
                };
                b.Set_s_ps = r.MakeArray(8);
                b.Set_s_hull = g(8);
                b.Set_s_r = new r;
                b.Set_s_v = new r;
                b.TestPoint_s_pLocal = new r;
                b.ComputeDistance_s_pLocal = new r;
                b.ComputeDistance_s_normalForMaxDistance =
                    new r;
                b.ComputeDistance_s_minDistance = new r;
                b.ComputeDistance_s_distance = new r;
                b.RayCast_s_p1 = new r;
                b.RayCast_s_p2 = new r;
                b.RayCast_s_d = new r;
                b.ComputeAABB_s_v = new r;
                b.ComputeMass_s_center = new r;
                b.ComputeMass_s_s = new r;
                b.ComputeMass_s_e1 = new r;
                b.ComputeMass_s_e2 = new r;
                b.Validate_s_e = new r;
                b.Validate_s_v = new r;
                b.ComputeSubmergedArea_s_normalL = new r;
                b.ComputeSubmergedArea_s_depths = g(8);
                b.ComputeSubmergedArea_s_md = new zb;
                b.ComputeSubmergedArea_s_intoVec = new r;
                b.ComputeSubmergedArea_s_outoVec = new r;
                b.ComputeSubmergedArea_s_center =
                    new r;
                b.ComputeCentroid_s_pRef = new r;
                b.ComputeCentroid_s_e1 = new r;
                b.ComputeCentroid_s_e2 = new r;
                return b
            }(Xa), db = function(a) {
                function b() {
                    var b = a.call(this, h.b2ShapeType.e_edgeShape, .016) || this;
                    b.m_vertex1 = new r;
                    b.m_vertex2 = new r;
                    b.m_vertex0 = new r;
                    b.m_vertex3 = new r;
                    b.m_hasVertex0 = !1;
                    b.m_hasVertex3 = !1;
                    return b
                }
                C(b, a);
                b.prototype.Set = function(a, b) {
                    this.m_vertex1.Copy(a);
                    this.m_vertex2.Copy(b);
                    this.m_hasVertex3 = this.m_hasVertex0 = !1;
                    return this
                };
                b.prototype.Clone = function() {
                    return (new b).Copy(this)
                };
                b.prototype.Copy =
                    function(b) {
                        a.prototype.Copy.call(this, b);
                        this.m_vertex1.Copy(b.m_vertex1);
                        this.m_vertex2.Copy(b.m_vertex2);
                        this.m_vertex0.Copy(b.m_vertex0);
                        this.m_vertex3.Copy(b.m_vertex3);
                        this.m_hasVertex0 = b.m_hasVertex0;
                        this.m_hasVertex3 = b.m_hasVertex3;
                        return this
                    };
                b.prototype.GetChildCount = function() {
                    return 1
                };
                b.prototype.TestPoint = function(a, b) {
                    return !1
                };
                b.prototype.ComputeDistance = function(a, c, d, e) {
                    var f = U.MulXV(a, this.m_vertex1, b.ComputeDistance_s_v1);
                    a = U.MulXV(a, this.m_vertex2, b.ComputeDistance_s_v2);
                    e = r.SubVV(c,
                        f, b.ComputeDistance_s_d);
                    f = r.SubVV(a, f, b.ComputeDistance_s_s);
                    var g = r.DotVV(e, f);
                    if (0 < g) {
                        var h = r.DotVV(f, f);
                        g > h ? r.SubVV(c, a, e) : e.SelfMulSub(g / h, f)
                    }
                    d.Copy(e);
                    return d.Normalize()
                };
                b.prototype.RayCast = function(a, c, d, e) {
                    var f = U.MulTXV(d, c.p1, b.RayCast_s_p1);
                    e = U.MulTXV(d, c.p2, b.RayCast_s_p2);
                    var g = r.SubVV(e, f, b.RayCast_s_d);
                    e = this.m_vertex1;
                    var h = this.m_vertex2,
                        k = r.SubVV(h, e, b.RayCast_s_e),
                        l = a.normal.Set(k.y, -k.x).SelfNormalize();
                    k = r.DotVV(l, r.SubVV(e, f, r.s_t0));
                    l = r.DotVV(l, g);
                    if (0 === l) return !1;
                    l = k / l;
                    if (0 > l || c.maxFraction < l) return !1;
                    c = r.AddVMulSV(f, l, g, b.RayCast_s_q);
                    f = r.SubVV(h, e, b.RayCast_s_r);
                    h = r.DotVV(f, f);
                    if (0 === h) return !1;
                    e = r.DotVV(r.SubVV(c, e, r.s_t0), f) / h;
                    if (0 > e || 1 < e) return !1;
                    a.fraction = l;
                    P.MulRV(d.q, a.normal, a.normal);
                    0 < k && a.normal.SelfNeg();
                    return !0
                };
                b.prototype.ComputeAABB = function(a, c, d) {
                    d = U.MulXV(c, this.m_vertex1, b.ComputeAABB_s_v1);
                    c = U.MulXV(c, this.m_vertex2, b.ComputeAABB_s_v2);
                    r.MinV(d, c, a.lowerBound);
                    r.MaxV(d, c, a.upperBound);
                    c = this.m_radius;
                    a.lowerBound.SelfSubXY(c, c);
                    a.upperBound.SelfAddXY(c,
                        c)
                };
                b.prototype.ComputeMass = function(a, b) {
                    a.mass = 0;
                    r.MidVV(this.m_vertex1, this.m_vertex2, a.center);
                    a.I = 0
                };
                b.prototype.SetupDistanceProxy = function(a, b) {
                    a.m_vertices = a.m_buffer;
                    a.m_vertices[0].Copy(this.m_vertex1);
                    a.m_vertices[1].Copy(this.m_vertex2);
                    a.m_count = 2;
                    a.m_radius = this.m_radius
                };
                b.prototype.ComputeSubmergedArea = function(a, b, c, d) {
                    d.SetZero();
                    return 0
                };
                b.prototype.Dump = function(a) {
                    a("    const shape: b2EdgeShape = new b2EdgeShape();\n");
                    a("    shape.m_radius = %.15f;\n", this.m_radius);
                    a("    shape.m_vertex0.Set(%.15f, %.15f);\n",
                        this.m_vertex0.x, this.m_vertex0.y);
                    a("    shape.m_vertex1.Set(%.15f, %.15f);\n", this.m_vertex1.x, this.m_vertex1.y);
                    a("    shape.m_vertex2.Set(%.15f, %.15f);\n", this.m_vertex2.x, this.m_vertex2.y);
                    a("    shape.m_vertex3.Set(%.15f, %.15f);\n", this.m_vertex3.x, this.m_vertex3.y);
                    a("    shape.m_hasVertex0 = %s;\n", this.m_hasVertex0);
                    a("    shape.m_hasVertex3 = %s;\n", this.m_hasVertex3)
                };
                b.ComputeDistance_s_v1 = new r;
                b.ComputeDistance_s_v2 = new r;
                b.ComputeDistance_s_d = new r;
                b.ComputeDistance_s_s = new r;
                b.RayCast_s_p1 =
                    new r;
                b.RayCast_s_p2 = new r;
                b.RayCast_s_d = new r;
                b.RayCast_s_e = new r;
                b.RayCast_s_q = new r;
                b.RayCast_s_r = new r;
                b.ComputeAABB_s_v1 = new r;
                b.ComputeAABB_s_v2 = new r;
                return b
            }(Xa), Hd = function(a) {
                function b() {
                    var b = a.call(this, h.b2ShapeType.e_chainShape, .016) || this;
                    b.m_vertices = [];
                    b.m_count = 0;
                    b.m_prevVertex = new r;
                    b.m_nextVertex = new r;
                    b.m_hasPrevVertex = !1;
                    b.m_hasNextVertex = !1;
                    return b
                }
                C(b, a);
                b.prototype.CreateLoop = function(a, b, c) {
                    void 0 === b && (b = a.length);
                    void 0 === c && (c = 0);
                    if (3 > b) return this;
                    this.m_count = b + 1;
                    this.m_vertices = r.MakeArray(this.m_count);
                    for (var d = 0; d < b; ++d) this.m_vertices[d].Copy(a[c + d]);
                    this.m_vertices[b].Copy(this.m_vertices[0]);
                    this.m_prevVertex.Copy(this.m_vertices[this.m_count - 2]);
                    this.m_nextVertex.Copy(this.m_vertices[1]);
                    this.m_hasNextVertex = this.m_hasPrevVertex = !0;
                    return this
                };
                b.prototype.CreateChain = function(a, b, c) {
                    void 0 === b && (b = a.length);
                    void 0 === c && (c = 0);
                    this.m_count = b;
                    this.m_vertices = r.MakeArray(b);
                    for (var d = 0; d < b; ++d) this.m_vertices[d].Copy(a[c + d]);
                    this.m_hasNextVertex = this.m_hasPrevVertex = !1;
                    this.m_prevVertex.SetZero();
                    this.m_nextVertex.SetZero();
                    return this
                };
                b.prototype.SetPrevVertex = function(a) {
                    this.m_prevVertex.Copy(a);
                    this.m_hasPrevVertex = !0;
                    return this
                };
                b.prototype.SetNextVertex = function(a) {
                    this.m_nextVertex.Copy(a);
                    this.m_hasNextVertex = !0;
                    return this
                };
                b.prototype.Clone = function() {
                    return (new b).Copy(this)
                };
                b.prototype.Copy = function(b) {
                    a.prototype.Copy.call(this, b);
                    this.CreateChain(b.m_vertices, b.m_count);
                    this.m_prevVertex.Copy(b.m_prevVertex);
                    this.m_nextVertex.Copy(b.m_nextVertex);
                    this.m_hasPrevVertex = b.m_hasPrevVertex;
                    this.m_hasNextVertex = b.m_hasNextVertex;
                    return this
                };
                b.prototype.GetChildCount = function() {
                    return this.m_count - 1
                };
                b.prototype.GetChildEdge = function(a, b) {
                    a.m_type = h.b2ShapeType.e_edgeShape;
                    a.m_radius = this.m_radius;
                    a.m_vertex1.Copy(this.m_vertices[b]);
                    a.m_vertex2.Copy(this.m_vertices[b + 1]);
                    0 < b ? (a.m_vertex0.Copy(this.m_vertices[b - 1]), a.m_hasVertex0 = !0) : (a.m_vertex0.Copy(this.m_prevVertex), a.m_hasVertex0 = this.m_hasPrevVertex);
                    b < this.m_count - 2 ? (a.m_vertex3.Copy(this.m_vertices[b +
                        2]), a.m_hasVertex3 = !0) : (a.m_vertex3.Copy(this.m_nextVertex), a.m_hasVertex3 = this.m_hasNextVertex)
                };
                b.prototype.TestPoint = function(a, b) {
                    return !1
                };
                b.prototype.ComputeDistance = function(a, c, d, e) {
                    var f = b.ComputeDistance_s_edgeShape;
                    this.GetChildEdge(f, e);
                    return f.ComputeDistance(a, c, d, 0)
                };
                b.prototype.RayCast = function(a, c, d, e) {
                    var f = b.RayCast_s_edgeShape;
                    f.m_vertex1.Copy(this.m_vertices[e]);
                    f.m_vertex2.Copy(this.m_vertices[(e + 1) % this.m_count]);
                    return f.RayCast(a, c, d, 0)
                };
                b.prototype.ComputeAABB = function(a,
                    c, d) {
                    var e = this.m_vertices[(d + 1) % this.m_count];
                    d = U.MulXV(c, this.m_vertices[d], b.ComputeAABB_s_v1);
                    c = U.MulXV(c, e, b.ComputeAABB_s_v2);
                    r.MinV(d, c, a.lowerBound);
                    r.MaxV(d, c, a.upperBound)
                };
                b.prototype.ComputeMass = function(a, b) {
                    a.mass = 0;
                    a.center.SetZero();
                    a.I = 0
                };
                b.prototype.SetupDistanceProxy = function(a, b) {
                    a.m_vertices = a.m_buffer;
                    a.m_vertices[0].Copy(this.m_vertices[b]);
                    b + 1 < this.m_count ? a.m_vertices[1].Copy(this.m_vertices[b + 1]) : a.m_vertices[1].Copy(this.m_vertices[0]);
                    a.m_count = 2;
                    a.m_radius = this.m_radius
                };
                b.prototype.ComputeSubmergedArea = function(a, b, c, d) {
                    d.SetZero();
                    return 0
                };
                b.prototype.Dump = function(a) {
                    a("    const shape: b2ChainShape = new b2ChainShape();\n");
                    a("    const vs: b2Vec2[] = b2Vec2.MakeArray(%d);\n", 8);
                    for (var b = 0; b < this.m_count; ++b) a("    vs[%d].Set(%.15f, %.15f);\n", b, this.m_vertices[b].x, this.m_vertices[b].y);
                    a("    shape.CreateChain(vs, %d);\n", this.m_count);
                    a("    shape.m_prevVertex.Set(%.15f, %.15f);\n", this.m_prevVertex.x, this.m_prevVertex.y);
                    a("    shape.m_nextVertex.Set(%.15f, %.15f);\n",
                        this.m_nextVertex.x, this.m_nextVertex.y);
                    a("    shape.m_hasPrevVertex = %s;\n", this.m_hasPrevVertex ? "true" : "false");
                    a("    shape.m_hasNextVertex = %s;\n", this.m_hasNextVertex ? "true" : "false")
                };
                b.ComputeDistance_s_edgeShape = new db;
                b.RayCast_s_edgeShape = new db;
                b.ComputeAABB_s_v1 = new r;
                b.ComputeAABB_s_v2 = new r;
                return b
            }(Xa), Ab = function() {
                function a() {
                    this.categoryBits = 1;
                    this.maskBits = 65535;
                    this.groupIndex = 0
                }
                a.prototype.Clone = function() {
                    return (new a).Copy(this)
                };
                a.prototype.Copy = function(a) {
                    this.categoryBits =
                        a.categoryBits;
                    this.maskBits = a.maskBits;
                    this.groupIndex = a.groupIndex || 0;
                    return this
                };
                a.DEFAULT = new a;
                return a
            }(), dc = function() {
                return function() {
                    this.userData = null;
                    this.friction = .2;
                    this.density = this.restitution = 0;
                    this.isSensor = !1;
                    this.filter = new Ab
                }
            }(), Gb = function() {
                return function(a) {
                    this.aabb = new va;
                    this.childIndex = 0;
                    this.fixture = a
                }
            }(), ec = function() {
                function a(a, b) {
                    this.m_density = 0;
                    this.m_next = null;
                    this.m_restitution = this.m_friction = 0;
                    this.m_proxies = [];
                    this.m_proxyCount = 0;
                    this.m_filter = new Ab;
                    this.m_isSensor = !1;
                    this.m_userData = null;
                    this.m_body = b;
                    this.m_shape = a.shape.Clone()
                }
                a.prototype.GetType = function() {
                    return this.m_shape.GetType()
                };
                a.prototype.GetShape = function() {
                    return this.m_shape
                };
                a.prototype.SetSensor = function(a) {
                    a !== this.m_isSensor && (this.m_body.SetAwake(!0), this.m_isSensor = a)
                };
                a.prototype.IsSensor = function() {
                    return this.m_isSensor
                };
                a.prototype.SetFilterData = function(a) {
                    this.m_filter.Copy(a);
                    this.Refilter()
                };
                a.prototype.GetFilterData = function() {
                    return this.m_filter
                };
                a.prototype.Refilter = function() {
                    for (var a =
                            this.m_body.GetContactList(); a;) {
                        var b = a.contact,
                            c = b.GetFixtureA(),
                            d = b.GetFixtureB();
                        c !== this && d !== this || b.FlagForFiltering();
                        a = a.next
                    }
                    a = this.m_body.GetWorld();
                    if (null !== a)
                        for (a = a.m_contactManager.m_broadPhase, b = 0; b < this.m_proxyCount; ++b) a.TouchProxy(this.m_proxies[b].treeNode)
                };
                a.prototype.GetBody = function() {
                    return this.m_body
                };
                a.prototype.GetNext = function() {
                    return this.m_next
                };
                a.prototype.GetUserData = function() {
                    return this.m_userData
                };
                a.prototype.SetUserData = function(a) {
                    this.m_userData = a
                };
                a.prototype.TestPoint =
                    function(a) {
                        return this.m_shape.TestPoint(this.m_body.GetTransform(), a)
                    };
                a.prototype.ComputeDistance = function(a, b, c) {
                    return this.m_shape.ComputeDistance(this.m_body.GetTransform(), a, b, c)
                };
                a.prototype.RayCast = function(a, b, c) {
                    return this.m_shape.RayCast(a, b, this.m_body.GetTransform(), c)
                };
                a.prototype.GetMassData = function(a) {
                    void 0 === a && (a = new zb);
                    this.m_shape.ComputeMass(a, this.m_density);
                    return a
                };
                a.prototype.SetDensity = function(a) {
                    this.m_density = a
                };
                a.prototype.GetDensity = function() {
                    return this.m_density
                };
                a.prototype.GetFriction = function() {
                    return this.m_friction
                };
                a.prototype.SetFriction = function(a) {
                    this.m_friction = a
                };
                a.prototype.GetRestitution = function() {
                    return this.m_restitution
                };
                a.prototype.SetRestitution = function(a) {
                    this.m_restitution = a
                };
                a.prototype.GetAABB = function(a) {
                    return this.m_proxies[a].aabb
                };
                a.prototype.Dump = function(a, b) {
                    a("    const fd: b2FixtureDef = new b2FixtureDef();\n");
                    a("    fd.friction = %.15f;\n", this.m_friction);
                    a("    fd.restitution = %.15f;\n", this.m_restitution);
                    a("    fd.density = %.15f;\n",
                        this.m_density);
                    a("    fd.isSensor = %s;\n", this.m_isSensor ? "true" : "false");
                    a("    fd.filter.categoryBits = %d;\n", this.m_filter.categoryBits);
                    a("    fd.filter.maskBits = %d;\n", this.m_filter.maskBits);
                    a("    fd.filter.groupIndex = %d;\n", this.m_filter.groupIndex);
                    this.m_shape.Dump(a);
                    a("\n");
                    a("    fd.shape = shape;\n");
                    a("\n");
                    a("    bodies[%d].CreateFixture(fd);\n", b)
                };
                a.prototype.Create = function(a) {
                    var b = this;
                    this.m_userData = a.userData;
                    this.m_friction = e(a.friction, .2);
                    this.m_restitution = e(a.restitution,
                        0);
                    this.m_next = null;
                    this.m_filter.Copy(e(a.filter, Ab.DEFAULT));
                    this.m_isSensor = e(a.isSensor, !1);
                    this.m_proxies = d(this.m_shape.GetChildCount(), function(a) {
                        return new Gb(b)
                    });
                    this.m_proxyCount = 0;
                    this.m_density = e(a.density, 0)
                };
                a.prototype.Destroy = function() {};
                a.prototype.CreateProxies = function(a) {
                    var b = this.m_body.m_world.m_contactManager.m_broadPhase;
                    this.m_proxyCount = this.m_shape.GetChildCount();
                    for (var c = 0; c < this.m_proxyCount; ++c) {
                        var d = this.m_proxies[c] = new Gb(this);
                        this.m_shape.ComputeAABB(d.aabb,
                            a, c);
                        d.treeNode = b.CreateProxy(d.aabb, d);
                        d.childIndex = c
                    }
                };
                a.prototype.DestroyProxies = function() {
                    for (var a = this.m_body.m_world.m_contactManager.m_broadPhase, b = 0; b < this.m_proxyCount; ++b) {
                        var c = this.m_proxies[b];
                        delete c.treeNode.userData;
                        a.DestroyProxy(c.treeNode);
                        delete c.treeNode
                    }
                    this.m_proxyCount = 0
                };
                a.prototype.TouchProxies = function() {
                    for (var a = this.m_body.m_world.m_contactManager.m_broadPhase, b = this.m_proxyCount, c = 0; c < b; ++c) a.TouchProxy(this.m_proxies[c].treeNode)
                };
                a.prototype.Synchronize = function(b,
                    c) {
                    if (0 !== this.m_proxyCount)
                        for (var d = this.m_body.m_world.m_contactManager.m_broadPhase, e = 0; e < this.m_proxyCount; ++e) {
                            var f = this.m_proxies[e],
                                g = a.Synchronize_s_aabb1,
                                h = a.Synchronize_s_aabb2;
                            this.m_shape.ComputeAABB(g, b, e);
                            this.m_shape.ComputeAABB(h, c, e);
                            f.aabb.Combine2(g, h);
                            g = r.SubVV(c.p, b.p, a.Synchronize_s_displacement);
                            d.MoveProxy(f.treeNode, f.aabb, g)
                        }
                };
                a.Synchronize_s_aabb1 = new va;
                a.Synchronize_s_aabb2 = new va;
                a.Synchronize_s_displacement = new r;
                return a
            }();
            (function(a) {
                a[a.b2_unknown = -1] = "b2_unknown";
                a[a.b2_staticBody = 0] = "b2_staticBody";
                a[a.b2_kinematicBody = 1] = "b2_kinematicBody";
                a[a.b2_dynamicBody = 2] = "b2_dynamicBody"
            })(h.b2BodyType || (h.b2BodyType = {}));
            var Id = function() {
                    return function() {
                        this.type = h.b2BodyType.b2_staticBody;
                        this.position = new r(0, 0);
                        this.angle = 0;
                        this.linearVelocity = new r(0, 0);
                        this.angularDamping = this.linearDamping = this.angularVelocity = 0;
                        this.awake = this.allowSleep = !0;
                        this.bullet = this.fixedRotation = !1;
                        this.active = !0;
                        this.userData = null;
                        this.gravityScale = 1
                    }
                }(),
                fc = function() {
                    function a(a,
                        b) {
                        this.m_type = h.b2BodyType.b2_staticBody;
                        this.m_toiFlag = this.m_activeFlag = this.m_fixedRotationFlag = this.m_bulletFlag = this.m_autoSleepFlag = this.m_awakeFlag = this.m_islandFlag = !1;
                        this.m_islandIndex = 0;
                        this.m_xf = new U;
                        this.m_xf0 = new U;
                        this.m_sweep = new ua;
                        this.m_linearVelocity = new r;
                        this.m_angularVelocity = 0;
                        this.m_force = new r;
                        this.m_torque = 0;
                        this.m_fixtureList = this.m_next = this.m_prev = null;
                        this.m_fixtureCount = 0;
                        this.m_contactList = this.m_jointList = null;
                        this.m_invMass = this.m_mass = 1;
                        this.m_angularDamping =
                            this.m_linearDamping = this.m_invI = this.m_I = 0;
                        this.m_gravityScale = 1;
                        this.m_sleepTime = 0;
                        this.m_controllerList = this.m_userData = null;
                        this.m_controllerCount = 0;
                        this.m_bulletFlag = e(a.bullet, !1);
                        this.m_fixedRotationFlag = e(a.fixedRotation, !1);
                        this.m_autoSleepFlag = e(a.allowSleep, !0);
                        this.m_awakeFlag = e(a.awake, !0);
                        this.m_activeFlag = e(a.active, !0);
                        this.m_world = b;
                        this.m_xf.p.Copy(e(a.position, r.ZERO));
                        this.m_xf.q.SetAngle(e(a.angle, 0));
                        this.m_xf0.Copy(this.m_xf);
                        this.m_sweep.localCenter.SetZero();
                        this.m_sweep.c0.Copy(this.m_xf.p);
                        this.m_sweep.c.Copy(this.m_xf.p);
                        this.m_sweep.a0 = this.m_sweep.a = this.m_xf.q.GetAngle();
                        this.m_sweep.alpha0 = 0;
                        this.m_linearVelocity.Copy(e(a.linearVelocity, r.ZERO));
                        this.m_angularVelocity = e(a.angularVelocity, 0);
                        this.m_linearDamping = e(a.linearDamping, 0);
                        this.m_angularDamping = e(a.angularDamping, 0);
                        this.m_gravityScale = e(a.gravityScale, 1);
                        this.m_force.SetZero();
                        this.m_sleepTime = this.m_torque = 0;
                        this.m_type = e(a.type, h.b2BodyType.b2_staticBody);
                        this.m_invMass = a.type === h.b2BodyType.b2_dynamicBody ? this.m_mass =
                            1 : this.m_mass = 0;
                        this.m_invI = this.m_I = 0;
                        this.m_userData = a.userData;
                        this.m_fixtureList = null;
                        this.m_fixtureCount = 0;
                        this.m_controllerList = null;
                        this.m_controllerCount = 0
                    }
                    a.prototype.CreateFixture = function(a, b) {
                        void 0 === b && (b = 0);
                        return a instanceof Xa ? this.CreateFixtureShapeDensity(a, b) : this.CreateFixtureDef(a)
                    };
                    a.prototype.CreateFixtureDef = function(a) {
                        if (this.m_world.IsLocked()) throw Error();
                        var b = new ec(a, this);
                        b.Create(a);
                        this.m_activeFlag && b.CreateProxies(this.m_xf);
                        b.m_next = this.m_fixtureList;
                        this.m_fixtureList =
                            b;
                        ++this.m_fixtureCount;
                        0 < b.m_density && this.ResetMassData();
                        this.m_world.m_newFixture = !0;
                        return b
                    };
                    a.prototype.CreateFixtureShapeDensity = function(b, c) {
                        void 0 === c && (c = 0);
                        var d = a.CreateFixtureShapeDensity_s_def;
                        d.shape = b;
                        d.density = c;
                        return this.CreateFixtureDef(d)
                    };
                    a.prototype.DestroyFixture = function(a) {
                        if (this.m_world.IsLocked()) throw Error();
                        for (var b = this.m_fixtureList, c = null; null !== b;) {
                            if (b === a) {
                                c ? c.m_next = a.m_next : this.m_fixtureList = a.m_next;
                                break
                            }
                            c = b;
                            b = b.m_next
                        }
                        for (b = this.m_contactList; b;) {
                            c =
                                b.contact;
                            b = b.next;
                            var d = c.GetFixtureA(),
                                e = c.GetFixtureB();
                            a !== d && a !== e || this.m_world.m_contactManager.Destroy(c)
                        }
                        this.m_activeFlag && a.DestroyProxies();
                        a.m_next = null;
                        a.Destroy();
                        --this.m_fixtureCount;
                        this.ResetMassData()
                    };
                    a.prototype.SetTransformVec = function(a, b) {
                        this.SetTransformXY(a.x, a.y, b)
                    };
                    a.prototype.SetTransformXY = function(a, b, c) {
                        if (this.m_world.IsLocked()) throw Error();
                        this.m_xf.q.SetAngle(c);
                        this.m_xf.p.Set(a, b);
                        this.m_xf0.Copy(this.m_xf);
                        U.MulXV(this.m_xf, this.m_sweep.localCenter, this.m_sweep.c);
                        this.m_sweep.a = c;
                        this.m_sweep.c0.Copy(this.m_sweep.c);
                        this.m_sweep.a0 = c;
                        for (a = this.m_fixtureList; a; a = a.m_next) a.Synchronize(this.m_xf, this.m_xf);
                        this.m_world.m_contactManager.FindNewContacts()
                    };
                    a.prototype.SetTransform = function(a) {
                        this.SetTransformVec(a.p, a.GetAngle())
                    };
                    a.prototype.GetTransform = function() {
                        return this.m_xf
                    };
                    a.prototype.GetPosition = function() {
                        return this.m_xf.p
                    };
                    a.prototype.SetPosition = function(a) {
                        this.SetTransformVec(a, this.GetAngle())
                    };
                    a.prototype.SetPositionXY = function(a, b) {
                        this.SetTransformXY(a,
                            b, this.GetAngle())
                    };
                    a.prototype.GetAngle = function() {
                        return this.m_sweep.a
                    };
                    a.prototype.SetAngle = function(a) {
                        this.SetTransformVec(this.GetPosition(), a)
                    };
                    a.prototype.GetWorldCenter = function() {
                        return this.m_sweep.c
                    };
                    a.prototype.GetLocalCenter = function() {
                        return this.m_sweep.localCenter
                    };
                    a.prototype.SetLinearVelocity = function(a) {
                        this.m_type !== h.b2BodyType.b2_staticBody && (0 < r.DotVV(a, a) && this.SetAwake(!0), this.m_linearVelocity.Copy(a))
                    };
                    a.prototype.GetLinearVelocity = function() {
                        return this.m_linearVelocity
                    };
                    a.prototype.SetAngularVelocity = function(a) {
                        this.m_type !== h.b2BodyType.b2_staticBody && (0 < a * a && this.SetAwake(!0), this.m_angularVelocity = a)
                    };
                    a.prototype.GetAngularVelocity = function() {
                        return this.m_angularVelocity
                    };
                    a.prototype.GetDefinition = function(a) {
                        a.type = this.GetType();
                        a.allowSleep = this.m_autoSleepFlag;
                        a.angle = this.GetAngle();
                        a.angularDamping = this.m_angularDamping;
                        a.gravityScale = this.m_gravityScale;
                        a.angularVelocity = this.m_angularVelocity;
                        a.fixedRotation = this.m_fixedRotationFlag;
                        a.bullet = this.m_bulletFlag;
                        a.awake = this.m_awakeFlag;
                        a.linearDamping = this.m_linearDamping;
                        a.linearVelocity.Copy(this.GetLinearVelocity());
                        a.position.Copy(this.GetPosition());
                        a.userData = this.GetUserData();
                        return a
                    };
                    a.prototype.ApplyForce = function(a, b, c) {
                        void 0 === c && (c = !0);
                        this.m_type === h.b2BodyType.b2_dynamicBody && (c && !this.m_awakeFlag && this.SetAwake(!0), this.m_awakeFlag && (this.m_force.x += a.x, this.m_force.y += a.y, this.m_torque += (b.x - this.m_sweep.c.x) * a.y - (b.y - this.m_sweep.c.y) * a.x))
                    };
                    a.prototype.ApplyForceToCenter = function(a,
                        b) {
                        void 0 === b && (b = !0);
                        this.m_type === h.b2BodyType.b2_dynamicBody && (b && !this.m_awakeFlag && this.SetAwake(!0), this.m_awakeFlag && (this.m_force.x += a.x, this.m_force.y += a.y))
                    };
                    a.prototype.ApplyTorque = function(a, b) {
                        void 0 === b && (b = !0);
                        this.m_type === h.b2BodyType.b2_dynamicBody && (b && !this.m_awakeFlag && this.SetAwake(!0), this.m_awakeFlag && (this.m_torque += a))
                    };
                    a.prototype.ApplyLinearImpulse = function(a, b, c) {
                        void 0 === c && (c = !0);
                        this.m_type === h.b2BodyType.b2_dynamicBody && (c && !this.m_awakeFlag && this.SetAwake(!0), this.m_awakeFlag &&
                            (this.m_linearVelocity.x += this.m_invMass * a.x, this.m_linearVelocity.y += this.m_invMass * a.y, this.m_angularVelocity += this.m_invI * ((b.x - this.m_sweep.c.x) * a.y - (b.y - this.m_sweep.c.y) * a.x)))
                    };
                    a.prototype.ApplyLinearImpulseToCenter = function(a, b) {
                        void 0 === b && (b = !0);
                        this.m_type === h.b2BodyType.b2_dynamicBody && (b && !this.m_awakeFlag && this.SetAwake(!0), this.m_awakeFlag && (this.m_linearVelocity.x += this.m_invMass * a.x, this.m_linearVelocity.y += this.m_invMass * a.y))
                    };
                    a.prototype.ApplyAngularImpulse = function(a, b) {
                        void 0 ===
                            b && (b = !0);
                        this.m_type === h.b2BodyType.b2_dynamicBody && (b && !this.m_awakeFlag && this.SetAwake(!0), this.m_awakeFlag && (this.m_angularVelocity += this.m_invI * a))
                    };
                    a.prototype.GetMass = function() {
                        return this.m_mass
                    };
                    a.prototype.GetInertia = function() {
                        return this.m_I + this.m_mass * r.DotVV(this.m_sweep.localCenter, this.m_sweep.localCenter)
                    };
                    a.prototype.GetMassData = function(a) {
                        a.mass = this.m_mass;
                        a.I = this.m_I + this.m_mass * r.DotVV(this.m_sweep.localCenter, this.m_sweep.localCenter);
                        a.center.Copy(this.m_sweep.localCenter);
                        return a
                    };
                    a.prototype.SetMassData = function(b) {
                        if (this.m_world.IsLocked()) throw Error();
                        if (this.m_type === h.b2BodyType.b2_dynamicBody) {
                            this.m_invI = this.m_I = this.m_invMass = 0;
                            this.m_mass = b.mass;
                            0 >= this.m_mass && (this.m_mass = 1);
                            this.m_invMass = 1 / this.m_mass;
                            0 < b.I && !this.m_fixedRotationFlag && (this.m_I = b.I - this.m_mass * r.DotVV(b.center, b.center), this.m_invI = 1 / this.m_I);
                            var c = a.SetMassData_s_oldCenter.Copy(this.m_sweep.c);
                            this.m_sweep.localCenter.Copy(b.center);
                            U.MulXV(this.m_xf, this.m_sweep.localCenter, this.m_sweep.c);
                            this.m_sweep.c0.Copy(this.m_sweep.c);
                            r.AddVCrossSV(this.m_linearVelocity, this.m_angularVelocity, r.SubVV(this.m_sweep.c, c, r.s_t0), this.m_linearVelocity)
                        }
                    };
                    a.prototype.ResetMassData = function() {
                        this.m_invI = this.m_I = this.m_invMass = this.m_mass = 0;
                        this.m_sweep.localCenter.SetZero();
                        if (this.m_type === h.b2BodyType.b2_staticBody || this.m_type === h.b2BodyType.b2_kinematicBody) this.m_sweep.c0.Copy(this.m_xf.p), this.m_sweep.c.Copy(this.m_xf.p), this.m_sweep.a0 = this.m_sweep.a;
                        else {
                            for (var b = a.ResetMassData_s_localCenter.SetZero(),
                                    c = this.m_fixtureList; c; c = c.m_next)
                                if (0 !== c.m_density) {
                                    var d = c.GetMassData(a.ResetMassData_s_massData);
                                    this.m_mass += d.mass;
                                    b.x += d.center.x * d.mass;
                                    b.y += d.center.y * d.mass;
                                    this.m_I += d.I
                                }
                            0 < this.m_mass ? (this.m_invMass = 1 / this.m_mass, b.x *= this.m_invMass, b.y *= this.m_invMass) : this.m_invMass = this.m_mass = 1;
                            0 < this.m_I && !this.m_fixedRotationFlag ? (this.m_I -= this.m_mass * r.DotVV(b, b), this.m_invI = 1 / this.m_I) : this.m_invI = this.m_I = 0;
                            c = a.ResetMassData_s_oldCenter.Copy(this.m_sweep.c);
                            this.m_sweep.localCenter.Copy(b);
                            U.MulXV(this.m_xf, this.m_sweep.localCenter, this.m_sweep.c);
                            this.m_sweep.c0.Copy(this.m_sweep.c);
                            r.AddVCrossSV(this.m_linearVelocity, this.m_angularVelocity, r.SubVV(this.m_sweep.c, c, r.s_t0), this.m_linearVelocity)
                        }
                    };
                    a.prototype.GetWorldPoint = function(a, b) {
                        return U.MulXV(this.m_xf, a, b)
                    };
                    a.prototype.GetWorldVector = function(a, b) {
                        return P.MulRV(this.m_xf.q, a, b)
                    };
                    a.prototype.GetLocalPoint = function(a, b) {
                        return U.MulTXV(this.m_xf, a, b)
                    };
                    a.prototype.GetLocalVector = function(a, b) {
                        return P.MulTRV(this.m_xf.q, a,
                            b)
                    };
                    a.prototype.GetLinearVelocityFromWorldPoint = function(a, b) {
                        return r.AddVCrossSV(this.m_linearVelocity, this.m_angularVelocity, r.SubVV(a, this.m_sweep.c, r.s_t0), b)
                    };
                    a.prototype.GetLinearVelocityFromLocalPoint = function(a, b) {
                        return this.GetLinearVelocityFromWorldPoint(this.GetWorldPoint(a, b), b)
                    };
                    a.prototype.GetLinearDamping = function() {
                        return this.m_linearDamping
                    };
                    a.prototype.SetLinearDamping = function(a) {
                        this.m_linearDamping = a
                    };
                    a.prototype.GetAngularDamping = function() {
                        return this.m_angularDamping
                    };
                    a.prototype.SetAngularDamping =
                        function(a) {
                            this.m_angularDamping = a
                        };
                    a.prototype.GetGravityScale = function() {
                        return this.m_gravityScale
                    };
                    a.prototype.SetGravityScale = function(a) {
                        this.m_gravityScale = a
                    };
                    a.prototype.SetType = function(a) {
                        if (this.m_world.IsLocked()) throw Error();
                        if (this.m_type !== a) {
                            this.m_type = a;
                            this.ResetMassData();
                            this.m_type === h.b2BodyType.b2_staticBody && (this.m_linearVelocity.SetZero(), this.m_angularVelocity = 0, this.m_sweep.a0 = this.m_sweep.a, this.m_sweep.c0.Copy(this.m_sweep.c), this.SynchronizeFixtures());
                            this.SetAwake(!0);
                            this.m_force.SetZero();
                            this.m_torque = 0;
                            for (a = this.m_contactList; a;) {
                                var b = a;
                                a = a.next;
                                this.m_world.m_contactManager.Destroy(b.contact)
                            }
                            this.m_contactList = null;
                            for (a = this.m_fixtureList; a; a = a.m_next) a.TouchProxies()
                        }
                    };
                    a.prototype.GetType = function() {
                        return this.m_type
                    };
                    a.prototype.SetBullet = function(a) {
                        this.m_bulletFlag = a
                    };
                    a.prototype.IsBullet = function() {
                        return this.m_bulletFlag
                    };
                    a.prototype.SetSleepingAllowed = function(a) {
                        (this.m_autoSleepFlag = a) || this.SetAwake(!0)
                    };
                    a.prototype.IsSleepingAllowed = function() {
                        return this.m_autoSleepFlag
                    };
                    a.prototype.SetAwake = function(a) {
                        a ? (this.m_awakeFlag = !0, this.m_sleepTime = 0) : (this.m_awakeFlag = !1, this.m_sleepTime = 0, this.m_linearVelocity.SetZero(), this.m_angularVelocity = 0, this.m_force.SetZero(), this.m_torque = 0)
                    };
                    a.prototype.IsAwake = function() {
                        return this.m_awakeFlag
                    };
                    a.prototype.SetActive = function(a) {
                        if (this.m_world.IsLocked()) throw Error();
                        if (a !== this.IsActive())
                            if (this.m_activeFlag = a)
                                for (a = this.m_fixtureList; a; a = a.m_next) a.CreateProxies(this.m_xf);
                            else {
                                for (a = this.m_fixtureList; a; a = a.m_next) a.DestroyProxies();
                                for (a = this.m_contactList; a;) {
                                    var b = a;
                                    a = a.next;
                                    this.m_world.m_contactManager.Destroy(b.contact)
                                }
                                this.m_contactList = null
                            }
                    };
                    a.prototype.IsActive = function() {
                        return this.m_activeFlag
                    };
                    a.prototype.SetFixedRotation = function(a) {
                        this.m_fixedRotationFlag !== a && (this.m_fixedRotationFlag = a, this.m_angularVelocity = 0, this.ResetMassData())
                    };
                    a.prototype.IsFixedRotation = function() {
                        return this.m_fixedRotationFlag
                    };
                    a.prototype.GetFixtureList = function() {
                        return this.m_fixtureList
                    };
                    a.prototype.GetJointList = function() {
                        return this.m_jointList
                    };
                    a.prototype.GetContactList = function() {
                        return this.m_contactList
                    };
                    a.prototype.GetNext = function() {
                        return this.m_next
                    };
                    a.prototype.GetUserData = function() {
                        return this.m_userData
                    };
                    a.prototype.SetUserData = function(a) {
                        this.m_userData = a
                    };
                    a.prototype.GetWorld = function() {
                        return this.m_world
                    };
                    a.prototype.Dump = function(a) {
                        var b = this.m_islandIndex;
                        a("{\n");
                        a("  const bd: b2BodyDef = new b2BodyDef();\n");
                        var c = "";
                        switch (this.m_type) {
                            case h.b2BodyType.b2_staticBody:
                                c = "b2BodyType.b2_staticBody";
                                break;
                            case h.b2BodyType.b2_kinematicBody:
                                c =
                                    "b2BodyType.b2_kinematicBody";
                                break;
                            case h.b2BodyType.b2_dynamicBody:
                                c = "b2BodyType.b2_dynamicBody"
                        }
                        a("  bd.type = %s;\n", c);
                        a("  bd.position.Set(%.15f, %.15f);\n", this.m_xf.p.x, this.m_xf.p.y);
                        a("  bd.angle = %.15f;\n", this.m_sweep.a);
                        a("  bd.linearVelocity.Set(%.15f, %.15f);\n", this.m_linearVelocity.x, this.m_linearVelocity.y);
                        a("  bd.angularVelocity = %.15f;\n", this.m_angularVelocity);
                        a("  bd.linearDamping = %.15f;\n", this.m_linearDamping);
                        a("  bd.angularDamping = %.15f;\n", this.m_angularDamping);
                        a("  bd.allowSleep = %s;\n", this.m_autoSleepFlag ? "true" : "false");
                        a("  bd.awake = %s;\n", this.m_awakeFlag ? "true" : "false");
                        a("  bd.fixedRotation = %s;\n", this.m_fixedRotationFlag ? "true" : "false");
                        a("  bd.bullet = %s;\n", this.m_bulletFlag ? "true" : "false");
                        a("  bd.active = %s;\n", this.m_activeFlag ? "true" : "false");
                        a("  bd.gravityScale = %.15f;\n", this.m_gravityScale);
                        a("\n");
                        a("  bodies[%d] = this.m_world.CreateBody(bd);\n", this.m_islandIndex);
                        a("\n");
                        for (c = this.m_fixtureList; c; c = c.m_next) a("  {\n"), c.Dump(a,
                            b), a("  }\n");
                        a("}\n")
                    };
                    a.prototype.SynchronizeFixtures = function() {
                        var b = a.SynchronizeFixtures_s_xf1;
                        b.q.SetAngle(this.m_sweep.a0);
                        P.MulRV(b.q, this.m_sweep.localCenter, b.p);
                        r.SubVV(this.m_sweep.c0, b.p, b.p);
                        for (var c = this.m_fixtureList; c; c = c.m_next) c.Synchronize(b, this.m_xf)
                    };
                    a.prototype.SynchronizeTransform = function() {
                        this.m_xf.q.SetAngle(this.m_sweep.a);
                        P.MulRV(this.m_xf.q, this.m_sweep.localCenter, this.m_xf.p);
                        r.SubVV(this.m_sweep.c, this.m_xf.p, this.m_xf.p)
                    };
                    a.prototype.ShouldCollide = function(a) {
                        return this.m_type ===
                            h.b2BodyType.b2_staticBody && a.m_type === h.b2BodyType.b2_staticBody ? !1 : this.ShouldCollideConnected(a)
                    };
                    a.prototype.ShouldCollideConnected = function(a) {
                        for (var b = this.m_jointList; b; b = b.next)
                            if (b.other === a && !b.joint.m_collideConnected) return !1;
                        return !0
                    };
                    a.prototype.Advance = function(a) {
                        this.m_sweep.Advance(a);
                        this.m_sweep.c.Copy(this.m_sweep.c0);
                        this.m_sweep.a = this.m_sweep.a0;
                        this.m_xf.q.SetAngle(this.m_sweep.a);
                        P.MulRV(this.m_xf.q, this.m_sweep.localCenter, this.m_xf.p);
                        r.SubVV(this.m_sweep.c, this.m_xf.p,
                            this.m_xf.p)
                    };
                    a.prototype.GetControllerList = function() {
                        return this.m_controllerList
                    };
                    a.prototype.GetControllerCount = function() {
                        return this.m_controllerCount
                    };
                    a.CreateFixtureShapeDensity_s_def = new dc;
                    a.SetMassData_s_oldCenter = new r;
                    a.ResetMassData_s_localCenter = new r;
                    a.ResetMassData_s_oldCenter = new r;
                    a.ResetMassData_s_massData = new zb;
                    a.SynchronizeFixtures_s_xf1 = new U;
                    return a
                }();
            (function(a) {
                a[a.e_unknownJoint = 0] = "e_unknownJoint";
                a[a.e_revoluteJoint = 1] = "e_revoluteJoint";
                a[a.e_prismaticJoint = 2] = "e_prismaticJoint";
                a[a.e_distanceJoint = 3] = "e_distanceJoint";
                a[a.e_pulleyJoint = 4] = "e_pulleyJoint";
                a[a.e_mouseJoint = 5] = "e_mouseJoint";
                a[a.e_gearJoint = 6] = "e_gearJoint";
                a[a.e_wheelJoint = 7] = "e_wheelJoint";
                a[a.e_weldJoint = 8] = "e_weldJoint";
                a[a.e_frictionJoint = 9] = "e_frictionJoint";
                a[a.e_ropeJoint = 10] = "e_ropeJoint";
                a[a.e_motorJoint = 11] = "e_motorJoint";
                a[a.e_areaJoint = 12] = "e_areaJoint"
            })(h.b2JointType || (h.b2JointType = {}));
            (function(a) {
                a[a.e_inactiveLimit = 0] = "e_inactiveLimit";
                a[a.e_atLowerLimit = 1] = "e_atLowerLimit";
                a[a.e_atUpperLimit =
                    2] = "e_atUpperLimit";
                a[a.e_equalLimits = 3] = "e_equalLimits"
            })(h.b2LimitState || (h.b2LimitState = {}));
            var Jd = function() {
                    function a() {
                        this.linear = new r;
                        this.angularB = this.angularA = 0
                    }
                    a.prototype.SetZero = function() {
                        this.linear.SetZero();
                        this.angularB = this.angularA = 0;
                        return this
                    };
                    a.prototype.Set = function(a, b, c) {
                        this.linear.Copy(a);
                        this.angularA = b;
                        this.angularB = c;
                        return this
                    };
                    return a
                }(),
                Hb = function() {
                    return function(a, b) {
                        this.next = this.prev = null;
                        this.joint = a;
                        this.other = b
                    }
                }(),
                Da = function() {
                    return function(a) {
                        this.type =
                            h.b2JointType.e_unknownJoint;
                        this.userData = null;
                        this.collideConnected = !1;
                        this.type = a
                    }
                }(),
                Ea = function() {
                    function a(a) {
                        this.m_type = h.b2JointType.e_unknownJoint;
                        this.m_next = this.m_prev = null;
                        this.m_index = 0;
                        this.m_collideConnected = this.m_islandFlag = !1;
                        this.m_userData = null;
                        this.m_type = a.type;
                        this.m_edgeA = new Hb(this, a.bodyB);
                        this.m_edgeB = new Hb(this, a.bodyA);
                        this.m_bodyA = a.bodyA;
                        this.m_bodyB = a.bodyB;
                        this.m_collideConnected = e(a.collideConnected, !1);
                        this.m_userData = a.userData
                    }
                    a.prototype.GetType = function() {
                        return this.m_type
                    };
                    a.prototype.GetBodyA = function() {
                        return this.m_bodyA
                    };
                    a.prototype.GetBodyB = function() {
                        return this.m_bodyB
                    };
                    a.prototype.GetNext = function() {
                        return this.m_next
                    };
                    a.prototype.GetUserData = function() {
                        return this.m_userData
                    };
                    a.prototype.SetUserData = function(a) {
                        this.m_userData = a
                    };
                    a.prototype.IsActive = function() {
                        return this.m_bodyA.IsActive() && this.m_bodyB.IsActive()
                    };
                    a.prototype.GetCollideConnected = function() {
                        return this.m_collideConnected
                    };
                    a.prototype.Dump = function(a) {
                        a("// Dump is not supported for this joint type.\n")
                    };
                    a.prototype.ShiftOrigin = function(a) {};
                    return a
                }(),
                gc = function(a) {
                    function b() {
                        var b = a.call(this, h.b2JointType.e_distanceJoint) || this;
                        b.localAnchorA = new r;
                        b.localAnchorB = new r;
                        b.length = 1;
                        b.frequencyHz = 0;
                        b.dampingRatio = 0;
                        return b
                    }
                    C(b, a);
                    b.prototype.Initialize = function(a, b, c, d) {
                        this.bodyA = a;
                        this.bodyB = b;
                        this.bodyA.GetLocalPoint(c, this.localAnchorA);
                        this.bodyB.GetLocalPoint(d, this.localAnchorB);
                        this.length = r.DistanceVV(c, d);
                        this.dampingRatio = this.frequencyHz = 0
                    };
                    return b
                }(Da),
                hc = function(a) {
                    function b(b) {
                        var c =
                            a.call(this, b) || this;
                        c.m_frequencyHz = 0;
                        c.m_dampingRatio = 0;
                        c.m_bias = 0;
                        c.m_localAnchorA = new r;
                        c.m_localAnchorB = new r;
                        c.m_gamma = 0;
                        c.m_impulse = 0;
                        c.m_length = 0;
                        c.m_indexA = 0;
                        c.m_indexB = 0;
                        c.m_u = new r;
                        c.m_rA = new r;
                        c.m_rB = new r;
                        c.m_localCenterA = new r;
                        c.m_localCenterB = new r;
                        c.m_invMassA = 0;
                        c.m_invMassB = 0;
                        c.m_invIA = 0;
                        c.m_invIB = 0;
                        c.m_mass = 0;
                        c.m_qA = new P;
                        c.m_qB = new P;
                        c.m_lalcA = new r;
                        c.m_lalcB = new r;
                        c.m_frequencyHz = e(b.frequencyHz, 0);
                        c.m_dampingRatio = e(b.dampingRatio, 0);
                        c.m_localAnchorA.Copy(b.localAnchorA);
                        c.m_localAnchorB.Copy(b.localAnchorB);
                        c.m_length = b.length;
                        return c
                    }
                    C(b, a);
                    b.prototype.GetAnchorA = function(a) {
                        return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, a)
                    };
                    b.prototype.GetAnchorB = function(a) {
                        return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, a)
                    };
                    b.prototype.GetReactionForce = function(a, b) {
                        b.x = a * this.m_impulse * this.m_u.x;
                        b.y = a * this.m_impulse * this.m_u.y;
                        return b
                    };
                    b.prototype.GetReactionTorque = function(a) {
                        return 0
                    };
                    b.prototype.GetLocalAnchorA = function() {
                        return this.m_localAnchorA
                    };
                    b.prototype.GetLocalAnchorB = function() {
                        return this.m_localAnchorB
                    };
                    b.prototype.SetLength = function(a) {
                        this.m_length = a
                    };
                    b.prototype.Length = function() {
                        return this.m_length
                    };
                    b.prototype.SetFrequency = function(a) {
                        this.m_frequencyHz = a
                    };
                    b.prototype.GetFrequency = function() {
                        return this.m_frequencyHz
                    };
                    b.prototype.SetDampingRatio = function(a) {
                        this.m_dampingRatio = a
                    };
                    b.prototype.GetDampingRatio = function() {
                        return this.m_dampingRatio
                    };
                    b.prototype.Dump = function(a) {
                        var b = this.m_bodyA.m_islandIndex,
                            c = this.m_bodyB.m_islandIndex;
                        a("  const jd: b2DistanceJointDef = new b2DistanceJointDef();\n");
                        a("  jd.bodyA = bodies[%d];\n", b);
                        a("  jd.bodyB = bodies[%d];\n", c);
                        a("  jd.collideConnected = %s;\n", this.m_collideConnected ? "true" : "false");
                        a("  jd.localAnchorA.Set(%.15f, %.15f);\n", this.m_localAnchorA.x, this.m_localAnchorA.y);
                        a("  jd.localAnchorB.Set(%.15f, %.15f);\n", this.m_localAnchorB.x, this.m_localAnchorB.y);
                        a("  jd.length = %.15f;\n", this.m_length);
                        a("  jd.frequencyHz = %.15f;\n", this.m_frequencyHz);
                        a("  jd.dampingRatio = %.15f;\n", this.m_dampingRatio);
                        a("  joints[%d] = this.m_world.CreateJoint(jd);\n",
                            this.m_index)
                    };
                    b.prototype.InitVelocityConstraints = function(a) {
                        this.m_indexA = this.m_bodyA.m_islandIndex;
                        this.m_indexB = this.m_bodyB.m_islandIndex;
                        this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);
                        this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);
                        this.m_invMassA = this.m_bodyA.m_invMass;
                        this.m_invMassB = this.m_bodyB.m_invMass;
                        this.m_invIA = this.m_bodyA.m_invI;
                        this.m_invIB = this.m_bodyB.m_invI;
                        var c = a.positions[this.m_indexA].c,
                            d = a.velocities[this.m_indexA].v,
                            e = a.velocities[this.m_indexA].w,
                            f = a.positions[this.m_indexB].c,
                            g = a.positions[this.m_indexB].a,
                            h = a.velocities[this.m_indexB].v,
                            k = a.velocities[this.m_indexB].w,
                            l = this.m_qA.SetAngle(a.positions[this.m_indexA].a);
                        g = this.m_qB.SetAngle(g);
                        r.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);
                        P.MulRV(l, this.m_lalcA, this.m_rA);
                        r.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);
                        P.MulRV(g, this.m_lalcB, this.m_rB);
                        this.m_u.x = f.x + this.m_rB.x - c.x - this.m_rA.x;
                        this.m_u.y = f.y + this.m_rB.y - c.y - this.m_rA.y;
                        f = this.m_u.Length();
                        .008 <
                            f ? this.m_u.SelfMul(1 / f) : this.m_u.SetZero();
                        c = r.CrossVV(this.m_rA, this.m_u);
                        l = r.CrossVV(this.m_rB, this.m_u);
                        c = this.m_invMassA + this.m_invIA * c * c + this.m_invMassB + this.m_invIB * l * l;
                        this.m_mass = 0 !== c ? 1 / c : 0;
                        if (0 < this.m_frequencyHz) {
                            f -= this.m_length;
                            l = 6.28318530718 * this.m_frequencyHz;
                            g = this.m_mass * l * l;
                            var m = a.step.dt;
                            this.m_gamma = m * (2 * this.m_mass * this.m_dampingRatio * l + m * g);
                            this.m_gamma = 0 !== this.m_gamma ? 1 / this.m_gamma : 0;
                            this.m_bias = f * m * g * this.m_gamma;
                            c += this.m_gamma;
                            this.m_mass = 0 !== c ? 1 / c : 0
                        } else this.m_bias =
                            this.m_gamma = 0;
                        a.step.warmStarting ? (this.m_impulse *= a.step.dtRatio, c = r.MulSV(this.m_impulse, this.m_u, b.InitVelocityConstraints_s_P), d.SelfMulSub(this.m_invMassA, c), e -= this.m_invIA * r.CrossVV(this.m_rA, c), h.SelfMulAdd(this.m_invMassB, c), k += this.m_invIB * r.CrossVV(this.m_rB, c)) : this.m_impulse = 0;
                        a.velocities[this.m_indexA].w = e;
                        a.velocities[this.m_indexB].w = k
                    };
                    b.prototype.SolveVelocityConstraints = function(a) {
                        var c = a.velocities[this.m_indexA].v,
                            d = a.velocities[this.m_indexA].w,
                            e = a.velocities[this.m_indexB].v,
                            f = a.velocities[this.m_indexB].w,
                            g = r.AddVCrossSV(c, d, this.m_rA, b.SolveVelocityConstraints_s_vpA),
                            h = r.AddVCrossSV(e, f, this.m_rB, b.SolveVelocityConstraints_s_vpB);
                        g = r.DotVV(this.m_u, r.SubVV(h, g, r.s_t0));
                        g = -this.m_mass * (g + this.m_bias + this.m_gamma * this.m_impulse);
                        this.m_impulse += g;
                        g = r.MulSV(g, this.m_u, b.SolveVelocityConstraints_s_P);
                        c.SelfMulSub(this.m_invMassA, g);
                        d -= this.m_invIA * r.CrossVV(this.m_rA, g);
                        e.SelfMulAdd(this.m_invMassB, g);
                        f += this.m_invIB * r.CrossVV(this.m_rB, g);
                        a.velocities[this.m_indexA].w =
                            d;
                        a.velocities[this.m_indexB].w = f
                    };
                    b.prototype.SolvePositionConstraints = function(a) {
                        if (0 < this.m_frequencyHz) return !0;
                        var d = a.positions[this.m_indexA].c,
                            e = a.positions[this.m_indexA].a,
                            f = a.positions[this.m_indexB].c,
                            g = a.positions[this.m_indexB].a,
                            h = this.m_qA.SetAngle(e),
                            k = this.m_qB.SetAngle(g);
                        h = P.MulRV(h, this.m_lalcA, this.m_rA);
                        k = P.MulRV(k, this.m_lalcB, this.m_rB);
                        var l = this.m_u;
                        l.x = f.x + k.x - d.x - h.x;
                        l.y = f.y + k.y - d.y - h.y;
                        var m = this.m_u.Normalize() - this.m_length;
                        m = c(m, -.2, .2);
                        l = r.MulSV(-this.m_mass * m, l,
                            b.SolvePositionConstraints_s_P);
                        d.SelfMulSub(this.m_invMassA, l);
                        e -= this.m_invIA * r.CrossVV(h, l);
                        f.SelfMulAdd(this.m_invMassB, l);
                        g += this.m_invIB * r.CrossVV(k, l);
                        a.positions[this.m_indexA].a = e;
                        a.positions[this.m_indexB].a = g;
                        return .008 > Z(m)
                    };
                    b.InitVelocityConstraints_s_P = new r;
                    b.SolveVelocityConstraints_s_vpA = new r;
                    b.SolveVelocityConstraints_s_vpB = new r;
                    b.SolveVelocityConstraints_s_P = new r;
                    b.SolvePositionConstraints_s_P = new r;
                    return b
                }(Ea),
                Kd = function(a) {
                    function b() {
                        var b = a.call(this, h.b2JointType.e_areaJoint) ||
                            this;
                        b.bodies = [];
                        b.frequencyHz = 0;
                        b.dampingRatio = 0;
                        return b
                    }
                    C(b, a);
                    b.prototype.AddBody = function(a) {
                        this.bodies.push(a);
                        1 === this.bodies.length ? this.bodyA = a : 2 === this.bodies.length && (this.bodyB = a)
                    };
                    return b
                }(Da),
                ic = function(a) {
                    function b(b) {
                        var c = a.call(this, b) || this;
                        c.m_frequencyHz = 0;
                        c.m_dampingRatio = 0;
                        c.m_impulse = 0;
                        c.m_targetArea = 0;
                        c.m_bodies = b.bodies;
                        c.m_frequencyHz = e(b.frequencyHz, 0);
                        c.m_dampingRatio = e(b.dampingRatio, 0);
                        c.m_targetLengths = g(b.bodies.length);
                        c.m_normals = r.MakeArray(b.bodies.length);
                        c.m_joints = [];
                        c.m_deltas = r.MakeArray(b.bodies.length);
                        c.m_delta = new r;
                        b = new gc;
                        b.frequencyHz = c.m_frequencyHz;
                        b.dampingRatio = c.m_dampingRatio;
                        for (var d = c.m_targetArea = 0; d < c.m_bodies.length; ++d) {
                            var f = c.m_bodies[d],
                                h = c.m_bodies[(d + 1) % c.m_bodies.length],
                                k = f.GetWorldCenter(),
                                l = h.GetWorldCenter();
                            c.m_targetLengths[d] = r.DistanceVV(k, l);
                            c.m_targetArea += r.CrossVV(k, l);
                            b.Initialize(f, h, k, l);
                            c.m_joints[d] = f.GetWorld().CreateJoint(b)
                        }
                        c.m_targetArea *= .5;
                        return c
                    }
                    C(b, a);
                    b.prototype.GetAnchorA = function(a) {
                        return a
                    };
                    b.prototype.GetAnchorB = function(a) {
                        return a
                    };
                    b.prototype.GetReactionForce = function(a, b) {
                        return b
                    };
                    b.prototype.GetReactionTorque = function(a) {
                        return 0
                    };
                    b.prototype.SetFrequency = function(a) {
                        this.m_frequencyHz = a;
                        for (var b = 0; b < this.m_joints.length; ++b) this.m_joints[b].SetFrequency(a)
                    };
                    b.prototype.GetFrequency = function() {
                        return this.m_frequencyHz
                    };
                    b.prototype.SetDampingRatio = function(a) {
                        this.m_dampingRatio = a;
                        for (var b = 0; b < this.m_joints.length; ++b) this.m_joints[b].SetDampingRatio(a)
                    };
                    b.prototype.GetDampingRatio =
                        function() {
                            return this.m_dampingRatio
                        };
                    b.prototype.Dump = function(a) {
                        a("Area joint dumping is not supported.\n")
                    };
                    b.prototype.InitVelocityConstraints = function(a) {
                        for (var b, c = 0; c < this.m_bodies.length; ++c) {
                            var d = a.positions[this.m_bodies[(c + this.m_bodies.length - 1) % this.m_bodies.length].m_islandIndex].c,
                                e = a.positions[this.m_bodies[(c + 1) % this.m_bodies.length].m_islandIndex].c;
                            b = this.m_deltas[c];
                            r.SubVV(e, d, b)
                        }
                        if (a.step.warmStarting)
                            for (this.m_impulse *= a.step.dtRatio, c = 0; c < this.m_bodies.length; ++c) d = this.m_bodies[c],
                                e = a.velocities[d.m_islandIndex].v, b = this.m_deltas[c], e.x += d.m_invMass * b.y * .5 * this.m_impulse, e.y += d.m_invMass * -b.x * .5 * this.m_impulse;
                        else this.m_impulse = 0
                    };
                    b.prototype.SolveVelocityConstraints = function(a) {
                        for (var b, c, d, e = 0, f = 0, g = 0; g < this.m_bodies.length; ++g) d = this.m_bodies[g], c = a.velocities[d.m_islandIndex].v, b = this.m_deltas[g], e += b.LengthSquared() / d.GetMass(), f += r.CrossVV(c, b);
                        e = -2 * f / e;
                        this.m_impulse += e;
                        for (g = 0; g < this.m_bodies.length; ++g) d = this.m_bodies[g], c = a.velocities[d.m_islandIndex].v, b = this.m_deltas[g],
                            c.x += d.m_invMass * b.y * .5 * e, c.y += d.m_invMass * -b.x * .5 * e
                    };
                    b.prototype.SolvePositionConstraints = function(a) {
                        for (var b, c, d = 0, e = 0, f = 0; f < this.m_bodies.length; ++f) {
                            c = this.m_bodies[f];
                            b = this.m_bodies[(f + 1) % this.m_bodies.length];
                            c = a.positions[c.m_islandIndex].c;
                            var g = a.positions[b.m_islandIndex].c;
                            b = r.SubVV(g, c, this.m_delta);
                            var h = b.Length();
                            1E-5 > h && (h = 1);
                            this.m_normals[f].x = b.y / h;
                            this.m_normals[f].y = -b.x / h;
                            d += h;
                            e += r.CrossVV(c, g)
                        }
                        d = .5 * (this.m_targetArea - .5 * e) / d;
                        e = !0;
                        for (f = 0; f < this.m_bodies.length; ++f) c = this.m_bodies[f],
                            c = a.positions[c.m_islandIndex].c, b = r.AddVV(this.m_normals[f], this.m_normals[(f + 1) % this.m_bodies.length], this.m_delta), b.SelfMul(d), g = b.LengthSquared(), g > .2 * .2 && b.SelfMul(.2 / ea(g)), 6.4E-5 < g && (e = !1), c.x += b.x, c.y += b.y;
                        return e
                    };
                    return b
                }(Ea),
                Ld = function(a) {
                    function b() {
                        var b = a.call(this, h.b2JointType.e_frictionJoint) || this;
                        b.localAnchorA = new r;
                        b.localAnchorB = new r;
                        b.maxForce = 0;
                        b.maxTorque = 0;
                        return b
                    }
                    C(b, a);
                    b.prototype.Initialize = function(a, b, c) {
                        this.bodyA = a;
                        this.bodyB = b;
                        this.bodyA.GetLocalPoint(c, this.localAnchorA);
                        this.bodyB.GetLocalPoint(c, this.localAnchorB)
                    };
                    return b
                }(Da),
                jc = function(a) {
                    function b(b) {
                        var c = a.call(this, b) || this;
                        c.m_localAnchorA = new r;
                        c.m_localAnchorB = new r;
                        c.m_linearImpulse = new r;
                        c.m_angularImpulse = 0;
                        c.m_maxForce = 0;
                        c.m_maxTorque = 0;
                        c.m_indexA = 0;
                        c.m_indexB = 0;
                        c.m_rA = new r;
                        c.m_rB = new r;
                        c.m_localCenterA = new r;
                        c.m_localCenterB = new r;
                        c.m_invMassA = 0;
                        c.m_invMassB = 0;
                        c.m_invIA = 0;
                        c.m_invIB = 0;
                        c.m_linearMass = new ka;
                        c.m_angularMass = 0;
                        c.m_qA = new P;
                        c.m_qB = new P;
                        c.m_lalcA = new r;
                        c.m_lalcB = new r;
                        c.m_K = new ka;
                        c.m_localAnchorA.Copy(b.localAnchorA);
                        c.m_localAnchorB.Copy(b.localAnchorB);
                        c.m_linearImpulse.SetZero();
                        c.m_maxForce = e(b.maxForce, 0);
                        c.m_maxTorque = e(b.maxTorque, 0);
                        c.m_linearMass.SetZero();
                        return c
                    }
                    C(b, a);
                    b.prototype.InitVelocityConstraints = function(a) {
                        this.m_indexA = this.m_bodyA.m_islandIndex;
                        this.m_indexB = this.m_bodyB.m_islandIndex;
                        this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);
                        this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);
                        this.m_invMassA = this.m_bodyA.m_invMass;
                        this.m_invMassB =
                            this.m_bodyB.m_invMass;
                        this.m_invIA = this.m_bodyA.m_invI;
                        this.m_invIB = this.m_bodyB.m_invI;
                        var b = a.velocities[this.m_indexA].v,
                            c = a.velocities[this.m_indexA].w,
                            d = a.positions[this.m_indexB].a,
                            e = a.velocities[this.m_indexB].v,
                            f = a.velocities[this.m_indexB].w,
                            g = this.m_qA.SetAngle(a.positions[this.m_indexA].a);
                        d = this.m_qB.SetAngle(d);
                        r.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);
                        g = P.MulRV(g, this.m_lalcA, this.m_rA);
                        r.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);
                        var h = P.MulRV(d,
                            this.m_lalcB, this.m_rB);
                        d = this.m_invMassA;
                        var k = this.m_invMassB,
                            l = this.m_invIA,
                            m = this.m_invIB,
                            n = this.m_K;
                        n.ex.x = d + k + l * g.y * g.y + m * h.y * h.y;
                        n.ex.y = -l * g.x * g.y - m * h.x * h.y;
                        n.ey.x = n.ex.y;
                        n.ey.y = d + k + l * g.x * g.x + m * h.x * h.x;
                        n.GetInverse(this.m_linearMass);
                        this.m_angularMass = l + m;
                        0 < this.m_angularMass && (this.m_angularMass = 1 / this.m_angularMass);
                        a.step.warmStarting ? (this.m_linearImpulse.SelfMul(a.step.dtRatio), this.m_angularImpulse *= a.step.dtRatio, g = this.m_linearImpulse, b.SelfMulSub(d, g), c -= l * (r.CrossVV(this.m_rA, g) +
                            this.m_angularImpulse), e.SelfMulAdd(k, g), f += m * (r.CrossVV(this.m_rB, g) + this.m_angularImpulse)) : (this.m_linearImpulse.SetZero(), this.m_angularImpulse = 0);
                        a.velocities[this.m_indexA].w = c;
                        a.velocities[this.m_indexB].w = f
                    };
                    b.prototype.SolveVelocityConstraints = function(a) {
                        var d = a.velocities[this.m_indexA].v,
                            e = a.velocities[this.m_indexA].w,
                            f = a.velocities[this.m_indexB].v,
                            g = a.velocities[this.m_indexB].w,
                            h = this.m_invMassA,
                            k = this.m_invMassB,
                            l = this.m_invIA,
                            m = this.m_invIB,
                            n = a.step.dt,
                            H = -this.m_angularMass * (g - e),
                            J = this.m_angularImpulse,
                            p = n * this.m_maxTorque;
                        this.m_angularImpulse = c(this.m_angularImpulse + H, -p, p);
                        H = this.m_angularImpulse - J;
                        e -= l * H;
                        g += m * H;
                        p = r.SubVV(r.AddVCrossSV(f, g, this.m_rB, r.s_t0), r.AddVCrossSV(d, e, this.m_rA, r.s_t1), b.SolveVelocityConstraints_s_Cdot_v2);
                        H = ka.MulMV(this.m_linearMass, p, b.SolveVelocityConstraints_s_impulseV).SelfNeg();
                        J = b.SolveVelocityConstraints_s_oldImpulseV.Copy(this.m_linearImpulse);
                        this.m_linearImpulse.SelfAdd(H);
                        p = n * this.m_maxForce;
                        this.m_linearImpulse.LengthSquared() > p * p &&
                            (this.m_linearImpulse.Normalize(), this.m_linearImpulse.SelfMul(p));
                        r.SubVV(this.m_linearImpulse, J, H);
                        d.SelfMulSub(h, H);
                        e -= l * r.CrossVV(this.m_rA, H);
                        f.SelfMulAdd(k, H);
                        g += m * r.CrossVV(this.m_rB, H);
                        a.velocities[this.m_indexA].w = e;
                        a.velocities[this.m_indexB].w = g
                    };
                    b.prototype.SolvePositionConstraints = function(a) {
                        return !0
                    };
                    b.prototype.GetAnchorA = function(a) {
                        return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, a)
                    };
                    b.prototype.GetAnchorB = function(a) {
                        return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, a)
                    };
                    b.prototype.GetReactionForce = function(a, b) {
                        b.x = a * this.m_linearImpulse.x;
                        b.y = a * this.m_linearImpulse.y;
                        return b
                    };
                    b.prototype.GetReactionTorque = function(a) {
                        return a * this.m_angularImpulse
                    };
                    b.prototype.GetLocalAnchorA = function() {
                        return this.m_localAnchorA
                    };
                    b.prototype.GetLocalAnchorB = function() {
                        return this.m_localAnchorB
                    };
                    b.prototype.SetMaxForce = function(a) {
                        this.m_maxForce = a
                    };
                    b.prototype.GetMaxForce = function() {
                        return this.m_maxForce
                    };
                    b.prototype.SetMaxTorque = function(a) {
                        this.m_maxTorque = a
                    };
                    b.prototype.GetMaxTorque =
                        function() {
                            return this.m_maxTorque
                        };
                    b.prototype.Dump = function(a) {
                        var b = this.m_bodyA.m_islandIndex,
                            c = this.m_bodyB.m_islandIndex;
                        a("  const jd: b2FrictionJointDef = new b2FrictionJointDef();\n");
                        a("  jd.bodyA = bodies[%d];\n", b);
                        a("  jd.bodyB = bodies[%d];\n", c);
                        a("  jd.collideConnected = %s;\n", this.m_collideConnected ? "true" : "false");
                        a("  jd.localAnchorA.Set(%.15f, %.15f);\n", this.m_localAnchorA.x, this.m_localAnchorA.y);
                        a("  jd.localAnchorB.Set(%.15f, %.15f);\n", this.m_localAnchorB.x, this.m_localAnchorB.y);
                        a("  jd.maxForce = %.15f;\n", this.m_maxForce);
                        a("  jd.maxTorque = %.15f;\n", this.m_maxTorque);
                        a("  joints[%d] = this.m_world.CreateJoint(jd);\n", this.m_index)
                    };
                    b.SolveVelocityConstraints_s_Cdot_v2 = new r;
                    b.SolveVelocityConstraints_s_impulseV = new r;
                    b.SolveVelocityConstraints_s_oldImpulseV = new r;
                    return b
                }(Ea),
                Md = function(a) {
                    function b() {
                        var b = a.call(this, h.b2JointType.e_gearJoint) || this;
                        b.ratio = 1;
                        return b
                    }
                    C(b, a);
                    return b
                }(Da),
                kc = function(a) {
                    function b(b) {
                        var c = a.call(this, b) || this;
                        c.m_typeA = h.b2JointType.e_unknownJoint;
                        c.m_typeB = h.b2JointType.e_unknownJoint;
                        c.m_localAnchorA = new r;
                        c.m_localAnchorB = new r;
                        c.m_localAnchorC = new r;
                        c.m_localAnchorD = new r;
                        c.m_localAxisC = new r;
                        c.m_localAxisD = new r;
                        c.m_referenceAngleA = 0;
                        c.m_referenceAngleB = 0;
                        c.m_constant = 0;
                        c.m_ratio = 0;
                        c.m_impulse = 0;
                        c.m_indexA = 0;
                        c.m_indexB = 0;
                        c.m_indexC = 0;
                        c.m_indexD = 0;
                        c.m_lcA = new r;
                        c.m_lcB = new r;
                        c.m_lcC = new r;
                        c.m_lcD = new r;
                        c.m_mA = 0;
                        c.m_mB = 0;
                        c.m_mC = 0;
                        c.m_mD = 0;
                        c.m_iA = 0;
                        c.m_iB = 0;
                        c.m_iC = 0;
                        c.m_iD = 0;
                        c.m_JvAC = new r;
                        c.m_JvBD = new r;
                        c.m_JwA = 0;
                        c.m_JwB = 0;
                        c.m_JwC = 0;
                        c.m_JwD =
                            0;
                        c.m_mass = 0;
                        c.m_qA = new P;
                        c.m_qB = new P;
                        c.m_qC = new P;
                        c.m_qD = new P;
                        c.m_lalcA = new r;
                        c.m_lalcB = new r;
                        c.m_lalcC = new r;
                        c.m_lalcD = new r;
                        c.m_joint1 = b.joint1;
                        c.m_joint2 = b.joint2;
                        c.m_typeA = c.m_joint1.GetType();
                        c.m_typeB = c.m_joint2.GetType();
                        c.m_bodyC = c.m_joint1.GetBodyA();
                        c.m_bodyA = c.m_joint1.GetBodyB();
                        var d = c.m_bodyA.m_xf;
                        var f = c.m_bodyA.m_sweep.a;
                        var g = c.m_bodyC.m_xf;
                        var k = c.m_bodyC.m_sweep.a;
                        c.m_typeA === h.b2JointType.e_revoluteJoint ? (g = b.joint1, c.m_localAnchorC.Copy(g.m_localAnchorA), c.m_localAnchorA.Copy(g.m_localAnchorB),
                            c.m_referenceAngleA = g.m_referenceAngle, c.m_localAxisC.SetZero(), d = f - k - c.m_referenceAngleA) : (k = b.joint1, c.m_localAnchorC.Copy(k.m_localAnchorA), c.m_localAnchorA.Copy(k.m_localAnchorB), c.m_referenceAngleA = k.m_referenceAngle, c.m_localAxisC.Copy(k.m_localXAxisA), f = c.m_localAnchorC, d = P.MulTRV(g.q, r.AddVV(P.MulRV(d.q, c.m_localAnchorA, r.s_t0), r.SubVV(d.p, g.p, r.s_t1), r.s_t0), r.s_t0), d = r.DotVV(r.SubVV(d, f, r.s_t0), c.m_localAxisC));
                        c.m_bodyD = c.m_joint2.GetBodyA();
                        c.m_bodyB = c.m_joint2.GetBodyB();
                        g = c.m_bodyB.m_xf;
                        k = c.m_bodyB.m_sweep.a;
                        f = c.m_bodyD.m_xf;
                        var l = c.m_bodyD.m_sweep.a;
                        c.m_typeB === h.b2JointType.e_revoluteJoint ? (g = b.joint2, c.m_localAnchorD.Copy(g.m_localAnchorA), c.m_localAnchorB.Copy(g.m_localAnchorB), c.m_referenceAngleB = g.m_referenceAngle, c.m_localAxisD.SetZero(), g = k - l - c.m_referenceAngleB) : (k = b.joint2, c.m_localAnchorD.Copy(k.m_localAnchorA), c.m_localAnchorB.Copy(k.m_localAnchorB), c.m_referenceAngleB = k.m_referenceAngle, c.m_localAxisD.Copy(k.m_localXAxisA), k = c.m_localAnchorD, g = P.MulTRV(f.q, r.AddVV(P.MulRV(g.q,
                            c.m_localAnchorB, r.s_t0), r.SubVV(g.p, f.p, r.s_t1), r.s_t0), r.s_t0), g = r.DotVV(r.SubVV(g, k, r.s_t0), c.m_localAxisD));
                        c.m_ratio = e(b.ratio, 1);
                        c.m_constant = d + c.m_ratio * g;
                        c.m_impulse = 0;
                        return c
                    }
                    C(b, a);
                    b.prototype.InitVelocityConstraints = function(a) {
                        this.m_indexA = this.m_bodyA.m_islandIndex;
                        this.m_indexB = this.m_bodyB.m_islandIndex;
                        this.m_indexC = this.m_bodyC.m_islandIndex;
                        this.m_indexD = this.m_bodyD.m_islandIndex;
                        this.m_lcA.Copy(this.m_bodyA.m_sweep.localCenter);
                        this.m_lcB.Copy(this.m_bodyB.m_sweep.localCenter);
                        this.m_lcC.Copy(this.m_bodyC.m_sweep.localCenter);
                        this.m_lcD.Copy(this.m_bodyD.m_sweep.localCenter);
                        this.m_mA = this.m_bodyA.m_invMass;
                        this.m_mB = this.m_bodyB.m_invMass;
                        this.m_mC = this.m_bodyC.m_invMass;
                        this.m_mD = this.m_bodyD.m_invMass;
                        this.m_iA = this.m_bodyA.m_invI;
                        this.m_iB = this.m_bodyB.m_invI;
                        this.m_iC = this.m_bodyC.m_invI;
                        this.m_iD = this.m_bodyD.m_invI;
                        var c = a.velocities[this.m_indexA].v,
                            d = a.velocities[this.m_indexA].w,
                            e = a.positions[this.m_indexB].a,
                            f = a.velocities[this.m_indexB].v,
                            g = a.velocities[this.m_indexB].w,
                            k = a.positions[this.m_indexC].a,
                            l = a.velocities[this.m_indexC].v,
                            m = a.velocities[this.m_indexC].w;
                        var n = a.positions[this.m_indexD].a;
                        var H = a.velocities[this.m_indexD].v,
                            J = a.velocities[this.m_indexD].w,
                            p = this.m_qA.SetAngle(a.positions[this.m_indexA].a);
                        e = this.m_qB.SetAngle(e);
                        var q = this.m_qC.SetAngle(k);
                        k = this.m_qD.SetAngle(n);
                        this.m_mass = 0;
                        this.m_typeA === h.b2JointType.e_revoluteJoint ? (this.m_JvAC.SetZero(), this.m_JwC = this.m_JwA = 1, this.m_mass += this.m_iA + this.m_iC) : (n = P.MulRV(q, this.m_localAxisC, b.InitVelocityConstraints_s_u),
                            r.SubVV(this.m_localAnchorC, this.m_lcC, this.m_lalcC), q = P.MulRV(q, this.m_lalcC, b.InitVelocityConstraints_s_rC), r.SubVV(this.m_localAnchorA, this.m_lcA, this.m_lalcA), p = P.MulRV(p, this.m_lalcA, b.InitVelocityConstraints_s_rA), this.m_JvAC.Copy(n), this.m_JwC = r.CrossVV(q, n), this.m_JwA = r.CrossVV(p, n), this.m_mass += this.m_mC + this.m_mA + this.m_iC * this.m_JwC * this.m_JwC + this.m_iA * this.m_JwA * this.m_JwA);
                        this.m_typeB === h.b2JointType.e_revoluteJoint ? (this.m_JvBD.SetZero(), this.m_JwD = this.m_JwB = this.m_ratio, this.m_mass +=
                            this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD)) : (n = P.MulRV(k, this.m_localAxisD, b.InitVelocityConstraints_s_u), r.SubVV(this.m_localAnchorD, this.m_lcD, this.m_lalcD), p = P.MulRV(k, this.m_lalcD, b.InitVelocityConstraints_s_rD), r.SubVV(this.m_localAnchorB, this.m_lcB, this.m_lalcB), e = P.MulRV(e, this.m_lalcB, b.InitVelocityConstraints_s_rB), r.MulSV(this.m_ratio, n, this.m_JvBD), this.m_JwD = this.m_ratio * r.CrossVV(p, n), this.m_JwB = this.m_ratio * r.CrossVV(e, n), this.m_mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) +
                            this.m_iD * this.m_JwD * this.m_JwD + this.m_iB * this.m_JwB * this.m_JwB);
                        this.m_mass = 0 < this.m_mass ? 1 / this.m_mass : 0;
                        a.step.warmStarting ? (c.SelfMulAdd(this.m_mA * this.m_impulse, this.m_JvAC), d += this.m_iA * this.m_impulse * this.m_JwA, f.SelfMulAdd(this.m_mB * this.m_impulse, this.m_JvBD), g += this.m_iB * this.m_impulse * this.m_JwB, l.SelfMulSub(this.m_mC * this.m_impulse, this.m_JvAC), m -= this.m_iC * this.m_impulse * this.m_JwC, H.SelfMulSub(this.m_mD * this.m_impulse, this.m_JvBD), J -= this.m_iD * this.m_impulse * this.m_JwD) : this.m_impulse =
                            0;
                        a.velocities[this.m_indexA].w = d;
                        a.velocities[this.m_indexB].w = g;
                        a.velocities[this.m_indexC].w = m;
                        a.velocities[this.m_indexD].w = J
                    };
                    b.prototype.SolveVelocityConstraints = function(a) {
                        var b = a.velocities[this.m_indexA].v,
                            c = a.velocities[this.m_indexA].w,
                            d = a.velocities[this.m_indexB].v,
                            e = a.velocities[this.m_indexB].w,
                            f = a.velocities[this.m_indexC].v,
                            g = a.velocities[this.m_indexC].w,
                            h = a.velocities[this.m_indexD].v,
                            k = a.velocities[this.m_indexD].w,
                            l = r.DotVV(this.m_JvAC, r.SubVV(b, f, r.s_t0)) + r.DotVV(this.m_JvBD,
                                r.SubVV(d, h, r.s_t0));
                        l += this.m_JwA * c - this.m_JwC * g + (this.m_JwB * e - this.m_JwD * k);
                        l *= -this.m_mass;
                        this.m_impulse += l;
                        b.SelfMulAdd(this.m_mA * l, this.m_JvAC);
                        c += this.m_iA * l * this.m_JwA;
                        d.SelfMulAdd(this.m_mB * l, this.m_JvBD);
                        e += this.m_iB * l * this.m_JwB;
                        f.SelfMulSub(this.m_mC * l, this.m_JvAC);
                        g -= this.m_iC * l * this.m_JwC;
                        h.SelfMulSub(this.m_mD * l, this.m_JvBD);
                        k -= this.m_iD * l * this.m_JwD;
                        a.velocities[this.m_indexA].w = c;
                        a.velocities[this.m_indexB].w = e;
                        a.velocities[this.m_indexC].w = g;
                        a.velocities[this.m_indexD].w = k
                    };
                    b.prototype.SolvePositionConstraints =
                        function(a) {
                            var c = a.positions[this.m_indexA].c,
                                d = a.positions[this.m_indexA].a,
                                e = a.positions[this.m_indexB].c,
                                f = a.positions[this.m_indexB].a,
                                g = a.positions[this.m_indexC].c,
                                k = a.positions[this.m_indexC].a,
                                l = a.positions[this.m_indexD].c,
                                m = a.positions[this.m_indexD].a,
                                n = this.m_qA.SetAngle(d),
                                H = this.m_qB.SetAngle(f),
                                J = this.m_qC.SetAngle(k),
                                p = this.m_qD.SetAngle(m),
                                q = this.m_JvAC,
                                t = this.m_JvBD,
                                aa, u = 0;
                            if (this.m_typeA === h.b2JointType.e_revoluteJoint) q.SetZero(), n = aa = 1, u += this.m_iA + this.m_iC, J = d - k - this.m_referenceAngleA;
                            else {
                                var v = P.MulRV(J, this.m_localAxisC, b.SolvePositionConstraints_s_u);
                                aa = P.MulRV(J, this.m_lalcC, b.SolvePositionConstraints_s_rC);
                                var w = P.MulRV(n, this.m_lalcA, b.SolvePositionConstraints_s_rA);
                                q.Copy(v);
                                n = r.CrossVV(aa, v);
                                aa = r.CrossVV(w, v);
                                u += this.m_mC + this.m_mA + this.m_iC * n * n + this.m_iA * aa * aa;
                                v = this.m_lalcC;
                                J = P.MulTRV(J, r.AddVV(w, r.SubVV(c, g, r.s_t0), r.s_t0), r.s_t0);
                                J = r.DotVV(r.SubVV(J, v, r.s_t0), this.m_localAxisC)
                            }
                            if (this.m_typeB === h.b2JointType.e_revoluteJoint) t.SetZero(), H = v = this.m_ratio, u += this.m_ratio *
                                this.m_ratio * (this.m_iB + this.m_iD), p = f - m - this.m_referenceAngleB;
                            else {
                                v = P.MulRV(p, this.m_localAxisD, b.SolvePositionConstraints_s_u);
                                var x = P.MulRV(p, this.m_lalcD, b.SolvePositionConstraints_s_rD);
                                w = P.MulRV(H, this.m_lalcB, b.SolvePositionConstraints_s_rB);
                                r.MulSV(this.m_ratio, v, t);
                                H = this.m_ratio * r.CrossVV(x, v);
                                v = this.m_ratio * r.CrossVV(w, v);
                                u += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD * H * H + this.m_iB * v * v;
                                x = this.m_lalcD;
                                p = P.MulTRV(p, r.AddVV(w, r.SubVV(e, l, r.s_t0), r.s_t0), r.s_t0);
                                p = r.DotVV(r.SubVV(p,
                                    x, r.s_t0), this.m_localAxisD)
                            }
                            p = J + this.m_ratio * p - this.m_constant;
                            J = 0;
                            0 < u && (J = -p / u);
                            c.SelfMulAdd(this.m_mA * J, q);
                            d += this.m_iA * J * aa;
                            e.SelfMulAdd(this.m_mB * J, t);
                            f += this.m_iB * J * v;
                            g.SelfMulSub(this.m_mC * J, q);
                            k -= this.m_iC * J * n;
                            l.SelfMulSub(this.m_mD * J, t);
                            m -= this.m_iD * J * H;
                            a.positions[this.m_indexA].a = d;
                            a.positions[this.m_indexB].a = f;
                            a.positions[this.m_indexC].a = k;
                            a.positions[this.m_indexD].a = m;
                            return !0
                        };
                    b.prototype.GetAnchorA = function(a) {
                        return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, a)
                    };
                    b.prototype.GetAnchorB =
                        function(a) {
                            return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, a)
                        };
                    b.prototype.GetReactionForce = function(a, b) {
                        return r.MulSV(a * this.m_impulse, this.m_JvAC, b)
                    };
                    b.prototype.GetReactionTorque = function(a) {
                        return a * this.m_impulse * this.m_JwA
                    };
                    b.prototype.GetJoint1 = function() {
                        return this.m_joint1
                    };
                    b.prototype.GetJoint2 = function() {
                        return this.m_joint2
                    };
                    b.prototype.GetRatio = function() {
                        return this.m_ratio
                    };
                    b.prototype.SetRatio = function(a) {
                        this.m_ratio = a
                    };
                    b.prototype.Dump = function(a) {
                        var b = this.m_bodyA.m_islandIndex,
                            c = this.m_bodyB.m_islandIndex,
                            d = this.m_joint1.m_index,
                            e = this.m_joint2.m_index;
                        a("  const jd: b2GearJointDef = new b2GearJointDef();\n");
                        a("  jd.bodyA = bodies[%d];\n", b);
                        a("  jd.bodyB = bodies[%d];\n", c);
                        a("  jd.collideConnected = %s;\n", this.m_collideConnected ? "true" : "false");
                        a("  jd.joint1 = joints[%d];\n", d);
                        a("  jd.joint2 = joints[%d];\n", e);
                        a("  jd.ratio = %.15f;\n", this.m_ratio);
                        a("  joints[%d] = this.m_world.CreateJoint(jd);\n", this.m_index)
                    };
                    b.InitVelocityConstraints_s_u = new r;
                    b.InitVelocityConstraints_s_rA =
                        new r;
                    b.InitVelocityConstraints_s_rB = new r;
                    b.InitVelocityConstraints_s_rC = new r;
                    b.InitVelocityConstraints_s_rD = new r;
                    b.SolvePositionConstraints_s_u = new r;
                    b.SolvePositionConstraints_s_rA = new r;
                    b.SolvePositionConstraints_s_rB = new r;
                    b.SolvePositionConstraints_s_rC = new r;
                    b.SolvePositionConstraints_s_rD = new r;
                    return b
                }(Ea),
                Nd = function(a) {
                    function b() {
                        var b = a.call(this, h.b2JointType.e_motorJoint) || this;
                        b.linearOffset = new r(0, 0);
                        b.angularOffset = 0;
                        b.maxForce = 1;
                        b.maxTorque = 1;
                        b.correctionFactor = .3;
                        return b
                    }
                    C(b, a);
                    b.prototype.Initialize = function(a, b) {
                        this.bodyA = a;
                        this.bodyB = b;
                        this.bodyA.GetLocalPoint(this.bodyB.GetPosition(), this.linearOffset);
                        a = this.bodyA.GetAngle();
                        this.angularOffset = this.bodyB.GetAngle() - a
                    };
                    return b
                }(Da),
                lc = function(a) {
                    function b(b) {
                        var c = a.call(this, b) || this;
                        c.m_linearOffset = new r;
                        c.m_angularOffset = 0;
                        c.m_linearImpulse = new r;
                        c.m_angularImpulse = 0;
                        c.m_maxForce = 0;
                        c.m_maxTorque = 0;
                        c.m_correctionFactor = .3;
                        c.m_indexA = 0;
                        c.m_indexB = 0;
                        c.m_rA = new r;
                        c.m_rB = new r;
                        c.m_localCenterA = new r;
                        c.m_localCenterB =
                            new r;
                        c.m_linearError = new r;
                        c.m_angularError = 0;
                        c.m_invMassA = 0;
                        c.m_invMassB = 0;
                        c.m_invIA = 0;
                        c.m_invIB = 0;
                        c.m_linearMass = new ka;
                        c.m_angularMass = 0;
                        c.m_qA = new P;
                        c.m_qB = new P;
                        c.m_K = new ka;
                        c.m_linearOffset.Copy(e(b.linearOffset, r.ZERO));
                        c.m_linearImpulse.SetZero();
                        c.m_maxForce = e(b.maxForce, 0);
                        c.m_maxTorque = e(b.maxTorque, 0);
                        c.m_correctionFactor = e(b.correctionFactor, .3);
                        return c
                    }
                    C(b, a);
                    b.prototype.GetAnchorA = function(a) {
                        var b = this.m_bodyA.GetPosition();
                        a.x = b.x;
                        a.y = b.y;
                        return a
                    };
                    b.prototype.GetAnchorB = function(a) {
                        var b =
                            this.m_bodyB.GetPosition();
                        a.x = b.x;
                        a.y = b.y;
                        return a
                    };
                    b.prototype.GetReactionForce = function(a, b) {
                        return r.MulSV(a, this.m_linearImpulse, b)
                    };
                    b.prototype.GetReactionTorque = function(a) {
                        return a * this.m_angularImpulse
                    };
                    b.prototype.SetLinearOffset = function(a) {
                        r.IsEqualToV(a, this.m_linearOffset) || (this.m_bodyA.SetAwake(!0), this.m_bodyB.SetAwake(!0), this.m_linearOffset.Copy(a))
                    };
                    b.prototype.GetLinearOffset = function() {
                        return this.m_linearOffset
                    };
                    b.prototype.SetAngularOffset = function(a) {
                        a !== this.m_angularOffset &&
                            (this.m_bodyA.SetAwake(!0), this.m_bodyB.SetAwake(!0), this.m_angularOffset = a)
                    };
                    b.prototype.GetAngularOffset = function() {
                        return this.m_angularOffset
                    };
                    b.prototype.SetMaxForce = function(a) {
                        this.m_maxForce = a
                    };
                    b.prototype.GetMaxForce = function() {
                        return this.m_maxForce
                    };
                    b.prototype.SetMaxTorque = function(a) {
                        this.m_maxTorque = a
                    };
                    b.prototype.GetMaxTorque = function() {
                        return this.m_maxTorque
                    };
                    b.prototype.InitVelocityConstraints = function(a) {
                        this.m_indexA = this.m_bodyA.m_islandIndex;
                        this.m_indexB = this.m_bodyB.m_islandIndex;
                        this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);
                        this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);
                        this.m_invMassA = this.m_bodyA.m_invMass;
                        this.m_invMassB = this.m_bodyB.m_invMass;
                        this.m_invIA = this.m_bodyA.m_invI;
                        this.m_invIB = this.m_bodyB.m_invI;
                        var b = a.positions[this.m_indexA].c,
                            c = a.positions[this.m_indexA].a,
                            d = a.velocities[this.m_indexA].v,
                            e = a.velocities[this.m_indexA].w,
                            f = a.positions[this.m_indexB].c,
                            g = a.positions[this.m_indexB].a,
                            h = a.velocities[this.m_indexB].v,
                            k = a.velocities[this.m_indexB].w,
                            l = this.m_qA.SetAngle(c),
                            m = this.m_qB.SetAngle(g);
                        l = P.MulRV(l, r.SubVV(this.m_linearOffset, this.m_localCenterA, r.s_t0), this.m_rA);
                        m = P.MulRV(m, r.NegV(this.m_localCenterB, r.s_t0), this.m_rB);
                        var n = this.m_invMassA,
                            H = this.m_invMassB,
                            J = this.m_invIA,
                            p = this.m_invIB,
                            q = this.m_K;
                        q.ex.x = n + H + J * l.y * l.y + p * m.y * m.y;
                        q.ex.y = -J * l.x * l.y - p * m.x * m.y;
                        q.ey.x = q.ex.y;
                        q.ey.y = n + H + J * l.x * l.x + p * m.x * m.x;
                        q.GetInverse(this.m_linearMass);
                        this.m_angularMass = J + p;
                        0 < this.m_angularMass && (this.m_angularMass = 1 / this.m_angularMass);
                        r.SubVV(r.AddVV(f,
                            m, r.s_t0), r.AddVV(b, l, r.s_t1), this.m_linearError);
                        this.m_angularError = g - c - this.m_angularOffset;
                        a.step.warmStarting ? (this.m_linearImpulse.SelfMul(a.step.dtRatio), this.m_angularImpulse *= a.step.dtRatio, b = this.m_linearImpulse, d.SelfMulSub(n, b), e -= J * (r.CrossVV(l, b) + this.m_angularImpulse), h.SelfMulAdd(H, b), k += p * (r.CrossVV(m, b) + this.m_angularImpulse)) : (this.m_linearImpulse.SetZero(), this.m_angularImpulse = 0);
                        a.velocities[this.m_indexA].w = e;
                        a.velocities[this.m_indexB].w = k
                    };
                    b.prototype.SolveVelocityConstraints =
                        function(a) {
                            var d = a.velocities[this.m_indexA].v,
                                e = a.velocities[this.m_indexA].w,
                                f = a.velocities[this.m_indexB].v,
                                g = a.velocities[this.m_indexB].w,
                                h = this.m_invMassA,
                                k = this.m_invMassB,
                                l = this.m_invIA,
                                m = this.m_invIB,
                                n = a.step.dt,
                                H = a.step.inv_dt,
                                J = -this.m_angularMass * (g - e + H * this.m_correctionFactor * this.m_angularError),
                                p = this.m_angularImpulse,
                                q = n * this.m_maxTorque;
                            this.m_angularImpulse = c(this.m_angularImpulse + J, -q, q);
                            J = this.m_angularImpulse - p;
                            e -= l * J;
                            g += m * J;
                            J = this.m_rA;
                            p = this.m_rB;
                            q = r.AddVV(r.SubVV(r.AddVV(f,
                                r.CrossSV(g, p, r.s_t0), r.s_t0), r.AddVV(d, r.CrossSV(e, J, r.s_t1), r.s_t1), r.s_t2), r.MulSV(H * this.m_correctionFactor, this.m_linearError, r.s_t3), b.SolveVelocityConstraints_s_Cdot_v2);
                            H = ka.MulMV(this.m_linearMass, q, b.SolveVelocityConstraints_s_impulse_v2).SelfNeg();
                            var t = b.SolveVelocityConstraints_s_oldImpulse_v2.Copy(this.m_linearImpulse);
                            this.m_linearImpulse.SelfAdd(H);
                            q = n * this.m_maxForce;
                            this.m_linearImpulse.LengthSquared() > q * q && (this.m_linearImpulse.Normalize(), this.m_linearImpulse.SelfMul(q));
                            r.SubVV(this.m_linearImpulse,
                                t, H);
                            d.SelfMulSub(h, H);
                            e -= l * r.CrossVV(J, H);
                            f.SelfMulAdd(k, H);
                            g += m * r.CrossVV(p, H);
                            a.velocities[this.m_indexA].w = e;
                            a.velocities[this.m_indexB].w = g
                        };
                    b.prototype.SolvePositionConstraints = function(a) {
                        return !0
                    };
                    b.prototype.Dump = function(a) {
                        var b = this.m_bodyA.m_islandIndex,
                            c = this.m_bodyB.m_islandIndex;
                        a("  const jd: b2MotorJointDef = new b2MotorJointDef();\n");
                        a("  jd.bodyA = bodies[%d];\n", b);
                        a("  jd.bodyB = bodies[%d];\n", c);
                        a("  jd.collideConnected = %s;\n", this.m_collideConnected ? "true" : "false");
                        a("  jd.linearOffset.Set(%.15f, %.15f);\n",
                            this.m_linearOffset.x, this.m_linearOffset.y);
                        a("  jd.angularOffset = %.15f;\n", this.m_angularOffset);
                        a("  jd.maxForce = %.15f;\n", this.m_maxForce);
                        a("  jd.maxTorque = %.15f;\n", this.m_maxTorque);
                        a("  jd.correctionFactor = %.15f;\n", this.m_correctionFactor);
                        a("  joints[%d] = this.m_world.CreateJoint(jd);\n", this.m_index)
                    };
                    b.SolveVelocityConstraints_s_Cdot_v2 = new r;
                    b.SolveVelocityConstraints_s_impulse_v2 = new r;
                    b.SolveVelocityConstraints_s_oldImpulse_v2 = new r;
                    return b
                }(Ea),
                Od = function(a) {
                    function b() {
                        var b =
                            a.call(this, h.b2JointType.e_mouseJoint) || this;
                        b.target = new r;
                        b.maxForce = 0;
                        b.frequencyHz = 5;
                        b.dampingRatio = .7;
                        return b
                    }
                    C(b, a);
                    return b
                }(Da),
                mc = function(a) {
                    function b(b) {
                        var c = a.call(this, b) || this;
                        c.m_localAnchorB = new r;
                        c.m_targetA = new r;
                        c.m_frequencyHz = 0;
                        c.m_dampingRatio = 0;
                        c.m_beta = 0;
                        c.m_impulse = new r;
                        c.m_maxForce = 0;
                        c.m_gamma = 0;
                        c.m_indexA = 0;
                        c.m_indexB = 0;
                        c.m_rB = new r;
                        c.m_localCenterB = new r;
                        c.m_invMassB = 0;
                        c.m_invIB = 0;
                        c.m_mass = new ka;
                        c.m_C = new r;
                        c.m_qB = new P;
                        c.m_lalcB = new r;
                        c.m_K = new ka;
                        c.m_targetA.Copy(e(b.target,
                            r.ZERO));
                        U.MulTXV(c.m_bodyB.GetTransform(), c.m_targetA, c.m_localAnchorB);
                        c.m_maxForce = e(b.maxForce, 0);
                        c.m_impulse.SetZero();
                        c.m_frequencyHz = e(b.frequencyHz, 0);
                        c.m_dampingRatio = e(b.dampingRatio, 0);
                        c.m_beta = 0;
                        c.m_gamma = 0;
                        return c
                    }
                    C(b, a);
                    b.prototype.SetTarget = function(a) {
                        this.m_bodyB.IsAwake() || this.m_bodyB.SetAwake(!0);
                        this.m_targetA.Copy(a)
                    };
                    b.prototype.GetTarget = function() {
                        return this.m_targetA
                    };
                    b.prototype.SetMaxForce = function(a) {
                        this.m_maxForce = a
                    };
                    b.prototype.GetMaxForce = function() {
                        return this.m_maxForce
                    };
                    b.prototype.SetFrequency = function(a) {
                        this.m_frequencyHz = a
                    };
                    b.prototype.GetFrequency = function() {
                        return this.m_frequencyHz
                    };
                    b.prototype.SetDampingRatio = function(a) {
                        this.m_dampingRatio = a
                    };
                    b.prototype.GetDampingRatio = function() {
                        return this.m_dampingRatio
                    };
                    b.prototype.InitVelocityConstraints = function(a) {
                        this.m_indexB = this.m_bodyB.m_islandIndex;
                        this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);
                        this.m_invMassB = this.m_bodyB.m_invMass;
                        this.m_invIB = this.m_bodyB.m_invI;
                        var b = a.positions[this.m_indexB].c,
                            c = a.velocities[this.m_indexB].v,
                            d = a.velocities[this.m_indexB].w,
                            e = this.m_qB.SetAngle(a.positions[this.m_indexB].a),
                            f = this.m_bodyB.GetMass(),
                            g = 6.28318530718 * this.m_frequencyHz,
                            h = f * g * g,
                            k = a.step.dt;
                        this.m_gamma = k * (2 * f * this.m_dampingRatio * g + k * h);
                        0 !== this.m_gamma && (this.m_gamma = 1 / this.m_gamma);
                        this.m_beta = k * h * this.m_gamma;
                        r.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);
                        P.MulRV(e, this.m_lalcB, this.m_rB);
                        e = this.m_K;
                        e.ex.x = this.m_invMassB + this.m_invIB * this.m_rB.y * this.m_rB.y + this.m_gamma;
                        e.ex.y = -this.m_invIB * this.m_rB.x * this.m_rB.y;
                        e.ey.x = e.ex.y;
                        e.ey.y = this.m_invMassB + this.m_invIB * this.m_rB.x * this.m_rB.x + this.m_gamma;
                        e.GetInverse(this.m_mass);
                        this.m_C.x = b.x + this.m_rB.x - this.m_targetA.x;
                        this.m_C.y = b.y + this.m_rB.y - this.m_targetA.y;
                        this.m_C.SelfMul(this.m_beta);
                        d *= .98;
                        a.step.warmStarting ? (this.m_impulse.SelfMul(a.step.dtRatio), c.x += this.m_invMassB * this.m_impulse.x, c.y += this.m_invMassB * this.m_impulse.y, d += this.m_invIB * r.CrossVV(this.m_rB, this.m_impulse)) : this.m_impulse.SetZero();
                        a.velocities[this.m_indexB].w =
                            d
                    };
                    b.prototype.SolveVelocityConstraints = function(a) {
                        var c = a.velocities[this.m_indexB].v,
                            d = a.velocities[this.m_indexB].w,
                            e = r.AddVCrossSV(c, d, this.m_rB, b.SolveVelocityConstraints_s_Cdot);
                        e = ka.MulMV(this.m_mass, r.AddVV(e, r.AddVV(this.m_C, r.MulSV(this.m_gamma, this.m_impulse, r.s_t0), r.s_t0), r.s_t0).SelfNeg(), b.SolveVelocityConstraints_s_impulse);
                        var f = b.SolveVelocityConstraints_s_oldImpulse.Copy(this.m_impulse);
                        this.m_impulse.SelfAdd(e);
                        var g = a.step.dt * this.m_maxForce;
                        this.m_impulse.LengthSquared() > g *
                            g && this.m_impulse.SelfMul(g / this.m_impulse.Length());
                        r.SubVV(this.m_impulse, f, e);
                        c.SelfMulAdd(this.m_invMassB, e);
                        d += this.m_invIB * r.CrossVV(this.m_rB, e);
                        a.velocities[this.m_indexB].w = d
                    };
                    b.prototype.SolvePositionConstraints = function(a) {
                        return !0
                    };
                    b.prototype.GetAnchorA = function(a) {
                        a.x = this.m_targetA.x;
                        a.y = this.m_targetA.y;
                        return a
                    };
                    b.prototype.GetAnchorB = function(a) {
                        return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, a)
                    };
                    b.prototype.GetReactionForce = function(a, b) {
                        return r.MulSV(a, this.m_impulse, b)
                    };
                    b.prototype.GetReactionTorque = function(a) {
                        return 0
                    };
                    b.prototype.Dump = function(a) {
                        a("Mouse joint dumping is not supported.\n")
                    };
                    b.prototype.ShiftOrigin = function(a) {
                        this.m_targetA.SelfSub(a)
                    };
                    b.SolveVelocityConstraints_s_Cdot = new r;
                    b.SolveVelocityConstraints_s_impulse = new r;
                    b.SolveVelocityConstraints_s_oldImpulse = new r;
                    return b
                }(Ea),
                Pd = function(a) {
                    function b() {
                        var b = a.call(this, h.b2JointType.e_prismaticJoint) || this;
                        b.localAnchorA = new r;
                        b.localAnchorB = new r;
                        b.localAxisA = new r(1, 0);
                        b.referenceAngle = 0;
                        b.enableLimit = !1;
                        b.lowerTranslation = 0;
                        b.upperTranslation = 0;
                        b.enableMotor = !1;
                        b.maxMotorForce = 0;
                        b.motorSpeed = 0;
                        return b
                    }
                    C(b, a);
                    b.prototype.Initialize = function(a, b, c, d) {
                        this.bodyA = a;
                        this.bodyB = b;
                        this.bodyA.GetLocalPoint(c, this.localAnchorA);
                        this.bodyB.GetLocalPoint(c, this.localAnchorB);
                        this.bodyA.GetLocalVector(d, this.localAxisA);
                        this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle()
                    };
                    return b
                }(Da),
                nc = function(a) {
                    function b(b) {
                        var c = a.call(this, b) || this;
                        c.m_localAnchorA = new r;
                        c.m_localAnchorB =
                            new r;
                        c.m_localXAxisA = new r;
                        c.m_localYAxisA = new r;
                        c.m_referenceAngle = 0;
                        c.m_impulse = new na(0, 0, 0);
                        c.m_motorImpulse = 0;
                        c.m_lowerTranslation = 0;
                        c.m_upperTranslation = 0;
                        c.m_maxMotorForce = 0;
                        c.m_motorSpeed = 0;
                        c.m_enableLimit = !1;
                        c.m_enableMotor = !1;
                        c.m_limitState = h.b2LimitState.e_inactiveLimit;
                        c.m_indexA = 0;
                        c.m_indexB = 0;
                        c.m_localCenterA = new r;
                        c.m_localCenterB = new r;
                        c.m_invMassA = 0;
                        c.m_invMassB = 0;
                        c.m_invIA = 0;
                        c.m_invIB = 0;
                        c.m_axis = new r(0, 0);
                        c.m_perp = new r(0, 0);
                        c.m_s1 = 0;
                        c.m_s2 = 0;
                        c.m_a1 = 0;
                        c.m_a2 = 0;
                        c.m_K = new xa;
                        c.m_K3 =
                            new xa;
                        c.m_K2 = new ka;
                        c.m_motorMass = 0;
                        c.m_qA = new P;
                        c.m_qB = new P;
                        c.m_lalcA = new r;
                        c.m_lalcB = new r;
                        c.m_rA = new r;
                        c.m_rB = new r;
                        c.m_localAnchorA.Copy(e(b.localAnchorA, r.ZERO));
                        c.m_localAnchorB.Copy(e(b.localAnchorB, r.ZERO));
                        c.m_localXAxisA.Copy(e(b.localAxisA, new r(1, 0))).SelfNormalize();
                        r.CrossOneV(c.m_localXAxisA, c.m_localYAxisA);
                        c.m_referenceAngle = e(b.referenceAngle, 0);
                        c.m_lowerTranslation = e(b.lowerTranslation, 0);
                        c.m_upperTranslation = e(b.upperTranslation, 0);
                        c.m_maxMotorForce = e(b.maxMotorForce, 0);
                        c.m_motorSpeed =
                            e(b.motorSpeed, 0);
                        c.m_enableLimit = e(b.enableLimit, !1);
                        c.m_enableMotor = e(b.enableMotor, !1);
                        return c
                    }
                    C(b, a);
                    b.prototype.InitVelocityConstraints = function(a) {
                        this.m_indexA = this.m_bodyA.m_islandIndex;
                        this.m_indexB = this.m_bodyB.m_islandIndex;
                        this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);
                        this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);
                        this.m_invMassA = this.m_bodyA.m_invMass;
                        this.m_invMassB = this.m_bodyB.m_invMass;
                        this.m_invIA = this.m_bodyA.m_invI;
                        this.m_invIB = this.m_bodyB.m_invI;
                        var c =
                            a.positions[this.m_indexA].c,
                            d = a.velocities[this.m_indexA].v,
                            e = a.velocities[this.m_indexA].w,
                            f = a.positions[this.m_indexB].c,
                            g = a.positions[this.m_indexB].a,
                            k = a.velocities[this.m_indexB].v,
                            l = a.velocities[this.m_indexB].w,
                            m = this.m_qA.SetAngle(a.positions[this.m_indexA].a);
                        g = this.m_qB.SetAngle(g);
                        r.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);
                        var n = P.MulRV(m, this.m_lalcA, this.m_rA);
                        r.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);
                        var H = P.MulRV(g, this.m_lalcB, this.m_rB),
                            J = r.AddVV(r.SubVV(f,
                                c, r.s_t0), r.SubVV(H, n, r.s_t1), b.InitVelocityConstraints_s_d);
                        c = this.m_invMassA;
                        f = this.m_invMassB;
                        g = this.m_invIA;
                        var p = this.m_invIB;
                        P.MulRV(m, this.m_localXAxisA, this.m_axis);
                        this.m_a1 = r.CrossVV(r.AddVV(J, n, r.s_t0), this.m_axis);
                        this.m_a2 = r.CrossVV(H, this.m_axis);
                        this.m_motorMass = c + f + g * this.m_a1 * this.m_a1 + p * this.m_a2 * this.m_a2;
                        0 < this.m_motorMass && (this.m_motorMass = 1 / this.m_motorMass);
                        P.MulRV(m, this.m_localYAxisA, this.m_perp);
                        this.m_s1 = r.CrossVV(r.AddVV(J, n, r.s_t0), this.m_perp);
                        this.m_s2 = r.CrossVV(H,
                            this.m_perp);
                        this.m_K.ex.x = c + f + g * this.m_s1 * this.m_s1 + p * this.m_s2 * this.m_s2;
                        this.m_K.ex.y = g * this.m_s1 + p * this.m_s2;
                        this.m_K.ex.z = g * this.m_s1 * this.m_a1 + p * this.m_s2 * this.m_a2;
                        this.m_K.ey.x = this.m_K.ex.y;
                        this.m_K.ey.y = g + p;
                        0 === this.m_K.ey.y && (this.m_K.ey.y = 1);
                        this.m_K.ey.z = g * this.m_a1 + p * this.m_a2;
                        this.m_K.ez.x = this.m_K.ex.z;
                        this.m_K.ez.y = this.m_K.ey.z;
                        this.m_K.ez.z = c + f + g * this.m_a1 * this.m_a1 + p * this.m_a2 * this.m_a2;
                        this.m_enableLimit ? (m = r.DotVV(this.m_axis, J), .016 > Z(this.m_upperTranslation - this.m_lowerTranslation) ?
                            this.m_limitState = h.b2LimitState.e_equalLimits : m <= this.m_lowerTranslation ? this.m_limitState !== h.b2LimitState.e_atLowerLimit && (this.m_limitState = h.b2LimitState.e_atLowerLimit, this.m_impulse.z = 0) : m >= this.m_upperTranslation ? this.m_limitState !== h.b2LimitState.e_atUpperLimit && (this.m_limitState = h.b2LimitState.e_atUpperLimit, this.m_impulse.z = 0) : (this.m_limitState = h.b2LimitState.e_inactiveLimit, this.m_impulse.z = 0)) : (this.m_limitState = h.b2LimitState.e_inactiveLimit, this.m_impulse.z = 0);
                        this.m_enableMotor ||
                            (this.m_motorImpulse = 0);
                        a.step.warmStarting ? (this.m_impulse.SelfMul(a.step.dtRatio), this.m_motorImpulse *= a.step.dtRatio, m = r.AddVV(r.MulSV(this.m_impulse.x, this.m_perp, r.s_t0), r.MulSV(this.m_motorImpulse + this.m_impulse.z, this.m_axis, r.s_t1), b.InitVelocityConstraints_s_P), n = this.m_impulse.x * this.m_s1 + this.m_impulse.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_a1, H = this.m_impulse.x * this.m_s2 + this.m_impulse.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_a2, d.SelfMulSub(c, m), e -= g * n, k.SelfMulAdd(f,
                            m), l += p * H) : (this.m_impulse.SetZero(), this.m_motorImpulse = 0);
                        a.velocities[this.m_indexA].w = e;
                        a.velocities[this.m_indexB].w = l
                    };
                    b.prototype.SolveVelocityConstraints = function(a) {
                        var d = a.velocities[this.m_indexA].v,
                            e = a.velocities[this.m_indexA].w,
                            f = a.velocities[this.m_indexB].v,
                            g = a.velocities[this.m_indexB].w,
                            k = this.m_invMassA,
                            l = this.m_invMassB,
                            m = this.m_invIA,
                            n = this.m_invIB;
                        if (this.m_enableMotor && this.m_limitState !== h.b2LimitState.e_equalLimits) {
                            var H = r.DotVV(this.m_axis, r.SubVV(f, d, r.s_t0)) + this.m_a2 *
                                g - this.m_a1 * e;
                            H = this.m_motorMass * (this.m_motorSpeed - H);
                            var J = this.m_motorImpulse;
                            var p = a.step.dt * this.m_maxMotorForce;
                            this.m_motorImpulse = c(this.m_motorImpulse + H, -p, p);
                            H = this.m_motorImpulse - J;
                            p = r.MulSV(H, this.m_axis, b.SolveVelocityConstraints_s_P);
                            J = H * this.m_a1;
                            H *= this.m_a2;
                            d.SelfMulSub(k, p);
                            e -= m * J;
                            f.SelfMulAdd(l, p);
                            g += n * H
                        }
                        p = r.DotVV(this.m_perp, r.SubVV(f, d, r.s_t0)) + this.m_s2 * g - this.m_s1 * e;
                        var q = g - e;
                        this.m_enableLimit && this.m_limitState !== h.b2LimitState.e_inactiveLimit ? (H = r.DotVV(this.m_axis, r.SubVV(f,
                                d, r.s_t0)) + this.m_a2 * g - this.m_a1 * e, J = b.SolveVelocityConstraints_s_f1.Copy(this.m_impulse), H = this.m_K.Solve33(-p, -q, -H, b.SolveVelocityConstraints_s_df3), this.m_impulse.SelfAdd(H), this.m_limitState === h.b2LimitState.e_atLowerLimit ? this.m_impulse.z = X(this.m_impulse.z, 0) : this.m_limitState === h.b2LimitState.e_atUpperLimit && (this.m_impulse.z = W(this.m_impulse.z, 0)), p = this.m_K.Solve22(-p - (this.m_impulse.z - J.z) * this.m_K.ez.x, -q - (this.m_impulse.z - J.z) * this.m_K.ez.y, b.SolveVelocityConstraints_s_f2r), p.x += J.x,
                            p.y += J.y, this.m_impulse.x = p.x, this.m_impulse.y = p.y, H.x = this.m_impulse.x - J.x, H.y = this.m_impulse.y - J.y, H.z = this.m_impulse.z - J.z, p = r.AddVV(r.MulSV(H.x, this.m_perp, r.s_t0), r.MulSV(H.z, this.m_axis, r.s_t1), b.SolveVelocityConstraints_s_P), J = H.x * this.m_s1 + H.y + H.z * this.m_a1, H = H.x * this.m_s2 + H.y + H.z * this.m_a2) : (H = this.m_K.Solve22(-p, -q, b.SolveVelocityConstraints_s_df2), this.m_impulse.x += H.x, this.m_impulse.y += H.y, p = r.MulSV(H.x, this.m_perp, b.SolveVelocityConstraints_s_P), J = H.x * this.m_s1 + H.y, H = H.x * this.m_s2 + H.y);
                        d.SelfMulSub(k, p);
                        e -= m * J;
                        f.SelfMulAdd(l, p);
                        a.velocities[this.m_indexA].w = e;
                        a.velocities[this.m_indexB].w = g + n * H
                    };
                    b.prototype.SolvePositionConstraints = function(a) {
                        var d = a.positions[this.m_indexA].c,
                            e = a.positions[this.m_indexA].a,
                            f = a.positions[this.m_indexB].c,
                            g = a.positions[this.m_indexB].a,
                            h = this.m_qA.SetAngle(e),
                            k = this.m_qB.SetAngle(g),
                            l = this.m_invMassA,
                            m = this.m_invMassB,
                            n = this.m_invIA,
                            H = this.m_invIB,
                            J = P.MulRV(h, this.m_lalcA, this.m_rA),
                            p = P.MulRV(k, this.m_lalcB, this.m_rB);
                        var q = r.SubVV(r.AddVV(f, p,
                            r.s_t0), r.AddVV(d, J, r.s_t1), b.SolvePositionConstraints_s_d);
                        var t = P.MulRV(h, this.m_localXAxisA, this.m_axis),
                            aa = r.CrossVV(r.AddVV(q, J, r.s_t0), t);
                        k = r.CrossVV(p, t);
                        h = P.MulRV(h, this.m_localYAxisA, this.m_perp);
                        var u = r.CrossVV(r.AddVV(q, J, r.s_t0), h),
                            v = r.CrossVV(p, h),
                            w = b.SolvePositionConstraints_s_impulse,
                            x = r.DotVV(h, q),
                            y = g - e - this.m_referenceAngle;
                        J = Z(x);
                        p = Z(y);
                        var z = !1;
                        var A = 0;
                        this.m_enableLimit && (q = r.DotVV(t, q), .016 > Z(this.m_upperTranslation - this.m_lowerTranslation) ? (A = c(q, -.2, .2), J = X(J, Z(q)), z = !0) : q <=
                            this.m_lowerTranslation ? (A = c(q - this.m_lowerTranslation + .008, -.2, 0), J = X(J, this.m_lowerTranslation - q), z = !0) : q >= this.m_upperTranslation && (A = c(q - this.m_upperTranslation - .008, 0, .2), J = X(J, q - this.m_upperTranslation), z = !0));
                        if (z) {
                            z = n * u + H * v;
                            var B = n * u * aa + H * v * k;
                            q = n + H;
                            0 === q && (q = 1);
                            var C = n * aa + H * k,
                                D = l + m + n * aa * aa + H * k * k,
                                E = this.m_K3;
                            E.ex.SetXYZ(l + m + n * u * u + H * v * v, z, B);
                            E.ey.SetXYZ(z, q, C);
                            E.ez.SetXYZ(B, C, D);
                            w = E.Solve33(-x, -y, -A, w)
                        } else z = n * u + H * v, q = n + H, 0 === q && (q = 1), A = this.m_K2, A.ex.Set(l + m + n * u * u + H * v * v, z), A.ey.Set(z, q), x =
                            A.Solve(-x, -y, b.SolvePositionConstraints_s_impulse1), w.x = x.x, w.y = x.y, w.z = 0;
                        t = r.AddVV(r.MulSV(w.x, h, r.s_t0), r.MulSV(w.z, t, r.s_t1), b.SolvePositionConstraints_s_P);
                        aa = w.x * u + w.y + w.z * aa;
                        k = w.x * v + w.y + w.z * k;
                        d.SelfMulSub(l, t);
                        e -= n * aa;
                        f.SelfMulAdd(m, t);
                        a.positions[this.m_indexA].a = e;
                        a.positions[this.m_indexB].a = g + H * k;
                        return .008 >= J && p <= V
                    };
                    b.prototype.GetAnchorA = function(a) {
                        return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, a)
                    };
                    b.prototype.GetAnchorB = function(a) {
                        return this.m_bodyB.GetWorldPoint(this.m_localAnchorB,
                            a)
                    };
                    b.prototype.GetReactionForce = function(a, b) {
                        b.x = a * (this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.x);
                        b.y = a * (this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.y);
                        return b
                    };
                    b.prototype.GetReactionTorque = function(a) {
                        return a * this.m_impulse.y
                    };
                    b.prototype.GetLocalAnchorA = function() {
                        return this.m_localAnchorA
                    };
                    b.prototype.GetLocalAnchorB = function() {
                        return this.m_localAnchorB
                    };
                    b.prototype.GetLocalAxisA = function() {
                        return this.m_localXAxisA
                    };
                    b.prototype.GetReferenceAngle = function() {
                        return this.m_referenceAngle
                    };
                    b.prototype.GetJointTranslation = function() {
                        var a = this.m_bodyA.GetWorldPoint(this.m_localAnchorA, b.GetJointTranslation_s_pA),
                            c = this.m_bodyB.GetWorldPoint(this.m_localAnchorB, b.GetJointTranslation_s_pB);
                        a = r.SubVV(c, a, b.GetJointTranslation_s_d);
                        c = this.m_bodyA.GetWorldVector(this.m_localXAxisA, b.GetJointTranslation_s_axis);
                        return r.DotVV(a, c)
                    };
                    b.prototype.GetJointSpeed = function() {
                        var a = this.m_bodyA,
                            b = this.m_bodyB;
                        r.SubVV(this.m_localAnchorA,
                            a.m_sweep.localCenter, this.m_lalcA);
                        var c = P.MulRV(a.m_xf.q, this.m_lalcA, this.m_rA);
                        r.SubVV(this.m_localAnchorB, b.m_sweep.localCenter, this.m_lalcB);
                        var d = P.MulRV(b.m_xf.q, this.m_lalcB, this.m_rB),
                            e = r.AddVV(a.m_sweep.c, c, r.s_t0),
                            f = r.AddVV(b.m_sweep.c, d, r.s_t1);
                        e = r.SubVV(f, e, r.s_t2);
                        f = a.GetWorldVector(this.m_localXAxisA, this.m_axis);
                        var g = a.m_linearVelocity,
                            h = b.m_linearVelocity;
                        a = a.m_angularVelocity;
                        b = b.m_angularVelocity;
                        return r.DotVV(e, r.CrossSV(a, f, r.s_t0)) + r.DotVV(f, r.SubVV(r.AddVCrossSV(h, b, d, r.s_t0),
                            r.AddVCrossSV(g, a, c, r.s_t1), r.s_t0))
                    };
                    b.prototype.IsLimitEnabled = function() {
                        return this.m_enableLimit
                    };
                    b.prototype.EnableLimit = function(a) {
                        a !== this.m_enableLimit && (this.m_bodyA.SetAwake(!0), this.m_bodyB.SetAwake(!0), this.m_enableLimit = a, this.m_impulse.z = 0)
                    };
                    b.prototype.GetLowerLimit = function() {
                        return this.m_lowerTranslation
                    };
                    b.prototype.GetUpperLimit = function() {
                        return this.m_upperTranslation
                    };
                    b.prototype.SetLimits = function(a, b) {
                        if (a !== this.m_lowerTranslation || b !== this.m_upperTranslation) this.m_bodyA.SetAwake(!0),
                            this.m_bodyB.SetAwake(!0), this.m_lowerTranslation = a, this.m_upperTranslation = b, this.m_impulse.z = 0
                    };
                    b.prototype.IsMotorEnabled = function() {
                        return this.m_enableMotor
                    };
                    b.prototype.EnableMotor = function(a) {
                        a !== this.m_enableMotor && (this.m_bodyA.SetAwake(!0), this.m_bodyB.SetAwake(!0), this.m_enableMotor = a)
                    };
                    b.prototype.SetMotorSpeed = function(a) {
                        a !== this.m_motorSpeed && (this.m_bodyA.SetAwake(!0), this.m_bodyB.SetAwake(!0), this.m_motorSpeed = a)
                    };
                    b.prototype.GetMotorSpeed = function() {
                        return this.m_motorSpeed
                    };
                    b.prototype.SetMaxMotorForce =
                        function(a) {
                            a !== this.m_maxMotorForce && (this.m_bodyA.SetAwake(!0), this.m_bodyB.SetAwake(!0), this.m_maxMotorForce = a)
                        };
                    b.prototype.GetMaxMotorForce = function() {
                        return this.m_maxMotorForce
                    };
                    b.prototype.GetMotorForce = function(a) {
                        return a * this.m_motorImpulse
                    };
                    b.prototype.Dump = function(a) {
                        var b = this.m_bodyA.m_islandIndex,
                            c = this.m_bodyB.m_islandIndex;
                        a("  const jd: b2PrismaticJointDef = new b2PrismaticJointDef();\n");
                        a("  jd.bodyA = bodies[%d];\n", b);
                        a("  jd.bodyB = bodies[%d];\n", c);
                        a("  jd.collideConnected = %s;\n",
                            this.m_collideConnected ? "true" : "false");
                        a("  jd.localAnchorA.Set(%.15f, %.15f);\n", this.m_localAnchorA.x, this.m_localAnchorA.y);
                        a("  jd.localAnchorB.Set(%.15f, %.15f);\n", this.m_localAnchorB.x, this.m_localAnchorB.y);
                        a("  jd.localAxisA.Set(%.15f, %.15f);\n", this.m_localXAxisA.x, this.m_localXAxisA.y);
                        a("  jd.referenceAngle = %.15f;\n", this.m_referenceAngle);
                        a("  jd.enableLimit = %s;\n", this.m_enableLimit ? "true" : "false");
                        a("  jd.lowerTranslation = %.15f;\n", this.m_lowerTranslation);
                        a("  jd.upperTranslation = %.15f;\n",
                            this.m_upperTranslation);
                        a("  jd.enableMotor = %s;\n", this.m_enableMotor ? "true" : "false");
                        a("  jd.motorSpeed = %.15f;\n", this.m_motorSpeed);
                        a("  jd.maxMotorForce = %.15f;\n", this.m_maxMotorForce);
                        a("  joints[%d] = this.m_world.CreateJoint(jd);\n", this.m_index)
                    };
                    b.InitVelocityConstraints_s_d = new r;
                    b.InitVelocityConstraints_s_P = new r;
                    b.SolveVelocityConstraints_s_P = new r;
                    b.SolveVelocityConstraints_s_f2r = new r;
                    b.SolveVelocityConstraints_s_f1 = new na;
                    b.SolveVelocityConstraints_s_df3 = new na;
                    b.SolveVelocityConstraints_s_df2 =
                        new r;
                    b.SolvePositionConstraints_s_d = new r;
                    b.SolvePositionConstraints_s_impulse = new na;
                    b.SolvePositionConstraints_s_impulse1 = new r;
                    b.SolvePositionConstraints_s_P = new r;
                    b.GetJointTranslation_s_pA = new r;
                    b.GetJointTranslation_s_pB = new r;
                    b.GetJointTranslation_s_d = new r;
                    b.GetJointTranslation_s_axis = new r;
                    return b
                }(Ea),
                Qd = function(a) {
                    function b() {
                        var b = a.call(this, h.b2JointType.e_pulleyJoint) || this;
                        b.groundAnchorA = new r(-1, 1);
                        b.groundAnchorB = new r(1, 1);
                        b.localAnchorA = new r(-1, 0);
                        b.localAnchorB = new r(1,
                            0);
                        b.lengthA = 0;
                        b.lengthB = 0;
                        b.ratio = 1;
                        b.collideConnected = !0;
                        return b
                    }
                    C(b, a);
                    b.prototype.Initialize = function(a, b, c, d, e, f, g) {
                        this.bodyA = a;
                        this.bodyB = b;
                        this.groundAnchorA.Copy(c);
                        this.groundAnchorB.Copy(d);
                        this.bodyA.GetLocalPoint(e, this.localAnchorA);
                        this.bodyB.GetLocalPoint(f, this.localAnchorB);
                        this.lengthA = r.DistanceVV(e, c);
                        this.lengthB = r.DistanceVV(f, d);
                        this.ratio = g
                    };
                    return b
                }(Da),
                oc = function(a) {
                    function b(b) {
                        var c = a.call(this, b) || this;
                        c.m_groundAnchorA = new r;
                        c.m_groundAnchorB = new r;
                        c.m_lengthA = 0;
                        c.m_lengthB = 0;
                        c.m_localAnchorA = new r;
                        c.m_localAnchorB = new r;
                        c.m_constant = 0;
                        c.m_ratio = 0;
                        c.m_impulse = 0;
                        c.m_indexA = 0;
                        c.m_indexB = 0;
                        c.m_uA = new r;
                        c.m_uB = new r;
                        c.m_rA = new r;
                        c.m_rB = new r;
                        c.m_localCenterA = new r;
                        c.m_localCenterB = new r;
                        c.m_invMassA = 0;
                        c.m_invMassB = 0;
                        c.m_invIA = 0;
                        c.m_invIB = 0;
                        c.m_mass = 0;
                        c.m_qA = new P;
                        c.m_qB = new P;
                        c.m_lalcA = new r;
                        c.m_lalcB = new r;
                        c.m_groundAnchorA.Copy(e(b.groundAnchorA, new r(-1, 1)));
                        c.m_groundAnchorB.Copy(e(b.groundAnchorB, new r(1, 0)));
                        c.m_localAnchorA.Copy(e(b.localAnchorA, new r(-1,
                            0)));
                        c.m_localAnchorB.Copy(e(b.localAnchorB, new r(1, 0)));
                        c.m_lengthA = e(b.lengthA, 0);
                        c.m_lengthB = e(b.lengthB, 0);
                        c.m_ratio = e(b.ratio, 1);
                        c.m_constant = e(b.lengthA, 0) + c.m_ratio * e(b.lengthB, 0);
                        c.m_impulse = 0;
                        return c
                    }
                    C(b, a);
                    b.prototype.InitVelocityConstraints = function(a) {
                        this.m_indexA = this.m_bodyA.m_islandIndex;
                        this.m_indexB = this.m_bodyB.m_islandIndex;
                        this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);
                        this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);
                        this.m_invMassA = this.m_bodyA.m_invMass;
                        this.m_invMassB = this.m_bodyB.m_invMass;
                        this.m_invIA = this.m_bodyA.m_invI;
                        this.m_invIB = this.m_bodyB.m_invI;
                        var c = a.positions[this.m_indexA].c,
                            d = a.velocities[this.m_indexA].v,
                            e = a.velocities[this.m_indexA].w,
                            f = a.positions[this.m_indexB].c,
                            g = a.positions[this.m_indexB].a,
                            h = a.velocities[this.m_indexB].v,
                            k = a.velocities[this.m_indexB].w,
                            l = this.m_qA.SetAngle(a.positions[this.m_indexA].a);
                        g = this.m_qB.SetAngle(g);
                        r.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);
                        P.MulRV(l, this.m_lalcA, this.m_rA);
                        r.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);
                        P.MulRV(g, this.m_lalcB, this.m_rB);
                        this.m_uA.Copy(c).SelfAdd(this.m_rA).SelfSub(this.m_groundAnchorA);
                        this.m_uB.Copy(f).SelfAdd(this.m_rB).SelfSub(this.m_groundAnchorB);
                        c = this.m_uA.Length();
                        f = this.m_uB.Length();
                        .08 < c ? this.m_uA.SelfMul(1 / c) : this.m_uA.SetZero();
                        .08 < f ? this.m_uB.SelfMul(1 / f) : this.m_uB.SetZero();
                        c = r.CrossVV(this.m_rA, this.m_uA);
                        f = r.CrossVV(this.m_rB, this.m_uB);
                        this.m_mass = this.m_invMassA + this.m_invIA * c * c + this.m_ratio * this.m_ratio *
                            (this.m_invMassB + this.m_invIB * f * f);
                        0 < this.m_mass && (this.m_mass = 1 / this.m_mass);
                        a.step.warmStarting ? (this.m_impulse *= a.step.dtRatio, c = r.MulSV(-this.m_impulse, this.m_uA, b.InitVelocityConstraints_s_PA), f = r.MulSV(-this.m_ratio * this.m_impulse, this.m_uB, b.InitVelocityConstraints_s_PB), d.SelfMulAdd(this.m_invMassA, c), e += this.m_invIA * r.CrossVV(this.m_rA, c), h.SelfMulAdd(this.m_invMassB, f), k += this.m_invIB * r.CrossVV(this.m_rB, f)) : this.m_impulse = 0;
                        a.velocities[this.m_indexA].w = e;
                        a.velocities[this.m_indexB].w =
                            k
                    };
                    b.prototype.SolveVelocityConstraints = function(a) {
                        var c = a.velocities[this.m_indexA].v,
                            d = a.velocities[this.m_indexA].w,
                            e = a.velocities[this.m_indexB].v,
                            f = a.velocities[this.m_indexB].w,
                            g = r.AddVCrossSV(c, d, this.m_rA, b.SolveVelocityConstraints_s_vpA),
                            h = r.AddVCrossSV(e, f, this.m_rB, b.SolveVelocityConstraints_s_vpB);
                        g = -r.DotVV(this.m_uA, g) - this.m_ratio * r.DotVV(this.m_uB, h);
                        h = -this.m_mass * g;
                        this.m_impulse += h;
                        g = r.MulSV(-h, this.m_uA, b.SolveVelocityConstraints_s_PA);
                        h = r.MulSV(-this.m_ratio * h, this.m_uB, b.SolveVelocityConstraints_s_PB);
                        c.SelfMulAdd(this.m_invMassA, g);
                        d += this.m_invIA * r.CrossVV(this.m_rA, g);
                        e.SelfMulAdd(this.m_invMassB, h);
                        f += this.m_invIB * r.CrossVV(this.m_rB, h);
                        a.velocities[this.m_indexA].w = d;
                        a.velocities[this.m_indexB].w = f
                    };
                    b.prototype.SolvePositionConstraints = function(a) {
                        var c = a.positions[this.m_indexA].c,
                            d = a.positions[this.m_indexA].a,
                            e = a.positions[this.m_indexB].c,
                            f = a.positions[this.m_indexB].a,
                            g = this.m_qA.SetAngle(d),
                            h = this.m_qB.SetAngle(f);
                        r.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);
                        g = P.MulRV(g,
                            this.m_lalcA, this.m_rA);
                        r.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);
                        h = P.MulRV(h, this.m_lalcB, this.m_rB);
                        var k = this.m_uA.Copy(c).SelfAdd(g).SelfSub(this.m_groundAnchorA),
                            l = this.m_uB.Copy(e).SelfAdd(h).SelfSub(this.m_groundAnchorB),
                            m = k.Length(),
                            n = l.Length();
                        .08 < m ? k.SelfMul(1 / m) : k.SetZero();
                        .08 < n ? l.SelfMul(1 / n) : l.SetZero();
                        var H = r.CrossVV(g, k),
                            J = r.CrossVV(h, l);
                        H = this.m_invMassA + this.m_invIA * H * H + this.m_ratio * this.m_ratio * (this.m_invMassB + this.m_invIB * J * J);
                        0 < H && (H = 1 / H);
                        n = this.m_constant -
                            m - this.m_ratio * n;
                        m = Z(n);
                        n *= -H;
                        k = r.MulSV(-n, k, b.SolvePositionConstraints_s_PA);
                        l = r.MulSV(-this.m_ratio * n, l, b.SolvePositionConstraints_s_PB);
                        c.SelfMulAdd(this.m_invMassA, k);
                        d += this.m_invIA * r.CrossVV(g, k);
                        e.SelfMulAdd(this.m_invMassB, l);
                        f += this.m_invIB * r.CrossVV(h, l);
                        a.positions[this.m_indexA].a = d;
                        a.positions[this.m_indexB].a = f;
                        return .008 > m
                    };
                    b.prototype.GetAnchorA = function(a) {
                        return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, a)
                    };
                    b.prototype.GetAnchorB = function(a) {
                        return this.m_bodyB.GetWorldPoint(this.m_localAnchorB,
                            a)
                    };
                    b.prototype.GetReactionForce = function(a, b) {
                        b.x = a * this.m_impulse * this.m_uB.x;
                        b.y = a * this.m_impulse * this.m_uB.y;
                        return b
                    };
                    b.prototype.GetReactionTorque = function(a) {
                        return 0
                    };
                    b.prototype.GetGroundAnchorA = function() {
                        return this.m_groundAnchorA
                    };
                    b.prototype.GetGroundAnchorB = function() {
                        return this.m_groundAnchorB
                    };
                    b.prototype.GetLengthA = function() {
                        return this.m_lengthA
                    };
                    b.prototype.GetLengthB = function() {
                        return this.m_lengthB
                    };
                    b.prototype.GetRatio = function() {
                        return this.m_ratio
                    };
                    b.prototype.GetCurrentLengthA =
                        function() {
                            var a = this.m_bodyA.GetWorldPoint(this.m_localAnchorA, b.GetCurrentLengthA_s_p);
                            return r.DistanceVV(a, this.m_groundAnchorA)
                        };
                    b.prototype.GetCurrentLengthB = function() {
                        var a = this.m_bodyB.GetWorldPoint(this.m_localAnchorB, b.GetCurrentLengthB_s_p);
                        return r.DistanceVV(a, this.m_groundAnchorB)
                    };
                    b.prototype.Dump = function(a) {
                        var b = this.m_bodyA.m_islandIndex,
                            c = this.m_bodyB.m_islandIndex;
                        a("  const jd: b2PulleyJointDef = new b2PulleyJointDef();\n");
                        a("  jd.bodyA = bodies[%d];\n", b);
                        a("  jd.bodyB = bodies[%d];\n",
                            c);
                        a("  jd.collideConnected = %s;\n", this.m_collideConnected ? "true" : "false");
                        a("  jd.groundAnchorA.Set(%.15f, %.15f);\n", this.m_groundAnchorA.x, this.m_groundAnchorA.y);
                        a("  jd.groundAnchorB.Set(%.15f, %.15f);\n", this.m_groundAnchorB.x, this.m_groundAnchorB.y);
                        a("  jd.localAnchorA.Set(%.15f, %.15f);\n", this.m_localAnchorA.x, this.m_localAnchorA.y);
                        a("  jd.localAnchorB.Set(%.15f, %.15f);\n", this.m_localAnchorB.x, this.m_localAnchorB.y);
                        a("  jd.lengthA = %.15f;\n", this.m_lengthA);
                        a("  jd.lengthB = %.15f;\n",
                            this.m_lengthB);
                        a("  jd.ratio = %.15f;\n", this.m_ratio);
                        a("  joints[%d] = this.m_world.CreateJoint(jd);\n", this.m_index)
                    };
                    b.prototype.ShiftOrigin = function(a) {
                        this.m_groundAnchorA.SelfSub(a);
                        this.m_groundAnchorB.SelfSub(a)
                    };
                    b.InitVelocityConstraints_s_PA = new r;
                    b.InitVelocityConstraints_s_PB = new r;
                    b.SolveVelocityConstraints_s_vpA = new r;
                    b.SolveVelocityConstraints_s_vpB = new r;
                    b.SolveVelocityConstraints_s_PA = new r;
                    b.SolveVelocityConstraints_s_PB = new r;
                    b.SolvePositionConstraints_s_PA = new r;
                    b.SolvePositionConstraints_s_PB =
                        new r;
                    b.GetCurrentLengthA_s_p = new r;
                    b.GetCurrentLengthB_s_p = new r;
                    return b
                }(Ea),
                Rd = function(a) {
                    function b() {
                        var b = a.call(this, h.b2JointType.e_revoluteJoint) || this;
                        b.localAnchorA = new r(0, 0);
                        b.localAnchorB = new r(0, 0);
                        b.referenceAngle = 0;
                        b.enableLimit = !1;
                        b.lowerAngle = 0;
                        b.upperAngle = 0;
                        b.enableMotor = !1;
                        b.motorSpeed = 0;
                        b.maxMotorTorque = 0;
                        return b
                    }
                    C(b, a);
                    b.prototype.Initialize = function(a, b, c) {
                        this.bodyA = a;
                        this.bodyB = b;
                        this.bodyA.GetLocalPoint(c, this.localAnchorA);
                        this.bodyB.GetLocalPoint(c, this.localAnchorB);
                        this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle()
                    };
                    return b
                }(Da),
                pc = function(a) {
                    function b(b) {
                        var c = a.call(this, b) || this;
                        c.m_localAnchorA = new r;
                        c.m_localAnchorB = new r;
                        c.m_impulse = new na;
                        c.m_motorImpulse = 0;
                        c.m_enableMotor = !1;
                        c.m_maxMotorTorque = 0;
                        c.m_motorSpeed = 0;
                        c.m_enableLimit = !1;
                        c.m_referenceAngle = 0;
                        c.m_lowerAngle = 0;
                        c.m_upperAngle = 0;
                        c.m_indexA = 0;
                        c.m_indexB = 0;
                        c.m_rA = new r;
                        c.m_rB = new r;
                        c.m_localCenterA = new r;
                        c.m_localCenterB = new r;
                        c.m_invMassA = 0;
                        c.m_invMassB = 0;
                        c.m_invIA = 0;
                        c.m_invIB = 0;
                        c.m_mass = new xa;
                        c.m_motorMass = 0;
                        c.m_limitState = h.b2LimitState.e_inactiveLimit;
                        c.m_qA = new P;
                        c.m_qB = new P;
                        c.m_lalcA = new r;
                        c.m_lalcB = new r;
                        c.m_K = new ka;
                        c.m_localAnchorA.Copy(e(b.localAnchorA, r.ZERO));
                        c.m_localAnchorB.Copy(e(b.localAnchorB, r.ZERO));
                        c.m_referenceAngle = e(b.referenceAngle, 0);
                        c.m_impulse.SetZero();
                        c.m_motorImpulse = 0;
                        c.m_lowerAngle = e(b.lowerAngle, 0);
                        c.m_upperAngle = e(b.upperAngle, 0);
                        c.m_maxMotorTorque = e(b.maxMotorTorque, 0);
                        c.m_motorSpeed = e(b.motorSpeed, 0);
                        c.m_enableLimit = e(b.enableLimit, !1);
                        c.m_enableMotor = e(b.enableMotor, !1);
                        c.m_limitState = h.b2LimitState.e_inactiveLimit;
                        return c
                    }
                    C(b, a);
                    b.prototype.InitVelocityConstraints = function(a) {
                        this.m_indexA = this.m_bodyA.m_islandIndex;
                        this.m_indexB = this.m_bodyB.m_islandIndex;
                        this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);
                        this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);
                        this.m_invMassA = this.m_bodyA.m_invMass;
                        this.m_invMassB = this.m_bodyB.m_invMass;
                        this.m_invIA = this.m_bodyA.m_invI;
                        this.m_invIB = this.m_bodyB.m_invI;
                        var c = a.positions[this.m_indexA].a,
                            d = a.velocities[this.m_indexA].v,
                            e = a.velocities[this.m_indexA].w,
                            f = a.positions[this.m_indexB].a,
                            g = a.velocities[this.m_indexB].v,
                            k = a.velocities[this.m_indexB].w,
                            l = this.m_qA.SetAngle(c),
                            m = this.m_qB.SetAngle(f);
                        r.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);
                        P.MulRV(l, this.m_lalcA, this.m_rA);
                        r.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);
                        P.MulRV(m, this.m_lalcB, this.m_rB);
                        l = this.m_invMassA;
                        m = this.m_invMassB;
                        var n = this.m_invIA,
                            H = this.m_invIB,
                            J = 0 === n + H;
                        this.m_mass.ex.x = l + m + this.m_rA.y *
                            this.m_rA.y * n + this.m_rB.y * this.m_rB.y * H;
                        this.m_mass.ey.x = -this.m_rA.y * this.m_rA.x * n - this.m_rB.y * this.m_rB.x * H;
                        this.m_mass.ez.x = -this.m_rA.y * n - this.m_rB.y * H;
                        this.m_mass.ex.y = this.m_mass.ey.x;
                        this.m_mass.ey.y = l + m + this.m_rA.x * this.m_rA.x * n + this.m_rB.x * this.m_rB.x * H;
                        this.m_mass.ez.y = this.m_rA.x * n + this.m_rB.x * H;
                        this.m_mass.ex.z = this.m_mass.ez.x;
                        this.m_mass.ey.z = this.m_mass.ez.y;
                        this.m_mass.ez.z = n + H;
                        this.m_motorMass = n + H;
                        0 < this.m_motorMass && (this.m_motorMass = 1 / this.m_motorMass);
                        this.m_enableMotor && !J || (this.m_motorImpulse =
                            0);
                        this.m_enableLimit && !J ? (c = f - c - this.m_referenceAngle, Z(this.m_upperAngle - this.m_lowerAngle) < 2 * V ? this.m_limitState = h.b2LimitState.e_equalLimits : c <= this.m_lowerAngle ? (this.m_limitState !== h.b2LimitState.e_atLowerLimit && (this.m_impulse.z = 0), this.m_limitState = h.b2LimitState.e_atLowerLimit) : c >= this.m_upperAngle ? (this.m_limitState !== h.b2LimitState.e_atUpperLimit && (this.m_impulse.z = 0), this.m_limitState = h.b2LimitState.e_atUpperLimit) : (this.m_limitState = h.b2LimitState.e_inactiveLimit, this.m_impulse.z = 0)) :
                            this.m_limitState = h.b2LimitState.e_inactiveLimit;
                        a.step.warmStarting ? (this.m_impulse.SelfMul(a.step.dtRatio), this.m_motorImpulse *= a.step.dtRatio, c = b.InitVelocityConstraints_s_P.Set(this.m_impulse.x, this.m_impulse.y), d.SelfMulSub(l, c), e -= n * (r.CrossVV(this.m_rA, c) + this.m_motorImpulse + this.m_impulse.z), g.SelfMulAdd(m, c), k += H * (r.CrossVV(this.m_rB, c) + this.m_motorImpulse + this.m_impulse.z)) : (this.m_impulse.SetZero(), this.m_motorImpulse = 0);
                        a.velocities[this.m_indexA].w = e;
                        a.velocities[this.m_indexB].w = k
                    };
                    b.prototype.SolveVelocityConstraints = function(a) {
                        var d = a.velocities[this.m_indexA].v,
                            e = a.velocities[this.m_indexA].w,
                            f = a.velocities[this.m_indexB].v,
                            g = a.velocities[this.m_indexB].w,
                            k = this.m_invMassA,
                            l = this.m_invMassB,
                            m = this.m_invIA,
                            n = this.m_invIB,
                            H = 0 === m + n;
                        if (this.m_enableMotor && this.m_limitState !== h.b2LimitState.e_equalLimits && !H) {
                            var J = -this.m_motorMass * (g - e - this.m_motorSpeed);
                            var p = this.m_motorImpulse;
                            var q = a.step.dt * this.m_maxMotorTorque;
                            this.m_motorImpulse = c(this.m_motorImpulse + J, -q, q);
                            J = this.m_motorImpulse -
                                p;
                            e -= m * J;
                            g += n * J
                        }
                        this.m_enableLimit && this.m_limitState !== h.b2LimitState.e_inactiveLimit && !H ? (p = r.SubVV(r.AddVCrossSV(f, g, this.m_rB, r.s_t0), r.AddVCrossSV(d, e, this.m_rA, r.s_t1), b.SolveVelocityConstraints_s_Cdot1), H = this.m_mass.Solve33(p.x, p.y, g - e, b.SolveVelocityConstraints_s_impulse_v3).SelfNeg(), this.m_limitState === h.b2LimitState.e_equalLimits ? this.m_impulse.SelfAdd(H) : this.m_limitState === h.b2LimitState.e_atLowerLimit ? (J = this.m_impulse.z + H.z, 0 > J ? (J = -p.x + this.m_impulse.z * this.m_mass.ez.x, p = -p.y + this.m_impulse.z *
                            this.m_mass.ez.y, J = this.m_mass.Solve22(J, p, b.SolveVelocityConstraints_s_reduced_v2), H.x = J.x, H.y = J.y, H.z = -this.m_impulse.z, this.m_impulse.x += J.x, this.m_impulse.y += J.y, this.m_impulse.z = 0) : this.m_impulse.SelfAdd(H)) : this.m_limitState === h.b2LimitState.e_atUpperLimit && (J = this.m_impulse.z + H.z, 0 < J ? (J = -p.x + this.m_impulse.z * this.m_mass.ez.x, p = -p.y + this.m_impulse.z * this.m_mass.ez.y, J = this.m_mass.Solve22(J, p, b.SolveVelocityConstraints_s_reduced_v2), H.x = J.x, H.y = J.y, H.z = -this.m_impulse.z, this.m_impulse.x += J.x,
                            this.m_impulse.y += J.y, this.m_impulse.z = 0) : this.m_impulse.SelfAdd(H)), J = b.SolveVelocityConstraints_s_P.Set(H.x, H.y), d.SelfMulSub(k, J), e -= m * (r.CrossVV(this.m_rA, J) + H.z), f.SelfMulAdd(l, J), g += n * (r.CrossVV(this.m_rB, J) + H.z)) : (H = r.SubVV(r.AddVCrossSV(f, g, this.m_rB, r.s_t0), r.AddVCrossSV(d, e, this.m_rA, r.s_t1), b.SolveVelocityConstraints_s_Cdot_v2), H = this.m_mass.Solve22(-H.x, -H.y, b.SolveVelocityConstraints_s_impulse_v2), this.m_impulse.x += H.x, this.m_impulse.y += H.y, d.SelfMulSub(k, H), e -= m * r.CrossVV(this.m_rA,
                            H), f.SelfMulAdd(l, H), g += n * r.CrossVV(this.m_rB, H));
                        a.velocities[this.m_indexA].w = e;
                        a.velocities[this.m_indexB].w = g
                    };
                    b.prototype.SolvePositionConstraints = function(a) {
                        var d = a.positions[this.m_indexA].c,
                            e = a.positions[this.m_indexA].a,
                            f = a.positions[this.m_indexB].c,
                            g = a.positions[this.m_indexB].a,
                            k = this.m_qA.SetAngle(e),
                            l = this.m_qB.SetAngle(g),
                            m = 0,
                            n = 0 === this.m_invIA + this.m_invIB;
                        if (this.m_enableLimit && this.m_limitState !== h.b2LimitState.e_inactiveLimit && !n) {
                            var H = g - e - this.m_referenceAngle;
                            n = 0;
                            this.m_limitState ===
                                h.b2LimitState.e_equalLimits ? (H = c(H - this.m_lowerAngle, -ba, ba), n = -this.m_motorMass * H, m = Z(H)) : this.m_limitState === h.b2LimitState.e_atLowerLimit ? (H -= this.m_lowerAngle, m = -H, H = c(H + V, -ba, 0), n = -this.m_motorMass * H) : this.m_limitState === h.b2LimitState.e_atUpperLimit && (m = H -= this.m_upperAngle, H = c(H - V, 0, ba), n = -this.m_motorMass * H);
                            e -= this.m_invIA * n;
                            g += this.m_invIB * n
                        }
                        k.SetAngle(e);
                        l.SetAngle(g);
                        r.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);
                        k = P.MulRV(k, this.m_lalcA, this.m_rA);
                        r.SubVV(this.m_localAnchorB,
                            this.m_localCenterB, this.m_lalcB);
                        n = P.MulRV(l, this.m_lalcB, this.m_rB);
                        var J = r.SubVV(r.AddVV(f, n, r.s_t0), r.AddVV(d, k, r.s_t1), b.SolvePositionConstraints_s_C_v2);
                        l = J.Length();
                        H = this.m_invMassA;
                        var p = this.m_invMassB,
                            q = this.m_invIA,
                            t = this.m_invIB,
                            aa = this.m_K;
                        aa.ex.x = H + p + q * k.y * k.y + t * n.y * n.y;
                        aa.ex.y = -q * k.x * k.y - t * n.x * n.y;
                        aa.ey.x = aa.ex.y;
                        aa.ey.y = H + p + q * k.x * k.x + t * n.x * n.x;
                        J = aa.Solve(J.x, J.y, b.SolvePositionConstraints_s_impulse).SelfNeg();
                        d.SelfMulSub(H, J);
                        e -= q * r.CrossVV(k, J);
                        f.SelfMulAdd(p, J);
                        g += t * r.CrossVV(n,
                            J);
                        a.positions[this.m_indexA].a = e;
                        a.positions[this.m_indexB].a = g;
                        return .008 >= l && m <= V
                    };
                    b.prototype.GetAnchorA = function(a) {
                        return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, a)
                    };
                    b.prototype.GetAnchorB = function(a) {
                        return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, a)
                    };
                    b.prototype.GetReactionForce = function(a, b) {
                        b.x = a * this.m_impulse.x;
                        b.y = a * this.m_impulse.y;
                        return b
                    };
                    b.prototype.GetReactionTorque = function(a) {
                        return a * this.m_impulse.z
                    };
                    b.prototype.GetLocalAnchorA = function() {
                        return this.m_localAnchorA
                    };
                    b.prototype.GetLocalAnchorB = function() {
                        return this.m_localAnchorB
                    };
                    b.prototype.GetReferenceAngle = function() {
                        return this.m_referenceAngle
                    };
                    b.prototype.GetJointAngle = function() {
                        return this.m_bodyB.m_sweep.a - this.m_bodyA.m_sweep.a - this.m_referenceAngle
                    };
                    b.prototype.GetJointSpeed = function() {
                        return this.m_bodyB.m_angularVelocity - this.m_bodyA.m_angularVelocity
                    };
                    b.prototype.IsMotorEnabled = function() {
                        return this.m_enableMotor
                    };
                    b.prototype.EnableMotor = function(a) {
                        a !== this.m_enableMotor && (this.m_bodyA.SetAwake(!0),
                            this.m_bodyB.SetAwake(!0), this.m_enableMotor = a)
                    };
                    b.prototype.GetMotorTorque = function(a) {
                        return a * this.m_motorImpulse
                    };
                    b.prototype.GetMotorSpeed = function() {
                        return this.m_motorSpeed
                    };
                    b.prototype.SetMaxMotorTorque = function(a) {
                        a !== this.m_maxMotorTorque && (this.m_bodyA.SetAwake(!0), this.m_bodyB.SetAwake(!0), this.m_maxMotorTorque = a)
                    };
                    b.prototype.GetMaxMotorTorque = function() {
                        return this.m_maxMotorTorque
                    };
                    b.prototype.IsLimitEnabled = function() {
                        return this.m_enableLimit
                    };
                    b.prototype.EnableLimit = function(a) {
                        a !==
                            this.m_enableLimit && (this.m_bodyA.SetAwake(!0), this.m_bodyB.SetAwake(!0), this.m_enableLimit = a, this.m_impulse.z = 0)
                    };
                    b.prototype.GetLowerLimit = function() {
                        return this.m_lowerAngle
                    };
                    b.prototype.GetUpperLimit = function() {
                        return this.m_upperAngle
                    };
                    b.prototype.SetLimits = function(a, b) {
                        if (a !== this.m_lowerAngle || b !== this.m_upperAngle) this.m_bodyA.SetAwake(!0), this.m_bodyB.SetAwake(!0), this.m_impulse.z = 0, this.m_lowerAngle = a, this.m_upperAngle = b
                    };
                    b.prototype.SetMotorSpeed = function(a) {
                        a !== this.m_motorSpeed && (this.m_bodyA.SetAwake(!0),
                            this.m_bodyB.SetAwake(!0), this.m_motorSpeed = a)
                    };
                    b.prototype.Dump = function(a) {
                        var b = this.m_bodyA.m_islandIndex,
                            c = this.m_bodyB.m_islandIndex;
                        a("  const jd: b2RevoluteJointDef = new b2RevoluteJointDef();\n");
                        a("  jd.bodyA = bodies[%d];\n", b);
                        a("  jd.bodyB = bodies[%d];\n", c);
                        a("  jd.collideConnected = %s;\n", this.m_collideConnected ? "true" : "false");
                        a("  jd.localAnchorA.Set(%.15f, %.15f);\n", this.m_localAnchorA.x, this.m_localAnchorA.y);
                        a("  jd.localAnchorB.Set(%.15f, %.15f);\n", this.m_localAnchorB.x, this.m_localAnchorB.y);
                        a("  jd.referenceAngle = %.15f;\n", this.m_referenceAngle);
                        a("  jd.enableLimit = %s;\n", this.m_enableLimit ? "true" : "false");
                        a("  jd.lowerAngle = %.15f;\n", this.m_lowerAngle);
                        a("  jd.upperAngle = %.15f;\n", this.m_upperAngle);
                        a("  jd.enableMotor = %s;\n", this.m_enableMotor ? "true" : "false");
                        a("  jd.motorSpeed = %.15f;\n", this.m_motorSpeed);
                        a("  jd.maxMotorTorque = %.15f;\n", this.m_maxMotorTorque);
                        a("  joints[%d] = this.m_world.CreateJoint(jd);\n", this.m_index)
                    };
                    b.InitVelocityConstraints_s_P = new r;
                    b.SolveVelocityConstraints_s_P =
                        new r;
                    b.SolveVelocityConstraints_s_Cdot_v2 = new r;
                    b.SolveVelocityConstraints_s_Cdot1 = new r;
                    b.SolveVelocityConstraints_s_impulse_v3 = new na;
                    b.SolveVelocityConstraints_s_reduced_v2 = new r;
                    b.SolveVelocityConstraints_s_impulse_v2 = new r;
                    b.SolvePositionConstraints_s_C_v2 = new r;
                    b.SolvePositionConstraints_s_impulse = new r;
                    return b
                }(Ea),
                Sd = function(a) {
                    function b() {
                        var b = a.call(this, h.b2JointType.e_ropeJoint) || this;
                        b.localAnchorA = new r(-1, 0);
                        b.localAnchorB = new r(1, 0);
                        b.maxLength = 0;
                        return b
                    }
                    C(b, a);
                    return b
                }(Da),
                qc = function(a) {
                    function b(b) {
                        var c = a.call(this, b) || this;
                        c.m_localAnchorA = new r;
                        c.m_localAnchorB = new r;
                        c.m_maxLength = 0;
                        c.m_length = 0;
                        c.m_impulse = 0;
                        c.m_indexA = 0;
                        c.m_indexB = 0;
                        c.m_u = new r;
                        c.m_rA = new r;
                        c.m_rB = new r;
                        c.m_localCenterA = new r;
                        c.m_localCenterB = new r;
                        c.m_invMassA = 0;
                        c.m_invMassB = 0;
                        c.m_invIA = 0;
                        c.m_invIB = 0;
                        c.m_mass = 0;
                        c.m_state = h.b2LimitState.e_inactiveLimit;
                        c.m_qA = new P;
                        c.m_qB = new P;
                        c.m_lalcA = new r;
                        c.m_lalcB = new r;
                        c.m_localAnchorA.Copy(e(b.localAnchorA, new r(-1, 0)));
                        c.m_localAnchorB.Copy(e(b.localAnchorB,
                            new r(1, 0)));
                        c.m_maxLength = e(b.maxLength, 0);
                        return c
                    }
                    C(b, a);
                    b.prototype.InitVelocityConstraints = function(a) {
                        this.m_indexA = this.m_bodyA.m_islandIndex;
                        this.m_indexB = this.m_bodyB.m_islandIndex;
                        this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);
                        this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);
                        this.m_invMassA = this.m_bodyA.m_invMass;
                        this.m_invMassB = this.m_bodyB.m_invMass;
                        this.m_invIA = this.m_bodyA.m_invI;
                        this.m_invIB = this.m_bodyB.m_invI;
                        var c = a.positions[this.m_indexA].c,
                            d = a.velocities[this.m_indexA].v,
                            e = a.velocities[this.m_indexA].w,
                            f = a.positions[this.m_indexB].c,
                            g = a.positions[this.m_indexB].a,
                            k = a.velocities[this.m_indexB].v,
                            l = a.velocities[this.m_indexB].w,
                            m = this.m_qA.SetAngle(a.positions[this.m_indexA].a);
                        g = this.m_qB.SetAngle(g);
                        r.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);
                        P.MulRV(m, this.m_lalcA, this.m_rA);
                        r.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);
                        P.MulRV(g, this.m_lalcB, this.m_rB);
                        this.m_u.Copy(f).SelfAdd(this.m_rB).SelfSub(c).SelfSub(this.m_rA);
                        this.m_length =
                            this.m_u.Length();
                        this.m_state = 0 < this.m_length - this.m_maxLength ? h.b2LimitState.e_atUpperLimit : h.b2LimitState.e_inactiveLimit;
                        .008 < this.m_length ? (this.m_u.SelfMul(1 / this.m_length), c = r.CrossVV(this.m_rA, this.m_u), f = r.CrossVV(this.m_rB, this.m_u), c = this.m_invMassA + this.m_invIA * c * c + this.m_invMassB + this.m_invIB * f * f, this.m_mass = 0 !== c ? 1 / c : 0, a.step.warmStarting ? (this.m_impulse *= a.step.dtRatio, c = r.MulSV(this.m_impulse, this.m_u, b.InitVelocityConstraints_s_P), d.SelfMulSub(this.m_invMassA, c), e -= this.m_invIA * r.CrossVV(this.m_rA,
                            c), k.SelfMulAdd(this.m_invMassB, c), l += this.m_invIB * r.CrossVV(this.m_rB, c)) : this.m_impulse = 0, a.velocities[this.m_indexA].w = e, a.velocities[this.m_indexB].w = l) : (this.m_u.SetZero(), this.m_impulse = this.m_mass = 0)
                    };
                    b.prototype.SolveVelocityConstraints = function(a) {
                        var c = a.velocities[this.m_indexA].v,
                            d = a.velocities[this.m_indexA].w,
                            e = a.velocities[this.m_indexB].v,
                            f = a.velocities[this.m_indexB].w,
                            g = r.AddVCrossSV(c, d, this.m_rA, b.SolveVelocityConstraints_s_vpA),
                            h = r.AddVCrossSV(e, f, this.m_rB, b.SolveVelocityConstraints_s_vpB),
                            k = this.m_length - this.m_maxLength;
                        g = r.DotVV(this.m_u, r.SubVV(h, g, r.s_t0));
                        0 > k && (g += a.step.inv_dt * k);
                        k = -this.m_mass * g;
                        g = this.m_impulse;
                        this.m_impulse = W(0, this.m_impulse + k);
                        k = this.m_impulse - g;
                        k = r.MulSV(k, this.m_u, b.SolveVelocityConstraints_s_P);
                        c.SelfMulSub(this.m_invMassA, k);
                        d -= this.m_invIA * r.CrossVV(this.m_rA, k);
                        e.SelfMulAdd(this.m_invMassB, k);
                        f += this.m_invIB * r.CrossVV(this.m_rB, k);
                        a.velocities[this.m_indexA].w = d;
                        a.velocities[this.m_indexB].w = f
                    };
                    b.prototype.SolvePositionConstraints = function(a) {
                        var d =
                            a.positions[this.m_indexA].c,
                            e = a.positions[this.m_indexA].a,
                            f = a.positions[this.m_indexB].c,
                            g = a.positions[this.m_indexB].a,
                            h = this.m_qA.SetAngle(e),
                            k = this.m_qB.SetAngle(g);
                        r.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);
                        h = P.MulRV(h, this.m_lalcA, this.m_rA);
                        r.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);
                        k = P.MulRV(k, this.m_lalcB, this.m_rB);
                        var l = this.m_u.Copy(f).SelfAdd(k).SelfSub(d).SelfSub(h),
                            m = l.Normalize(),
                            n = m - this.m_maxLength;
                        n = c(n, 0, .2);
                        l = r.MulSV(-this.m_mass * n, l, b.SolvePositionConstraints_s_P);
                        d.SelfMulSub(this.m_invMassA, l);
                        e -= this.m_invIA * r.CrossVV(h, l);
                        f.SelfMulAdd(this.m_invMassB, l);
                        g += this.m_invIB * r.CrossVV(k, l);
                        a.positions[this.m_indexA].a = e;
                        a.positions[this.m_indexB].a = g;
                        return .008 > m - this.m_maxLength
                    };
                    b.prototype.GetAnchorA = function(a) {
                        return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, a)
                    };
                    b.prototype.GetAnchorB = function(a) {
                        return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, a)
                    };
                    b.prototype.GetReactionForce = function(a, b) {
                        return r.MulSV(a * this.m_impulse, this.m_u, b)
                    };
                    b.prototype.GetReactionTorque =
                        function(a) {
                            return 0
                        };
                    b.prototype.GetLocalAnchorA = function() {
                        return this.m_localAnchorA
                    };
                    b.prototype.GetLocalAnchorB = function() {
                        return this.m_localAnchorB
                    };
                    b.prototype.SetMaxLength = function(a) {
                        this.m_maxLength = a
                    };
                    b.prototype.GetMaxLength = function() {
                        return this.m_maxLength
                    };
                    b.prototype.GetLimitState = function() {
                        return this.m_state
                    };
                    b.prototype.Dump = function(a) {
                        var b = this.m_bodyA.m_islandIndex,
                            c = this.m_bodyB.m_islandIndex;
                        a("  const jd: b2RopeJointDef = new b2RopeJointDef();\n");
                        a("  jd.bodyA = bodies[%d];\n",
                            b);
                        a("  jd.bodyB = bodies[%d];\n", c);
                        a("  jd.collideConnected = %s;\n", this.m_collideConnected ? "true" : "false");
                        a("  jd.localAnchorA.Set(%.15f, %.15f);\n", this.m_localAnchorA.x, this.m_localAnchorA.y);
                        a("  jd.localAnchorB.Set(%.15f, %.15f);\n", this.m_localAnchorB.x, this.m_localAnchorB.y);
                        a("  jd.maxLength = %.15f;\n", this.m_maxLength);
                        a("  joints[%d] = this.m_world.CreateJoint(jd);\n", this.m_index)
                    };
                    b.InitVelocityConstraints_s_P = new r;
                    b.SolveVelocityConstraints_s_vpA = new r;
                    b.SolveVelocityConstraints_s_vpB =
                        new r;
                    b.SolveVelocityConstraints_s_P = new r;
                    b.SolvePositionConstraints_s_P = new r;
                    return b
                }(Ea),
                Td = function(a) {
                    function b() {
                        var b = a.call(this, h.b2JointType.e_weldJoint) || this;
                        b.localAnchorA = new r;
                        b.localAnchorB = new r;
                        b.referenceAngle = 0;
                        b.frequencyHz = 0;
                        b.dampingRatio = 0;
                        return b
                    }
                    C(b, a);
                    b.prototype.Initialize = function(a, b, c) {
                        this.bodyA = a;
                        this.bodyB = b;
                        this.bodyA.GetLocalPoint(c, this.localAnchorA);
                        this.bodyB.GetLocalPoint(c, this.localAnchorB);
                        this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle()
                    };
                    return b
                }(Da),
                rc = function(a) {
                    function b(b) {
                        var c = a.call(this, b) || this;
                        c.m_frequencyHz = 0;
                        c.m_dampingRatio = 0;
                        c.m_bias = 0;
                        c.m_localAnchorA = new r;
                        c.m_localAnchorB = new r;
                        c.m_referenceAngle = 0;
                        c.m_gamma = 0;
                        c.m_impulse = new na(0, 0, 0);
                        c.m_indexA = 0;
                        c.m_indexB = 0;
                        c.m_rA = new r;
                        c.m_rB = new r;
                        c.m_localCenterA = new r;
                        c.m_localCenterB = new r;
                        c.m_invMassA = 0;
                        c.m_invMassB = 0;
                        c.m_invIA = 0;
                        c.m_invIB = 0;
                        c.m_mass = new xa;
                        c.m_qA = new P;
                        c.m_qB = new P;
                        c.m_lalcA = new r;
                        c.m_lalcB = new r;
                        c.m_K = new xa;
                        c.m_frequencyHz = e(b.frequencyHz, 0);
                        c.m_dampingRatio =
                            e(b.dampingRatio, 0);
                        c.m_localAnchorA.Copy(e(b.localAnchorA, r.ZERO));
                        c.m_localAnchorB.Copy(e(b.localAnchorB, r.ZERO));
                        c.m_referenceAngle = e(b.referenceAngle, 0);
                        c.m_impulse.SetZero();
                        return c
                    }
                    C(b, a);
                    b.prototype.InitVelocityConstraints = function(a) {
                        this.m_indexA = this.m_bodyA.m_islandIndex;
                        this.m_indexB = this.m_bodyB.m_islandIndex;
                        this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);
                        this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);
                        this.m_invMassA = this.m_bodyA.m_invMass;
                        this.m_invMassB = this.m_bodyB.m_invMass;
                        this.m_invIA = this.m_bodyA.m_invI;
                        this.m_invIB = this.m_bodyB.m_invI;
                        var c = a.positions[this.m_indexA].a,
                            d = a.velocities[this.m_indexA].v,
                            e = a.velocities[this.m_indexA].w,
                            f = a.positions[this.m_indexB].a,
                            g = a.velocities[this.m_indexB].v,
                            h = a.velocities[this.m_indexB].w,
                            k = this.m_qA.SetAngle(c),
                            l = this.m_qB.SetAngle(f);
                        r.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);
                        P.MulRV(k, this.m_lalcA, this.m_rA);
                        r.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);
                        P.MulRV(l, this.m_lalcB, this.m_rB);
                        k =
                            this.m_invMassA;
                        l = this.m_invMassB;
                        var m = this.m_invIA,
                            n = this.m_invIB,
                            H = this.m_K;
                        H.ex.x = k + l + this.m_rA.y * this.m_rA.y * m + this.m_rB.y * this.m_rB.y * n;
                        H.ey.x = -this.m_rA.y * this.m_rA.x * m - this.m_rB.y * this.m_rB.x * n;
                        H.ez.x = -this.m_rA.y * m - this.m_rB.y * n;
                        H.ex.y = H.ey.x;
                        H.ey.y = k + l + this.m_rA.x * this.m_rA.x * m + this.m_rB.x * this.m_rB.x * n;
                        H.ez.y = this.m_rA.x * m + this.m_rB.x * n;
                        H.ex.z = H.ez.x;
                        H.ey.z = H.ez.y;
                        H.ez.z = m + n;
                        if (0 < this.m_frequencyHz) {
                            H.GetInverse22(this.m_mass);
                            H = m + n;
                            var p = 0 < H ? 1 / H : 0;
                            c = f - c - this.m_referenceAngle;
                            f = 6.28318530718 *
                                this.m_frequencyHz;
                            var J = p * f * f,
                                q = a.step.dt;
                            this.m_gamma = q * (2 * p * this.m_dampingRatio * f + q * J);
                            this.m_gamma = 0 !== this.m_gamma ? 1 / this.m_gamma : 0;
                            this.m_bias = c * q * J * this.m_gamma;
                            H += this.m_gamma;
                            this.m_mass.ez.z = 0 !== H ? 1 / H : 0
                        } else H.GetSymInverse33(this.m_mass), this.m_bias = this.m_gamma = 0;
                        a.step.warmStarting ? (this.m_impulse.SelfMul(a.step.dtRatio), H = b.InitVelocityConstraints_s_P.Set(this.m_impulse.x, this.m_impulse.y), d.SelfMulSub(k, H), e -= m * (r.CrossVV(this.m_rA, H) + this.m_impulse.z), g.SelfMulAdd(l, H), h += n * (r.CrossVV(this.m_rB,
                            H) + this.m_impulse.z)) : this.m_impulse.SetZero();
                        a.velocities[this.m_indexA].w = e;
                        a.velocities[this.m_indexB].w = h
                    };
                    b.prototype.SolveVelocityConstraints = function(a) {
                        var c = a.velocities[this.m_indexA].v,
                            d = a.velocities[this.m_indexA].w,
                            e = a.velocities[this.m_indexB].v,
                            f = a.velocities[this.m_indexB].w,
                            g = this.m_invMassA,
                            h = this.m_invMassB,
                            k = this.m_invIA,
                            l = this.m_invIB;
                        if (0 < this.m_frequencyHz) {
                            var m = -this.m_mass.ez.z * (f - d + this.m_bias + this.m_gamma * this.m_impulse.z);
                            this.m_impulse.z += m;
                            d -= k * m;
                            f += l * m;
                            m = r.SubVV(r.AddVCrossSV(e,
                                f, this.m_rB, r.s_t0), r.AddVCrossSV(c, d, this.m_rA, r.s_t1), b.SolveVelocityConstraints_s_Cdot1);
                            m = xa.MulM33XY(this.m_mass, m.x, m.y, b.SolveVelocityConstraints_s_impulse1).SelfNeg();
                            this.m_impulse.x += m.x;
                            this.m_impulse.y += m.y;
                            c.SelfMulSub(g, m);
                            d -= k * r.CrossVV(this.m_rA, m);
                            e.SelfMulAdd(h, m);
                            f += l * r.CrossVV(this.m_rB, m)
                        } else {
                            m = r.SubVV(r.AddVCrossSV(e, f, this.m_rB, r.s_t0), r.AddVCrossSV(c, d, this.m_rA, r.s_t1), b.SolveVelocityConstraints_s_Cdot1);
                            var n = xa.MulM33XYZ(this.m_mass, m.x, m.y, f - d, b.SolveVelocityConstraints_s_impulse).SelfNeg();
                            this.m_impulse.SelfAdd(n);
                            m = b.SolveVelocityConstraints_s_P.Set(n.x, n.y);
                            c.SelfMulSub(g, m);
                            d -= k * (r.CrossVV(this.m_rA, m) + n.z);
                            e.SelfMulAdd(h, m);
                            f += l * (r.CrossVV(this.m_rB, m) + n.z)
                        }
                        a.velocities[this.m_indexA].w = d;
                        a.velocities[this.m_indexB].w = f
                    };
                    b.prototype.SolvePositionConstraints = function(a) {
                        var c = a.positions[this.m_indexA].c,
                            d = a.positions[this.m_indexA].a,
                            e = a.positions[this.m_indexB].c,
                            f = a.positions[this.m_indexB].a,
                            g = this.m_qA.SetAngle(d),
                            h = this.m_qB.SetAngle(f),
                            k = this.m_invMassA,
                            l = this.m_invMassB,
                            m = this.m_invIA,
                            n = this.m_invIB;
                        r.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);
                        var H = P.MulRV(g, this.m_lalcA, this.m_rA);
                        r.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);
                        var p = P.MulRV(h, this.m_lalcB, this.m_rB),
                            J = this.m_K;
                        J.ex.x = k + l + H.y * H.y * m + p.y * p.y * n;
                        J.ey.x = -H.y * H.x * m - p.y * p.x * n;
                        J.ez.x = -H.y * m - p.y * n;
                        J.ex.y = J.ey.x;
                        J.ey.y = k + l + H.x * H.x * m + p.x * p.x * n;
                        J.ez.y = H.x * m + p.x * n;
                        J.ex.z = J.ez.x;
                        J.ey.z = J.ez.y;
                        J.ez.z = m + n;
                        if (0 < this.m_frequencyHz) {
                            var q = r.SubVV(r.AddVV(e, p, r.s_t0), r.AddVV(c, H, r.s_t1),
                                b.SolvePositionConstraints_s_C1);
                            h = q.Length();
                            g = 0;
                            q = J.Solve22(q.x, q.y, b.SolvePositionConstraints_s_P).SelfNeg();
                            c.SelfMulSub(k, q);
                            d -= m * r.CrossVV(H, q);
                            e.SelfMulAdd(l, q);
                            f += n * r.CrossVV(p, q)
                        } else q = r.SubVV(r.AddVV(e, p, r.s_t0), r.AddVV(c, H, r.s_t1), b.SolvePositionConstraints_s_C1), H = f - d - this.m_referenceAngle, h = q.Length(), g = Z(H), H = J.Solve33(q.x, q.y, H, b.SolvePositionConstraints_s_impulse).SelfNeg(), q = b.SolvePositionConstraints_s_P.Set(H.x, H.y), c.SelfMulSub(k, q), d -= m * (r.CrossVV(this.m_rA, q) + H.z), e.SelfMulAdd(l,
                            q), f += n * (r.CrossVV(this.m_rB, q) + H.z);
                        a.positions[this.m_indexA].a = d;
                        a.positions[this.m_indexB].a = f;
                        return .008 >= h && g <= V
                    };
                    b.prototype.GetAnchorA = function(a) {
                        return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, a)
                    };
                    b.prototype.GetAnchorB = function(a) {
                        return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, a)
                    };
                    b.prototype.GetReactionForce = function(a, b) {
                        b.x = a * this.m_impulse.x;
                        b.y = a * this.m_impulse.y;
                        return b
                    };
                    b.prototype.GetReactionTorque = function(a) {
                        return a * this.m_impulse.z
                    };
                    b.prototype.GetLocalAnchorA =
                        function() {
                            return this.m_localAnchorA
                        };
                    b.prototype.GetLocalAnchorB = function() {
                        return this.m_localAnchorB
                    };
                    b.prototype.GetReferenceAngle = function() {
                        return this.m_referenceAngle
                    };
                    b.prototype.SetFrequency = function(a) {
                        this.m_frequencyHz = a
                    };
                    b.prototype.GetFrequency = function() {
                        return this.m_frequencyHz
                    };
                    b.prototype.SetDampingRatio = function(a) {
                        this.m_dampingRatio = a
                    };
                    b.prototype.GetDampingRatio = function() {
                        return this.m_dampingRatio
                    };
                    b.prototype.Dump = function(a) {
                        var b = this.m_bodyA.m_islandIndex,
                            c = this.m_bodyB.m_islandIndex;
                        a("  const jd: b2WeldJointDef = new b2WeldJointDef();\n");
                        a("  jd.bodyA = bodies[%d];\n", b);
                        a("  jd.bodyB = bodies[%d];\n", c);
                        a("  jd.collideConnected = %s;\n", this.m_collideConnected ? "true" : "false");
                        a("  jd.localAnchorA.Set(%.15f, %.15f);\n", this.m_localAnchorA.x, this.m_localAnchorA.y);
                        a("  jd.localAnchorB.Set(%.15f, %.15f);\n", this.m_localAnchorB.x, this.m_localAnchorB.y);
                        a("  jd.referenceAngle = %.15f;\n", this.m_referenceAngle);
                        a("  jd.frequencyHz = %.15f;\n", this.m_frequencyHz);
                        a("  jd.dampingRatio = %.15f;\n",
                            this.m_dampingRatio);
                        a("  joints[%d] = this.m_world.CreateJoint(jd);\n", this.m_index)
                    };
                    b.InitVelocityConstraints_s_P = new r;
                    b.SolveVelocityConstraints_s_Cdot1 = new r;
                    b.SolveVelocityConstraints_s_impulse1 = new r;
                    b.SolveVelocityConstraints_s_impulse = new na;
                    b.SolveVelocityConstraints_s_P = new r;
                    b.SolvePositionConstraints_s_C1 = new r;
                    b.SolvePositionConstraints_s_P = new r;
                    b.SolvePositionConstraints_s_impulse = new na;
                    return b
                }(Ea),
                Ud = function(a) {
                    function b() {
                        var b = a.call(this, h.b2JointType.e_wheelJoint) || this;
                        b.localAnchorA = new r(0, 0);
                        b.localAnchorB = new r(0, 0);
                        b.localAxisA = new r(1, 0);
                        b.enableMotor = !1;
                        b.maxMotorTorque = 0;
                        b.motorSpeed = 0;
                        b.frequencyHz = 2;
                        b.dampingRatio = .7;
                        return b
                    }
                    C(b, a);
                    b.prototype.Initialize = function(a, b, c, d) {
                        this.bodyA = a;
                        this.bodyB = b;
                        this.bodyA.GetLocalPoint(c, this.localAnchorA);
                        this.bodyB.GetLocalPoint(c, this.localAnchorB);
                        this.bodyA.GetLocalVector(d, this.localAxisA)
                    };
                    return b
                }(Da),
                sc = function(a) {
                    function b(b) {
                        var c = a.call(this, b) || this;
                        c.m_frequencyHz = 0;
                        c.m_dampingRatio = 0;
                        c.m_localAnchorA =
                            new r;
                        c.m_localAnchorB = new r;
                        c.m_localXAxisA = new r;
                        c.m_localYAxisA = new r;
                        c.m_impulse = 0;
                        c.m_motorImpulse = 0;
                        c.m_springImpulse = 0;
                        c.m_maxMotorTorque = 0;
                        c.m_motorSpeed = 0;
                        c.m_enableMotor = !1;
                        c.m_indexA = 0;
                        c.m_indexB = 0;
                        c.m_localCenterA = new r;
                        c.m_localCenterB = new r;
                        c.m_invMassA = 0;
                        c.m_invMassB = 0;
                        c.m_invIA = 0;
                        c.m_invIB = 0;
                        c.m_ax = new r;
                        c.m_ay = new r;
                        c.m_sAx = 0;
                        c.m_sBx = 0;
                        c.m_sAy = 0;
                        c.m_sBy = 0;
                        c.m_mass = 0;
                        c.m_motorMass = 0;
                        c.m_springMass = 0;
                        c.m_bias = 0;
                        c.m_gamma = 0;
                        c.m_qA = new P;
                        c.m_qB = new P;
                        c.m_lalcA = new r;
                        c.m_lalcB = new r;
                        c.m_rA =
                            new r;
                        c.m_rB = new r;
                        c.m_frequencyHz = e(b.frequencyHz, 2);
                        c.m_dampingRatio = e(b.dampingRatio, .7);
                        c.m_localAnchorA.Copy(e(b.localAnchorA, r.ZERO));
                        c.m_localAnchorB.Copy(e(b.localAnchorB, r.ZERO));
                        c.m_localXAxisA.Copy(e(b.localAxisA, r.UNITX));
                        r.CrossOneV(c.m_localXAxisA, c.m_localYAxisA);
                        c.m_maxMotorTorque = e(b.maxMotorTorque, 0);
                        c.m_motorSpeed = e(b.motorSpeed, 0);
                        c.m_enableMotor = e(b.enableMotor, !1);
                        c.m_ax.SetZero();
                        c.m_ay.SetZero();
                        return c
                    }
                    C(b, a);
                    b.prototype.GetMotorSpeed = function() {
                        return this.m_motorSpeed
                    };
                    b.prototype.GetMaxMotorTorque = function() {
                        return this.m_maxMotorTorque
                    };
                    b.prototype.SetSpringFrequencyHz = function(a) {
                        this.m_frequencyHz = a
                    };
                    b.prototype.GetSpringFrequencyHz = function() {
                        return this.m_frequencyHz
                    };
                    b.prototype.SetSpringDampingRatio = function(a) {
                        this.m_dampingRatio = a
                    };
                    b.prototype.GetSpringDampingRatio = function() {
                        return this.m_dampingRatio
                    };
                    b.prototype.InitVelocityConstraints = function(a) {
                        this.m_indexA = this.m_bodyA.m_islandIndex;
                        this.m_indexB = this.m_bodyB.m_islandIndex;
                        this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);
                        this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);
                        this.m_invMassA = this.m_bodyA.m_invMass;
                        this.m_invMassB = this.m_bodyB.m_invMass;
                        this.m_invIA = this.m_bodyA.m_invI;
                        this.m_invIB = this.m_bodyB.m_invI;
                        var c = this.m_invMassA,
                            d = this.m_invMassB,
                            e = this.m_invIA,
                            f = this.m_invIB,
                            g = a.positions[this.m_indexA].c,
                            h = a.velocities[this.m_indexA].v,
                            k = a.velocities[this.m_indexA].w,
                            l = a.positions[this.m_indexB].c,
                            m = a.positions[this.m_indexB].a,
                            n = a.velocities[this.m_indexB].v,
                            H = a.velocities[this.m_indexB].w,
                            p = this.m_qA.SetAngle(a.positions[this.m_indexA].a),
                            J = this.m_qB.SetAngle(m);
                        r.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);
                        m = P.MulRV(p, this.m_lalcA, this.m_rA);
                        r.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);
                        J = P.MulRV(J, this.m_lalcB, this.m_rB);
                        g = r.SubVV(r.AddVV(l, J, r.s_t0), r.AddVV(g, m, r.s_t1), b.InitVelocityConstraints_s_d);
                        P.MulRV(p, this.m_localYAxisA, this.m_ay);
                        this.m_sAy = r.CrossVV(r.AddVV(g, m, r.s_t0), this.m_ay);
                        this.m_sBy = r.CrossVV(J, this.m_ay);
                        this.m_mass = c + d + e * this.m_sAy * this.m_sAy + f * this.m_sBy * this.m_sBy;
                        0 < this.m_mass &&
                            (this.m_mass = 1 / this.m_mass);
                        this.m_gamma = this.m_bias = this.m_springMass = 0;
                        0 < this.m_frequencyHz ? (P.MulRV(p, this.m_localXAxisA, this.m_ax), this.m_sAx = r.CrossVV(r.AddVV(g, m, r.s_t0), this.m_ax), this.m_sBx = r.CrossVV(J, this.m_ax), c = c + d + e * this.m_sAx * this.m_sAx + f * this.m_sBx * this.m_sBx, 0 < c && (this.m_springMass = 1 / c, d = r.DotVV(g, this.m_ax), p = 6.28318530718 * this.m_frequencyHz, g = this.m_springMass * p * p, l = a.step.dt, this.m_gamma = l * (2 * this.m_springMass * this.m_dampingRatio * p + l * g), 0 < this.m_gamma && (this.m_gamma = 1 / this.m_gamma),
                            this.m_bias = d * l * g * this.m_gamma, this.m_springMass = c + this.m_gamma, 0 < this.m_springMass && (this.m_springMass = 1 / this.m_springMass))) : this.m_springImpulse = 0;
                        this.m_enableMotor ? (this.m_motorMass = e + f, 0 < this.m_motorMass && (this.m_motorMass = 1 / this.m_motorMass)) : this.m_motorImpulse = this.m_motorMass = 0;
                        a.step.warmStarting ? (this.m_impulse *= a.step.dtRatio, this.m_springImpulse *= a.step.dtRatio, this.m_motorImpulse *= a.step.dtRatio, e = r.AddVV(r.MulSV(this.m_impulse, this.m_ay, r.s_t0), r.MulSV(this.m_springImpulse, this.m_ax,
                            r.s_t1), b.InitVelocityConstraints_s_P), f = this.m_impulse * this.m_sAy + this.m_springImpulse * this.m_sAx + this.m_motorImpulse, c = this.m_impulse * this.m_sBy + this.m_springImpulse * this.m_sBx + this.m_motorImpulse, h.SelfMulSub(this.m_invMassA, e), k -= this.m_invIA * f, n.SelfMulAdd(this.m_invMassB, e), H += this.m_invIB * c) : this.m_motorImpulse = this.m_springImpulse = this.m_impulse = 0;
                        a.velocities[this.m_indexA].w = k;
                        a.velocities[this.m_indexB].w = H
                    };
                    b.prototype.SolveVelocityConstraints = function(a) {
                        var d = this.m_invMassA,
                            e = this.m_invMassB,
                            f = this.m_invIA,
                            g = this.m_invIB,
                            h = a.velocities[this.m_indexA].v,
                            k = a.velocities[this.m_indexA].w,
                            l = a.velocities[this.m_indexB].v,
                            m = a.velocities[this.m_indexB].w,
                            n = r.DotVV(this.m_ax, r.SubVV(l, h, r.s_t0)) + this.m_sBx * m - this.m_sAx * k;
                        n = -this.m_springMass * (n + this.m_bias + this.m_gamma * this.m_springImpulse);
                        this.m_springImpulse += n;
                        var H = r.MulSV(n, this.m_ax, b.SolveVelocityConstraints_s_P),
                            p = n * this.m_sAx;
                        n *= this.m_sBx;
                        h.SelfMulSub(d, H);
                        k -= f * p;
                        l.SelfMulAdd(e, H);
                        m += g * n;
                        n = m - k - this.m_motorSpeed;
                        n *= -this.m_motorMass;
                        H = this.m_motorImpulse;
                        p = a.step.dt * this.m_maxMotorTorque;
                        this.m_motorImpulse = c(this.m_motorImpulse + n, -p, p);
                        n = this.m_motorImpulse - H;
                        k -= f * n;
                        m += g * n;
                        n = r.DotVV(this.m_ay, r.SubVV(l, h, r.s_t0)) + this.m_sBy * m - this.m_sAy * k;
                        n *= -this.m_mass;
                        this.m_impulse += n;
                        H = r.MulSV(n, this.m_ay, b.SolveVelocityConstraints_s_P);
                        p = n * this.m_sAy;
                        n *= this.m_sBy;
                        h.SelfMulSub(d, H);
                        k -= f * p;
                        l.SelfMulAdd(e, H);
                        a.velocities[this.m_indexA].w = k;
                        a.velocities[this.m_indexB].w = m + g * n
                    };
                    b.prototype.SolvePositionConstraints = function(a) {
                        var c = a.positions[this.m_indexA].c,
                            d = a.positions[this.m_indexA].a,
                            e = a.positions[this.m_indexB].c,
                            f = a.positions[this.m_indexB].a,
                            g = this.m_qA.SetAngle(d),
                            h = this.m_qB.SetAngle(f);
                        r.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);
                        var k = P.MulRV(g, this.m_lalcA, this.m_rA);
                        r.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);
                        h = P.MulRV(h, this.m_lalcB, this.m_rB);
                        var l = r.AddVV(r.SubVV(e, c, r.s_t0), r.SubVV(h, k, r.s_t1), b.SolvePositionConstraints_s_d);
                        g = P.MulRV(g, this.m_localYAxisA, this.m_ay);
                        k = r.CrossVV(r.AddVV(l, k, r.s_t0),
                            g);
                        h = r.CrossVV(h, g);
                        l = r.DotVV(l, this.m_ay);
                        var m = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_sAy * this.m_sAy + this.m_invIB * this.m_sBy * this.m_sBy;
                        m = 0 !== m ? -l / m : 0;
                        g = r.MulSV(m, g, b.SolvePositionConstraints_s_P);
                        k *= m;
                        h *= m;
                        c.SelfMulSub(this.m_invMassA, g);
                        d -= this.m_invIA * k;
                        e.SelfMulAdd(this.m_invMassB, g);
                        f += this.m_invIB * h;
                        a.positions[this.m_indexA].a = d;
                        a.positions[this.m_indexB].a = f;
                        return .008 >= Z(l)
                    };
                    b.prototype.GetDefinition = function(a) {
                        return a
                    };
                    b.prototype.GetAnchorA = function(a) {
                        return this.m_bodyA.GetWorldPoint(this.m_localAnchorA,
                            a)
                    };
                    b.prototype.GetAnchorB = function(a) {
                        return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, a)
                    };
                    b.prototype.GetReactionForce = function(a, b) {
                        b.x = a * (this.m_impulse * this.m_ay.x + this.m_springImpulse * this.m_ax.x);
                        b.y = a * (this.m_impulse * this.m_ay.y + this.m_springImpulse * this.m_ax.y);
                        return b
                    };
                    b.prototype.GetReactionTorque = function(a) {
                        return a * this.m_motorImpulse
                    };
                    b.prototype.GetLocalAnchorA = function() {
                        return this.m_localAnchorA
                    };
                    b.prototype.GetLocalAnchorB = function() {
                        return this.m_localAnchorB
                    };
                    b.prototype.GetLocalAxisA =
                        function() {
                            return this.m_localXAxisA
                        };
                    b.prototype.GetJointTranslation = function() {
                        return this.GetPrismaticJointTranslation()
                    };
                    b.prototype.GetJointLinearSpeed = function() {
                        return this.GetPrismaticJointSpeed()
                    };
                    b.prototype.GetJointAngle = function() {
                        return this.GetRevoluteJointAngle()
                    };
                    b.prototype.GetJointAngularSpeed = function() {
                        return this.GetRevoluteJointSpeed()
                    };
                    b.prototype.GetPrismaticJointTranslation = function() {
                        var a = this.m_bodyA,
                            b = this.m_bodyB,
                            c = a.GetWorldPoint(this.m_localAnchorA, new r);
                        b = b.GetWorldPoint(this.m_localAnchorB,
                            new r);
                        c = r.SubVV(b, c, new r);
                        a = a.GetWorldVector(this.m_localXAxisA, new r);
                        return r.DotVV(c, a)
                    };
                    b.prototype.GetPrismaticJointSpeed = function() {
                        var a = this.m_bodyA,
                            b = this.m_bodyB;
                        r.SubVV(this.m_localAnchorA, a.m_sweep.localCenter, this.m_lalcA);
                        var c = P.MulRV(a.m_xf.q, this.m_lalcA, this.m_rA);
                        r.SubVV(this.m_localAnchorB, b.m_sweep.localCenter, this.m_lalcB);
                        var d = P.MulRV(b.m_xf.q, this.m_lalcB, this.m_rB),
                            e = r.AddVV(a.m_sweep.c, c, r.s_t0),
                            f = r.AddVV(b.m_sweep.c, d, r.s_t1);
                        e = r.SubVV(f, e, r.s_t2);
                        f = a.GetWorldVector(this.m_localXAxisA,
                            new r);
                        var g = a.m_linearVelocity,
                            h = b.m_linearVelocity;
                        a = a.m_angularVelocity;
                        b = b.m_angularVelocity;
                        return r.DotVV(e, r.CrossSV(a, f, r.s_t0)) + r.DotVV(f, r.SubVV(r.AddVCrossSV(h, b, d, r.s_t0), r.AddVCrossSV(g, a, c, r.s_t1), r.s_t0))
                    };
                    b.prototype.GetRevoluteJointAngle = function() {
                        return this.m_bodyB.m_sweep.a - this.m_bodyA.m_sweep.a
                    };
                    b.prototype.GetRevoluteJointSpeed = function() {
                        return this.m_bodyB.m_angularVelocity - this.m_bodyA.m_angularVelocity
                    };
                    b.prototype.IsMotorEnabled = function() {
                        return this.m_enableMotor
                    };
                    b.prototype.EnableMotor =
                        function(a) {
                            a !== this.m_enableMotor && (this.m_bodyA.SetAwake(!0), this.m_bodyB.SetAwake(!0), this.m_enableMotor = a)
                        };
                    b.prototype.SetMotorSpeed = function(a) {
                        a !== this.m_motorSpeed && (this.m_bodyA.SetAwake(!0), this.m_bodyB.SetAwake(!0), this.m_motorSpeed = a)
                    };
                    b.prototype.SetMaxMotorTorque = function(a) {
                        a !== this.m_maxMotorTorque && (this.m_bodyA.SetAwake(!0), this.m_bodyB.SetAwake(!0), this.m_maxMotorTorque = a)
                    };
                    b.prototype.GetMotorTorque = function(a) {
                        return a * this.m_motorImpulse
                    };
                    b.prototype.Dump = function(a) {
                        var b = this.m_bodyA.m_islandIndex,
                            c = this.m_bodyB.m_islandIndex;
                        a("  const jd: b2WheelJointDef = new b2WheelJointDef();\n");
                        a("  jd.bodyA = bodies[%d];\n", b);
                        a("  jd.bodyB = bodies[%d];\n", c);
                        a("  jd.collideConnected = %s;\n", this.m_collideConnected ? "true" : "false");
                        a("  jd.localAnchorA.Set(%.15f, %.15f);\n", this.m_localAnchorA.x, this.m_localAnchorA.y);
                        a("  jd.localAnchorB.Set(%.15f, %.15f);\n", this.m_localAnchorB.x, this.m_localAnchorB.y);
                        a("  jd.localAxisA.Set(%.15f, %.15f);\n", this.m_localXAxisA.x, this.m_localXAxisA.y);
                        a("  jd.enableMotor = %s;\n",
                            this.m_enableMotor ? "true" : "false");
                        a("  jd.motorSpeed = %.15f;\n", this.m_motorSpeed);
                        a("  jd.maxMotorTorque = %.15f;\n", this.m_maxMotorTorque);
                        a("  jd.frequencyHz = %.15f;\n", this.m_frequencyHz);
                        a("  jd.dampingRatio = %.15f;\n", this.m_dampingRatio);
                        a("  joints[%d] = this.m_world.CreateJoint(jd);\n", this.m_index)
                    };
                    b.InitVelocityConstraints_s_d = new r;
                    b.InitVelocityConstraints_s_P = new r;
                    b.SolveVelocityConstraints_s_P = new r;
                    b.SolvePositionConstraints_s_d = new r;
                    b.SolvePositionConstraints_s_P = new r;
                    return b
                }(Ea),
                Ib = function() {
                    return function(a) {
                        this.next = this.prev = null;
                        this.contact = a
                    }
                }(),
                Ra = function() {
                    function a() {
                        this.m_toiFlag = this.m_bulletHitFlag = this.m_filterFlag = this.m_enabledFlag = this.m_touchingFlag = this.m_islandFlag = !1;
                        this.m_next = this.m_prev = null;
                        this.m_indexB = this.m_indexA = 0;
                        this.m_manifold = new ab;
                        this.m_tangentSpeed = this.m_restitution = this.m_friction = this.m_toi = this.m_toiCount = 0;
                        this.m_oldManifold = new ab;
                        this.m_nodeA = new Ib(this);
                        this.m_nodeB = new Ib(this)
                    }
                    a.prototype.GetManifold = function() {
                        return this.m_manifold
                    };
                    a.prototype.GetWorldManifold = function(a) {
                        var b = this.m_fixtureA.GetBody(),
                            c = this.m_fixtureB.GetBody(),
                            d = this.m_fixtureA.GetShape(),
                            e = this.m_fixtureB.GetShape();
                        a.Initialize(this.m_manifold, b.GetTransform(), d.m_radius, c.GetTransform(), e.m_radius)
                    };
                    a.prototype.IsTouching = function() {
                        return this.m_touchingFlag
                    };
                    a.prototype.SetEnabled = function(a) {
                        this.m_enabledFlag = a
                    };
                    a.prototype.IsEnabled = function() {
                        return this.m_enabledFlag
                    };
                    a.prototype.GetNext = function() {
                        return this.m_next
                    };
                    a.prototype.GetFixtureA = function() {
                        return this.m_fixtureA
                    };
                    a.prototype.GetChildIndexA = function() {
                        return this.m_indexA
                    };
                    a.prototype.GetFixtureB = function() {
                        return this.m_fixtureB
                    };
                    a.prototype.GetChildIndexB = function() {
                        return this.m_indexB
                    };
                    a.prototype.FlagForFiltering = function() {
                        this.m_filterFlag = !0
                    };
                    a.prototype.SetFriction = function(a) {
                        this.m_friction = a
                    };
                    a.prototype.GetFriction = function() {
                        return this.m_friction
                    };
                    a.prototype.ResetFriction = function() {
                        this.m_friction = ea(this.m_fixtureA.m_friction * this.m_fixtureB.m_friction)
                    };
                    a.prototype.SetRestitution = function(a) {
                        this.m_restitution =
                            a
                    };
                    a.prototype.GetRestitution = function() {
                        return this.m_restitution
                    };
                    a.prototype.ResetRestitution = function() {
                        this.m_restitution = F(this.m_fixtureA.m_restitution, this.m_fixtureB.m_restitution)
                    };
                    a.prototype.SetTangentSpeed = function(a) {
                        this.m_tangentSpeed = a
                    };
                    a.prototype.GetTangentSpeed = function() {
                        return this.m_tangentSpeed
                    };
                    a.prototype.Reset = function(a, b, c, d) {
                        this.m_touchingFlag = this.m_islandFlag = !1;
                        this.m_enabledFlag = !0;
                        this.m_toiFlag = this.m_bulletHitFlag = this.m_filterFlag = !1;
                        this.m_fixtureA = a;
                        this.m_fixtureB =
                            c;
                        this.m_indexA = b;
                        this.m_indexB = d;
                        this.m_manifold.pointCount = 0;
                        this.m_next = this.m_prev = null;
                        delete this.m_nodeA.contact;
                        this.m_nodeA.prev = null;
                        this.m_nodeA.next = null;
                        delete this.m_nodeA.other;
                        delete this.m_nodeB.contact;
                        this.m_nodeB.prev = null;
                        this.m_nodeB.next = null;
                        delete this.m_nodeB.other;
                        this.m_toiCount = 0;
                        this.m_friction = ea(this.m_fixtureA.m_friction * this.m_fixtureB.m_friction);
                        this.m_restitution = F(this.m_fixtureA.m_restitution, this.m_fixtureB.m_restitution)
                    };
                    a.prototype.Update = function(a) {
                        var b =
                            this.m_oldManifold;
                        this.m_oldManifold = this.m_manifold;
                        this.m_manifold = b;
                        this.m_enabledFlag = !0;
                        b = this.m_touchingFlag;
                        var c = this.m_fixtureA.IsSensor(),
                            d = this.m_fixtureB.IsSensor();
                        c = c || d;
                        d = this.m_fixtureA.GetBody();
                        var e = this.m_fixtureB.GetBody();
                        var f = d.GetTransform();
                        var g = e.GetTransform();
                        if (c) d = this.m_fixtureA.GetShape(), e = this.m_fixtureB.GetShape(), f = q(d, this.m_indexA, e, this.m_indexB, f, g), this.m_manifold.pointCount = 0;
                        else {
                            this.Evaluate(this.m_manifold, f, g);
                            f = 0 < this.m_manifold.pointCount;
                            for (g =
                                0; g < this.m_manifold.pointCount; ++g) {
                                var h = this.m_manifold.points[g];
                                h.normalImpulse = 0;
                                h.tangentImpulse = 0;
                                for (var k = h.id, l = 0; l < this.m_oldManifold.pointCount; ++l) {
                                    var m = this.m_oldManifold.points[l];
                                    if (m.id.key === k.key) {
                                        h.normalImpulse = m.normalImpulse;
                                        h.tangentImpulse = m.tangentImpulse;
                                        break
                                    }
                                }
                            }
                            f !== b && (d.SetAwake(!0), e.SetAwake(!0))
                        }
                        this.m_touchingFlag = f;
                        !b && f && a && a.BeginContact(this);
                        b && !f && a && a.EndContact(this);
                        !c && f && a && a.PreSolve(this, this.m_oldManifold)
                    };
                    a.prototype.ComputeTOI = function(b, c) {
                        var d =
                            a.ComputeTOI_s_input;
                        d.proxyA.SetShape(this.m_fixtureA.GetShape(), this.m_indexA);
                        d.proxyB.SetShape(this.m_fixtureB.GetShape(), this.m_indexB);
                        d.sweepA.Copy(b);
                        d.sweepB.Copy(c);
                        d.tMax = .008;
                        b = a.ComputeTOI_s_output;
                        t(b, d);
                        return b.t
                    };
                    a.ComputeTOI_s_input = new Bb;
                    a.ComputeTOI_s_output = new Cb;
                    return a
                }(),
                Jb = function(a) {
                    function b() {
                        return a.call(this) || this
                    }
                    C(b, a);
                    b.Create = function(a) {
                        return new b
                    };
                    b.Destroy = function(a, b) {};
                    b.prototype.Reset = function(b, c, d, e) {
                        a.prototype.Reset.call(this, b, c, d, e)
                    };
                    b.prototype.Evaluate =
                        function(a, b, c) {
                            var d = this.m_fixtureA.GetShape(),
                                e = this.m_fixtureB.GetShape();
                            x(a, d, b, e, c)
                        };
                    return b
                }(Ra),
                Kb = function(a) {
                    function b() {
                        return a.call(this) || this
                    }
                    C(b, a);
                    b.Create = function(a) {
                        return new b
                    };
                    b.Destroy = function(a, b) {};
                    b.prototype.Reset = function(b, c, d, e) {
                        a.prototype.Reset.call(this, b, c, d, e)
                    };
                    b.prototype.Evaluate = function(a, b, c) {
                        var d = this.m_fixtureA.GetShape(),
                            e = this.m_fixtureB.GetShape();
                        A(a, d, b, e, c)
                    };
                    return b
                }(Ra),
                Lb = function(a) {
                    function b() {
                        return a.call(this) || this
                    }
                    C(b, a);
                    b.Create = function(a) {
                        return new b
                    };
                    b.Destroy = function(a, b) {};
                    b.prototype.Reset = function(b, c, d, e) {
                        a.prototype.Reset.call(this, b, c, d, e)
                    };
                    b.prototype.Evaluate = function(a, b, c) {
                        var d = this.m_fixtureA.GetShape(),
                            e = this.m_fixtureB.GetShape();
                        z(a, d, b, e, c)
                    };
                    return b
                }(Ra),
                Mb = function(a) {
                    function b() {
                        return a.call(this) || this
                    }
                    C(b, a);
                    b.Create = function(a) {
                        return new b
                    };
                    b.Destroy = function(a, b) {};
                    b.prototype.Reset = function(b, c, d, e) {
                        a.prototype.Reset.call(this, b, c, d, e)
                    };
                    b.prototype.Evaluate = function(a, b, c) {
                        var d = this.m_fixtureA.GetShape(),
                            e = this.m_fixtureB.GetShape();
                        B(a, d, b, e, c)
                    };
                    return b
                }(Ra),
                Nb = function(a) {
                    function b() {
                        return a.call(this) || this
                    }
                    C(b, a);
                    b.Create = function(a) {
                        return new b
                    };
                    b.Destroy = function(a, b) {};
                    b.prototype.Reset = function(b, c, d, e) {
                        a.prototype.Reset.call(this, b, c, d, e)
                    };
                    b.prototype.Evaluate = function(a, b, c) {
                        var d = this.m_fixtureA.GetShape(),
                            e = this.m_fixtureB.GetShape();
                        y(a, d, b, e, c)
                    };
                    return b
                }(Ra),
                Ob = function(a) {
                    function b() {
                        return a.call(this) || this
                    }
                    C(b, a);
                    b.Create = function(a) {
                        return new b
                    };
                    b.Destroy = function(a, b) {};
                    b.prototype.Reset = function(b,
                        c, d, e) {
                        a.prototype.Reset.call(this, b, c, d, e)
                    };
                    b.prototype.Evaluate = function(a, c, d) {
                        var e = this.m_fixtureA.GetShape(),
                            f = this.m_fixtureB.GetShape(),
                            g = b.Evaluate_s_edge;
                        e.GetChildEdge(g, this.m_indexA);
                        B(a, g, c, f, d)
                    };
                    b.Evaluate_s_edge = new db;
                    return b
                }(Ra),
                Pb = function(a) {
                    function b() {
                        return a.call(this) || this
                    }
                    C(b, a);
                    b.Create = function(a) {
                        return new b
                    };
                    b.Destroy = function(a, b) {};
                    b.prototype.Reset = function(b, c, d, e) {
                        a.prototype.Reset.call(this, b, c, d, e)
                    };
                    b.prototype.Evaluate = function(a, c, d) {
                        var e = this.m_fixtureA.GetShape(),
                            f = this.m_fixtureB.GetShape(),
                            g = b.Evaluate_s_edge;
                        e.GetChildEdge(g, this.m_indexA);
                        y(a, g, c, f, d)
                    };
                    b.Evaluate_s_edge = new db;
                    return b
                }(Ra),
                tc = function() {
                    return function() {
                        this.destroyFcn = this.createFcn = null;
                        this.primary = !1
                    }
                }(),
                uc = function() {
                    function a(a) {
                        this.m_allocator = null;
                        this.m_allocator = a;
                        this.InitializeRegisters()
                    }
                    a.prototype.AddType = function(a, b, c, e) {
                        function f(b) {
                            return k.pop() || a(b)
                        }

                        function g(a, b) {
                            k.push(a)
                        }
                        var h = this,
                            k = d(256, function(b) {
                                return a(h.m_allocator)
                            });
                        this.m_registers[c][e].createFcn =
                            f;
                        this.m_registers[c][e].destroyFcn = g;
                        this.m_registers[c][e].primary = !0;
                        c !== e && (this.m_registers[e][c].createFcn = f, this.m_registers[e][c].destroyFcn = g, this.m_registers[e][c].primary = !1)
                    };
                    a.prototype.InitializeRegisters = function() {
                        this.m_registers = [];
                        for (var a = 0; a < h.b2ShapeType.e_shapeTypeCount; a++) {
                            this.m_registers[a] = [];
                            for (var b = 0; b < h.b2ShapeType.e_shapeTypeCount; b++) this.m_registers[a][b] = new tc
                        }
                        this.AddType(Jb.Create, Jb.Destroy, h.b2ShapeType.e_circleShape, h.b2ShapeType.e_circleShape);
                        this.AddType(Lb.Create,
                            Lb.Destroy, h.b2ShapeType.e_polygonShape, h.b2ShapeType.e_circleShape);
                        this.AddType(Kb.Create, Kb.Destroy, h.b2ShapeType.e_polygonShape, h.b2ShapeType.e_polygonShape);
                        this.AddType(Mb.Create, Mb.Destroy, h.b2ShapeType.e_edgeShape, h.b2ShapeType.e_circleShape);
                        this.AddType(Nb.Create, Nb.Destroy, h.b2ShapeType.e_edgeShape, h.b2ShapeType.e_polygonShape);
                        this.AddType(Ob.Create, Ob.Destroy, h.b2ShapeType.e_chainShape, h.b2ShapeType.e_circleShape);
                        this.AddType(Pb.Create, Pb.Destroy, h.b2ShapeType.e_chainShape, h.b2ShapeType.e_polygonShape)
                    };
                    a.prototype.Create = function(a, b, c, d) {
                        var e = a.GetType(),
                            f = c.GetType();
                        e = this.m_registers[e][f];
                        return e.createFcn ? (f = e.createFcn(this.m_allocator), e.primary ? f.Reset(a, b, c, d) : f.Reset(c, d, a, b), f) : null
                    };
                    a.prototype.Destroy = function(a) {
                        var b = a.m_fixtureA,
                            c = a.m_fixtureB;
                        0 < a.m_manifold.pointCount && !b.IsSensor() && !c.IsSensor() && (b.GetBody().SetAwake(!0), c.GetBody().SetAwake(!0));
                        b = b.GetType();
                        c = c.GetType();
                        c = this.m_registers[b][c];
                        c.destroyFcn && c.destroyFcn(a, this.m_allocator)
                    };
                    return a
                }(),
                Vd = function() {
                    function a() {}
                    a.prototype.SayGoodbyeJoint = function(a) {};
                    a.prototype.SayGoodbyeFixture = function(a) {};
                    a.prototype.SayGoodbyeParticleGroup = function(a) {};
                    a.prototype.SayGoodbyeParticle = function(a, b) {};
                    return a
                }(),
                vc = function() {
                    function a() {}
                    a.prototype.ShouldCollide = function(a, b) {
                        var c = a.GetBody(),
                            d = b.GetBody();
                        if (d.GetType() === h.b2BodyType.b2_staticBody && c.GetType() === h.b2BodyType.b2_staticBody || !d.ShouldCollideConnected(c)) return !1;
                        a = a.GetFilterData();
                        b = b.GetFilterData();
                        return a.groupIndex === b.groupIndex && 0 !== a.groupIndex ?
                            0 < a.groupIndex : 0 !== (a.maskBits & b.categoryBits) && 0 !== (a.categoryBits & b.maskBits)
                    };
                    a.prototype.ShouldCollideFixtureParticle = function(a, b, c) {
                        return !0
                    };
                    a.prototype.ShouldCollideParticleParticle = function(a, b, c) {
                        return !0
                    };
                    a.b2_defaultFilter = new a;
                    return a
                }(),
                wc = function() {
                    return function() {
                        this.normalImpulses = g(2);
                        this.tangentImpulses = g(2);
                        this.count = 0
                    }
                }(),
                xc = function() {
                    function a() {}
                    a.prototype.BeginContact = function(a) {};
                    a.prototype.EndContact = function(a) {};
                    a.prototype.BeginContactFixtureParticle = function(a,
                        b) {};
                    a.prototype.EndContactFixtureParticle = function(a, b) {};
                    a.prototype.BeginContactParticleParticle = function(a, b) {};
                    a.prototype.EndContactParticleParticle = function(a, b) {};
                    a.prototype.PreSolve = function(a, b) {};
                    a.prototype.PostSolve = function(a, b) {};
                    a.b2_defaultListener = new a;
                    return a
                }(),
                eb = function() {
                    function a() {}
                    a.prototype.ReportFixture = function(a) {
                        return !0
                    };
                    a.prototype.ReportParticle = function(a, b) {
                        return !1
                    };
                    a.prototype.ShouldQueryParticleSystem = function(a) {
                        return !0
                    };
                    return a
                }(),
                Wd = function() {
                    function a() {}
                    a.prototype.ReportFixture = function(a, b, c, d) {
                        return d
                    };
                    a.prototype.ReportParticle = function(a, b, c, d, e) {
                        return 0
                    };
                    a.prototype.ShouldQueryParticleSystem = function(a) {
                        return !0
                    };
                    return a
                }(),
                yc = function() {
                    function a() {
                        this.m_broadPhase = new yb;
                        this.m_contactList = null;
                        this.m_contactCount = 0;
                        this.m_contactFilter = vc.b2_defaultFilter;
                        this.m_contactListener = xc.b2_defaultListener;
                        this.m_allocator = null;
                        this.m_contactFactory = new uc(this.m_allocator)
                    }
                    a.prototype.AddPair = function(a, b) {
                        var c = a.fixture,
                            d = b.fixture;
                        a = a.childIndex;
                        var e = b.childIndex;
                        b = c.GetBody();
                        var f = d.GetBody();
                        if (b !== f) {
                            for (f = f.GetContactList(); f;) {
                                if (f.other === b) {
                                    var g = f.contact.GetFixtureA(),
                                        h = f.contact.GetFixtureB(),
                                        k = f.contact.GetChildIndexA(),
                                        l = f.contact.GetChildIndexB();
                                    if (g === c && h === d && k === a && l === e || g === d && h === c && k === e && l === a) return
                                }
                                f = f.next
                            }
                            if (!this.m_contactFilter || this.m_contactFilter.ShouldCollide(c, d)) a = this.m_contactFactory.Create(c, a, d, e), null !== a && (c = a.GetFixtureA(), d = a.GetFixtureB(), a.GetChildIndexA(), a.GetChildIndexB(), b = c.m_body, f = d.m_body,
                                a.m_prev = null, a.m_next = this.m_contactList, null !== this.m_contactList && (this.m_contactList.m_prev = a), this.m_contactList = a, a.m_nodeA.contact = a, a.m_nodeA.other = f, a.m_nodeA.prev = null, a.m_nodeA.next = b.m_contactList, null !== b.m_contactList && (b.m_contactList.prev = a.m_nodeA), b.m_contactList = a.m_nodeA, a.m_nodeB.contact = a, a.m_nodeB.other = b, a.m_nodeB.prev = null, a.m_nodeB.next = f.m_contactList, null !== f.m_contactList && (f.m_contactList.prev = a.m_nodeB), f.m_contactList = a.m_nodeB, c.IsSensor() || d.IsSensor() || (b.SetAwake(!0),
                                    f.SetAwake(!0)), ++this.m_contactCount)
                        }
                    };
                    a.prototype.FindNewContacts = function() {
                        var a = this;
                        this.m_broadPhase.UpdatePairs(function(b, c) {
                            a.AddPair(b, c)
                        })
                    };
                    a.prototype.Destroy = function(a) {
                        var b = a.GetFixtureA(),
                            c = a.GetFixtureB();
                        b = b.GetBody();
                        c = c.GetBody();
                        this.m_contactListener && a.IsTouching() && this.m_contactListener.EndContact(a);
                        a.m_prev && (a.m_prev.m_next = a.m_next);
                        a.m_next && (a.m_next.m_prev = a.m_prev);
                        a === this.m_contactList && (this.m_contactList = a.m_next);
                        a.m_nodeA.prev && (a.m_nodeA.prev.next = a.m_nodeA.next);
                        a.m_nodeA.next && (a.m_nodeA.next.prev = a.m_nodeA.prev);
                        a.m_nodeA === b.m_contactList && (b.m_contactList = a.m_nodeA.next);
                        a.m_nodeB.prev && (a.m_nodeB.prev.next = a.m_nodeB.next);
                        a.m_nodeB.next && (a.m_nodeB.next.prev = a.m_nodeB.prev);
                        a.m_nodeB === c.m_contactList && (c.m_contactList = a.m_nodeB.next);
                        this.m_contactFactory.Destroy(a);
                        --this.m_contactCount
                    };
                    a.prototype.Collide = function() {
                        for (var a, b = this.m_contactList; b;) {
                            a = b.GetFixtureA();
                            var c = b.GetFixtureB(),
                                d = b.GetChildIndexA(),
                                e = b.GetChildIndexB(),
                                g = a.GetBody(),
                                k = c.GetBody();
                            if (b.m_filterFlag) {
                                if (this.m_contactFilter && !this.m_contactFilter.ShouldCollide(a, c)) {
                                    a = b;
                                    b = a.m_next;
                                    this.Destroy(a);
                                    continue
                                }
                                b.m_filterFlag = !1
                            }
                            g = g.IsAwake() && g.m_type !== h.b2BodyType.b2_staticBody;
                            k = k.IsAwake() && k.m_type !== h.b2BodyType.b2_staticBody;
                            g || k ? f(a.m_proxies[d].treeNode.aabb, c.m_proxies[e].treeNode.aabb) ? (b.Update(this.m_contactListener), b = b.m_next) : (a = b, b = a.m_next, this.Destroy(a)) : b = b.m_next
                        }
                    };
                    return a
                }(),
                Qb = function() {
                    function a() {
                        this.solveTOI = this.broadphase = this.solvePosition =
                            this.solveVelocity = this.solveInit = this.solve = this.collide = this.step = 0
                    }
                    a.prototype.Reset = function() {
                        this.solveTOI = this.broadphase = this.solvePosition = this.solveVelocity = this.solveInit = this.solve = this.collide = this.step = 0;
                        return this
                    };
                    return a
                }(),
                Ya = function() {
                    function a() {
                        this.particleIterations = this.positionIterations = this.velocityIterations = this.dtRatio = this.inv_dt = this.dt = 0;
                        this.warmStarting = !1
                    }
                    a.prototype.Copy = function(a) {
                        this.dt = a.dt;
                        this.inv_dt = a.inv_dt;
                        this.dtRatio = a.dtRatio;
                        this.positionIterations =
                            a.positionIterations;
                        this.velocityIterations = a.velocityIterations;
                        this.particleIterations = a.particleIterations;
                        this.warmStarting = a.warmStarting;
                        return this
                    };
                    return a
                }(),
                Rb = function() {
                    function a() {
                        this.c = new r;
                        this.a = 0
                    }
                    a.MakeArray = function(b) {
                        return d(b, function(b) {
                            return new a
                        })
                    };
                    return a
                }(),
                Sb = function() {
                    function a() {
                        this.v = new r;
                        this.w = 0
                    }
                    a.MakeArray = function(b) {
                        return d(b, function(b) {
                            return new a
                        })
                    };
                    return a
                }(),
                zc = function() {
                    return function() {
                        this.step = new Ya
                    }
                }(),
                Ac = function() {
                    function a() {
                        this.rA =
                            new r;
                        this.rB = new r;
                        this.velocityBias = this.tangentMass = this.normalMass = this.tangentImpulse = this.normalImpulse = 0
                    }
                    a.MakeArray = function(b) {
                        return d(b, function(b) {
                            return new a
                        })
                    };
                    return a
                }(),
                Tb = function() {
                    function a() {
                        this.points = Ac.MakeArray(2);
                        this.normal = new r;
                        this.tangent = new r;
                        this.normalMass = new ka;
                        this.K = new ka;
                        this.contactIndex = this.pointCount = this.tangentSpeed = this.restitution = this.friction = this.invIB = this.invIA = this.invMassB = this.invMassA = this.indexB = this.indexA = 0
                    }
                    a.MakeArray = function(b) {
                        return d(b,
                            function(b) {
                                return new a
                            })
                    };
                    return a
                }(),
                Ub = function() {
                    function a() {
                        this.localPoints = r.MakeArray(2);
                        this.localNormal = new r;
                        this.localPoint = new r;
                        this.invMassB = this.invMassA = this.indexB = this.indexA = 0;
                        this.localCenterA = new r;
                        this.localCenterB = new r;
                        this.invIB = this.invIA = 0;
                        this.type = h.b2ManifoldType.e_unknown;
                        this.pointCount = this.radiusB = this.radiusA = 0
                    }
                    a.MakeArray = function(b) {
                        return d(b, function(b) {
                            return new a
                        })
                    };
                    return a
                }(),
                Bc = function() {
                    return function() {
                        this.step = new Ya;
                        this.count = 0;
                        this.allocator =
                            null
                    }
                }(),
                Vb = function() {
                    function a() {
                        this.normal = new r;
                        this.point = new r;
                        this.separation = 0
                    }
                    a.prototype.Initialize = function(b, c, d, e) {
                        var f = a.Initialize_s_pointA,
                            g = a.Initialize_s_pointB,
                            k = a.Initialize_s_planePoint,
                            l = a.Initialize_s_clipPoint;
                        switch (b.type) {
                            case h.b2ManifoldType.e_circles:
                                U.MulXV(c, b.localPoint, f);
                                U.MulXV(d, b.localPoints[0], g);
                                r.SubVV(g, f, this.normal).SelfNormalize();
                                r.MidVV(f, g, this.point);
                                this.separation = r.DotVV(r.SubVV(g, f, r.s_t0), this.normal) - b.radiusA - b.radiusB;
                                break;
                            case h.b2ManifoldType.e_faceA:
                                P.MulRV(c.q,
                                    b.localNormal, this.normal);
                                U.MulXV(c, b.localPoint, k);
                                U.MulXV(d, b.localPoints[e], l);
                                this.separation = r.DotVV(r.SubVV(l, k, r.s_t0), this.normal) - b.radiusA - b.radiusB;
                                this.point.Copy(l);
                                break;
                            case h.b2ManifoldType.e_faceB:
                                P.MulRV(d.q, b.localNormal, this.normal), U.MulXV(d, b.localPoint, k), U.MulXV(c, b.localPoints[e], l), this.separation = r.DotVV(r.SubVV(l, k, r.s_t0), this.normal) - b.radiusA - b.radiusB, this.point.Copy(l), this.normal.SelfNeg()
                        }
                    };
                    a.Initialize_s_pointA = new r;
                    a.Initialize_s_pointB = new r;
                    a.Initialize_s_planePoint =
                        new r;
                    a.Initialize_s_clipPoint = new r;
                    return a
                }(),
                Cc = function() {
                    function a() {
                        this.m_step = new Ya;
                        this.m_allocator = null;
                        this.m_positionConstraints = Ub.MakeArray(1024);
                        this.m_velocityConstraints = Tb.MakeArray(1024);
                        this.m_count = 0
                    }
                    a.prototype.Initialize = function(a) {
                        var b;
                        this.m_step.Copy(a.step);
                        this.m_allocator = a.allocator;
                        this.m_count = a.count;
                        if (this.m_positionConstraints.length < this.m_count)
                            for (b = X(2 * this.m_positionConstraints.length, this.m_count); this.m_positionConstraints.length < b;) this.m_positionConstraints[this.m_positionConstraints.length] =
                                new Ub;
                        if (this.m_velocityConstraints.length < this.m_count)
                            for (b = X(2 * this.m_velocityConstraints.length, this.m_count); this.m_velocityConstraints.length < b;) this.m_velocityConstraints[this.m_velocityConstraints.length] = new Tb;
                        this.m_positions = a.positions;
                        this.m_velocities = a.velocities;
                        this.m_contacts = a.contacts;
                        for (a = 0; a < this.m_count; ++a) {
                            b = this.m_contacts[a];
                            var c = b.m_fixtureA,
                                d = b.m_fixtureB,
                                e = c.GetShape(),
                                f = d.GetShape();
                            e = e.m_radius;
                            var g = f.m_radius,
                                h = c.GetBody(),
                                k = d.GetBody();
                            d = b.GetManifold();
                            c = d.pointCount;
                            f = this.m_velocityConstraints[a];
                            f.friction = b.m_friction;
                            f.restitution = b.m_restitution;
                            f.tangentSpeed = b.m_tangentSpeed;
                            f.indexA = h.m_islandIndex;
                            f.indexB = k.m_islandIndex;
                            f.invMassA = h.m_invMass;
                            f.invMassB = k.m_invMass;
                            f.invIA = h.m_invI;
                            f.invIB = k.m_invI;
                            f.contactIndex = a;
                            f.pointCount = c;
                            f.K.SetZero();
                            f.normalMass.SetZero();
                            b = this.m_positionConstraints[a];
                            b.indexA = h.m_islandIndex;
                            b.indexB = k.m_islandIndex;
                            b.invMassA = h.m_invMass;
                            b.invMassB = k.m_invMass;
                            b.localCenterA.Copy(h.m_sweep.localCenter);
                            b.localCenterB.Copy(k.m_sweep.localCenter);
                            b.invIA = h.m_invI;
                            b.invIB = k.m_invI;
                            b.localNormal.Copy(d.localNormal);
                            b.localPoint.Copy(d.localPoint);
                            b.pointCount = c;
                            b.radiusA = e;
                            b.radiusB = g;
                            b.type = d.type;
                            for (e = 0; e < c; ++e) g = d.points[e], h = f.points[e], this.m_step.warmStarting ? (h.normalImpulse = this.m_step.dtRatio * g.normalImpulse, h.tangentImpulse = this.m_step.dtRatio * g.tangentImpulse) : (h.normalImpulse = 0, h.tangentImpulse = 0), h.rA.SetZero(), h.rB.SetZero(), h.normalMass = 0, h.tangentMass = 0, h.velocityBias = 0, b.localPoints[e].Copy(g.localPoint)
                        }
                        return this
                    };
                    a.prototype.InitializeVelocityConstraints =
                        function() {
                            for (var b = a.InitializeVelocityConstraints_s_xfA, c = a.InitializeVelocityConstraints_s_xfB, d = a.InitializeVelocityConstraints_s_worldManifold, e = 0; e < this.m_count; ++e) {
                                var f = this.m_velocityConstraints[e],
                                    g = this.m_positionConstraints[e],
                                    h = g.radiusA,
                                    k = g.radiusB,
                                    l = this.m_contacts[f.contactIndex].GetManifold(),
                                    m = f.indexA,
                                    n = f.indexB,
                                    p = f.invMassA,
                                    q = f.invMassB,
                                    t = f.invIA,
                                    u = f.invIB,
                                    v = g.localCenterA,
                                    aa = g.localCenterB;
                                g = this.m_positions[m].c;
                                var w = this.m_velocities[m].v,
                                    x = this.m_velocities[m].w,
                                    y = this.m_positions[n].c,
                                    z = this.m_positions[n].a,
                                    A = this.m_velocities[n].v;
                                n = this.m_velocities[n].w;
                                b.q.SetAngle(this.m_positions[m].a);
                                c.q.SetAngle(z);
                                r.SubVV(g, P.MulRV(b.q, v, r.s_t0), b.p);
                                r.SubVV(y, P.MulRV(c.q, aa, r.s_t0), c.p);
                                d.Initialize(l, b, h, c, k);
                                f.normal.Copy(d.normal);
                                r.CrossVOne(f.normal, f.tangent);
                                h = f.pointCount;
                                for (k = 0; k < h; ++k) l = f.points[k], r.SubVV(d.points[k], g, l.rA), r.SubVV(d.points[k], y, l.rB), m = r.CrossVV(l.rA, f.normal), v = r.CrossVV(l.rB, f.normal), m = p + q + t * m * m + u * v * v, l.normalMass = 0 < m ? 1 / m : 0, v = f.tangent, m = r.CrossVV(l.rA,
                                    v), v = r.CrossVV(l.rB, v), m = p + q + t * m * m + u * v * v, l.tangentMass = 0 < m ? 1 / m : 0, l.velocityBias = 0, m = r.DotVV(f.normal, r.SubVV(r.AddVCrossSV(A, n, l.rB, r.s_t0), r.AddVCrossSV(w, x, l.rA, r.s_t1), r.s_t0)), -1 > m && (l.velocityBias += -f.restitution * m)
                            }
                        };
                    a.prototype.WarmStart = function() {
                        for (var b = a.WarmStart_s_P, c = 0; c < this.m_count; ++c) {
                            for (var d = this.m_velocityConstraints[c], e = d.indexA, f = d.indexB, g = d.invMassA, h = d.invIA, k = d.invMassB, l = d.invIB, m = d.pointCount, n = this.m_velocities[e].v, p = this.m_velocities[e].w, q = this.m_velocities[f].v,
                                    t = this.m_velocities[f].w, u = d.normal, v = d.tangent, aa = 0; aa < m; ++aa) {
                                var w = d.points[aa];
                                r.AddVV(r.MulSV(w.normalImpulse, u, r.s_t0), r.MulSV(w.tangentImpulse, v, r.s_t1), b);
                                p -= h * r.CrossVV(w.rA, b);
                                n.SelfMulSub(g, b);
                                t += l * r.CrossVV(w.rB, b);
                                q.SelfMulAdd(k, b)
                            }
                            this.m_velocities[e].w = p;
                            this.m_velocities[f].w = t
                        }
                    };
                    a.prototype.SolveVelocityConstraints = function() {
                        for (var b, d, e, f = a.SolveVelocityConstraints_s_dv, g = a.SolveVelocityConstraints_s_P, h = 0; h < this.m_count; ++h) {
                            for (var k = this.m_velocityConstraints[h], l = k.indexA,
                                    m = k.indexB, n = k.invMassA, p = k.invIA, q = k.invMassB, t = k.invIB, u = k.pointCount, v = this.m_velocities[l].v, aa = this.m_velocities[l].w, w = this.m_velocities[m].v, x = this.m_velocities[m].w, y = k.normal, z = k.tangent, A = k.friction, B = 0; B < u; ++B) e = k.points[B], r.SubVV(r.AddVCrossSV(w, x, e.rB, r.s_t0), r.AddVCrossSV(v, aa, e.rA, r.s_t1), f), d = r.DotVV(f, z) - k.tangentSpeed, d = e.tangentMass * -d, b = A * e.normalImpulse, b = c(e.tangentImpulse + d, -b, b), d = b - e.tangentImpulse, e.tangentImpulse = b, r.MulSV(d, z, g), v.SelfMulSub(n, g), aa -= p * r.CrossVV(e.rA,
                                g), w.SelfMulAdd(q, g), x += t * r.CrossVV(e.rB, g);
                            for (B = 0; B < u; ++B) e = k.points[B], r.SubVV(r.AddVCrossSV(w, x, e.rB, r.s_t0), r.AddVCrossSV(v, aa, e.rA, r.s_t1), f), z = r.DotVV(f, y), d = -e.normalMass * (z - e.velocityBias), b = X(e.normalImpulse + d, 0), d = b - e.normalImpulse, e.normalImpulse = b, r.MulSV(d, y, g), v.SelfMulSub(n, g), aa -= p * r.CrossVV(e.rA, g), w.SelfMulAdd(q, g), x += t * r.CrossVV(e.rB, g);
                            this.m_velocities[l].w = aa;
                            this.m_velocities[m].w = x
                        }
                    };
                    a.prototype.StoreImpulses = function() {
                        for (var a = 0; a < this.m_count; ++a)
                            for (var b = this.m_velocityConstraints[a],
                                    c = this.m_contacts[b.contactIndex].GetManifold(), d = 0; d < b.pointCount; ++d) c.points[d].normalImpulse = b.points[d].normalImpulse, c.points[d].tangentImpulse = b.points[d].tangentImpulse
                    };
                    a.prototype.SolvePositionConstraints = function() {
                        for (var b = a.SolvePositionConstraints_s_xfA, d = a.SolvePositionConstraints_s_xfB, e = a.SolvePositionConstraints_s_psm, f = a.SolvePositionConstraints_s_rA, g = a.SolvePositionConstraints_s_rB, h = a.SolvePositionConstraints_s_P, k = 0, l = 0; l < this.m_count; ++l) {
                            for (var m = this.m_positionConstraints[l],
                                    n = m.indexA, p = m.indexB, q = m.localCenterA, t = m.invMassA, u = m.invIA, v = m.localCenterB, aa = m.invMassB, w = m.invIB, x = m.pointCount, y = this.m_positions[n].c, z = this.m_positions[n].a, A = this.m_positions[p].c, B = this.m_positions[p].a, C = 0; C < x; ++C) {
                                b.q.SetAngle(z);
                                d.q.SetAngle(B);
                                r.SubVV(y, P.MulRV(b.q, q, r.s_t0), b.p);
                                r.SubVV(A, P.MulRV(d.q, v, r.s_t0), d.p);
                                e.Initialize(m, b, d, C);
                                var D = e.normal,
                                    E = e.point,
                                    F = e.separation;
                                r.SubVV(E, y, f);
                                r.SubVV(E, A, g);
                                k = W(k, F);
                                E = c(.2 * (F + .008), -.2, 0);
                                F = r.CrossVV(f, D);
                                var G = r.CrossVV(g, D);
                                F = t + aa +
                                    u * F * F + w * G * G;
                                r.MulSV(0 < F ? -E / F : 0, D, h);
                                y.SelfMulSub(t, h);
                                z -= u * r.CrossVV(f, h);
                                A.SelfMulAdd(aa, h);
                                B += w * r.CrossVV(g, h)
                            }
                            this.m_positions[n].a = z;
                            this.m_positions[p].a = B
                        }
                        return -.024 < k
                    };
                    a.prototype.SolveTOIPositionConstraints = function(b, d) {
                        for (var e = a.SolveTOIPositionConstraints_s_xfA, f = a.SolveTOIPositionConstraints_s_xfB, g = a.SolveTOIPositionConstraints_s_psm, h = a.SolveTOIPositionConstraints_s_rA, k = a.SolveTOIPositionConstraints_s_rB, l = a.SolveTOIPositionConstraints_s_P, m = 0, n = 0; n < this.m_count; ++n) {
                            var H = this.m_positionConstraints[n],
                                p = H.indexA,
                                q = H.indexB,
                                J = H.localCenterA,
                                t = H.localCenterB,
                                u = H.pointCount,
                                v = 0,
                                aa = 0;
                            if (p === b || p === d) v = H.invMassA, aa = H.invIA;
                            var w = 0,
                                x = 0;
                            if (q === b || q === d) w = H.invMassB, x = H.invIB;
                            for (var y = this.m_positions[p].c, z = this.m_positions[p].a, A = this.m_positions[q].c, B = this.m_positions[q].a, C = 0; C < u; ++C) {
                                e.q.SetAngle(z);
                                f.q.SetAngle(B);
                                r.SubVV(y, P.MulRV(e.q, J, r.s_t0), e.p);
                                r.SubVV(A, P.MulRV(f.q, t, r.s_t0), f.p);
                                g.Initialize(H, e, f, C);
                                var D = g.normal,
                                    E = g.point,
                                    F = g.separation;
                                r.SubVV(E, y, h);
                                r.SubVV(E, A, k);
                                m = W(m, F);
                                E = c(.75 *
                                    (F + .008), -.2, 0);
                                F = r.CrossVV(h, D);
                                var G = r.CrossVV(k, D);
                                F = v + w + aa * F * F + x * G * G;
                                r.MulSV(0 < F ? -E / F : 0, D, l);
                                y.SelfMulSub(v, l);
                                z -= aa * r.CrossVV(h, l);
                                A.SelfMulAdd(w, l);
                                B += x * r.CrossVV(k, l)
                            }
                            this.m_positions[p].a = z;
                            this.m_positions[q].a = B
                        }
                        return -.012 <= m
                    };
                    a.InitializeVelocityConstraints_s_xfA = new U;
                    a.InitializeVelocityConstraints_s_xfB = new U;
                    a.InitializeVelocityConstraints_s_worldManifold = new kb;
                    a.WarmStart_s_P = new r;
                    a.SolveVelocityConstraints_s_dv = new r;
                    a.SolveVelocityConstraints_s_dv1 = new r;
                    a.SolveVelocityConstraints_s_dv2 =
                        new r;
                    a.SolveVelocityConstraints_s_P = new r;
                    a.SolveVelocityConstraints_s_a = new r;
                    a.SolveVelocityConstraints_s_b = new r;
                    a.SolveVelocityConstraints_s_x = new r;
                    a.SolveVelocityConstraints_s_d = new r;
                    a.SolveVelocityConstraints_s_P1 = new r;
                    a.SolveVelocityConstraints_s_P2 = new r;
                    a.SolveVelocityConstraints_s_P1P2 = new r;
                    a.SolvePositionConstraints_s_xfA = new U;
                    a.SolvePositionConstraints_s_xfB = new U;
                    a.SolvePositionConstraints_s_psm = new Vb;
                    a.SolvePositionConstraints_s_rA = new r;
                    a.SolvePositionConstraints_s_rB = new r;
                    a.SolvePositionConstraints_s_P = new r;
                    a.SolveTOIPositionConstraints_s_xfA = new U;
                    a.SolveTOIPositionConstraints_s_xfB = new U;
                    a.SolveTOIPositionConstraints_s_psm = new Vb;
                    a.SolveTOIPositionConstraints_s_rA = new r;
                    a.SolveTOIPositionConstraints_s_rB = new r;
                    a.SolveTOIPositionConstraints_s_P = new r;
                    return a
                }(),
                Dc = function() {
                    function a() {
                        this.m_allocator = null;
                        this.m_bodies = [];
                        this.m_contacts = [];
                        this.m_joints = [];
                        this.m_positions = Rb.MakeArray(1024);
                        this.m_velocities = Sb.MakeArray(1024);
                        this.m_jointCapacity = this.m_contactCapacity =
                            this.m_bodyCapacity = this.m_contactCount = this.m_jointCount = this.m_bodyCount = 0
                    }
                    a.prototype.Initialize = function(a, b, c, d, e) {
                        this.m_bodyCapacity = a;
                        this.m_contactCapacity = b;
                        this.m_jointCapacity = c;
                        this.m_jointCount = this.m_contactCount = this.m_bodyCount = 0;
                        this.m_allocator = d;
                        this.m_listener = e;
                        if (this.m_positions.length < a)
                            for (b = X(2 * this.m_positions.length, a); this.m_positions.length < b;) this.m_positions[this.m_positions.length] = new Rb;
                        if (this.m_velocities.length < a)
                            for (b = X(2 * this.m_velocities.length, a); this.m_velocities.length <
                                b;) this.m_velocities[this.m_velocities.length] = new Sb
                    };
                    a.prototype.Clear = function() {
                        this.m_jointCount = this.m_contactCount = this.m_bodyCount = 0
                    };
                    a.prototype.AddBody = function(a) {
                        a.m_islandIndex = this.m_bodyCount;
                        this.m_bodies[this.m_bodyCount++] = a
                    };
                    a.prototype.AddContact = function(a) {
                        this.m_contacts[this.m_contactCount++] = a
                    };
                    a.prototype.AddJoint = function(a) {
                        this.m_joints[this.m_jointCount++] = a
                    };
                    a.prototype.Solve = function(b, c, d, e) {
                        for (var f, g, k, l, m, n = a.s_timer.Reset(), H = c.dt, p = 0; p < this.m_bodyCount; ++p) f =
                            this.m_bodies[p], this.m_positions[p].c.Copy(f.m_sweep.c), m = f.m_sweep.a, l = this.m_velocities[p].v.Copy(f.m_linearVelocity), k = f.m_angularVelocity, f.m_sweep.c0.Copy(f.m_sweep.c), f.m_sweep.a0 = f.m_sweep.a, f.m_type === h.b2BodyType.b2_dynamicBody && (l.x += H * (f.m_gravityScale * d.x + f.m_invMass * f.m_force.x), l.y += H * (f.m_gravityScale * d.y + f.m_invMass * f.m_force.y), k += H * f.m_invI * f.m_torque, l.SelfMul(1 / (1 + H * f.m_linearDamping)), k *= 1 / (1 + H * f.m_angularDamping)), this.m_positions[p].a = m, this.m_velocities[p].w = k;
                        n.Reset();
                        f =
                            a.s_solverData;
                        f.step.Copy(c);
                        f.positions = this.m_positions;
                        f.velocities = this.m_velocities;
                        p = a.s_contactSolverDef;
                        p.step.Copy(c);
                        p.contacts = this.m_contacts;
                        p.count = this.m_contactCount;
                        p.positions = this.m_positions;
                        p.velocities = this.m_velocities;
                        p.allocator = this.m_allocator;
                        d = a.s_contactSolver.Initialize(p);
                        d.InitializeVelocityConstraints();
                        c.warmStarting && d.WarmStart();
                        for (p = 0; p < this.m_jointCount; ++p) this.m_joints[p].InitVelocityConstraints(f);
                        b.solveInit = n.GetMilliseconds();
                        n.Reset();
                        for (p = 0; p < c.velocityIterations; ++p) {
                            for (l =
                                0; l < this.m_jointCount; ++l) this.m_joints[l].SolveVelocityConstraints(f);
                            d.SolveVelocityConstraints()
                        }
                        d.StoreImpulses();
                        b.solveVelocity = n.GetMilliseconds();
                        for (p = 0; p < this.m_bodyCount; ++p) {
                            var q = this.m_positions[p].c;
                            m = this.m_positions[p].a;
                            l = this.m_velocities[p].v;
                            k = this.m_velocities[p].w;
                            g = r.MulSV(H, l, a.s_translation);
                            4 < r.DotVV(g, g) && (g = 2 / g.Length(), l.SelfMul(g));
                            g = H * k;
                            2.4674011002726646 < g * g && (g = 1.570796326795 / Z(g), k *= g);
                            q.x += H * l.x;
                            q.y += H * l.y;
                            m += H * k;
                            this.m_positions[p].a = m;
                            this.m_velocities[p].w = k
                        }
                        n.Reset();
                        k = !1;
                        for (p = 0; p < c.positionIterations; ++p) {
                            m = d.SolvePositionConstraints();
                            q = !0;
                            for (l = 0; l < this.m_jointCount; ++l) g = this.m_joints[l].SolvePositionConstraints(f), q = q && g;
                            if (m && q) {
                                k = !0;
                                break
                            }
                        }
                        for (p = 0; p < this.m_bodyCount; ++p) c = this.m_bodies[p], c.m_sweep.c.Copy(this.m_positions[p].c), c.m_sweep.a = this.m_positions[p].a, c.m_linearVelocity.Copy(this.m_velocities[p].v), c.m_angularVelocity = this.m_velocities[p].w, c.SynchronizeTransform();
                        b.solvePosition = n.GetMilliseconds();
                        this.Report(d.m_velocityConstraints);
                        if (e) {
                            b =
                                1E37;
                            e = da * da;
                            for (p = 0; p < this.m_bodyCount; ++p) f = this.m_bodies[p], f.GetType() !== h.b2BodyType.b2_staticBody && (!f.m_autoSleepFlag || f.m_angularVelocity * f.m_angularVelocity > e || 1E-4 < r.DotVV(f.m_linearVelocity, f.m_linearVelocity) ? b = f.m_sleepTime = 0 : (f.m_sleepTime += H, b = W(b, f.m_sleepTime)));
                            if (.5 <= b && k)
                                for (p = 0; p < this.m_bodyCount; ++p) f = this.m_bodies[p], f.SetAwake(!1)
                        }
                    };
                    a.prototype.SolveTOI = function(b, c, d) {
                        for (var e, f = 0; f < this.m_bodyCount; ++f) {
                            var g = this.m_bodies[f];
                            this.m_positions[f].c.Copy(g.m_sweep.c);
                            this.m_positions[f].a =
                                g.m_sweep.a;
                            this.m_velocities[f].v.Copy(g.m_linearVelocity);
                            this.m_velocities[f].w = g.m_angularVelocity
                        }
                        f = a.s_contactSolverDef;
                        f.contacts = this.m_contacts;
                        f.count = this.m_contactCount;
                        f.allocator = this.m_allocator;
                        f.step.Copy(b);
                        f.positions = this.m_positions;
                        f.velocities = this.m_velocities;
                        g = a.s_contactSolver.Initialize(f);
                        for (f = 0; f < b.positionIterations && !g.SolveTOIPositionConstraints(c, d); ++f);
                        this.m_bodies[c].m_sweep.c0.Copy(this.m_positions[c].c);
                        this.m_bodies[c].m_sweep.a0 = this.m_positions[c].a;
                        this.m_bodies[d].m_sweep.c0.Copy(this.m_positions[d].c);
                        this.m_bodies[d].m_sweep.a0 = this.m_positions[d].a;
                        g.InitializeVelocityConstraints();
                        for (f = 0; f < b.velocityIterations; ++f) g.SolveVelocityConstraints();
                        b = b.dt;
                        for (f = 0; f < this.m_bodyCount; ++f) {
                            c = this.m_positions[f].c;
                            d = this.m_positions[f].a;
                            var h = this.m_velocities[f].v,
                                k = this.m_velocities[f].w;
                            e = r.MulSV(b, h, a.s_translation);
                            4 < r.DotVV(e, e) && (e = 2 / e.Length(), h.SelfMul(e));
                            e = b * k;
                            2.4674011002726646 < e * e && (e = 1.570796326795 / Z(e), k *= e);
                            c.SelfMulAdd(b, h);
                            d += b * k;
                            this.m_positions[f].a = d;
                            this.m_velocities[f].w = k;
                            e =
                                this.m_bodies[f];
                            e.m_sweep.c.Copy(c);
                            e.m_sweep.a = d;
                            e.m_linearVelocity.Copy(h);
                            e.m_angularVelocity = k;
                            e.SynchronizeTransform()
                        }
                        this.Report(g.m_velocityConstraints)
                    };
                    a.prototype.Report = function(b) {
                        if (null !== this.m_listener)
                            for (var c = 0; c < this.m_contactCount; ++c) {
                                var d = this.m_contacts[c];
                                if (d) {
                                    var e = b[c],
                                        f = a.s_impulse;
                                    f.count = e.pointCount;
                                    for (var g = 0; g < e.pointCount; ++g) f.normalImpulses[g] = e.points[g].normalImpulse, f.tangentImpulses[g] = e.points[g].tangentImpulse;
                                    this.m_listener.PostSolve(d, f)
                                }
                            }
                    };
                    a.s_timer =
                        new za;
                    a.s_solverData = new zc;
                    a.s_contactSolverDef = new Bc;
                    a.s_contactSolver = new Cc;
                    a.s_translation = new r;
                    a.s_impulse = new wc;
                    return a
                }();
            (function(a) {
                a[a.b2_waterParticle = 0] = "b2_waterParticle";
                a[a.b2_zombieParticle = 2] = "b2_zombieParticle";
                a[a.b2_wallParticle = 4] = "b2_wallParticle";
                a[a.b2_springParticle = 8] = "b2_springParticle";
                a[a.b2_elasticParticle = 16] = "b2_elasticParticle";
                a[a.b2_viscousParticle = 32] = "b2_viscousParticle";
                a[a.b2_powderParticle = 64] = "b2_powderParticle";
                a[a.b2_tensileParticle = 128] = "b2_tensileParticle";
                a[a.b2_colorMixingParticle = 256] = "b2_colorMixingParticle";
                a[a.b2_destructionListenerParticle = 512] = "b2_destructionListenerParticle";
                a[a.b2_barrierParticle = 1024] = "b2_barrierParticle";
                a[a.b2_staticPressureParticle = 2048] = "b2_staticPressureParticle";
                a[a.b2_reactiveParticle = 4096] = "b2_reactiveParticle";
                a[a.b2_repulsiveParticle = 8192] = "b2_repulsiveParticle";
                a[a.b2_fixtureContactListenerParticle = 16384] = "b2_fixtureContactListenerParticle";
                a[a.b2_particleContactListenerParticle = 32768] = "b2_particleContactListenerParticle";
                a[a.b2_fixtureContactFilterParticle = 65536] = "b2_fixtureContactFilterParticle";
                a[a.b2_particleContactFilterParticle = 131072] = "b2_particleContactFilterParticle"
            })(h.b2ParticleFlag || (h.b2ParticleFlag = {}));
            var Wb = function() {
                    return function() {
                        this.flags = 0;
                        this.position = new r;
                        this.velocity = new r;
                        this.color = new pa(0, 0, 0, 0);
                        this.lifetime = 0;
                        this.group = this.userData = null
                    }
                }(),
                Ec = function() {
                    function a() {
                        this.m_index = -1
                    }
                    a.prototype.GetIndex = function() {
                        return this.m_index
                    };
                    a.prototype.SetIndex = function(a) {
                        this.m_index =
                            a
                    };
                    return a
                }();
            (function(a) {
                a[a.b2_solidParticleGroup = 1] = "b2_solidParticleGroup";
                a[a.b2_rigidParticleGroup = 2] = "b2_rigidParticleGroup";
                a[a.b2_particleGroupCanBeEmpty = 4] = "b2_particleGroupCanBeEmpty";
                a[a.b2_particleGroupWillBeDestroyed = 8] = "b2_particleGroupWillBeDestroyed";
                a[a.b2_particleGroupNeedsUpdateDepth = 16] = "b2_particleGroupNeedsUpdateDepth";
                a[a.b2_particleGroupInternalMask = 24] = "b2_particleGroupInternalMask"
            })(h.b2ParticleGroupFlag || (h.b2ParticleGroupFlag = {}));
            var Fc = function() {
                    return function() {
                        this.groupFlags =
                            this.flags = 0;
                        this.position = new r;
                        this.angle = 0;
                        this.linearVelocity = new r;
                        this.angularVelocity = 0;
                        this.color = new pa;
                        this.strength = 1;
                        this.lifetime = this.particleCount = this.stride = this.shapeCount = 0;
                        this.group = this.userData = null
                    }
                }(),
                Gc = function() {
                    function a(a) {
                        this.m_groupFlags = this.m_lastIndex = this.m_firstIndex = 0;
                        this.m_strength = 1;
                        this.m_next = this.m_prev = null;
                        this.m_timestamp = -1;
                        this.m_inertia = this.m_mass = 0;
                        this.m_center = new r;
                        this.m_linearVelocity = new r;
                        this.m_angularVelocity = 0;
                        this.m_transform = new U;
                        this.m_userData = null;
                        this.m_system = a
                    }
                    a.prototype.GetNext = function() {
                        return this.m_next
                    };
                    a.prototype.GetParticleSystem = function() {
                        return this.m_system
                    };
                    a.prototype.GetParticleCount = function() {
                        return this.m_lastIndex - this.m_firstIndex
                    };
                    a.prototype.GetBufferIndex = function() {
                        return this.m_firstIndex
                    };
                    a.prototype.ContainsParticle = function(a) {
                        return this.m_firstIndex <= a && a < this.m_lastIndex
                    };
                    a.prototype.GetAllParticleFlags = function() {
                        if (!this.m_system.m_flagsBuffer.data) throw Error();
                        for (var a = 0, b = this.m_firstIndex; b <
                            this.m_lastIndex; b++) a |= this.m_system.m_flagsBuffer.data[b];
                        return a
                    };
                    a.prototype.GetGroupFlags = function() {
                        return this.m_groupFlags
                    };
                    a.prototype.SetGroupFlags = function(a) {
                        a |= this.m_groupFlags & h.b2ParticleGroupFlag.b2_particleGroupInternalMask;
                        this.m_system.SetGroupFlags(this, a)
                    };
                    a.prototype.GetMass = function() {
                        this.UpdateStatistics();
                        return this.m_mass
                    };
                    a.prototype.GetInertia = function() {
                        this.UpdateStatistics();
                        return this.m_inertia
                    };
                    a.prototype.GetCenter = function() {
                        this.UpdateStatistics();
                        return this.m_center
                    };
                    a.prototype.GetLinearVelocity = function() {
                        this.UpdateStatistics();
                        return this.m_linearVelocity
                    };
                    a.prototype.GetAngularVelocity = function() {
                        this.UpdateStatistics();
                        return this.m_angularVelocity
                    };
                    a.prototype.GetTransform = function() {
                        return this.m_transform
                    };
                    a.prototype.GetPosition = function() {
                        return this.m_transform.p
                    };
                    a.prototype.GetAngle = function() {
                        return this.m_transform.q.GetAngle()
                    };
                    a.prototype.GetLinearVelocityFromWorldPoint = function(b, c) {
                        var d = a.GetLinearVelocityFromWorldPoint_s_t0;
                        this.UpdateStatistics();
                        return r.AddVCrossSV(this.m_linearVelocity, this.m_angularVelocity, r.SubVV(b, this.m_center, d), c)
                    };
                    a.prototype.GetUserData = function() {
                        return this.m_userData
                    };
                    a.prototype.SetUserData = function(a) {
                        this.m_userData = a
                    };
                    a.prototype.ApplyForce = function(a) {
                        this.m_system.ApplyForce(this.m_firstIndex, this.m_lastIndex, a)
                    };
                    a.prototype.ApplyLinearImpulse = function(a) {
                        this.m_system.ApplyLinearImpulse(this.m_firstIndex, this.m_lastIndex, a)
                    };
                    a.prototype.DestroyParticles = function(a) {
                        if (this.m_system.m_world.IsLocked()) throw Error();
                        for (var b = this.m_firstIndex; b < this.m_lastIndex; b++) this.m_system.DestroyParticle(b, a)
                    };
                    a.prototype.UpdateStatistics = function() {
                        if (!this.m_system.m_positionBuffer.data) throw Error();
                        if (!this.m_system.m_velocityBuffer.data) throw Error();
                        var a = new r,
                            b = new r;
                        if (this.m_timestamp !== this.m_system.m_timestamp) {
                            var c = this.m_system.GetParticleMass();
                            this.m_mass = c * (this.m_lastIndex - this.m_firstIndex);
                            this.m_center.SetZero();
                            this.m_linearVelocity.SetZero();
                            for (var d = this.m_firstIndex; d < this.m_lastIndex; d++) this.m_center.SelfMulAdd(c,
                                this.m_system.m_positionBuffer.data[d]), this.m_linearVelocity.SelfMulAdd(c, this.m_system.m_velocityBuffer.data[d]);
                            0 < this.m_mass && (d = 1 / this.m_mass, this.m_center.SelfMul(d), this.m_linearVelocity.SelfMul(d));
                            this.m_angularVelocity = this.m_inertia = 0;
                            for (d = this.m_firstIndex; d < this.m_lastIndex; d++) r.SubVV(this.m_system.m_positionBuffer.data[d], this.m_center, a), r.SubVV(this.m_system.m_velocityBuffer.data[d], this.m_linearVelocity, b), this.m_inertia += c * r.DotVV(a, a), this.m_angularVelocity += c * r.CrossVV(a, b);
                            0 < this.m_inertia && (this.m_angularVelocity *= 1 / this.m_inertia);
                            this.m_timestamp = this.m_system.m_timestamp
                        }
                    };
                    a.GetLinearVelocityFromWorldPoint_s_t0 = new r;
                    return a
                }(),
                Xd = function() {
                    function a(a) {
                        this.m_capacity = this.m_back = this.m_front = 0;
                        this.m_buffer = d(a, function(a) {
                            return null
                        });
                        this.m_capacity = a
                    }
                    a.prototype.Push = function(a) {
                        if (this.m_back >= this.m_capacity) {
                            for (var b = this.m_front; b < this.m_back; b++) this.m_buffer[b - this.m_front] = this.m_buffer[b];
                            this.m_back -= this.m_front;
                            this.m_front = 0;
                            this.m_back >= this.m_capacity &&
                                (0 < this.m_capacity ? (this.m_buffer.concat(d(this.m_capacity, function(a) {
                                    return null
                                })), this.m_capacity *= 2) : (this.m_buffer.concat(d(1, function(a) {
                                    return null
                                })), this.m_capacity = 1))
                        }
                        this.m_buffer[this.m_back] = a;
                        this.m_back++
                    };
                    a.prototype.Pop = function() {
                        this.m_buffer[this.m_front] = null;
                        this.m_front++
                    };
                    a.prototype.Empty = function() {
                        return this.m_front === this.m_back
                    };
                    a.prototype.Front = function() {
                        var a = this.m_buffer[this.m_front];
                        if (!a) throw Error();
                        return a
                    };
                    return a
                }(),
                Xb = function() {
                    function a(b) {
                        this.m_countY =
                            this.m_countX = this.m_generatorCount = this.m_generatorCapacity = 0;
                        this.m_diagram = [];
                        this.m_generatorBuffer = d(b, function(b) {
                            return new a.Generator
                        });
                        this.m_generatorCapacity = b
                    }
                    a.prototype.AddGenerator = function(a, b, c) {
                        var d = this.m_generatorBuffer[this.m_generatorCount++];
                        d.center.Copy(a);
                        d.tag = b;
                        d.necessary = c
                    };
                    a.prototype.Generate = function(b, c) {
                        var d;
                        var e = 1 / b;
                        var f = new r(1E37, 1E37);
                        b = new r(-1E37, -1E37);
                        var g = 0;
                        for (d = 0; d < this.m_generatorCount; d++) {
                            var h = this.m_generatorBuffer[d];
                            h.necessary && (r.MinV(f,
                                h.center, f), r.MaxV(b, h.center, b), ++g)
                        }
                        if (0 === g) this.m_countY = this.m_countX = 0;
                        else {
                            f.x -= c;
                            f.y -= c;
                            b.x += c;
                            b.y += c;
                            this.m_countX = 1 + Math.floor(e * (b.x - f.x));
                            this.m_countY = 1 + Math.floor(e * (b.y - f.y));
                            this.m_diagram = [];
                            g = new Xd(4 * this.m_countX * this.m_countY);
                            for (d = 0; d < this.m_generatorCount; d++) h = this.m_generatorBuffer[d], h.center.SelfSub(f).SelfMul(e), b = Math.floor(h.center.x), c = Math.floor(h.center.y), 0 <= b && 0 <= c && b < this.m_countX && c < this.m_countY && g.Push(new a.Task(b, c, b + c * this.m_countX, h));
                            for (; !g.Empty();) d =
                                g.Front(), b = d.m_x, c = d.m_y, e = d.m_i, h = d.m_generator, g.Pop(), this.m_diagram[e] || (this.m_diagram[e] = h, 0 < b && g.Push(new a.Task(b - 1, c, e - 1, h)), 0 < c && g.Push(new a.Task(b, c - 1, e - this.m_countX, h)), b < this.m_countX - 1 && g.Push(new a.Task(b + 1, c, e + 1, h)), c < this.m_countY - 1 && g.Push(new a.Task(b, c + 1, e + this.m_countX, h)));
                            for (c = 0; c < this.m_countY; c++)
                                for (b = 0; b < this.m_countX - 1; b++) e = b + c * this.m_countX, f = this.m_diagram[e], d = this.m_diagram[e + 1], f !== d && (g.Push(new a.Task(b, c, e, d)), g.Push(new a.Task(b + 1, c, e + 1, f)));
                            for (c = 0; c < this.m_countY -
                                1; c++)
                                for (b = 0; b < this.m_countX; b++) e = b + c * this.m_countX, f = this.m_diagram[e], d = this.m_diagram[e + this.m_countX], f !== d && (g.Push(new a.Task(b, c, e, d)), g.Push(new a.Task(b, c + 1, e + this.m_countX, f)));
                            for (; !g.Empty();)
                                if (d = g.Front(), b = d.m_x, c = d.m_y, e = d.m_i, d = d.m_generator, g.Pop(), f = this.m_diagram[e], f !== d) {
                                    h = f.center.x - b;
                                    f = f.center.y - c;
                                    var k = d.center.x - b,
                                        l = d.center.y - c;
                                    h * h + f * f > k * k + l * l && (this.m_diagram[e] = d, 0 < b && g.Push(new a.Task(b - 1, c, e - 1, d)), 0 < c && g.Push(new a.Task(b, c - 1, e - this.m_countX, d)), b < this.m_countX - 1 &&
                                        g.Push(new a.Task(b + 1, c, e + 1, d)), c < this.m_countY - 1 && g.Push(new a.Task(b, c + 1, e + this.m_countX, d)))
                                }
                        }
                    };
                    a.prototype.GetNodes = function(a) {
                        for (var b = 0; b < this.m_countY - 1; b++)
                            for (var c = 0; c < this.m_countX - 1; c++) {
                                var d = c + b * this.m_countX,
                                    e = this.m_diagram[d],
                                    f = this.m_diagram[d + 1],
                                    g = this.m_diagram[d + this.m_countX];
                                d = this.m_diagram[d + 1 + this.m_countX];
                                f !== g && (e !== f && e !== g && (e.necessary || f.necessary || g.necessary) && a(e.tag, f.tag, g.tag), d !== f && d !== g && (e.necessary || f.necessary || g.necessary) && a(f.tag, d.tag, g.tag))
                            }
                    };
                    return a
                }();
            (function(a) {
                var b = function() {
                    return function() {
                        this.center = new r;
                        this.tag = 0;
                        this.necessary = !1
                    }
                }();
                a.Generator = b;
                b = function() {
                    return function(a, b, c, d) {
                        this.m_x = a;
                        this.m_y = b;
                        this.m_i = c;
                        this.m_generator = d
                    }
                }();
                a.Task = b
            })(Xb || (Xb = {}));
            var Za = function() {
                    function a(a) {
                        this.data = [];
                        this.capacity = this.count = 0;
                        this.allocator = a
                    }
                    a.prototype.Append = function() {
                        this.count >= this.capacity && this.Grow();
                        return this.count++
                    };
                    a.prototype.Reserve = function(a) {
                        if (!(this.capacity >= a)) {
                            for (var b = this.capacity; b < a; ++b) this.data[b] =
                                this.allocator();
                            this.capacity = a
                        }
                    };
                    a.prototype.Grow = function() {
                        this.Reserve(this.capacity ? 2 * this.capacity : 256)
                    };
                    a.prototype.Free = function() {
                        0 !== this.data.length && (this.data = [], this.count = this.capacity = 0)
                    };
                    a.prototype.Shorten = function(a) {};
                    a.prototype.Data = function() {
                        return this.data
                    };
                    a.prototype.GetCount = function() {
                        return this.count
                    };
                    a.prototype.SetCount = function(a) {
                        this.count = a
                    };
                    a.prototype.GetCapacity = function() {
                        return this.capacity
                    };
                    a.prototype.RemoveIf = function(a) {
                        this.count = R(this.data, a, this.count)
                    };
                    a.prototype.Unique = function(a) {
                        var b = this.data,
                            c = 0,
                            d = this.count;
                        if (c === d) a = d;
                        else {
                            for (var e = c; ++c !== d;) a(b[e], b[c]) || D(b, ++e, c);
                            a = ++e
                        }
                        this.count = a
                    };
                    return a
                }(),
                Yb = function(a) {
                    function b(b) {
                        var c = a.call(this) || this;
                        c.m_system = b;
                        return c
                    }
                    C(b, a);
                    b.prototype.ShouldQueryParticleSystem = function(a) {
                        return !1
                    };
                    b.prototype.ReportFixture = function(a) {
                        if (a.IsSensor()) return !0;
                        for (var b = a.GetShape().GetChildCount(), c = 0; c < b; c++) {
                            var d = a.GetAABB(c);
                            d = this.m_system.GetInsideBoundsEnumerator(d);
                            for (var e; 0 <= (e = d.GetNext());) this.ReportFixtureAndParticle(a,
                                c, e)
                        }
                        return !0
                    };
                    b.prototype.ReportParticle = function(a, b) {
                        return !1
                    };
                    b.prototype.ReportFixtureAndParticle = function(a, b, c) {};
                    return b
                }(eb),
                Hc = function() {
                    function a() {
                        this.weight = this.indexB = this.indexA = 0;
                        this.normal = new r;
                        this.flags = 0
                    }
                    a.prototype.SetIndices = function(a, b) {
                        this.indexA = a;
                        this.indexB = b
                    };
                    a.prototype.SetWeight = function(a) {
                        this.weight = a
                    };
                    a.prototype.SetNormal = function(a) {
                        this.normal.Copy(a)
                    };
                    a.prototype.SetFlags = function(a) {
                        this.flags = a
                    };
                    a.prototype.GetIndexA = function() {
                        return this.indexA
                    };
                    a.prototype.GetIndexB = function() {
                        return this.indexB
                    };
                    a.prototype.GetWeight = function() {
                        return this.weight
                    };
                    a.prototype.GetNormal = function() {
                        return this.normal
                    };
                    a.prototype.GetFlags = function() {
                        return this.flags
                    };
                    a.prototype.IsEqual = function(a) {
                        return this.indexA === a.indexA && this.indexB === a.indexB && this.flags === a.flags && this.weight === a.weight && this.normal.x === a.normal.x && this.normal.y === a.normal.y
                    };
                    a.prototype.IsNotEqual = function(a) {
                        return !this.IsEqual(a)
                    };
                    a.prototype.ApproximatelyEqual = function(a) {
                        return this.indexA ===
                            a.indexA && this.indexB === a.indexB && this.flags === a.flags && .01 > Z(this.weight - a.weight) && 1E-4 > r.DistanceSquaredVV(this.normal, a.normal)
                    };
                    return a
                }(),
                Ic = function() {
                    return function() {
                        this.weight = this.index = 0;
                        this.normal = new r;
                        this.mass = 0
                    }
                }(),
                Jc = function() {
                    return function() {
                        this.distance = this.strength = this.flags = this.indexB = this.indexA = 0
                    }
                }(),
                Kc = function() {
                    return function() {
                        this.strength = this.flags = this.indexC = this.indexB = this.indexA = 0;
                        this.pa = new r(0, 0);
                        this.pb = new r(0, 0);
                        this.pc = new r(0, 0);
                        this.s = this.kc =
                            this.kb = this.ka = 0
                    }
                }(),
                Lc = function() {
                    function a() {
                        this.strictContactCheck = !1;
                        this.radius = this.gravityScale = this.density = 1;
                        this.maxCount = 0;
                        this.pressureStrength = .005;
                        this.dampingStrength = 1;
                        this.viscousStrength = this.springStrength = this.elasticStrength = .25;
                        this.surfaceTensionNormalStrength = this.surfaceTensionPressureStrength = .2;
                        this.repulsiveStrength = 1;
                        this.ejectionStrength = this.powderStrength = .5;
                        this.staticPressureRelaxation = this.staticPressureStrength = .2;
                        this.staticPressureIterations = 8;
                        this.colorMixingStrength =
                            .5;
                        this.destroyByAge = !0;
                        this.lifetimeGranularity = 1 / 60
                    }
                    a.prototype.Copy = function(a) {
                        this.strictContactCheck = a.strictContactCheck;
                        this.density = a.density;
                        this.gravityScale = a.gravityScale;
                        this.radius = a.radius;
                        this.maxCount = a.maxCount;
                        this.pressureStrength = a.pressureStrength;
                        this.dampingStrength = a.dampingStrength;
                        this.elasticStrength = a.elasticStrength;
                        this.springStrength = a.springStrength;
                        this.viscousStrength = a.viscousStrength;
                        this.surfaceTensionPressureStrength = a.surfaceTensionPressureStrength;
                        this.surfaceTensionNormalStrength =
                            a.surfaceTensionNormalStrength;
                        this.repulsiveStrength = a.repulsiveStrength;
                        this.powderStrength = a.powderStrength;
                        this.ejectionStrength = a.ejectionStrength;
                        this.staticPressureStrength = a.staticPressureStrength;
                        this.staticPressureRelaxation = a.staticPressureRelaxation;
                        this.staticPressureIterations = a.staticPressureIterations;
                        this.colorMixingStrength = a.colorMixingStrength;
                        this.destroyByAge = a.destroyByAge;
                        this.lifetimeGranularity = a.lifetimeGranularity;
                        return this
                    };
                    a.prototype.Clone = function() {
                        return (new a).Copy(this)
                    };
                    return a
                }();
            h.b2ParticleSystem = function() {
                function a(b, c) {
                    this.m_paused = !1;
                    this.m_allParticleFlags = this.m_timestamp = 0;
                    this.m_needsUpdateAllParticleFlags = !1;
                    this.m_allGroupFlags = 0;
                    this.m_hasForce = this.m_needsUpdateAllGroupFlags = !1;
                    this.m_internalAllocatedCapacity = this.m_count = this.m_squaredDiameter = this.m_inverseDiameter = this.m_particleDiameter = this.m_inverseDensity = this.m_iterationIndex = 0;
                    this.m_handleIndexBuffer = new a.UserOverridableBuffer;
                    this.m_flagsBuffer = new a.UserOverridableBuffer;
                    this.m_positionBuffer =
                        new a.UserOverridableBuffer;
                    this.m_velocityBuffer = new a.UserOverridableBuffer;
                    this.m_forceBuffer = [];
                    this.m_weightBuffer = [];
                    this.m_staticPressureBuffer = [];
                    this.m_accumulationBuffer = [];
                    this.m_accumulation2Buffer = [];
                    this.m_depthBuffer = [];
                    this.m_colorBuffer = new a.UserOverridableBuffer;
                    this.m_groupBuffer = [];
                    this.m_userDataBuffer = new a.UserOverridableBuffer;
                    this.m_stuckThreshold = 0;
                    this.m_lastBodyContactStepBuffer = new a.UserOverridableBuffer;
                    this.m_bodyContactCountBuffer = new a.UserOverridableBuffer;
                    this.m_consecutiveContactStepsBuffer =
                        new a.UserOverridableBuffer;
                    this.m_stuckParticleBuffer = new Za(function() {
                        return 0
                    });
                    this.m_proxyBuffer = new Za(function() {
                        return new a.Proxy
                    });
                    this.m_contactBuffer = new Za(function() {
                        return new Hc
                    });
                    this.m_bodyContactBuffer = new Za(function() {
                        return new Ic
                    });
                    this.m_pairBuffer = new Za(function() {
                        return new Jc
                    });
                    this.m_triadBuffer = new Za(function() {
                        return new Kc
                    });
                    this.m_expirationTimeBuffer = new a.UserOverridableBuffer;
                    this.m_indexByExpirationTimeBuffer = new a.UserOverridableBuffer;
                    this.m_timeElapsed = 0;
                    this.m_expirationTimeBufferRequiresSorting = !1;
                    this.m_groupCount = 0;
                    this.m_groupList = null;
                    this.m_def = new Lc;
                    this.m_next = this.m_prev = null;
                    this.SetStrictContactCheck(b.strictContactCheck);
                    this.SetDensity(b.density);
                    this.SetGravityScale(b.gravityScale);
                    this.SetRadius(b.radius);
                    this.SetMaxParticleCount(b.maxCount);
                    this.m_def = b.Clone();
                    this.m_world = c;
                    this.SetDestructionByAge(this.m_def.destroyByAge)
                }
                a.computeTag = function(b, c) {
                    return (c + a.yOffset >>> 0 << a.yShift) + (a.xScale * b + a.xOffset >>> 0) >>> 0
                };
                a.computeRelativeTag =
                    function(b, c, d) {
                        return b + (d << a.yShift) + (c << a.xShift) >>> 0
                    };
                a.prototype.Drop = function() {
                    for (; this.m_groupList;) this.DestroyParticleGroup(this.m_groupList);
                    this.FreeUserOverridableBuffer(this.m_handleIndexBuffer);
                    this.FreeUserOverridableBuffer(this.m_flagsBuffer);
                    this.FreeUserOverridableBuffer(this.m_lastBodyContactStepBuffer);
                    this.FreeUserOverridableBuffer(this.m_bodyContactCountBuffer);
                    this.FreeUserOverridableBuffer(this.m_consecutiveContactStepsBuffer);
                    this.FreeUserOverridableBuffer(this.m_positionBuffer);
                    this.FreeUserOverridableBuffer(this.m_velocityBuffer);
                    this.FreeUserOverridableBuffer(this.m_colorBuffer);
                    this.FreeUserOverridableBuffer(this.m_userDataBuffer);
                    this.FreeUserOverridableBuffer(this.m_expirationTimeBuffer);
                    this.FreeUserOverridableBuffer(this.m_indexByExpirationTimeBuffer);
                    this.FreeBuffer(this.m_forceBuffer, this.m_internalAllocatedCapacity);
                    this.FreeBuffer(this.m_weightBuffer, this.m_internalAllocatedCapacity);
                    this.FreeBuffer(this.m_staticPressureBuffer, this.m_internalAllocatedCapacity);
                    this.FreeBuffer(this.m_accumulationBuffer, this.m_internalAllocatedCapacity);
                    this.FreeBuffer(this.m_accumulation2Buffer, this.m_internalAllocatedCapacity);
                    this.FreeBuffer(this.m_depthBuffer, this.m_internalAllocatedCapacity);
                    this.FreeBuffer(this.m_groupBuffer, this.m_internalAllocatedCapacity)
                };
                a.prototype.CreateParticle = function(a) {
                    if (this.m_world.IsLocked()) throw Error();
                    this.m_count >= this.m_internalAllocatedCapacity && this.ReallocateInternalAllocatedBuffers(this.m_count ? 2 * this.m_count : 256);
                    if (this.m_count >=
                        this.m_internalAllocatedCapacity) {
                        if (!this.m_def.destroyByAge) return -1;
                        this.DestroyOldestParticle(0, !1);
                        this.SolveZombie()
                    }
                    var b = this.m_count++;
                    if (!this.m_flagsBuffer.data) throw Error();
                    this.m_flagsBuffer.data[b] = 0;
                    this.m_lastBodyContactStepBuffer.data && (this.m_lastBodyContactStepBuffer.data[b] = 0);
                    this.m_bodyContactCountBuffer.data && (this.m_bodyContactCountBuffer.data[b] = 0);
                    this.m_consecutiveContactStepsBuffer.data && (this.m_consecutiveContactStepsBuffer.data[b] = 0);
                    if (!this.m_positionBuffer.data) throw Error();
                    if (!this.m_velocityBuffer.data) throw Error();
                    this.m_positionBuffer.data[b] = (this.m_positionBuffer.data[b] || new r).Copy(e(a.position, r.ZERO));
                    this.m_velocityBuffer.data[b] = (this.m_velocityBuffer.data[b] || new r).Copy(e(a.velocity, r.ZERO));
                    this.m_weightBuffer[b] = 0;
                    this.m_forceBuffer[b] = (this.m_forceBuffer[b] || new r).SetZero();
                    this.m_staticPressureBuffer && (this.m_staticPressureBuffer[b] = 0);
                    this.m_depthBuffer && (this.m_depthBuffer[b] = 0);
                    var c = (new pa).Copy(e(a.color, pa.ZERO));
                    if (this.m_colorBuffer.data ||
                        !c.IsZero()) this.m_colorBuffer.data = this.RequestBuffer(this.m_colorBuffer.data), this.m_colorBuffer.data[b] = (this.m_colorBuffer.data[b] || new pa).Copy(c);
                    if (this.m_userDataBuffer.data || a.userData) this.m_userDataBuffer.data = this.RequestBuffer(this.m_userDataBuffer.data), this.m_userDataBuffer.data[b] = a.userData;
                    this.m_handleIndexBuffer.data && (this.m_handleIndexBuffer.data[b] = null);
                    c = this.m_proxyBuffer.data[this.m_proxyBuffer.Append()];
                    var d = e(a.lifetime, 0),
                        f = 0 < d;
                    if (this.m_expirationTimeBuffer.data || f) {
                        this.SetParticleLifetime(b,
                            f ? d : this.ExpirationTimeToLifetime(-this.GetQuantizedTimeElapsed()));
                        if (!this.m_indexByExpirationTimeBuffer.data) throw Error();
                        this.m_indexByExpirationTimeBuffer.data[b] = b
                    }
                    c.index = b;
                    c = e(a.group, null);
                    if (this.m_groupBuffer[b] = c) c.m_firstIndex < c.m_lastIndex ? this.RotateBuffer(c.m_firstIndex, c.m_lastIndex, b) : c.m_firstIndex = b, c.m_lastIndex = b + 1;
                    this.SetParticleFlags(b, e(a.flags, 0));
                    return b
                };
                a.prototype.GetParticleHandleFromIndex = function(a) {
                    this.m_handleIndexBuffer.data = this.RequestBuffer(this.m_handleIndexBuffer.data);
                    var b = this.m_handleIndexBuffer.data[a];
                    if (b) return b;
                    b = new Ec;
                    b.SetIndex(a);
                    return this.m_handleIndexBuffer.data[a] = b
                };
                a.prototype.DestroyParticle = function(a, b) {
                    void 0 === b && (b = !1);
                    if (!this.m_flagsBuffer.data) throw Error();
                    var c = h.b2ParticleFlag.b2_zombieParticle;
                    b && (c |= h.b2ParticleFlag.b2_destructionListenerParticle);
                    this.SetParticleFlags(a, this.m_flagsBuffer.data[a] | c)
                };
                a.prototype.DestroyOldestParticle = function(a, b) {
                    void 0 === b && (b = !1);
                    var c = this.GetParticleCount();
                    if (!this.m_indexByExpirationTimeBuffer.data) throw Error();
                    if (!this.m_expirationTimeBuffer.data) throw Error();
                    c = this.m_indexByExpirationTimeBuffer.data[c - (a + 1)];
                    a = this.m_indexByExpirationTimeBuffer.data[a];
                    this.DestroyParticle(0 < this.m_expirationTimeBuffer.data[c] ? c : a, b)
                };
                a.prototype.DestroyParticlesInShape = function(b, c, d) {
                    void 0 === d && (d = !1);
                    var e = a.DestroyParticlesInShape_s_aabb;
                    if (this.m_world.IsLocked()) throw Error();
                    d = new a.DestroyParticlesInShapeCallback(this, b, c, d);
                    b.ComputeAABB(e, c, 0);
                    this.m_world.QueryAABB(d, e);
                    return d.Destroyed()
                };
                a.prototype.CreateParticleGroup =
                    function(b) {
                        var c = a.CreateParticleGroup_s_transform;
                        if (this.m_world.IsLocked()) throw Error();
                        c.SetPositionAngle(e(b.position, r.ZERO), e(b.angle, 0));
                        var d = this.m_count;
                        b.shape && this.CreateParticlesWithShapeForGroup(b.shape, b, c);
                        b.shapes && this.CreateParticlesWithShapesForGroup(b.shapes, e(b.shapeCount, b.shapes.length), b, c);
                        if (b.positionData)
                            for (var f = e(b.particleCount, b.positionData.length), g = 0; g < f; g++) this.CreateParticleForGroup(b, c, b.positionData[g]);
                        f = this.m_count;
                        var h = new Gc(this);
                        h.m_firstIndex =
                            d;
                        h.m_lastIndex = f;
                        h.m_strength = e(b.strength, 1);
                        h.m_userData = b.userData;
                        h.m_transform.Copy(c);
                        h.m_prev = null;
                        (h.m_next = this.m_groupList) && (this.m_groupList.m_prev = h);
                        this.m_groupList = h;
                        ++this.m_groupCount;
                        for (g = d; g < f; g++) this.m_groupBuffer[g] = h;
                        this.SetGroupFlags(h, e(b.groupFlags, 0));
                        c = new a.ConnectionFilter;
                        this.UpdateContacts(!0);
                        this.UpdatePairsAndTriads(d, f, c);
                        b.group && (this.JoinParticleGroups(b.group, h), h = b.group);
                        return h
                    };
                a.prototype.JoinParticleGroups = function(b, c) {
                    if (this.m_world.IsLocked()) throw Error();
                    this.RotateBuffer(c.m_firstIndex, c.m_lastIndex, this.m_count);
                    this.RotateBuffer(b.m_firstIndex, b.m_lastIndex, c.m_firstIndex);
                    var d = new a.JoinParticleGroupsFilter(c.m_firstIndex);
                    this.UpdateContacts(!0);
                    this.UpdatePairsAndTriads(b.m_firstIndex, c.m_lastIndex, d);
                    for (d = c.m_firstIndex; d < c.m_lastIndex; d++) this.m_groupBuffer[d] = b;
                    this.SetGroupFlags(b, b.m_groupFlags | c.m_groupFlags);
                    b.m_lastIndex = c.m_lastIndex;
                    c.m_firstIndex = c.m_lastIndex;
                    this.DestroyParticleGroup(c)
                };
                a.prototype.SplitParticleGroup = function(b) {
                    this.UpdateContacts(!0);
                    var c = b.GetParticleCount();
                    c = d(c, function(b) {
                        return new a.ParticleListNode
                    });
                    a.InitializeParticleLists(b, c);
                    this.MergeParticleListsInContact(b, c);
                    var e = a.FindLongestParticleList(b, c);
                    this.MergeZombieParticleListNodes(b, c, e);
                    this.CreateParticleGroupsFromParticleList(b, c, e);
                    this.UpdatePairsAndTriadsWithParticleList(b, c)
                };
                a.prototype.GetParticleGroupList = function() {
                    return this.m_groupList
                };
                a.prototype.GetParticleGroupCount = function() {
                    return this.m_groupCount
                };
                a.prototype.GetParticleCount = function() {
                    return this.m_count
                };
                a.prototype.GetMaxParticleCount = function() {
                    return this.m_def.maxCount
                };
                a.prototype.SetMaxParticleCount = function(a) {
                    this.m_def.maxCount = a
                };
                a.prototype.GetAllParticleFlags = function() {
                    return this.m_allParticleFlags
                };
                a.prototype.GetAllGroupFlags = function() {
                    return this.m_allGroupFlags
                };
                a.prototype.SetPaused = function(a) {
                    this.m_paused = a
                };
                a.prototype.GetPaused = function() {
                    return this.m_paused
                };
                a.prototype.SetDensity = function(a) {
                    this.m_def.density = a;
                    this.m_inverseDensity = 1 / this.m_def.density
                };
                a.prototype.GetDensity =
                    function() {
                        return this.m_def.density
                    };
                a.prototype.SetGravityScale = function(a) {
                    this.m_def.gravityScale = a
                };
                a.prototype.GetGravityScale = function() {
                    return this.m_def.gravityScale
                };
                a.prototype.SetDamping = function(a) {
                    this.m_def.dampingStrength = a
                };
                a.prototype.GetDamping = function() {
                    return this.m_def.dampingStrength
                };
                a.prototype.SetStaticPressureIterations = function(a) {
                    this.m_def.staticPressureIterations = a
                };
                a.prototype.GetStaticPressureIterations = function() {
                    return this.m_def.staticPressureIterations
                };
                a.prototype.SetRadius =
                    function(a) {
                        this.m_particleDiameter = 2 * a;
                        this.m_squaredDiameter = this.m_particleDiameter * this.m_particleDiameter;
                        this.m_inverseDiameter = 1 / this.m_particleDiameter
                    };
                a.prototype.GetRadius = function() {
                    return this.m_particleDiameter / 2
                };
                a.prototype.GetPositionBuffer = function() {
                    if (!this.m_positionBuffer.data) throw Error();
                    return this.m_positionBuffer.data
                };
                a.prototype.GetVelocityBuffer = function() {
                    if (!this.m_velocityBuffer.data) throw Error();
                    return this.m_velocityBuffer.data
                };
                a.prototype.GetColorBuffer = function() {
                    this.m_colorBuffer.data =
                        this.RequestBuffer(this.m_colorBuffer.data);
                    return this.m_colorBuffer.data
                };
                a.prototype.GetGroupBuffer = function() {
                    return this.m_groupBuffer
                };
                a.prototype.GetWeightBuffer = function() {
                    return this.m_weightBuffer
                };
                a.prototype.GetUserDataBuffer = function() {
                    this.m_userDataBuffer.data = this.RequestBuffer(this.m_userDataBuffer.data);
                    return this.m_userDataBuffer.data
                };
                a.prototype.GetFlagsBuffer = function() {
                    if (!this.m_flagsBuffer.data) throw Error();
                    return this.m_flagsBuffer.data
                };
                a.prototype.SetParticleFlags = function(a,
                    b) {
                    if (!this.m_flagsBuffer.data) throw Error();
                    this.m_flagsBuffer.data[a] & ~b && (this.m_needsUpdateAllParticleFlags = !0);
                    ~this.m_allParticleFlags & b && (b & h.b2ParticleFlag.b2_tensileParticle && (this.m_accumulation2Buffer = this.RequestBuffer(this.m_accumulation2Buffer)), b & h.b2ParticleFlag.b2_colorMixingParticle && (this.m_colorBuffer.data = this.RequestBuffer(this.m_colorBuffer.data)), this.m_allParticleFlags |= b);
                    this.m_flagsBuffer.data[a] = b
                };
                a.prototype.GetParticleFlags = function(a) {
                    if (!this.m_flagsBuffer.data) throw Error();
                    return this.m_flagsBuffer.data[a]
                };
                a.prototype.SetFlagsBuffer = function(a, b) {
                    this.SetUserOverridableBuffer(this.m_flagsBuffer, a, b)
                };
                a.prototype.SetPositionBuffer = function(a, b) {
                    this.SetUserOverridableBuffer(this.m_positionBuffer, a, b)
                };
                a.prototype.SetVelocityBuffer = function(a, b) {
                    this.SetUserOverridableBuffer(this.m_velocityBuffer, a, b)
                };
                a.prototype.SetColorBuffer = function(a, b) {
                    this.SetUserOverridableBuffer(this.m_colorBuffer, a, b)
                };
                a.prototype.SetUserDataBuffer = function(a, b) {
                    this.SetUserOverridableBuffer(this.m_userDataBuffer,
                        a, b)
                };
                a.prototype.GetContacts = function() {
                    return this.m_contactBuffer.data
                };
                a.prototype.GetContactCount = function() {
                    return this.m_contactBuffer.count
                };
                a.prototype.GetBodyContacts = function() {
                    return this.m_bodyContactBuffer.data
                };
                a.prototype.GetBodyContactCount = function() {
                    return this.m_bodyContactBuffer.count
                };
                a.prototype.GetPairs = function() {
                    return this.m_pairBuffer.data
                };
                a.prototype.GetPairCount = function() {
                    return this.m_pairBuffer.count
                };
                a.prototype.GetTriads = function() {
                    return this.m_triadBuffer.data
                };
                a.prototype.GetTriadCount = function() {
                    return this.m_triadBuffer.count
                };
                a.prototype.SetStuckThreshold = function(a) {
                    this.m_stuckThreshold = a;
                    0 < a && (this.m_lastBodyContactStepBuffer.data = this.RequestBuffer(this.m_lastBodyContactStepBuffer.data), this.m_bodyContactCountBuffer.data = this.RequestBuffer(this.m_bodyContactCountBuffer.data), this.m_consecutiveContactStepsBuffer.data = this.RequestBuffer(this.m_consecutiveContactStepsBuffer.data))
                };
                a.prototype.GetStuckCandidates = function() {
                    return this.m_stuckParticleBuffer.Data()
                };
                a.prototype.GetStuckCandidateCount = function() {
                    return this.m_stuckParticleBuffer.GetCount()
                };
                a.prototype.ComputeCollisionEnergy = function() {
                    if (!this.m_velocityBuffer.data) throw Error();
                    for (var b = a.ComputeCollisionEnergy_s_v, c = this.m_velocityBuffer.data, d = 0, e = 0; e < this.m_contactBuffer.count; e++) {
                        var f = this.m_contactBuffer.data[e],
                            g = f.normal;
                        f = r.SubVV(c[f.indexB], c[f.indexA], b);
                        g = r.DotVV(f, g);
                        0 > g && (d += g * g)
                    }
                    return .5 * this.GetParticleMass() * d
                };
                a.prototype.SetStrictContactCheck = function(a) {
                    this.m_def.strictContactCheck =
                        a
                };
                a.prototype.GetStrictContactCheck = function() {
                    return this.m_def.strictContactCheck
                };
                a.prototype.SetParticleLifetime = function(a, b) {
                    var c = null === this.m_indexByExpirationTimeBuffer.data;
                    this.m_expirationTimeBuffer.data = this.RequestBuffer(this.m_expirationTimeBuffer.data);
                    this.m_indexByExpirationTimeBuffer.data = this.RequestBuffer(this.m_indexByExpirationTimeBuffer.data);
                    if (c) {
                        c = this.GetParticleCount();
                        for (var d = 0; d < c; ++d) this.m_indexByExpirationTimeBuffer.data[d] = d
                    }
                    b /= this.m_def.lifetimeGranularity;
                    b = 0 < b ? this.GetQuantizedTimeElapsed() + b : b;
                    b !== this.m_expirationTimeBuffer.data[a] && (this.m_expirationTimeBuffer.data[a] = b, this.m_expirationTimeBufferRequiresSorting = !0)
                };
                a.prototype.GetParticleLifetime = function(a) {
                    return this.ExpirationTimeToLifetime(this.GetExpirationTimeBuffer()[a])
                };
                a.prototype.SetDestructionByAge = function(a) {
                    a && this.GetExpirationTimeBuffer();
                    this.m_def.destroyByAge = a
                };
                a.prototype.GetDestructionByAge = function() {
                    return this.m_def.destroyByAge
                };
                a.prototype.GetExpirationTimeBuffer =
                    function() {
                        this.m_expirationTimeBuffer.data = this.RequestBuffer(this.m_expirationTimeBuffer.data);
                        return this.m_expirationTimeBuffer.data
                    };
                a.prototype.ExpirationTimeToLifetime = function(a) {
                    return (0 < a ? a - this.GetQuantizedTimeElapsed() : a) * this.m_def.lifetimeGranularity
                };
                a.prototype.GetIndexByExpirationTimeBuffer = function() {
                    this.GetParticleCount() ? this.SetParticleLifetime(0, this.GetParticleLifetime(0)) : this.m_indexByExpirationTimeBuffer.data = this.RequestBuffer(this.m_indexByExpirationTimeBuffer.data);
                    if (!this.m_indexByExpirationTimeBuffer.data) throw Error();
                    return this.m_indexByExpirationTimeBuffer.data
                };
                a.prototype.ParticleApplyLinearImpulse = function(a, b) {
                    this.ApplyLinearImpulse(a, a + 1, b)
                };
                a.prototype.ApplyLinearImpulse = function(a, b, c) {
                    if (!this.m_velocityBuffer.data) throw Error();
                    var d = this.m_velocityBuffer.data,
                        e = (b - a) * this.GetParticleMass();
                    for (c = (new r).Copy(c).SelfMul(1 / e); a < b; a++) d[a].SelfAdd(c)
                };
                a.IsSignificantForce = function(a) {
                    return 0 !== a.x || 0 !== a.y
                };
                a.prototype.ParticleApplyForce = function(b, c) {
                    if (!this.m_flagsBuffer.data) throw Error();
                    a.IsSignificantForce(c) &&
                        this.ForceCanBeApplied(this.m_flagsBuffer.data[b]) && (this.PrepareForceBuffer(), this.m_forceBuffer[b].SelfAdd(c))
                };
                a.prototype.ApplyForce = function(b, c, d) {
                    d = (new r).Copy(d).SelfMul(1 / (c - b));
                    if (a.IsSignificantForce(d))
                        for (this.PrepareForceBuffer(); b < c; b++) this.m_forceBuffer[b].SelfAdd(d)
                };
                a.prototype.GetNext = function() {
                    return this.m_next
                };
                a.prototype.QueryAABB = function(b, c) {
                    if (0 !== this.m_proxyBuffer.count) {
                        var d = this.m_proxyBuffer.count,
                            e = M(this.m_proxyBuffer.data, 0, d, a.computeTag(this.m_inverseDiameter *
                                c.lowerBound.x, this.m_inverseDiameter * c.lowerBound.y), a.Proxy.CompareProxyTag);
                        d = S(this.m_proxyBuffer.data, e, d, a.computeTag(this.m_inverseDiameter * c.upperBound.x, this.m_inverseDiameter * c.upperBound.y), a.Proxy.CompareTagProxy);
                        if (!this.m_positionBuffer.data) throw Error();
                        for (var f = this.m_positionBuffer.data; e < d; ++e) {
                            var g = this.m_proxyBuffer.data[e].index,
                                h = f[g];
                            if (c.lowerBound.x < h.x && h.x < c.upperBound.x && c.lowerBound.y < h.y && h.y < c.upperBound.y && !b.ReportParticle(this, g)) break
                        }
                    }
                };
                a.prototype.QueryShapeAABB =
                    function(b, c, d, e) {
                        void 0 === e && (e = 0);
                        var f = a.QueryShapeAABB_s_aabb;
                        c.ComputeAABB(f, d, e);
                        this.QueryAABB(b, f)
                    };
                a.prototype.QueryPointAABB = function(b, c, d) {
                    void 0 === d && (d = .008);
                    var e = a.QueryPointAABB_s_aabb;
                    e.lowerBound.Set(c.x - d, c.y - d);
                    e.upperBound.Set(c.x + d, c.y + d);
                    this.QueryAABB(b, e)
                };
                a.prototype.RayCast = function(b, c, d) {
                    var e = a.RayCast_s_aabb,
                        f = a.RayCast_s_p,
                        g = a.RayCast_s_v,
                        h = a.RayCast_s_n,
                        k = a.RayCast_s_point;
                    if (0 !== this.m_proxyBuffer.count) {
                        if (!this.m_positionBuffer.data) throw Error();
                        var l = this.m_positionBuffer.data;
                        r.MinV(c, d, e.lowerBound);
                        r.MaxV(c, d, e.upperBound);
                        var m = 1;
                        d = r.SubVV(d, c, g);
                        g = r.DotVV(d, d);
                        e = this.GetInsideBoundsEnumerator(e);
                        for (var n; 0 <= (n = e.GetNext());) {
                            var p = r.SubVV(c, l[n], f),
                                q = r.DotVV(p, d),
                                H = r.DotVV(p, p);
                            H = q * q - g * (H - this.m_squaredDiameter);
                            if (0 <= H) {
                                var t = ea(H);
                                H = (-q - t) / g;
                                if (!(H > m)) {
                                    if (0 > H && (H = (-q + t) / g, 0 > H || H > m)) continue;
                                    p = r.AddVMulSV(p, H, d, h);
                                    p.Normalize();
                                    n = b.ReportParticle(this, n, r.AddVMulSV(c, H, d, k), p, H);
                                    m = W(m, n);
                                    if (0 >= m) break
                                }
                            }
                        }
                    }
                };
                a.prototype.ComputeAABB = function(a) {
                    var b = this.GetParticleCount();
                    a.lowerBound.x = 1E37;
                    a.lowerBound.y = 1E37;
                    a.upperBound.x = -1E37;
                    a.upperBound.y = -1E37;
                    if (!this.m_positionBuffer.data) throw Error();
                    for (var c = this.m_positionBuffer.data, d = 0; d < b; d++) {
                        var e = c[d];
                        r.MinV(a.lowerBound, e, a.lowerBound);
                        r.MaxV(a.upperBound, e, a.upperBound)
                    }
                    a.lowerBound.x -= this.m_particleDiameter;
                    a.lowerBound.y -= this.m_particleDiameter;
                    a.upperBound.x += this.m_particleDiameter;
                    a.upperBound.y += this.m_particleDiameter
                };
                a.prototype.FreeBuffer = function(a, b) {
                    null !== a && (a.length = 0)
                };
                a.prototype.FreeUserOverridableBuffer =
                    function(a) {
                        0 === a.userSuppliedCapacity && this.FreeBuffer(a.data, this.m_internalAllocatedCapacity)
                    };
                a.prototype.ReallocateBuffer3 = function(a, b, c) {
                    if (c <= b) throw Error();
                    a = a ? a.slice() : [];
                    a.length = c;
                    return a
                };
                a.prototype.ReallocateBuffer5 = function(a, b, c, d, e) {
                    if (d <= c) throw Error();
                    if (b && !(d <= b)) throw Error();
                    e && !a || b || (a = this.ReallocateBuffer3(a, c, d));
                    return a
                };
                a.prototype.ReallocateBuffer4 = function(a, b, c, d) {
                    return this.ReallocateBuffer5(a.data, a.userSuppliedCapacity, b, c, d)
                };
                a.prototype.RequestBuffer = function(a) {
                    a ||
                        (0 === this.m_internalAllocatedCapacity && this.ReallocateInternalAllocatedBuffers(256), a = [], a.length = this.m_internalAllocatedCapacity);
                    return a
                };
                a.prototype.ReallocateHandleBuffers = function(a) {
                    this.m_handleIndexBuffer.data = this.ReallocateBuffer4(this.m_handleIndexBuffer, this.m_internalAllocatedCapacity, a, !0)
                };
                a.prototype.ReallocateInternalAllocatedBuffers = function(a) {
                    function b(a, b) {
                        return b && a > b ? b : a
                    }
                    a = b(a, this.m_def.maxCount);
                    a = b(a, this.m_flagsBuffer.userSuppliedCapacity);
                    a = b(a, this.m_positionBuffer.userSuppliedCapacity);
                    a = b(a, this.m_velocityBuffer.userSuppliedCapacity);
                    a = b(a, this.m_colorBuffer.userSuppliedCapacity);
                    a = b(a, this.m_userDataBuffer.userSuppliedCapacity);
                    if (this.m_internalAllocatedCapacity < a) {
                        this.ReallocateHandleBuffers(a);
                        this.m_flagsBuffer.data = this.ReallocateBuffer4(this.m_flagsBuffer, this.m_internalAllocatedCapacity, a, !1);
                        var c = 0 < this.m_stuckThreshold;
                        this.m_lastBodyContactStepBuffer.data = this.ReallocateBuffer4(this.m_lastBodyContactStepBuffer, this.m_internalAllocatedCapacity, a, c);
                        this.m_bodyContactCountBuffer.data =
                            this.ReallocateBuffer4(this.m_bodyContactCountBuffer, this.m_internalAllocatedCapacity, a, c);
                        this.m_consecutiveContactStepsBuffer.data = this.ReallocateBuffer4(this.m_consecutiveContactStepsBuffer, this.m_internalAllocatedCapacity, a, c);
                        this.m_positionBuffer.data = this.ReallocateBuffer4(this.m_positionBuffer, this.m_internalAllocatedCapacity, a, !1);
                        this.m_velocityBuffer.data = this.ReallocateBuffer4(this.m_velocityBuffer, this.m_internalAllocatedCapacity, a, !1);
                        this.m_forceBuffer = this.ReallocateBuffer5(this.m_forceBuffer,
                            0, this.m_internalAllocatedCapacity, a, !1);
                        this.m_weightBuffer = this.ReallocateBuffer5(this.m_weightBuffer, 0, this.m_internalAllocatedCapacity, a, !1);
                        this.m_staticPressureBuffer = this.ReallocateBuffer5(this.m_staticPressureBuffer, 0, this.m_internalAllocatedCapacity, a, !0);
                        this.m_accumulationBuffer = this.ReallocateBuffer5(this.m_accumulationBuffer, 0, this.m_internalAllocatedCapacity, a, !1);
                        this.m_accumulation2Buffer = this.ReallocateBuffer5(this.m_accumulation2Buffer, 0, this.m_internalAllocatedCapacity, a, !0);
                        this.m_depthBuffer =
                            this.ReallocateBuffer5(this.m_depthBuffer, 0, this.m_internalAllocatedCapacity, a, !0);
                        this.m_colorBuffer.data = this.ReallocateBuffer4(this.m_colorBuffer, this.m_internalAllocatedCapacity, a, !0);
                        this.m_groupBuffer = this.ReallocateBuffer5(this.m_groupBuffer, 0, this.m_internalAllocatedCapacity, a, !1);
                        this.m_userDataBuffer.data = this.ReallocateBuffer4(this.m_userDataBuffer, this.m_internalAllocatedCapacity, a, !0);
                        this.m_expirationTimeBuffer.data = this.ReallocateBuffer4(this.m_expirationTimeBuffer, this.m_internalAllocatedCapacity,
                            a, !0);
                        this.m_indexByExpirationTimeBuffer.data = this.ReallocateBuffer4(this.m_indexByExpirationTimeBuffer, this.m_internalAllocatedCapacity, a, !1);
                        this.m_internalAllocatedCapacity = a
                    }
                };
                a.prototype.CreateParticleForGroup = function(a, b, c) {
                    var d = new Wb;
                    d.flags = e(a.flags, 0);
                    U.MulXV(b, c, d.position);
                    r.AddVV(e(a.linearVelocity, r.ZERO), r.CrossSV(e(a.angularVelocity, 0), r.SubVV(d.position, e(a.position, r.ZERO), r.s_t0), r.s_t0), d.velocity);
                    d.color.Copy(e(a.color, pa.ZERO));
                    d.lifetime = e(a.lifetime, 0);
                    d.userData = a.userData;
                    this.CreateParticle(d)
                };
                a.prototype.CreateParticlesStrokeShapeForGroup = function(b, c, d) {
                    var f = a.CreateParticlesStrokeShapeForGroup_s_edge,
                        g = a.CreateParticlesStrokeShapeForGroup_s_d,
                        k = a.CreateParticlesStrokeShapeForGroup_s_p,
                        l = e(c.stride, 0);
                    0 === l && (l = this.GetParticleStride());
                    for (var m = 0, n = b.GetChildCount(), p = 0; p < n; p++) {
                        if (b.GetType() === h.b2ShapeType.e_edgeShape) var q = b;
                        else q = f, b.GetChildEdge(q, p);
                        for (var H = r.SubVV(q.m_vertex2, q.m_vertex1, g), t = H.Length(); m < t;) {
                            var u = r.AddVMulSV(q.m_vertex1, m / t, H, k);
                            this.CreateParticleForGroup(c, d, u);
                            m += l
                        }
                        m -= t
                    }
                };
                a.prototype.CreateParticlesFillShapeForGroup = function(b, c, d) {
                    var f = a.CreateParticlesFillShapeForGroup_s_aabb,
                        g = a.CreateParticlesFillShapeForGroup_s_p,
                        h = e(c.stride, 0);
                    0 === h && (h = this.GetParticleStride());
                    var k = U.IDENTITY;
                    b.ComputeAABB(f, k, 0);
                    for (var l = Math.floor(f.lowerBound.y / h) * h; l < f.upperBound.y; l += h)
                        for (var m = Math.floor(f.lowerBound.x / h) * h; m < f.upperBound.x; m += h) {
                            var n = g.Set(m, l);
                            b.TestPoint(k, n) && this.CreateParticleForGroup(c, d, n)
                        }
                };
                a.prototype.CreateParticlesWithShapeForGroup =
                    function(a, b, c) {
                        switch (a.GetType()) {
                            case h.b2ShapeType.e_edgeShape:
                            case h.b2ShapeType.e_chainShape:
                                this.CreateParticlesStrokeShapeForGroup(a, b, c);
                                break;
                            case h.b2ShapeType.e_polygonShape:
                            case h.b2ShapeType.e_circleShape:
                                this.CreateParticlesFillShapeForGroup(a, b, c)
                        }
                    };
                a.prototype.CreateParticlesWithShapesForGroup = function(b, c, d, e) {
                    b = new a.CompositeShape(b, c);
                    this.CreateParticlesFillShapeForGroup(b, d, e)
                };
                a.prototype.CloneParticle = function(a, b) {
                    var c = new Wb;
                    if (!this.m_flagsBuffer.data) throw Error();
                    if (!this.m_positionBuffer.data) throw Error();
                    if (!this.m_velocityBuffer.data) throw Error();
                    c.flags = this.m_flagsBuffer.data[a];
                    c.position.Copy(this.m_positionBuffer.data[a]);
                    c.velocity.Copy(this.m_velocityBuffer.data[a]);
                    this.m_colorBuffer.data && c.color.Copy(this.m_colorBuffer.data[a]);
                    this.m_userDataBuffer.data && (c.userData = this.m_userDataBuffer.data[a]);
                    c.group = b;
                    b = this.CreateParticle(c);
                    this.m_handleIndexBuffer.data && ((c = this.m_handleIndexBuffer.data[a]) && c.SetIndex(b), this.m_handleIndexBuffer.data[b] = c, this.m_handleIndexBuffer.data[a] = null);
                    this.m_lastBodyContactStepBuffer.data && (this.m_lastBodyContactStepBuffer.data[b] = this.m_lastBodyContactStepBuffer.data[a]);
                    this.m_bodyContactCountBuffer.data && (this.m_bodyContactCountBuffer.data[b] = this.m_bodyContactCountBuffer.data[a]);
                    this.m_consecutiveContactStepsBuffer.data && (this.m_consecutiveContactStepsBuffer.data[b] = this.m_consecutiveContactStepsBuffer.data[a]);
                    this.m_hasForce && this.m_forceBuffer[b].Copy(this.m_forceBuffer[a]);
                    this.m_staticPressureBuffer && (this.m_staticPressureBuffer[b] = this.m_staticPressureBuffer[a]);
                    this.m_depthBuffer && (this.m_depthBuffer[b] = this.m_depthBuffer[a]);
                    this.m_expirationTimeBuffer.data && (this.m_expirationTimeBuffer.data[b] = this.m_expirationTimeBuffer.data[a]);
                    return b
                };
                a.prototype.DestroyParticlesInGroup = function(a, b) {
                    void 0 === b && (b = !1);
                    for (var c = a.m_firstIndex; c < a.m_lastIndex; c++) this.DestroyParticle(c, b)
                };
                a.prototype.DestroyParticleGroup = function(a) {
                    this.m_world.m_destructionListener && this.m_world.m_destructionListener.SayGoodbyeParticleGroup(a);
                    this.SetGroupFlags(a, 0);
                    for (var b =
                            a.m_firstIndex; b < a.m_lastIndex; b++) this.m_groupBuffer[b] = null;
                    a.m_prev && (a.m_prev.m_next = a.m_next);
                    a.m_next && (a.m_next.m_prev = a.m_prev);
                    a === this.m_groupList && (this.m_groupList = a.m_next);
                    --this.m_groupCount
                };
                a.ParticleCanBeConnected = function(a, b) {
                    return 0 !== (a & (h.b2ParticleFlag.b2_wallParticle | h.b2ParticleFlag.b2_springParticle | h.b2ParticleFlag.b2_elasticParticle)) || null !== b && 0 !== (b.GetGroupFlags() & h.b2ParticleGroupFlag.b2_rigidParticleGroup)
                };
                a.prototype.UpdatePairsAndTriads = function(b, c, d) {
                    var e =
                        a.UpdatePairsAndTriads_s_dab,
                        f = a.UpdatePairsAndTriads_s_dbc,
                        g = a.UpdatePairsAndTriads_s_dca;
                    if (!this.m_flagsBuffer.data) throw Error();
                    if (!this.m_positionBuffer.data) throw Error();
                    if (!this.m_velocityBuffer.data) throw Error();
                    for (var k = this.m_positionBuffer.data, l = 0, m = b; m < c; m++) l |= this.m_flagsBuffer.data[m];
                    if (l & a.k_pairFlags)
                        for (m = 0; m < this.m_contactBuffer.count; m++) {
                            var n = this.m_contactBuffer.data[m],
                                p = n.indexA,
                                q = n.indexB,
                                t = this.m_flagsBuffer.data[p],
                                H = this.m_flagsBuffer.data[q],
                                u = this.m_groupBuffer[p],
                                v = this.m_groupBuffer[q];
                            p >= b && p < c && q >= b && q < c && !((t | H) & h.b2ParticleFlag.b2_zombieParticle) && (t | H) & a.k_pairFlags && (d.IsNecessary(p) || d.IsNecessary(q)) && a.ParticleCanBeConnected(t, u) && a.ParticleCanBeConnected(H, v) && d.ShouldCreatePair(p, q) && (t = this.m_pairBuffer.data[this.m_pairBuffer.Append()], t.indexA = p, t.indexB = q, t.flags = n.flags, t.strength = W(u ? u.m_strength : 1, v ? v.m_strength : 1), t.distance = r.DistanceVV(k[p], k[q]));
                            L(this.m_pairBuffer.data, 0, this.m_pairBuffer.count, a.ComparePairIndices);
                            this.m_pairBuffer.Unique(a.MatchPairIndices)
                        }
                    if (l &
                        a.k_triadFlags) {
                        l = new Xb(c - b);
                        for (m = b; m < c; m++) b = this.m_flagsBuffer.data[m], n = this.m_groupBuffer[m], b & h.b2ParticleFlag.b2_zombieParticle || !a.ParticleCanBeConnected(b, n) || l.AddGenerator(k[m], m, d.IsNecessary(m));
                        c = this.GetParticleStride();
                        l.Generate(c / 2, 2 * c);
                        var J = this;
                        l.GetNodes(function(b, c, h) {
                            if (!J.m_flagsBuffer.data) throw Error();
                            var l = J.m_flagsBuffer.data[b],
                                m = J.m_flagsBuffer.data[c],
                                n = J.m_flagsBuffer.data[h];
                            if ((l | m | n) & a.k_triadFlags && d.ShouldCreateTriad(b, c, h)) {
                                var p = k[b],
                                    q = k[c],
                                    t = k[h],
                                    H = r.SubVV(p,
                                        q, e),
                                    u = r.SubVV(q, t, f),
                                    v = r.SubVV(t, p, g),
                                    w = 4 * J.m_squaredDiameter;
                                if (!(r.DotVV(H, H) > w || r.DotVV(u, u) > w || r.DotVV(v, v) > w)) {
                                    var x = J.m_groupBuffer[b],
                                        y = J.m_groupBuffer[c],
                                        z = J.m_groupBuffer[h];
                                    w = J.m_triadBuffer.data[J.m_triadBuffer.Append()];
                                    w.indexA = b;
                                    w.indexB = c;
                                    w.indexC = h;
                                    w.flags = l | m | n;
                                    w.strength = W(W(x ? x.m_strength : 1, y ? y.m_strength : 1), z ? z.m_strength : 1);
                                    b = (p.x + q.x + t.x) / 3;
                                    c = (p.y + q.y + t.y) / 3;
                                    w.pa.x = p.x - b;
                                    w.pa.y = p.y - c;
                                    w.pb.x = q.x - b;
                                    w.pb.y = q.y - c;
                                    w.pc.x = t.x - b;
                                    w.pc.y = t.y - c;
                                    w.ka = -r.DotVV(v, H);
                                    w.kb = -r.DotVV(H, u);
                                    w.kc = -r.DotVV(u, v);
                                    w.s = r.CrossVV(p, q) + r.CrossVV(q, t) + r.CrossVV(t, p)
                                }
                            }
                        });
                        L(this.m_triadBuffer.data, 0, this.m_triadBuffer.count, a.CompareTriadIndices);
                        this.m_triadBuffer.Unique(a.MatchTriadIndices)
                    }
                };
                a.prototype.UpdatePairsAndTriadsWithReactiveParticles = function() {
                    var b = new a.ReactiveFilter(this.m_flagsBuffer);
                    this.UpdatePairsAndTriads(0, this.m_count, b);
                    if (!this.m_flagsBuffer.data) throw Error();
                    for (b = 0; b < this.m_count; b++) this.m_flagsBuffer.data[b] &= ~h.b2ParticleFlag.b2_reactiveParticle;
                    this.m_allParticleFlags &=
                        ~h.b2ParticleFlag.b2_reactiveParticle
                };
                a.ComparePairIndices = function(a, b) {
                    var c = a.indexA - b.indexA;
                    return 0 !== c ? 0 > c : a.indexB < b.indexB
                };
                a.MatchPairIndices = function(a, b) {
                    return a.indexA === b.indexA && a.indexB === b.indexB
                };
                a.CompareTriadIndices = function(a, b) {
                    var c = a.indexA - b.indexA;
                    if (0 !== c) return 0 > c;
                    c = a.indexB - b.indexB;
                    return 0 !== c ? 0 > c : a.indexC < b.indexC
                };
                a.MatchTriadIndices = function(a, b) {
                    return a.indexA === b.indexA && a.indexB === b.indexB && a.indexC === b.indexC
                };
                a.InitializeParticleLists = function(a, b) {
                    var c =
                        a.GetBufferIndex();
                    a = a.GetParticleCount();
                    for (var d = 0; d < a; d++) {
                        var e = b[d];
                        e.list = e;
                        e.next = null;
                        e.count = 1;
                        e.index = d + c
                    }
                };
                a.prototype.MergeParticleListsInContact = function(b, c) {
                    for (var d = b.GetBufferIndex(), e = 0; e < this.m_contactBuffer.count; e++) {
                        var f = this.m_contactBuffer.data[e],
                            g = f.indexA;
                        f = f.indexB;
                        if (b.ContainsParticle(g) && b.ContainsParticle(f) && (g = c[g - d].list, f = c[f - d].list, g !== f)) {
                            if (g.count < f.count) {
                                var h = g;
                                g = f;
                                f = h
                            }
                            a.MergeParticleLists(g, f)
                        }
                    }
                };
                a.MergeParticleLists = function(a, b) {
                    for (var c = b;;) {
                        c.list =
                            a;
                        var d = c.next;
                        if (!d) {
                            c.next = a.next;
                            break
                        }
                        c = d
                    }
                    a.next = b;
                    a.count += b.count;
                    b.count = 0
                };
                a.FindLongestParticleList = function(a, b) {
                    a = a.GetParticleCount();
                    for (var c = b[0], d = 0; d < a; d++) {
                        var e = b[d];
                        c.count < e.count && (c = e)
                    }
                    return c
                };
                a.prototype.MergeZombieParticleListNodes = function(b, c, d) {
                    if (!this.m_flagsBuffer.data) throw Error();
                    b = b.GetParticleCount();
                    for (var e = 0; e < b; e++) {
                        var f = c[e];
                        f !== d && this.m_flagsBuffer.data[f.index] & h.b2ParticleFlag.b2_zombieParticle && a.MergeParticleListAndNode(d, f)
                    }
                };
                a.MergeParticleListAndNode =
                    function(a, b) {
                        b.list = a;
                        b.next = a.next;
                        a.next = b;
                        a.count++;
                        b.count = 0
                    };
                a.prototype.CreateParticleGroupsFromParticleList = function(a, b, c) {
                    if (!this.m_flagsBuffer.data) throw Error();
                    var d = a.GetParticleCount(),
                        e = new Fc;
                    e.groupFlags = a.GetGroupFlags();
                    e.userData = a.GetUserData();
                    for (a = 0; a < d; a++) {
                        var f = b[a];
                        if (f.count && f !== c)
                            for (var g = this.CreateParticleGroup(e); f; f = f.next) {
                                var k = f.index,
                                    l = this.CloneParticle(k, g);
                                this.m_flagsBuffer.data[k] |= h.b2ParticleFlag.b2_zombieParticle;
                                f.index = l
                            }
                    }
                };
                a.prototype.UpdatePairsAndTriadsWithParticleList =
                    function(a, b) {
                        for (var c, d, e = a.GetBufferIndex(), f = 0; f < this.m_pairBuffer.count; f++) {
                            var g = this.m_pairBuffer.data[f];
                            d = g.indexA;
                            c = g.indexB;
                            a.ContainsParticle(d) && (g.indexA = b[d - e].index);
                            a.ContainsParticle(c) && (g.indexB = b[c - e].index)
                        }
                        for (f = 0; f < this.m_triadBuffer.count; f++) {
                            g = this.m_triadBuffer.data[f];
                            d = g.indexA;
                            c = g.indexB;
                            var h = g.indexC;
                            a.ContainsParticle(d) && (g.indexA = b[d - e].index);
                            a.ContainsParticle(c) && (g.indexB = b[c - e].index);
                            a.ContainsParticle(h) && (g.indexC = b[h - e].index)
                        }
                    };
                a.prototype.ComputeDepth =
                    function() {
                        var a, b = [],
                            c = 0;
                        for (a = 0; a < this.m_contactBuffer.count; a++) {
                            var d = this.m_contactBuffer.data[a];
                            var e = d.indexA;
                            var f = d.indexB;
                            var g = this.m_groupBuffer[e],
                                k = this.m_groupBuffer[f];
                            g && g === k && g.m_groupFlags & h.b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth && (b[c++] = d)
                        }
                        g = [];
                        k = 0;
                        for (a = this.m_groupList; a; a = a.GetNext())
                            if (a.m_groupFlags & h.b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth)
                                for (g[k++] = a, this.SetGroupFlags(a, a.m_groupFlags & ~h.b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth),
                                    f = a.m_firstIndex; f < a.m_lastIndex; f++) this.m_accumulationBuffer[f] = 0;
                        for (a = 0; a < c; a++) {
                            d = b[a];
                            e = d.indexA;
                            f = d.indexB;
                            var l = d.weight;
                            this.m_accumulationBuffer[e] += l;
                            this.m_accumulationBuffer[f] += l
                        }
                        for (f = 0; f < k; f++)
                            for (a = g[f], e = a.m_firstIndex; e < a.m_lastIndex; e++) l = this.m_accumulationBuffer[e], this.m_depthBuffer[e] = .8 > l ? 0 : 1E37;
                        l = ea(this.m_count) >> 0;
                        for (var m = 0; m < l; m++) {
                            var n = !1;
                            for (a = 0; a < c; a++) {
                                d = b[a];
                                e = d.indexA;
                                f = d.indexB;
                                var p = 1 - d.weight;
                                d = this.m_depthBuffer[e];
                                var r = this.m_depthBuffer[f],
                                    q = r + p;
                                p = d + p;
                                d > q && (this.m_depthBuffer[e] = q, n = !0);
                                r > p && (this.m_depthBuffer[f] = p, n = !0)
                            }
                            if (!n) break
                        }
                        for (f = 0; f < k; f++)
                            for (a = g[f], b = a.m_firstIndex; b < a.m_lastIndex; b++) 1E37 > this.m_depthBuffer[b] ? this.m_depthBuffer[b] *= this.m_particleDiameter : this.m_depthBuffer[b] = 0
                    };
                a.prototype.GetInsideBoundsEnumerator = function(b) {
                    var c = a.computeTag(this.m_inverseDiameter * b.lowerBound.x - 1, this.m_inverseDiameter * b.lowerBound.y - 1);
                    b = a.computeTag(this.m_inverseDiameter * b.upperBound.x + 1, this.m_inverseDiameter * b.upperBound.y + 1);
                    var d = this.m_proxyBuffer.count,
                        e = M(this.m_proxyBuffer.data, 0, d, c, a.Proxy.CompareProxyTag);
                    d = S(this.m_proxyBuffer.data, 0, d, b, a.Proxy.CompareTagProxy);
                    return new a.InsideBoundsEnumerator(this, c, b, e, d)
                };
                a.prototype.UpdateAllParticleFlags = function() {
                    if (!this.m_flagsBuffer.data) throw Error();
                    for (var a = this.m_allParticleFlags = 0; a < this.m_count; a++) this.m_allParticleFlags |= this.m_flagsBuffer.data[a];
                    this.m_needsUpdateAllParticleFlags = !1
                };
                a.prototype.UpdateAllGroupFlags = function() {
                    this.m_allGroupFlags = 0;
                    for (var a = this.m_groupList; a; a = a.GetNext()) this.m_allGroupFlags |=
                        a.m_groupFlags;
                    this.m_needsUpdateAllGroupFlags = !1
                };
                a.prototype.AddContact = function(c, d, e) {
                    if (!this.m_flagsBuffer.data) throw Error();
                    if (!this.m_positionBuffer.data) throw Error();
                    e = this.m_positionBuffer.data;
                    e = r.SubVV(e[d], e[c], a.AddContact_s_d);
                    var f = r.DotVV(e, e);
                    if (f < this.m_squaredDiameter) {
                        var g = b(f);
                        isFinite(g) || (g = 1.9817753699999998E19);
                        var h = this.m_contactBuffer.data[this.m_contactBuffer.Append()];
                        h.indexA = c;
                        h.indexB = d;
                        h.flags = this.m_flagsBuffer.data[c] | this.m_flagsBuffer.data[d];
                        h.weight = 1 - f *
                            g * this.m_inverseDiameter;
                        r.MulSV(g, e, h.normal)
                    }
                };
                a.prototype.FindContacts_Reference = function(b) {
                    b = this.m_proxyBuffer.count;
                    for (var c = this.m_contactBuffer.count = 0, d = 0; c < b; c++) {
                        for (var e = a.computeRelativeTag(this.m_proxyBuffer.data[c].tag, 1, 0), f = c + 1; f < b && !(e < this.m_proxyBuffer.data[f].tag); f++) this.AddContact(this.m_proxyBuffer.data[c].index, this.m_proxyBuffer.data[f].index, this.m_contactBuffer);
                        for (f = a.computeRelativeTag(this.m_proxyBuffer.data[c].tag, -1, 1); d < b && !(f <= this.m_proxyBuffer.data[d].tag); d++);
                        e = a.computeRelativeTag(this.m_proxyBuffer.data[c].tag, 1, 1);
                        for (f = d; f < b && !(e < this.m_proxyBuffer.data[f].tag); f++) this.AddContact(this.m_proxyBuffer.data[c].index, this.m_proxyBuffer.data[f].index, this.m_contactBuffer)
                    }
                };
                a.prototype.FindContacts = function(a) {
                    this.FindContacts_Reference(a)
                };
                a.prototype.UpdateProxies_Reference = function(b) {
                    if (!this.m_positionBuffer.data) throw Error();
                    b = this.m_positionBuffer.data;
                    for (var c = this.m_inverseDiameter, d = 0; d < this.m_proxyBuffer.count; ++d) {
                        var e = this.m_proxyBuffer.data[d],
                            f = b[e.index];
                        e.tag = a.computeTag(c * f.x, c * f.y)
                    }
                };
                a.prototype.UpdateProxies = function(a) {
                    this.UpdateProxies_Reference(a)
                };
                a.prototype.SortProxies = function(b) {
                    K(this.m_proxyBuffer.data, 0, this.m_proxyBuffer.count, a.Proxy.CompareProxyProxy)
                };
                a.prototype.FilterContacts = function(a) {
                    var b = this.GetParticleContactFilter();
                    if (null !== b) {
                        var c = this;
                        this.m_contactBuffer.RemoveIf(function(a) {
                            return 0 !== (a.flags & h.b2ParticleFlag.b2_particleContactFilterParticle) && !b.ShouldCollideParticleParticle(c, a.indexA, a.indexB)
                        })
                    }
                };
                a.prototype.NotifyContactListenerPreContact = function(a) {
                    if (null !== this.GetParticleContactListener()) throw a.Initialize(this.m_contactBuffer, this.m_flagsBuffer), Error();
                };
                a.prototype.NotifyContactListenerPostContact = function(a) {
                    a = this.GetParticleContactListener();
                    if (null !== a) {
                        for (var b = 0; b < this.m_contactBuffer.count; ++b) a.BeginContactParticleParticle(this, this.m_contactBuffer.data[b]);
                        throw Error();
                    }
                };
                a.b2ParticleContactIsZombie = function(a) {
                    return (a.flags & h.b2ParticleFlag.b2_zombieParticle) === h.b2ParticleFlag.b2_zombieParticle
                };
                a.prototype.UpdateContacts = function(b) {
                    this.UpdateProxies(this.m_proxyBuffer);
                    this.SortProxies(this.m_proxyBuffer);
                    var c = new a.b2ParticlePairSet;
                    this.NotifyContactListenerPreContact(c);
                    this.FindContacts(this.m_contactBuffer);
                    this.FilterContacts(this.m_contactBuffer);
                    this.NotifyContactListenerPostContact(c);
                    b && this.m_contactBuffer.RemoveIf(a.b2ParticleContactIsZombie)
                };
                a.prototype.NotifyBodyContactListenerPreContact = function(a) {
                    if (null !== this.GetFixtureContactListener()) throw a.Initialize(this.m_bodyContactBuffer,
                        this.m_flagsBuffer), Error();
                };
                a.prototype.NotifyBodyContactListenerPostContact = function(a) {
                    a = this.GetFixtureContactListener();
                    if (null !== a) {
                        for (var b = 0; b < this.m_bodyContactBuffer.count; b++) a.BeginContactFixtureParticle(this, this.m_bodyContactBuffer.data[b]);
                        throw Error();
                    }
                };
                a.prototype.UpdateBodyContacts = function() {
                    var b = a.UpdateBodyContacts_s_aabb,
                        c = new a.FixtureParticleSet;
                    this.NotifyBodyContactListenerPreContact(c);
                    if (0 < this.m_stuckThreshold) {
                        if (!this.m_bodyContactCountBuffer.data) throw Error();
                        if (!this.m_lastBodyContactStepBuffer.data) throw Error();
                        if (!this.m_consecutiveContactStepsBuffer.data) throw Error();
                        for (var d = this.GetParticleCount(), e = 0; e < d; e++) this.m_bodyContactCountBuffer.data[e] = 0, this.m_timestamp > this.m_lastBodyContactStepBuffer.data[e] + 1 && (this.m_consecutiveContactStepsBuffer.data[e] = 0)
                    }
                    this.m_bodyContactBuffer.SetCount(0);
                    this.m_stuckParticleBuffer.SetCount(0);
                    this.ComputeAABB(b);
                    d = new a.UpdateBodyContactsCallback(this, this.GetFixtureContactFilter());
                    this.m_world.QueryAABB(d,
                        b);
                    this.m_def.strictContactCheck && this.RemoveSpuriousBodyContacts();
                    this.NotifyBodyContactListenerPostContact(c)
                };
                a.prototype.Solve = function(b) {
                    var c = a.Solve_s_subStep;
                    if (0 !== this.m_count && (this.m_expirationTimeBuffer.data && this.SolveLifetimes(b), this.m_allParticleFlags & h.b2ParticleFlag.b2_zombieParticle && this.SolveZombie(), this.m_needsUpdateAllParticleFlags && this.UpdateAllParticleFlags(), this.m_needsUpdateAllGroupFlags && this.UpdateAllGroupFlags(), !this.m_paused))
                        for (this.m_iterationIndex = 0; this.m_iterationIndex <
                            b.particleIterations; this.m_iterationIndex++) {
                            ++this.m_timestamp;
                            var d = c.Copy(b);
                            d.dt /= b.particleIterations;
                            d.inv_dt *= b.particleIterations;
                            this.UpdateContacts(!1);
                            this.UpdateBodyContacts();
                            this.ComputeWeight();
                            this.m_allGroupFlags & h.b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth && this.ComputeDepth();
                            this.m_allParticleFlags & h.b2ParticleFlag.b2_reactiveParticle && this.UpdatePairsAndTriadsWithReactiveParticles();
                            this.m_hasForce && this.SolveForce(d);
                            this.m_allParticleFlags & h.b2ParticleFlag.b2_viscousParticle &&
                                this.SolveViscous();
                            this.m_allParticleFlags & h.b2ParticleFlag.b2_repulsiveParticle && this.SolveRepulsive(d);
                            this.m_allParticleFlags & h.b2ParticleFlag.b2_powderParticle && this.SolvePowder(d);
                            this.m_allParticleFlags & h.b2ParticleFlag.b2_tensileParticle && this.SolveTensile(d);
                            this.m_allGroupFlags & h.b2ParticleGroupFlag.b2_solidParticleGroup && this.SolveSolid(d);
                            this.m_allParticleFlags & h.b2ParticleFlag.b2_colorMixingParticle && this.SolveColorMixing();
                            this.SolveGravity(d);
                            this.m_allParticleFlags & h.b2ParticleFlag.b2_staticPressureParticle &&
                                this.SolveStaticPressure(d);
                            this.SolvePressure(d);
                            this.SolveDamping(d);
                            this.m_allParticleFlags & a.k_extraDampingFlags && this.SolveExtraDamping();
                            this.m_allParticleFlags & h.b2ParticleFlag.b2_elasticParticle && this.SolveElastic(d);
                            this.m_allParticleFlags & h.b2ParticleFlag.b2_springParticle && this.SolveSpring(d);
                            this.LimitVelocity(d);
                            this.m_allGroupFlags & h.b2ParticleGroupFlag.b2_rigidParticleGroup && this.SolveRigidDamping();
                            this.m_allParticleFlags & h.b2ParticleFlag.b2_barrierParticle && this.SolveBarrier(d);
                            this.SolveCollision(d);
                            this.m_allGroupFlags & h.b2ParticleGroupFlag.b2_rigidParticleGroup && this.SolveRigid(d);
                            this.m_allParticleFlags & h.b2ParticleFlag.b2_wallParticle && this.SolveWall();
                            if (!this.m_positionBuffer.data) throw Error();
                            if (!this.m_velocityBuffer.data) throw Error();
                            for (var e = 0; e < this.m_count; e++) this.m_positionBuffer.data[e].SelfMulAdd(d.dt, this.m_velocityBuffer.data[e])
                        }
                };
                a.prototype.SolveCollision = function(b) {
                    var c = a.SolveCollision_s_aabb;
                    if (!this.m_positionBuffer.data) throw Error();
                    if (!this.m_velocityBuffer.data) throw Error();
                    var d = this.m_positionBuffer.data,
                        e = this.m_velocityBuffer.data;
                    c.lowerBound.x = 1E37;
                    c.lowerBound.y = 1E37;
                    c.upperBound.x = -1E37;
                    c.upperBound.y = -1E37;
                    for (var f = 0; f < this.m_count; f++) {
                        var g = e[f],
                            h = d[f],
                            k = h.x + b.dt * g.x;
                        g = h.y + b.dt * g.y;
                        c.lowerBound.x = W(c.lowerBound.x, W(h.x, k));
                        c.lowerBound.y = W(c.lowerBound.y, W(h.y, g));
                        c.upperBound.x = X(c.upperBound.x, X(h.x, k));
                        c.upperBound.y = X(c.upperBound.y, X(h.y, g))
                    }
                    b = new a.SolveCollisionCallback(this, b);
                    this.m_world.QueryAABB(b, c)
                };
                a.prototype.LimitVelocity = function(a) {
                    if (!this.m_velocityBuffer.data) throw Error();
                    var b = this.m_velocityBuffer.data;
                    a = this.GetCriticalVelocitySquared(a);
                    for (var c = 0; c < this.m_count; c++) {
                        var d = b[c],
                            e = r.DotVV(d, d);
                        e > a && d.SelfMul(ea(a / e))
                    }
                };
                a.prototype.SolveGravity = function(b) {
                    if (!this.m_velocityBuffer.data) throw Error();
                    var c = a.SolveGravity_s_gravity,
                        d = this.m_velocityBuffer.data;
                    b = r.MulSV(b.dt * this.m_def.gravityScale, this.m_world.GetGravity(), c);
                    for (c = 0; c < this.m_count; c++) d[c].SelfAdd(b)
                };
                a.prototype.SolveBarrier = function(b) {
                    var c = a.SolveBarrier_s_aabb,
                        d = a.SolveBarrier_s_va,
                        e = a.SolveBarrier_s_vb,
                        f = a.SolveBarrier_s_pba,
                        g = a.SolveBarrier_s_vba,
                        k = a.SolveBarrier_s_vc,
                        l = a.SolveBarrier_s_pca,
                        m = a.SolveBarrier_s_vca,
                        n = a.SolveBarrier_s_qba,
                        p = a.SolveBarrier_s_qca,
                        q = a.SolveBarrier_s_dv,
                        t = a.SolveBarrier_s_f;
                    if (!this.m_flagsBuffer.data) throw Error();
                    if (!this.m_positionBuffer.data) throw Error();
                    if (!this.m_velocityBuffer.data) throw Error();
                    for (var u = this.m_positionBuffer.data, v = this.m_velocityBuffer.data, H = 0; H < this.m_count; H++) 0 !== (this.m_flagsBuffer.data[H] & a.k_barrierWallFlags) && v[H].SetZero();
                    H = 2.5 * b.dt;
                    for (var w = this.GetParticleMass(), x = 0; x < this.m_pairBuffer.count; x++) {
                        var y = this.m_pairBuffer.data[x];
                        if (y.flags & h.b2ParticleFlag.b2_barrierParticle) {
                            var z = y.indexA,
                                A = y.indexB;
                            y = u[z];
                            var B = u[A],
                                C = c;
                            r.MinV(y, B, C.lowerBound);
                            r.MaxV(y, B, C.upperBound);
                            var D = this.m_groupBuffer[z],
                                E = this.m_groupBuffer[A];
                            z = this.GetLinearVelocity(D, z, y, d);
                            A = this.GetLinearVelocity(E, A, B, e);
                            B = r.SubVV(B, y, f);
                            A = r.SubVV(A, z, g);
                            C = this.GetInsideBoundsEnumerator(C);
                            for (var F; 0 <= (F = C.GetNext());) {
                                var G = u[F],
                                    aa = this.m_groupBuffer[F];
                                if (D !== aa && E !== aa) {
                                    var I = this.GetLinearVelocity(aa, F, G, k),
                                        K = r.SubVV(G, y, l),
                                        M = r.SubVV(I, z, m),
                                        O = r.CrossVV(A, M),
                                        L = r.CrossVV(B, M) - r.CrossVV(K, A),
                                        N = r.CrossVV(B, K),
                                        P = n,
                                        Q = p;
                                    if (0 === O) {
                                        if (0 === L) continue;
                                        N = -N / L;
                                        if (!(0 <= N && N < H)) continue;
                                        r.AddVMulSV(B, N, A, P);
                                        r.AddVMulSV(K, N, M, Q);
                                        L = r.DotVV(P, Q) / r.DotVV(P, P);
                                        if (!(0 <= L && 1 >= L)) continue
                                    } else {
                                        N = L * L - 4 * N * O;
                                        if (0 > N) continue;
                                        var R = ea(N);
                                        N = (-L - R) / (2 * O);
                                        O = (-L + R) / (2 * O);
                                        N > O && (L = N, N = O, O = L);
                                        r.AddVMulSV(B, N, A, P);
                                        r.AddVMulSV(K, N, M, Q);
                                        L = r.DotVV(P, Q) / r.DotVV(P, P);
                                        if (!(0 <= N && N < H &&
                                                0 <= L && 1 >= L)) {
                                            N = O;
                                            if (!(0 <= N && N < H)) continue;
                                            r.AddVMulSV(B, N, A, P);
                                            r.AddVMulSV(K, N, M, Q);
                                            L = r.DotVV(P, Q) / r.DotVV(P, P);
                                            if (!(0 <= L && 1 >= L)) continue
                                        }
                                    }
                                    K = q;
                                    K.x = z.x + L * A.x - I.x;
                                    K.y = z.y + L * A.y - I.y;
                                    I = r.MulSV(w, K, t);
                                    aa && this.IsRigidGroup(aa) ? (K = aa.GetMass(), M = aa.GetInertia(), 0 < K && aa.m_linearVelocity.SelfMulAdd(1 / K, I), 0 < M && (aa.m_angularVelocity += r.CrossVV(r.SubVV(G, aa.GetCenter(), r.s_t0), I) / M)) : v[F].SelfAdd(K);
                                    this.ParticleApplyForce(F, I.SelfMul(-b.inv_dt))
                                }
                            }
                        }
                    }
                };
                a.prototype.SolveStaticPressure = function(a) {
                    if (!this.m_flagsBuffer.data) throw Error();
                    this.m_staticPressureBuffer = this.RequestBuffer(this.m_staticPressureBuffer);
                    var b = this.GetCriticalPressure(a);
                    a = this.m_def.staticPressureStrength * b;
                    b *= .25;
                    for (var d = this.m_def.staticPressureRelaxation, e = 0; e < this.m_def.staticPressureIterations; e++) {
                        for (var f = 0; f < this.m_count; f++) this.m_accumulationBuffer[f] = 0;
                        for (f = 0; f < this.m_contactBuffer.count; f++) {
                            var g = this.m_contactBuffer.data[f];
                            if (g.flags & h.b2ParticleFlag.b2_staticPressureParticle) {
                                var k = g.indexA,
                                    l = g.indexB;
                                g = g.weight;
                                this.m_accumulationBuffer[k] +=
                                    g * this.m_staticPressureBuffer[l];
                                this.m_accumulationBuffer[l] += g * this.m_staticPressureBuffer[k]
                            }
                        }
                        for (f = 0; f < this.m_count; f++) g = this.m_weightBuffer[f], this.m_staticPressureBuffer[f] = this.m_flagsBuffer.data[f] & h.b2ParticleFlag.b2_staticPressureParticle ? c((this.m_accumulationBuffer[f] + a * (g - 1)) / (g + d), 0, b) : 0
                    }
                };
                a.prototype.ComputeWeight = function() {
                    for (var a, b, c = 0; c < this.m_count; c++) this.m_weightBuffer[c] = 0;
                    for (c = 0; c < this.m_bodyContactBuffer.count; c++) a = this.m_bodyContactBuffer.data[c], b = a.index, a = a.weight,
                        this.m_weightBuffer[b] += a;
                    for (c = 0; c < this.m_contactBuffer.count; c++) {
                        a = this.m_contactBuffer.data[c];
                        b = a.indexA;
                        var d = a.indexB;
                        a = a.weight;
                        this.m_weightBuffer[b] += a;
                        this.m_weightBuffer[d] += a
                    }
                };
                a.prototype.SolvePressure = function(b) {
                    var c = a.SolvePressure_s_f;
                    if (!this.m_flagsBuffer.data) throw Error();
                    if (!this.m_positionBuffer.data) throw Error();
                    if (!this.m_velocityBuffer.data) throw Error();
                    var d = this.m_positionBuffer.data,
                        e = this.m_velocityBuffer.data;
                    var f = this.GetCriticalPressure(b);
                    var g = this.m_def.pressureStrength *
                        f;
                    var k = .25 * f;
                    for (var l = 0; l < this.m_count; l++) {
                        f = this.m_weightBuffer[l];
                        var m = g * X(0, f - 1);
                        this.m_accumulationBuffer[l] = W(m, k)
                    }
                    if (this.m_allParticleFlags & a.k_noPressureFlags)
                        for (l = 0; l < this.m_count; l++) this.m_flagsBuffer.data[l] & a.k_noPressureFlags && (this.m_accumulationBuffer[l] = 0);
                    if (this.m_allParticleFlags & h.b2ParticleFlag.b2_staticPressureParticle)
                        for (l = 0; l < this.m_count; l++) this.m_flagsBuffer.data[l] & h.b2ParticleFlag.b2_staticPressureParticle && (this.m_accumulationBuffer[l] += this.m_staticPressureBuffer[l]);
                    l = b.dt / (this.m_def.density * this.m_particleDiameter);
                    for (var n = this.GetParticleInvMass(), p = 0; p < this.m_bodyContactBuffer.count; p++) {
                        m = this.m_bodyContactBuffer.data[p];
                        k = m.index;
                        b = m.body;
                        f = m.weight;
                        var q = m.mass;
                        var t = m.normal;
                        var u = d[k];
                        m = this.m_accumulationBuffer[k] + g * f;
                        f = r.MulSV(l * f * q * m, t, c);
                        e[k].SelfMulSub(n, f);
                        b.ApplyLinearImpulse(f, u, !0)
                    }
                    for (p = 0; p < this.m_contactBuffer.count; p++) m = this.m_contactBuffer.data[p], k = m.indexA, b = m.indexB, f = m.weight, t = m.normal, m = this.m_accumulationBuffer[k] + this.m_accumulationBuffer[b],
                        f = r.MulSV(l * f * m, t, c), e[k].SelfSub(f), e[b].SelfAdd(f)
                };
                a.prototype.SolveDamping = function(b) {
                    var c = a.SolveDamping_s_v,
                        d = a.SolveDamping_s_f;
                    if (!this.m_positionBuffer.data) throw Error();
                    if (!this.m_velocityBuffer.data) throw Error();
                    for (var e = this.m_positionBuffer.data, f = this.m_velocityBuffer.data, g = this.m_def.dampingStrength, h = 1 / this.GetCriticalVelocity(b), k = this.GetParticleInvMass(), l = 0; l < this.m_bodyContactBuffer.count; l++) {
                        var m = this.m_bodyContactBuffer.data[l];
                        var n = m.index;
                        b = m.body;
                        var p = m.weight;
                        var q = m.mass;
                        var t = m.normal;
                        m = e[n];
                        var u = r.SubVV(b.GetLinearVelocityFromWorldPoint(m, r.s_t0), f[n], c);
                        u = r.DotVV(u, t);
                        0 > u && (p = X(g * p, W(-h * u, .5)), q = r.MulSV(p * q * u, t, d), f[n].SelfMulAdd(k, q), b.ApplyLinearImpulse(q.SelfNeg(), m, !0))
                    }
                    for (l = 0; l < this.m_contactBuffer.count; l++) m = this.m_contactBuffer.data[l], n = m.indexA, b = m.indexB, p = m.weight, t = m.normal, u = r.SubVV(f[b], f[n], c), u = r.DotVV(u, t), 0 > u && (p = X(g * p, W(-h * u, .5)), q = r.MulSV(p * u, t, d), f[n].SelfAdd(q), f[b].SelfSub(q))
                };
                a.prototype.SolveRigidDamping = function() {
                    var b,
                        c = a.SolveRigidDamping_s_t0,
                        d = a.SolveRigidDamping_s_t1,
                        e = a.SolveRigidDamping_s_p,
                        f = a.SolveRigidDamping_s_v,
                        g = [0],
                        h = [0],
                        k = [0],
                        l = [0],
                        m = [0],
                        n = [0];
                    if (!this.m_positionBuffer.data) throw Error();
                    for (var p = this.m_positionBuffer.data, q = this.m_def.dampingStrength, t = 0; t < this.m_bodyContactBuffer.count; t++) {
                        var u = this.m_bodyContactBuffer.data[t];
                        var v = u.index;
                        if ((b = this.m_groupBuffer[v]) && this.IsRigidGroup(b)) {
                            var w = u.body;
                            var x = u.normal;
                            var y = u.weight;
                            u = p[v];
                            var z = r.SubVV(w.GetLinearVelocityFromWorldPoint(u, c),
                                b.GetLinearVelocityFromWorldPoint(u, d), f);
                            z = r.DotVV(z, x);
                            0 > z && (this.InitDampingParameterWithRigidGroupOrParticle(g, h, k, !0, b, v, u, x), this.InitDampingParameter(l, m, n, w.GetMass(), w.GetInertia() - w.GetMass() * w.GetLocalCenter().LengthSquared(), w.GetWorldCenter(), u, x), y = q * W(y, 1) * this.ComputeDampingImpulse(g[0], h[0], k[0], l[0], m[0], n[0], z), this.ApplyDamping(g[0], h[0], k[0], !0, b, v, y, x), w.ApplyLinearImpulse(r.MulSV(-y, x, r.s_t0), u, !0))
                        }
                    }
                    for (t = 0; t < this.m_contactBuffer.count; t++) {
                        u = this.m_contactBuffer.data[t];
                        v =
                            u.indexA;
                        w = u.indexB;
                        x = u.normal;
                        y = u.weight;
                        b = this.m_groupBuffer[v];
                        var A = this.m_groupBuffer[w],
                            B = this.IsRigidGroup(b),
                            C = this.IsRigidGroup(A);
                        b !== A && (B || C) && (u = r.MidVV(p[v], p[w], e), z = r.SubVV(this.GetLinearVelocity(A, w, u, c), this.GetLinearVelocity(b, v, u, d), f), z = r.DotVV(z, x), 0 > z && (this.InitDampingParameterWithRigidGroupOrParticle(g, h, k, B, b, v, u, x), this.InitDampingParameterWithRigidGroupOrParticle(l, m, n, C, A, w, u, x), y = q * y * this.ComputeDampingImpulse(g[0], h[0], k[0], l[0], m[0], n[0], z), this.ApplyDamping(g[0], h[0],
                            k[0], B, b, v, y, x), this.ApplyDamping(l[0], m[0], n[0], C, A, w, -y, x)))
                    }
                };
                a.prototype.SolveExtraDamping = function() {
                    var b = a.SolveExtraDamping_s_v,
                        c = a.SolveExtraDamping_s_f;
                    if (!this.m_flagsBuffer.data) throw Error();
                    if (!this.m_positionBuffer.data) throw Error();
                    if (!this.m_velocityBuffer.data) throw Error();
                    for (var d = this.m_velocityBuffer.data, e = this.m_positionBuffer.data, f = this.GetParticleInvMass(), g = 0; g < this.m_bodyContactBuffer.count; g++) {
                        var h = this.m_bodyContactBuffer.data[g],
                            k = h.index;
                        if (this.m_flagsBuffer.data[k] &
                            a.k_extraDampingFlags) {
                            var l = h.body,
                                m = h.mass,
                                n = h.normal;
                            h = e[k];
                            var p = r.SubVV(l.GetLinearVelocityFromWorldPoint(h, r.s_t0), d[k], b);
                            p = r.DotVV(p, n);
                            0 > p && (m = r.MulSV(.5 * m * p, n, c), d[k].SelfMulAdd(f, m), l.ApplyLinearImpulse(m.SelfNeg(), h, !0))
                        }
                    }
                };
                a.prototype.SolveWall = function() {
                    if (!this.m_flagsBuffer.data) throw Error();
                    if (!this.m_velocityBuffer.data) throw Error();
                    for (var a = this.m_velocityBuffer.data, b = 0; b < this.m_count; b++) this.m_flagsBuffer.data[b] & h.b2ParticleFlag.b2_wallParticle && a[b].SetZero()
                };
                a.prototype.SolveRigid =
                    function(b) {
                        var c = a.SolveRigid_s_position,
                            d = a.SolveRigid_s_rotation,
                            e = a.SolveRigid_s_transform,
                            f = a.SolveRigid_s_velocityTransform;
                        if (!this.m_positionBuffer.data) throw Error();
                        if (!this.m_velocityBuffer.data) throw Error();
                        for (var g = this.m_positionBuffer.data, k = this.m_velocityBuffer.data, l = this.m_groupList; l; l = l.GetNext())
                            if (l.m_groupFlags & h.b2ParticleGroupFlag.b2_rigidParticleGroup) {
                                l.UpdateStatistics();
                                var m = d;
                                m.SetAngle(b.dt * l.m_angularVelocity);
                                var n = r.AddVV(l.m_center, r.SubVV(r.MulSV(b.dt, l.m_linearVelocity,
                                        r.s_t0), P.MulRV(m, l.m_center, r.s_t1), r.s_t0), c),
                                    p = e;
                                p.SetPositionRotation(n, m);
                                U.MulXX(p, l.m_transform, l.m_transform);
                                m = f;
                                m.p.x = b.inv_dt * p.p.x;
                                m.p.y = b.inv_dt * p.p.y;
                                m.q.s = b.inv_dt * p.q.s;
                                m.q.c = b.inv_dt * (p.q.c - 1);
                                for (p = l.m_firstIndex; p < l.m_lastIndex; p++) U.MulXV(m, g[p], k[p])
                            }
                    };
                a.prototype.SolveElastic = function(c) {
                    var d = a.SolveElastic_s_pa,
                        e = a.SolveElastic_s_pb,
                        f = a.SolveElastic_s_pc,
                        g = a.SolveElastic_s_r,
                        k = a.SolveElastic_s_t0;
                    if (!this.m_positionBuffer.data) throw Error();
                    if (!this.m_velocityBuffer.data) throw Error();
                    for (var l = this.m_positionBuffer.data, m = this.m_velocityBuffer.data, n = c.inv_dt * this.m_def.elasticStrength, p = 0; p < this.m_triadBuffer.count; p++) {
                        var q = this.m_triadBuffer.data[p];
                        if (q.flags & h.b2ParticleFlag.b2_elasticParticle) {
                            var t = q.indexA,
                                u = q.indexB,
                                v = q.indexC,
                                H = q.pa,
                                w = q.pb,
                                x = q.pc,
                                y = d.Copy(l[t]),
                                z = e.Copy(l[u]),
                                A = f.Copy(l[v]);
                            t = m[t];
                            u = m[u];
                            v = m[v];
                            y.SelfMulAdd(c.dt, t);
                            z.SelfMulAdd(c.dt, u);
                            A.SelfMulAdd(c.dt, v);
                            var B = (y.x + z.x + A.x) / 3,
                                C = (y.y + z.y + A.y) / 3;
                            y.x -= B;
                            y.y -= C;
                            z.x -= B;
                            z.y -= C;
                            A.x -= B;
                            A.y -= C;
                            B = g;
                            B.s = r.CrossVV(H,
                                y) + r.CrossVV(w, z) + r.CrossVV(x, A);
                            B.c = r.DotVV(H, y) + r.DotVV(w, z) + r.DotVV(x, A);
                            C = b(B.s * B.s + B.c * B.c);
                            isFinite(C) || (C = 1.9817753699999998E19);
                            B.s *= C;
                            B.c *= C;
                            q = n * q.strength;
                            P.MulRV(B, H, k);
                            r.SubVV(k, y, k);
                            r.MulSV(q, k, k);
                            t.SelfAdd(k);
                            P.MulRV(B, w, k);
                            r.SubVV(k, z, k);
                            r.MulSV(q, k, k);
                            u.SelfAdd(k);
                            P.MulRV(B, x, k);
                            r.SubVV(k, A, k);
                            r.MulSV(q, k, k);
                            v.SelfAdd(k)
                        }
                    }
                };
                a.prototype.SolveSpring = function(b) {
                    var c = a.SolveSpring_s_pa,
                        d = a.SolveSpring_s_pb,
                        e = a.SolveSpring_s_d,
                        f = a.SolveSpring_s_f;
                    if (!this.m_positionBuffer.data) throw Error();
                    if (!this.m_velocityBuffer.data) throw Error();
                    for (var g = this.m_positionBuffer.data, k = this.m_velocityBuffer.data, l = b.inv_dt * this.m_def.springStrength, m = 0; m < this.m_pairBuffer.count; m++) {
                        var n = this.m_pairBuffer.data[m];
                        if (n.flags & h.b2ParticleFlag.b2_springParticle) {
                            var p = n.indexA,
                                q = n.indexB,
                                t = c.Copy(g[p]),
                                u = d.Copy(g[q]);
                            p = k[p];
                            q = k[q];
                            t.SelfMulAdd(b.dt, p);
                            u.SelfMulAdd(b.dt, q);
                            t = r.SubVV(u, t, e);
                            u = n.distance;
                            var v = t.Length();
                            n = r.MulSV(l * n.strength * (u - v) / v, t, f);
                            p.SelfSub(n);
                            q.SelfAdd(n)
                        }
                    }
                };
                a.prototype.SolveTensile =
                    function(b) {
                        var c, d = a.SolveTensile_s_weightedNormal,
                            e = a.SolveTensile_s_s,
                            f = a.SolveTensile_s_f;
                        if (!this.m_velocityBuffer.data) throw Error();
                        var g = this.m_velocityBuffer.data;
                        for (c = 0; c < this.m_count; c++) this.m_accumulation2Buffer[c] = new r, this.m_accumulation2Buffer[c].SetZero();
                        for (var k = 0; k < this.m_contactBuffer.count; k++) {
                            var l = this.m_contactBuffer.data[k];
                            if (l.flags & h.b2ParticleFlag.b2_tensileParticle) {
                                var m = l.indexA;
                                c = l.indexB;
                                var n = l.weight;
                                l = l.normal;
                                l = r.MulSV((1 - n) * n, l, d);
                                this.m_accumulation2Buffer[m].SelfSub(l);
                                this.m_accumulation2Buffer[c].SelfAdd(l)
                            }
                        }
                        c = this.GetCriticalVelocity(b);
                        b = this.m_def.surfaceTensionPressureStrength * c;
                        d = this.m_def.surfaceTensionNormalStrength * c;
                        var p = .5 * c;
                        for (k = 0; k < this.m_contactBuffer.count; k++)
                            if (l = this.m_contactBuffer.data[k], l.flags & h.b2ParticleFlag.b2_tensileParticle) {
                                m = l.indexA;
                                c = l.indexB;
                                n = l.weight;
                                l = l.normal;
                                var q = this.m_weightBuffer[m] + this.m_weightBuffer[c],
                                    t = r.SubVV(this.m_accumulation2Buffer[c], this.m_accumulation2Buffer[m], e);
                                n *= W(b * (q - 2) + d * r.DotVV(t, l), p);
                                l = r.MulSV(n,
                                    l, f);
                                g[m].SelfSub(l);
                                g[c].SelfAdd(l)
                            }
                    };
                a.prototype.SolveViscous = function() {
                    var b = a.SolveViscous_s_v,
                        c = a.SolveViscous_s_f;
                    if (!this.m_flagsBuffer.data) throw Error();
                    if (!this.m_positionBuffer.data) throw Error();
                    if (!this.m_velocityBuffer.data) throw Error();
                    for (var d = this.m_positionBuffer.data, e = this.m_velocityBuffer.data, f = this.m_def.viscousStrength, g = this.GetParticleInvMass(), k = 0; k < this.m_bodyContactBuffer.count; k++) {
                        var l = this.m_bodyContactBuffer.data[k];
                        var m = l.index;
                        if (this.m_flagsBuffer.data[m] &
                            h.b2ParticleFlag.b2_viscousParticle) {
                            var n = l.body;
                            var p = l.weight;
                            var q = l.mass;
                            l = d[m];
                            var t = r.SubVV(n.GetLinearVelocityFromWorldPoint(l, r.s_t0), e[m], b);
                            p = r.MulSV(f * q * p, t, c);
                            e[m].SelfMulAdd(g, p);
                            n.ApplyLinearImpulse(p.SelfNeg(), l, !0)
                        }
                    }
                    for (k = 0; k < this.m_contactBuffer.count; k++) l = this.m_contactBuffer.data[k], l.flags & h.b2ParticleFlag.b2_viscousParticle && (m = l.indexA, n = l.indexB, p = l.weight, t = r.SubVV(e[n], e[m], b), p = r.MulSV(f * p, t, c), e[m].SelfAdd(p), e[n].SelfSub(p))
                };
                a.prototype.SolveRepulsive = function(b) {
                    var c =
                        a.SolveRepulsive_s_f;
                    if (!this.m_velocityBuffer.data) throw Error();
                    var d = this.m_velocityBuffer.data;
                    b = this.m_def.repulsiveStrength * this.GetCriticalVelocity(b);
                    for (var e = 0; e < this.m_contactBuffer.count; e++) {
                        var f = this.m_contactBuffer.data[e];
                        if (f.flags & h.b2ParticleFlag.b2_repulsiveParticle) {
                            var g = f.indexA,
                                k = f.indexB;
                            this.m_groupBuffer[g] !== this.m_groupBuffer[k] && (f = r.MulSV(b * f.weight, f.normal, c), d[g].SelfSub(f), d[k].SelfAdd(f))
                        }
                    }
                };
                a.prototype.SolvePowder = function(b) {
                    var c = a.SolvePowder_s_f;
                    if (!this.m_flagsBuffer.data) throw Error();
                    if (!this.m_positionBuffer.data) throw Error();
                    if (!this.m_velocityBuffer.data) throw Error();
                    for (var d = this.m_positionBuffer.data, e = this.m_velocityBuffer.data, f = this.m_def.powderStrength * this.GetCriticalVelocity(b), g = this.GetParticleInvMass(), k = 0; k < this.m_bodyContactBuffer.count; k++) {
                        var l = this.m_bodyContactBuffer.data[k];
                        var m = l.index;
                        if (this.m_flagsBuffer.data[m] & h.b2ParticleFlag.b2_powderParticle) {
                            var n = l.weight;
                            if (.25 < n) {
                                b = l.body;
                                var p = l.mass,
                                    q = d[m];
                                l = l.normal;
                                n = r.MulSV(f * p * (n - .25), l, c);
                                e[m].SelfMulSub(g,
                                    n);
                                b.ApplyLinearImpulse(n, q, !0)
                            }
                        }
                    }
                    for (k = 0; k < this.m_contactBuffer.count; k++) l = this.m_contactBuffer.data[k], l.flags & h.b2ParticleFlag.b2_powderParticle && (n = l.weight, .25 < n && (m = l.indexA, b = l.indexB, l = l.normal, n = r.MulSV(f * (n - .25), l, c), e[m].SelfSub(n), e[b].SelfAdd(n)))
                };
                a.prototype.SolveSolid = function(b) {
                    var c = a.SolveSolid_s_f;
                    if (!this.m_velocityBuffer.data) throw Error();
                    var d = this.m_velocityBuffer.data;
                    this.m_depthBuffer = this.RequestBuffer(this.m_depthBuffer);
                    b = b.inv_dt * this.m_def.ejectionStrength;
                    for (var e =
                            0; e < this.m_contactBuffer.count; e++) {
                        var f = this.m_contactBuffer.data[e],
                            g = f.indexA,
                            h = f.indexB;
                        this.m_groupBuffer[g] !== this.m_groupBuffer[h] && (f = r.MulSV(b * (this.m_depthBuffer[g] + this.m_depthBuffer[h]) * f.weight, f.normal, c), d[g].SelfSub(f), d[h].SelfAdd(f))
                    }
                };
                a.prototype.SolveForce = function(a) {
                    if (!this.m_velocityBuffer.data) throw Error();
                    var b = this.m_velocityBuffer.data;
                    a = a.dt * this.GetParticleInvMass();
                    for (var c = 0; c < this.m_count; c++) b[c].SelfMulAdd(a, this.m_forceBuffer[c]);
                    this.m_hasForce = !1
                };
                a.prototype.SolveColorMixing =
                    function() {
                        if (!this.m_flagsBuffer.data) throw Error();
                        if (!this.m_colorBuffer.data) throw Error();
                        var a = .5 * this.m_def.colorMixingStrength;
                        if (a)
                            for (var b = 0; b < this.m_contactBuffer.count; b++) {
                                var c = this.m_contactBuffer.data[b],
                                    d = c.indexA;
                                c = c.indexB;
                                this.m_flagsBuffer.data[d] & this.m_flagsBuffer.data[c] & h.b2ParticleFlag.b2_colorMixingParticle && pa.MixColors(this.m_colorBuffer.data[d], this.m_colorBuffer.data[c], a)
                            }
                    };
                a.prototype.SolveZombie = function() {
                    if (!this.m_flagsBuffer.data) throw Error();
                    if (!this.m_positionBuffer.data) throw Error();
                    if (!this.m_velocityBuffer.data) throw Error();
                    for (var a = 0, b = [], c = 0; c < this.m_count; c++) b[c] = -1;
                    var d = 0;
                    for (c = 0; c < this.m_count; c++) {
                        var e = this.m_flagsBuffer.data[c];
                        if (e & h.b2ParticleFlag.b2_zombieParticle) {
                            var f = this.m_world.m_destructionListener;
                            e & h.b2ParticleFlag.b2_destructionListenerParticle && f && f.SayGoodbyeParticle(this, c);
                            this.m_handleIndexBuffer.data && (f = this.m_handleIndexBuffer.data[c]) && (f.SetIndex(-1), this.m_handleIndexBuffer.data[c] = null);
                            b[c] = -1
                        } else b[c] = a, c !== a && (this.m_handleIndexBuffer.data &&
                            ((f = this.m_handleIndexBuffer.data[c]) && f.SetIndex(a), this.m_handleIndexBuffer.data[a] = f), this.m_flagsBuffer.data[a] = this.m_flagsBuffer.data[c], this.m_lastBodyContactStepBuffer.data && (this.m_lastBodyContactStepBuffer.data[a] = this.m_lastBodyContactStepBuffer.data[c]), this.m_bodyContactCountBuffer.data && (this.m_bodyContactCountBuffer.data[a] = this.m_bodyContactCountBuffer.data[c]), this.m_consecutiveContactStepsBuffer.data && (this.m_consecutiveContactStepsBuffer.data[a] = this.m_consecutiveContactStepsBuffer.data[c]),
                            this.m_positionBuffer.data[a].Copy(this.m_positionBuffer.data[c]), this.m_velocityBuffer.data[a].Copy(this.m_velocityBuffer.data[c]), this.m_groupBuffer[a] = this.m_groupBuffer[c], this.m_hasForce && this.m_forceBuffer[a].Copy(this.m_forceBuffer[c]), this.m_staticPressureBuffer && (this.m_staticPressureBuffer[a] = this.m_staticPressureBuffer[c]), this.m_depthBuffer && (this.m_depthBuffer[a] = this.m_depthBuffer[c]), this.m_colorBuffer.data && this.m_colorBuffer.data[a].Copy(this.m_colorBuffer.data[c]), this.m_userDataBuffer.data &&
                            (this.m_userDataBuffer.data[a] = this.m_userDataBuffer.data[c]), this.m_expirationTimeBuffer.data && (this.m_expirationTimeBuffer.data[a] = this.m_expirationTimeBuffer.data[c])), a++, d |= e
                    }
                    for (c = 0; c < this.m_proxyBuffer.count; c++) e = this.m_proxyBuffer.data[c], e.index = b[e.index];
                    this.m_proxyBuffer.RemoveIf(function(a) {
                        return 0 > a.index
                    });
                    for (c = 0; c < this.m_contactBuffer.count; c++) e = this.m_contactBuffer.data[c], e.indexA = b[e.indexA], e.indexB = b[e.indexB];
                    this.m_contactBuffer.RemoveIf(function(a) {
                        return 0 > a.indexA ||
                            0 > a.indexB
                    });
                    for (c = 0; c < this.m_bodyContactBuffer.count; c++) e = this.m_bodyContactBuffer.data[c], e.index = b[e.index];
                    this.m_bodyContactBuffer.RemoveIf(function(a) {
                        return 0 > a.index
                    });
                    for (c = 0; c < this.m_pairBuffer.count; c++) e = this.m_pairBuffer.data[c], e.indexA = b[e.indexA], e.indexB = b[e.indexB];
                    this.m_pairBuffer.RemoveIf(function(a) {
                        return 0 > a.indexA || 0 > a.indexB
                    });
                    for (c = 0; c < this.m_triadBuffer.count; c++) e = this.m_triadBuffer.data[c], e.indexA = b[e.indexA], e.indexB = b[e.indexB], e.indexC = b[e.indexC];
                    this.m_triadBuffer.RemoveIf(function(a) {
                        return 0 >
                            a.indexA || 0 > a.indexB || 0 > a.indexC
                    });
                    if (this.m_indexByExpirationTimeBuffer.data)
                        for (e = c = 0; e < this.m_count; e++) f = b[this.m_indexByExpirationTimeBuffer.data[e]], -1 !== f && (this.m_indexByExpirationTimeBuffer.data[c++] = f);
                    for (e = this.m_groupList; e; e = e.GetNext()) {
                        f = a;
                        var g = 0,
                            k = !1;
                        for (c = e.m_firstIndex; c < e.m_lastIndex; c++) {
                            var l = b[c];
                            0 <= l ? (f = W(f, l), g = X(g, l + 1)) : k = !0
                        }
                        f < g ? (e.m_firstIndex = f, e.m_lastIndex = g, k && e.m_groupFlags & h.b2ParticleGroupFlag.b2_solidParticleGroup && this.SetGroupFlags(e, e.m_groupFlags | h.b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth)) :
                            (e.m_firstIndex = 0, e.m_lastIndex = 0, e.m_groupFlags & h.b2ParticleGroupFlag.b2_particleGroupCanBeEmpty || this.SetGroupFlags(e, e.m_groupFlags | h.b2ParticleGroupFlag.b2_particleGroupWillBeDestroyed))
                    }
                    this.m_count = a;
                    this.m_allParticleFlags = d;
                    this.m_needsUpdateAllParticleFlags = !1;
                    for (e = this.m_groupList; e;) a = e.GetNext(), e.m_groupFlags & h.b2ParticleGroupFlag.b2_particleGroupWillBeDestroyed && this.DestroyParticleGroup(e), e = a
                };
                a.prototype.SolveLifetimes = function(a) {
                    if (!this.m_expirationTimeBuffer.data) throw Error();
                    if (!this.m_indexByExpirationTimeBuffer.data) throw Error();
                    this.m_timeElapsed = this.LifetimeToExpirationTime(a.dt);
                    a = this.GetQuantizedTimeElapsed();
                    var b = this.m_expirationTimeBuffer.data,
                        c = this.m_indexByExpirationTimeBuffer.data,
                        d = this.GetParticleCount();
                    this.m_expirationTimeBufferRequiresSorting && (K(c, 0, d, function(a, c) {
                        a = b[a];
                        c = b[c];
                        var d = 0 >= a;
                        return d === 0 >= c ? a > c : d
                    }), this.m_expirationTimeBufferRequiresSorting = !1);
                    for (--d; 0 <= d; --d) {
                        var e = c[d],
                            f = b[e];
                        if (a < f || 0 >= f) break;
                        this.DestroyParticle(e)
                    }
                };
                a.prototype.RotateBuffer =
                    function(a, b, c) {
                        function d(d) {
                            return d < a ? d : d < b ? d + c - b : d < c ? d + a - b : d
                        }
                        var e;
                        if (a !== b && b !== c) {
                            if (!this.m_flagsBuffer.data) throw Error();
                            if (!this.m_positionBuffer.data) throw Error();
                            if (!this.m_velocityBuffer.data) throw Error();
                            O(this.m_flagsBuffer.data, a, b, c);
                            this.m_lastBodyContactStepBuffer.data && O(this.m_lastBodyContactStepBuffer.data, a, b, c);
                            this.m_bodyContactCountBuffer.data && O(this.m_bodyContactCountBuffer.data, a, b, c);
                            this.m_consecutiveContactStepsBuffer.data && O(this.m_consecutiveContactStepsBuffer.data,
                                a, b, c);
                            O(this.m_positionBuffer.data, a, b, c);
                            O(this.m_velocityBuffer.data, a, b, c);
                            O(this.m_groupBuffer, a, b, c);
                            this.m_hasForce && O(this.m_forceBuffer, a, b, c);
                            this.m_staticPressureBuffer && O(this.m_staticPressureBuffer, a, b, c);
                            this.m_depthBuffer && O(this.m_depthBuffer, a, b, c);
                            this.m_colorBuffer.data && O(this.m_colorBuffer.data, a, b, c);
                            this.m_userDataBuffer.data && O(this.m_userDataBuffer.data, a, b, c);
                            if (this.m_handleIndexBuffer.data) {
                                O(this.m_handleIndexBuffer.data, a, b, c);
                                for (var f = a; f < c; ++f)(e = this.m_handleIndexBuffer.data[f]) &&
                                    e.SetIndex(d(e.GetIndex()))
                            }
                            if (this.m_expirationTimeBuffer.data) {
                                O(this.m_expirationTimeBuffer.data, a, b, c);
                                e = this.GetParticleCount();
                                if (!this.m_indexByExpirationTimeBuffer.data) throw Error();
                                var g = this.m_indexByExpirationTimeBuffer.data;
                                for (f = 0; f < e; ++f) g[f] = d(g[f])
                            }
                            for (f = 0; f < this.m_proxyBuffer.count; f++) e = this.m_proxyBuffer.data[f], e.index = d(e.index);
                            for (f = 0; f < this.m_contactBuffer.count; f++) e = this.m_contactBuffer.data[f], e.indexA = d(e.indexA), e.indexB = d(e.indexB);
                            for (f = 0; f < this.m_bodyContactBuffer.count; f++) e =
                                this.m_bodyContactBuffer.data[f], e.index = d(e.index);
                            for (f = 0; f < this.m_pairBuffer.count; f++) e = this.m_pairBuffer.data[f], e.indexA = d(e.indexA), e.indexB = d(e.indexB);
                            for (f = 0; f < this.m_triadBuffer.count; f++) e = this.m_triadBuffer.data[f], e.indexA = d(e.indexA), e.indexB = d(e.indexB), e.indexC = d(e.indexC);
                            for (f = this.m_groupList; f; f = f.GetNext()) f.m_firstIndex = d(f.m_firstIndex), f.m_lastIndex = d(f.m_lastIndex - 1) + 1
                        }
                    };
                a.prototype.GetCriticalVelocity = function(a) {
                    return this.m_particleDiameter * a.inv_dt
                };
                a.prototype.GetCriticalVelocitySquared =
                    function(a) {
                        a = this.GetCriticalVelocity(a);
                        return a * a
                    };
                a.prototype.GetCriticalPressure = function(a) {
                    return this.m_def.density * this.GetCriticalVelocitySquared(a)
                };
                a.prototype.GetParticleStride = function() {
                    return .75 * this.m_particleDiameter
                };
                a.prototype.GetParticleMass = function() {
                    var a = this.GetParticleStride();
                    return this.m_def.density * a * a
                };
                a.prototype.GetParticleInvMass = function() {
                    var a = 1 / .75 * this.m_inverseDiameter;
                    return this.m_inverseDensity * a * a
                };
                a.prototype.GetFixtureContactFilter = function() {
                    return this.m_allParticleFlags &
                        h.b2ParticleFlag.b2_fixtureContactFilterParticle ? this.m_world.m_contactManager.m_contactFilter : null
                };
                a.prototype.GetParticleContactFilter = function() {
                    return this.m_allParticleFlags & h.b2ParticleFlag.b2_particleContactFilterParticle ? this.m_world.m_contactManager.m_contactFilter : null
                };
                a.prototype.GetFixtureContactListener = function() {
                    return this.m_allParticleFlags & h.b2ParticleFlag.b2_fixtureContactListenerParticle ? this.m_world.m_contactManager.m_contactListener : null
                };
                a.prototype.GetParticleContactListener =
                    function() {
                        return this.m_allParticleFlags & h.b2ParticleFlag.b2_particleContactListenerParticle ? this.m_world.m_contactManager.m_contactListener : null
                    };
                a.prototype.SetUserOverridableBuffer = function(a, b, c) {
                    a.data = b;
                    a.userSuppliedCapacity = c
                };
                a.prototype.SetGroupFlags = function(a, b) {
                    var c = a.m_groupFlags;
                    (c ^ b) & h.b2ParticleGroupFlag.b2_solidParticleGroup && (b |= h.b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth);
                    c & ~b && (this.m_needsUpdateAllGroupFlags = !0);
                    ~this.m_allGroupFlags & b && (b & h.b2ParticleGroupFlag.b2_solidParticleGroup &&
                        (this.m_depthBuffer = this.RequestBuffer(this.m_depthBuffer)), this.m_allGroupFlags |= b);
                    a.m_groupFlags = b
                };
                a.BodyContactCompare = function(a, b) {
                    return a.index === b.index ? a.weight > b.weight : a.index < b.index
                };
                a.prototype.RemoveSpuriousBodyContacts = function() {
                    K(this.m_bodyContactBuffer.data, 0, this.m_bodyContactBuffer.count, a.BodyContactCompare);
                    var b = a.RemoveSpuriousBodyContacts_s_n,
                        c = a.RemoveSpuriousBodyContacts_s_pos,
                        d = a.RemoveSpuriousBodyContacts_s_normal,
                        e = this,
                        f = -1,
                        g = 0;
                    this.m_bodyContactBuffer.count = R(this.m_bodyContactBuffer.data,
                        function(a) {
                            a.index !== f && (g = 0, f = a.index);
                            if (3 < g++) return !0;
                            var h = b.Copy(a.normal);
                            h.SelfMul(e.m_particleDiameter * (1 - a.weight));
                            if (!e.m_positionBuffer.data) throw Error();
                            h = r.AddVV(e.m_positionBuffer.data[a.index], h, c);
                            if (!a.fixture.TestPoint(h)) {
                                for (var k = a.fixture.GetShape().GetChildCount(), l = 0; l < k; l++)
                                    if (.008 > a.fixture.ComputeDistance(h, d, l)) return !1;
                                return !0
                            }
                            return !1
                        }, this.m_bodyContactBuffer.count)
                };
                a.prototype.DetectStuckParticle = function(a) {
                    if (!(0 >= this.m_stuckThreshold)) {
                        if (!this.m_bodyContactCountBuffer.data) throw Error();
                        if (!this.m_consecutiveContactStepsBuffer.data) throw Error();
                        if (!this.m_lastBodyContactStepBuffer.data) throw Error();
                        ++this.m_bodyContactCountBuffer.data[a];
                        2 === this.m_bodyContactCountBuffer.data[a] && (++this.m_consecutiveContactStepsBuffer.data[a], this.m_consecutiveContactStepsBuffer.data[a] > this.m_stuckThreshold && (this.m_stuckParticleBuffer.data[this.m_stuckParticleBuffer.Append()] = a));
                        this.m_lastBodyContactStepBuffer.data[a] = this.m_timestamp
                    }
                };
                a.prototype.ValidateParticleIndex = function(a) {
                    return 0 <=
                        a && a < this.GetParticleCount() && -1 !== a
                };
                a.prototype.GetQuantizedTimeElapsed = function() {
                    return Math.floor(this.m_timeElapsed / 4294967296)
                };
                a.prototype.LifetimeToExpirationTime = function(a) {
                    return this.m_timeElapsed + Math.floor(a / this.m_def.lifetimeGranularity * 4294967296)
                };
                a.prototype.ForceCanBeApplied = function(a) {
                    return !(a & h.b2ParticleFlag.b2_wallParticle)
                };
                a.prototype.PrepareForceBuffer = function() {
                    if (!this.m_hasForce) {
                        for (var a = 0; a < this.m_count; a++) this.m_forceBuffer[a].SetZero();
                        this.m_hasForce = !0
                    }
                };
                a.prototype.IsRigidGroup = function(a) {
                    return null !== a && 0 !== (a.m_groupFlags & h.b2ParticleGroupFlag.b2_rigidParticleGroup)
                };
                a.prototype.GetLinearVelocity = function(a, b, c, d) {
                    if (a && this.IsRigidGroup(a)) return a.GetLinearVelocityFromWorldPoint(c, d);
                    if (!this.m_velocityBuffer.data) throw Error();
                    return d.Copy(this.m_velocityBuffer.data[b])
                };
                a.prototype.InitDampingParameter = function(a, b, c, d, e, f, g, h) {
                    a[0] = 0 < d ? 1 / d : 0;
                    b[0] = 0 < e ? 1 / e : 0;
                    c[0] = r.CrossVV(r.SubVV(g, f, r.s_t0), h)
                };
                a.prototype.InitDampingParameterWithRigidGroupOrParticle =
                    function(a, b, c, d, e, f, g, k) {
                        if (e && d) this.InitDampingParameter(a, b, c, e.GetMass(), e.GetInertia(), e.GetCenter(), g, k);
                        else {
                            if (!this.m_flagsBuffer.data) throw Error();
                            this.InitDampingParameter(a, b, c, this.m_flagsBuffer.data[f] & h.b2ParticleFlag.b2_wallParticle ? 0 : this.GetParticleMass(), 0, g, g, k)
                        }
                    };
                a.prototype.ComputeDampingImpulse = function(a, b, c, d, e, f, g) {
                    a = a + b * c * c + d + e * f * f;
                    return 0 < a ? g / a : 0
                };
                a.prototype.ApplyDamping = function(a, b, c, d, e, f, g, h) {
                    if (e && d) e.m_linearVelocity.SelfMulAdd(g * a, h), e.m_angularVelocity += g * c *
                        b;
                    else {
                        if (!this.m_velocityBuffer.data) throw Error();
                        this.m_velocityBuffer.data[f].SelfMulAdd(g * a, h)
                    }
                };
                a.xTruncBits = 12;
                a.yTruncBits = 12;
                a.tagBits = 32;
                a.yOffset = 1 << a.yTruncBits - 1;
                a.yShift = a.tagBits - a.yTruncBits;
                a.xShift = a.tagBits - a.yTruncBits - a.xTruncBits;
                a.xScale = 1 << a.xShift;
                a.xOffset = a.xScale * (1 << a.xTruncBits - 1);
                a.yMask = (1 << a.yTruncBits) - 1 << a.yShift;
                a.xMask = ~a.yMask;
                a.DestroyParticlesInShape_s_aabb = new va;
                a.CreateParticleGroup_s_transform = new U;
                a.ComputeCollisionEnergy_s_v = new r;
                a.QueryShapeAABB_s_aabb =
                    new va;
                a.QueryPointAABB_s_aabb = new va;
                a.RayCast_s_aabb = new va;
                a.RayCast_s_p = new r;
                a.RayCast_s_v = new r;
                a.RayCast_s_n = new r;
                a.RayCast_s_point = new r;
                a.k_pairFlags = h.b2ParticleFlag.b2_springParticle;
                a.k_triadFlags = h.b2ParticleFlag.b2_elasticParticle;
                a.k_noPressureFlags = h.b2ParticleFlag.b2_powderParticle | h.b2ParticleFlag.b2_tensileParticle;
                a.k_extraDampingFlags = h.b2ParticleFlag.b2_staticPressureParticle;
                a.k_barrierWallFlags = h.b2ParticleFlag.b2_barrierParticle | h.b2ParticleFlag.b2_wallParticle;
                a.CreateParticlesStrokeShapeForGroup_s_edge =
                    new db;
                a.CreateParticlesStrokeShapeForGroup_s_d = new r;
                a.CreateParticlesStrokeShapeForGroup_s_p = new r;
                a.CreateParticlesFillShapeForGroup_s_aabb = new va;
                a.CreateParticlesFillShapeForGroup_s_p = new r;
                a.UpdatePairsAndTriads_s_dab = new r;
                a.UpdatePairsAndTriads_s_dbc = new r;
                a.UpdatePairsAndTriads_s_dca = new r;
                a.AddContact_s_d = new r;
                a.UpdateBodyContacts_s_aabb = new va;
                a.Solve_s_subStep = new Ya;
                a.SolveCollision_s_aabb = new va;
                a.SolveGravity_s_gravity = new r;
                a.SolveBarrier_s_aabb = new va;
                a.SolveBarrier_s_va = new r;
                a.SolveBarrier_s_vb =
                    new r;
                a.SolveBarrier_s_pba = new r;
                a.SolveBarrier_s_vba = new r;
                a.SolveBarrier_s_vc = new r;
                a.SolveBarrier_s_pca = new r;
                a.SolveBarrier_s_vca = new r;
                a.SolveBarrier_s_qba = new r;
                a.SolveBarrier_s_qca = new r;
                a.SolveBarrier_s_dv = new r;
                a.SolveBarrier_s_f = new r;
                a.SolvePressure_s_f = new r;
                a.SolveDamping_s_v = new r;
                a.SolveDamping_s_f = new r;
                a.SolveRigidDamping_s_t0 = new r;
                a.SolveRigidDamping_s_t1 = new r;
                a.SolveRigidDamping_s_p = new r;
                a.SolveRigidDamping_s_v = new r;
                a.SolveExtraDamping_s_v = new r;
                a.SolveExtraDamping_s_f = new r;
                a.SolveRigid_s_position = new r;
                a.SolveRigid_s_rotation = new P;
                a.SolveRigid_s_transform = new U;
                a.SolveRigid_s_velocityTransform = new U;
                a.SolveElastic_s_pa = new r;
                a.SolveElastic_s_pb = new r;
                a.SolveElastic_s_pc = new r;
                a.SolveElastic_s_r = new P;
                a.SolveElastic_s_t0 = new r;
                a.SolveSpring_s_pa = new r;
                a.SolveSpring_s_pb = new r;
                a.SolveSpring_s_d = new r;
                a.SolveSpring_s_f = new r;
                a.SolveTensile_s_weightedNormal = new r;
                a.SolveTensile_s_s = new r;
                a.SolveTensile_s_f = new r;
                a.SolveViscous_s_v = new r;
                a.SolveViscous_s_f = new r;
                a.SolveRepulsive_s_f =
                    new r;
                a.SolvePowder_s_f = new r;
                a.SolveSolid_s_f = new r;
                a.RemoveSpuriousBodyContacts_s_n = new r;
                a.RemoveSpuriousBodyContacts_s_pos = new r;
                a.RemoveSpuriousBodyContacts_s_normal = new r;
                return a
            }();
            (function(a) {
                var b = function() {
                    return function() {
                        this.data = null;
                        this.userSuppliedCapacity = 0
                    }
                }();
                a.UserOverridableBuffer = b;
                b = function() {
                    function a() {
                        this.index = -1;
                        this.tag = 0
                    }
                    a.CompareProxyProxy = function(a, b) {
                        return a.tag < b.tag
                    };
                    a.CompareTagProxy = function(a, b) {
                        return a < b.tag
                    };
                    a.CompareProxyTag = function(a, b) {
                        return a.tag <
                            b
                    };
                    return a
                }();
                a.Proxy = b;
                b = function() {
                    function b(b, c, d, e, f) {
                        this.m_system = b;
                        this.m_xLower = (c & a.xMask) >>> 0;
                        this.m_xUpper = (d & a.xMask) >>> 0;
                        this.m_yLower = (c & a.yMask) >>> 0;
                        this.m_yUpper = (d & a.yMask) >>> 0;
                        this.m_first = e;
                        this.m_last = f
                    }
                    b.prototype.GetNext = function() {
                        for (; this.m_first < this.m_last;) {
                            var b = (this.m_system.m_proxyBuffer.data[this.m_first].tag & a.xMask) >>> 0;
                            if (b >= this.m_xLower && b <= this.m_xUpper) return this.m_system.m_proxyBuffer.data[this.m_first++].index;
                            this.m_first++
                        }
                        return -1
                    };
                    return b
                }();
                a.InsideBoundsEnumerator =
                    b;
                b = function() {
                    return function() {
                        this.next = null;
                        this.index = this.count = 0
                    }
                }();
                a.ParticleListNode = b;
                b = function() {
                    function a() {}
                    a.prototype.Allocate = function(a, b) {
                        return b
                    };
                    a.prototype.Clear = function() {};
                    a.prototype.GetCount = function() {
                        return 0
                    };
                    a.prototype.Invalidate = function(a) {};
                    a.prototype.GetValidBuffer = function() {
                        return []
                    };
                    a.prototype.GetBuffer = function() {
                        return []
                    };
                    a.prototype.SetCount = function(a) {};
                    return a
                }();
                a.FixedSetAllocator = b;
                b = function() {
                    return function(a, b) {
                        this.second = -1;
                        this.first = a;
                        this.second = b
                    }
                }();
                a.FixtureParticle = b;
                b = function(a) {
                    function b() {
                        return null !== a && a.apply(this, arguments) || this
                    }
                    C(b, a);
                    b.prototype.Initialize = function(a, b) {};
                    b.prototype.Find = function(a) {
                        return -1
                    };
                    return b
                }(a.FixedSetAllocator);
                a.FixtureParticleSet = b;
                b = function() {
                    return function(a, b) {
                        this.second = this.first = -1;
                        this.first = a;
                        this.second = b
                    }
                }();
                a.ParticlePair = b;
                b = function(a) {
                    function b() {
                        return null !== a && a.apply(this, arguments) || this
                    }
                    C(b, a);
                    b.prototype.Initialize = function(a, b) {};
                    b.prototype.Find = function(a) {
                        return -1
                    };
                    return b
                }(a.FixedSetAllocator);
                a.b2ParticlePairSet = b;
                b = function() {
                    function a() {}
                    a.prototype.IsNecessary = function(a) {
                        return !0
                    };
                    a.prototype.ShouldCreatePair = function(a, b) {
                        return !0
                    };
                    a.prototype.ShouldCreateTriad = function(a, b, c) {
                        return !0
                    };
                    return a
                }();
                a.ConnectionFilter = b;
                b = function(a) {
                    function b(b, c, d, e) {
                        var f = a.call(this) || this;
                        f.m_callDestructionListener = !1;
                        f.m_destroyed = 0;
                        f.m_system = b;
                        f.m_shape = c;
                        f.m_xf = d;
                        f.m_callDestructionListener = e;
                        f.m_destroyed = 0;
                        return f
                    }
                    C(b, a);
                    b.prototype.ReportFixture = function(a) {
                        return !1
                    };
                    b.prototype.ReportParticle = function(a, b) {
                        if (a !== this.m_system) return !1;
                        if (!this.m_system.m_positionBuffer.data) throw Error();
                        this.m_shape.TestPoint(this.m_xf, this.m_system.m_positionBuffer.data[b]) && (this.m_system.DestroyParticle(b, this.m_callDestructionListener), this.m_destroyed++);
                        return !0
                    };
                    b.prototype.Destroyed = function() {
                        return this.m_destroyed
                    };
                    return b
                }(eb);
                a.DestroyParticlesInShapeCallback = b;
                b = function(a) {
                    function b(b) {
                        var c = a.call(this) || this;
                        c.m_threshold = 0;
                        c.m_threshold = b;
                        return c
                    }
                    C(b, a);
                    b.prototype.ShouldCreatePair = function(a, b) {
                        return a < this.m_threshold && this.m_threshold <= b || b < this.m_threshold && this.m_threshold <= a
                    };
                    b.prototype.ShouldCreateTriad = function(a, b, c) {
                        return (a < this.m_threshold || b < this.m_threshold || c < this.m_threshold) && (this.m_threshold <= a || this.m_threshold <= b || this.m_threshold <= c)
                    };
                    return b
                }(a.ConnectionFilter);
                a.JoinParticleGroupsFilter = b;
                b = function(a) {
                    function b(b, c) {
                        void 0 === c && (c = b.length);
                        var d = a.call(this, h.b2ShapeType.e_unknown, 0) || this;
                        d.m_shapeCount = 0;
                        d.m_shapes =
                            b;
                        d.m_shapeCount = c;
                        return d
                    }
                    C(b, a);
                    b.prototype.Clone = function() {
                        throw Error();
                    };
                    b.prototype.GetChildCount = function() {
                        return 1
                    };
                    b.prototype.TestPoint = function(a, b) {
                        for (var c = 0; c < this.m_shapeCount; c++)
                            if (this.m_shapes[c].TestPoint(a, b)) return !0;
                        return !1
                    };
                    b.prototype.ComputeDistance = function(a, b, c, d) {
                        return 0
                    };
                    b.prototype.RayCast = function(a, b, c, d) {
                        return !1
                    };
                    b.prototype.ComputeAABB = function(a, b, c) {
                        c = new va;
                        a.lowerBound.x = 1E37;
                        a.lowerBound.y = 1E37;
                        a.upperBound.x = -1E37;
                        a.upperBound.y = -1E37;
                        for (var d = 0; d <
                            this.m_shapeCount; d++)
                            for (var e = this.m_shapes[d].GetChildCount(), f = 0; f < e; f++) {
                                var g = c;
                                this.m_shapes[d].ComputeAABB(g, b, f);
                                a.Combine1(g)
                            }
                    };
                    b.prototype.ComputeMass = function(a, b) {};
                    b.prototype.SetupDistanceProxy = function(a, b) {};
                    b.prototype.ComputeSubmergedArea = function(a, b, c, d) {
                        return 0
                    };
                    b.prototype.Dump = function(a) {};
                    return b
                }(Xa);
                a.CompositeShape = b;
                b = function(a) {
                    function b(b) {
                        var c = a.call(this) || this;
                        c.m_flagsBuffer = b;
                        return c
                    }
                    C(b, a);
                    b.prototype.IsNecessary = function(a) {
                        if (!this.m_flagsBuffer.data) throw Error();
                        return 0 !== (this.m_flagsBuffer.data[a] & h.b2ParticleFlag.b2_reactiveParticle)
                    };
                    return b
                }(a.ConnectionFilter);
                a.ReactiveFilter = b;
                b = function(b) {
                    function c(a, c) {
                        a = b.call(this, a) || this;
                        a.m_contactFilter = c;
                        return a
                    }
                    C(c, b);
                    c.prototype.ShouldCollideFixtureParticle = function(a, b, c) {
                        return this.m_contactFilter && this.m_system.GetFlagsBuffer()[c] & h.b2ParticleFlag.b2_fixtureContactFilterParticle ? this.m_contactFilter.ShouldCollideFixtureParticle(a, this.m_system, c) : !0
                    };
                    c.prototype.ReportFixtureAndParticle = function(b,
                        c, d) {
                        var e = a.UpdateBodyContactsCallback.ReportFixtureAndParticle_s_n,
                            f = a.UpdateBodyContactsCallback.ReportFixtureAndParticle_s_rp;
                        if (!this.m_system.m_flagsBuffer.data) throw Error();
                        if (!this.m_system.m_positionBuffer.data) throw Error();
                        var g = this.m_system.m_positionBuffer.data[d];
                        c = b.ComputeDistance(g, e, c);
                        if (c < this.m_system.m_particleDiameter && this.ShouldCollideFixtureParticle(b, this.m_system, d)) {
                            var k = b.GetBody(),
                                l = k.GetWorldCenter(),
                                m = k.GetMass(),
                                n = k.GetInertia() - m * k.GetLocalCenter().LengthSquared();
                            m = 0 < m ? 1 / m : 0;
                            n = 0 < n ? 1 / n : 0;
                            var p = this.m_system.m_flagsBuffer.data[d] & h.b2ParticleFlag.b2_wallParticle ? 0 : this.m_system.GetParticleInvMass();
                            f = r.SubVV(g, l, f);
                            f = r.CrossVV(f, e);
                            f = p + m + n * f * f;
                            g = this.m_system.m_bodyContactBuffer.data[this.m_system.m_bodyContactBuffer.Append()];
                            g.index = d;
                            g.body = k;
                            g.fixture = b;
                            g.weight = 1 - c * this.m_system.m_inverseDiameter;
                            g.normal.Copy(e.SelfNeg());
                            g.mass = 0 < f ? 1 / f : 0;
                            this.m_system.DetectStuckParticle(d)
                        }
                    };
                    c.ReportFixtureAndParticle_s_n = new r;
                    c.ReportFixtureAndParticle_s_rp = new r;
                    return c
                }(Yb);
                a.UpdateBodyContactsCallback = b;
                b = function(b) {
                    function c(a, c) {
                        a = b.call(this, a) || this;
                        a.m_step = c;
                        return a
                    }
                    C(c, b);
                    c.prototype.ReportFixtureAndParticle = function(b, c, d) {
                        var e = a.SolveCollisionCallback.ReportFixtureAndParticle_s_p1,
                            f = a.SolveCollisionCallback.ReportFixtureAndParticle_s_output,
                            g = a.SolveCollisionCallback.ReportFixtureAndParticle_s_input,
                            k = a.SolveCollisionCallback.ReportFixtureAndParticle_s_p,
                            l = a.SolveCollisionCallback.ReportFixtureAndParticle_s_v,
                            m = a.SolveCollisionCallback.ReportFixtureAndParticle_s_f,
                            n = b.GetBody();
                        if (!this.m_system.m_positionBuffer.data) throw Error();
                        if (!this.m_system.m_velocityBuffer.data) throw Error();
                        var p = this.m_system.m_positionBuffer.data[d],
                            q = this.m_system.m_velocityBuffer.data[d];
                        0 === this.m_system.m_iterationIndex ? (e = U.MulTXV(n.m_xf0, p, e), b.GetShape().GetType() === h.b2ShapeType.e_circleShape && (e.SelfSub(n.GetLocalCenter()), P.MulRV(n.m_xf0.q, e, e), P.MulTRV(n.m_xf.q, e, e), e.SelfAdd(n.GetLocalCenter())), U.MulXV(n.m_xf, e, g.p1)) : g.p1.Copy(p);
                        r.AddVMulSV(p, this.m_step.dt, q, g.p2);
                        g.maxFraction = 1;
                        b.RayCast(f, g, c) && (b = f.normal, k.x = (1 - f.fraction) * g.p1.x + f.fraction * g.p2.x + .008 * b.x, k.y = (1 - f.fraction) * g.p1.y + f.fraction * g.p2.y + .008 * b.y, l.x = this.m_step.inv_dt * (k.x - p.x), l.y = this.m_step.inv_dt * (k.y - p.y), this.m_system.m_velocityBuffer.data[d].Copy(l), m.x = this.m_step.inv_dt * this.m_system.GetParticleMass() * (q.x - l.x), m.y = this.m_step.inv_dt * this.m_system.GetParticleMass() * (q.y - l.y), this.m_system.ParticleApplyForce(d, m))
                    };
                    c.prototype.ReportParticle = function(a, b) {
                        return !1
                    };
                    c.ReportFixtureAndParticle_s_p1 =
                        new r;
                    c.ReportFixtureAndParticle_s_output = new bb;
                    c.ReportFixtureAndParticle_s_input = new Va;
                    c.ReportFixtureAndParticle_s_p = new r;
                    c.ReportFixtureAndParticle_s_v = new r;
                    c.ReportFixtureAndParticle_s_f = new r;
                    return c
                }(Yb);
                a.SolveCollisionCallback = b
            })(h.b2ParticleSystem || (h.b2ParticleSystem = {}));
            var Yd = function() {
                    function a(a) {
                        this.m_locked = this.m_newFixture = !1;
                        this.m_clearForces = !0;
                        this.m_contactManager = new yc;
                        this.m_particleSystemList = this.m_jointList = this.m_bodyList = null;
                        this.m_jointCount = this.m_bodyCount =
                            0;
                        this.m_gravity = new r;
                        this.m_allowSleep = !0;
                        this.m_debugDraw = this.m_destructionListener = null;
                        this.m_inv_dt0 = 0;
                        this.m_continuousPhysics = this.m_warmStarting = !0;
                        this.m_subStepping = !1;
                        this.m_stepComplete = !0;
                        this.m_profile = new Qb;
                        this.m_island = new Dc;
                        this.s_stack = [];
                        this.m_controllerList = null;
                        this.m_controllerCount = 0;
                        this.m_gravity.Copy(a)
                    }
                    a.prototype.SetDestructionListener = function(a) {
                        this.m_destructionListener = a
                    };
                    a.prototype.SetContactFilter = function(a) {
                        this.m_contactManager.m_contactFilter = a
                    };
                    a.prototype.SetContactListener =
                        function(a) {
                            this.m_contactManager.m_contactListener = a
                        };
                    a.prototype.SetDebugDraw = function(a) {
                        this.m_debugDraw = a
                    };
                    a.prototype.CreateBody = function(a) {
                        void 0 === a && (a = {});
                        if (this.IsLocked()) throw Error();
                        a = new fc(a, this);
                        a.m_prev = null;
                        (a.m_next = this.m_bodyList) && (this.m_bodyList.m_prev = a);
                        this.m_bodyList = a;
                        ++this.m_bodyCount;
                        return a
                    };
                    a.prototype.DestroyBody = function(a) {
                        if (this.IsLocked()) throw Error();
                        for (var b = a.m_jointList; b;) {
                            var c = b;
                            b = b.next;
                            this.m_destructionListener && this.m_destructionListener.SayGoodbyeJoint(c.joint);
                            this.DestroyJoint(c.joint);
                            a.m_jointList = b
                        }
                        a.m_jointList = null;
                        for (b = a.m_controllerList; b;) c = b, b = b.nextController, c.controller.RemoveBody(a);
                        for (b = a.m_contactList; b;) c = b, b = b.next, this.m_contactManager.Destroy(c.contact);
                        a.m_contactList = null;
                        for (b = a.m_fixtureList; b;) c = b, b = b.m_next, this.m_destructionListener && this.m_destructionListener.SayGoodbyeFixture(c), c.DestroyProxies(), c.Destroy(), a.m_fixtureList = b, --a.m_fixtureCount;
                        a.m_fixtureList = null;
                        a.m_fixtureCount = 0;
                        a.m_prev && (a.m_prev.m_next = a.m_next);
                        a.m_next && (a.m_next.m_prev = a.m_prev);
                        a === this.m_bodyList && (this.m_bodyList = a.m_next);
                        --this.m_bodyCount
                    };
                    a._Joint_Create = function(a, b) {
                        switch (a.type) {
                            case h.b2JointType.e_distanceJoint:
                                return new hc(a);
                            case h.b2JointType.e_mouseJoint:
                                return new mc(a);
                            case h.b2JointType.e_prismaticJoint:
                                return new nc(a);
                            case h.b2JointType.e_revoluteJoint:
                                return new pc(a);
                            case h.b2JointType.e_pulleyJoint:
                                return new oc(a);
                            case h.b2JointType.e_gearJoint:
                                return new kc(a);
                            case h.b2JointType.e_wheelJoint:
                                return new sc(a);
                            case h.b2JointType.e_weldJoint:
                                return new rc(a);
                            case h.b2JointType.e_frictionJoint:
                                return new jc(a);
                            case h.b2JointType.e_ropeJoint:
                                return new qc(a);
                            case h.b2JointType.e_motorJoint:
                                return new lc(a);
                            case h.b2JointType.e_areaJoint:
                                return new ic(a)
                        }
                        throw Error();
                    };
                    a._Joint_Destroy = function(a, b) {};
                    a.prototype.CreateJoint = function(b) {
                        if (this.IsLocked()) throw Error();
                        var c = a._Joint_Create(b, null);
                        c.m_prev = null;
                        (c.m_next = this.m_jointList) && (this.m_jointList.m_prev = c);
                        this.m_jointList = c;
                        ++this.m_jointCount;
                        c.m_edgeA.prev = null;
                        (c.m_edgeA.next = c.m_bodyA.m_jointList) && (c.m_bodyA.m_jointList.prev = c.m_edgeA);
                        c.m_bodyA.m_jointList = c.m_edgeA;
                        c.m_edgeB.prev = null;
                        (c.m_edgeB.next = c.m_bodyB.m_jointList) && (c.m_bodyB.m_jointList.prev = c.m_edgeB);
                        c.m_bodyB.m_jointList = c.m_edgeB;
                        var d = b.bodyA,
                            e = b.bodyB;
                        if (!b.collideConnected)
                            for (b = e.GetContactList(); b;) b.other === d && b.contact.FlagForFiltering(), b = b.next;
                        return c
                    };
                    a.prototype.DestroyJoint = function(b) {
                        if (this.IsLocked()) throw Error();
                        var c = b.m_collideConnected;
                        b.m_prev &&
                            (b.m_prev.m_next = b.m_next);
                        b.m_next && (b.m_next.m_prev = b.m_prev);
                        b === this.m_jointList && (this.m_jointList = b.m_next);
                        var d = b.m_bodyA,
                            e = b.m_bodyB;
                        d.SetAwake(!0);
                        e.SetAwake(!0);
                        b.m_edgeA.prev && (b.m_edgeA.prev.next = b.m_edgeA.next);
                        b.m_edgeA.next && (b.m_edgeA.next.prev = b.m_edgeA.prev);
                        b.m_edgeA === d.m_jointList && (d.m_jointList = b.m_edgeA.next);
                        b.m_edgeA.prev = null;
                        b.m_edgeA.next = null;
                        b.m_edgeB.prev && (b.m_edgeB.prev.next = b.m_edgeB.next);
                        b.m_edgeB.next && (b.m_edgeB.next.prev = b.m_edgeB.prev);
                        b.m_edgeB === e.m_jointList &&
                            (e.m_jointList = b.m_edgeB.next);
                        b.m_edgeB.prev = null;
                        b.m_edgeB.next = null;
                        a._Joint_Destroy(b, null);
                        --this.m_jointCount;
                        if (!c)
                            for (b = e.GetContactList(); b;) b.other === d && b.contact.FlagForFiltering(), b = b.next
                    };
                    a.prototype.CreateParticleSystem = function(a) {
                        if (this.IsLocked()) throw Error();
                        a = new h.b2ParticleSystem(a, this);
                        a.m_prev = null;
                        (a.m_next = this.m_particleSystemList) && (this.m_particleSystemList.m_prev = a);
                        return this.m_particleSystemList = a
                    };
                    a.prototype.DestroyParticleSystem = function(a) {
                        if (this.IsLocked()) throw Error();
                        a.m_prev && (a.m_prev.m_next = a.m_next);
                        a.m_next && (a.m_next.m_prev = a.m_prev);
                        a === this.m_particleSystemList && (this.m_particleSystemList = a.m_next)
                    };
                    a.prototype.CalculateReasonableParticleIterations = function(a) {
                        if (null === this.m_particleSystemList) return 1;
                        for (var b = this.m_gravity.Length(), c = 1E37, d = this.GetParticleSystemList(); null !== d; d = d.m_next) c = W(c, d.GetRadius());
                        return G(b, c, a)
                    };
                    a.prototype.Step = function(b, c, d, e) {
                        void 0 === e && (e = this.CalculateReasonableParticleIterations(b));
                        var f = a.Step_s_stepTimer.Reset();
                        this.m_newFixture && (this.m_contactManager.FindNewContacts(), this.m_newFixture = !1);
                        this.m_locked = !0;
                        var g = a.Step_s_step;
                        g.dt = b;
                        g.velocityIterations = c;
                        g.positionIterations = d;
                        g.particleIterations = e;
                        g.inv_dt = 0 < b ? 1 / b : 0;
                        g.dtRatio = this.m_inv_dt0 * b;
                        g.warmStarting = this.m_warmStarting;
                        b = a.Step_s_timer.Reset();
                        this.m_contactManager.Collide();
                        this.m_profile.collide = b.GetMilliseconds();
                        if (this.m_stepComplete && 0 < g.dt) {
                            b = a.Step_s_timer.Reset();
                            for (c = this.m_particleSystemList; c; c = c.m_next) c.Solve(g);
                            this.Solve(g);
                            this.m_profile.solve = b.GetMilliseconds()
                        }
                        this.m_continuousPhysics && 0 < g.dt && (b = a.Step_s_timer.Reset(), this.SolveTOI(g), this.m_profile.solveTOI = b.GetMilliseconds());
                        0 < g.dt && (this.m_inv_dt0 = g.inv_dt);
                        this.m_clearForces && this.ClearForces();
                        this.m_locked = !1;
                        this.m_profile.step = f.GetMilliseconds()
                    };
                    a.prototype.ClearForces = function() {
                        for (var a = this.m_bodyList; a; a = a.m_next) a.m_force.SetZero(), a.m_torque = 0
                    };
                    a.prototype.DrawParticleSystem = function(a) {
                        if (null !== this.m_debugDraw) {
                            var b = a.GetParticleCount();
                            if (b) {
                                var c =
                                    a.GetRadius(),
                                    d = a.GetPositionBuffer();
                                a.m_colorBuffer.data ? (a = a.GetColorBuffer(), this.m_debugDraw.DrawParticles(d, c, a, b)) : this.m_debugDraw.DrawParticles(d, c, null, b)
                            }
                        }
                    };
                    a.prototype.DrawDebugData = function() {
                        if (null !== this.m_debugDraw) {
                            var b = this.m_debugDraw.GetFlags(),
                                c = a.DrawDebugData_s_color.SetRGB(0, 0, 0);
                            if (b & h.b2DrawFlags.e_shapeBit)
                                for (var d = this.m_bodyList; d; d = d.m_next) {
                                    var e = d.m_xf;
                                    this.m_debugDraw.PushTransform(e);
                                    for (var f = d.GetFixtureList(); f; f = f.m_next) d.IsActive() ? d.GetType() === h.b2BodyType.b2_staticBody ?
                                        c.SetRGB(.5, .9, .5) : d.GetType() === h.b2BodyType.b2_kinematicBody ? c.SetRGB(.5, .5, .9) : d.IsAwake() ? c.SetRGB(.9, .7, .7) : c.SetRGB(.6, .6, .6) : c.SetRGB(.5, .5, .3), this.DrawShape(f, c);
                                    this.m_debugDraw.PopTransform(e)
                                }
                            if (b & h.b2DrawFlags.e_particleBit)
                                for (d = this.m_particleSystemList; d; d = d.m_next) this.DrawParticleSystem(d);
                            if (b & h.b2DrawFlags.e_jointBit)
                                for (d = this.m_jointList; d; d = d.m_next) this.DrawJoint(d);
                            if (b & h.b2DrawFlags.e_aabbBit)
                                for (c.SetRGB(.9, .3, .9), e = a.DrawDebugData_s_vs, d = this.m_bodyList; d; d = d.m_next)
                                    if (d.IsActive())
                                        for (f =
                                            d.GetFixtureList(); f; f = f.m_next)
                                            for (var g = 0; g < f.m_proxyCount; ++g) {
                                                var k = f.m_proxies[g].treeNode.aabb;
                                                e[0].Set(k.lowerBound.x, k.lowerBound.y);
                                                e[1].Set(k.upperBound.x, k.lowerBound.y);
                                                e[2].Set(k.upperBound.x, k.upperBound.y);
                                                e[3].Set(k.lowerBound.x, k.upperBound.y);
                                                this.m_debugDraw.DrawPolygon(e, 4, c)
                                            }
                            if (b & h.b2DrawFlags.e_centerOfMassBit)
                                for (d = this.m_bodyList; d; d = d.m_next) e = a.DrawDebugData_s_xf, e.q.Copy(d.m_xf.q), e.p.Copy(d.GetWorldCenter()), this.m_debugDraw.DrawTransform(e);
                            if (b & h.b2DrawFlags.e_controllerBit)
                                for (b =
                                    this.m_controllerList; b; b = b.m_next) b.Draw(this.m_debugDraw)
                        }
                    };
                    a.prototype.QueryAABB = function(a, b, c) {
                        this.m_contactManager.m_broadPhase.Query(b, function(b) {
                            b = b.userData.fixture;
                            return a ? a.ReportFixture(b) : c ? c(b) : !0
                        });
                        if (a instanceof eb)
                            for (var d = this.m_particleSystemList; d; d = d.m_next) a.ShouldQueryParticleSystem(d) && d.QueryAABB(a, b)
                    };
                    a.prototype.QueryAllAABB = function(a, b) {
                        void 0 === b && (b = []);
                        this.QueryAABB(null, a, function(a) {
                            b.push(a);
                            return !0
                        });
                        return b
                    };
                    a.prototype.QueryPointAABB = function(a, b, c) {
                        this.m_contactManager.m_broadPhase.QueryPoint(b,
                            function(b) {
                                b = b.userData.fixture;
                                return a ? a.ReportFixture(b) : c ? c(b) : !0
                            });
                        if (a instanceof eb)
                            for (var d = this.m_particleSystemList; d; d = d.m_next) a.ShouldQueryParticleSystem(d) && d.QueryPointAABB(a, b)
                    };
                    a.prototype.QueryAllPointAABB = function(a, b) {
                        void 0 === b && (b = []);
                        this.QueryPointAABB(null, a, function(a) {
                            b.push(a);
                            return !0
                        });
                        return b
                    };
                    a.prototype.QueryFixtureShape = function(b, c, d, e, f) {
                        var g = a.QueryFixtureShape_s_aabb;
                        c.ComputeAABB(g, e, d);
                        this.m_contactManager.m_broadPhase.Query(g, function(a) {
                            a = a.userData;
                            var g = a.fixture;
                            if (q(c, d, g.GetShape(), a.childIndex, e, g.GetBody().GetTransform())) {
                                if (b) return b.ReportFixture(g);
                                if (f) return f(g)
                            }
                            return !0
                        });
                        if (b instanceof eb)
                            for (var h = this.m_particleSystemList; h; h = h.m_next) b.ShouldQueryParticleSystem(h) && h.QueryAABB(b, g)
                    };
                    a.prototype.QueryAllFixtureShape = function(a, b, c, d) {
                        void 0 === d && (d = []);
                        this.QueryFixtureShape(null, a, b, c, function(a) {
                            d.push(a);
                            return !0
                        });
                        return d
                    };
                    a.prototype.QueryFixturePoint = function(a, b, c) {
                        this.m_contactManager.m_broadPhase.QueryPoint(b, function(d) {
                            d =
                                d.userData.fixture;
                            if (d.TestPoint(b)) {
                                if (a) return a.ReportFixture(d);
                                if (c) return c(d)
                            }
                            return !0
                        });
                        if (a)
                            for (var d = this.m_particleSystemList; d; d = d.m_next) a.ShouldQueryParticleSystem(d) && d.QueryPointAABB(a, b)
                    };
                    a.prototype.QueryAllFixturePoint = function(a, b) {
                        void 0 === b && (b = []);
                        this.QueryFixturePoint(null, a, function(a) {
                            b.push(a);
                            return !0
                        });
                        return b
                    };
                    a.prototype.RayCast = function(b, c, d, e) {
                        var f = a.RayCast_s_input;
                        f.maxFraction = 1;
                        f.p1.Copy(c);
                        f.p2.Copy(d);
                        this.m_contactManager.m_broadPhase.RayCast(f, function(f,
                            g) {
                            var h = g.userData;
                            g = h.fixture;
                            var k = a.RayCast_s_output;
                            if (g.RayCast(k, f, h.childIndex)) {
                                h = k.fraction;
                                var l = a.RayCast_s_point;
                                l.Set((1 - h) * c.x + h * d.x, (1 - h) * c.y + h * d.y);
                                if (b) return b.ReportFixture(g, l, k.normal, h);
                                if (e) return e(g, l, k.normal, h)
                            }
                            return f.maxFraction
                        });
                        if (b)
                            for (f = this.m_particleSystemList; f; f = f.m_next) b.ShouldQueryParticleSystem(f) && f.RayCast(b, c, d)
                    };
                    a.prototype.RayCastOne = function(a, b) {
                        var c = null,
                            d = 1;
                        this.RayCast(null, a, b, function(a, b, e, f) {
                            f < d && (d = f, c = a);
                            return d
                        });
                        return c
                    };
                    a.prototype.RayCastAll =
                        function(a, b, c) {
                            void 0 === c && (c = []);
                            this.RayCast(null, a, b, function(a, b, d, e) {
                                c.push(a);
                                return 1
                            });
                            return c
                        };
                    a.prototype.GetBodyList = function() {
                        return this.m_bodyList
                    };
                    a.prototype.GetJointList = function() {
                        return this.m_jointList
                    };
                    a.prototype.GetParticleSystemList = function() {
                        return this.m_particleSystemList
                    };
                    a.prototype.GetContactList = function() {
                        return this.m_contactManager.m_contactList
                    };
                    a.prototype.SetAllowSleeping = function(a) {
                        if (a !== this.m_allowSleep && (this.m_allowSleep = a, !this.m_allowSleep))
                            for (a =
                                this.m_bodyList; a; a = a.m_next) a.SetAwake(!0)
                    };
                    a.prototype.GetAllowSleeping = function() {
                        return this.m_allowSleep
                    };
                    a.prototype.SetWarmStarting = function(a) {
                        this.m_warmStarting = a
                    };
                    a.prototype.GetWarmStarting = function() {
                        return this.m_warmStarting
                    };
                    a.prototype.SetContinuousPhysics = function(a) {
                        this.m_continuousPhysics = a
                    };
                    a.prototype.GetContinuousPhysics = function() {
                        return this.m_continuousPhysics
                    };
                    a.prototype.SetSubStepping = function(a) {
                        this.m_subStepping = a
                    };
                    a.prototype.GetSubStepping = function() {
                        return this.m_subStepping
                    };
                    a.prototype.GetProxyCount = function() {
                        return this.m_contactManager.m_broadPhase.GetProxyCount()
                    };
                    a.prototype.GetBodyCount = function() {
                        return this.m_bodyCount
                    };
                    a.prototype.GetJointCount = function() {
                        return this.m_jointCount
                    };
                    a.prototype.GetContactCount = function() {
                        return this.m_contactManager.m_contactCount
                    };
                    a.prototype.GetTreeHeight = function() {
                        return this.m_contactManager.m_broadPhase.GetTreeHeight()
                    };
                    a.prototype.GetTreeBalance = function() {
                        return this.m_contactManager.m_broadPhase.GetTreeBalance()
                    };
                    a.prototype.GetTreeQuality =
                        function() {
                            return this.m_contactManager.m_broadPhase.GetTreeQuality()
                        };
                    a.prototype.SetGravity = function(a, b) {
                        void 0 === b && (b = !0);
                        if (!r.IsEqualToV(this.m_gravity, a) && (this.m_gravity.Copy(a), b))
                            for (a = this.m_bodyList; a; a = a.m_next) a.SetAwake(!0)
                    };
                    a.prototype.GetGravity = function() {
                        return this.m_gravity
                    };
                    a.prototype.IsLocked = function() {
                        return this.m_locked
                    };
                    a.prototype.SetAutoClearForces = function(a) {
                        this.m_clearForces = a
                    };
                    a.prototype.GetAutoClearForces = function() {
                        return this.m_clearForces
                    };
                    a.prototype.ShiftOrigin =
                        function(a) {
                            if (this.IsLocked()) throw Error();
                            for (var b = this.m_bodyList; b; b = b.m_next) b.m_xf.p.SelfSub(a), b.m_sweep.c0.SelfSub(a), b.m_sweep.c.SelfSub(a);
                            for (b = this.m_jointList; b; b = b.m_next) b.ShiftOrigin(a);
                            this.m_contactManager.m_broadPhase.ShiftOrigin(a)
                        };
                    a.prototype.GetContactManager = function() {
                        return this.m_contactManager
                    };
                    a.prototype.GetProfile = function() {
                        return this.m_profile
                    };
                    a.prototype.Dump = function(a) {
                        if (!this.m_locked) {
                            a("const g: b2Vec2 = new b2Vec2(%.15f, %.15f);\n", this.m_gravity.x, this.m_gravity.y);
                            a("this.m_world.SetGravity(g);\n");
                            a("const bodies: b2Body[] = [];\n");
                            a("const joints: b2Joint[] = [];\n");
                            for (var b = 0, c = this.m_bodyList; c; c = c.m_next) c.m_islandIndex = b, c.Dump(a), ++b;
                            b = 0;
                            for (c = this.m_jointList; c; c = c.m_next) c.m_index = b, ++b;
                            for (c = this.m_jointList; c; c = c.m_next) c.m_type !== h.b2JointType.e_gearJoint && (a("{\n"), c.Dump(a), a("}\n"));
                            for (c = this.m_jointList; c; c = c.m_next) c.m_type === h.b2JointType.e_gearJoint && (a("{\n"), c.Dump(a), a("}\n"))
                        }
                    };
                    a.prototype.DrawJoint = function(b) {
                        if (null !== this.m_debugDraw) {
                            var c =
                                b.GetBodyA(),
                                d = b.GetBodyB(),
                                e = c.m_xf.p,
                                f = d.m_xf.p;
                            d = b.GetAnchorA(a.DrawJoint_s_p1);
                            c = b.GetAnchorB(a.DrawJoint_s_p2);
                            var g = a.DrawJoint_s_color.SetRGB(.5, .8, .8);
                            switch (b.m_type) {
                                case h.b2JointType.e_distanceJoint:
                                    this.m_debugDraw.DrawSegment(d, c, g);
                                    break;
                                case h.b2JointType.e_pulleyJoint:
                                    e = b.GetGroundAnchorA();
                                    b = b.GetGroundAnchorB();
                                    this.m_debugDraw.DrawSegment(e, d, g);
                                    this.m_debugDraw.DrawSegment(b, c, g);
                                    this.m_debugDraw.DrawSegment(e, b, g);
                                    break;
                                case h.b2JointType.e_mouseJoint:
                                    b = a.DrawJoint_s_c;
                                    b.Set(0,
                                        1, 0);
                                    this.m_debugDraw.DrawPoint(d, 4, b);
                                    this.m_debugDraw.DrawPoint(c, 4, b);
                                    b.Set(.8, .8, .8);
                                    this.m_debugDraw.DrawSegment(d, c, b);
                                    break;
                                default:
                                    this.m_debugDraw.DrawSegment(e, d, g), this.m_debugDraw.DrawSegment(d, c, g), this.m_debugDraw.DrawSegment(f, c, g)
                            }
                        }
                    };
                    a.prototype.DrawShape = function(b, c) {
                        if (null !== this.m_debugDraw) switch (b = b.GetShape(), b.m_type) {
                            case h.b2ShapeType.e_circleShape:
                                this.m_debugDraw.DrawSolidCircle(b.m_p, b.m_radius, r.UNITX, c);
                                break;
                            case h.b2ShapeType.e_edgeShape:
                                var d = b.m_vertex1;
                                var e = b.m_vertex2;
                                this.m_debugDraw.DrawSegment(d, e, c);
                                break;
                            case h.b2ShapeType.e_chainShape:
                                var f = b.m_count,
                                    g = b.m_vertices,
                                    k = a.DrawShape_s_ghostColor.SetRGBA(.75 * c.r, .75 * c.g, .75 * c.b, c.a);
                                d = g[0];
                                this.m_debugDraw.DrawPoint(d, 4, c);
                                b.m_hasPrevVertex && (e = b.m_prevVertex, this.m_debugDraw.DrawSegment(e, d, k), this.m_debugDraw.DrawCircle(e, .1, k));
                                for (var l = 1; l < f; ++l) e = g[l], this.m_debugDraw.DrawSegment(d, e, c), this.m_debugDraw.DrawPoint(e, 4, c), d = e;
                                b.m_hasNextVertex && (c = b.m_nextVertex, this.m_debugDraw.DrawSegment(c, d, k), this.m_debugDraw.DrawCircle(c,
                                    .1, k));
                                break;
                            case h.b2ShapeType.e_polygonShape:
                                d = b.m_count, g = b.m_vertices, this.m_debugDraw.DrawSolidPolygon(g, d, c)
                        }
                    };
                    a.prototype.Solve = function(a) {
                        var b;
                        for (b = this.m_bodyList; b; b = b.m_next) b.m_xf0.Copy(b.m_xf);
                        for (var c = this.m_controllerList; c; c = c.m_next) c.Step(a);
                        this.m_profile.solveInit = 0;
                        this.m_profile.solveVelocity = 0;
                        this.m_profile.solvePosition = 0;
                        c = this.m_island;
                        c.Initialize(this.m_bodyCount, this.m_contactManager.m_contactCount, this.m_jointCount, null, this.m_contactManager.m_contactListener);
                        for (b =
                            this.m_bodyList; b; b = b.m_next) b.m_islandFlag = !1;
                        for (var d = this.m_contactManager.m_contactList; d; d = d.m_next) d.m_islandFlag = !1;
                        for (d = this.m_jointList; d; d = d.m_next) d.m_islandFlag = !1;
                        d = this.s_stack;
                        for (var e = this.m_bodyList; e; e = e.m_next)
                            if (!e.m_islandFlag && e.IsAwake() && e.IsActive() && e.GetType() !== h.b2BodyType.b2_staticBody) {
                                c.Clear();
                                var f = 0;
                                d[f++] = e;
                                for (e.m_islandFlag = !0; 0 < f;) {
                                    b = d[--f];
                                    if (!b) throw Error();
                                    c.AddBody(b);
                                    b.m_awakeFlag = !0;
                                    if (b.GetType() !== h.b2BodyType.b2_staticBody) {
                                        for (var g = b.m_contactList; g; g =
                                            g.next) {
                                            var k = g.contact;
                                            if (!k.m_islandFlag && k.IsEnabled() && k.IsTouching()) {
                                                var l = k.m_fixtureB.m_isSensor;
                                                if (!k.m_fixtureA.m_isSensor && !l) {
                                                    c.AddContact(k);
                                                    k.m_islandFlag = !0;
                                                    k = g.other;
                                                    if (!k) throw Error();
                                                    k.m_islandFlag || (d[f++] = k, k.m_islandFlag = !0)
                                                }
                                            }
                                        }
                                        for (b = b.m_jointList; b; b = b.next) b.joint.m_islandFlag || (k = b.other, k.IsActive() && (c.AddJoint(b.joint), b.joint.m_islandFlag = !0, k.m_islandFlag || (d[f++] = k, k.m_islandFlag = !0)))
                                    }
                                }
                                b = new Qb;
                                c.Solve(b, a, this.m_gravity, this.m_allowSleep);
                                this.m_profile.solveInit +=
                                    b.solveInit;
                                this.m_profile.solveVelocity += b.solveVelocity;
                                this.m_profile.solvePosition += b.solvePosition;
                                for (f = 0; f < c.m_bodyCount; ++f) b = c.m_bodies[f], b.GetType() === h.b2BodyType.b2_staticBody && (b.m_islandFlag = !1)
                            }
                        for (f = 0; f < d.length && d[f]; ++f) d[f] = null;
                        a = new za;
                        for (b = this.m_bodyList; b; b = b.m_next) b.m_islandFlag && b.GetType() !== h.b2BodyType.b2_staticBody && b.SynchronizeFixtures();
                        this.m_contactManager.FindNewContacts();
                        this.m_profile.broadphase = a.GetMilliseconds()
                    };
                    a.prototype.SolveTOI = function(b) {
                        var c =
                            this.m_island;
                        c.Initialize(64, 32, 0, null, this.m_contactManager.m_contactListener);
                        if (this.m_stepComplete) {
                            for (var d = this.m_bodyList; d; d = d.m_next) d.m_islandFlag = !1, d.m_sweep.alpha0 = 0;
                            for (var e = this.m_contactManager.m_contactList; e; e = e.m_next) e.m_toiFlag = !1, e.m_islandFlag = !1, e.m_toiCount = 0, e.m_toi = 1
                        }
                        for (;;) {
                            var f = null;
                            d = 1;
                            for (e = this.m_contactManager.m_contactList; e; e = e.m_next)
                                if (e.IsEnabled() && !(8 < e.m_toiCount)) {
                                    if (e.m_toiFlag) var g = e.m_toi;
                                    else {
                                        g = e.GetFixtureA();
                                        var k = e.GetFixtureB();
                                        if (g.IsSensor() ||
                                            k.IsSensor()) continue;
                                        var l = g.GetBody(),
                                            m = k.GetBody(),
                                            n = l.m_type,
                                            p = m.m_type,
                                            q = l.IsAwake() && n !== h.b2BodyType.b2_staticBody,
                                            r = m.IsAwake() && p !== h.b2BodyType.b2_staticBody;
                                        if (!q && !r) continue;
                                        n = l.IsBullet() || n !== h.b2BodyType.b2_dynamicBody;
                                        p = m.IsBullet() || p !== h.b2BodyType.b2_dynamicBody;
                                        if (!n && !p) continue;
                                        p = l.m_sweep.alpha0;
                                        l.m_sweep.alpha0 < m.m_sweep.alpha0 ? (p = m.m_sweep.alpha0, l.m_sweep.Advance(p)) : m.m_sweep.alpha0 < l.m_sweep.alpha0 && (p = l.m_sweep.alpha0, m.m_sweep.Advance(p));
                                        q = e.GetChildIndexA();
                                        r = e.GetChildIndexB();
                                        n = a.SolveTOI_s_toi_input;
                                        n.proxyA.SetShape(g.GetShape(), q);
                                        n.proxyB.SetShape(k.GetShape(), r);
                                        n.sweepA.Copy(l.m_sweep);
                                        n.sweepB.Copy(m.m_sweep);
                                        n.tMax = 1;
                                        g = a.SolveTOI_s_toi_output;
                                        t(g, n);
                                        k = g.t;
                                        g = g.state === h.b2TOIOutputState.e_touching ? W(p + (1 - p) * k, 1) : 1;
                                        e.m_toi = g;
                                        e.m_toiFlag = !0
                                    }
                                    g < d && (f = e, d = g)
                                }
                            if (null === f || .9999 < d) {
                                this.m_stepComplete = !0;
                                break
                            }
                            e = f.GetFixtureA();
                            g = f.GetFixtureB();
                            e = e.GetBody();
                            g = g.GetBody();
                            k = a.SolveTOI_s_backup1.Copy(e.m_sweep);
                            l = a.SolveTOI_s_backup2.Copy(g.m_sweep);
                            e.Advance(d);
                            g.Advance(d);
                            f.Update(this.m_contactManager.m_contactListener);
                            f.m_toiFlag = !1;
                            ++f.m_toiCount;
                            if (f.IsEnabled() && f.IsTouching()) {
                                e.SetAwake(!0);
                                g.SetAwake(!0);
                                c.Clear();
                                c.AddBody(e);
                                c.AddBody(g);
                                c.AddContact(f);
                                e.m_islandFlag = !0;
                                g.m_islandFlag = !0;
                                f.m_islandFlag = !0;
                                for (k = 0; 2 > k; ++k)
                                    if (f = 0 === k ? e : g, f.m_type === h.b2BodyType.b2_dynamicBody)
                                        for (l = f.m_contactList; l && c.m_bodyCount !== c.m_bodyCapacity && c.m_contactCount !== c.m_contactCapacity; l = l.next) m = l.contact, !m.m_islandFlag && (p = l.other, p.m_type !== h.b2BodyType.b2_dynamicBody ||
                                            f.IsBullet() || p.IsBullet()) && (n = m.m_fixtureB.m_isSensor, m.m_fixtureA.m_isSensor || n || (n = a.SolveTOI_s_backup.Copy(p.m_sweep), p.m_islandFlag || p.Advance(d), m.Update(this.m_contactManager.m_contactListener), m.IsEnabled() ? m.IsTouching() ? (m.m_islandFlag = !0, c.AddContact(m), p.m_islandFlag || (p.m_islandFlag = !0, p.m_type !== h.b2BodyType.b2_staticBody && p.SetAwake(!0), c.AddBody(p))) : (p.m_sweep.Copy(n), p.SynchronizeTransform()) : (p.m_sweep.Copy(n), p.SynchronizeTransform())));
                                f = a.SolveTOI_s_subStep;
                                f.dt = (1 - d) * b.dt;
                                f.inv_dt = 1 / f.dt;
                                f.dtRatio = 1;
                                f.positionIterations = 20;
                                f.velocityIterations = b.velocityIterations;
                                f.particleIterations = b.particleIterations;
                                f.warmStarting = !1;
                                c.SolveTOI(f, e.m_islandIndex, g.m_islandIndex);
                                for (k = 0; k < c.m_bodyCount; ++k)
                                    if (f = c.m_bodies[k], f.m_islandFlag = !1, f.m_type === h.b2BodyType.b2_dynamicBody)
                                        for (f.SynchronizeFixtures(), l = f.m_contactList; l; l = l.next) l.contact.m_toiFlag = !1, l.contact.m_islandFlag = !1;
                                this.m_contactManager.FindNewContacts();
                                if (this.m_subStepping) {
                                    this.m_stepComplete = !1;
                                    break
                                }
                            } else f.SetEnabled(!1),
                                e.m_sweep.Copy(k), g.m_sweep.Copy(l), e.SynchronizeTransform(), g.SynchronizeTransform()
                        }
                    };
                    a.prototype.AddController = function(a) {
                        a.m_next = this.m_controllerList;
                        a.m_prev = null;
                        this.m_controllerList && (this.m_controllerList.m_prev = a);
                        this.m_controllerList = a;
                        ++this.m_controllerCount;
                        return a
                    };
                    a.prototype.RemoveController = function(a) {
                        a.m_prev && (a.m_prev.m_next = a.m_next);
                        a.m_next && (a.m_next.m_prev = a.m_prev);
                        this.m_controllerList === a && (this.m_controllerList = a.m_next);
                        --this.m_controllerCount;
                        a.m_prev = null;
                        a.m_next =
                            null;
                        return a
                    };
                    a.Step_s_step = new Ya;
                    a.Step_s_stepTimer = new za;
                    a.Step_s_timer = new za;
                    a.DrawDebugData_s_color = new pa(0, 0, 0);
                    a.DrawDebugData_s_vs = r.MakeArray(4);
                    a.DrawDebugData_s_xf = new U;
                    a.QueryFixtureShape_s_aabb = new va;
                    a.RayCast_s_input = new Va;
                    a.RayCast_s_output = new bb;
                    a.RayCast_s_point = new r;
                    a.DrawJoint_s_p1 = new r;
                    a.DrawJoint_s_p2 = new r;
                    a.DrawJoint_s_color = new pa(.5, .8, .8);
                    a.DrawJoint_s_c = new pa;
                    a.DrawShape_s_ghostColor = new pa;
                    a.SolveTOI_s_subStep = new Ya;
                    a.SolveTOI_s_backup = new ua;
                    a.SolveTOI_s_backup1 =
                        new ua;
                    a.SolveTOI_s_backup2 = new ua;
                    a.SolveTOI_s_toi_input = new Bb;
                    a.SolveTOI_s_toi_output = new Cb;
                    return a
                }(),
                Mc = function() {
                    return function(a, b) {
                        this.nextController = this.prevController = this.nextBody = this.prevBody = null;
                        this.controller = a;
                        this.body = b
                    }
                }(),
                fb = function() {
                    function a() {
                        this.m_bodyList = null;
                        this.m_bodyCount = 0;
                        this.m_next = this.m_prev = null
                    }
                    a.prototype.GetNext = function() {
                        return this.m_next
                    };
                    a.prototype.GetPrev = function() {
                        return this.m_prev
                    };
                    a.prototype.GetBodyList = function() {
                        return this.m_bodyList
                    };
                    a.prototype.AddBody = function(a) {
                        var b = new Mc(this, a);
                        b.nextBody = this.m_bodyList;
                        b.prevBody = null;
                        this.m_bodyList && (this.m_bodyList.prevBody = b);
                        this.m_bodyList = b;
                        ++this.m_bodyCount;
                        b.nextController = a.m_controllerList;
                        b.prevController = null;
                        a.m_controllerList && (a.m_controllerList.prevController = b);
                        a.m_controllerList = b;
                        ++a.m_controllerCount
                    };
                    a.prototype.RemoveBody = function(a) {
                        if (0 >= this.m_bodyCount) throw Error();
                        for (var b = this.m_bodyList; b && b.body !== a;) b = b.nextBody;
                        if (null === b) throw Error();
                        b.prevBody &&
                            (b.prevBody.nextBody = b.nextBody);
                        b.nextBody && (b.nextBody.prevBody = b.prevBody);
                        this.m_bodyList === b && (this.m_bodyList = b.nextBody);
                        --this.m_bodyCount;
                        b.nextController && (b.nextController.prevController = b.prevController);
                        b.prevController && (b.prevController.nextController = b.nextController);
                        a.m_controllerList === b && (a.m_controllerList = b.nextController);
                        --a.m_controllerCount
                    };
                    a.prototype.Clear = function() {
                        for (; this.m_bodyList;) this.RemoveBody(this.m_bodyList.body);
                        this.m_bodyCount = 0
                    };
                    return a
                }(),
                Zd = function(a) {
                    function b() {
                        var b =
                            null !== a && a.apply(this, arguments) || this;
                        b.normal = new r(0, 1);
                        b.offset = 0;
                        b.density = 0;
                        b.velocity = new r(0, 0);
                        b.linearDrag = 0;
                        b.angularDrag = 0;
                        b.useDensity = !1;
                        b.useWorldGravity = !0;
                        b.gravity = new r(0, 0);
                        return b
                    }
                    C(b, a);
                    b.prototype.Step = function(a) {
                        if (this.m_bodyList)
                            for (this.useWorldGravity && this.gravity.Copy(this.m_bodyList.body.GetWorld().GetGravity()), a = this.m_bodyList; a; a = a.nextBody) {
                                var b = a.body;
                                if (b.IsAwake()) {
                                    for (var c = new r, d = new r, e = 0, f = 0, g = b.GetFixtureList(); g; g = g.m_next) {
                                        var h = new r,
                                            k = g.GetShape().ComputeSubmergedArea(this.normal,
                                                this.offset, b.GetTransform(), h);
                                        e += k;
                                        c.x += k * h.x;
                                        c.y += k * h.y;
                                        var l = this.useDensity ? g.GetDensity() : 1;
                                        f += k * l;
                                        d.x += k * h.x * l;
                                        d.y += k * h.y * l
                                    }
                                    c.x /= e;
                                    c.y /= e;
                                    d.x /= f;
                                    d.y /= f;
                                    1E-5 > e || (f = this.gravity.Clone().SelfNeg(), f.SelfMul(this.density * e), b.ApplyForce(f, d), d = b.GetLinearVelocityFromWorldPoint(c, new r), d.SelfSub(this.velocity), d.SelfMul(-this.linearDrag * e), b.ApplyForce(d, c), b.ApplyTorque(-b.GetInertia() / b.GetMass() * e * b.GetAngularVelocity() * this.angularDrag))
                                }
                            }
                    };
                    b.prototype.Draw = function(a) {
                        var b = new r,
                            c = new r;
                        b.x = this.normal.x * this.offset + 100 * this.normal.y;
                        b.y = this.normal.y * this.offset - 100 * this.normal.x;
                        c.x = this.normal.x * this.offset - 100 * this.normal.y;
                        c.y = this.normal.y * this.offset + 100 * this.normal.x;
                        var d = new pa(0, 0, .8);
                        a.DrawSegment(b, c, d)
                    };
                    return b
                }(fb),
                $d = function(a) {
                    function b() {
                        var b = null !== a && a.apply(this, arguments) || this;
                        b.A = new r(0, 0);
                        return b
                    }
                    C(b, a);
                    b.prototype.Step = function(a) {
                        a = r.MulSV(a.dt, this.A, b.Step_s_dtA);
                        for (var c = this.m_bodyList; c; c = c.nextBody) {
                            var d = c.body;
                            d.IsAwake() && d.SetLinearVelocity(r.AddVV(d.GetLinearVelocity(),
                                a, r.s_t0))
                        }
                    };
                    b.prototype.Draw = function(a) {};
                    b.Step_s_dtA = new r;
                    return b
                }(fb),
                ae = function(a) {
                    function b() {
                        var b = null !== a && a.apply(this, arguments) || this;
                        b.F = new r(0, 0);
                        return b
                    }
                    C(b, a);
                    b.prototype.Step = function(a) {
                        for (a = this.m_bodyList; a; a = a.nextBody) {
                            var b = a.body;
                            b.IsAwake() && b.ApplyForce(this.F, b.GetWorldCenter())
                        }
                    };
                    b.prototype.Draw = function(a) {};
                    return b
                }(fb),
                be = function(a) {
                    function b() {
                        var b = null !== a && a.apply(this, arguments) || this;
                        b.G = 1;
                        b.invSqr = !0;
                        return b
                    }
                    C(b, a);
                    b.prototype.Step = function(a) {
                        if (this.invSqr)
                            for (var c =
                                    this.m_bodyList; c; c = c.nextBody) {
                                var d = c.body;
                                var e = d.GetWorldCenter();
                                var f = d.GetMass();
                                for (var g = this.m_bodyList; g && g !== c; g = g.nextBody) {
                                    var h = g.body;
                                    var k = h.GetWorldCenter();
                                    var l = h.GetMass();
                                    var m = k.x - e.x;
                                    var n = k.y - e.y;
                                    a = m * m + n * n;
                                    1E-5 > a || (n = b.Step_s_f.Set(m, n), n.SelfMul(this.G / a / ea(a) * f * l), d.IsAwake() && d.ApplyForce(n, e), h.IsAwake() && h.ApplyForce(n.SelfMul(-1), k))
                                }
                            } else
                                for (c = this.m_bodyList; c; c = c.nextBody)
                                    for (d = c.body, e = d.GetWorldCenter(), f = d.GetMass(), g = this.m_bodyList; g && g !== c; g = g.nextBody) h = g.body,
                                        k = h.GetWorldCenter(), l = h.GetMass(), m = k.x - e.x, n = k.y - e.y, a = m * m + n * n, 1E-5 > a || (n = b.Step_s_f.Set(m, n), n.SelfMul(this.G / a * f * l), d.IsAwake() && d.ApplyForce(n, e), h.IsAwake() && h.ApplyForce(n.SelfMul(-1), k))
                    };
                    b.prototype.Draw = function(a) {};
                    b.Step_s_f = new r;
                    return b
                }(fb),
                ce = function(a) {
                    function b() {
                        var b = null !== a && a.apply(this, arguments) || this;
                        b.T = new ka;
                        b.maxTimestep = 0;
                        return b
                    }
                    C(b, a);
                    b.prototype.Step = function(a) {
                        a = a.dt;
                        if (!(1E-5 >= a)) {
                            a > this.maxTimestep && 0 < this.maxTimestep && (a = this.maxTimestep);
                            for (var c = this.m_bodyList; c; c =
                                c.nextBody) {
                                var d = c.body;
                                if (d.IsAwake()) {
                                    var e = d.GetWorldVector(ka.MulMV(this.T, d.GetLocalVector(d.GetLinearVelocity(), r.s_t0), r.s_t1), b.Step_s_damping);
                                    d.SetLinearVelocity(r.AddVV(d.GetLinearVelocity(), r.MulSV(a, e, r.s_t0), r.s_t1))
                                }
                            }
                        }
                    };
                    b.prototype.Draw = function(a) {};
                    b.prototype.SetAxisAligned = function(a, b) {
                        this.T.ex.x = -a;
                        this.T.ex.y = 0;
                        this.T.ey.x = 0;
                        this.T.ey.y = -b;
                        this.maxTimestep = 0 < a || 0 < b ? 1 / X(a, b) : 0
                    };
                    b.Step_s_damping = new r;
                    return b
                }(fb),
                de = function() {
                    return function() {
                        this.vertices = [];
                        this.count =
                            0;
                        this.masses = [];
                        this.gravity = new r(0, 0);
                        this.damping = .1;
                        this.k2 = .9;
                        this.k3 = .1
                    }
                }(),
                ee = function() {
                    function a() {
                        this.m_count = 0;
                        this.m_ps = [];
                        this.m_p0s = [];
                        this.m_vs = [];
                        this.m_ims = [];
                        this.m_Ls = [];
                        this.m_as = [];
                        this.m_gravity = new r;
                        this.m_damping = 0;
                        this.m_k2 = 1;
                        this.m_k3 = .1
                    }
                    a.prototype.GetVertexCount = function() {
                        return this.m_count
                    };
                    a.prototype.GetVertices = function() {
                        return this.m_ps
                    };
                    a.prototype.Initialize = function(a) {
                        this.m_count = a.count;
                        this.m_ps = r.MakeArray(this.m_count);
                        this.m_p0s = r.MakeArray(this.m_count);
                        this.m_vs = r.MakeArray(this.m_count);
                        this.m_ims = g(this.m_count);
                        for (var b = 0; b < this.m_count; ++b) {
                            this.m_ps[b].Copy(a.vertices[b]);
                            this.m_p0s[b].Copy(a.vertices[b]);
                            this.m_vs[b].SetZero();
                            var c = a.masses[b];
                            this.m_ims[b] = 0 < c ? 1 / c : 0
                        }
                        var d = this.m_count - 1;
                        c = this.m_count - 2;
                        this.m_Ls = g(d);
                        this.m_as = g(c);
                        for (b = 0; b < d; ++b) {
                            var e = this.m_ps[b];
                            var f = this.m_ps[b + 1];
                            this.m_Ls[b] = r.DistanceVV(e, f)
                        }
                        for (b = 0; b < c; ++b) e = this.m_ps[b], f = this.m_ps[b + 1], d = this.m_ps[b + 2], e = r.SubVV(f, e, r.s_t0), d = r.SubVV(d, f, r.s_t1), f = r.CrossVV(e,
                            d), e = r.DotVV(e, d), this.m_as[b] = ra(f, e);
                        this.m_gravity.Copy(a.gravity);
                        this.m_damping = a.damping;
                        this.m_k2 = a.k2;
                        this.m_k3 = a.k3
                    };
                    a.prototype.Step = function(a, b) {
                        if (0 !== a) {
                            for (var c = Math.exp(-a * this.m_damping), d = 0; d < this.m_count; ++d) this.m_p0s[d].Copy(this.m_ps[d]), 0 < this.m_ims[d] && this.m_vs[d].SelfMulAdd(a, this.m_gravity), this.m_vs[d].SelfMul(c), this.m_ps[d].SelfMulAdd(a, this.m_vs[d]);
                            for (d = 0; d < b; ++d) this.SolveC2(), this.SolveC3(), this.SolveC2();
                            a = 1 / a;
                            for (d = 0; d < this.m_count; ++d) r.MulSV(a, r.SubVV(this.m_ps[d],
                                this.m_p0s[d], r.s_t0), this.m_vs[d])
                        }
                    };
                    a.prototype.SolveC2 = function() {
                        for (var b = this.m_count - 1, c = 0; c < b; ++c) {
                            var d = this.m_ps[c],
                                e = this.m_ps[c + 1],
                                f = r.SubVV(e, d, a.s_d),
                                g = f.Normalize(),
                                h = this.m_ims[c],
                                k = this.m_ims[c + 1];
                            if (0 !== h + k) {
                                var l = k / (h + k);
                                d.SelfMulSub(h / (h + k) * this.m_k2 * (this.m_Ls[c] - g), f);
                                e.SelfMulAdd(this.m_k2 * l * (this.m_Ls[c] - g), f)
                            }
                        }
                    };
                    a.prototype.SetAngle = function(a) {
                        for (var b = this.m_count - 2, c = 0; c < b; ++c) this.m_as[c] = a
                    };
                    a.prototype.SolveC3 = function() {
                        for (var b = this.m_count - 2, c = 0; c < b; ++c) {
                            var d = this.m_ps[c],
                                e = this.m_ps[c + 1],
                                f = this.m_ps[c + 2],
                                g = this.m_ims[c],
                                h = this.m_ims[c + 1],
                                k = this.m_ims[c + 2],
                                l = r.SubVV(e, d, a.s_d1),
                                m = r.SubVV(f, e, a.s_d2),
                                n = l.LengthSquared(),
                                p = m.LengthSquared();
                            if (0 !== n * p) {
                                var q = r.CrossVV(l, m),
                                    t = r.DotVV(l, m);
                                q = ra(q, t);
                                l = r.MulSV(-1 / n, l.SelfSkew(), a.s_Jd1);
                                n = r.MulSV(1 / p, m.SelfSkew(), a.s_Jd2);
                                m = r.NegV(l, a.s_J1);
                                p = r.SubVV(l, n, a.s_J2);
                                l = n;
                                n = g * r.DotVV(m, m) + h * r.DotVV(p, p) + k * r.DotVV(l, l);
                                if (0 !== n) {
                                    n = 1 / n;
                                    for (t = q - this.m_as[c]; 3.14159265359 < t;) q -= 6.28318530718, t = q - this.m_as[c];
                                    for (; - 3.14159265359 >
                                        t;) q += 6.28318530718, t = q - this.m_as[c];
                                    q = -this.m_k3 * n * t;
                                    d.SelfMulAdd(g * q, m);
                                    e.SelfMulAdd(h * q, p);
                                    f.SelfMulAdd(k * q, l)
                                }
                            }
                        }
                    };
                    a.prototype.Draw = function(a) {
                        for (var b = new pa(.4, .5, .7), c = 0; c < this.m_count - 1; ++c) a.DrawSegment(this.m_ps[c], this.m_ps[c + 1], b)
                    };
                    a.s_d = new r;
                    a.s_d1 = new r;
                    a.s_d2 = new r;
                    a.s_Jd1 = new r;
                    a.s_Jd2 = new r;
                    a.s_J1 = new r;
                    a.s_J2 = new r;
                    return a
                }();
            h.b2Assert = function(a) {
                for (var b = [], c = 1; c < arguments.length; c++) b[c - 1] = arguments[c];
                if (!a) throw new(Error.bind.apply(Error, [void 0].concat(b)));
            };
            h.b2Maybe =
                e;
            h.b2_maxFloat = 1E37;
            h.b2_epsilon = 1E-5;
            h.b2_epsilon_sq = Q;
            h.b2_pi = 3.14159265359;
            h.b2_maxManifoldPoints = 2;
            h.b2_maxPolygonVertices = 8;
            h.b2_aabbExtension = .1;
            h.b2_aabbMultiplier = 2;
            h.b2_linearSlop = .008;
            h.b2_angularSlop = V;
            h.b2_polygonRadius = .016;
            h.b2_maxSubSteps = 8;
            h.b2_maxTOIContacts = 32;
            h.b2_velocityThreshold = 1;
            h.b2_maxLinearCorrection = .2;
            h.b2_maxAngularCorrection = ba;
            h.b2_maxTranslation = 2;
            h.b2_maxTranslationSquared = 4;
            h.b2_maxRotation = 1.570796326795;
            h.b2_maxRotationSquared = 2.4674011002726646;
            h.b2_baumgarte =
                .2;
            h.b2_toiBaumgarte = .75;
            h.b2_invalidParticleIndex = -1;
            h.b2_maxParticleIndex = 2147483647;
            h.b2_particleStride = .75;
            h.b2_minParticleWeight = 1;
            h.b2_maxParticlePressure = .25;
            h.b2_maxParticleForce = .5;
            h.b2_maxTriadDistance = 2;
            h.b2_maxTriadDistanceSquared = 4;
            h.b2_minParticleSystemBufferCapacity = 256;
            h.b2_barrierCollisionTime = 2.5;
            h.b2_timeToSleep = .5;
            h.b2_linearSleepTolerance = .01;
            h.b2_angularSleepTolerance = da;
            h.b2Alloc = function(a) {
                return null
            };
            h.b2Free = function(a) {};
            h.b2Log = function(a) {
                for (var b = 1; b < arguments.length; b++);
            };
            h.b2Version = T;
            h.b2_version = N;
            h.b2_branch = "master";
            h.b2_commit = "fbf51801d80fc389d43dc46524520e89043b6faf";
            h.b2ParseInt = function(a) {
                return parseInt(a, 10)
            };
            h.b2ParseUInt = function(a) {
                return Math.abs(parseInt(a, 10))
            };
            h.b2MakeArray = d;
            h.b2MakeNullArray = function(a) {
                for (var b = [], c = 0; c < a; ++c) b.push(null);
                return b
            };
            h.b2MakeNumberArray = g;
            h.b2_pi_over_180 = fa;
            h.b2_180_over_pi = 57.29577951307855;
            h.b2_two_pi = 6.28318530718;
            h.b2Abs = Z;
            h.b2Min = W;
            h.b2Max = X;
            h.b2Clamp = c;
            h.b2Swap = function(a, b) {
                var c = a[0];
                a[0] = b[0];
                b[0] =
                    c
            };
            h.b2IsValid = la;
            h.b2Sq = a;
            h.b2InvSqrt = b;
            h.b2Sqrt = ea;
            h.b2Pow = ja;
            h.b2DegToRad = function(a) {
                return a * fa
            };
            h.b2RadToDeg = function(a) {
                return 57.29577951307855 * a
            };
            h.b2Cos = oa;
            h.b2Sin = sa;
            h.b2Acos = ia;
            h.b2Asin = ca;
            h.b2Atan2 = ra;
            h.b2NextPowerOfTwo = function(a) {
                a |= a >> 1 & 2147483647;
                a |= a >> 2 & 1073741823;
                a |= a >> 4 & 268435455;
                a |= a >> 8 & 16777215;
                return (a | a >> 16 & 65535) + 1
            };
            h.b2IsPowerOfTwo = function(a) {
                return 0 < a && 0 === (a & a - 1)
            };
            h.b2Random = function() {
                return 2 * Math.random() - 1
            };
            h.b2RandomRange = function(a, b) {
                return (b - a) * Math.random() +
                    a
            };
            h.b2Vec2 = r;
            h.b2Vec2_zero = Ca;
            h.b2Vec3 = na;
            h.b2Mat22 = ka;
            h.b2Mat33 = xa;
            h.b2Rot = P;
            h.b2Transform = U;
            h.b2Sweep = ua;
            h.b2Color = pa;
            h.b2Draw = Ha;
            h.b2Timer = za;
            h.b2Counter = Ia;
            h.b2GrowableStack = Ja;
            h.b2BlockAllocator = Fa;
            h.b2StackAllocator = Sa;
            h.b2ContactFeature = ib;
            h.b2ContactID = Ua;
            h.b2ManifoldPoint = jb;
            h.b2Manifold = ab;
            h.b2WorldManifold = kb;
            h.b2GetPointStates = function(a, b, c, d) {
                var e;
                for (e = 0; e < c.pointCount; ++e) {
                    var f = c.points[e].id;
                    f = f.key;
                    a[e] = h.b2PointState.b2_removeState;
                    for (var g = 0, k = d.pointCount; g < k; ++g)
                        if (d.points[g].id.key ===
                            f) {
                            a[e] = h.b2PointState.b2_persistState;
                            break
                        }
                }
                for (; 2 > e; ++e) a[e] = h.b2PointState.b2_nullState;
                for (e = 0; e < d.pointCount; ++e)
                    for (f = d.points[e].id, f = f.key, b[e] = h.b2PointState.b2_addState, g = 0, k = c.pointCount; g < k; ++g)
                        if (c.points[g].id.key === f) {
                            b[e] = h.b2PointState.b2_persistState;
                            break
                        }
                for (; 2 > e; ++e) b[e] = h.b2PointState.b2_nullState
            };
            h.b2ClipVertex = La;
            h.b2RayCastInput = Va;
            h.b2RayCastOutput = bb;
            h.b2AABB = va;
            h.b2TestOverlapAABB = f;
            h.b2ClipSegmentToLine = m;
            h.b2TestOverlapShape = q;
            h.b2DistanceProxy = ta;
            h.b2SimplexCache =
                Y;
            h.b2DistanceInput = Ma;
            h.b2DistanceOutput = Na;
            h.b2ShapeCastInput = Ta;
            h.b2ShapeCastOutput = wa;
            h.b2_gjk_reset = function() {
                h.b2_gjkCalls = 0;
                h.b2_gjkIters = 0;
                h.b2_gjkMaxIters = 0
            };
            h.b2SimplexVertex = ma;
            h.b2Simplex = ya;
            h.b2Distance = l;
            h.b2ShapeCast = function(a, b) {
                a.iterations = 0;
                a.lambda = 1;
                a.normal.SetZero();
                a.point.SetZero();
                var c = b.proxyA,
                    d = b.proxyB,
                    e = X(c.m_radius, .016),
                    f = X(d.m_radius, .016),
                    g = e + f;
                e = b.transformA;
                f = b.transformB;
                b = b.translationB;
                var h = rb.Set(0, 0),
                    k = 0;
                Ba.m_count = 0;
                var l = Ba.m_vertices,
                    m = c.GetSupport(P.MulTRV(e.q,
                        r.NegV(b, r.s_t1), r.s_t0)),
                    n = U.MulXV(e, c.GetVertex(m), gb),
                    p = d.GetSupport(P.MulTRV(f.q, b, r.s_t0)),
                    q = U.MulXV(f, d.GetVertex(p), hb),
                    t = r.SubVV(n, q, sb);
                g = X(.016, g - .016);
                for (var u = 0; 20 > u && .004 < Z(t.Length() - g);) {
                    a.iterations += 1;
                    m = c.GetSupport(P.MulTRV(e.q, r.NegV(t, r.s_t1), r.s_t0));
                    n = U.MulXV(e, c.GetVertex(m), gb);
                    p = d.GetSupport(P.MulTRV(f.q, t, r.s_t0));
                    q = U.MulXV(f, d.GetVertex(p), hb);
                    var v = r.SubVV(n, q, tb);
                    t.Normalize();
                    v = r.DotVV(t, v);
                    var w = r.DotVV(t, b);
                    if (v - g > k * w) {
                        if (0 >= w) return !1;
                        k = (v - g) / w;
                        if (1 < k) return !1;
                        h.Copy(t).SelfNeg();
                        Ba.m_count = 0
                    }
                    v = l[Ba.m_count];
                    v.indexA = p;
                    v.wA.Copy(q).SelfMulAdd(k, b);
                    v.indexB = m;
                    v.wB.Copy(n);
                    v.w.Copy(v.wB).SelfSub(v.wA);
                    v.a = 1;
                    Ba.m_count += 1;
                    switch (Ba.m_count) {
                        case 2:
                            Ba.Solve2();
                            break;
                        case 3:
                            Ba.Solve3()
                    }
                    if (3 === Ba.m_count) return !1;
                    Ba.GetClosestPoint(t);
                    ++u
                }
                Ba.GetWitnessPoints(ub, vb);
                0 < t.LengthSquared() && (h.Copy(t).SelfNeg(), h.Normalize());
                a.normal.Copy(h);
                a.lambda = k;
                a.iterations = u;
                return !0
            };
            h.b2Pair = xb;
            h.b2BroadPhase = yb;
            h.b2PairLessThan = p;
            h.b2TreeNode = ha;
            h.b2DynamicTree = wb;
            h.b2_toi_reset = function() {
                h.b2_toiTime =
                    0;
                h.b2_toiMaxTime = 0;
                h.b2_toiCalls = 0;
                h.b2_toiIters = 0;
                h.b2_toiMaxIters = 0;
                h.b2_toiRootIters = 0;
                h.b2_toiMaxRootIters = 0
            };
            h.b2TOIInput = Bb;
            h.b2TOIOutput = Cb;
            h.b2SeparationFunction = ac;
            h.b2TimeOfImpact = t;
            h.b2CollideCircles = x;
            h.b2CollidePolygonAndCircle = z;
            h.b2CollidePolygons = A;
            h.b2CollideEdgeAndCircle = B;
            h.b2CollideEdgeAndPolygon = y;
            h.b2MassData = zb;
            h.b2Shape = Xa;
            h.b2CircleShape = Fd;
            h.b2PolygonShape = Gd;
            h.b2EdgeShape = db;
            h.b2ChainShape = Hd;
            h.b2Filter = Ab;
            h.b2FixtureDef = dc;
            h.b2FixtureProxy = Gb;
            h.b2Fixture = ec;
            h.b2BodyDef =
                Id;
            h.b2Body = fc;
            h.b2World = Yd;
            h.b2DestructionListener = Vd;
            h.b2ContactFilter = vc;
            h.b2ContactImpulse = wc;
            h.b2ContactListener = xc;
            h.b2QueryCallback = eb;
            h.b2RayCastCallback = Wd;
            h.b2Island = Dc;
            h.b2Profile = Qb;
            h.b2TimeStep = Ya;
            h.b2Position = Rb;
            h.b2Velocity = Sb;
            h.b2SolverData = zc;
            h.b2ContactManager = yc;
            h.b2MixFriction = function(a, b) {
                return ea(a * b)
            };
            h.b2MixRestitution = F;
            h.b2ContactEdge = Ib;
            h.b2Contact = Ra;
            h.b2ContactRegister = tc;
            h.b2ContactFactory = uc;
            h.g_blockSolve = !1;
            h.b2VelocityConstraintPoint = Ac;
            h.b2ContactVelocityConstraint =
                Tb;
            h.b2ContactPositionConstraint = Ub;
            h.b2ContactSolverDef = Bc;
            h.b2PositionSolverManifold = Vb;
            h.b2ContactSolver = Cc;
            h.b2CircleContact = Jb;
            h.b2PolygonContact = Kb;
            h.b2PolygonAndCircleContact = Lb;
            h.b2EdgeAndCircleContact = Mb;
            h.b2EdgeAndPolygonContact = Nb;
            h.b2ChainAndCircleContact = Ob;
            h.b2ChainAndPolygonContact = Pb;
            h.b2Jacobian = Jd;
            h.b2JointEdge = Hb;
            h.b2JointDef = Da;
            h.b2Joint = Ea;
            h.b2AreaJointDef = Kd;
            h.b2AreaJoint = ic;
            h.b2DistanceJointDef = gc;
            h.b2DistanceJoint = hc;
            h.b2FrictionJointDef = Ld;
            h.b2FrictionJoint = jc;
            h.b2GearJointDef =
                Md;
            h.b2GearJoint = kc;
            h.b2MotorJointDef = Nd;
            h.b2MotorJoint = lc;
            h.b2MouseJointDef = Od;
            h.b2MouseJoint = mc;
            h.b2PrismaticJointDef = Pd;
            h.b2PrismaticJoint = nc;
            h.b2_minPulleyLength = 2;
            h.b2PulleyJointDef = Qd;
            h.b2PulleyJoint = oc;
            h.b2RevoluteJointDef = Rd;
            h.b2RevoluteJoint = pc;
            h.b2RopeJointDef = Sd;
            h.b2RopeJoint = qc;
            h.b2WeldJointDef = Td;
            h.b2WeldJoint = rc;
            h.b2WheelJointDef = Ud;
            h.b2WheelJoint = sc;
            h.b2ControllerEdge = Mc;
            h.b2Controller = fb;
            h.b2BuoyancyController = Zd;
            h.b2ConstantAccelController = $d;
            h.b2ConstantForceController = ae;
            h.b2GravityController =
                be;
            h.b2TensorDampingController = ce;
            h.b2ParticleDef = Wb;
            h.b2CalculateParticleIterations = G;
            h.b2ParticleHandle = Ec;
            h.b2ParticleGroupDef = Fc;
            h.b2ParticleGroup = Gc;
            h.b2GrowableBuffer = Za;
            h.b2FixtureParticleQueryCallback = Yb;
            h.b2ParticleContact = Hc;
            h.b2ParticleBodyContact = Ic;
            h.b2ParticlePair = Jc;
            h.b2ParticleTriad = Kc;
            h.b2ParticleSystemDef = Lc;
            h.b2RopeDef = de;
            h.b2Rope = ee;
            Object.defineProperty(h, "__esModule", {
                value: !0
            })
        })
    }, {}],
    401: [function(g, q, m) {
        m = "undefined" === typeof window ? global : window;
        m.cc = m.cc || {};
        cc.internal =
            cc.internal || {};
        g("./predefine");
        g("./polyfill/string");
        g("./polyfill/misc");
        g("./polyfill/array");
        g("./polyfill/object");
        g("./polyfill/array-buffer");
        g("./polyfill/number");
        !0;
        g("./polyfill/typescript");
        g("./cocos2d/core/predefine");
        !0;
        g("./cocos2d");
        g("./extends");
        !1;
        q.exports = m.cc
    }, {
        "./cocos2d": 338,
        "./cocos2d/core/predefine": 252,
        "./extends": 388,
        "./package": void 0,
        "./polyfill/array": 403,
        "./polyfill/array-buffer": 402,
        "./polyfill/misc": 404,
        "./polyfill/number": 405,
        "./polyfill/object": 406,
        "./polyfill/string": 407,
        "./polyfill/typescript": 408,
        "./predefine": 409
    }],
    402: [function(g, q, m) {
        if (!ArrayBuffer.isView) {
            var h = Object.getPrototypeOf(Int8Array);
            ArrayBuffer.isView = "function" === typeof h ? function(e) {
                return e instanceof h
            } : function(e) {
                if ("object" !== typeof e) return !1;
                e = e.constructor;
                return e === Float64Array || e === Float32Array || e === Uint8Array || e === Uint32Array || e === Int8Array
            }
        }
    }, {}],
    403: [function(g, q, m) {
        Array.isArray || (Array.isArray = function(g) {
            return "[object Array]" === Object.prototype.toString.call(g)
        });
        Array.prototype.find ||
            (Array.prototype.find = function(g) {
                for (var e = this.length, d = 0; d < e; d++) {
                    var h = this[d];
                    if (g.call(this, h, d, this)) return h
                }
            });
        Array.prototype.includes || (Array.prototype.includes = function(g) {
            return -1 !== this.indexOf(g)
        })
    }, {}],
    404: [function(g, q, m) {
        Math.sign || (Math.sign = function(d) {
            d = +d;
            return 0 === d || isNaN(d) ? d : 0 < d ? 1 : -1
        });
        Math.log2 || (Math.log2 = function(d) {
            return Math.log(d) * Math.LOG2E
        });
        Number.isInteger || (Number.isInteger = function(d) {
            return "number" === typeof d && isFinite(d) && Math.floor(d) === d
        });
        if (!1, !console.time) {
            var h =
                window.performance || Date,
                e = Object.create(null);
            console.time = function(d) {
                e[d] = h.now()
            };
            console.timeEnd = function(d) {
                var g = e[d];
                g = h.now() - g;
                console.log(d + ": " + g + "ms")
            }
        }
    }, {}],
    405: [function(g, q, m) {
        Number.parseFloat = Number.parseFloat || parseFloat;
        Number.parseInt = Number.parseInt || parseInt
    }, {}],
    406: [function(g, q, m) {
        Object.assign || (Object.assign = function(g, e) {
            return cc.js.mixin(g, e)
        });
        Object.getOwnPropertyDescriptors || (Object.getOwnPropertyDescriptors = function(g) {
            var e = {},
                d = Object.getOwnPropertyNames(g);
            Object.getOwnPropertySymbols &&
                (d = d.concat(Object.getOwnPropertySymbols(g)));
            for (var h = 0; h < d.length; ++h) {
                var c = d[h];
                e[c] = Object.getOwnPropertyDescriptor(g, c)
            }
            return e
        })
    }, {}],
    407: [function(g, q, m) {
        String.prototype.startsWith || (String.prototype.startsWith = function(g, e) {
            e = e || 0;
            return this.lastIndexOf(g, e) === e
        });
        String.prototype.endsWith || (String.prototype.endsWith = function(g, e) {
            ("undefined" === typeof e || e > this.length) && (e = this.length);
            e -= g.length;
            g = this.indexOf(g, e);
            return -1 !== g && g === e
        });
        String.prototype.trimLeft || (String.prototype.trimLeft =
            function() {
                return this.replace(/^\s+/, "")
            })
    }, {}],
    408: [function(g, q, m) {
        var h = Object.setPrototypeOf || {
            __proto__: []
        }
        instanceof Array && function(d, e) {
            d.__proto__ = e
        } || function(d, e) {
            for (var c in e) e.hasOwnProperty(c) && (d[c] = e[c])
        };
        window.__extends = function(d, e) {
            function c() {
                this.constructor = d
            }
            h(d, e);
            d.prototype = null === e ? Object.create(e) : (c.prototype = e.prototype, new c)
        };
        window.__assign = Object.assign || function(d) {
            for (var e, c = 1, a = arguments.length; c < a; c++) {
                e = arguments[c];
                for (var b in e) Object.prototype.hasOwnProperty.call(e,
                    b) && (d[b] = e[b])
            }
            return d
        };
        window.__rest = function(d, e) {
            var c = {},
                a;
            for (a in d) Object.prototype.hasOwnProperty.call(d, a) && 0 > e.indexOf(a) && (c[a] = d[a]);
            if (null != d && "function" === typeof Object.getOwnPropertySymbols) {
                var b = 0;
                for (a = Object.getOwnPropertySymbols(d); b < a.length; b++) 0 > e.indexOf(a[b]) && Object.prototype.propertyIsEnumerable.call(d, a[b]) && (c[a[b]] = d[a[b]])
            }
            return c
        };
        window.__decorate = function(d, e, c, a) {
            var b = arguments.length,
                g = 3 > b ? e : null === a ? a = Object.getOwnPropertyDescriptor(e, c) : a,
                f;
            if ("object" ===
                typeof Reflect && "function" === typeof Reflect.decorate) g = Reflect.decorate(d, e, c, a);
            else
                for (var h = d.length - 1; 0 <= h; h--)(f = d[h]) && (g = (3 > b ? f(g) : 3 < b ? f(e, c, g) : f(e, c)) || g);
            return 3 < b && g && Object.defineProperty(e, c, g), g
        };
        window.__param = function(d, e) {
            return function(c, a) {
                e(c, a, d)
            }
        };
        window.__metadata = function(d, e) {
            if ("object" === typeof Reflect && "function" === typeof Reflect.metadata) return Reflect.metadata(d, e)
        };
        window.__awaiter = function(d, e, c, a) {
            function b(a) {
                return a instanceof c ? a : new c(function(b) {
                    b(a)
                })
            }
            return new(c ||
                (c = Promise))(function(c, f) {
                function g(b) {
                    try {
                        k(a.next(b))
                    } catch (t) {
                        f(t)
                    }
                }

                function h(b) {
                    try {
                        k(a["throw"](b))
                    } catch (t) {
                        f(t)
                    }
                }

                function k(a) {
                    a.done ? c(a.value) : b(a.value).then(g, h)
                }
                k((a = a.apply(d, e || [])).next())
            })
        };
        window.__generator = function(d, e) {
            function c(b) {
                return function(c) {
                    return a([b, c])
                }
            }

            function a(a) {
                if (g) throw new TypeError("Generator is already executing.");
                for (; b;) try {
                    if (g = 1, f && (h = 2 & a[0] ? f["return"] : a[0] ? f["throw"] || ((h = f["return"]) && h.call(f), 0) : f.next) && !(h = h.call(f, a[1])).done) return h;
                    (f = 0, h) && (a = [2 & a[0], h.value]);
                    switch (a[0]) {
                        case 0:
                        case 1:
                            h = a;
                            break;
                        case 4:
                            return b.label++, {
                                value: a[1],
                                done: !1
                            };
                        case 5:
                            b.label++;
                            f = a[1];
                            a = [0];
                            continue;
                        case 7:
                            a = b.ops.pop();
                            b.trys.pop();
                            continue;
                        default:
                            if (!(h = b.trys, h = 0 < h.length && h[h.length - 1]) && (6 === a[0] || 2 === a[0])) {
                                b = 0;
                                continue
                            }
                            if (3 === a[0] && (!h || a[1] > h[0] && a[1] < h[3])) b.label = a[1];
                            else if (6 === a[0] && b.label < h[1]) b.label = h[1], h = a;
                            else if (h && b.label < h[2]) b.label = h[2], b.ops.push(a);
                            else {
                                h[2] && b.ops.pop();
                                b.trys.pop();
                                continue
                            }
                    }
                    a = e.call(d, b)
                } catch (p) {
                    a = [6, p], f = 0
                } finally {
                    g = h = 0
                }
                if (5 & a[0]) throw a[1];
                return {
                    value: a[0] ? a[1] : void 0,
                    done: !0
                }
            }
            var b = {
                    label: 0,
                    sent: function() {
                        if (1 & h[0]) throw h[1];
                        return h[1]
                    },
                    trys: [],
                    ops: []
                },
                g, f, h, k;
            $jscomp.initSymbol();
            $jscomp.initSymbol();
            $jscomp.initSymbolIterator();
            return k = {
                next: c(0),
                throw: c(1),
                return: c(2)
            }, "function" === typeof Symbol && (k[Symbol.iterator] = function() {
                return this
            }), k
        };
        window.__exportStar = function(d, e) {
            for (var c in d) "default" === c || Object.prototype.hasOwnProperty.call(e, c) || __createBinding(e, d, c)
        };
        window.__createBinding =
            Object.create ? function(d, e, c, a) {
                void 0 === a && (a = c);
                Object.defineProperty(d, a, {
                    enumerable: !0,
                    get: function() {
                        return e[c]
                    }
                })
            } : function(d, e, c, a) {
                void 0 === a && (a = c);
                d[a] = e[c]
            };
        window.__values = function(d) {
            $jscomp.initSymbol();
            $jscomp.initSymbol();
            $jscomp.initSymbolIterator();
            var e = "function" === typeof Symbol && Symbol.iterator,
                c = e && d[e],
                a = 0;
            if (c) return c.call(d);
            if (d && "number" === typeof d.length) return {
                next: function() {
                    d && a >= d.length && (d = void 0);
                    return {
                        value: d && d[a++],
                        done: !d
                    }
                }
            };
            throw new TypeError(e ? "Object is not iterable." :
                "Symbol.iterator is not defined.");
        };
        window.__read = function(d, e) {
            $jscomp.initSymbol();
            $jscomp.initSymbol();
            $jscomp.initSymbolIterator();
            var c = "function" === typeof Symbol && d[Symbol.iterator];
            if (!c) return d;
            d = c.call(d);
            var a, b = [];
            try {
                for (;
                    (void 0 === e || 0 < e--) && !(a = d.next()).done;) b.push(a.value)
            } catch (f) {
                var g = {
                    error: f
                }
            } finally {
                try {
                    a && !a.done && (c = d["return"]) && c.call(d)
                } finally {
                    if (g) throw g.error;
                }
            }
            return b
        };
        window.__spread = function() {
            for (var d = [], e = 0; e < arguments.length; e++) d = d.concat(__read(arguments[e]));
            return d
        };
        window.__spreadArrays = function() {
            for (var d = 0, e = 0, c = arguments.length; e < c; e++) d += arguments[e].length;
            d = Array(d);
            var a = 0;
            for (e = 0; e < c; e++)
                for (var b = arguments[e], g = 0, f = b.length; g < f; g++, a++) d[a] = b[g];
            return d
        };
        window.__await = function(d) {
            return this instanceof __await ? (this.v = d, this) : new __await(d)
        };
        window.__asyncGenerator = function(d, e, c) {
            function a(a) {
                k[a] && (m[a] = function(c) {
                    return new Promise(function(d, e) {
                        1 < p.push([a, c, d, e]) || b(a, c)
                    })
                })
            }

            function b(a, b) {
                try {
                    var c = k[a](b);
                    c.value instanceof __await ?
                        Promise.resolve(c.value.v).then(g, f) : h(p[0][2], c)
                } catch (E) {
                    h(p[0][3], E)
                }
            }

            function g(a) {
                b("next", a)
            }

            function f(a) {
                b("throw", a)
            }

            function h(a, c) {
                (a(c), p.shift(), p.length) && b(p[0][0], p[0][1])
            }
            $jscomp.initSymbol();
            if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
            var k = c.apply(d, e || []),
                m, p = [];
            $jscomp.initSymbol();
            return m = {}, a("next"), a("throw"), a("return"), m[Symbol.asyncIterator] = function() {
                return this
            }, m
        };
        window.__asyncDelegator = function(d) {
            function e(b, e) {
                c[b] = d[b] ?
                    function(c) {
                        return (a = !a) ? {
                            value: __await(d[b](c)),
                            done: "return" === b
                        } : e ? e(c) : c
                    } : e
            }
            var c, a;
            $jscomp.initSymbol();
            $jscomp.initSymbolIterator();
            return c = {}, e("next"), e("throw", function(a) {
                throw a;
            }), e("return"), c[Symbol.iterator] = function() {
                return this
            }, c
        };
        window.__asyncValues = function(d) {
            function e(a) {
                b[a] = d[a] && function(b) {
                    return new Promise(function(e, f) {
                        b = d[a](b);
                        c(e, f, b.done, b.value)
                    })
                }
            }

            function c(a, b, c, d) {
                Promise.resolve(d).then(function(b) {
                    a({
                        value: b,
                        done: c
                    })
                }, b)
            }
            $jscomp.initSymbol();
            if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
            $jscomp.initSymbol();
            var a = d[Symbol.asyncIterator],
                b;
            $jscomp.initSymbol();
            $jscomp.initSymbolIterator();
            $jscomp.initSymbol();
            return a ? a.call(d) : (d = "function" === typeof __values ? __values(d) : d[Symbol.iterator](), b = {}, e("next"), e("throw"), e("return"), b[Symbol.asyncIterator] = function() {
                return this
            }, b)
        };
        window.__makeTemplateObject = function(d, e) {
            Object.defineProperty ? Object.defineProperty(d, "raw", {
                value: e
            }) : d.raw = e;
            return d
        };
        var e = Object.create ? function(d, e) {
            Object.defineProperty(d, "default", {
                enumerable: !0,
                value: e
            })
        } : function(d, e) {
            d["default"] = e
        };
        window.__importStar = function(d) {
            if (d && d.__esModule) return d;
            var g = {};
            if (null != d)
                for (var c in d) "default" !== c && Object.prototype.hasOwnProperty.call(d, c) && __createBinding(g, d, c);
            e(g, d);
            return g
        };
        window.__importDefault = function(d) {
            return d && d.__esModule ? d : {
                default: d
            }
        };
        window.__classPrivateFieldGet = function(d, e) {
            if (!e.has(d)) throw new TypeError("attempted to get private field on non-instance");
            return e.get(d)
        };
        window.__classPrivateFieldSet = function(d, e, c) {
            if (!e.has(d)) throw new TypeError("attempted to set private field on non-instance");
            e.set(d, c);
            return c
        }
    }, {}],
    409: [function(g, q, m) {
        function h(e, c) {
            "undefined" === typeof d[e] && Object.defineProperty(d, e, {
                get: function() {
                    var a;
                    "CC_WECHATGAMESUB" === e ? a = "cc.sys.platform === cc.sys.WECHAT_GAME_SUB" : "CC_WECHATGAME" === e ? a = "cc.sys.platform === cc.sys.WECHAT_GAME" : "CC_QQPLAY" === e && (a = "cc.sys.platform === cc.sys.QQ_PLAY");
                    cc.warnID(1400, e, a);
                    return c
                }
            })
        }

        function e(e) {
            return "object" === typeof d[e]
        }
        var d = "undefined" === typeof window ? global : window;
        (function(e, c) {
            "undefined" === typeof d[e] && (d[e] = c)
        })("CC_BUILD", !1);
        !0;
        d.CC_BUILD = !0;
        d.CC_DEV = !1;
        d.CC_DEBUG = !0;
        d.CC_JSB = !1;
        d.CC_NATIVERENDERER = !1;
        d.CC_SUPPORT_JIT = !0;
        d.CC_PHYSICS_BUILTIN = !1;
        d.CC_PHYSICS_CANNON = !0;
        d.CC_EDITOR = !1;
        d.CC_PREVIEW = !1;
        d.CC_TEST = !1;
        d.CC_RUNTIME = !1;
        d.CC_JSB = !1;
        g = !(!e("wx") || !wx.getSharedCanvas);
        q = !(!e("wx") || !wx.getSystemInfoSync && !wx.getSharedCanvas);
        m = e("bk");
        h("CC_WECHATGAMESUB", g);
        h("CC_WECHATGAME", q);
        h("CC_QQPLAY", m);
        !1;
        d.CocosEngine = cc.ENGINE_VERSION = "2.4.13"
    }, {}]
}, {}, [401]);